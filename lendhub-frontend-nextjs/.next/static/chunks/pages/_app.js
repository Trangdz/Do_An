/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["pages/_app"],{

/***/ "(pages-dir-browser)/./node_modules/@adraffy/ens-normalize/dist/index.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@adraffy/ens-normalize/dist/index.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ens_beautify: () => (/* binding */ ens_beautify),\n/* harmony export */   ens_emoji: () => (/* binding */ ens_emoji),\n/* harmony export */   ens_normalize: () => (/* binding */ ens_normalize),\n/* harmony export */   ens_normalize_fragment: () => (/* binding */ ens_normalize_fragment),\n/* harmony export */   ens_split: () => (/* binding */ ens_split),\n/* harmony export */   ens_tokenize: () => (/* binding */ ens_tokenize),\n/* harmony export */   is_combining_mark: () => (/* binding */ is_combining_mark),\n/* harmony export */   nfc: () => (/* binding */ nfc),\n/* harmony export */   nfd: () => (/* binding */ nfd),\n/* harmony export */   safe_str_from_cps: () => (/* binding */ safe_str_from_cps),\n/* harmony export */   should_escape: () => (/* binding */ should_escape)\n/* harmony export */ });\n// created 2023-09-25T01:01:55.148Z\r\n// compressed base64-encoded blob for include-ens data\r\n// source: https://github.com/adraffy/ens-normalize.js/blob/main/src/make.js\r\n// see: https://github.com/adraffy/ens-normalize.js#security\r\n// SHA-256: 0565ed049b9cf1614bb9e11ba7d8ac6a6fb96c893253d890f7e2b2884b9ded32\r\nvar COMPRESSED$1 = '';\r\nconst FENCED = new Map([[8217,\"apostrophe\"],[8260,\"fraction slash\"],[12539,\"middle dot\"]]);\r\nconst NSM_MAX = 4;\r\n\r\nfunction decode_arithmetic(bytes) {\r\n\tlet pos = 0;\r\n\tfunction u16() { return (bytes[pos++] << 8) | bytes[pos++]; }\r\n\t\r\n\t// decode the frequency table\r\n\tlet symbol_count = u16();\r\n\tlet total = 1;\r\n\tlet acc = [0, 1]; // first symbol has frequency 1\r\n\tfor (let i = 1; i < symbol_count; i++) {\r\n\t\tacc.push(total += u16());\r\n\t}\r\n\r\n\t// skip the sized-payload that the last 3 symbols index into\r\n\tlet skip = u16();\r\n\tlet pos_payload = pos;\r\n\tpos += skip;\r\n\r\n\tlet read_width = 0;\r\n\tlet read_buffer = 0; \r\n\tfunction read_bit() {\r\n\t\tif (read_width == 0) {\r\n\t\t\t// this will read beyond end of buffer\r\n\t\t\t// but (undefined|0) => zero pad\r\n\t\t\tread_buffer = (read_buffer << 8) | bytes[pos++];\r\n\t\t\tread_width = 8;\r\n\t\t}\r\n\t\treturn (read_buffer >> --read_width) & 1;\r\n\t}\r\n\r\n\tconst N = 31;\r\n\tconst FULL = 2**N;\r\n\tconst HALF = FULL >>> 1;\r\n\tconst QRTR = HALF >> 1;\r\n\tconst MASK = FULL - 1;\r\n\r\n\t// fill register\r\n\tlet register = 0;\r\n\tfor (let i = 0; i < N; i++) register = (register << 1) | read_bit();\r\n\r\n\tlet symbols = [];\r\n\tlet low = 0;\r\n\tlet range = FULL; // treat like a float\r\n\twhile (true) {\r\n\t\tlet value = Math.floor((((register - low + 1) * total) - 1) / range);\r\n\t\tlet start = 0;\r\n\t\tlet end = symbol_count;\r\n\t\twhile (end - start > 1) { // binary search\r\n\t\t\tlet mid = (start + end) >>> 1;\r\n\t\t\tif (value < acc[mid]) {\r\n\t\t\t\tend = mid;\r\n\t\t\t} else {\r\n\t\t\t\tstart = mid;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (start == 0) break; // first symbol is end mark\r\n\t\tsymbols.push(start);\r\n\t\tlet a = low + Math.floor(range * acc[start]   / total);\r\n\t\tlet b = low + Math.floor(range * acc[start+1] / total) - 1;\r\n\t\twhile (((a ^ b) & HALF) == 0) {\r\n\t\t\tregister = (register << 1) & MASK | read_bit();\r\n\t\t\ta = (a << 1) & MASK;\r\n\t\t\tb = (b << 1) & MASK | 1;\r\n\t\t}\r\n\t\twhile (a & ~b & QRTR) {\r\n\t\t\tregister = (register & HALF) | ((register << 1) & (MASK >>> 1)) | read_bit();\r\n\t\t\ta = (a << 1) ^ HALF;\r\n\t\t\tb = ((b ^ HALF) << 1) | HALF | 1;\r\n\t\t}\r\n\t\tlow = a;\r\n\t\trange = 1 + b - a;\r\n\t}\r\n\tlet offset = symbol_count - 4;\r\n\treturn symbols.map(x => { // index into payload\r\n\t\tswitch (x - offset) {\r\n\t\t\tcase 3: return offset + 0x10100 + ((bytes[pos_payload++] << 16) | (bytes[pos_payload++] << 8) | bytes[pos_payload++]);\r\n\t\t\tcase 2: return offset + 0x100 + ((bytes[pos_payload++] << 8) | bytes[pos_payload++]);\r\n\t\t\tcase 1: return offset + bytes[pos_payload++];\r\n\t\t\tdefault: return x - 1;\r\n\t\t}\r\n\t});\r\n}\t\r\n\r\n// returns an iterator which returns the next symbol\r\nfunction read_payload(v) {\r\n\tlet pos = 0;\r\n\treturn () => v[pos++];\r\n}\r\nfunction read_compressed_payload(s) {\r\n\treturn read_payload(decode_arithmetic(unsafe_atob(s)));\r\n}\r\n\r\n// unsafe in the sense:\r\n// expected well-formed Base64 w/o padding \r\n// 20220922: added for https://github.com/adraffy/ens-normalize.js/issues/4\r\nfunction unsafe_atob(s) {\r\n\tlet lookup = [];\r\n\t[...'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'].forEach((c, i) => lookup[c.charCodeAt(0)] = i);\r\n\tlet n = s.length;\r\n\tlet ret = new Uint8Array((6 * n) >> 3);\r\n\tfor (let i = 0, pos = 0, width = 0, carry = 0; i < n; i++) {\r\n\t\tcarry = (carry << 6) | lookup[s.charCodeAt(i)];\r\n\t\twidth += 6;\r\n\t\tif (width >= 8) {\r\n\t\t\tret[pos++] = (carry >> (width -= 8));\r\n\t\t}\r\n\t}\r\n\treturn ret;\r\n}\r\n\r\n// eg. [0,1,2,3...] => [0,-1,1,-2,...]\r\nfunction signed(i) { \r\n\treturn (i & 1) ? (~i >> 1) : (i >> 1);\r\n}\r\n\r\nfunction read_deltas(n, next) {\r\n\tlet v = Array(n);\r\n\tfor (let i = 0, x = 0; i < n; i++) v[i] = x += signed(next());\r\n\treturn v;\r\n}\r\n\r\n// [123][5] => [0 3] [1 1] [0 0]\r\nfunction read_sorted(next, prev = 0) {\r\n\tlet ret = [];\r\n\twhile (true) {\r\n\t\tlet x = next();\r\n\t\tlet n = next();\r\n\t\tif (!n) break;\r\n\t\tprev += x;\r\n\t\tfor (let i = 0; i < n; i++) {\r\n\t\t\tret.push(prev + i);\r\n\t\t}\r\n\t\tprev += n + 1;\r\n\t}\r\n\treturn ret;\r\n}\r\n\r\nfunction read_sorted_arrays(next) {\r\n\treturn read_array_while(() => { \r\n\t\tlet v = read_sorted(next);\r\n\t\tif (v.length) return v;\r\n\t});\r\n}\r\n\r\n// returns map of x => ys\r\nfunction read_mapped(next) {\r\n\tlet ret = [];\r\n\twhile (true) {\r\n\t\tlet w = next();\r\n\t\tif (w == 0) break;\r\n\t\tret.push(read_linear_table(w, next));\r\n\t}\r\n\twhile (true) {\r\n\t\tlet w = next() - 1;\r\n\t\tif (w < 0) break;\r\n\t\tret.push(read_replacement_table(w, next));\r\n\t}\r\n\treturn ret.flat();\r\n}\r\n\r\n// read until next is falsy\r\n// return array of read values\r\nfunction read_array_while(next) {\r\n\tlet v = [];\r\n\twhile (true) {\r\n\t\tlet x = next(v.length);\r\n\t\tif (!x) break;\r\n\t\tv.push(x);\r\n\t}\r\n\treturn v;\r\n}\r\n\r\n// read w columns of length n\r\n// return as n rows of length w\r\nfunction read_transposed(n, w, next) {\r\n\tlet m = Array(n).fill().map(() => []);\r\n\tfor (let i = 0; i < w; i++) {\r\n\t\tread_deltas(n, next).forEach((x, j) => m[j].push(x));\r\n\t}\r\n\treturn m;\r\n}\r\n \r\n// returns [[x, ys], [x+dx, ys+dy], [x+2*dx, ys+2*dy], ...]\r\n// where dx/dy = steps, n = run size, w = length of y\r\nfunction read_linear_table(w, next) {\r\n\tlet dx = 1 + next();\r\n\tlet dy = next();\r\n\tlet vN = read_array_while(next);\r\n\tlet m = read_transposed(vN.length, 1+w, next);\r\n\treturn m.flatMap((v, i) => {\r\n\t\tlet [x, ...ys] = v;\r\n\t\treturn Array(vN[i]).fill().map((_, j) => {\r\n\t\t\tlet j_dy = j * dy;\r\n\t\t\treturn [x + j * dx, ys.map(y => y + j_dy)];\r\n\t\t});\r\n\t});\r\n}\r\n\r\n// return [[x, ys...], ...]\r\n// where w = length of y\r\nfunction read_replacement_table(w, next) { \r\n\tlet n = 1 + next();\r\n\tlet m = read_transposed(n, 1+w, next);\r\n\treturn m.map(v => [v[0], v.slice(1)]);\r\n}\r\n\r\n\r\nfunction read_trie(next) {\r\n\tlet ret = [];\r\n\tlet sorted = read_sorted(next); \r\n\texpand(decode([]), []);\r\n\treturn ret; // not sorted\r\n\tfunction decode(Q) { // characters that lead into this node\r\n\t\tlet S = next(); // state: valid, save, check\r\n\t\tlet B = read_array_while(() => { // buckets leading to new nodes\r\n\t\t\tlet cps = read_sorted(next).map(i => sorted[i]);\r\n\t\t\tif (cps.length) return decode(cps);\r\n\t\t});\r\n\t\treturn {S, B, Q};\r\n\t}\r\n\tfunction expand({S, B}, cps, saved) {\r\n\t\tif (S & 4 && saved === cps[cps.length-1]) return;\r\n\t\tif (S & 2) saved = cps[cps.length-1];\r\n\t\tif (S & 1) ret.push(cps); \r\n\t\tfor (let br of B) {\r\n\t\t\tfor (let cp of br.Q) {\r\n\t\t\t\texpand(br, [...cps, cp], saved);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction hex_cp(cp) {\r\n\treturn cp.toString(16).toUpperCase().padStart(2, '0');\r\n}\r\n\r\nfunction quote_cp(cp) {\r\n\treturn `{${hex_cp(cp)}}`; // raffy convention: like \"\\u{X}\" w/o the \"\\u\"\r\n}\r\n\r\n/*\r\nexport function explode_cp(s) {\r\n\treturn [...s].map(c => c.codePointAt(0));\r\n}\r\n*/\r\nfunction explode_cp(s) { // this is about 2x faster\r\n\tlet cps = [];\r\n\tfor (let pos = 0, len = s.length; pos < len; ) {\r\n\t\tlet cp = s.codePointAt(pos);\r\n\t\tpos += cp < 0x10000 ? 1 : 2;\r\n\t\tcps.push(cp);\r\n\t}\r\n\treturn cps;\r\n}\r\n\r\nfunction str_from_cps(cps) {\r\n\tconst chunk = 4096;\r\n\tlet len = cps.length;\r\n\tif (len < chunk) return String.fromCodePoint(...cps);\r\n\tlet buf = [];\r\n\tfor (let i = 0; i < len; ) {\r\n\t\tbuf.push(String.fromCodePoint(...cps.slice(i, i += chunk)));\r\n\t}\r\n\treturn buf.join('');\r\n}\r\n\r\nfunction compare_arrays(a, b) {\r\n\tlet n = a.length;\r\n\tlet c = n - b.length;\r\n\tfor (let i = 0; c == 0 && i < n; i++) c = a[i] - b[i];\r\n\treturn c;\r\n}\r\n\r\n// created 2023-09-25T01:01:55.148Z\r\n// compressed base64-encoded blob for include-nf data\r\n// source: https://github.com/adraffy/ens-normalize.js/blob/main/src/make.js\r\n// see: https://github.com/adraffy/ens-normalize.js#security\r\n// SHA-256: a974b6f8541fc29d919bc85118af0a44015851fab5343f8679cb31be2bdb209e\r\nvar COMPRESSED = 'AEUDTAHBCFQATQDRADAAcgAgADQAFAAsABQAHwAOACQADQARAAoAFwAHABIACAAPAAUACwAFAAwABAAQAAMABwAEAAoABQAIAAIACgABAAQAFAALAAIACwABAAIAAQAHAAMAAwAEAAsADAAMAAwACgANAA0AAwAKAAkABAAdAAYAZwDSAdsDJgC0CkMB8xhZAqfoC190UGcThgBurwf7PT09Pb09AjgJum8OjDllxHYUKXAPxzq6tABAxgK8ysUvWAgMPT09PT09PSs6LT2HcgWXWwFLoSMEEEl5RFVMKvO0XQ8ExDdJMnIgsj26PTQyy8FfEQ8AY8IPAGcEbwRwBHEEcgRzBHQEdQR2BHcEeAR6BHsEfAR+BIAEgfndBQoBYgULAWIFDAFiBNcE2ATZBRAFEQUvBdALFAsVDPcNBw13DYcOMA4xDjMB4BllHI0B2grbAMDpHLkQ7QHVAPRNQQFnGRUEg0yEB2uaJF8AJpIBpob5AERSMAKNoAXqaQLUBMCzEiACnwRZEkkVsS7tANAsBG0RuAQLEPABv9HICTUBXigPZwRBApMDOwAamhtaABqEAY8KvKx3LQ4ArAB8UhwEBAVSagD8AEFZADkBIadVj2UMUgx5Il4ANQC9AxIB1BlbEPMAs30CGxlXAhwZKQIECBc6EbsCoxngzv7UzRQA8M0BawL6ZwkN7wABAD33OQRcsgLJCjMCjqUChtw/km+NAsXPAoP2BT84PwURAK0RAvptb6cApQS/OMMey5HJS84UdxpxTPkCogVFITaTOwERAK5pAvkNBOVyA7q3BKlOJSALAgUIBRcEdASpBXqzABXFSWZOawLCOqw//AolCZdvv3dSBkEQGyelEPcMMwG1ATsN7UvYBPEGOwTJH30ZGQ/NlZwIpS3dDO0m4y6hgFoj9SqDBe1L9DzdC01RaA9ZC2UJ4zpjgU4DIQENIosK3Q05CG0Q8wrJaw3lEUUHOQPVSZoApQcBCxEdNRW1JhBirAsJOXcG+xr2C48mrxMpevwF0xohBk0BKRr/AM8u54WwWjFcHE9fBgMLJSPHFKhQIA0lQLd4SBobBxUlqQKRQ3BKh1E2HpMh9jw9DWYuE1F8B/U8BRlPC4E8nkarRQ4R0j6NPUgiSUwsBDV/LC8niwnPD4UMuXxyAVkJIQmxDHETMREXN8UIOQcZLZckJxUIIUaVYJoE958D8xPRAwsFPwlBBxMDtRwtEy4VKQUNgSTXAvM21S6zAo9WgAEXBcsPJR/fEFBH4A7pCJsCZQODJesALRUhABcimwhDYwBfj9hTBS7LCMdqbCN0A2cU52ERcweRDlcHpxwzFb8c4XDIXguGCCijrwlbAXUJmQFfBOMICTVbjKAgQWdTi1gYmyBhQT9d/AIxDGUVn0S9h3gCiw9rEhsBNQFzBzkNAQJ3Ee0RaxCVCOuGBDW1M/g6JQRPIYMgEQonA09szgsnJvkM+GkBoxJiAww0PXfuZ6tgtiQX/QcZMsVBYCHxC5JPzQycGsEYQlQuGeQHvwPzGvMn6kFXBf8DowMTOk0z7gS9C2kIiwk/AEkOoxcH1xhqCnGM0AExiwG3mQNXkYMCb48GNwcLAGcLhwV55QAdAqcIowAFAM8DVwA5Aq0HnQAZAIVBAT0DJy8BIeUCjwOTCDHLAZUvAfMpBBvDDBUA9zduSgLDsQKAamaiBd1YAo4CSTUBTSUEBU5HUQOvceEA2wBLBhPfRwEVq0rLGuNDAd9vKwDHAPsABTUHBUEBzQHzbQC3AV8LMQmis7UBTekpAIMAFWsB1wKJAN0ANQB/8QFTAE0FWfkF0wJPSQERMRgrV2EBuwMfATMBDQB5BsuNpckHHwRtB9MCEBsV4QLvLge1AQMi3xPNQsUCvd5VoWACZIECYkJbTa9bNyACofcCaJgCZgkCn4Q4GwsCZjsCZiYEbgR/A38TA36SOQY5dxc5gjojIwJsHQIyNjgKAm3HAm2u74ozZ0UrAWcA3gDhAEoFB5gMjQD+C8IADbUCdy8CdqI/AnlLQwJ4uh1c20WuRtcCfD8CesgCfQkCfPAFWQUgSABIfWMkAoFtAoAAAoAFAn+uSVhKWxUXSswC0QEC0MxLJwOITwOH5kTFkTIC8qFdAwMDrkvOTC0lA89NTE2vAos/AorYwRsHHUNnBbcCjjcCjlxAl4ECjtkCjlx4UbRTNQpS1FSFApP7ApMMAOkAHFUeVa9V0AYsGymVhjLheGZFOzkCl58C77JYIagAWSUClo8ClnycAKlZrFoJgU0AOwKWtQKWTlxEXNECmcsCmWRcyl0HGQKcmznCOp0CnBYCn5sCnriKAB0PMSoPAp3xAp6SALU9YTRh7wKe0wKgbgGpAp6fHwKeTqVjyGQnJSsCJ68CJn4CoPsCoEwCot0CocQCpi8Cpc4Cp/8AfQKn8mh8aLEAA0lqHGrRAqzjAqyuAq1nAq0CAlcdAlXcArHh1wMfTmyXArK9DQKy6Bds4G1jbUhfAyXNArZcOz9ukAMpRQK4XgK5RxUCuSp3cDZw4QK9GQK72nCWAzIRAr6IcgIDM3ECvhpzInNPAsPLAsMEc4J0SzVFdOADPKcDPJoDPb8CxXwCxkcCxhCJAshpUQLIRALJTwLJLgJknQLd0nh5YXiueSVL0AMYo2cCAmH0GfOVJHsLXpJeuxECz2sCz2wvS1PS8xOfAMatAs9zASnqA04SfksFAtwnAtuKAtJPA1JcA1NfAQEDVYyAiT8AyxbtYEWCHILTgs6DjQLaxwLZ3oQQhEmnPAOGpQAvA2QOhnFZ+QBVAt9lAt64c3cC4i/tFAHzMCcB9JsB8tKHAuvzAulweQLq+QLq5AD5RwG5Au6JAuuclqqXAwLuPwOF4Jh5cOBxoQLzAwBpA44WmZMC9xMDkW4DkocC95gC+dkC+GaaHJqruzebHgOdgwL++gEbADmfHJ+zAwWNA6ZqA6bZANHFAwZqoYiiBQkDDEkCwAA/AwDhQRdTARHzA2sHl2cFAJMtK7evvdsBiZkUfxEEOQH7KQUhDp0JnwCS/SlXxQL3AZ0AtwW5AG8LbUEuFCaNLgFDAYD8AbUmAHUDDgRtACwCFgyhAAAKAj0CagPdA34EkQEgRQUhfAoABQBEABMANhICdwEABdUDa+8KxQIA9wqfJ7+xt+UBkSFBQgHpFH8RNMCJAAQAGwBaAkUChIsABjpTOpSNbQC4Oo860ACNOME63AClAOgAywE6gTo7Ofw5+Tt2iTpbO56JOm85GAFWATMBbAUvNV01njWtNWY1dTW2NcU1gjWRNdI14TWeNa017jX9NbI1wTYCNhE1xjXVNhY2JzXeNe02LjY9Ni41LSE2OjY9Njw2yTcIBJA8VzY4Nt03IDcPNsogN4k3MAoEsDxnNiQ3GTdsOo03IULUQwdC4EMLHA8PCZsobShRVQYA6X8A6bABFCnXAukBowC9BbcAbwNzBL8MDAMMAQgDAAkKCwsLCQoGBAVVBI/DvwDz9b29kaUCb0QtsRTNLt4eGBcSHAMZFhYZEhYEARAEBUEcQRxBHEEcQRxBHEEaQRxBHEFCSTxBPElISUhBNkM2QTYbNklISVmBVIgBFLWZAu0BhQCjBcEAbykBvwGJAaQcEZ0ePCklMAAhMvAIMAL54gC7Bm8EescjzQMpARQpKgDUABavAj626xQAJP0A3etzuf4NNRA7efy2Z9NQrCnC0OSyANz5BBIbJ5IFDR6miIavYS6tprjjmuKebxm5C74Q225X1pkaYYPb6f1DK4k3xMEBb9S2WMjEibTNWhsRJIA+vwNVEiXTE5iXs/wezV66oFLfp9NZGYW+Gk19J2+bCT6Ye2w6LDYdgzKMUabk595eLBCXANz9HUpWbATq9vqXVx9XDg+Pc9Xp4+bsS005SVM/BJBM4687WUuf+Uj9dEi8aDNaPxtpbDxcG1THTImUMZq4UCaaNYpsVqraNyKLJXDYsFZ/5jl7bLRtO88t7P3xZaAxhb5OdPMXqsSkp1WCieG8jXm1U99+blvLlXzPCS+M93VnJCiK+09LfaSaBAVBomyDgJua8dfUzR7ga34IvR2Nvj+A9heJ6lsl1KG4NkI1032Cnff1m1wof2B9oHJK4bi6JkEdSqeNeiuo6QoZZincoc73/TH9SXF8sCE7XyuYyW8WSgbGFCjPV0ihLKhdPs08Tx82fYAkLLc4I2wdl4apY7GU5lHRFzRWJep7Ww3wbeA3qmd59/86P4xuNaqDpygXt6M85glSBHOCGgJDnt+pN9bK7HApMguX6+06RZNjzVmcZJ+wcUrJ9//bpRNxNuKpNl9uFds+S9tdx7LaM5ZkIrPj6nIU9mnbFtVbs9s/uLgl8MVczAwet+iOEzzBlYW7RCMgE6gyNLeq6+1tIx4dpgZnd0DksJS5f+JNDpwwcPNXaaVspq1fbQajOrJgK0ofKtJ1Ne90L6VO4MOl5S886p7u6xo7OLjG8TGL+HU1JXGJgppg4nNbNJ5nlzSpuPYy21JUEcUA94PoFiZfjZue+QnyQ80ekOuZVkxx4g+cvhJfHgNl4hy1/a6+RKcKlar/J29y//EztlbVPHVUeQ1zX86eQVAjR/M3dA9w4W8LfaXp4EgM85wOWasli837PzVMOnsLzR+k3o75/lRPAJSE1xAKQzEi5v10ke+VBvRt1cwQRMd+U5mLCTGVd6XiZtgBG5cDi0w22GKcVNvHiu5LQbZEDVtz0onn7k5+heuKXVsZtSzilkLRAUmjMXEMB3J9YC50XBxPiz53SC+EhnPl9WsKCv92SM/OFFIMJZYfl0WW8tIO3UxYcwdMAj7FSmgrsZ2aAZO03BOhP1bNNZItyXYQFTpC3SG1VuPDqH9GkiCDmE+JwxyIVSO5siDErAOpEXFgjy6PQtOVDj+s6e1r8heWVvmZnTciuf4EiNZzCAd7SOMhXERIOlsHIMG399i9aLTy3m2hRLZjJVDNLS53iGIK11dPqQt0zBDyg6qc7YqkDm2M5Ve6dCWCaCbTXX2rToaIgz6+zh4lYUi/+6nqcFMAkQJKHYLK0wYk5N9szV6xihDbDDFr45lN1K4aCXBq/FitPSud9gLt5ZVn+ZqGX7cwm2z5EGMgfFpIFyhGGuDPmso6TItTMwny+7uPnLCf4W6goFQFV0oQSsc9VfMmVLcLr6ZetDZbaSFTLqnSO/bIPjA3/zAUoqgGFAEQS4IhuMzEp2I3jJzbzkk/IEmyax+rhZTwd6f+CGtwPixu8IvzACquPWPREu9ZvGkUzpRwvRRuaNN6cr0W1wWits9ICdYJ7ltbgMiSL3sTPeufgNcVqMVWFkCPDH4jG2jA0XcVgQj62Cb29v9f/z/+2KbYvIv/zzjpQAPkliaVDzNrW57TZ/ZOyZD0nlfMmAIBIAGAI0D3k/mdN4xr9v85ZbZbbqfH2jGd5hUqNZWwl5SPfoGmfElmazUIeNL1j/mkF7VNAzTq4jNt8JoQ11NQOcmhprXoxSxfRGJ9LDEOAQ+dmxAQH90iti9e2u/MoeuaGcDTHoC+xsmEeWmxEKefQuIzHbpw5Tc5cEocboAD09oipWQhtTO1wivf/O+DRe2rpl/E9wlrzBorjJsOeG1B/XPW4EaJEFdNlECEZga5ZoGRHXgYouGRuVkm8tDESiEyFNo+3s5M5puSdTyUL2llnINVHEt91XUNW4ewdMgJ4boJfEyt/iY5WXqbA+A2Fkt5Z0lutiWhe9nZIyIUjyXDC3UsaG1t+eNx6z4W/OYoTB7A6x+dNSTOi9AInctbESqm5gvOLww7OWXPrmHwVZasrl4eD113pm+JtT7JVOvnCXqdzzdTRHgJ0PiGTFYW5Gvt9R9LD6Lzfs0v/TZZHSmyVNq7viIHE6DBK7Qp07Iz55EM8SYtQvZf/obBniTWi5C2/ovHfw4VndkE5XYdjOhCMRjDeOEfXeN/CwfGduiUIfsoFeUxXeQXba7c7972XNv8w+dTjjUM0QeNAReW+J014dKAD/McQYXT7c0GQPIkn3Ll6R7gGjuiQoZD0TEeEqQpKoZ15g/0OPQI17QiSv9AUROa/V/TQN3dvLArec3RrsYlvBm1b8LWzltdugsC50lNKYLEp2a+ZZYqPejULRlOJh5zj/LVMyTDvwKhMxxwuDkxJ1QpoNI0OTWLom4Z71SNzI9TV1iXJrIu9Wcnd+MCaAw8o1jSXd94YU/1gnkrC9BUEOtQvEIQ7g0i6h+KL2JKk8Ydl7HruvgWMSAmNe+LshGhV4qnWHhO9/RIPQzY1tHRj2VqOyNsDpK0cww+56AdDC4gsWwY0XxoucIWIqs/GcwnWqlaT0KPr8mbK5U94/301i1WLt4YINTVvCFBrFZbIbY8eycOdeJ2teD5IfPLCRg7jjcFTwlMFNl9zdh/o3E/hHPwj7BWg0MU09pPrBLbrCgm54A6H+I6v27+jL5gkjWg/iYdks9jbfVP5y/n0dlgWEMlKasl7JvFZd56LfybW1eeaVO0gxTfXZwD8G4SI116yx7UKVRgui6Ya1YpixqXeNLc8IxtAwCU5IhwQgn+NqHnRaDv61CxKhOq4pOX7M6pkA+Pmpd4j1vn6ACUALoLLc4vpXci8VidLxzm7qFBe7s+quuJs6ETYmnpgS3LwSZxPIltgBDXz8M1k/W2ySNv2f9/NPhxLGK2D21dkHeSGmenRT3Yqcdl0m/h3OYr8V+lXNYGf8aCCpd4bWjE4QIPj7vUKN4Nrfs7ML6Y2OyS830JCnofg/k7lpFpt4SqZc5HGg1HCOrHvOdC8bP6FGDbE/VV0mX4IakzbdS/op+Kt3G24/8QbBV7y86sGSQ/vZzU8FXs7u6jIvwchsEP2BpIhW3G8uWNwa3HmjfH/ZjhhCWvluAcF+nMf14ClKg5hGgtPLJ98ueNAkc5Hs2WZlk2QHvfreCK1CCGO6nMZVSb99VM/ajr8WHTte9JSmkXq/i/U943HEbdzW6Re/S88dKgg8pGOLlAeNiqrcLkUR3/aClFpMXcOUP3rmETcWSfMXZE3TUOi8i+fqRnTYLflVx/Vb/6GJ7eIRZUA6k3RYR3iFSK9c4iDdNwJuZL2FKz/IK5VimcNWEqdXjSoxSgmF0UPlDoUlNrPcM7ftmA8Y9gKiqKEHuWN+AZRIwtVSxye2Kf8rM3lhJ5XcBXU9n4v0Oy1RU2M+4qM8AQPVwse8ErNSob5oFPWxuqZnVzo1qB/IBxkM3EVUKFUUlO3e51259GgNcJbCmlvrdjtoTW7rChm1wyCKzpCTwozUUEOIcWLneRLgMXh+SjGSFkAllzbGS5HK7LlfCMRNRDSvbQPjcXaenNYxCvu2Qyznz6StuxVj66SgI0T8B6/sfHAJYZaZ78thjOSIFumNWLQbeZixDCCC+v0YBtkxiBB3jefHqZ/dFHU+crbj6OvS1x/JDD7vlm7zOVPwpUC01nhxZuY/63E7g';\r\n\r\n// https://unicode.org/reports/tr15/\r\n// for reference implementation\r\n// see: /derive/nf.js\r\n\r\n\r\n// algorithmic hangul\r\n// https://www.unicode.org/versions/Unicode15.0.0/ch03.pdf (page 144)\r\nconst S0 = 0xAC00;\r\nconst L0 = 0x1100;\r\nconst V0 = 0x1161;\r\nconst T0 = 0x11A7;\r\nconst L_COUNT = 19;\r\nconst V_COUNT = 21;\r\nconst T_COUNT = 28;\r\nconst N_COUNT = V_COUNT * T_COUNT;\r\nconst S_COUNT = L_COUNT * N_COUNT;\r\nconst S1 = S0 + S_COUNT;\r\nconst L1 = L0 + L_COUNT;\r\nconst V1 = V0 + V_COUNT;\r\nconst T1 = T0 + T_COUNT;\r\n\r\nfunction unpack_cc(packed) {\r\n\treturn (packed >> 24) & 0xFF;\r\n}\r\nfunction unpack_cp(packed) {\r\n\treturn packed & 0xFFFFFF;\r\n}\r\n\r\nlet SHIFTED_RANK, EXCLUSIONS, DECOMP, RECOMP;\r\n\r\nfunction init$1() {\r\n\t//console.time('nf');\r\n\tlet r = read_compressed_payload(COMPRESSED);\r\n\tSHIFTED_RANK = new Map(read_sorted_arrays(r).flatMap((v, i) => v.map(x => [x, (i+1) << 24]))); // pre-shifted\r\n\tEXCLUSIONS = new Set(read_sorted(r));\r\n\tDECOMP = new Map();\r\n\tRECOMP = new Map();\r\n\tfor (let [cp, cps] of read_mapped(r)) {\r\n\t\tif (!EXCLUSIONS.has(cp) && cps.length == 2) {\r\n\t\t\tlet [a, b] = cps;\r\n\t\t\tlet bucket = RECOMP.get(a);\r\n\t\t\tif (!bucket) {\r\n\t\t\t\tbucket = new Map();\r\n\t\t\t\tRECOMP.set(a, bucket);\r\n\t\t\t}\r\n\t\t\tbucket.set(b, cp);\r\n\t\t}\r\n\t\tDECOMP.set(cp, cps.reverse()); // stored reversed\r\n\t}\r\n\t//console.timeEnd('nf');\r\n\t// 20230905: 11ms\r\n}\r\n\r\nfunction is_hangul(cp) {\r\n\treturn cp >= S0 && cp < S1;\r\n}\r\n\r\nfunction compose_pair(a, b) {\r\n\tif (a >= L0 && a < L1 && b >= V0 && b < V1) {\r\n\t\treturn S0 + (a - L0) * N_COUNT + (b - V0) * T_COUNT;\r\n\t} else if (is_hangul(a) && b > T0 && b < T1 && (a - S0) % T_COUNT == 0) {\r\n\t\treturn a + (b - T0);\r\n\t} else {\r\n\t\tlet recomp = RECOMP.get(a);\r\n\t\tif (recomp) {\r\n\t\t\trecomp = recomp.get(b);\r\n\t\t\tif (recomp) {\r\n\t\t\t\treturn recomp;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn -1;\r\n\t}\r\n}\r\n\r\nfunction decomposed(cps) {\r\n\tif (!SHIFTED_RANK) init$1();\r\n\tlet ret = [];\r\n\tlet buf = [];\r\n\tlet check_order = false;\r\n\tfunction add(cp) {\r\n\t\tlet cc = SHIFTED_RANK.get(cp);\r\n\t\tif (cc) {\r\n\t\t\tcheck_order = true;\r\n\t\t\tcp |= cc;\r\n\t\t}\r\n\t\tret.push(cp);\r\n\t}\r\n\tfor (let cp of cps) {\r\n\t\twhile (true) {\r\n\t\t\tif (cp < 0x80) {\r\n\t\t\t\tret.push(cp);\r\n\t\t\t} else if (is_hangul(cp)) {\r\n\t\t\t\tlet s_index = cp - S0;\r\n\t\t\t\tlet l_index = s_index / N_COUNT | 0;\r\n\t\t\t\tlet v_index = (s_index % N_COUNT) / T_COUNT | 0;\r\n\t\t\t\tlet t_index = s_index % T_COUNT;\r\n\t\t\t\tadd(L0 + l_index);\r\n\t\t\t\tadd(V0 + v_index);\r\n\t\t\t\tif (t_index > 0) add(T0 + t_index);\r\n\t\t\t} else {\r\n\t\t\t\tlet mapped = DECOMP.get(cp);\r\n\t\t\t\tif (mapped) {\r\n\t\t\t\t\tbuf.push(...mapped);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tadd(cp);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!buf.length) break;\r\n\t\t\tcp = buf.pop();\r\n\t\t}\r\n\t}\r\n\tif (check_order && ret.length > 1) {\r\n\t\tlet prev_cc = unpack_cc(ret[0]);\r\n\t\tfor (let i = 1; i < ret.length; i++) {\r\n\t\t\tlet cc = unpack_cc(ret[i]);\r\n\t\t\tif (cc == 0 || prev_cc <= cc) {\r\n\t\t\t\tprev_cc = cc;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tlet j = i-1;\r\n\t\t\twhile (true) {\r\n\t\t\t\tlet tmp = ret[j+1];\r\n\t\t\t\tret[j+1] = ret[j];\r\n\t\t\t\tret[j] = tmp;\r\n\t\t\t\tif (!j) break;\r\n\t\t\t\tprev_cc = unpack_cc(ret[--j]);\r\n\t\t\t\tif (prev_cc <= cc) break;\r\n\t\t\t}\r\n\t\t\tprev_cc = unpack_cc(ret[i]);\r\n\t\t}\r\n\t}\r\n\treturn ret;\r\n}\r\n\r\nfunction composed_from_decomposed(v) {\r\n\tlet ret = [];\r\n\tlet stack = [];\r\n\tlet prev_cp = -1;\r\n\tlet prev_cc = 0;\r\n\tfor (let packed of v) {\r\n\t\tlet cc = unpack_cc(packed);\r\n\t\tlet cp = unpack_cp(packed);\r\n\t\tif (prev_cp == -1) {\r\n\t\t\tif (cc == 0) {\r\n\t\t\t\tprev_cp = cp;\r\n\t\t\t} else {\r\n\t\t\t\tret.push(cp);\r\n\t\t\t}\r\n\t\t} else if (prev_cc > 0 && prev_cc >= cc) {\r\n\t\t\tif (cc == 0) {\r\n\t\t\t\tret.push(prev_cp, ...stack);\r\n\t\t\t\tstack.length = 0;\r\n\t\t\t\tprev_cp = cp;\r\n\t\t\t} else {\r\n\t\t\t\tstack.push(cp);\r\n\t\t\t}\r\n\t\t\tprev_cc = cc;\r\n\t\t} else {\r\n\t\t\tlet composed = compose_pair(prev_cp, cp);\r\n\t\t\tif (composed >= 0) {\r\n\t\t\t\tprev_cp = composed;\r\n\t\t\t} else if (prev_cc == 0 && cc == 0) {\r\n\t\t\t\tret.push(prev_cp);\r\n\t\t\t\tprev_cp = cp;\r\n\t\t\t} else {\r\n\t\t\t\tstack.push(cp);\r\n\t\t\t\tprev_cc = cc;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (prev_cp >= 0) {\r\n\t\tret.push(prev_cp, ...stack);\t\r\n\t}\r\n\treturn ret;\r\n}\r\n\r\n// note: cps can be iterable\r\nfunction nfd(cps) {\r\n\treturn decomposed(cps).map(unpack_cp);\r\n}\r\nfunction nfc(cps) {\r\n\treturn composed_from_decomposed(decomposed(cps));\r\n}\r\n\r\nconst HYPHEN = 0x2D;\r\nconst STOP = 0x2E;\r\nconst STOP_CH = '.';\r\nconst FE0F = 0xFE0F;\r\nconst UNIQUE_PH = 1;\r\n\r\n// 20230913: replace [...v] with Array_from(v) to avoid large spreads\r\nconst Array_from = x => Array.from(x); // Array.from.bind(Array);\r\n\r\nfunction group_has_cp(g, cp) {\r\n\t// 20230913: keep primary and secondary distinct instead of creating valid union\r\n\treturn g.P.has(cp) || g.Q.has(cp);\r\n}\r\n\r\nclass Emoji extends Array {\r\n\tget is_emoji() { return true; } // free tagging system\r\n}\r\n\r\nlet MAPPED, IGNORED, CM, NSM, ESCAPE, NFC_CHECK, GROUPS, WHOLE_VALID, WHOLE_MAP, VALID, EMOJI_LIST, EMOJI_ROOT;\r\n\r\nfunction init() {\r\n\tif (MAPPED) return;\r\n\t\r\n\tlet r = read_compressed_payload(COMPRESSED$1);\r\n\tconst read_sorted_array = () => read_sorted(r);\r\n\tconst read_sorted_set = () => new Set(read_sorted_array());\r\n\tconst set_add_many = (set, v) => v.forEach(x => set.add(x));\r\n\r\n\tMAPPED = new Map(read_mapped(r)); \r\n\tIGNORED = read_sorted_set(); // ignored characters are not valid, so just read raw codepoints\r\n\r\n\t/*\r\n\t// direct include from payload is smaller than the decompression code\r\n\tconst FENCED = new Map(read_array_while(() => {\r\n\t\tlet cp = r();\r\n\t\tif (cp) return [cp, read_str(r())];\r\n\t}));\r\n\t*/\r\n\t// 20230217: we still need all CM for proper error formatting\r\n\t// but norm only needs NSM subset that are potentially-valid\r\n\tCM = read_sorted_array();\r\n\tNSM = new Set(read_sorted_array().map(i => CM[i]));\r\n\tCM = new Set(CM);\r\n\t\r\n\tESCAPE = read_sorted_set(); // characters that should not be printed\r\n\tNFC_CHECK = read_sorted_set(); // only needed to illustrate ens_tokenize() transformations\r\n\r\n\tlet chunks = read_sorted_arrays(r);\r\n\tlet unrestricted = r();\r\n\t//const read_chunked = () => new Set(read_sorted_array().flatMap(i => chunks[i]).concat(read_sorted_array()));\r\n\tconst read_chunked = () => {\r\n\t\t// 20230921: build set in parts, 2x faster\r\n\t\tlet set = new Set();\r\n\t\tread_sorted_array().forEach(i => set_add_many(set, chunks[i]));\r\n\t\tset_add_many(set, read_sorted_array());\r\n\t\treturn set; \r\n\t};\r\n\tGROUPS = read_array_while(i => {\r\n\t\t// minifier property mangling seems unsafe\r\n\t\t// so these are manually renamed to single chars\r\n\t\tlet N = read_array_while(r).map(x => x+0x60);\r\n\t\tif (N.length) {\r\n\t\t\tlet R = i >= unrestricted; // unrestricted then restricted\r\n\t\t\tN[0] -= 32; // capitalize\r\n\t\t\tN = str_from_cps(N);\r\n\t\t\tif (R) N=`Restricted[${N}]`;\r\n\t\t\tlet P = read_chunked(); // primary\r\n\t\t\tlet Q = read_chunked(); // secondary\r\n\t\t\tlet M = !r(); // not-whitelisted, check for NSM\r\n\t\t\t// *** this code currently isn't needed ***\r\n\t\t\t/*\r\n\t\t\tlet V = [...P, ...Q].sort((a, b) => a-b); // derive: sorted valid\r\n\t\t\tlet M = r()-1; // number of combining mark\r\n\t\t\tif (M < 0) { // whitelisted\r\n\t\t\t\tM = new Map(read_array_while(() => {\r\n\t\t\t\t\tlet i = r();\r\n\t\t\t\t\tif (i) return [V[i-1], read_array_while(() => {\r\n\t\t\t\t\t\tlet v = read_array_while(r);\r\n\t\t\t\t\t\tif (v.length) return v.map(x => x-1);\r\n\t\t\t\t\t})];\r\n\t\t\t\t}));\r\n\t\t\t}*/\r\n\t\t\treturn {N, P, Q, M, R};\r\n\t\t}\r\n\t});\r\n\r\n\t// decode compressed wholes\r\n\tWHOLE_VALID = read_sorted_set();\r\n\tWHOLE_MAP = new Map();\r\n\tlet wholes = read_sorted_array().concat(Array_from(WHOLE_VALID)).sort((a, b) => a-b); // must be sorted\r\n\twholes.forEach((cp, i) => {\r\n\t\tlet d = r(); \r\n\t\tlet w = wholes[i] = d ? wholes[i-d] : {V: [], M: new Map()};\r\n\t\tw.V.push(cp); // add to member set\r\n\t\tif (!WHOLE_VALID.has(cp)) {\r\n\t\t\tWHOLE_MAP.set(cp, w);  // register with whole map\r\n\t\t}\r\n\t});\r\n\r\n\t// compute confusable-extent complements\r\n\t// usage: WHOLE_MAP.get(cp).M.get(cp) = complement set\r\n\tfor (let {V, M} of new Set(WHOLE_MAP.values())) {\r\n\t\t// connect all groups that have each whole character\r\n\t\tlet recs = [];\r\n\t\tfor (let cp of V) {\r\n\t\t\tlet gs = GROUPS.filter(g => group_has_cp(g, cp));\r\n\t\t\tlet rec = recs.find(({G}) => gs.some(g => G.has(g)));\r\n\t\t\tif (!rec) {\r\n\t\t\t\trec = {G: new Set(), V: []};\r\n\t\t\t\trecs.push(rec);\r\n\t\t\t}\r\n\t\t\trec.V.push(cp);\r\n\t\t\tset_add_many(rec.G, gs);\r\n\t\t}\r\n\t\t// per character cache groups which are not a member of the extent\r\n\t\tlet union = recs.flatMap(x => Array_from(x.G)); // all of the groups used by this whole\r\n\t\tfor (let {G, V} of recs) {\r\n\t\t\tlet complement = new Set(union.filter(g => !G.has(g))); // groups not covered by the extent\r\n\t\t\tfor (let cp of V) {\r\n\t\t\t\tM.set(cp, complement); // this is the same reference\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// compute valid set\r\n\t// 20230924: VALID was union but can be re-used\r\n\tVALID = new Set(); // exists in 1+ groups\r\n\tlet multi = new Set(); // exists in 2+ groups\r\n\tconst add_to_union = cp => VALID.has(cp) ? multi.add(cp) : VALID.add(cp);\r\n\tfor (let g of GROUPS) {\r\n\t\tfor (let cp of g.P) add_to_union(cp);\r\n\t\tfor (let cp of g.Q) add_to_union(cp);\r\n\t}\r\n\t// dual purpose WHOLE_MAP: return placeholder if unique non-confusable\r\n\tfor (let cp of VALID) {\r\n\t\tif (!WHOLE_MAP.has(cp) && !multi.has(cp)) {\r\n\t\t\tWHOLE_MAP.set(cp, UNIQUE_PH);\r\n\t\t}\r\n\t}\r\n\t// add all decomposed parts\r\n\t// see derive: \"Valid is Closed (via Brute-force)\"\r\n\tset_add_many(VALID, nfd(VALID));\r\n\t\r\n\t// decode emoji\r\n\t// 20230719: emoji are now fully-expanded to avoid quirk logic \r\n\tEMOJI_LIST = read_trie(r).map(v => Emoji.from(v)).sort(compare_arrays);\r\n\tEMOJI_ROOT = new Map(); // this has approx 7K nodes (2+ per emoji)\r\n\tfor (let cps of EMOJI_LIST) {\r\n\t\t// 20230719: change to *slightly* stricter algorithm which disallows \r\n\t\t// insertion of misplaced FE0F in emoji sequences (matching ENSIP-15)\r\n\t\t// example: beautified [A B] (eg. flag emoji) \r\n\t\t//  before: allow: [A FE0F B], error: [A FE0F FE0F B] \r\n\t\t//   after: error: both\r\n\t\t// note: this code now matches ENSNormalize.{cs,java} logic\r\n\t\tlet prev = [EMOJI_ROOT];\r\n\t\tfor (let cp of cps) {\r\n\t\t\tlet next = prev.map(node => {\r\n\t\t\t\tlet child = node.get(cp);\r\n\t\t\t\tif (!child) {\r\n\t\t\t\t\t// should this be object? \r\n\t\t\t\t\t// (most have 1-2 items, few have many)\r\n\t\t\t\t\t// 20230719: no, v8 default map is 4?\r\n\t\t\t\t\tchild = new Map();\r\n\t\t\t\t\tnode.set(cp, child);\r\n\t\t\t\t}\r\n\t\t\t\treturn child;\r\n\t\t\t});\r\n\t\t\tif (cp === FE0F) {\r\n\t\t\t\tprev.push(...next); // less than 20 elements\r\n\t\t\t} else {\r\n\t\t\t\tprev = next;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (let x of prev) {\r\n\t\t\tx.V = cps;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// if escaped: {HEX}\r\n//       else: \"x\" {HEX}\r\nfunction quoted_cp(cp) {\r\n\treturn (should_escape(cp) ? '' : `${bidi_qq(safe_str_from_cps([cp]))} `) + quote_cp(cp);\r\n}\r\n\r\n// 20230211: some messages can be mixed-directional and result in spillover\r\n// use 200E after a quoted string to force the remainder of a string from \r\n// acquring the direction of the quote\r\n// https://www.w3.org/International/questions/qa-bidi-unicode-controls#exceptions\r\nfunction bidi_qq(s) {\r\n\treturn `\"${s}\"\\u200E`; // strong LTR\r\n}\r\n\r\nfunction check_label_extension(cps) {\r\n\tif (cps.length >= 4 && cps[2] == HYPHEN && cps[3] == HYPHEN) {\r\n\t\tthrow new Error(`invalid label extension: \"${str_from_cps(cps.slice(0, 4))}\"`); // this can only be ascii so cant be bidi\r\n\t}\r\n}\r\nfunction check_leading_underscore(cps) {\r\n\tconst UNDERSCORE = 0x5F;\r\n\tfor (let i = cps.lastIndexOf(UNDERSCORE); i > 0; ) {\r\n\t\tif (cps[--i] !== UNDERSCORE) {\r\n\t\t\tthrow new Error('underscore allowed only at start');\r\n\t\t}\r\n\t}\r\n}\r\n// check that a fenced cp is not leading, trailing, or touching another fenced cp\r\nfunction check_fenced(cps) {\r\n\tlet cp = cps[0];\r\n\tlet prev = FENCED.get(cp);\r\n\tif (prev) throw error_placement(`leading ${prev}`);\r\n\tlet n = cps.length;\r\n\tlet last = -1; // prevents trailing from throwing\r\n\tfor (let i = 1; i < n; i++) {\r\n\t\tcp = cps[i];\r\n\t\tlet match = FENCED.get(cp);\r\n\t\tif (match) {\r\n\t\t\t// since cps[0] isn't fenced, cps[1] cannot throw\r\n\t\t\tif (last == i) throw error_placement(`${prev} + ${match}`);\r\n\t\t\tlast = i + 1;\r\n\t\t\tprev = match;\r\n\t\t}\r\n\t}\r\n\tif (last == n) throw error_placement(`trailing ${prev}`);\r\n}\r\n\r\n// create a safe to print string \r\n// invisibles are escaped\r\n// leading cm uses placeholder\r\n// if cps exceed max, middle truncate with ellipsis\r\n// quoter(cp) => string, eg. 3000 => \"{3000}\"\r\n// note: in html, you'd call this function then replace [<>&] with entities\r\nfunction safe_str_from_cps(cps, max = Infinity, quoter = quote_cp) {\r\n\t//if (Number.isInteger(cps)) cps = [cps];\r\n\t//if (!Array.isArray(cps)) throw new TypeError(`expected codepoints`);\r\n\tlet buf = [];\r\n\tif (is_combining_mark(cps[0])) buf.push('◌');\r\n\tif (cps.length > max) {\r\n\t\tmax >>= 1;\r\n\t\tcps = [...cps.slice(0, max), 0x2026, ...cps.slice(-max)];\r\n\t}\r\n\tlet prev = 0;\r\n\tlet n = cps.length;\r\n\tfor (let i = 0; i < n; i++) {\r\n\t\tlet cp = cps[i];\r\n\t\tif (should_escape(cp)) {\r\n\t\t\tbuf.push(str_from_cps(cps.slice(prev, i)));\r\n\t\t\tbuf.push(quoter(cp));\r\n\t\t\tprev = i + 1;\r\n\t\t}\r\n\t}\r\n\tbuf.push(str_from_cps(cps.slice(prev, n)));\r\n\treturn buf.join('');\r\n}\r\n\r\n// note: set(s) cannot be exposed because they can be modified\r\n// note: Object.freeze() doesn't work\r\nfunction is_combining_mark(cp) {\r\n\tinit();\r\n\treturn CM.has(cp);\r\n}\r\nfunction should_escape(cp) {\r\n\tinit();\r\n\treturn ESCAPE.has(cp);\r\n}\r\n\r\n// return all supported emoji as fully-qualified emoji \r\n// ordered by length then lexicographic \r\nfunction ens_emoji() {\r\n\tinit();\r\n\treturn EMOJI_LIST.map(x => x.slice()); // emoji are exposed so copy\r\n}\r\n\r\nfunction ens_normalize_fragment(frag, decompose) {\r\n\tinit();\r\n\tlet nf = decompose ? nfd : nfc;\r\n\treturn frag.split(STOP_CH).map(label => str_from_cps(tokens_from_str(explode_cp(label), nf, filter_fe0f).flat())).join(STOP_CH);\r\n}\r\n\r\nfunction ens_normalize(name) {\r\n\treturn flatten(split(name, nfc, filter_fe0f));\r\n}\r\n\r\nfunction ens_beautify(name) {\r\n\tlet labels = split(name, nfc, x => x); // emoji not exposed\r\n\tfor (let {type, output, error} of labels) {\r\n\t\tif (error) break; // flatten will throw\r\n\r\n\t\t// replace leading/trailing hyphen\r\n\t\t// 20230121: consider beautifing all or leading/trailing hyphen to unicode variant\r\n\t\t// not exactly the same in every font, but very similar: \"-\" vs \"‐\"\r\n\t\t/*\r\n\t\tconst UNICODE_HYPHEN = 0x2010;\r\n\t\t// maybe this should replace all for visual consistancy?\r\n\t\t// `node tools/reg-count.js regex ^-\\{2,\\}` => 592\r\n\t\t//for (let i = 0; i < output.length; i++) if (output[i] == 0x2D) output[i] = 0x2010;\r\n\t\tif (output[0] == HYPHEN) output[0] = UNICODE_HYPHEN;\r\n\t\tlet end = output.length-1;\r\n\t\tif (output[end] == HYPHEN) output[end] = UNICODE_HYPHEN;\r\n\t\t*/\r\n\t\t// 20230123: WHATWG URL uses \"CheckHyphens\" false\r\n\t\t// https://url.spec.whatwg.org/#idna\r\n\r\n\t\t// update ethereum symbol\r\n\t\t// ξ => Ξ if not greek\r\n\t\tif (type !== 'Greek') array_replace(output, 0x3BE, 0x39E);\r\n\r\n\t\t// 20221213: fixes bidi subdomain issue, but breaks invariant (200E is disallowed)\r\n\t\t// could be fixed with special case for: 2D (.) + 200E (LTR)\r\n\t\t// https://discuss.ens.domains/t/bidi-label-ordering-spoof/15824\r\n\t\t//output.splice(0, 0, 0x200E);\r\n\t}\r\n\treturn flatten(labels);\r\n}\r\n\r\nfunction array_replace(v, a, b) {\r\n\tlet prev = 0;\r\n\twhile (true) {\r\n\t\tlet next = v.indexOf(a, prev);\r\n\t\tif (next < 0) break;\r\n\t\tv[next] = b; \r\n\t\tprev = next + 1;\r\n\t}\r\n}\r\n\r\nfunction ens_split(name, preserve_emoji) {\r\n\treturn split(name, nfc, preserve_emoji ? x => x.slice() : filter_fe0f); // emoji are exposed so copy\r\n}\r\n\r\nfunction split(name, nf, ef) {\r\n\tif (!name) return []; // 20230719: empty name allowance\r\n\tinit();\r\n\tlet offset = 0;\r\n\t// https://unicode.org/reports/tr46/#Validity_Criteria\r\n\t// 4.) \"The label must not contain a U+002E ( . ) FULL STOP.\"\r\n\treturn name.split(STOP_CH).map(label => {\r\n\t\tlet input = explode_cp(label);\r\n\t\tlet info = {\r\n\t\t\tinput,\r\n\t\t\toffset, // codepoint, not substring!\r\n\t\t};\r\n\t\toffset += input.length + 1; // + stop\r\n\t\ttry {\r\n\t\t\t// 1.) \"The label must be in Unicode Normalization Form NFC\"\r\n\t\t\tlet tokens = info.tokens = tokens_from_str(input, nf, ef);\r\n\t\t\tlet token_count = tokens.length;\r\n\t\t\tlet type;\r\n\t\t\tif (!token_count) { // the label was effectively empty (could of had ignored characters)\r\n\t\t\t\t//norm = [];\r\n\t\t\t\t//type = 'None'; // use this instead of next match, \"ASCII\"\r\n\t\t\t\t// 20230120: change to strict\r\n\t\t\t\t// https://discuss.ens.domains/t/ens-name-normalization-2nd/14564/59\r\n\t\t\t\tthrow new Error(`empty label`);\r\n\t\t\t} \r\n\t\t\tlet norm = info.output = tokens.flat();\r\n\t\t\tcheck_leading_underscore(norm);\r\n\t\t\tlet emoji = info.emoji = token_count > 1 || tokens[0].is_emoji; // same as: tokens.some(x => x.is_emoji);\r\n\t\t\tif (!emoji && norm.every(cp => cp < 0x80)) { // special case for ascii\r\n\t\t\t\t// 20230123: matches matches WHATWG, see note 3.3\r\n\t\t\t\tcheck_label_extension(norm); // only needed for ascii\r\n\t\t\t\t// cant have fenced\r\n\t\t\t\t// cant have cm\r\n\t\t\t\t// cant have wholes\r\n\t\t\t\t// see derive: \"Fastpath ASCII\"\r\n\t\t\t\ttype = 'ASCII';\r\n\t\t\t} else {\r\n\t\t\t\tlet chars = tokens.flatMap(x => x.is_emoji ? [] : x); // all of the nfc tokens concat together\r\n\t\t\t\tif (!chars.length) { // theres no text, just emoji\r\n\t\t\t\t\ttype = 'Emoji';\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// 5.) \"The label must not begin with a combining mark, that is: General_Category=Mark.\"\r\n\t\t\t\t\tif (CM.has(norm[0])) throw error_placement('leading combining mark');\r\n\t\t\t\t\tfor (let i = 1; i < token_count; i++) { // we've already checked the first token\r\n\t\t\t\t\t\tlet cps = tokens[i];\r\n\t\t\t\t\t\tif (!cps.is_emoji && CM.has(cps[0])) { // every text token has emoji neighbors, eg. EtEEEtEt...\r\n\t\t\t\t\t\t\t// bidi_qq() not needed since emoji is LTR and cps is a CM\r\n\t\t\t\t\t\t\tthrow error_placement(`emoji + combining mark: \"${str_from_cps(tokens[i-1])} + ${safe_str_from_cps([cps[0]])}\"`); \r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcheck_fenced(norm);\r\n\t\t\t\t\tlet unique = Array_from(new Set(chars));\r\n\t\t\t\t\tlet [g] = determine_group(unique); // take the first match\r\n\t\t\t\t\t// see derive: \"Matching Groups have Same CM Style\"\r\n\t\t\t\t\t// alternative: could form a hybrid type: Latin/Japanese/...\t\r\n\t\t\t\t\tcheck_group(g, chars); // need text in order\r\n\t\t\t\t\tcheck_whole(g, unique); // only need unique text (order would be required for multiple-char confusables)\r\n\t\t\t\t\ttype = g.N;\r\n\t\t\t\t\t// 20230121: consider exposing restricted flag\r\n\t\t\t\t\t// it's simpler to just check for 'Restricted'\r\n\t\t\t\t\t// or even better: type.endsWith(']')\r\n\t\t\t\t\t//if (g.R) info.restricted = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tinfo.type = type;\r\n\t\t} catch (err) {\r\n\t\t\tinfo.error = err; // use full error object\r\n\t\t}\r\n\t\treturn info;\r\n\t});\r\n}\r\n\r\nfunction check_whole(group, unique) {\r\n\tlet maker;\r\n\tlet shared = [];\r\n\tfor (let cp of unique) {\r\n\t\tlet whole = WHOLE_MAP.get(cp);\r\n\t\tif (whole === UNIQUE_PH) return; // unique, non-confusable\r\n\t\tif (whole) {\r\n\t\t\tlet set = whole.M.get(cp); // groups which have a character that look-like this character\r\n\t\t\tmaker = maker ? maker.filter(g => set.has(g)) : Array_from(set);\r\n\t\t\tif (!maker.length) return; // confusable intersection is empty\r\n\t\t} else {\r\n\t\t\tshared.push(cp); \r\n\t\t}\r\n\t}\r\n\tif (maker) {\r\n\t\t// we have 1+ confusable\r\n\t\t// check if any of the remaining groups\r\n\t\t// contain the shared characters too\r\n\t\tfor (let g of maker) {\r\n\t\t\tif (shared.every(cp => group_has_cp(g, cp))) {\r\n\t\t\t\tthrow new Error(`whole-script confusable: ${group.N}/${g.N}`);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// assumption: unique.size > 0\r\n// returns list of matching groups\r\nfunction determine_group(unique) {\r\n\tlet groups = GROUPS;\r\n\tfor (let cp of unique) {\r\n\t\t// note: we need to dodge CM that are whitelisted\r\n\t\t// but that code isn't currently necessary\r\n\t\tlet gs = groups.filter(g => group_has_cp(g, cp));\r\n\t\tif (!gs.length) {\r\n\t\t\tif (!GROUPS.some(g => group_has_cp(g, cp))) { \r\n\t\t\t\t// the character was composed of valid parts\r\n\t\t\t\t// but it's NFC form is invalid\r\n\t\t\t\t// 20230716: change to more exact statement, see: ENSNormalize.{cs,java}\r\n\t\t\t\t// note: this doesn't have to be a composition\r\n\t\t\t\t// 20230720: change to full check\r\n\t\t\t\tthrow error_disallowed(cp); // this should be rare\r\n\t\t\t} else {\r\n\t\t\t\t// there is no group that contains all these characters\r\n\t\t\t\t// throw using the highest priority group that matched\r\n\t\t\t\t// https://www.unicode.org/reports/tr39/#mixed_script_confusables\r\n\t\t\t\tthrow error_group_member(groups[0], cp);\r\n\t\t\t}\r\n\t\t}\r\n\t\tgroups = gs;\r\n\t\tif (gs.length == 1) break; // there is only one group left\r\n\t}\r\n\t// there are at least 1 group(s) with all of these characters\r\n\treturn groups;\r\n}\r\n\r\n// throw on first error\r\nfunction flatten(split) {\r\n\treturn split.map(({input, error, output}) => {\r\n\t\tif (error) {\r\n\t\t\t// don't print label again if just a single label\r\n\t\t\tlet msg = error.message;\r\n\t\t\t// bidi_qq() only necessary if msg is digits\r\n\t\t\tthrow new Error(split.length == 1 ? msg : `Invalid label ${bidi_qq(safe_str_from_cps(input, 63))}: ${msg}`); \r\n\t\t}\r\n\t\treturn str_from_cps(output);\r\n\t}).join(STOP_CH);\r\n}\r\n\r\nfunction error_disallowed(cp) {\r\n\t// TODO: add cp to error?\r\n\treturn new Error(`disallowed character: ${quoted_cp(cp)}`); \r\n}\r\nfunction error_group_member(g, cp) {\r\n\tlet quoted = quoted_cp(cp);\r\n\tlet gg = GROUPS.find(g => g.P.has(cp)); // only check primary\r\n\tif (gg) {\r\n\t\tquoted = `${gg.N} ${quoted}`;\r\n\t}\r\n\treturn new Error(`illegal mixture: ${g.N} + ${quoted}`);\r\n}\r\nfunction error_placement(where) {\r\n\treturn new Error(`illegal placement: ${where}`);\r\n}\r\n\r\n// assumption: cps.length > 0\r\n// assumption: cps[0] isn't a CM\r\n// assumption: the previous character isn't an emoji\r\nfunction check_group(g, cps) {\r\n\tfor (let cp of cps) {\r\n\t\tif (!group_has_cp(g, cp)) {\r\n\t\t\t// for whitelisted scripts, this will throw illegal mixture on invalid cm, eg. \"e{300}{300}\"\r\n\t\t\t// at the moment, it's unnecessary to introduce an extra error type\r\n\t\t\t// until there exists a whitelisted multi-character\r\n\t\t\t//   eg. if (M < 0 && is_combining_mark(cp)) { ... }\r\n\t\t\t// there are 3 cases:\r\n\t\t\t//   1. illegal cm for wrong group => mixture error\r\n\t\t\t//   2. illegal cm for same group => cm error\r\n\t\t\t//       requires set of whitelist cm per group: \r\n\t\t\t//        eg. new Set([...g.P, ...g.Q].flatMap(nfc).filter(cp => CM.has(cp)))\r\n\t\t\t//   3. wrong group => mixture error\r\n\t\t\tthrow error_group_member(g, cp);\r\n\t\t}\r\n\t}\r\n\t//if (M >= 0) { // we have a known fixed cm count\r\n\tif (g.M) { // we need to check for NSM\r\n\t\tlet decomposed = nfd(cps);\r\n\t\tfor (let i = 1, e = decomposed.length; i < e; i++) { // see: assumption\r\n\t\t\t// 20230210: bugfix: using cps instead of decomposed h/t Carbon225\r\n\t\t\t/*\r\n\t\t\tif (CM.has(decomposed[i])) {\r\n\t\t\t\tlet j = i + 1;\r\n\t\t\t\twhile (j < e && CM.has(decomposed[j])) j++;\r\n\t\t\t\tif (j - i > M) {\r\n\t\t\t\t\tthrow new Error(`too many combining marks: ${g.N} ${bidi_qq(str_from_cps(decomposed.slice(i-1, j)))} (${j-i}/${M})`);\r\n\t\t\t\t}\r\n\t\t\t\ti = j;\r\n\t\t\t}\r\n\t\t\t*/\r\n\t\t\t// 20230217: switch to NSM counting\r\n\t\t\t// https://www.unicode.org/reports/tr39/#Optional_Detection\r\n\t\t\tif (NSM.has(decomposed[i])) {\r\n\t\t\t\tlet j = i + 1;\r\n\t\t\t\tfor (let cp; j < e && NSM.has(cp = decomposed[j]); j++) {\r\n\t\t\t\t\t// a. Forbid sequences of the same nonspacing mark.\r\n\t\t\t\t\tfor (let k = i; k < j; k++) { // O(n^2) but n < 100\r\n\t\t\t\t\t\tif (decomposed[k] == cp) {\r\n\t\t\t\t\t\t\tthrow new Error(`duplicate non-spacing marks: ${quoted_cp(cp)}`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// parse to end so we have full nsm count\r\n\t\t\t\t// b. Forbid sequences of more than 4 nonspacing marks (gc=Mn or gc=Me).\r\n\t\t\t\tif (j - i > NSM_MAX) {\r\n\t\t\t\t\t// note: this slice starts with a base char or spacing-mark cm\r\n\t\t\t\t\tthrow new Error(`excessive non-spacing marks: ${bidi_qq(safe_str_from_cps(decomposed.slice(i-1, j)))} (${j-i}/${NSM_MAX})`);\r\n\t\t\t\t}\r\n\t\t\t\ti = j;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t// *** this code currently isn't needed ***\r\n\t/*\r\n\tlet cm_whitelist = M instanceof Map;\r\n\tfor (let i = 0, e = cps.length; i < e; ) {\r\n\t\tlet cp = cps[i++];\r\n\t\tlet seqs = cm_whitelist && M.get(cp);\r\n\t\tif (seqs) { \r\n\t\t\t// list of codepoints that can follow\r\n\t\t\t// if this exists, this will always be 1+\r\n\t\t\tlet j = i;\r\n\t\t\twhile (j < e && CM.has(cps[j])) j++;\r\n\t\t\tlet cms = cps.slice(i, j);\r\n\t\t\tlet match = seqs.find(seq => !compare_arrays(seq, cms));\r\n\t\t\tif (!match) throw new Error(`disallowed combining mark sequence: \"${safe_str_from_cps([cp, ...cms])}\"`);\r\n\t\t\ti = j;\r\n\t\t} else if (!V.has(cp)) {\r\n\t\t\t// https://www.unicode.org/reports/tr39/#mixed_script_confusables\r\n\t\t\tlet quoted = quoted_cp(cp);\r\n\t\t\tfor (let cp of cps) {\r\n\t\t\t\tlet u = UNIQUE.get(cp);\r\n\t\t\t\tif (u && u !== g) {\r\n\t\t\t\t\t// if both scripts are restricted this error is confusing\r\n\t\t\t\t\t// because we don't differentiate RestrictedA from RestrictedB \r\n\t\t\t\t\tif (!u.R) quoted = `${quoted} is ${u.N}`;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthrow new Error(`disallowed ${g.N} character: ${quoted}`);\r\n\t\t\t//throw new Error(`disallowed character: ${quoted} (expected ${g.N})`);\r\n\t\t\t//throw new Error(`${g.N} does not allow: ${quoted}`);\r\n\t\t}\r\n\t}\r\n\tif (!cm_whitelist) {\r\n\t\tlet decomposed = nfd(cps);\r\n\t\tfor (let i = 1, e = decomposed.length; i < e; i++) { // we know it can't be cm leading\r\n\t\t\tif (CM.has(decomposed[i])) {\r\n\t\t\t\tlet j = i + 1;\r\n\t\t\t\twhile (j < e && CM.has(decomposed[j])) j++;\r\n\t\t\t\tif (j - i > M) {\r\n\t\t\t\t\tthrow new Error(`too many combining marks: \"${str_from_cps(decomposed.slice(i-1, j))}\" (${j-i}/${M})`);\r\n\t\t\t\t}\r\n\t\t\t\ti = j;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t*/\r\n}\r\n\r\n// given a list of codepoints\r\n// returns a list of lists, where emoji are a fully-qualified (as Array subclass)\r\n// eg. explode_cp(\"abc💩d\") => [[61, 62, 63], Emoji[1F4A9, FE0F], [64]]\r\n// 20230818: rename for 'process' name collision h/t Javarome\r\n// https://github.com/adraffy/ens-normalize.js/issues/23\r\nfunction tokens_from_str(input, nf, ef) {\r\n\tlet ret = [];\r\n\tlet chars = [];\r\n\tinput = input.slice().reverse(); // flip so we can pop\r\n\twhile (input.length) {\r\n\t\tlet emoji = consume_emoji_reversed(input);\r\n\t\tif (emoji) {\r\n\t\t\tif (chars.length) {\r\n\t\t\t\tret.push(nf(chars));\r\n\t\t\t\tchars = [];\r\n\t\t\t}\r\n\t\t\tret.push(ef(emoji));\r\n\t\t} else {\r\n\t\t\tlet cp = input.pop();\r\n\t\t\tif (VALID.has(cp)) {\r\n\t\t\t\tchars.push(cp);\r\n\t\t\t} else {\r\n\t\t\t\tlet cps = MAPPED.get(cp);\r\n\t\t\t\tif (cps) {\r\n\t\t\t\t\tchars.push(...cps); // less than 10 elements\r\n\t\t\t\t} else if (!IGNORED.has(cp)) {\r\n\t\t\t\t\t// 20230912: unicode 15.1 changed the order of processing such that\r\n\t\t\t\t\t// disallowed parts are only rejected after NFC\r\n\t\t\t\t\t// https://unicode.org/reports/tr46/#Validity_Criteria\r\n\t\t\t\t\t// this doesn't impact normalization as of today\r\n\t\t\t\t\t// technically, this error can be removed as the group logic will apply similar logic\r\n\t\t\t\t\t// however the error type might be less clear\r\n\t\t\t\t\tthrow error_disallowed(cp);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (chars.length) {\r\n\t\tret.push(nf(chars));\r\n\t}\r\n\treturn ret;\r\n}\r\n\r\nfunction filter_fe0f(cps) {\r\n\treturn cps.filter(cp => cp != FE0F);\r\n}\r\n\r\n// given array of codepoints\r\n// returns the longest valid emoji sequence (or undefined if no match)\r\n// *MUTATES* the supplied array\r\n// disallows interleaved ignored characters\r\n// fills (optional) eaten array with matched codepoints\r\nfunction consume_emoji_reversed(cps, eaten) {\r\n\tlet node = EMOJI_ROOT;\r\n\tlet emoji;\r\n\tlet pos = cps.length;\r\n\twhile (pos) {\r\n\t\tnode = node.get(cps[--pos]);\r\n\t\tif (!node) break;\r\n\t\tlet {V} = node;\r\n\t\tif (V) { // this is a valid emoji (so far)\r\n\t\t\temoji = V;\r\n\t\t\tif (eaten) eaten.push(...cps.slice(pos).reverse()); // (optional) copy input, used for ens_tokenize()\r\n\t\t\tcps.length = pos; // truncate\r\n\t\t}\r\n\t}\r\n\treturn emoji;\r\n}\r\n\r\n// ************************************************************\r\n// tokenizer \r\n\r\nconst TY_VALID = 'valid';\r\nconst TY_MAPPED = 'mapped';\r\nconst TY_IGNORED = 'ignored';\r\nconst TY_DISALLOWED = 'disallowed';\r\nconst TY_EMOJI = 'emoji';\r\nconst TY_NFC = 'nfc';\r\nconst TY_STOP = 'stop';\r\n\r\nfunction ens_tokenize(name, {\r\n\tnf = true, // collapse unnormalized runs into a single token\r\n} = {}) {\r\n\tinit();\r\n\tlet input = explode_cp(name).reverse();\r\n\tlet eaten = [];\r\n\tlet tokens = [];\r\n\twhile (input.length) {\r\n\t\tlet emoji = consume_emoji_reversed(input, eaten);\r\n\t\tif (emoji) {\r\n\t\t\ttokens.push({\r\n\t\t\t\ttype: TY_EMOJI,\r\n\t\t\t\temoji: emoji.slice(), // copy emoji\r\n\t\t\t\tinput: eaten,\r\n\t\t\t\tcps: filter_fe0f(emoji)\r\n\t\t\t});\r\n\t\t\teaten = []; // reset buffer\r\n\t\t} else {\r\n\t\t\tlet cp = input.pop();\r\n\t\t\tif (cp == STOP) {\r\n\t\t\t\ttokens.push({type: TY_STOP, cp});\r\n\t\t\t} else if (VALID.has(cp)) {\r\n\t\t\t\ttokens.push({type: TY_VALID, cps: [cp]});\r\n\t\t\t} else if (IGNORED.has(cp)) {\r\n\t\t\t\ttokens.push({type: TY_IGNORED, cp});\r\n\t\t\t} else {\r\n\t\t\t\tlet cps = MAPPED.get(cp);\r\n\t\t\t\tif (cps) {\r\n\t\t\t\t\ttokens.push({type: TY_MAPPED, cp, cps: cps.slice()});\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttokens.push({type: TY_DISALLOWED, cp});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (nf) {\r\n\t\tfor (let i = 0, start = -1; i < tokens.length; i++) {\r\n\t\t\tlet token = tokens[i];\r\n\t\t\tif (is_valid_or_mapped(token.type)) {\r\n\t\t\t\tif (requires_check(token.cps)) { // normalization might be needed\r\n\t\t\t\t\tlet end = i + 1;\r\n\t\t\t\t\tfor (let pos = end; pos < tokens.length; pos++) { // find adjacent text\r\n\t\t\t\t\t\tlet {type, cps} = tokens[pos];\r\n\t\t\t\t\t\tif (is_valid_or_mapped(type)) {\r\n\t\t\t\t\t\t\tif (!requires_check(cps)) break;\r\n\t\t\t\t\t\t\tend = pos + 1;\r\n\t\t\t\t\t\t} else if (type !== TY_IGNORED) { // || type !== TY_DISALLOWED) { \r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (start < 0) start = i;\r\n\t\t\t\t\tlet slice = tokens.slice(start, end);\r\n\t\t\t\t\tlet cps0 = slice.flatMap(x => is_valid_or_mapped(x.type) ? x.cps : []); // strip junk tokens\r\n\t\t\t\t\tlet cps = nfc(cps0);\r\n\t\t\t\t\tif (compare_arrays(cps, cps0)) { // bundle into an nfc token\r\n\t\t\t\t\t\ttokens.splice(start, end - start, {\r\n\t\t\t\t\t\t\ttype: TY_NFC, \r\n\t\t\t\t\t\t\tinput: cps0, // there are 3 states: tokens0 ==(process)=> input ==(nfc)=> tokens/cps\r\n\t\t\t\t\t\t\tcps, \r\n\t\t\t\t\t\t\ttokens0: collapse_valid_tokens(slice),\r\n\t\t\t\t\t\t\ttokens: ens_tokenize(str_from_cps(cps), {nf: false})\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\ti = start;\r\n\t\t\t\t\t} else { \r\n\t\t\t\t\t\ti = end - 1; // skip to end of slice\r\n\t\t\t\t\t}\r\n\t\t\t\t\tstart = -1; // reset\r\n\t\t\t\t} else {\r\n\t\t\t\t\tstart = i; // remember last\r\n\t\t\t\t}\r\n\t\t\t} else if (token.type !== TY_IGNORED) { // 20221024: is this correct?\r\n\t\t\t\tstart = -1; // reset\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn collapse_valid_tokens(tokens);\r\n}\r\n\r\nfunction is_valid_or_mapped(type) {\r\n\treturn type == TY_VALID || type == TY_MAPPED;\r\n}\r\n\r\nfunction requires_check(cps) {\r\n\treturn cps.some(cp => NFC_CHECK.has(cp));\r\n}\r\n\r\nfunction collapse_valid_tokens(tokens) {\r\n\tfor (let i = 0; i < tokens.length; i++) {\r\n\t\tif (tokens[i].type == TY_VALID) {\r\n\t\t\tlet j = i + 1;\r\n\t\t\twhile (j < tokens.length && tokens[j].type == TY_VALID) j++;\r\n\t\t\ttokens.splice(i, j - i, {type: TY_VALID, cps: tokens.slice(i, j).flatMap(x => x.cps)});\r\n\t\t}\r\n\t}\r\n\treturn tokens;\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AYWRyYWZmeS9lbnMtbm9ybWFsaXplL2Rpc3QvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQixpQkFBaUIsa0JBQWtCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsT0FBTztBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixPQUFPO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsT0FBTztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLHNCQUFzQjtBQUN0QixrQkFBa0I7QUFDbEIsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsVUFBVTtBQUNWO0FBQ0Esa0JBQWtCLEtBQUs7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLEVBQUUsWUFBWSxHQUFHLDhCQUE4QixFQUFFO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0EsbUNBQW1DLFdBQVc7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixpQkFBaUI7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnR0FBZ0c7QUFDaEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsZ0JBQWdCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsZUFBZTtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0IsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCLGVBQWU7QUFDZjtBQUNBLDBCQUEwQixFQUFFO0FBQzVCLDJCQUEyQjtBQUMzQiwyQkFBMkI7QUFDM0IsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSw2Q0FBNkM7QUFDN0Msa0JBQWtCO0FBQ2xCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLEtBQUs7QUFDTCxJQUFJO0FBQ0osV0FBVztBQUNYO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUZBQXVGO0FBQ3ZGO0FBQ0E7QUFDQSx5Q0FBeUM7QUFDekMsZ0JBQWdCO0FBQ2hCO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixFQUFFO0FBQzNCO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRDtBQUNsRCxZQUFZLE1BQU07QUFDbEIsMkRBQTJEO0FBQzNEO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQix3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyxTQUFTO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLHdCQUF3QjtBQUN4QixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCLG9CQUFvQjtBQUNwQjtBQUNBLHFDQUFxQyxrQ0FBa0M7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLEVBQUUsVUFBVTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyw4QkFBOEIsS0FBSztBQUNsRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyxPQUFPO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxLQUFLO0FBQ2pEO0FBQ0EsZ0JBQWdCO0FBQ2hCLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLE1BQU0sSUFBSSxNQUFNO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELEtBQUs7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLEtBQUs7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QztBQUN4QyxXQUFXLHFCQUFxQjtBQUNoQyxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0MsSUFBSTtBQUM1QyxvQkFBb0IsbUJBQW1CO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlFQUF5RTtBQUN6RTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtRUFBbUU7QUFDbkUsZ0RBQWdEO0FBQ2hEO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsMERBQTBEO0FBQzFELHlCQUF5QjtBQUN6QjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EscUJBQXFCLGlCQUFpQixPQUFPO0FBQzdDO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EseURBQXlELDJCQUEyQixJQUFJLDRCQUE0QjtBQUNwSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QztBQUN4QztBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0EsOEJBQThCO0FBQzlCLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsUUFBUSxHQUFHLElBQUk7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9FQUFvRTtBQUNwRTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixxQkFBcUI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4REFBOEQsc0NBQXNDLElBQUksSUFBSTtBQUM1RztBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLGNBQWM7QUFDekQ7QUFDQTtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDO0FBQ0EsY0FBYyxNQUFNLEVBQUUsT0FBTztBQUM3QjtBQUNBLHNDQUFzQyxLQUFLLElBQUksT0FBTztBQUN0RDtBQUNBO0FBQ0Esd0NBQXdDLE1BQU07QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFGQUFxRixLQUFLLElBQUk7QUFDOUY7QUFDQTtBQUNBLGtEQUFrRDtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsWUFBWTtBQUNaO0FBQ0EseUNBQXlDLE9BQU8sT0FBTztBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0QsS0FBSyxFQUFFLGlEQUFpRCxHQUFHLElBQUksR0FBRyxFQUFFO0FBQ3RIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsc0NBQXNDO0FBQ3ZEO0FBQ0EscUJBQXFCLE9BQU8sT0FBTztBQUNuQztBQUNBLHVEQUF1RCxjQUFjO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFELHNEQUFzRCxHQUFHLElBQUksR0FBRyxRQUFRO0FBQzdIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsT0FBTztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1RUFBdUUsZ0NBQWdDO0FBQ3ZHO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLFFBQVEsS0FBSyxJQUFJO0FBQzVDO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxLQUFLLGFBQWEsT0FBTztBQUMxRCw4Q0FBOEMsUUFBUSxZQUFZLElBQUk7QUFDdEUsd0JBQXdCLEtBQUssa0JBQWtCLE9BQU87QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsT0FBTyxPQUFPO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1ELHVDQUF1QyxLQUFLLElBQUksR0FBRyxFQUFFO0FBQ3hHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekIsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU8sR0FBRztBQUNWLFdBQVc7QUFDWDtBQUNBLHVEQUF1RDtBQUN2RCxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRSxJQUFJO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLGVBQWU7QUFDZixJQUFJO0FBQ0o7QUFDQTtBQUNBLGlCQUFpQixrQkFBa0I7QUFDbkMsS0FBSztBQUNMLGlCQUFpQiwwQkFBMEI7QUFDM0MsS0FBSztBQUNMLGlCQUFpQixxQkFBcUI7QUFDdEMsS0FBSztBQUNMO0FBQ0E7QUFDQSxrQkFBa0Isc0NBQXNDO0FBQ3hELE1BQU07QUFDTixrQkFBa0Isd0JBQXdCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsbUJBQW1CO0FBQ2pEO0FBQ0E7QUFDQSxxQ0FBcUM7QUFDckM7QUFDQSx5QkFBeUIscUJBQXFCLFNBQVM7QUFDdkQsV0FBVyxXQUFXO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLFFBQVEsZ0NBQWdDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2RUFBNkU7QUFDN0U7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCxVQUFVO0FBQzFELE9BQU87QUFDUDtBQUNBLE9BQU87QUFDUCxtQkFBbUI7QUFDbkI7QUFDQSxpQkFBaUI7QUFDakIsTUFBTTtBQUNOLGdCQUFnQjtBQUNoQjtBQUNBLEtBQUssc0NBQXNDO0FBQzNDLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsbUJBQW1CO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qiw0REFBNEQ7QUFDeEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNrSyIsInNvdXJjZXMiOlsiRDpcXERvX2FuMlxcbGVuZGh1Yl92MlxcbGVuZGh1Yi1mcm9udGVuZC1uZXh0anNcXG5vZGVfbW9kdWxlc1xcQGFkcmFmZnlcXGVucy1ub3JtYWxpemVcXGRpc3RcXGluZGV4Lm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIDIwMjMtMDktMjVUMDE6MDE6NTUuMTQ4WlxyXG4vLyBjb21wcmVzc2VkIGJhc2U2NC1lbmNvZGVkIGJsb2IgZm9yIGluY2x1ZGUtZW5zIGRhdGFcclxuLy8gc291cmNlOiBodHRwczovL2dpdGh1Yi5jb20vYWRyYWZmeS9lbnMtbm9ybWFsaXplLmpzL2Jsb2IvbWFpbi9zcmMvbWFrZS5qc1xyXG4vLyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9hZHJhZmZ5L2Vucy1ub3JtYWxpemUuanMjc2VjdXJpdHlcclxuLy8gU0hBLTI1NjogMDU2NWVkMDQ5YjljZjE2MTRiYjllMTFiYTdkOGFjNmE2ZmI5NmM4OTMyNTNkODkwZjdlMmIyODg0YjlkZWQzMlxyXG52YXIgQ09NUFJFU1NFRCQxID0gJ0FFRVVkd21nRFM4QnhRS0tBUDRCT2dEakFUQUFuZ0RVQUlNQW9BQm9BT0FBYWdDT0FFUUFoQUJNQUhJQU93QTlBQ3NBTmdBbUFHSUFIZ0F1QUNnQUp3QVhBQzBBR2dBakFCOEFMd0FVQUNrQUVnQWVBQWtBR3dBUkFCa0FGZ0E1QUNnQUxRQXJBRGNBRlFBcEFCQUFIZ0FpQUJBQUdnQWVBQk1BR0FVaEJlOEJGeFJFTjhzRjJ3QzVBSzVIQVc4QXJRa0R6UUN1aHpjM056Y0JQNjhORWZNQUJRZEhCdXc1QlY4RllBQTlNemtJOXI0WkJnN1F5UUFXQTlDZU93TE5DamNDanFrQ2h1QS9sbStSQXNYVEFvUDZBU2ZuRVFEeXRRRkpBaldWQ2tlWEFPc0E2Z29kQUIvY3dkQVVFMFdsQkNOL0FRVUNRUmpGRC9NUkJqSHhEUVNKYncwakJ6VUFzd0J4bWUrdG5JY0FZd2FiQXlzRzhRQWpBRU1NbXhjRHFnUEtReURYQ01NeEE3a1VRd0QzTlhPckFLbUZJQUFmQkMwRDN4NEJKUURCR2RVRkFoRWdWRDhKbndtUUppTldZVXpyZzBvQUd3QVVBQjBBRm5OY0FDa0FGZ0JQOWgzZ1Bmc0RPV0RLbmVZMkNoZ2xYMVVEWUQzMEFCc0FGQUFkQUJaeklHUkFud0REOHdBakFFRU16UmJEcWdNQjJzQUZZd1hxQXRDbkFzUzRBd3BVSktSdEZIc2FkVXo5QU1NVmJ3THBBQk0xTkpFWDBaa0NnWU1CRXlNQXhSVnZBdWtBRXpVQlVGQXRtVXdTQXk0REJURVIzM0VmdFFIZlN3QjVNeEovQWprV0tRTHpMOEUvY3dCQjZRSDlMUURQRHRPOUFTTnJpUUM1RFFBTkF3Q0syMUVGSTkxekh3Q29MOWtCcVFjSEJ3Y0hLelVEb3dCdkFRb2hQdlUzZkFRZ0h3Q3lBYzhDS1FNQTV6TVNlenI3VUxnRm1EcC9MelZRQmdFR0FpOEZZUVZndDhBRmNUdGxRaHBDV0VtZmU1dG1aNklBRXhzRHpROHQrWDhyQkt0VEFsdGJBbjBqc3k4Qmw2dXRQV01EVFI4RWkya1JBTmtEQnJOSE55c0RCekVDUVdVQWN3RnBKM2tBaXlVaEFKMEJVYjhBTDNFZkFiZk5BejgxS1VzRld3RjNZUVp0QW0wQStWRWZBekVKRFFCUlNRQ3pBUUJsQUhzQU03MEdEL3YzSVpXSEJ3QVJLUUF4QUxzalR3SFpBZU1QRXptWGdJSHdBQklBR1FBOEFFVUFRRHQzZ2R2SUVHY1FaQWtHVFJGTWRFSVZFd0swRDY0TDdSRWRETmtxMDlQZ0FEU3hCL01EV3dmekExc0RXd2Z6Qi9NRFd3ZnpBMXNEV3dOYkExc2NFdkFpMjhnUVp3OVFCSFVGbGdXVEJONElpeVpSRVlrSE1BamFWQlYwSmh4UEEwMEJCQ010U1NRN216TVRKVXBNRkUwTENBUTJTbXl2ZlVBRFR6R3pWUDJRcWdQVE1sYzVkQWtHSG5rU3FBQXlEM3NrTmIxT2hucFBjYWdLVTArMnRZZEphazV2QXNZNnNFQUFDaWtKbTIvRGQxWUdSUkFmSjZrUSt3dzNBYmtCUHczeFM5d0U5UVkvQk0wZmdSa2REOUdWb0FpcExlRU04U2JuTHFXQVhpUDVLb2NGOFV2NFBPRUxVVkZzRDEwTGFRbm5PbWVCVWdNbEFSRWlqd3JoRFQwSWNSRDNDczF2RGVrUlNRYzlBOWxKbmdDcEJ3VUxGUjA1RmJrbUZHS3dDdzA1ZXdiL0d2b0xreWF6RXkxN0FBWFhHaVVHVVFFdEd3TUEweTdyaGJSYU5Wd2dUMk1HQndzcEk4c1VyRkFrRFNsQXUzaE1HaDhIR1NXdEFwVkRkRXFMVVRvZWx5SDZQRUVOYWk0WFVZQUgrVHdKR1ZNTGhUeWlScTlGRWhIV1BwRTlUQ0pOVERBRU9ZTXNNeWVQQ2RNUGlReTlmSFlCWFFrbENiVU1kUk0xRVJzM3lRZzlCeDB4bHlnbkdRZ2xScGxnbmdUN293UDNFOVVERHdWRENVVUhGd081SERFVE1oVXRCUkdCS05zQzl6YlpMcmNDazFhRUFSc0Z6dzhwSCtNUVZFZmtEdTBJbndKcEE0Y2w3d0F4RlNVQUd5S2ZDRWRuQUdPUDNGTUpMczhJeTJwd0kzZ0RheFRyWlJGM0I1VU9Xd2VySERjVnd4emxjTXhlRDRZTUtLZXpDVjhCZVFtZEFXTUU1d2dOTlYrTXBDQkZaMWVMWEJpZklHVkJRMTRBQWpVTWFSV2pSTUdIZkFLUEQyOFNId0U1QVhjSFBRMEZBbnNSOFJGdkVKa0k3NFlJTmJrei9Eb3BCRk1oaHlBVkNpc0RVMnpTQ3lzbS9RejhiUUduRW1ZREVEUkJkL0pucjJDNktCZ0JCeDB5eVVGa0lmVUxsay9SREtBYXhSaEdWRElaNkFmREEvY2E5eWZ1UVZzR0F3T25CeGM2VVRQeUJNRUxiUWlQQ1VNQVRRNm5Hd2ZiR0c0S2RZelVBVFdQQWJ1ZEExdVZod0p6a3dZN0J3OEFhdytMQlgzcEFDRUNxd2luQUFrQTB3TmJBRDBDc1FlaEFCMEFpVVVCUVFNck13RWw2UUtUQTVjSU5jOEJtVE1COXkwRUg4Y01HUUQ3TzI1T0FzTzFBb0J1WnFZRjRWd0NrZ0pOT1FGUktRUUpVa3RWQTdOMTVRRGZBRThHRitOTEFSbXZUczhlNTBjQjQzTXZBTXNBL3dBSk9RY0pSUUhSQWZkeEFMc0JZd3MxQ2FhM3VRRlI3UzBBaHdBWmJ3SGJBbzBBNFFBNUFJUDFBVmNBVVFWZC9RWFhBbE5OQVJVMUhDOWJaUUcvQXlNQk53RVJBSDBHejVHcHpRc2pCSEVIMXdJUUh4WGxBdTh5QjdrRkF5TGpFOUZDeVFLOTRsa0FNaG9LUEFxckNxcGdYMlEzQ2pWMlBWUUFFaCtzUHNzL1VnVlZPMWM3WER0WE8xdzdWenRjTzFjN1hEdFhPMXdEbThQbXcrWUtjRjlKWWU4TXFnM1lSTXc2VFJQZllGVmdOaFBNTGJzVXhSWFNKVm9aUVJyQUp3a2w2RlVORHdndDEyWTBDREEwZVJmQUFFTXBiSU5GWTRvZU5BcFBIT3RUbFZUOExSOEF0VXVtTTdNTnNCc1pSRVFGUzNYeFlpNFdFZ29tQW1TRkFtSkdYMUd6QVY4M0pBS2grd0pvbkFKbURRS2ZpRGdmRHdKbVB3Sm1LZ1J5QklNRGZ4Y0RmcFk1Q2psN0d6bUdPaWNuQW13aEFqSTZPQTRDYmNzQ2JiTHpqZ00zYTBrdkFXc0E0Z0RsQUU0SkI1d01rUUVDRDhZQUVia0Nkek1DZHFaREFubFBSd0o0dmlGZzMwV3lSdmNDZkVNQ2Vzd0NmUTBDZlBSSUJFaUJaeWdBTHhsSlhFcGZHUnRLMEFMUkJRTFEwRXNyQTRoVEE0ZnFSTW1STmdMeXBWMEhBd095UzlKTU1Ta0gwMDFRVGJNQ2kwTUNpdHpGSHdzaFIyc0p1d0tPT3dLT1lFU2JoUUtPM1FLT1lIeFJ1Rk01QVE1UzJGU0pBcFAvQXBNUUFPMEFJRlVpVmJOVjFBb3NIeW1aaWpMbGVHcEZQejBDbDZNQzc3WllKYXdBWFNrQ2xwTUNsb0NnQUsxWnNGb05oVkVBUHdLV3VRS1dVbHhJWE5VQ21jOENtV2hjemwwTEhRS2Nuem5HT3FFQ25Cb0NuNThDbnJ5T0FDRVROUzRUQXAzMUFwNldBTGxCWVRoaDh3S2Uxd0tnY2dHdEFwNmpJd0tlVXFsanpHUXJLUzhDSjdNQ0pvSUNvUDhDb0ZEYkFxWXpBcVhTQXFnREFJRUNwL1pvZ0dpMUFBZE5haUJxMVFLczV3S3NzZ0t0YXdLdEJnSlhJUUpWNEFLeDVkc0RIMUpzbXdLeXdSRUNzdXdiYk9SdFoyMU1Zd01sMFFLMllEOURicFFES1VrQ3VHSUN1VXNaQXJrdWUzQTZjT1VDdlIwRExiWURNaFVDdm94eUJnTXpkUUsrSG5NbWMxTUN3ODhDd3doemhuUlBPVWwwNUFNOHF3RURQSjREUGNNQ3hZQUN4a3NDeGhTTkFzaHRWUUxJU0FMSlV3TEpNZ0prb1FMZDFuaDlaWGl5ZVNsTDFBTVlwMmNHQW1INEdmZVZLSHNQWHBaZXZ4VUN6MjhDejNBelQxZlc5eGVqQU1xeEFzOTNBUzN1QTA0V2ZrOEpBdHdyQXR1T0F0SlRBMUpnQTFOakFRVURWWkNBalVNRXp4cnhaRWw1QTRMU2c1RUMyc3NDMmVLRUZJUk5wMEFEaHFrQU13TmtFb1oxWGYwQVdRTGZhUUxldkhkN0F1SXo3UmdCOHpRckFmU2ZBZkxXaXdMcjl3THBkSDBEQXVyOUF1cm9BUDFMQWIwQzdvMEM2NkNXcnBjSEF1NURBNFhrbUgxdzVIR2xBdk1IQUcwRGpocVpsd0wzRndPUmNnT1Npd0wzbkFMNTNRTDRhcG9nbXErL081c2lBNTJIQXY3K0FSOEFQWjhnQVorM0F3V1JBNlp1QTZiZEFOWEpBd1p1b1l5aUNRMERERTBCRXdFakIzRUdaYjFyQ1FDL0JHL0RGWThldHhFQUczazlBQ2NETnhKUkE0MkRBV2NySlFDTTh3QWxBT2FuQzZPVkNMc0dJNmZKQmdDdkJSbkRCdkVsUlVZRkZvQUZjRDlHU0ROQ0tVSzhYM2taWDhRQWxzMEZPZ0NRVkNHYndUc3VZRG9adXRjT054ak9HSkhKL2dWZkJXQUZYd1ZnQldzRllBVmZCV0FGWHdWZ0JWOEZZQVZmQldCT0hRamZqVzhLQ2dvS2JGN3hNd1RSQTdrR044UERBTU1FcjhNQTcwZ3hGcm9GVGo1eFBuaENSMEsrWDMwL1gvQUFXQmt6c3dDTkJzeHp6QVNtNzBhQ1JTNHJERE1lTHo0OWZuWGZjc0g1R2Nvc2NRRnoxM1k0SHdWbkJYTEp5Y25BQ05kUll3Z0lDQXFFWG9XVHhnQTdQNGtBQ3hiWkJ1MjFLdzBBak1zVEF3a1ZBT1Z0SlVVc0oxSkN1VUxFU1VBclh5OWdQaTlBS3duSlJRWUtURDlMUG9BK2lUNTRQbmtDa1VMRVVVcERYOU5XVjNKVkVqUUFjMXczQTNJQkUzWW5YK2c3UWlNSmI2TUthaXN6UkNVdVFyTkN4RFBNQ2N3RVg5RVdKellSRUJFRUJ3SUhLbjZsMzNKQ05WSWZ5YlBKdEFsdHlkUFVDbWhCWncvdEVLc1pBSk9WSlUxQ0xSdXhiVUhPUUFvN1AwcytlRUpISEE4U0pWUlBkR00wTlZycHZCb0toZlVsTTBKSEhHVVFVaEVXTzF4TFNqOE1PMHVjTkFxSkl6VkNSeHY5RUZzcUt5QTRPUWdOajJud1pncDVaTkZnRTJBMUszWUhTMkFoUVFvakptQzdEZ3B6R0cxV1lGVVpDUVlIWk85Z0hXQ2RZSVZndTJCVFlKbHdGaDhHdlJiY1hiRzhZZ3RESHJNQnd6UFZ5UW9uSFFna0N5WUJnUUowQWpjNG5WcUlBd0dTQ3NCUElnRHNLM1NXRXRJVkJhNU44Z0dqQW8ra1Z3Vklad0QvQUVVU0NEd2VYNElUclJRc0o4SzNUd0JYRkR3RUFCMFR2elZjQXRvVFMyMFJJd0RnVmdaOUJCSW1ZZ0E1QUw0Q29pOExGbmV6T2tDbklRRmpBWTRLQkFQaDlSY0dzZ1pTQnNFQUpjdGRzV0lSdTJrVGtRc3RSdzdEQWNNQktncFBCR0lHTURBd0tDWW5LVFFhTGc0QUtSU1ZBRndDZGwrWVVaMEpkaWNGRDNsUEFkdDFGOVpaS0NHeHVFM3lCeGtGVkdjQS93QkZFZ2lDQndBT0xIUVNqeE90UURnMXo3ZGVGUk1BWjhRVEFHdEtiMUFwSWlQSEFEa0F2Z0tpTHkxREZ0WUNtQmlEQWxERFdOQjBlbzdmcGFNTy9hRVZSUnYwQVRFUVpCSU9EeU1FQWM4SlFoQ2JEUmd6RkQ0VEFFTUF1OVlCQ2dDc0FPa0FtNUkzQUJ3QVl4dk9OblIrTWhYSkF4Z0tReXhMMitra0poTWJoUUtEQk1rU3N2RjBBRDlCTlE2dVFDN1dxU1FId3hFQUVFSXUxaGtoQUgyejRpUVB3eUpQSE5XcGR5WUJSU3BuSkFMem9CQUVWUFBzSDIwTXhBMENDRVFLUmdBRnlBdEZBbE1Od3dqRURVUUpSQXJFTHRhcE1nN0REWmdKSXcrVEd1a0VJd3ZERmtNQXFBdERFTU1NQmhpb2UrUUFPM01NUkFBQ3JnbkVCU1BZOVEwRkRuYlNCb01BQjhNU1l4a1N4QUVKQVBJSkFBQjhGV01PRnRNYy9IY1h3eGhEQUM3REF2T293d0Fld3dKZEtES0hBQUhEQUFMckZVUVZ3d0Fid3l2enBXTVd2OHdBL0FCcEF5KytiY1lEVUtQRDBLaERDd0ttSjFNQUFtTUE1K1Vad3hBYWd3aXBCUkwvZUFEZnc2ZkRHT01DR3NPamszbDZCd09wbzRzQUVzTU9HeE1BQTVzQWJjTU9BQXZEcDBNSkdrTUR3Z2lwbk5JUEF3ZklxVU1HQU9HREFBUHpBQlhEQUFjREFBbkRBR21UQUJyREFBN0RDaGpEam5FV0F3QUJZd0FPY3dBdVV5WUFCc01BRjhNSUtRQU5VZ0M2d3k0QUE4TUFEcU1xOHdDeVlnQWNJd0FCOHdxcEFBWE9DeDBWNHdBSG93QkN3d0VLQUduREFBdURBQjNEQUFqRENha0FCZElBYnFjWjNRQ1pDQ2tBQmRJQUFBRkRBQWZqQUIyakNDa0FCcUlBQ1lNQUd6TUFiU01BNXNPSUFBaGpBQWhEQUJUREJBa3BBQWJTQU9PVEFBbERDNmtPelB0bkFBZERBRzZrUUZBQVR3QUt3d3dBQTBNQUNiVURQd0FISXdBWmd3QUNFNmNEQUFvakFBcERBQW9EcC9NR3d3QUpJd0FERXdBUVF3Z0FGRU1BRVhNQUQ1TUFEZk1BRGNNQUdSTU9GaU1BRlVNQWJxTVd1d0hEQU1JQUUwTUxBR2t6RWdEaFV3QUNRd0FFV2dBWGd3VWpBQWJZQUJqREJTWUJnekJhQUVGTkFMY1FCeFVNZWdBd01uZ0JyQTBJWmdKMEt4UUhCUkVQZDFOMFp6S1JKd2FJSEFacU5UNERxUXE4QnduZ0FCNERBd3QyQVg1NlQxb2NLUU5YQWgxR0FUUUdDM3RPeFlOYWdrZ0FNUUE1Q1FBREFRRUFXeExqQUlPWU5BRXpBSDd0RlJrNlRnbFNBRjhOQUFsWUFRK1MxQUNBUXdRb3JRQmlBTjRkQUoxd1B5ZVRBTlZ6dVFEWDNBSWVFTXA5ZXlNZ1hpVUFFZGtCa0ppektsdGJWVkFhUk1xUkFBRUFoeVEvU0RFejZCbWZWd0I2QVRFc09DbEtJUmNET0YwRS84MzJBRk50NUFCeUFua0NSeEdDT3M5NE5qWGRBd0lOR0JvbkRCd1BBTFcyQXdJQ0FnQUFBQUFBQUFZREJRTURBUnJVQXdBdEFBQUFBZ0VHQmdZR0JnWUZCUVVGQlFVRUJRWUhDQWtFQlFVRkJRUUFBQUlDQUFBQUlnQ05BSkFBbFQwQTZnQzdBTndBcEVRQXdnQ3lBSzBBcUFEdUFLWUEyZ0NqQU9jQkNBRURBTWNBZ1FCaUFOSUExQUVEQU40QThnQ1FBS2tCTVFEcUFOOEEzQXNCQ1E4eU85cmEydHE4eHVMVDF0UkpPQjBCVWdGY05VMEJXZ0ZwQVdnQld3Rk1VVWxMYmhNQlV4c05FQXM2UGhNT0FDY1VLeTB2TWo1QVFFTkRRMFJGRkVZR0pGZFhWMWRaV1ZoWkwxcGJYVnhjSTJObloyWm9aeXBzYm5aMWVIaDRlSGg0ZW5wNmVucDZlbnA2ZW5wOGZIMThlMklBUlBJQVNRQ2FBSGdBTWdCbStBQ09BRmNBVndBM0FuYnZBSXNBQmZqNEFHUUFrL0lBbndCUEFHSUFaUC8vc0FDRkFJVUFhUUJXQUxFQUpBQzJBSU1DUUFKREFQd0E1d0QrQVA0QTZBRC9BT2tBNlFEb0FPWUFMd0o3QVZFQlFBRStBVlFCUGdFK0FUNEJPUUU0QVRnQk9BRWNBVmdYQURFUUNBRUFVeDhTSGdzZEhoWUFqZ0NXQUtZQVVRQnFJQUl4QUhZQWJ3Q1hBeFVESnpJRElVbEdUekVBa1FKUEFNY0NWd0trQU1BQ2xnS1dBcFlDbGdLV0FwWUNpd0tXQXBZQ2xnS1dBcFlDbGdLVkFwVUNtQUtnQXBjQ2xnS1dBcFFDbEFLVUFwUUNrZ0tWQW5VQjFBS1hBcDhDbGdLV0FwVWVBSUVUQlFEK0RRT2ZBbUVDT2g4QlZCZzlBdUlaRWpNYkFVNC9HMVdaQVh1c1JBRnBZUUVGQTBGUEFRWUFtVEVlSUpkeUFERm9BSEVBTmdDUkE1ek1rL0MyakdJTndqTVd5Z0laQ2FYZGZESUxCQ3M1ZEFFN1luUUJ1Z0RsaG9pSGhvaUdpWXFLaG91T2pJYU5rSTZJajRxUWlwR0drb2FUaHBTU2xZYVdocGVLbUlhWmhwcUdtNGFjaTUyUW5vcWZodUlDNFhUcEF0OTBBSXAwTEhTb0FJc0FkSFFFUXdSQUJFSUVSUVJEQkVrRVJnUkJCRWNFU1FSSUJFUUVSZ1JKQUo1dWRBQ3JBNDkwQUx4dUFRMTBBTkZaZEhRQTEzUUNGSFFBL21KMEFQNEJJUUQrQVB3QS9BRDlBUHdEaEdaMDNBU01LMjNIQVA0QS9BRDhBUDBBL0NSMGRBQ1JZblFBL2dDUkFTRUEvZ0NSQXZRQS9nQ1JBNFJtZE53RWpDdHR4eVIwQVA5aWRBRWhBUDRBL2dEOEFQd0EvUUQ4QVA4QS9BRDhBUDBBL0FPRVpuVGNCSXdyYmNja2RIUUFrV0owQVNFQS9nQ1JBUDRBa1FMMEFQNEFrUU9FWm5UY0JJd3JiY2NrZEFKTEFUNTBBbElCUVhRQ1U4bDBkQUpmZEhRRHBnTDBBNllEcGdPbkE2Y0Rwd09uQTRSbWROd0VqQ3R0eHlSMGRBQ1JZblFCSVFPbUFKRURwZ0NSQXZRRHBnQ1JBNFJtZE53RWpDdHR4eVIwQkRoMEFKRUVPUUNSRHBVNWRTZ0NBRFIwM2dWMkN3QXJkQUVGQU01aUNuUjBBRjFpQUFZY09ncDBkQUNSQ25RQVhBRUl3V1owQ25SbWRIUUFrV1owQ25SbWRFWGdBRkYwM2dwMGRFWTB0bFQydTNTT0FRVHdzY3doalpaS3JoWWNCU2ZGcDlYTmJLaVZET0QyYitjcGU0L1oxN21RbmJ0enpoYWVRdEUyR0dqMElETlRqUlVTeVR4eHcvUlBIVy8rdlM3ZDFOZlJ0OXo5UVBaZzRYN1FGZmhDbmt2Z05QSUl0T3NDMmVWNmhQYW5uWk5IbFo5eHJ3WlhJTU9sdTNqU29RU3E3OFdFandMancxRUxTbEYxYUJ2Znp3azVaWDdBVXZRempQUUtiRHVRK3NtNHdOT3A0QTZBZFZ1UlMwdDF5L0RacGc0UjZtN0ZOak05SGd2VzdCaTg4emFNak9vNmxNOHd0QkJkajhMUDR5bHYzekNYUGhlYk1LSmMwNjZvOXNGNzFvRlcvOEpYdTg2SEpid0RJRDVsenc1R1dMUi9MaFQwUXFucDJKUXhOWk5mY2JMSXpQeStZeXBxUm0vbEJtR21leCs4MitQaXN4VXVtU2VKa0FMSVQ2ckplenhNSCtDVEptUXR0NXV3VFZiTDNwdG1qRFVRemxTSXZXaThUbDduZzFOcHVSbjFOZzRuMTRRYyszSWlsN093a3ZOV29nTFNQa24zcGloSUZ5dHlJR21NaE9lM24xdFdzdU15OUJkS3lxRjRaM3YyU2dnZ1RMOUtWdk1YUG5DYlJlK29PdUZGUDNIZWpCRy93OWd2bWZOWXZnNkp1V2lhMmxjU1NOMXVJakJrdHpvSWF6T0hQSlo3a0tIUHo4bVJXVmRXM2xBOFdHRjlkUUY2Qm02NzNib292M0JVV0RVMkpOY2FoUjIzR3RmSEtMT3ovdmlaK3JZblpGYUl6blhPNjdDWUVKMWZYdVRScFpoWVprS2U1NHhlb2Fna05HTHMrTlRaSEUwclg0NS9YdlEyUkdBRFg2dmNBdmR4SVVCVjI3d3hHbTJ6alpvNFgzSUxnQWxyT0ZoZXVaNnd0c3ZhSWo0eUxZN3FxYXdsbGlhSWNyejJHK2MzdnNjQW5Da0N1TXpNbVp2TWZ1OWxMd1R2ZlgrM2NWU3lQZE45WndnRFpoZmpSZ05KY0xpSjY3Yjl4eDhKSHN3cHJiaUUzdjlVcGhvdEFQSWduWFZJTjVLbU1jMHBpWGhjNmNDaFBuTitNUmhHOWFkdGR0dFFUVHdTSXBsOEk0L2ovL2Qzc3oxMzI2cVRCVHBQUk0vSGdoM2t6cUVYczhaQWs0RXJRaE5POGh6clEwRExrV01BL04rOTF0bjJNZE9KbldDMkZDWmVoa1Fyd3p3YktPamh2WnNiTTk1UW9lTDlza1l5TWY0c3JWUFZKU2dnN3BPTFV0ci9uOWVUOTlvZTluTHRGUnBqQTlva1YyS2o4aDlrNUhhQzBvaXZSRDhWeVhrSjgxdGNkNGZITlhQQ2Zsb0lRYXN4c3VPMTgvNDZkUjJqZ3VsL1VJZXQyRzBrUnZueU9OTUtoSHM2SjI2RkVvcVNxZCtyZllqZUVHd0hXVkRwWDFmaDFqQkJjS0dNcVJlcGp1OVkwMG1EVkhDK1hkaWovajQ0cktmdmZqR2luTnMxak8vMEYzakI4M1hDRElOTi9IQjg0YXhsUCszRS9rbGt0Um8rdmwzVS9haXlNSmJJb2RFMVhTc0RuNlVBeklvTXRVT2JZMitrLzRnWS9sK0FrWko1U2oydlFya3lMbTNGb3hqaERYKzMxVVhCRmY5WHJBSDMxZkZxb0JtREVadmh2dnBuWjg3TitvWkV1N1U5Ty9ubmsrUVdqM3g4dXlvUmJFbmYrTzVVTXI5aTBuSFAzOElGNUF2enJCVzhZV0JVUjBtSUF6SXZuZFFxOU4zdi9KdG8zYVBqUFhVUGw4QVNkUFB5QXA3akVOZjhiazdWTU05b2w5WEdtbEJtZURNdUdxdCtXenVMNkNYQXhYakloQ1BNNXZBQ2NoZ01KLzhYQkdMTy9EMWlzVnZHaHd3SEhyMURMYUk1bW4ySnIvYjFwVUQ5MHVjaURhUzhjWE5EekNXdk5tVC9QaFFlNWU4blRubm5rdDhEcy9TSWppYmN1bS9mcURoS29weEFZOEFrU3JQbitJR0RFS09PK1UzWE9QNmRqRnMySDVOOStvcmhPYWhpUWs1S25FVVdhK0N6a1Z6aHA4Yk1IUmJnODFxaGpqWHVJS2JIalNMU0lCS1dxb2NrR3RLaW5ZK3o0L1JkQlVGNnBjYzNKbW5seFZjTmdySTRTRXpLVVpTd2NEMlFDeXh6S3ZlK2dBbWc2WnVTUmtwUEZhNm1mVGh1N0xKTnUzSDVLNDJ1Q3BOdlBBc29lZG9sS1YvTEhlL2VKK0JiYUc1TUcwTmFTR1ZQUlVtTkZNRkZTU3BYRWNYd2JWaDdVRVRPWlp0b1ZOUkdPSWJia2lnM01jRXRSNjhjRzBSWkFvSmV2V1lvN0RnL2xaMUNRemJsV2VVdlZIbXI4Zlk0TnFkOUpKaUgvekVYMjRtSnZpSDYwZkF5RnIwQTNjNGJDMWozeVpVNjBWZ0p4WG44SmdKWExVSXNpQm5tS21NWXorN3lCUUZCdnFiMmVZbnVXNTlqb1pCZjU2L3dYdldJUjRSOHdUbVY4MGkxbVp5K1M0K0JVRVMraHpqazB1WHBDLy8vei9JbHFIWjFtb256bFhwOGFDZmhHS010aTczRkkxS2JMMXE2SUtPNGZ1QnVaNTlnYWdqbjV4VTc5bXVNcEhYZzZTK2UrZ0RNL1U5QktMSGJsOWw2bzhjelFLbDRSVWtKSmlxZnRRRzJpM0JNZy9UUWxVWUZrSkRZQk9PdkF1Z1l1ellTRG5aYkREZC9hU2Q5eDBPZTZGK2JKY0hmbDkrZ3A2TDUvVGdBK0JkRkZvdmJmQ3JRNDBzNXZNUHc4ODY2cE5YOHp5RkdlRldkeElwUFZwOVJnMVVQT1ZGYkZacnZhRnEvWUF6SFFncU1XcGFoTVlmcUhwbXdYZkhMMS9rcFltR3VIRndUNTVtUXUwZHlsZk51cTJPcTBoVE1DUHdxZnhudUJJUExYZmNpNFkxQU55KzFDVWlwUXhsZC9pelZoMTZXeUcyUTBDUVE5TnF0QW54MUhDSHdEajdzWXhPU0Iwd29wWlNuT3p4UU9jRXhteHJWVEYyQmtPdGhWcEdmdWhhR0VDZkNKcEpLcGpuaWhZK3hPVDJRSnhONjErOUs2UVNxdHYyU2hyODJJM2pnSnJxQmcwd0VMRlpQanZIcHZ6VHRhSm5MSzZWYjk3WW45MzNrb08vc2FON2ZzandOS3pwNGwybEpWeDJvcmpDR3pDLzRaTDR6Q3ZlcjZhUVl0QzVzZG95Y2h1RkU2dWZPaW9nK1ZXaTVVRGtibXZtdGFoLzNhQXJFQklpMzlzNUlMVW5sRkxnaWxjR3V6OUNRc2hFWTdmdzJvdW9JTEFZUFZUL2d5QUlxM1RGQUl3VnNsK2t0a1J6L3FHZm5DREdybTVnc2wvbDlRZHZDV0dzalB6M2RVN1h1cUtmZFVyci82WElnanA0cmV5NkFKQm1DbVVKTWpJVEhWZEZiNW0xcCtkTE1DTDh0NTV6RDQyY21mdG1MRUpDMERhMDRZaVJDVlVCTExhOEQwNzEvTjVVQk5CWERoMExGc21oVi81QjVFeE9CNGozV1ZHL1MzbGZLNW8rVjZFTEh2eTZSUjluNGFjK1ZzSzRWRTR5cGhQdlYra0c5RmVnVEJINFpSWEwySHl0VUhDZHVKYXpCL0t5a2pmZXRZeE9YVEx3czI2N2FHT2QrSStKaEtQLy8rVm5YbVM5ME9EL2p2TGNWdTBhc3lxY3VZTjFtU2I2WFRsQ2txdjF2aWdaUElZd05GL3pwV2NUMUdSLzZhRUlSamtoMHloZzRMWEpmYUdvYllKVFk0Skk1OEtpQUtnbW1nQUtXZGw1bllDZUxxYXZSSkdRTnVZdVp0WkZHeCtJa0k0dzROUzJ4d2JldE5NdW5PakJ1L2htS0NJL3c3dGZpaXlVZC8vNHJiVGVXdDRpekJZOFl2R0lONnZ5S1ltUC84WDh3SEtDZU4rV1JjS003MCt0WEtOR3lldlU5SDJEZzVCc2xqblRmOFlic0oxVG1Nczc0Q2UyWGxIaXNsZWd1aHllZzQ0clFPSFp1dy82SFRraG5udXJLMmQ2MnE2eVM3MjEwU3NBSWFSK2pYTVFBK3N2a3JMcHNVWStGMzBVdzg5dU9kR0FSNnZvNEZJTUUwRWZWVmVIVHU2ZUtpY2ZoU3FPZVhKaGJmdGNkMDhzV0VuTlVMMUM5Zm5wclRnZDgzSU11dDhvblZVRjBodnF6WmZIZHVQamJqd0VYSWNvWW15K1A2dGNKWkhtZU92NlZydkVka0hESmVjakh1SGVXQU5lNzlWRzY2MnFUakEvSEN2dW1WdjNxTCtMck9jcHFHcHMyWkd3UWRGSjdQVTRpdXlSbEJyd2ZPK3huUHlyNDdzMmNYVmJXekF5em5EaUJHakNNM2tzeGpqcU02MkdFOUM4ZjVVMzhrQjNWanRhYktwL25SZHZNRVNQR0RHOTBiV1JMQXQxUWs1RHlMdWF6UlIxWXpkQzFjK2haWHZBV1Y4eEE3MlM0QThCNjd2alZoYmJhM01Nb3AyOTNGZUVYcGU3ekl0TVdySkcvTE9IOUJ5T1htWW5OSmZqbWZ1WDlLYnJwZ0xPYmE0blorZmw4R2Jkdi9paHYrNndGR0tIQ1lyVndtaEZDMEozVjJibjJ0SUIxd0NjMUNTVDNkM1gyT3l4aGd1WGNzNHNtNjc5VW5nem9mdVNlQmV3TUZKYm9JUUhiVWgvbTJKaFcyaEc5REl2RzJ0N3laSXpLQlR6OXdCdG5OQysycENSWWhTSXVRMWo4eHN6NVZ2cW55VUl0aHZ1b3l5dTdmTklyZy9LUVVWbUdRYXFrcVprL1Z4NWIzMy9nc0VzOHlYN1NDMUorTlY0aWN6NmJ2SUU3QzVHNk1jQmFJOHJWZzU2cTVRQkpXeG4vODdRMXNQSzQrc1FhOGZMVTVnWG80cGFhcTRjT2NRNHdSMFZCSFBHaktoK1VsUENiQTFuTFh5RVVYNDVxWjhKNy9MbjRGUEpFMlRkekQwWjhNTFNOUWl5a01NbVN5T0NpRmZ5ODRScTYwZW1ZQjJ2RDA5S2pZd3NvSXBlRGNCRFRFbEJiWHhORDcyeWhkOXBDLzFDTWlkLzVIVU12QUwyN090Y0lKRHpOS3BSUE5xUE9weXQyYVBHejlRV0lzOWhROUxpWDVzOG05aGpUVXUvZjdNeUlhdGpqZCt0U2ZRM3VmWnhQcG1KaFRhQnRadEtMVWNmT0NVcUFEdU8rUW9IOEI5djZVK1AwSFYxR0xRbXRvTkZUYjNzNzRpdlpnakVTMHFmSys4UmRHZ0JiY0NNU3k4ZUJ2aDk4K2V0MUtJRnFTZTFLUVB5WFVMQk1Uc0lZbnlzSXdpWkJKWWRJMjB2c2VWK3d1SmtjcUdlbWVoS2phQWI5TDU3eFptM2cyelgwYloyeGsvZlUrYkNvN1RsbmJXN0p1RjFZZFVSby8yR3c3VmNsREcxVzdMT3RhczJMWDR1cGlmWi8yM3J6cHNuWS9BTGZSZ3JjV1A1aFltVjlWeFZPUUExZlp2cDlGMlVOVSs3ZDd4UnlWbTV3aUxwMy8wZGxWN3ZkdzFQTWlacmJEQVl6SVZxRWpSWTJZVTAzc0poUG5sd0lQY1pVRzVsdEw2UzhYQ3hVMWVZUzVjanIzNHZlQm1YQXZ5N3lONFpqQXJJRzBkZkQvNVVwQk5sWDFaUG94Sk93eXFSaTN3UVd0T3pkNG9OS2gwTGtvVG04Y3dxZ0lmS2hxcUdPaHdvNzFJK3pYbk1lbVR2MkIyQVV6QUJXeUZ6dEdnR1VMakREeldZd0pVVkJUaktDbjVLMlFHTUsxQ1FUN1N6emlPam8rQmhBbXFCanp1YzN4WXltMmVlZEdlT0lSSlZ5VHdEdzM3aUNNZTRnNVZibnNiNVpCZHhPQW5NVDdIVTRESHB4V0d1UTdHZWlZMzBDcGJ2enNzNTUrNUttMVlzYkQ1ZWEzTkk5UU5ZSVhvbDVhcGdTdTlkWjhmOHhTNWR0SHBpZG81QmNsRHVMV1k0bGhpazB0YkphMDd5SmhIMEJPeUV1dC9HUmJZVFM2UmZpVFlXR01Da05wZlNIaTdIdmRpVGdsRVZIS1pYYVZoZXpINGtrWGlJdktvcFlBbFB1c2Z0cEU0YTVJWnd2dzF4L2VMdm9ESWgvenBvOUZpUUluc1RiMlNBa0tIVjQyWFlCanBKRGc0Mzc0WGlWYjN3czRxTTBzOWVTUTVIenNNVTRPWkpLdW9wRmpCTStkQVpFbDhSVU14NXVVMk40ODZLcjE0MXRWc0dRZkdqT1JZTUNKQU1zeEVMZU5UNFJtV2pSY3BkVEdCd2N4NlhOOWRyV3FQbUp6Y3JHckg0K0RSYzcrbjF3M2tQWnd1MEJrTnI2aFFycWdvN0pUQjlBNWtkSi9IN1A0Y1dCTXdzbXVpeEF6SkIzeXJRcG5HSXE5MGx4QVhMekRDZG4xTFBpYnNSdDdySE5qZ1FCa2xSZ1BaOHZUYmpYZGdYclRXUXNLNU1kclhYUVZQcDBSaW5xM2ZyelpLSjBxRDZRaGM0MFZ6QXJhVVhsb2IxZ3ZraEszdnBtSGdJNkZSbFFaTng2ZVJxa3Awenk0QVFsWDgxM2ZBUHRMM2pNUmFpdEdGRmpvMHptRXJsb0MraCtZWWRWUTZrNEYvZXB4QW9GMEJtcUVvS05UdDZqNHZRWk5RMkJvcUY5Vmo1M1RPSW9ObURpdTlYcDE1UmtJZ1FJR2NvTHBmb0liZW56cEdVQXRxRkpwNVcrTExueDM4akhlRUNUSi9uYXZLWTFOV2ZOMHNZMVQ4L3BCOGtJSDNEVTNEWCt1NlczWXdweXBCTVlPaGJTeEdqcTg0Ulo4NGZXSm93OHB5SHFuNFMvOUoxNUVjQ01zWHFyZnd5ZDltaGl1MytyRW85cFBwb0prZFpxSGpyYTROdnpGd3VUaE5LeTZoYW8vU2xMdzNaQURVY1VwM3czU1JWZlcycmhsODB6T2dUWW5LRTBIczJxcDFKNkgzeHFQcUlrdlVEUk1GRFl5UmJzRkkzTTlNRXlvdlBrOHJsdzcvMGE4MWNEVkxtQnNSMnplMnBCdUtiMjNmYmVaQzB1WG9JdkRwcGZUd0lEeGsxT3EyZEdlc0djK29KWFdKTEdrT2hhM0NYK0RVbnpnQXA5SEdIOVJzUFpONjNIbjRSTUE1ZVNWaFBITys5UmNSYi9JT2d0VzMxVjFRNUlQR3RveFBqQytNRUpiVmxJTVlBRGQ5YUhZV1VJUUtvcHVQT0htb3FTa3VibkFLbnpnS0hxZ0lPZlc1UmRBZ290TjZCTitPMlpZSGt1ZW1MbnZROFU5VEhWclMxUnRMbUtiY0M3UGVlRHNZem52cXplZzZWQ053bXIwWXl4MXduTGp5VDg0Qlp6M0VKeUNwdEQzeWV1ZUF5RFdJczBMMnFzL1ZRM0hVeXFmcmphMFYxTGREenFBaWtlV3VWNHNjN1JMSUI2OWpFSUJqQ2t5WmVkb1VIcUNyT3ZTaFZ6eWQ3M09kckpXMGhQT3VRdjJxT29IRGM5eFZiNll1NnVxM1hxcDJaYUg0NkE3bHpldmJ4UUVtZnJ6dkFZU0p1WjRXRGsxSHozUVgxTFZkaVVLMEV2bEFHQVlsRzNNZDMwcjdkY1BONjN5cUJDSWoyNXBycHZaUDBuSTQrRWdXb0ZHOTVWNTk2Q3VyWHBLUkJHUmpRbEhDdnk1SWIvaVc4blpKV3dyRVQzbWdkNm1FaGZQNEtDdWFMam9wV3M3aCtNZFhGZEl2OGRIUUpnZzF4aTFlWXFCMHVEWWp4d1ZtcmkwU3Y1WEt1dC9vbnFhcEMrRlFpQzJDMWx2WUo5TVZjbzZ5RFlzUzNBQU5VZk10dnRiWUkyaGZ3WmF0aVNzbm9VZU1aZDM0R1Zqa01NS0ErWG5qSnBYZ1JXMlNIVFpwbFZvd1BtSnN2WHk2dzNjZk8xQUsyZHZ0WkVLVGtDL1RZOUxGaUtIQ0cwRG5yTVFkR20ybHpsQkhNOWlFWXluSDJVY1ZNaFVFanNjMG9EQlRnbzJaU1ExZ3prQUhlV2VCWFlGallMdXVmOHl6VEN5Ny9SRlI4MVdEalhNYnEyQk9INWRVUm54bzZvaXZteEwzY0t6S0lubFprRDMxbnZwSEI5S2s3R2ZjZkUxdCsxVjY0YjlMdGdlSkdscFJGeFFDQXFXSjVEb1k3N3NraThnc09FT3IydXl3WmFvTy9OR2EwWDB5MXBOUUhCaTNiMlNVR05wY1p4RFQ3ckxiQmYxRlNuUThndXhHVzNXKzM2QlcwZ0JqZTRET3o2QmE2U1ZrMHhpS2d0K3EySk9GeXI0U1lmbnUrSWMxUVpZSXV3SEJyZ3pyNlV2T2NTQ3pQVE9vN0Q2SUM0SVNlUzd6a2w0aCsyVm9lSHBuRy91V1IzK3lzTmdQY09JWFFidjBuNG1yM0J3UWNkS0p4Z1BTZXl1UC96MUpqZzRlOW5Vdm9YZWdxUVZJRTMwRUh4NUdIditGQVZVTlRvd1lESmd5RmhmNUl2bFltRXFSaWY2K1dOMU1rRUptRGNRSVR4OUZYMjNhNG14eTFBUVJzT0hPLytlSW1YOWw4RU1KSTNvUFd6Vlh4U09lSFUxZFVXWXIydUFBN0FNYit2QUVaU2JVM3FvYjlpYkN5WGV5cEVNcFo2ODYzbzZRUHFscUdIWmt1V0FCU1RWTmQ0Y09oOWh2M3FFcFN4Mlp5L0RKTVA2Y0l0RW1pQko1UEZxUW5ERUl0M05yQTNDT2xPU2d6NDNEN2dwTkZOSjVNQmg0b0Z6aERQaWdsQzJ5cHNOVTRJU3l3WTJlcmt5YjFOQzNRaC9JZldqMGVEZ1pJNC9sbjhXUGZCc1QzbWVUanExVXF0MUU3WmwvcWZ0cWt4NmFNOUt1ZU1DZWtTbk1yY0hqMUNxVFdXekV6UHNaR2NEZTNVZTRXcytYRllWeE5iT0ZGOGV6a3ZRR1I2Wk90T0xVMmxRRW5NQlN0eDQ3dkU2UGI3QVlNQlJqMk9PZlpYZmlzakpucFRmU05qbzZzWjZxU3ZOeFpObURlUzdHazN5WXlDazFIdEtOMlVuaE1Jak9YVXpBcUR2OTBseDlPL3EvQVQxWk1uaXQ1WFFlOXdtUXhuRS9XU0gwQ3FaOS8ySHkrU2ZtcGVnOFJ3c0hJNVo4a0M4SDI5M20vTEhWVk0vQkE3SGFUSllnNUVuazdNL3hXcHEwMTkyQUNmQmFpMkxBL3FyQ2pDcjZEaDFCSU16TVhJTkJtWDk2TUo1SG4ybnhsbi9SWFBGaHdIeFVtU1YwRVYyVjBqbTg2L2R4eHVZU1UxVzdzVmtFYk45RXprRzBRRndQaHlIS3liM3QrRmo1V29VVVRFcmNhekUvTjZFVzZMdnAwZC8vU0RQajdFVjlVZEpOK0FtbmYzV3drM0EwU2xKOVowMHl2WFo3bjN6NzBHNDdIZnNvdzhXcTFKWGNmd25BK1l4YTVtRnNnVjQ2NEtLUDRUMzF3cUlnekZQZDNlQ2UzajVvcnk1ZkJGMmhnQ0Z5VkZyTHpJOWVldE5Ydk03b1FxeUZnRG80Q1RwL2hEVjlOTVg5SkRIUS9ueUhUTHZaTE5MRjZmdG4yT3hqR204K1BxT3doeG5QSFdpcGtFLzh3YnR5cmk4MFNyN3BNTmtRR01mbzRaWUs5T2NDQzRFU1ZGRmJMTUl2bHhTb1JxV2llMHd4cW5MZmNMU1hNU3BNTVFFSllEVk9iWXNYSVFOdjRUR053anExa3ZUMVVPa2ljVHJHM0lhQlozWGRTY1MzdThzZ2VaUFZwT0xrYmlGOTQwRmpiQ2VOUklOTnZEYmQwMUVQQnJUQ1BwbTEybTQzemUxYkJCNTlJYTZPdmhudXIvTnZ4M0l4d1NXb2wrM0gycWZDSlI4ZGY2YVFmNHY2V2lPTnhrSytJcVQ0cEtRclpLL0xwbGdESS9QSlpiT2VwOGR0YlY3b0NyNkNnZnBXYThOY3pPa1B4ODFpU0hic05oVlNKQk90ckxJTXJMMzFMSzlUcUhxQWJBSGUwUkxtbVY4MDZrUkxETE5FaFVFSmZtOXUwc3hwa0w5M1pnZDZydyt0cUJmVE1pNTl4cVhITFhTSHdTYlNCbDBFSzArbG9FQ09QdHJsKy9uc2FGZTE5N2RpNHlVZ29lNGpLb0FKRFhjNkRHRGpyUU9vRkRXWko5SFh3dDh4RHJRUCs3YVJ3V0tXSTFHRjhzOE80S3p4V0JCY3dubDN2bmwxT2V6M29oNkVhMXZqUjcvejdERFRyRnRxVTJXL0tBRXpBdVhETlo3TVk3M01GMjE2ZHpkU2JXbVVwNGxjbTdrZUpmV2FNSGd1dDl4NUM5bWo2NlowbEoreWhzalZ2eWlXcmZrMWx6UE9UZGhHMTVZN2dRbFh0YWN2STdxdi9YTlNzY0R3cWtnd0hUL2dVc0Q1eUI3TGRSUnZKeFFHWUlObjloVHBvZEtGVlNUUHJ0R3Z5UXcrSGxSRlhJa29kRXJBR3U5SXkxWXBmU1BjM2prRmg1Q1gzbFB4djdhcWpFL0pBZlRJcEVqR2IvSDdNTzBlMnZzVmlTVzFxYS9MbWk0L240REVJM2c3bFlyY2Fuc3BEZkVwS2tkVjFPalNMT3kwQkNVcVZvRUNhQjU1dnMwNnJYbDRqcW1Mc1BzRk0vN3ZZSjB2ckJoRENtLzAwQS9IODFsMXVla0ovNkxtbDNIYjkrTktpTHFBVEptRHB5emZZWkZIdW1FakM2NjJMMEJ3a3hpN0U5VTRjUUEwWE1WRHVNWUFJZUxNUGdRYU1WT2Q4Zm10NVNmbEZJZnVCb3N6ZUF3N293NWdYUEUyWS95QmMvN2pFeEFSVWYvQnhJSFFCRjVTbjNpNjF3NHo1eEpkQ3lPMUYxWDMrM2F4K0pTdk1lWjdTNlFTS3AxRnAvc2pZejZaK1ZnQ1p6aWJHZUVvdWpyeWZNdWxIN1JhaTVrQWZ0OWViY1c1MER5SnIydW8yejk3bVRXSXU0NVlzU25OU01yck5VdUcxWHNZQnREOVREWXpRZmZLQjg3dldia000RWJQQUZnb0JWNEdRUyt2dEZEVXFPRkFvaTFuVHRtSU92ZzM4TjRoVDJTbjhyOGNsbUJDWHNwQmxNQllUbnJxRkpHQlQzd1pPekF5SkRyZTlkSEg3K3g3cWFhS0RPQjRVUUFMRDVlY1MwREU0b2J1YlFFaXVKWjBFcEJWcEx1WWNjZThBYTRQWWQvVjRETERBSkJZS1FQQ1dUY3JFYVo1SFliSmkxMUdkNmhqR29tMWlpMThWSFluRzI4Tktwa3oyVUtWUHhsaFlTcDh1WnIzNjdpT21veTd6c3hlaFc5d3pjeTJ6RzBhODBQQk1DUlFNYjMyaG5hSGVPUjhmbk5EelpoYU5ZaGtPZERzQlVaM2xvRE1hMVlQMHVTMGNqVVAzYi82REJscW1aT2VOQUJEc0xsNUJJNVFKdXBzOHV4QXVXSmRrVUIvcE82WmF4NnRzZzdmTjVtampEZ01HbmdPK0RQY0txaUhJRGJGSUd1ZHh0UFRJeURpOVNGTUtCRGNmZEdRUnY0MXExQXFteGdrVmZKTW5QOHcvQmM3TjkvVFI2QzdtR09iRnFGa0lFb204c0tpMnhZcUpMVENISzdjeHphWnZxT0RvMjJjM3dpc0JDUDRIZUFnY1JiTlBBc0JrTlJoU21ENDhkSHVwZEJSdzRtSXZ0UzVvZUY2emVUMUtNQ3loTW5taHBrRkFHV25Hc2NvTmt3dlE4Wk01bEUvdmdUSEZZTDk5T3VOeGRGQnhURURkNXYycUxSOHk5V2tYc1dnRzZrWk5uZEZHK3BPL1VBa09DaXBxSWhMM2hxN2NSU2RyQ3E3WWhVc1RvY0VjbmFGYTZuVmtoblNlUllVQTFZTzB6NWl0RjlTbHkzVmx4WUR3MjM5VEpKSDZmM0VVZllPNWxiN2JjRmN6OEJwN09vOFFtbnNVSE96L2ZhZ1ZVQnRLRXcxaVQ4OGorYUtrdjhjc2NLTmtNeGpZcjgzNDREMWtGb1o3L3RkMVc2TENOWU41OTQzMDF0VUdSbUZqQXplUmc1dnlvTTFGNitiSlovUTU0ak4vazhTRmQzRHhQVFlhQVVzaXZzQmZnVG43TXg4SDJTcFB0NEdPZFlSbkVKT0g2akhNMnA2U2dCMGd6SVJxNmZIeEdNbVNtcWFQQ21sZnd4aXVsb2FWSWl0TEdOOHdpZTJDRFdoa3pMb0NKY09EaDdLSU9BcWJIRXZYZFV4YVM0VFRUczA3Q2x6ai82R21WczlraVpEZXJNeEVuaFVCNlFRUGxjZnFrRzk4ODJScUhvTGlIR0JvSGZRdVhJc0FHOEdUQXRhbzJLVndSbnZ2YW04am8xZTMxMkdRQUtXRWE0c1VWRUFNRzRHNmNrY09ORHdSY2cxZTJEMytvaFhnWTRVQVdGOHdIS1FNclNuekNnZkZwc3hoK2FIWE1HdFBRcm9RYXNSWTRVNlVkRzByejFWamJrYTBNZWtPR1JaUUV2cVFGbHhzZUZvcjh6V0ZnSGVrM3YyOStXcU42Z2FLNWdaT1RPTVp6cFFJQzEyMDFMa01DWGlsZDN2V1hTYzVVWDl4Y0ZZZmJSUHpHRmExRkRjUGZQQi9qVUVxL0ZlR3Q0MTlDSTNZbUJsVm9Ic2E0S2Rjd1FQNVpTd0hIaEZKNy9QaC9SYXAvNHZtRzkxZUR3UFAwbERmQ0RSQ0xzelRxZnpNNzF4cG1pS2kySHdTNFdscXZHTnd0dndGNURxcG42S1RxOGF4MDBVTVBreERjWnJFRUVzSXZIaVVYWEVwaGRiNEdCNEZ5bWxQd0J6NEdwZXJxcTVwVzdUUTYveU5SaFc4VlQ1Tmh1UDB1ZGx4bzRnSUxxNVp4QVprOFpHaDNnNENxeEpsUEtZN0FReHVwZlVjVnBXVDVWSXRwMSszMFVxb3lQNHdXc1JvM29sUlJna1daWjJaTjZWQzNPWkZlWEI4TmJuVXJTZGlrTnB0RDFRaUd1S2tyOEVtU1IvQUs5UncrRkYzczV1d3VQYnZIR2lQZUZPVmlsdE1LN0FVYU9zcTkreDljbmRrM2lKRUU1TEtaUmxXSmJLT1p3ZVJPem1QTlZQa2pFM0svVHlBNTdSczY4VGtaM01SOGFrS3BtN2NGam5qUGQvRGRrV2pnWW9LSFNyNVd1NXNzb0JZVTRhY1JzNWcyREh4VW1kcThWWE9YUmJ1bkQ4UU4wTGhna3NzZ2FoY2RvWXNOdnVYR1VLL0tYRC83b0ZiK1ZHZGhxSW4wMnZldU01Ykx1ZEpPYzJLeTBHTWFHNFcveFdCeElKY0w3eWxpSk9YT3B4MEFrQnFVZ3psRGN6bUxUNGlJTFhEeHh0UlIxb1phMkpXRmdpQWI0M29ickpuRy9UWkMyS1NLMndxT3pSWlRYYXZaWkZNYjFmM2JYdlZhTmFLODI4dzlUTzYxMGdrOEpOZjNnTWZFVHpYWHNiY3ZSR0NHOUpXUVo2K2NEUHFjNDQ2NllvMlJjS0grUElMZUtPcXRubGJJblIzTW1CZUdHM0ZIMTB5emt5YnVxRUMySFNRd3BBMEFuN2Q5KzczQmtEVVRtMzBiWm1vUC9SR2JnRk4rR3JDT2ZBRGdxcjBXYkkxYTFva3BGbXM4aUhZdzlobTB6VXZsRU1pdkJSeE1vZHJiSkorOS9wM2pVZFFROUJDdFFkeG5PR3JUNWR6UlVtdzA1OTMvbWJSU2RCZzBuUnZSWk01L0UxNm03WkhtREV0V2h3dmZkWkNaOEo4TTEyVzB5Uk1zelhhbVdmUVR3SVo0YXlZa3RybnNjUXVXcjhpZHAzUGpUMmVGL2ptdGRoSWZjcE1uYitJZlpZMkZlYlc2VVkvQUszalA0dTNUdTR6RTRxbG5RZ0xGYk0xOUVCSXNOZjdLaGpkYnFRL0Q2eWlEYitObEVpMlNLRCtpdlhWVUs4aWIwb0JvMzY2Z1hrUjhaeEdqcEpJRGNFZ1pQYTlUY1llMFRJYmlQbC9yUFVRRHUzWEJKOVgvR05xM0ZBVXNLc2xsNTdEemFHTXJqY1QrZ2N0cCs5TUxZWENxK3NxUDgxZVZRMHI5bHQrZ2NRZlpiQUNSYkVqdmxNc2t6dFpHOGdiQzhRbjl0dDI2UTd5N25EcmJacS9MRXo3a1I2SmM2cGczTjlyVlg4WTVNSnJHbE1MOXA5bFU0amJUa0txQ3ZlZVpVSmpIQjAzbTJLUktSMlR5dG9Ga1RYT0xnN2tlVTFzMWxyUE1RSnBvT0tMdUFBQyt5MUhsSnVjVTZ5c0I1aHNYaHZTUFBMcTVKN0p0bnFIS1o0dllqQzRWeTgxNTNRWSs2NzgweER1R0FSc0diT3MxV3F6SDBRUzc2NXJuU0tFYmJLbGtPOG9JL1ZEd1VkMGlzMTN0S3BxSUx1MW1ESkZOeS9pSkFXY3ZEZ2p4dnVzSVQrUEd6M1NUL0o5cjlNdGZkMGpwYUdlaUxZSXFYYzdEaUhTUzhUY2pGVmtzaTY2UEVreFcxejZ1amJMTFVHTk5ZbnpPV3BIOEJaR0s0YkNLN2lSK01iSXY4bmNEQXoxdTRTdE4zdlRUemV3cjlJUWprOXd4RnhuKzZOMWRkS3MwdmZmSmlTMDhOM2E0RzFTVnJsWjk3US9NKzhHOWZlNUFQNmQ5L1FxNFdSbk9SVmhvZlBJS0VkQ3IzbGxzcFVmRTBvS0lJWW9CeUJSUGgrYlgxSExTM0pXR0pSaEl2RTFhVzROVGQ4ZVBpNFora1hiK1o4c25ZZlNOY3FpamhBZ1ZzeDRSQ001NGNYVWlZa2plQm1tQzRhak9IckNob0VMc2NKSkM3Kzlqak1qdzVCYWdaS2xnUk1pU05ZejdoN3Z2WklvUXFidFFtc3BjMGNVazFHLzczaVh0U3BST2w1d3RMZ1FpMG1XMkV4OGkzV1VMaGNnZ3g2RTFMTVZIVXNkYzlHSEkxUEgzVTJLbzBQeUdkbjlLZFZPTG03RlBCdWkwaTlhMEhwQTYwTXNld1ZFNHo4Q0F0NWQ0MDFHdjZ6WGxJVDVZYml0MVZJQTBGQ3M3d3R2WXJlcnUxZlV5VzNvTEFaLythVG5ack9jWVJOVkE4c3BvUnRsUm9XZmxzUkNsRmNnemtxaUhPcmYwL1NWdytFcFZhRmxKMGc0S3hxMU1NT21pUWRwTU5wdGU4bE1NUXFtNmNJRlhsbkdiZkpsbHlzS0RpKzBKSk1vdGtxZ0l4T1NRZ1U5ZG4vbFdrZVZmOG5VbTNpd1gyTmwzV0R3OWk2QVVLM3ZCQWJaWnJjSnBEUS9ONjRBVndqVDA3SmVmMzBHU1NtdE51MldsVzdZb3lXMkZsV2ZaRlFVd2s4NjdFZExZS2s5Vkc2SmdFbkJpQnhrWTdMTW80WUxRSkpsQW85bC9vVHZKa1NBUkRGL1h0eUF6TThPMnQzZVQvaVhhNndETjNXZXdObVFIZFBmc3hDaFUvS3RMRzJNbjhpNFpxS2RTbElhQlphZHhKbVJ6VlMvbzR5QTY1UlRTVmlxNjBvYTM5NUxxdzBwelk0U2lwd0UwU1hYc0tWK0dacmFHU2tyL1JXMDh3UFJ2cXZTVWtZQk1BOWxQeDRtMjRheitJSG1DYlhBKzBmYXhUUkU5d3VHZU8wNkRJWGE2UWxLSjNwdUl5aXVBVmZQcjczNnZ6bzJwQmlyUytWeGVsM1RNbTNKS2h6OW8yWm9SdmFGVnBJa3lrYjBIY200b0hGQk1jTlNOajcvNEdKdDQzb2dvblkyVmc0bnNEUUlXeEFjb3JwWEFDemdCcVFQallzRS9WVXBYcHdOTWFuRXJ1NE53TUNGUGtYdk1vcXZvZUxOM3F5dS9OMWVXRUh0dE1ENjV2MTlsLzBrSDJtUjM1aXYvRkkreWpvSEo5Z1BNejY3YWYzTXEvQm9XWHF1M3JwaGlXTVhWa21uUFNFa3BHcFVJMmgxTVRoaWRlR0ZFT0s2WVpIUHdZek1CdnBOQzcrWkh4UGI3ZXBmZWZHeUlCNEp6TzlEVE5FWW5ETFZWSGRReXZPRVZlZnJrNlV2NWtUUVlWWVdXZHFyZGNJbDd5bGp3d0lXZGZRL3krMlFCM2VSL3F4WU9idVl5QjRnVGJvMmluNFB6YXJVMXNPOW5FVGttajkvQW94REErSk0zR01xUXRKUjRqdGR1SHRub0NMeGQxZ1FVc2NIUkIvTW9SWUlFc1AycERaOUt2SGd0bGsxaVRiV1diSGhvaHdGRVlYN3k1MWZVVjJudVVtbm9VY3FuV0lRQUFnbDlMVFZYK0JjMFFHTkVoQ2h4SFI0WWpmRTUxUFVkR2ZzU0ZFNmNrN0JMMy9oVGY5akxxNEcxSWFmSU54T0xLZUF0TzdxdXVsWXZINVlPQmMrelg3Q3JNZ1duVzQ3L2pmUnNXbkpqWVlvRTd4TWZXVjJITjJpeUlxTEknO1xyXG5jb25zdCBGRU5DRUQgPSBuZXcgTWFwKFtbODIxNyxcImFwb3N0cm9waGVcIl0sWzgyNjAsXCJmcmFjdGlvbiBzbGFzaFwiXSxbMTI1MzksXCJtaWRkbGUgZG90XCJdXSk7XHJcbmNvbnN0IE5TTV9NQVggPSA0O1xyXG5cclxuZnVuY3Rpb24gZGVjb2RlX2FyaXRobWV0aWMoYnl0ZXMpIHtcclxuXHRsZXQgcG9zID0gMDtcclxuXHRmdW5jdGlvbiB1MTYoKSB7IHJldHVybiAoYnl0ZXNbcG9zKytdIDw8IDgpIHwgYnl0ZXNbcG9zKytdOyB9XHJcblx0XHJcblx0Ly8gZGVjb2RlIHRoZSBmcmVxdWVuY3kgdGFibGVcclxuXHRsZXQgc3ltYm9sX2NvdW50ID0gdTE2KCk7XHJcblx0bGV0IHRvdGFsID0gMTtcclxuXHRsZXQgYWNjID0gWzAsIDFdOyAvLyBmaXJzdCBzeW1ib2wgaGFzIGZyZXF1ZW5jeSAxXHJcblx0Zm9yIChsZXQgaSA9IDE7IGkgPCBzeW1ib2xfY291bnQ7IGkrKykge1xyXG5cdFx0YWNjLnB1c2godG90YWwgKz0gdTE2KCkpO1xyXG5cdH1cclxuXHJcblx0Ly8gc2tpcCB0aGUgc2l6ZWQtcGF5bG9hZCB0aGF0IHRoZSBsYXN0IDMgc3ltYm9scyBpbmRleCBpbnRvXHJcblx0bGV0IHNraXAgPSB1MTYoKTtcclxuXHRsZXQgcG9zX3BheWxvYWQgPSBwb3M7XHJcblx0cG9zICs9IHNraXA7XHJcblxyXG5cdGxldCByZWFkX3dpZHRoID0gMDtcclxuXHRsZXQgcmVhZF9idWZmZXIgPSAwOyBcclxuXHRmdW5jdGlvbiByZWFkX2JpdCgpIHtcclxuXHRcdGlmIChyZWFkX3dpZHRoID09IDApIHtcclxuXHRcdFx0Ly8gdGhpcyB3aWxsIHJlYWQgYmV5b25kIGVuZCBvZiBidWZmZXJcclxuXHRcdFx0Ly8gYnV0ICh1bmRlZmluZWR8MCkgPT4gemVybyBwYWRcclxuXHRcdFx0cmVhZF9idWZmZXIgPSAocmVhZF9idWZmZXIgPDwgOCkgfCBieXRlc1twb3MrK107XHJcblx0XHRcdHJlYWRfd2lkdGggPSA4O1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIChyZWFkX2J1ZmZlciA+PiAtLXJlYWRfd2lkdGgpICYgMTtcclxuXHR9XHJcblxyXG5cdGNvbnN0IE4gPSAzMTtcclxuXHRjb25zdCBGVUxMID0gMioqTjtcclxuXHRjb25zdCBIQUxGID0gRlVMTCA+Pj4gMTtcclxuXHRjb25zdCBRUlRSID0gSEFMRiA+PiAxO1xyXG5cdGNvbnN0IE1BU0sgPSBGVUxMIC0gMTtcclxuXHJcblx0Ly8gZmlsbCByZWdpc3RlclxyXG5cdGxldCByZWdpc3RlciA9IDA7XHJcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBOOyBpKyspIHJlZ2lzdGVyID0gKHJlZ2lzdGVyIDw8IDEpIHwgcmVhZF9iaXQoKTtcclxuXHJcblx0bGV0IHN5bWJvbHMgPSBbXTtcclxuXHRsZXQgbG93ID0gMDtcclxuXHRsZXQgcmFuZ2UgPSBGVUxMOyAvLyB0cmVhdCBsaWtlIGEgZmxvYXRcclxuXHR3aGlsZSAodHJ1ZSkge1xyXG5cdFx0bGV0IHZhbHVlID0gTWF0aC5mbG9vcigoKChyZWdpc3RlciAtIGxvdyArIDEpICogdG90YWwpIC0gMSkgLyByYW5nZSk7XHJcblx0XHRsZXQgc3RhcnQgPSAwO1xyXG5cdFx0bGV0IGVuZCA9IHN5bWJvbF9jb3VudDtcclxuXHRcdHdoaWxlIChlbmQgLSBzdGFydCA+IDEpIHsgLy8gYmluYXJ5IHNlYXJjaFxyXG5cdFx0XHRsZXQgbWlkID0gKHN0YXJ0ICsgZW5kKSA+Pj4gMTtcclxuXHRcdFx0aWYgKHZhbHVlIDwgYWNjW21pZF0pIHtcclxuXHRcdFx0XHRlbmQgPSBtaWQ7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0c3RhcnQgPSBtaWQ7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGlmIChzdGFydCA9PSAwKSBicmVhazsgLy8gZmlyc3Qgc3ltYm9sIGlzIGVuZCBtYXJrXHJcblx0XHRzeW1ib2xzLnB1c2goc3RhcnQpO1xyXG5cdFx0bGV0IGEgPSBsb3cgKyBNYXRoLmZsb29yKHJhbmdlICogYWNjW3N0YXJ0XSAgIC8gdG90YWwpO1xyXG5cdFx0bGV0IGIgPSBsb3cgKyBNYXRoLmZsb29yKHJhbmdlICogYWNjW3N0YXJ0KzFdIC8gdG90YWwpIC0gMTtcclxuXHRcdHdoaWxlICgoKGEgXiBiKSAmIEhBTEYpID09IDApIHtcclxuXHRcdFx0cmVnaXN0ZXIgPSAocmVnaXN0ZXIgPDwgMSkgJiBNQVNLIHwgcmVhZF9iaXQoKTtcclxuXHRcdFx0YSA9IChhIDw8IDEpICYgTUFTSztcclxuXHRcdFx0YiA9IChiIDw8IDEpICYgTUFTSyB8IDE7XHJcblx0XHR9XHJcblx0XHR3aGlsZSAoYSAmIH5iICYgUVJUUikge1xyXG5cdFx0XHRyZWdpc3RlciA9IChyZWdpc3RlciAmIEhBTEYpIHwgKChyZWdpc3RlciA8PCAxKSAmIChNQVNLID4+PiAxKSkgfCByZWFkX2JpdCgpO1xyXG5cdFx0XHRhID0gKGEgPDwgMSkgXiBIQUxGO1xyXG5cdFx0XHRiID0gKChiIF4gSEFMRikgPDwgMSkgfCBIQUxGIHwgMTtcclxuXHRcdH1cclxuXHRcdGxvdyA9IGE7XHJcblx0XHRyYW5nZSA9IDEgKyBiIC0gYTtcclxuXHR9XHJcblx0bGV0IG9mZnNldCA9IHN5bWJvbF9jb3VudCAtIDQ7XHJcblx0cmV0dXJuIHN5bWJvbHMubWFwKHggPT4geyAvLyBpbmRleCBpbnRvIHBheWxvYWRcclxuXHRcdHN3aXRjaCAoeCAtIG9mZnNldCkge1xyXG5cdFx0XHRjYXNlIDM6IHJldHVybiBvZmZzZXQgKyAweDEwMTAwICsgKChieXRlc1twb3NfcGF5bG9hZCsrXSA8PCAxNikgfCAoYnl0ZXNbcG9zX3BheWxvYWQrK10gPDwgOCkgfCBieXRlc1twb3NfcGF5bG9hZCsrXSk7XHJcblx0XHRcdGNhc2UgMjogcmV0dXJuIG9mZnNldCArIDB4MTAwICsgKChieXRlc1twb3NfcGF5bG9hZCsrXSA8PCA4KSB8IGJ5dGVzW3Bvc19wYXlsb2FkKytdKTtcclxuXHRcdFx0Y2FzZSAxOiByZXR1cm4gb2Zmc2V0ICsgYnl0ZXNbcG9zX3BheWxvYWQrK107XHJcblx0XHRcdGRlZmF1bHQ6IHJldHVybiB4IC0gMTtcclxuXHRcdH1cclxuXHR9KTtcclxufVx0XHJcblxyXG4vLyByZXR1cm5zIGFuIGl0ZXJhdG9yIHdoaWNoIHJldHVybnMgdGhlIG5leHQgc3ltYm9sXHJcbmZ1bmN0aW9uIHJlYWRfcGF5bG9hZCh2KSB7XHJcblx0bGV0IHBvcyA9IDA7XHJcblx0cmV0dXJuICgpID0+IHZbcG9zKytdO1xyXG59XHJcbmZ1bmN0aW9uIHJlYWRfY29tcHJlc3NlZF9wYXlsb2FkKHMpIHtcclxuXHRyZXR1cm4gcmVhZF9wYXlsb2FkKGRlY29kZV9hcml0aG1ldGljKHVuc2FmZV9hdG9iKHMpKSk7XHJcbn1cclxuXHJcbi8vIHVuc2FmZSBpbiB0aGUgc2Vuc2U6XHJcbi8vIGV4cGVjdGVkIHdlbGwtZm9ybWVkIEJhc2U2NCB3L28gcGFkZGluZyBcclxuLy8gMjAyMjA5MjI6IGFkZGVkIGZvciBodHRwczovL2dpdGh1Yi5jb20vYWRyYWZmeS9lbnMtbm9ybWFsaXplLmpzL2lzc3Vlcy80XHJcbmZ1bmN0aW9uIHVuc2FmZV9hdG9iKHMpIHtcclxuXHRsZXQgbG9va3VwID0gW107XHJcblx0Wy4uLidBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJ10uZm9yRWFjaCgoYywgaSkgPT4gbG9va3VwW2MuY2hhckNvZGVBdCgwKV0gPSBpKTtcclxuXHRsZXQgbiA9IHMubGVuZ3RoO1xyXG5cdGxldCByZXQgPSBuZXcgVWludDhBcnJheSgoNiAqIG4pID4+IDMpO1xyXG5cdGZvciAobGV0IGkgPSAwLCBwb3MgPSAwLCB3aWR0aCA9IDAsIGNhcnJ5ID0gMDsgaSA8IG47IGkrKykge1xyXG5cdFx0Y2FycnkgPSAoY2FycnkgPDwgNikgfCBsb29rdXBbcy5jaGFyQ29kZUF0KGkpXTtcclxuXHRcdHdpZHRoICs9IDY7XHJcblx0XHRpZiAod2lkdGggPj0gOCkge1xyXG5cdFx0XHRyZXRbcG9zKytdID0gKGNhcnJ5ID4+ICh3aWR0aCAtPSA4KSk7XHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiByZXQ7XHJcbn1cclxuXHJcbi8vIGVnLiBbMCwxLDIsMy4uLl0gPT4gWzAsLTEsMSwtMiwuLi5dXHJcbmZ1bmN0aW9uIHNpZ25lZChpKSB7IFxyXG5cdHJldHVybiAoaSAmIDEpID8gKH5pID4+IDEpIDogKGkgPj4gMSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlYWRfZGVsdGFzKG4sIG5leHQpIHtcclxuXHRsZXQgdiA9IEFycmF5KG4pO1xyXG5cdGZvciAobGV0IGkgPSAwLCB4ID0gMDsgaSA8IG47IGkrKykgdltpXSA9IHggKz0gc2lnbmVkKG5leHQoKSk7XHJcblx0cmV0dXJuIHY7XHJcbn1cclxuXHJcbi8vIFsxMjNdWzVdID0+IFswIDNdIFsxIDFdIFswIDBdXHJcbmZ1bmN0aW9uIHJlYWRfc29ydGVkKG5leHQsIHByZXYgPSAwKSB7XHJcblx0bGV0IHJldCA9IFtdO1xyXG5cdHdoaWxlICh0cnVlKSB7XHJcblx0XHRsZXQgeCA9IG5leHQoKTtcclxuXHRcdGxldCBuID0gbmV4dCgpO1xyXG5cdFx0aWYgKCFuKSBicmVhaztcclxuXHRcdHByZXYgKz0geDtcclxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbjsgaSsrKSB7XHJcblx0XHRcdHJldC5wdXNoKHByZXYgKyBpKTtcclxuXHRcdH1cclxuXHRcdHByZXYgKz0gbiArIDE7XHJcblx0fVxyXG5cdHJldHVybiByZXQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlYWRfc29ydGVkX2FycmF5cyhuZXh0KSB7XHJcblx0cmV0dXJuIHJlYWRfYXJyYXlfd2hpbGUoKCkgPT4geyBcclxuXHRcdGxldCB2ID0gcmVhZF9zb3J0ZWQobmV4dCk7XHJcblx0XHRpZiAodi5sZW5ndGgpIHJldHVybiB2O1xyXG5cdH0pO1xyXG59XHJcblxyXG4vLyByZXR1cm5zIG1hcCBvZiB4ID0+IHlzXHJcbmZ1bmN0aW9uIHJlYWRfbWFwcGVkKG5leHQpIHtcclxuXHRsZXQgcmV0ID0gW107XHJcblx0d2hpbGUgKHRydWUpIHtcclxuXHRcdGxldCB3ID0gbmV4dCgpO1xyXG5cdFx0aWYgKHcgPT0gMCkgYnJlYWs7XHJcblx0XHRyZXQucHVzaChyZWFkX2xpbmVhcl90YWJsZSh3LCBuZXh0KSk7XHJcblx0fVxyXG5cdHdoaWxlICh0cnVlKSB7XHJcblx0XHRsZXQgdyA9IG5leHQoKSAtIDE7XHJcblx0XHRpZiAodyA8IDApIGJyZWFrO1xyXG5cdFx0cmV0LnB1c2gocmVhZF9yZXBsYWNlbWVudF90YWJsZSh3LCBuZXh0KSk7XHJcblx0fVxyXG5cdHJldHVybiByZXQuZmxhdCgpO1xyXG59XHJcblxyXG4vLyByZWFkIHVudGlsIG5leHQgaXMgZmFsc3lcclxuLy8gcmV0dXJuIGFycmF5IG9mIHJlYWQgdmFsdWVzXHJcbmZ1bmN0aW9uIHJlYWRfYXJyYXlfd2hpbGUobmV4dCkge1xyXG5cdGxldCB2ID0gW107XHJcblx0d2hpbGUgKHRydWUpIHtcclxuXHRcdGxldCB4ID0gbmV4dCh2Lmxlbmd0aCk7XHJcblx0XHRpZiAoIXgpIGJyZWFrO1xyXG5cdFx0di5wdXNoKHgpO1xyXG5cdH1cclxuXHRyZXR1cm4gdjtcclxufVxyXG5cclxuLy8gcmVhZCB3IGNvbHVtbnMgb2YgbGVuZ3RoIG5cclxuLy8gcmV0dXJuIGFzIG4gcm93cyBvZiBsZW5ndGggd1xyXG5mdW5jdGlvbiByZWFkX3RyYW5zcG9zZWQobiwgdywgbmV4dCkge1xyXG5cdGxldCBtID0gQXJyYXkobikuZmlsbCgpLm1hcCgoKSA9PiBbXSk7XHJcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCB3OyBpKyspIHtcclxuXHRcdHJlYWRfZGVsdGFzKG4sIG5leHQpLmZvckVhY2goKHgsIGopID0+IG1bal0ucHVzaCh4KSk7XHJcblx0fVxyXG5cdHJldHVybiBtO1xyXG59XHJcbiBcclxuLy8gcmV0dXJucyBbW3gsIHlzXSwgW3grZHgsIHlzK2R5XSwgW3grMipkeCwgeXMrMipkeV0sIC4uLl1cclxuLy8gd2hlcmUgZHgvZHkgPSBzdGVwcywgbiA9IHJ1biBzaXplLCB3ID0gbGVuZ3RoIG9mIHlcclxuZnVuY3Rpb24gcmVhZF9saW5lYXJfdGFibGUodywgbmV4dCkge1xyXG5cdGxldCBkeCA9IDEgKyBuZXh0KCk7XHJcblx0bGV0IGR5ID0gbmV4dCgpO1xyXG5cdGxldCB2TiA9IHJlYWRfYXJyYXlfd2hpbGUobmV4dCk7XHJcblx0bGV0IG0gPSByZWFkX3RyYW5zcG9zZWQodk4ubGVuZ3RoLCAxK3csIG5leHQpO1xyXG5cdHJldHVybiBtLmZsYXRNYXAoKHYsIGkpID0+IHtcclxuXHRcdGxldCBbeCwgLi4ueXNdID0gdjtcclxuXHRcdHJldHVybiBBcnJheSh2TltpXSkuZmlsbCgpLm1hcCgoXywgaikgPT4ge1xyXG5cdFx0XHRsZXQgal9keSA9IGogKiBkeTtcclxuXHRcdFx0cmV0dXJuIFt4ICsgaiAqIGR4LCB5cy5tYXAoeSA9PiB5ICsgal9keSldO1xyXG5cdFx0fSk7XHJcblx0fSk7XHJcbn1cclxuXHJcbi8vIHJldHVybiBbW3gsIHlzLi4uXSwgLi4uXVxyXG4vLyB3aGVyZSB3ID0gbGVuZ3RoIG9mIHlcclxuZnVuY3Rpb24gcmVhZF9yZXBsYWNlbWVudF90YWJsZSh3LCBuZXh0KSB7IFxyXG5cdGxldCBuID0gMSArIG5leHQoKTtcclxuXHRsZXQgbSA9IHJlYWRfdHJhbnNwb3NlZChuLCAxK3csIG5leHQpO1xyXG5cdHJldHVybiBtLm1hcCh2ID0+IFt2WzBdLCB2LnNsaWNlKDEpXSk7XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiByZWFkX3RyaWUobmV4dCkge1xyXG5cdGxldCByZXQgPSBbXTtcclxuXHRsZXQgc29ydGVkID0gcmVhZF9zb3J0ZWQobmV4dCk7IFxyXG5cdGV4cGFuZChkZWNvZGUoW10pLCBbXSk7XHJcblx0cmV0dXJuIHJldDsgLy8gbm90IHNvcnRlZFxyXG5cdGZ1bmN0aW9uIGRlY29kZShRKSB7IC8vIGNoYXJhY3RlcnMgdGhhdCBsZWFkIGludG8gdGhpcyBub2RlXHJcblx0XHRsZXQgUyA9IG5leHQoKTsgLy8gc3RhdGU6IHZhbGlkLCBzYXZlLCBjaGVja1xyXG5cdFx0bGV0IEIgPSByZWFkX2FycmF5X3doaWxlKCgpID0+IHsgLy8gYnVja2V0cyBsZWFkaW5nIHRvIG5ldyBub2Rlc1xyXG5cdFx0XHRsZXQgY3BzID0gcmVhZF9zb3J0ZWQobmV4dCkubWFwKGkgPT4gc29ydGVkW2ldKTtcclxuXHRcdFx0aWYgKGNwcy5sZW5ndGgpIHJldHVybiBkZWNvZGUoY3BzKTtcclxuXHRcdH0pO1xyXG5cdFx0cmV0dXJuIHtTLCBCLCBRfTtcclxuXHR9XHJcblx0ZnVuY3Rpb24gZXhwYW5kKHtTLCBCfSwgY3BzLCBzYXZlZCkge1xyXG5cdFx0aWYgKFMgJiA0ICYmIHNhdmVkID09PSBjcHNbY3BzLmxlbmd0aC0xXSkgcmV0dXJuO1xyXG5cdFx0aWYgKFMgJiAyKSBzYXZlZCA9IGNwc1tjcHMubGVuZ3RoLTFdO1xyXG5cdFx0aWYgKFMgJiAxKSByZXQucHVzaChjcHMpOyBcclxuXHRcdGZvciAobGV0IGJyIG9mIEIpIHtcclxuXHRcdFx0Zm9yIChsZXQgY3Agb2YgYnIuUSkge1xyXG5cdFx0XHRcdGV4cGFuZChiciwgWy4uLmNwcywgY3BdLCBzYXZlZCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhleF9jcChjcCkge1xyXG5cdHJldHVybiBjcC50b1N0cmluZygxNikudG9VcHBlckNhc2UoKS5wYWRTdGFydCgyLCAnMCcpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBxdW90ZV9jcChjcCkge1xyXG5cdHJldHVybiBgeyR7aGV4X2NwKGNwKX19YDsgLy8gcmFmZnkgY29udmVudGlvbjogbGlrZSBcIlxcdXtYfVwiIHcvbyB0aGUgXCJcXHVcIlxyXG59XHJcblxyXG4vKlxyXG5leHBvcnQgZnVuY3Rpb24gZXhwbG9kZV9jcChzKSB7XHJcblx0cmV0dXJuIFsuLi5zXS5tYXAoYyA9PiBjLmNvZGVQb2ludEF0KDApKTtcclxufVxyXG4qL1xyXG5mdW5jdGlvbiBleHBsb2RlX2NwKHMpIHsgLy8gdGhpcyBpcyBhYm91dCAyeCBmYXN0ZXJcclxuXHRsZXQgY3BzID0gW107XHJcblx0Zm9yIChsZXQgcG9zID0gMCwgbGVuID0gcy5sZW5ndGg7IHBvcyA8IGxlbjsgKSB7XHJcblx0XHRsZXQgY3AgPSBzLmNvZGVQb2ludEF0KHBvcyk7XHJcblx0XHRwb3MgKz0gY3AgPCAweDEwMDAwID8gMSA6IDI7XHJcblx0XHRjcHMucHVzaChjcCk7XHJcblx0fVxyXG5cdHJldHVybiBjcHM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHN0cl9mcm9tX2NwcyhjcHMpIHtcclxuXHRjb25zdCBjaHVuayA9IDQwOTY7XHJcblx0bGV0IGxlbiA9IGNwcy5sZW5ndGg7XHJcblx0aWYgKGxlbiA8IGNodW5rKSByZXR1cm4gU3RyaW5nLmZyb21Db2RlUG9pbnQoLi4uY3BzKTtcclxuXHRsZXQgYnVmID0gW107XHJcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBsZW47ICkge1xyXG5cdFx0YnVmLnB1c2goU3RyaW5nLmZyb21Db2RlUG9pbnQoLi4uY3BzLnNsaWNlKGksIGkgKz0gY2h1bmspKSk7XHJcblx0fVxyXG5cdHJldHVybiBidWYuam9pbignJyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNvbXBhcmVfYXJyYXlzKGEsIGIpIHtcclxuXHRsZXQgbiA9IGEubGVuZ3RoO1xyXG5cdGxldCBjID0gbiAtIGIubGVuZ3RoO1xyXG5cdGZvciAobGV0IGkgPSAwOyBjID09IDAgJiYgaSA8IG47IGkrKykgYyA9IGFbaV0gLSBiW2ldO1xyXG5cdHJldHVybiBjO1xyXG59XHJcblxyXG4vLyBjcmVhdGVkIDIwMjMtMDktMjVUMDE6MDE6NTUuMTQ4WlxyXG4vLyBjb21wcmVzc2VkIGJhc2U2NC1lbmNvZGVkIGJsb2IgZm9yIGluY2x1ZGUtbmYgZGF0YVxyXG4vLyBzb3VyY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9hZHJhZmZ5L2Vucy1ub3JtYWxpemUuanMvYmxvYi9tYWluL3NyYy9tYWtlLmpzXHJcbi8vIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2FkcmFmZnkvZW5zLW5vcm1hbGl6ZS5qcyNzZWN1cml0eVxyXG4vLyBTSEEtMjU2OiBhOTc0YjZmODU0MWZjMjlkOTE5YmM4NTExOGFmMGE0NDAxNTg1MWZhYjUzNDNmODY3OWNiMzFiZTJiZGIyMDllXHJcbnZhciBDT01QUkVTU0VEID0gJ0FFVURUQUhCQ0ZRQVRRRFJBREFBY2dBZ0FEUUFGQUFzQUJRQUh3QU9BQ1FBRFFBUkFBb0FGd0FIQUJJQUNBQVBBQVVBQ3dBRkFBd0FCQUFRQUFNQUJ3QUVBQW9BQlFBSUFBSUFDZ0FCQUFRQUZBQUxBQUlBQ3dBQkFBSUFBUUFIQUFNQUF3QUVBQXNBREFBTUFBd0FDZ0FOQUEwQUF3QUtBQWtBQkFBZEFBWUFad0RTQWRzREpnQzBDa01COHhoWkFxZm9DMTkwVUdjVGhnQnVyd2Y3UFQwOVBiMDlBamdKdW04T2pEbGx4SFlVS1hBUHh6cTZ0QUJBeGdLOHlzVXZXQWdNUFQwOVBUMDlQU3M2TFQySGNnV1hXd0ZMb1NNRUVFbDVSRlZNS3ZPMFhROEV4RGRKTW5JZ3NqMjZQVFF5eThGZkVROEFZOElQQUdjRWJ3UndCSEVFY2dSekJIUUVkUVIyQkhjRWVBUjZCSHNFZkFSK0JJQUVnZm5kQlFvQllnVUxBV0lGREFGaUJOY0UyQVRaQlJBRkVRVXZCZEFMRkFzVkRQY05CdzEzRFljT01BNHhEak1CNEJsbEhJMEIyZ3JiQU1EcEhMa1E3UUhWQVBSTlFRRm5HUlVFZzB5RUIydWFKRjhBSnBJQnBvYjVBRVJTTUFLTm9BWHFhUUxVQk1DekVpQUNud1JaRWtrVnNTN3RBTkFzQkcwUnVBUUxFUEFCdjlISUNUVUJYaWdQWndSQkFwTURPd0FhbWh0YUFCcUVBWThLdkt4M0xRNEFyQUI4VWh3RUJBVlNhZ0Q4QUVGWkFEa0JJYWRWajJVTVVneDVJbDRBTlFDOUF4SUIxQmxiRVBNQXMzMENHeGxYQWh3WktRSUVDQmM2RWJzQ294bmd6djdVelJRQThNMEJhd0w2WndrTjd3QUJBRDMzT1FSY3NnTEpDak1DanFVQ2h0dy9rbStOQXNYUEFvUDJCVDg0UHdVUkFLMFJBdnB0YjZjQXBRUy9PTU1leTVISlM4NFVkeHB4VFBrQ29nVkZJVGFUT3dFUkFLNXBBdmtOQk9WeUE3cTNCS2xPSlNBTEFnVUlCUmNFZEFTcEJYcXpBQlhGU1daT2F3TENPcXcvL0FvbENaZHZ2M2RTQmtFUUd5ZWxFUGNNTXdHMUFUc043VXZZQlBFR093VEpIMzBaR1EvTmxad0lwUzNkRE8wbTR5NmhnRm9qOVNxREJlMUw5RHpkQzAxUmFBOVpDMlVKNHpwamdVNERJUUVOSW9zSzNRMDVDRzBROHdySmF3M2xFVVVIT1FQVlNab0FwUWNCQ3hFZE5SVzFKaEJpckFzSk9YY0creHIyQzQ4bXJ4TXBldndGMHhvaEJrMEJLUnIvQU04dTU0V3dXakZjSEU5ZkJnTUxKU1BIRktoUUlBMGxRTGQ0U0JvYkJ4VWxxUUtSUTNCS2gxRTJIcE1oOWp3OURXWXVFMUY4Qi9VOEJSbFBDNEU4bmthclJRNFIwajZOUFVnaVNVd3NCRFYvTEM4bml3blBENFVNdVh4eUFWa0pJUW14REhFVE1SRVhOOFVJT1FjWkxaY2tKeFVJSVVhVllKb0U5NThEOHhQUkF3c0ZQd2xCQnhNRHRSd3RFeTRWS1FVTmdTVFhBdk0yMVM2ekFvOVdnQUVYQmNzUEpSL2ZFRkJINEE3cENKc0NaUU9ESmVzQUxSVWhBQmNpbXdoRFl3QmZqOWhUQlM3TENNZHFiQ04wQTJjVTUyRVJjd2VSRGxjSHB4d3pGYjhjNFhESVhndUdDQ2lqcndsYkFYVUptUUZmQk9NSUNUVmJqS0FnUVdkVGkxZ1lteUJoUVQ5ZC9BSXhER1VWbjBTOWgzZ0NpdzlyRWhzQk5RRnpCemtOQVFKM0VlMFJheENWQ091R0JEVzFNL2c2SlFSUElZTWdFUW9uQTA5c3pnc25KdmtNK0drQm94SmlBd3cwUFhmdVo2dGd0aVFYL1FjWk1zVkJZQ0h4QzVKUHpReWNHc0VZUWxRdUdlUUh2d1B6R3ZNbjZrRlhCZjhEb3dNVE9rMHo3Z1M5QzJrSWl3ay9BRWtPb3hjSDF4aHFDbkdNMEFFeGl3RzNtUU5Ya1lNQ2I0OEdOd2NMQUdjTGh3VjU1UUFkQXFjSW93QUZBTThEVndBNUFxMEhuUUFaQUlWQkFUMERKeThCSWVVQ2p3T1RDREhMQVpVdkFmTXBCQnZEREJVQTl6ZHVTZ0xEc1FLQWFtYWlCZDFZQW80Q1NUVUJUU1VFQlU1SFVRT3ZjZUVBMndCTEJoUGZSd0VWcTByTEd1TkRBZDl2S3dESEFQc0FCVFVIQlVFQnpRSHpiUUMzQVY4TE1RbWlzN1VCVGVrcEFJTUFGV3NCMXdLSkFOMEFOUUIvOFFGVEFFMEZXZmtGMHdKUFNRRVJNUmdyVjJFQnV3TWZBVE1CRFFCNUJzdU5wY2tISHdSdEI5TUNFQnNWNFFMdkxnZTFBUU1pM3hQTlFzVUN2ZDVWb1dBQ1pJRUNZa0piVGE5Yk55QUNvZmNDYUpnQ1pna0NuNFE0R3dzQ1pqc0NaaVlFYmdSL0EzOFRBMzZTT1FZNWR4YzVnam9qSXdKc0hRSXlOamdLQW0zSEFtMnU3NG96WjBVckFXY0EzZ0RoQUVvRkI1Z01qUUQrQzhJQURiVUNkeThDZHFJL0FubExRd0o0dWgxYzIwV3VSdGNDZkQ4Q2VzZ0NmUWtDZlBBRldRVWdTQUJJZldNa0FvRnRBb0FBQW9BRkFuK3VTVmhLV3hVWFNzd0MwUUVDME14TEp3T0lUd09INWtURmtUSUM4cUZkQXdNRHJrdk9UQzBsQTg5TlRFMnZBb3MvQW9yWXdSc0hIVU5uQmJjQ2pqY0NqbHhBbDRFQ2p0a0NqbHg0VWJSVE5RcFMxRlNGQXBQN0FwTU1BT2tBSEZVZVZhOVYwQVlzR3ltVmhqTGhlR1pGT3prQ2w1OEM3N0pZSWFnQVdTVUNsbzhDbG55Y0FLbFpyRm9KZ1UwQU93S1d0UUtXVGx4RVhORUNtY3NDbVdSY3lsMEhHUUtjbXpuQ09wMENuQllDbjVzQ25yaUtBQjBQTVNvUEFwM3hBcDZTQUxVOVlUUmg3d0tlMHdLZ2JnR3BBcDZmSHdLZVRxVmp5R1FuSlNzQ0o2OENKbjRDb1BzQ29Fd0NvdDBDb2NRQ3BpOENwYzRDcC84QWZRS244bWg4YUxFQUEwbHFIR3JSQXF6akFxeXVBcTFuQXEwQ0FsY2RBbFhjQXJIaDF3TWZUbXlYQXJLOURRS3k2QmRzNEcxamJVaGZBeVhOQXJaY096OXVrQU1wUlFLNFhnSzVSeFVDdVNwM2NEWnc0UUs5R1FLNzJuQ1dBeklSQXI2SWNnSURNM0VDdmhwekluTlBBc1BMQXNNRWM0SjBTelZGZE9BRFBLY0RQSm9EUGI4Q3hYd0N4a2NDeGhDSkFzaHBVUUxJUkFMSlR3TEpMZ0prblFMZDBuaDVZWGl1ZVNWTDBBTVlvMmNDQW1IMEdmT1ZKSHNMWHBKZXV4RUN6MnNDejJ3dlMxUFM4eE9mQU1hdEFzOXpBU25xQTA0U2Zrc0ZBdHduQXR1S0F0SlBBMUpjQTFOZkFRRURWWXlBaVQ4QXl4YnRZRVdDSElMVGdzNkRqUUxheHdMWjNvUVFoRW1uUEFPR3BRQXZBMlFPaG5GWitRQlZBdDlsQXQ2NGMzY0M0aS90RkFIek1DY0I5SnNCOHRLSEF1dnpBdWx3ZVFMcStRTHE1QUQ1UndHNUF1NkpBdXVjbHFxWEF3THVQd09GNEpoNWNPQnhvUUx6QXdCcEE0NFdtWk1DOXhNRGtXNERrb2NDOTVnQytka0MrR2FhSEpxcnV6ZWJIZ09kZ3dMKytnRWJBRG1mSEorekF3V05BNlpxQTZiWkFOSEZBd1pxb1lpaUJRa0RERWtDd0FBL0F3RGhRUmRUQVJIekEyc0hsMmNGQUpNdEs3ZXZ2ZHNCaVprVWZ4RUVPUUg3S1FVaERwMEpud0NTL1NsWHhRTDNBWjBBdHdXNUFHOExiVUV1RkNhTkxnRkRBWUQ4QWJVbUFIVUREZ1J0QUN3Q0ZneWhBQUFLQWowQ2FnUGRBMzRFa1FFZ1JRVWhmQW9BQlFCRUFCTUFOaElDZHdFQUJkVURhKzhLeFFJQTl3cWZKNyt4dCtVQmtTRkJRZ0hwRkg4Uk5NQ0pBQVFBR3dCYUFrVUNoSXNBQmpwVE9wU05iUUM0T284NjBBQ05PTUU2M0FDbEFPZ0F5d0U2Z1RvN09mdzUrVHQyaVRwYk81NkpPbTg1R0FGV0FUTUJiQVV2TlYwMW5qV3ROV1kxZFRXMk5jVTFnaldSTmRJMTRUV2VOYTAxN2pYOU5iSTF3VFlDTmhFMXhqWFZOaFkySnpYZU5lMDJMalk5Tmk0MUxTRTJPalk5Tmp3MnlUY0lCSkE4VnpZNE50MDNJRGNQTnNvZ040azNNQW9Fc0R4bk5pUTNHVGRzT28wM0lVTFVRd2RDNEVNTEhBOFBDWnNvYlNoUlZRWUE2WDhBNmJBQkZDblhBdWtCb3dDOUJiY0Fid056Qkw4TURBTU1BUWdEQUFrS0N3c0xDUW9HQkFWVkJJL0R2d0R6OWIyOWthVUNiMFF0c1JUTkx0NGVHQmNTSEFNWkZoWVpFaFlFQVJBRUJVRWNRUnhCSEVFY1FSeEJIRUVhUVJ4QkhFRkNTVHhCUEVsSVNVaEJOa00yUVRZYk5rbElTVm1CVklnQkZMV1pBdTBCaFFDakJjRUFieWtCdndHSkFhUWNFWjBlUENrbE1BQWhNdkFJTUFMNTRnQzdCbThFZXNjanpRTXBBUlFwS2dEVUFCYXZBajYyNnhRQUpQMEEzZXR6dWY0Tk5SQTdlZnkyWjlOUXJDbkMwT1N5QU56NUJCSWJKNUlGRFI2bWlJYXZZUzZ0cHJqam11S2VieG01Qzc0UTIyNVgxcGthWVlQYjZmMURLNGszeE1FQmI5UzJXTWpFaWJUTldoc1JKSUErdndOVkVpWFRFNWlYcy93ZXpWNjZvRkxmcDlOWkdZVytHazE5SjIrYkNUNlllMnc2TERZZGd6S01VYWJrNTk1ZUxCQ1hBTno5SFVwV2JBVHE5dnFYVng5WERnK1BjOVhwNCtic1MwMDVTVk0vQkpCTTQ2ODdXVXVmK1VqOWRFaThhRE5hUHh0cGJEeGNHMVRIVEltVU1acTRVQ2FhTllwc1ZxcmFOeUtMSlhEWXNGWi81amw3YkxSdE84OHQ3UDN4WmFBeGhiNU9kUE1YcXNTa3AxV0NpZUc4alhtMVU5OStibHZMbFh6UENTK005M1ZuSkNpSyswOUxmYVNhQkFWQm9teURnSnVhOGRmVXpSN2dhMzRJdlIyTnZqK0E5aGVKNmxzbDFLRzROa0kxMDMyQ25mZjFtMXdvZjJCOW9ISks0Ymk2SmtFZFNxZU5laXVvNlFvWlppbmNvYzczL1RIOVNYRjhzQ0U3WHl1WXlXOFdTZ2JHRkNqUFYwaWhMS2hkUHMwOFR4ODJmWUFrTExjNEkyd2RsNGFwWTdHVTVsSFJGelJXSmVwN1d3M3diZUEzcW1kNTkvODZQNHh1TmFxRHB5Z1h0Nk04NWdsU0JIT0NHZ0pEbnQrcE45Yks3SEFwTWd1WDYrMDZSWk5qelZtY1pKK3djVXJKOS8vYnBSTnhOdUtwTmw5dUZkcytTOXRkeDdMYU01WmtJclBqNm5JVTltbmJGdFZiczlzL3VMZ2w4TVZjekF3ZXQraU9FenpCbFlXN1JDTWdFNmd5TkxlcTYrMXRJeDRkcGdabmQwRGtzSlM1ZitKTkRwd3djUE5YYWFWc3BxMWZiUWFqT3JKZ0swb2ZLdEoxTmU5MEw2Vk80TU9sNVM4ODZwN3U2eG83T0xqRzhUR0wrSFUxSlhHSmdwcGc0bk5iTko1bmx6U3B1UFl5MjFKVUVjVUE5NFBvRmlaZmpadWUrUW55UTgwZWtPdVpWa3h4NGcrY3ZoSmZIZ05sNGh5MS9hNitSS2NLbGFyL0oyOXkvL0V6dGxiVlBIVlVlUTF6WDg2ZVFWQWpSL00zZEE5dzRXOExmYVhwNEVnTTg1d09XYXNsaTgzN1B6Vk1PbnNMelIrazNvNzUvbFJQQUpTRTF4QUtRekVpNXYxMGtlK1ZCdlJ0MWN3UVJNZCtVNW1MQ1RHVmQ2WGladGdCRzVjRGkwdzIyR0tjVk52SGl1NUxRYlpFRFZ0ejBvbm43azUraGV1S1hWc1p0U3ppbGtMUkFVbWpNWEVNQjNKOVlDNTBYQnhQaXo1M1NDK0VoblBsOVdzS0N2OTJTTS9PRkZJTUpaWWZsMFdXOHRJTzNVeFljd2RNQWo3RlNtZ3JzWjJhQVpPMDNCT2hQMWJOTlpJdHlYWVFGVHBDM1NHMVZ1UERxSDlHa2lDRG1FK0p3eHlJVlNPNXNpREVyQU9wRVhGZ2p5NlBRdE9WRGorczZlMXI4aGVXVnZtWm5UY2l1ZjRFaU5aekNBZDdTT01oWEVSSU9sc0hJTUczOTlpOWFMVHkzbTJoUkxaakpWRE5MUzUzaUdJSzExZFBxUXQwekJEeWc2cWM3WXFrRG0yTTVWZTZkQ1dDYUNiVFhYMnJUb2FJZ3o2K3poNGxZVWkvKzZucWNGTUFrUUpLSFlMSzB3WWs1TjlzelY2eGloRGJEREZyNDVsTjFLNGFDWEJxL0ZpdFBTdWQ5Z0x0NVpWbitacUdYN2N3bTJ6NUVHTWdmRnBJRnloR0d1RFBtc282VEl0VE13bnkrN3VQbkxDZjRXNmdvRlFGVjBvUVNzYzlWZk1tVkxjTHI2WmV0RFpiYVNGVExxblNPL2JJUGpBMy96QVVvcWdHRkFFUVM0SWh1TXpFcDJJM2pKemJ6a2svSUVteWF4K3JoWlR3ZDZmK0NHdHdQaXh1OEl2ekFDcXVQV1BSRXU5WnZHa1V6cFJ3dlJSdWFOTjZjcjBXMXdXaXRzOUlDZFlKN2x0YmdNaVNMM3NUUGV1ZmdOY1ZxTVZXRmtDUERINGpHMmpBMFhjVmdRajYyQ2IyOXY5Zi96LysyS2JZdkl2L3p6anBRQVBrbGlhVkR6TnJXNTdUWi9aT3laRDBubGZNbUFJQklBR0FJMEQzay9tZE40eHI5djg1WmJaYmJxZkgyakdkNWhVcU5aV3dsNVNQZm9HbWZFbG1helVJZU5MMWovbWtGN1ZOQXpUcTRqTnQ4Sm9RMTFOUU9jbWhwclhveFN4ZlJHSjlMREVPQVErZG14QVFIOTBpdGk5ZTJ1L01vZXVhR2NEVEhvQyt4c21FZVdteEVLZWZRdUl6SGJwdzVUYzVjRW9jYm9BRDA5b2lwV1FodFRPMXdpdmYvTytEUmUycnBsL0U5d2xyekJvcmpKc09lRzFCL1hQVzRFYUpFRmRObEVDRVpnYTVab0dSSFhnWW91R1J1VmttOHRERVNpRXlGTm8rM3M1TTVwdVNkVHlVTDJsbG5JTlZIRXQ5MVhVTlc0ZXdkTWdKNGJvSmZFeXQvaVk1V1hxYkErQTJGa3Q1WjBsdXRpV2hlOW5aSXlJVWp5WERDM1VzYUcxdCtlTng2ejRXL09Zb1RCN0E2eCtkTlNUT2k5QUluY3RiRVNxbTVndk9Md3c3T1dYUHJtSHdWWmFzcmw0ZUQxMTNwbStKdFQ3SlZPdm5DWHFkenpkVFJIZ0owUGlHVEZZVzVHdnQ5UjlMRDZMemZzMHYvVFpaSFNteVZOcTd2aUlIRTZEQks3UXAwN0l6NTVFTThTWXRRdlpmL29iQm5pVFdpNUMyL292SGZ3NFZuZGtFNVhZZGpPaENNUmpEZU9FZlhlTi9Dd2ZHZHVpVUlmc29GZVV4WGVRWGJhN2M3OTcyWE52OHcrZFRqalVNMFFlTkFSZVcrSjAxNGRLQUQvTWNRWVhUN2MwR1FQSWtuM0xsNlI3Z0dqdWlRb1pEMFRFZUVxUXBLb1oxNWcvME9QUUkxN1FpU3Y5QVVST2EvVi9UUU4zZHZMQXJlYzNScnNZbHZCbTFiOExXemx0ZHVnc0M1MGxOS1lMRXAyYStaWllxUGVqVUxSbE9KaDV6ai9MVk15VER2d0toTXh4d3VEa3hKMVFwb05JME9UV0xvbTRaNzFTTnpJOVRWMWlYSnJJdTlXY25kK01DYUF3OG8xalNYZDk0WVUvMWdua3JDOUJVRU90UXZFSVE3ZzBpNmgrS0wySktrOFlkbDdIcnV2Z1dNU0FtTmUrTHNoR2hWNHFuV0hoTzkvUklQUXpZMXRIUmoyVnFPeU5zRHBLMGN3dys1NkFkREM0Z3NXd1kwWHhvdWNJV0lxcy9HY3duV3FsYVQwS1ByOG1iSzVVOTQvMzAxaTFXTHQ0WUlOVFZ2Q0ZCckZaYkliWThleWNPZGVKMnRlRDVJZlBMQ1JnN2pqY0ZUd2xNRk5sOXpkaC9vM0UvaEhQd2o3QldnME1VMDlwUHJCTGJyQ2dtNTRBNkgrSTZ2Mjcrakw1Z2tqV2cvaVlka3M5amJmVlA1eS9uMGRsZ1dFTWxLYXNsN0p2RlpkNTZMZnliVzFlZWFWTzBneFRmWFp3RDhHNFNJMTE2eXg3VUtWUmd1aTZZYTFZcGl4cVhlTkxjOEl4dEF3Q1U1SWh3UWduK05xSG5SYUR2NjFDeEtoT3E0cE9YN002cGtBK1BtcGQ0ajF2bjZBQ1VBTG9MTGM0dnBYY2k4VmlkTHh6bTdxRkJlN3MrcXV1SnM2RVRZbW5wZ1MzTHdTWnhQSWx0Z0JEWHo4TTFrL1cyeVNOdjJmOS9OUGh4TEdLMkQyMWRrSGVTR21lblJUM1lxY2RsMG0vaDNPWXI4VitsWE5ZR2Y4YUNDcGQ0YldqRTRRSVBqN3ZVS040TnJmczdNTDZZMk95UzgzMEpDbm9mZy9rN2xwRnB0NFNxWmM1SEdnMUhDT3JIdk9kQzhiUDZGR0RiRS9WVjBtWDRJYWt6YmRTL29wK0t0M0cyNC84UWJCVjd5ODZzR1NRL3ZaelU4RlhzN3U2akl2d2Noc0VQMkJwSWhXM0c4dVdOd2EzSG1qZkgvWmpoaENXdmx1QWNGK25NZjE0Q2xLZzVoR2d0UExKOTh1ZU5Ba2M1SHMyV1psazJRSHZmcmVDSzFDQ0dPNm5NWlZTYjk5Vk0vYWpyOFdIVHRlOUpTbWtYcS9pL1U5NDNIRWJkelc2UmUvUzg4ZEtnZzhwR09MbEFlTmlxcmNMa1VSMy9hQ2xGcE1YY09VUDNybUVUY1dTZk1YWkUzVFVPaThpK2ZxUm5UWUxmbFZ4L1ZiLzZHSjdlSVJaVUE2azNSWVIzaUZTSzljNGlEZE53SnVaTDJGS3ovSUs1VmltY05XRXFkWGpTb3hTZ21GMFVQbERvVWxOclBjTTdmdG1BOFk5Z0tpcUtFSHVXTitBWlJJd3RWU3h5ZTJLZjhyTTNsaEo1WGNCWFU5bjR2ME95MVJVMk0rNHFNOEFRUFZ3c2U4RXJOU29iNW9GUFd4dXFablZ6bzFxQi9JQnhrTTNFVlVLRlVVbE8zZTUxMjU5R2dOY0piQ21sdnJkanRvVFc3ckNobTF3eUNLenBDVHdvelVVRU9JY1dMbmVSTGdNWGgrU2pHU0ZrQWxsemJHUzVISzdMbGZDTVJOUkRTdmJRUGpjWGFlbk5ZeEN2dTJReXpuejZTdHV4Vmo2NlNnSTBUOEI2L3NmSEFKWVphWjc4dGhqT1NJRnVtTldMUWJlWml4RENDQyt2MFlCdGt4aUJCM2plZkhxWi9kRkhVK2NyYmo2T3ZTMXgvSkREN3ZsbTd6T1ZQd3BVQzAxbmh4WnVZLzYzRTdnJztcclxuXHJcbi8vIGh0dHBzOi8vdW5pY29kZS5vcmcvcmVwb3J0cy90cjE1L1xyXG4vLyBmb3IgcmVmZXJlbmNlIGltcGxlbWVudGF0aW9uXHJcbi8vIHNlZTogL2Rlcml2ZS9uZi5qc1xyXG5cclxuXHJcbi8vIGFsZ29yaXRobWljIGhhbmd1bFxyXG4vLyBodHRwczovL3d3dy51bmljb2RlLm9yZy92ZXJzaW9ucy9Vbmljb2RlMTUuMC4wL2NoMDMucGRmIChwYWdlIDE0NClcclxuY29uc3QgUzAgPSAweEFDMDA7XHJcbmNvbnN0IEwwID0gMHgxMTAwO1xyXG5jb25zdCBWMCA9IDB4MTE2MTtcclxuY29uc3QgVDAgPSAweDExQTc7XHJcbmNvbnN0IExfQ09VTlQgPSAxOTtcclxuY29uc3QgVl9DT1VOVCA9IDIxO1xyXG5jb25zdCBUX0NPVU5UID0gMjg7XHJcbmNvbnN0IE5fQ09VTlQgPSBWX0NPVU5UICogVF9DT1VOVDtcclxuY29uc3QgU19DT1VOVCA9IExfQ09VTlQgKiBOX0NPVU5UO1xyXG5jb25zdCBTMSA9IFMwICsgU19DT1VOVDtcclxuY29uc3QgTDEgPSBMMCArIExfQ09VTlQ7XHJcbmNvbnN0IFYxID0gVjAgKyBWX0NPVU5UO1xyXG5jb25zdCBUMSA9IFQwICsgVF9DT1VOVDtcclxuXHJcbmZ1bmN0aW9uIHVucGFja19jYyhwYWNrZWQpIHtcclxuXHRyZXR1cm4gKHBhY2tlZCA+PiAyNCkgJiAweEZGO1xyXG59XHJcbmZ1bmN0aW9uIHVucGFja19jcChwYWNrZWQpIHtcclxuXHRyZXR1cm4gcGFja2VkICYgMHhGRkZGRkY7XHJcbn1cclxuXHJcbmxldCBTSElGVEVEX1JBTkssIEVYQ0xVU0lPTlMsIERFQ09NUCwgUkVDT01QO1xyXG5cclxuZnVuY3Rpb24gaW5pdCQxKCkge1xyXG5cdC8vY29uc29sZS50aW1lKCduZicpO1xyXG5cdGxldCByID0gcmVhZF9jb21wcmVzc2VkX3BheWxvYWQoQ09NUFJFU1NFRCk7XHJcblx0U0hJRlRFRF9SQU5LID0gbmV3IE1hcChyZWFkX3NvcnRlZF9hcnJheXMocikuZmxhdE1hcCgodiwgaSkgPT4gdi5tYXAoeCA9PiBbeCwgKGkrMSkgPDwgMjRdKSkpOyAvLyBwcmUtc2hpZnRlZFxyXG5cdEVYQ0xVU0lPTlMgPSBuZXcgU2V0KHJlYWRfc29ydGVkKHIpKTtcclxuXHRERUNPTVAgPSBuZXcgTWFwKCk7XHJcblx0UkVDT01QID0gbmV3IE1hcCgpO1xyXG5cdGZvciAobGV0IFtjcCwgY3BzXSBvZiByZWFkX21hcHBlZChyKSkge1xyXG5cdFx0aWYgKCFFWENMVVNJT05TLmhhcyhjcCkgJiYgY3BzLmxlbmd0aCA9PSAyKSB7XHJcblx0XHRcdGxldCBbYSwgYl0gPSBjcHM7XHJcblx0XHRcdGxldCBidWNrZXQgPSBSRUNPTVAuZ2V0KGEpO1xyXG5cdFx0XHRpZiAoIWJ1Y2tldCkge1xyXG5cdFx0XHRcdGJ1Y2tldCA9IG5ldyBNYXAoKTtcclxuXHRcdFx0XHRSRUNPTVAuc2V0KGEsIGJ1Y2tldCk7XHJcblx0XHRcdH1cclxuXHRcdFx0YnVja2V0LnNldChiLCBjcCk7XHJcblx0XHR9XHJcblx0XHRERUNPTVAuc2V0KGNwLCBjcHMucmV2ZXJzZSgpKTsgLy8gc3RvcmVkIHJldmVyc2VkXHJcblx0fVxyXG5cdC8vY29uc29sZS50aW1lRW5kKCduZicpO1xyXG5cdC8vIDIwMjMwOTA1OiAxMW1zXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzX2hhbmd1bChjcCkge1xyXG5cdHJldHVybiBjcCA+PSBTMCAmJiBjcCA8IFMxO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjb21wb3NlX3BhaXIoYSwgYikge1xyXG5cdGlmIChhID49IEwwICYmIGEgPCBMMSAmJiBiID49IFYwICYmIGIgPCBWMSkge1xyXG5cdFx0cmV0dXJuIFMwICsgKGEgLSBMMCkgKiBOX0NPVU5UICsgKGIgLSBWMCkgKiBUX0NPVU5UO1xyXG5cdH0gZWxzZSBpZiAoaXNfaGFuZ3VsKGEpICYmIGIgPiBUMCAmJiBiIDwgVDEgJiYgKGEgLSBTMCkgJSBUX0NPVU5UID09IDApIHtcclxuXHRcdHJldHVybiBhICsgKGIgLSBUMCk7XHJcblx0fSBlbHNlIHtcclxuXHRcdGxldCByZWNvbXAgPSBSRUNPTVAuZ2V0KGEpO1xyXG5cdFx0aWYgKHJlY29tcCkge1xyXG5cdFx0XHRyZWNvbXAgPSByZWNvbXAuZ2V0KGIpO1xyXG5cdFx0XHRpZiAocmVjb21wKSB7XHJcblx0XHRcdFx0cmV0dXJuIHJlY29tcDtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIC0xO1xyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gZGVjb21wb3NlZChjcHMpIHtcclxuXHRpZiAoIVNISUZURURfUkFOSykgaW5pdCQxKCk7XHJcblx0bGV0IHJldCA9IFtdO1xyXG5cdGxldCBidWYgPSBbXTtcclxuXHRsZXQgY2hlY2tfb3JkZXIgPSBmYWxzZTtcclxuXHRmdW5jdGlvbiBhZGQoY3ApIHtcclxuXHRcdGxldCBjYyA9IFNISUZURURfUkFOSy5nZXQoY3ApO1xyXG5cdFx0aWYgKGNjKSB7XHJcblx0XHRcdGNoZWNrX29yZGVyID0gdHJ1ZTtcclxuXHRcdFx0Y3AgfD0gY2M7XHJcblx0XHR9XHJcblx0XHRyZXQucHVzaChjcCk7XHJcblx0fVxyXG5cdGZvciAobGV0IGNwIG9mIGNwcykge1xyXG5cdFx0d2hpbGUgKHRydWUpIHtcclxuXHRcdFx0aWYgKGNwIDwgMHg4MCkge1xyXG5cdFx0XHRcdHJldC5wdXNoKGNwKTtcclxuXHRcdFx0fSBlbHNlIGlmIChpc19oYW5ndWwoY3ApKSB7XHJcblx0XHRcdFx0bGV0IHNfaW5kZXggPSBjcCAtIFMwO1xyXG5cdFx0XHRcdGxldCBsX2luZGV4ID0gc19pbmRleCAvIE5fQ09VTlQgfCAwO1xyXG5cdFx0XHRcdGxldCB2X2luZGV4ID0gKHNfaW5kZXggJSBOX0NPVU5UKSAvIFRfQ09VTlQgfCAwO1xyXG5cdFx0XHRcdGxldCB0X2luZGV4ID0gc19pbmRleCAlIFRfQ09VTlQ7XHJcblx0XHRcdFx0YWRkKEwwICsgbF9pbmRleCk7XHJcblx0XHRcdFx0YWRkKFYwICsgdl9pbmRleCk7XHJcblx0XHRcdFx0aWYgKHRfaW5kZXggPiAwKSBhZGQoVDAgKyB0X2luZGV4KTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRsZXQgbWFwcGVkID0gREVDT01QLmdldChjcCk7XHJcblx0XHRcdFx0aWYgKG1hcHBlZCkge1xyXG5cdFx0XHRcdFx0YnVmLnB1c2goLi4ubWFwcGVkKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0YWRkKGNwKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKCFidWYubGVuZ3RoKSBicmVhaztcclxuXHRcdFx0Y3AgPSBidWYucG9wKCk7XHJcblx0XHR9XHJcblx0fVxyXG5cdGlmIChjaGVja19vcmRlciAmJiByZXQubGVuZ3RoID4gMSkge1xyXG5cdFx0bGV0IHByZXZfY2MgPSB1bnBhY2tfY2MocmV0WzBdKTtcclxuXHRcdGZvciAobGV0IGkgPSAxOyBpIDwgcmV0Lmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdGxldCBjYyA9IHVucGFja19jYyhyZXRbaV0pO1xyXG5cdFx0XHRpZiAoY2MgPT0gMCB8fCBwcmV2X2NjIDw9IGNjKSB7XHJcblx0XHRcdFx0cHJldl9jYyA9IGNjO1xyXG5cdFx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0XHR9XHJcblx0XHRcdGxldCBqID0gaS0xO1xyXG5cdFx0XHR3aGlsZSAodHJ1ZSkge1xyXG5cdFx0XHRcdGxldCB0bXAgPSByZXRbaisxXTtcclxuXHRcdFx0XHRyZXRbaisxXSA9IHJldFtqXTtcclxuXHRcdFx0XHRyZXRbal0gPSB0bXA7XHJcblx0XHRcdFx0aWYgKCFqKSBicmVhaztcclxuXHRcdFx0XHRwcmV2X2NjID0gdW5wYWNrX2NjKHJldFstLWpdKTtcclxuXHRcdFx0XHRpZiAocHJldl9jYyA8PSBjYykgYnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdFx0cHJldl9jYyA9IHVucGFja19jYyhyZXRbaV0pO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRyZXR1cm4gcmV0O1xyXG59XHJcblxyXG5mdW5jdGlvbiBjb21wb3NlZF9mcm9tX2RlY29tcG9zZWQodikge1xyXG5cdGxldCByZXQgPSBbXTtcclxuXHRsZXQgc3RhY2sgPSBbXTtcclxuXHRsZXQgcHJldl9jcCA9IC0xO1xyXG5cdGxldCBwcmV2X2NjID0gMDtcclxuXHRmb3IgKGxldCBwYWNrZWQgb2Ygdikge1xyXG5cdFx0bGV0IGNjID0gdW5wYWNrX2NjKHBhY2tlZCk7XHJcblx0XHRsZXQgY3AgPSB1bnBhY2tfY3AocGFja2VkKTtcclxuXHRcdGlmIChwcmV2X2NwID09IC0xKSB7XHJcblx0XHRcdGlmIChjYyA9PSAwKSB7XHJcblx0XHRcdFx0cHJldl9jcCA9IGNwO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHJldC5wdXNoKGNwKTtcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIGlmIChwcmV2X2NjID4gMCAmJiBwcmV2X2NjID49IGNjKSB7XHJcblx0XHRcdGlmIChjYyA9PSAwKSB7XHJcblx0XHRcdFx0cmV0LnB1c2gocHJldl9jcCwgLi4uc3RhY2spO1xyXG5cdFx0XHRcdHN0YWNrLmxlbmd0aCA9IDA7XHJcblx0XHRcdFx0cHJldl9jcCA9IGNwO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHN0YWNrLnB1c2goY3ApO1xyXG5cdFx0XHR9XHJcblx0XHRcdHByZXZfY2MgPSBjYztcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGxldCBjb21wb3NlZCA9IGNvbXBvc2VfcGFpcihwcmV2X2NwLCBjcCk7XHJcblx0XHRcdGlmIChjb21wb3NlZCA+PSAwKSB7XHJcblx0XHRcdFx0cHJldl9jcCA9IGNvbXBvc2VkO1xyXG5cdFx0XHR9IGVsc2UgaWYgKHByZXZfY2MgPT0gMCAmJiBjYyA9PSAwKSB7XHJcblx0XHRcdFx0cmV0LnB1c2gocHJldl9jcCk7XHJcblx0XHRcdFx0cHJldl9jcCA9IGNwO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHN0YWNrLnB1c2goY3ApO1xyXG5cdFx0XHRcdHByZXZfY2MgPSBjYztcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHRpZiAocHJldl9jcCA+PSAwKSB7XHJcblx0XHRyZXQucHVzaChwcmV2X2NwLCAuLi5zdGFjayk7XHRcclxuXHR9XHJcblx0cmV0dXJuIHJldDtcclxufVxyXG5cclxuLy8gbm90ZTogY3BzIGNhbiBiZSBpdGVyYWJsZVxyXG5mdW5jdGlvbiBuZmQoY3BzKSB7XHJcblx0cmV0dXJuIGRlY29tcG9zZWQoY3BzKS5tYXAodW5wYWNrX2NwKTtcclxufVxyXG5mdW5jdGlvbiBuZmMoY3BzKSB7XHJcblx0cmV0dXJuIGNvbXBvc2VkX2Zyb21fZGVjb21wb3NlZChkZWNvbXBvc2VkKGNwcykpO1xyXG59XHJcblxyXG5jb25zdCBIWVBIRU4gPSAweDJEO1xyXG5jb25zdCBTVE9QID0gMHgyRTtcclxuY29uc3QgU1RPUF9DSCA9ICcuJztcclxuY29uc3QgRkUwRiA9IDB4RkUwRjtcclxuY29uc3QgVU5JUVVFX1BIID0gMTtcclxuXHJcbi8vIDIwMjMwOTEzOiByZXBsYWNlIFsuLi52XSB3aXRoIEFycmF5X2Zyb20odikgdG8gYXZvaWQgbGFyZ2Ugc3ByZWFkc1xyXG5jb25zdCBBcnJheV9mcm9tID0geCA9PiBBcnJheS5mcm9tKHgpOyAvLyBBcnJheS5mcm9tLmJpbmQoQXJyYXkpO1xyXG5cclxuZnVuY3Rpb24gZ3JvdXBfaGFzX2NwKGcsIGNwKSB7XHJcblx0Ly8gMjAyMzA5MTM6IGtlZXAgcHJpbWFyeSBhbmQgc2Vjb25kYXJ5IGRpc3RpbmN0IGluc3RlYWQgb2YgY3JlYXRpbmcgdmFsaWQgdW5pb25cclxuXHRyZXR1cm4gZy5QLmhhcyhjcCkgfHwgZy5RLmhhcyhjcCk7XHJcbn1cclxuXHJcbmNsYXNzIEVtb2ppIGV4dGVuZHMgQXJyYXkge1xyXG5cdGdldCBpc19lbW9qaSgpIHsgcmV0dXJuIHRydWU7IH0gLy8gZnJlZSB0YWdnaW5nIHN5c3RlbVxyXG59XHJcblxyXG5sZXQgTUFQUEVELCBJR05PUkVELCBDTSwgTlNNLCBFU0NBUEUsIE5GQ19DSEVDSywgR1JPVVBTLCBXSE9MRV9WQUxJRCwgV0hPTEVfTUFQLCBWQUxJRCwgRU1PSklfTElTVCwgRU1PSklfUk9PVDtcclxuXHJcbmZ1bmN0aW9uIGluaXQoKSB7XHJcblx0aWYgKE1BUFBFRCkgcmV0dXJuO1xyXG5cdFxyXG5cdGxldCByID0gcmVhZF9jb21wcmVzc2VkX3BheWxvYWQoQ09NUFJFU1NFRCQxKTtcclxuXHRjb25zdCByZWFkX3NvcnRlZF9hcnJheSA9ICgpID0+IHJlYWRfc29ydGVkKHIpO1xyXG5cdGNvbnN0IHJlYWRfc29ydGVkX3NldCA9ICgpID0+IG5ldyBTZXQocmVhZF9zb3J0ZWRfYXJyYXkoKSk7XHJcblx0Y29uc3Qgc2V0X2FkZF9tYW55ID0gKHNldCwgdikgPT4gdi5mb3JFYWNoKHggPT4gc2V0LmFkZCh4KSk7XHJcblxyXG5cdE1BUFBFRCA9IG5ldyBNYXAocmVhZF9tYXBwZWQocikpOyBcclxuXHRJR05PUkVEID0gcmVhZF9zb3J0ZWRfc2V0KCk7IC8vIGlnbm9yZWQgY2hhcmFjdGVycyBhcmUgbm90IHZhbGlkLCBzbyBqdXN0IHJlYWQgcmF3IGNvZGVwb2ludHNcclxuXHJcblx0LypcclxuXHQvLyBkaXJlY3QgaW5jbHVkZSBmcm9tIHBheWxvYWQgaXMgc21hbGxlciB0aGFuIHRoZSBkZWNvbXByZXNzaW9uIGNvZGVcclxuXHRjb25zdCBGRU5DRUQgPSBuZXcgTWFwKHJlYWRfYXJyYXlfd2hpbGUoKCkgPT4ge1xyXG5cdFx0bGV0IGNwID0gcigpO1xyXG5cdFx0aWYgKGNwKSByZXR1cm4gW2NwLCByZWFkX3N0cihyKCkpXTtcclxuXHR9KSk7XHJcblx0Ki9cclxuXHQvLyAyMDIzMDIxNzogd2Ugc3RpbGwgbmVlZCBhbGwgQ00gZm9yIHByb3BlciBlcnJvciBmb3JtYXR0aW5nXHJcblx0Ly8gYnV0IG5vcm0gb25seSBuZWVkcyBOU00gc3Vic2V0IHRoYXQgYXJlIHBvdGVudGlhbGx5LXZhbGlkXHJcblx0Q00gPSByZWFkX3NvcnRlZF9hcnJheSgpO1xyXG5cdE5TTSA9IG5ldyBTZXQocmVhZF9zb3J0ZWRfYXJyYXkoKS5tYXAoaSA9PiBDTVtpXSkpO1xyXG5cdENNID0gbmV3IFNldChDTSk7XHJcblx0XHJcblx0RVNDQVBFID0gcmVhZF9zb3J0ZWRfc2V0KCk7IC8vIGNoYXJhY3RlcnMgdGhhdCBzaG91bGQgbm90IGJlIHByaW50ZWRcclxuXHRORkNfQ0hFQ0sgPSByZWFkX3NvcnRlZF9zZXQoKTsgLy8gb25seSBuZWVkZWQgdG8gaWxsdXN0cmF0ZSBlbnNfdG9rZW5pemUoKSB0cmFuc2Zvcm1hdGlvbnNcclxuXHJcblx0bGV0IGNodW5rcyA9IHJlYWRfc29ydGVkX2FycmF5cyhyKTtcclxuXHRsZXQgdW5yZXN0cmljdGVkID0gcigpO1xyXG5cdC8vY29uc3QgcmVhZF9jaHVua2VkID0gKCkgPT4gbmV3IFNldChyZWFkX3NvcnRlZF9hcnJheSgpLmZsYXRNYXAoaSA9PiBjaHVua3NbaV0pLmNvbmNhdChyZWFkX3NvcnRlZF9hcnJheSgpKSk7XHJcblx0Y29uc3QgcmVhZF9jaHVua2VkID0gKCkgPT4ge1xyXG5cdFx0Ly8gMjAyMzA5MjE6IGJ1aWxkIHNldCBpbiBwYXJ0cywgMnggZmFzdGVyXHJcblx0XHRsZXQgc2V0ID0gbmV3IFNldCgpO1xyXG5cdFx0cmVhZF9zb3J0ZWRfYXJyYXkoKS5mb3JFYWNoKGkgPT4gc2V0X2FkZF9tYW55KHNldCwgY2h1bmtzW2ldKSk7XHJcblx0XHRzZXRfYWRkX21hbnkoc2V0LCByZWFkX3NvcnRlZF9hcnJheSgpKTtcclxuXHRcdHJldHVybiBzZXQ7IFxyXG5cdH07XHJcblx0R1JPVVBTID0gcmVhZF9hcnJheV93aGlsZShpID0+IHtcclxuXHRcdC8vIG1pbmlmaWVyIHByb3BlcnR5IG1hbmdsaW5nIHNlZW1zIHVuc2FmZVxyXG5cdFx0Ly8gc28gdGhlc2UgYXJlIG1hbnVhbGx5IHJlbmFtZWQgdG8gc2luZ2xlIGNoYXJzXHJcblx0XHRsZXQgTiA9IHJlYWRfYXJyYXlfd2hpbGUocikubWFwKHggPT4geCsweDYwKTtcclxuXHRcdGlmIChOLmxlbmd0aCkge1xyXG5cdFx0XHRsZXQgUiA9IGkgPj0gdW5yZXN0cmljdGVkOyAvLyB1bnJlc3RyaWN0ZWQgdGhlbiByZXN0cmljdGVkXHJcblx0XHRcdE5bMF0gLT0gMzI7IC8vIGNhcGl0YWxpemVcclxuXHRcdFx0TiA9IHN0cl9mcm9tX2NwcyhOKTtcclxuXHRcdFx0aWYgKFIpIE49YFJlc3RyaWN0ZWRbJHtOfV1gO1xyXG5cdFx0XHRsZXQgUCA9IHJlYWRfY2h1bmtlZCgpOyAvLyBwcmltYXJ5XHJcblx0XHRcdGxldCBRID0gcmVhZF9jaHVua2VkKCk7IC8vIHNlY29uZGFyeVxyXG5cdFx0XHRsZXQgTSA9ICFyKCk7IC8vIG5vdC13aGl0ZWxpc3RlZCwgY2hlY2sgZm9yIE5TTVxyXG5cdFx0XHQvLyAqKiogdGhpcyBjb2RlIGN1cnJlbnRseSBpc24ndCBuZWVkZWQgKioqXHJcblx0XHRcdC8qXHJcblx0XHRcdGxldCBWID0gWy4uLlAsIC4uLlFdLnNvcnQoKGEsIGIpID0+IGEtYik7IC8vIGRlcml2ZTogc29ydGVkIHZhbGlkXHJcblx0XHRcdGxldCBNID0gcigpLTE7IC8vIG51bWJlciBvZiBjb21iaW5pbmcgbWFya1xyXG5cdFx0XHRpZiAoTSA8IDApIHsgLy8gd2hpdGVsaXN0ZWRcclxuXHRcdFx0XHRNID0gbmV3IE1hcChyZWFkX2FycmF5X3doaWxlKCgpID0+IHtcclxuXHRcdFx0XHRcdGxldCBpID0gcigpO1xyXG5cdFx0XHRcdFx0aWYgKGkpIHJldHVybiBbVltpLTFdLCByZWFkX2FycmF5X3doaWxlKCgpID0+IHtcclxuXHRcdFx0XHRcdFx0bGV0IHYgPSByZWFkX2FycmF5X3doaWxlKHIpO1xyXG5cdFx0XHRcdFx0XHRpZiAodi5sZW5ndGgpIHJldHVybiB2Lm1hcCh4ID0+IHgtMSk7XHJcblx0XHRcdFx0XHR9KV07XHJcblx0XHRcdFx0fSkpO1xyXG5cdFx0XHR9Ki9cclxuXHRcdFx0cmV0dXJuIHtOLCBQLCBRLCBNLCBSfTtcclxuXHRcdH1cclxuXHR9KTtcclxuXHJcblx0Ly8gZGVjb2RlIGNvbXByZXNzZWQgd2hvbGVzXHJcblx0V0hPTEVfVkFMSUQgPSByZWFkX3NvcnRlZF9zZXQoKTtcclxuXHRXSE9MRV9NQVAgPSBuZXcgTWFwKCk7XHJcblx0bGV0IHdob2xlcyA9IHJlYWRfc29ydGVkX2FycmF5KCkuY29uY2F0KEFycmF5X2Zyb20oV0hPTEVfVkFMSUQpKS5zb3J0KChhLCBiKSA9PiBhLWIpOyAvLyBtdXN0IGJlIHNvcnRlZFxyXG5cdHdob2xlcy5mb3JFYWNoKChjcCwgaSkgPT4ge1xyXG5cdFx0bGV0IGQgPSByKCk7IFxyXG5cdFx0bGV0IHcgPSB3aG9sZXNbaV0gPSBkID8gd2hvbGVzW2ktZF0gOiB7VjogW10sIE06IG5ldyBNYXAoKX07XHJcblx0XHR3LlYucHVzaChjcCk7IC8vIGFkZCB0byBtZW1iZXIgc2V0XHJcblx0XHRpZiAoIVdIT0xFX1ZBTElELmhhcyhjcCkpIHtcclxuXHRcdFx0V0hPTEVfTUFQLnNldChjcCwgdyk7ICAvLyByZWdpc3RlciB3aXRoIHdob2xlIG1hcFxyXG5cdFx0fVxyXG5cdH0pO1xyXG5cclxuXHQvLyBjb21wdXRlIGNvbmZ1c2FibGUtZXh0ZW50IGNvbXBsZW1lbnRzXHJcblx0Ly8gdXNhZ2U6IFdIT0xFX01BUC5nZXQoY3ApLk0uZ2V0KGNwKSA9IGNvbXBsZW1lbnQgc2V0XHJcblx0Zm9yIChsZXQge1YsIE19IG9mIG5ldyBTZXQoV0hPTEVfTUFQLnZhbHVlcygpKSkge1xyXG5cdFx0Ly8gY29ubmVjdCBhbGwgZ3JvdXBzIHRoYXQgaGF2ZSBlYWNoIHdob2xlIGNoYXJhY3RlclxyXG5cdFx0bGV0IHJlY3MgPSBbXTtcclxuXHRcdGZvciAobGV0IGNwIG9mIFYpIHtcclxuXHRcdFx0bGV0IGdzID0gR1JPVVBTLmZpbHRlcihnID0+IGdyb3VwX2hhc19jcChnLCBjcCkpO1xyXG5cdFx0XHRsZXQgcmVjID0gcmVjcy5maW5kKCh7R30pID0+IGdzLnNvbWUoZyA9PiBHLmhhcyhnKSkpO1xyXG5cdFx0XHRpZiAoIXJlYykge1xyXG5cdFx0XHRcdHJlYyA9IHtHOiBuZXcgU2V0KCksIFY6IFtdfTtcclxuXHRcdFx0XHRyZWNzLnB1c2gocmVjKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZWMuVi5wdXNoKGNwKTtcclxuXHRcdFx0c2V0X2FkZF9tYW55KHJlYy5HLCBncyk7XHJcblx0XHR9XHJcblx0XHQvLyBwZXIgY2hhcmFjdGVyIGNhY2hlIGdyb3VwcyB3aGljaCBhcmUgbm90IGEgbWVtYmVyIG9mIHRoZSBleHRlbnRcclxuXHRcdGxldCB1bmlvbiA9IHJlY3MuZmxhdE1hcCh4ID0+IEFycmF5X2Zyb20oeC5HKSk7IC8vIGFsbCBvZiB0aGUgZ3JvdXBzIHVzZWQgYnkgdGhpcyB3aG9sZVxyXG5cdFx0Zm9yIChsZXQge0csIFZ9IG9mIHJlY3MpIHtcclxuXHRcdFx0bGV0IGNvbXBsZW1lbnQgPSBuZXcgU2V0KHVuaW9uLmZpbHRlcihnID0+ICFHLmhhcyhnKSkpOyAvLyBncm91cHMgbm90IGNvdmVyZWQgYnkgdGhlIGV4dGVudFxyXG5cdFx0XHRmb3IgKGxldCBjcCBvZiBWKSB7XHJcblx0XHRcdFx0TS5zZXQoY3AsIGNvbXBsZW1lbnQpOyAvLyB0aGlzIGlzIHRoZSBzYW1lIHJlZmVyZW5jZVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvLyBjb21wdXRlIHZhbGlkIHNldFxyXG5cdC8vIDIwMjMwOTI0OiBWQUxJRCB3YXMgdW5pb24gYnV0IGNhbiBiZSByZS11c2VkXHJcblx0VkFMSUQgPSBuZXcgU2V0KCk7IC8vIGV4aXN0cyBpbiAxKyBncm91cHNcclxuXHRsZXQgbXVsdGkgPSBuZXcgU2V0KCk7IC8vIGV4aXN0cyBpbiAyKyBncm91cHNcclxuXHRjb25zdCBhZGRfdG9fdW5pb24gPSBjcCA9PiBWQUxJRC5oYXMoY3ApID8gbXVsdGkuYWRkKGNwKSA6IFZBTElELmFkZChjcCk7XHJcblx0Zm9yIChsZXQgZyBvZiBHUk9VUFMpIHtcclxuXHRcdGZvciAobGV0IGNwIG9mIGcuUCkgYWRkX3RvX3VuaW9uKGNwKTtcclxuXHRcdGZvciAobGV0IGNwIG9mIGcuUSkgYWRkX3RvX3VuaW9uKGNwKTtcclxuXHR9XHJcblx0Ly8gZHVhbCBwdXJwb3NlIFdIT0xFX01BUDogcmV0dXJuIHBsYWNlaG9sZGVyIGlmIHVuaXF1ZSBub24tY29uZnVzYWJsZVxyXG5cdGZvciAobGV0IGNwIG9mIFZBTElEKSB7XHJcblx0XHRpZiAoIVdIT0xFX01BUC5oYXMoY3ApICYmICFtdWx0aS5oYXMoY3ApKSB7XHJcblx0XHRcdFdIT0xFX01BUC5zZXQoY3AsIFVOSVFVRV9QSCk7XHJcblx0XHR9XHJcblx0fVxyXG5cdC8vIGFkZCBhbGwgZGVjb21wb3NlZCBwYXJ0c1xyXG5cdC8vIHNlZSBkZXJpdmU6IFwiVmFsaWQgaXMgQ2xvc2VkICh2aWEgQnJ1dGUtZm9yY2UpXCJcclxuXHRzZXRfYWRkX21hbnkoVkFMSUQsIG5mZChWQUxJRCkpO1xyXG5cdFxyXG5cdC8vIGRlY29kZSBlbW9qaVxyXG5cdC8vIDIwMjMwNzE5OiBlbW9qaSBhcmUgbm93IGZ1bGx5LWV4cGFuZGVkIHRvIGF2b2lkIHF1aXJrIGxvZ2ljIFxyXG5cdEVNT0pJX0xJU1QgPSByZWFkX3RyaWUocikubWFwKHYgPT4gRW1vamkuZnJvbSh2KSkuc29ydChjb21wYXJlX2FycmF5cyk7XHJcblx0RU1PSklfUk9PVCA9IG5ldyBNYXAoKTsgLy8gdGhpcyBoYXMgYXBwcm94IDdLIG5vZGVzICgyKyBwZXIgZW1vamkpXHJcblx0Zm9yIChsZXQgY3BzIG9mIEVNT0pJX0xJU1QpIHtcclxuXHRcdC8vIDIwMjMwNzE5OiBjaGFuZ2UgdG8gKnNsaWdodGx5KiBzdHJpY3RlciBhbGdvcml0aG0gd2hpY2ggZGlzYWxsb3dzIFxyXG5cdFx0Ly8gaW5zZXJ0aW9uIG9mIG1pc3BsYWNlZCBGRTBGIGluIGVtb2ppIHNlcXVlbmNlcyAobWF0Y2hpbmcgRU5TSVAtMTUpXHJcblx0XHQvLyBleGFtcGxlOiBiZWF1dGlmaWVkIFtBIEJdIChlZy4gZmxhZyBlbW9qaSkgXHJcblx0XHQvLyAgYmVmb3JlOiBhbGxvdzogW0EgRkUwRiBCXSwgZXJyb3I6IFtBIEZFMEYgRkUwRiBCXSBcclxuXHRcdC8vICAgYWZ0ZXI6IGVycm9yOiBib3RoXHJcblx0XHQvLyBub3RlOiB0aGlzIGNvZGUgbm93IG1hdGNoZXMgRU5TTm9ybWFsaXplLntjcyxqYXZhfSBsb2dpY1xyXG5cdFx0bGV0IHByZXYgPSBbRU1PSklfUk9PVF07XHJcblx0XHRmb3IgKGxldCBjcCBvZiBjcHMpIHtcclxuXHRcdFx0bGV0IG5leHQgPSBwcmV2Lm1hcChub2RlID0+IHtcclxuXHRcdFx0XHRsZXQgY2hpbGQgPSBub2RlLmdldChjcCk7XHJcblx0XHRcdFx0aWYgKCFjaGlsZCkge1xyXG5cdFx0XHRcdFx0Ly8gc2hvdWxkIHRoaXMgYmUgb2JqZWN0PyBcclxuXHRcdFx0XHRcdC8vIChtb3N0IGhhdmUgMS0yIGl0ZW1zLCBmZXcgaGF2ZSBtYW55KVxyXG5cdFx0XHRcdFx0Ly8gMjAyMzA3MTk6IG5vLCB2OCBkZWZhdWx0IG1hcCBpcyA0P1xyXG5cdFx0XHRcdFx0Y2hpbGQgPSBuZXcgTWFwKCk7XHJcblx0XHRcdFx0XHRub2RlLnNldChjcCwgY2hpbGQpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gY2hpbGQ7XHJcblx0XHRcdH0pO1xyXG5cdFx0XHRpZiAoY3AgPT09IEZFMEYpIHtcclxuXHRcdFx0XHRwcmV2LnB1c2goLi4ubmV4dCk7IC8vIGxlc3MgdGhhbiAyMCBlbGVtZW50c1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHByZXYgPSBuZXh0O1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRmb3IgKGxldCB4IG9mIHByZXYpIHtcclxuXHRcdFx0eC5WID0gY3BzO1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxuLy8gaWYgZXNjYXBlZDoge0hFWH1cclxuLy8gICAgICAgZWxzZTogXCJ4XCIge0hFWH1cclxuZnVuY3Rpb24gcXVvdGVkX2NwKGNwKSB7XHJcblx0cmV0dXJuIChzaG91bGRfZXNjYXBlKGNwKSA/ICcnIDogYCR7YmlkaV9xcShzYWZlX3N0cl9mcm9tX2NwcyhbY3BdKSl9IGApICsgcXVvdGVfY3AoY3ApO1xyXG59XHJcblxyXG4vLyAyMDIzMDIxMTogc29tZSBtZXNzYWdlcyBjYW4gYmUgbWl4ZWQtZGlyZWN0aW9uYWwgYW5kIHJlc3VsdCBpbiBzcGlsbG92ZXJcclxuLy8gdXNlIDIwMEUgYWZ0ZXIgYSBxdW90ZWQgc3RyaW5nIHRvIGZvcmNlIHRoZSByZW1haW5kZXIgb2YgYSBzdHJpbmcgZnJvbSBcclxuLy8gYWNxdXJpbmcgdGhlIGRpcmVjdGlvbiBvZiB0aGUgcXVvdGVcclxuLy8gaHR0cHM6Ly93d3cudzMub3JnL0ludGVybmF0aW9uYWwvcXVlc3Rpb25zL3FhLWJpZGktdW5pY29kZS1jb250cm9scyNleGNlcHRpb25zXHJcbmZ1bmN0aW9uIGJpZGlfcXEocykge1xyXG5cdHJldHVybiBgXCIke3N9XCJcXHUyMDBFYDsgLy8gc3Ryb25nIExUUlxyXG59XHJcblxyXG5mdW5jdGlvbiBjaGVja19sYWJlbF9leHRlbnNpb24oY3BzKSB7XHJcblx0aWYgKGNwcy5sZW5ndGggPj0gNCAmJiBjcHNbMl0gPT0gSFlQSEVOICYmIGNwc1szXSA9PSBIWVBIRU4pIHtcclxuXHRcdHRocm93IG5ldyBFcnJvcihgaW52YWxpZCBsYWJlbCBleHRlbnNpb246IFwiJHtzdHJfZnJvbV9jcHMoY3BzLnNsaWNlKDAsIDQpKX1cImApOyAvLyB0aGlzIGNhbiBvbmx5IGJlIGFzY2lpIHNvIGNhbnQgYmUgYmlkaVxyXG5cdH1cclxufVxyXG5mdW5jdGlvbiBjaGVja19sZWFkaW5nX3VuZGVyc2NvcmUoY3BzKSB7XHJcblx0Y29uc3QgVU5ERVJTQ09SRSA9IDB4NUY7XHJcblx0Zm9yIChsZXQgaSA9IGNwcy5sYXN0SW5kZXhPZihVTkRFUlNDT1JFKTsgaSA+IDA7ICkge1xyXG5cdFx0aWYgKGNwc1stLWldICE9PSBVTkRFUlNDT1JFKSB7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcigndW5kZXJzY29yZSBhbGxvd2VkIG9ubHkgYXQgc3RhcnQnKTtcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuLy8gY2hlY2sgdGhhdCBhIGZlbmNlZCBjcCBpcyBub3QgbGVhZGluZywgdHJhaWxpbmcsIG9yIHRvdWNoaW5nIGFub3RoZXIgZmVuY2VkIGNwXHJcbmZ1bmN0aW9uIGNoZWNrX2ZlbmNlZChjcHMpIHtcclxuXHRsZXQgY3AgPSBjcHNbMF07XHJcblx0bGV0IHByZXYgPSBGRU5DRUQuZ2V0KGNwKTtcclxuXHRpZiAocHJldikgdGhyb3cgZXJyb3JfcGxhY2VtZW50KGBsZWFkaW5nICR7cHJldn1gKTtcclxuXHRsZXQgbiA9IGNwcy5sZW5ndGg7XHJcblx0bGV0IGxhc3QgPSAtMTsgLy8gcHJldmVudHMgdHJhaWxpbmcgZnJvbSB0aHJvd2luZ1xyXG5cdGZvciAobGV0IGkgPSAxOyBpIDwgbjsgaSsrKSB7XHJcblx0XHRjcCA9IGNwc1tpXTtcclxuXHRcdGxldCBtYXRjaCA9IEZFTkNFRC5nZXQoY3ApO1xyXG5cdFx0aWYgKG1hdGNoKSB7XHJcblx0XHRcdC8vIHNpbmNlIGNwc1swXSBpc24ndCBmZW5jZWQsIGNwc1sxXSBjYW5ub3QgdGhyb3dcclxuXHRcdFx0aWYgKGxhc3QgPT0gaSkgdGhyb3cgZXJyb3JfcGxhY2VtZW50KGAke3ByZXZ9ICsgJHttYXRjaH1gKTtcclxuXHRcdFx0bGFzdCA9IGkgKyAxO1xyXG5cdFx0XHRwcmV2ID0gbWF0Y2g7XHJcblx0XHR9XHJcblx0fVxyXG5cdGlmIChsYXN0ID09IG4pIHRocm93IGVycm9yX3BsYWNlbWVudChgdHJhaWxpbmcgJHtwcmV2fWApO1xyXG59XHJcblxyXG4vLyBjcmVhdGUgYSBzYWZlIHRvIHByaW50IHN0cmluZyBcclxuLy8gaW52aXNpYmxlcyBhcmUgZXNjYXBlZFxyXG4vLyBsZWFkaW5nIGNtIHVzZXMgcGxhY2Vob2xkZXJcclxuLy8gaWYgY3BzIGV4Y2VlZCBtYXgsIG1pZGRsZSB0cnVuY2F0ZSB3aXRoIGVsbGlwc2lzXHJcbi8vIHF1b3RlcihjcCkgPT4gc3RyaW5nLCBlZy4gMzAwMCA9PiBcInszMDAwfVwiXHJcbi8vIG5vdGU6IGluIGh0bWwsIHlvdSdkIGNhbGwgdGhpcyBmdW5jdGlvbiB0aGVuIHJlcGxhY2UgWzw+Jl0gd2l0aCBlbnRpdGllc1xyXG5mdW5jdGlvbiBzYWZlX3N0cl9mcm9tX2NwcyhjcHMsIG1heCA9IEluZmluaXR5LCBxdW90ZXIgPSBxdW90ZV9jcCkge1xyXG5cdC8vaWYgKE51bWJlci5pc0ludGVnZXIoY3BzKSkgY3BzID0gW2Nwc107XHJcblx0Ly9pZiAoIUFycmF5LmlzQXJyYXkoY3BzKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihgZXhwZWN0ZWQgY29kZXBvaW50c2ApO1xyXG5cdGxldCBidWYgPSBbXTtcclxuXHRpZiAoaXNfY29tYmluaW5nX21hcmsoY3BzWzBdKSkgYnVmLnB1c2goJ+KXjCcpO1xyXG5cdGlmIChjcHMubGVuZ3RoID4gbWF4KSB7XHJcblx0XHRtYXggPj49IDE7XHJcblx0XHRjcHMgPSBbLi4uY3BzLnNsaWNlKDAsIG1heCksIDB4MjAyNiwgLi4uY3BzLnNsaWNlKC1tYXgpXTtcclxuXHR9XHJcblx0bGV0IHByZXYgPSAwO1xyXG5cdGxldCBuID0gY3BzLmxlbmd0aDtcclxuXHRmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xyXG5cdFx0bGV0IGNwID0gY3BzW2ldO1xyXG5cdFx0aWYgKHNob3VsZF9lc2NhcGUoY3ApKSB7XHJcblx0XHRcdGJ1Zi5wdXNoKHN0cl9mcm9tX2NwcyhjcHMuc2xpY2UocHJldiwgaSkpKTtcclxuXHRcdFx0YnVmLnB1c2gocXVvdGVyKGNwKSk7XHJcblx0XHRcdHByZXYgPSBpICsgMTtcclxuXHRcdH1cclxuXHR9XHJcblx0YnVmLnB1c2goc3RyX2Zyb21fY3BzKGNwcy5zbGljZShwcmV2LCBuKSkpO1xyXG5cdHJldHVybiBidWYuam9pbignJyk7XHJcbn1cclxuXHJcbi8vIG5vdGU6IHNldChzKSBjYW5ub3QgYmUgZXhwb3NlZCBiZWNhdXNlIHRoZXkgY2FuIGJlIG1vZGlmaWVkXHJcbi8vIG5vdGU6IE9iamVjdC5mcmVlemUoKSBkb2Vzbid0IHdvcmtcclxuZnVuY3Rpb24gaXNfY29tYmluaW5nX21hcmsoY3ApIHtcclxuXHRpbml0KCk7XHJcblx0cmV0dXJuIENNLmhhcyhjcCk7XHJcbn1cclxuZnVuY3Rpb24gc2hvdWxkX2VzY2FwZShjcCkge1xyXG5cdGluaXQoKTtcclxuXHRyZXR1cm4gRVNDQVBFLmhhcyhjcCk7XHJcbn1cclxuXHJcbi8vIHJldHVybiBhbGwgc3VwcG9ydGVkIGVtb2ppIGFzIGZ1bGx5LXF1YWxpZmllZCBlbW9qaSBcclxuLy8gb3JkZXJlZCBieSBsZW5ndGggdGhlbiBsZXhpY29ncmFwaGljIFxyXG5mdW5jdGlvbiBlbnNfZW1vamkoKSB7XHJcblx0aW5pdCgpO1xyXG5cdHJldHVybiBFTU9KSV9MSVNULm1hcCh4ID0+IHguc2xpY2UoKSk7IC8vIGVtb2ppIGFyZSBleHBvc2VkIHNvIGNvcHlcclxufVxyXG5cclxuZnVuY3Rpb24gZW5zX25vcm1hbGl6ZV9mcmFnbWVudChmcmFnLCBkZWNvbXBvc2UpIHtcclxuXHRpbml0KCk7XHJcblx0bGV0IG5mID0gZGVjb21wb3NlID8gbmZkIDogbmZjO1xyXG5cdHJldHVybiBmcmFnLnNwbGl0KFNUT1BfQ0gpLm1hcChsYWJlbCA9PiBzdHJfZnJvbV9jcHModG9rZW5zX2Zyb21fc3RyKGV4cGxvZGVfY3AobGFiZWwpLCBuZiwgZmlsdGVyX2ZlMGYpLmZsYXQoKSkpLmpvaW4oU1RPUF9DSCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGVuc19ub3JtYWxpemUobmFtZSkge1xyXG5cdHJldHVybiBmbGF0dGVuKHNwbGl0KG5hbWUsIG5mYywgZmlsdGVyX2ZlMGYpKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZW5zX2JlYXV0aWZ5KG5hbWUpIHtcclxuXHRsZXQgbGFiZWxzID0gc3BsaXQobmFtZSwgbmZjLCB4ID0+IHgpOyAvLyBlbW9qaSBub3QgZXhwb3NlZFxyXG5cdGZvciAobGV0IHt0eXBlLCBvdXRwdXQsIGVycm9yfSBvZiBsYWJlbHMpIHtcclxuXHRcdGlmIChlcnJvcikgYnJlYWs7IC8vIGZsYXR0ZW4gd2lsbCB0aHJvd1xyXG5cclxuXHRcdC8vIHJlcGxhY2UgbGVhZGluZy90cmFpbGluZyBoeXBoZW5cclxuXHRcdC8vIDIwMjMwMTIxOiBjb25zaWRlciBiZWF1dGlmaW5nIGFsbCBvciBsZWFkaW5nL3RyYWlsaW5nIGh5cGhlbiB0byB1bmljb2RlIHZhcmlhbnRcclxuXHRcdC8vIG5vdCBleGFjdGx5IHRoZSBzYW1lIGluIGV2ZXJ5IGZvbnQsIGJ1dCB2ZXJ5IHNpbWlsYXI6IFwiLVwiIHZzIFwi4oCQXCJcclxuXHRcdC8qXHJcblx0XHRjb25zdCBVTklDT0RFX0hZUEhFTiA9IDB4MjAxMDtcclxuXHRcdC8vIG1heWJlIHRoaXMgc2hvdWxkIHJlcGxhY2UgYWxsIGZvciB2aXN1YWwgY29uc2lzdGFuY3k/XHJcblx0XHQvLyBgbm9kZSB0b29scy9yZWctY291bnQuanMgcmVnZXggXi1cXHsyLFxcfWAgPT4gNTkyXHJcblx0XHQvL2ZvciAobGV0IGkgPSAwOyBpIDwgb3V0cHV0Lmxlbmd0aDsgaSsrKSBpZiAob3V0cHV0W2ldID09IDB4MkQpIG91dHB1dFtpXSA9IDB4MjAxMDtcclxuXHRcdGlmIChvdXRwdXRbMF0gPT0gSFlQSEVOKSBvdXRwdXRbMF0gPSBVTklDT0RFX0hZUEhFTjtcclxuXHRcdGxldCBlbmQgPSBvdXRwdXQubGVuZ3RoLTE7XHJcblx0XHRpZiAob3V0cHV0W2VuZF0gPT0gSFlQSEVOKSBvdXRwdXRbZW5kXSA9IFVOSUNPREVfSFlQSEVOO1xyXG5cdFx0Ki9cclxuXHRcdC8vIDIwMjMwMTIzOiBXSEFUV0cgVVJMIHVzZXMgXCJDaGVja0h5cGhlbnNcIiBmYWxzZVxyXG5cdFx0Ly8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNpZG5hXHJcblxyXG5cdFx0Ly8gdXBkYXRlIGV0aGVyZXVtIHN5bWJvbFxyXG5cdFx0Ly8gzr4gPT4gzp4gaWYgbm90IGdyZWVrXHJcblx0XHRpZiAodHlwZSAhPT0gJ0dyZWVrJykgYXJyYXlfcmVwbGFjZShvdXRwdXQsIDB4M0JFLCAweDM5RSk7XHJcblxyXG5cdFx0Ly8gMjAyMjEyMTM6IGZpeGVzIGJpZGkgc3ViZG9tYWluIGlzc3VlLCBidXQgYnJlYWtzIGludmFyaWFudCAoMjAwRSBpcyBkaXNhbGxvd2VkKVxyXG5cdFx0Ly8gY291bGQgYmUgZml4ZWQgd2l0aCBzcGVjaWFsIGNhc2UgZm9yOiAyRCAoLikgKyAyMDBFIChMVFIpXHJcblx0XHQvLyBodHRwczovL2Rpc2N1c3MuZW5zLmRvbWFpbnMvdC9iaWRpLWxhYmVsLW9yZGVyaW5nLXNwb29mLzE1ODI0XHJcblx0XHQvL291dHB1dC5zcGxpY2UoMCwgMCwgMHgyMDBFKTtcclxuXHR9XHJcblx0cmV0dXJuIGZsYXR0ZW4obGFiZWxzKTtcclxufVxyXG5cclxuZnVuY3Rpb24gYXJyYXlfcmVwbGFjZSh2LCBhLCBiKSB7XHJcblx0bGV0IHByZXYgPSAwO1xyXG5cdHdoaWxlICh0cnVlKSB7XHJcblx0XHRsZXQgbmV4dCA9IHYuaW5kZXhPZihhLCBwcmV2KTtcclxuXHRcdGlmIChuZXh0IDwgMCkgYnJlYWs7XHJcblx0XHR2W25leHRdID0gYjsgXHJcblx0XHRwcmV2ID0gbmV4dCArIDE7XHJcblx0fVxyXG59XHJcblxyXG5mdW5jdGlvbiBlbnNfc3BsaXQobmFtZSwgcHJlc2VydmVfZW1vamkpIHtcclxuXHRyZXR1cm4gc3BsaXQobmFtZSwgbmZjLCBwcmVzZXJ2ZV9lbW9qaSA/IHggPT4geC5zbGljZSgpIDogZmlsdGVyX2ZlMGYpOyAvLyBlbW9qaSBhcmUgZXhwb3NlZCBzbyBjb3B5XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNwbGl0KG5hbWUsIG5mLCBlZikge1xyXG5cdGlmICghbmFtZSkgcmV0dXJuIFtdOyAvLyAyMDIzMDcxOTogZW1wdHkgbmFtZSBhbGxvd2FuY2VcclxuXHRpbml0KCk7XHJcblx0bGV0IG9mZnNldCA9IDA7XHJcblx0Ly8gaHR0cHM6Ly91bmljb2RlLm9yZy9yZXBvcnRzL3RyNDYvI1ZhbGlkaXR5X0NyaXRlcmlhXHJcblx0Ly8gNC4pIFwiVGhlIGxhYmVsIG11c3Qgbm90IGNvbnRhaW4gYSBVKzAwMkUgKCAuICkgRlVMTCBTVE9QLlwiXHJcblx0cmV0dXJuIG5hbWUuc3BsaXQoU1RPUF9DSCkubWFwKGxhYmVsID0+IHtcclxuXHRcdGxldCBpbnB1dCA9IGV4cGxvZGVfY3AobGFiZWwpO1xyXG5cdFx0bGV0IGluZm8gPSB7XHJcblx0XHRcdGlucHV0LFxyXG5cdFx0XHRvZmZzZXQsIC8vIGNvZGVwb2ludCwgbm90IHN1YnN0cmluZyFcclxuXHRcdH07XHJcblx0XHRvZmZzZXQgKz0gaW5wdXQubGVuZ3RoICsgMTsgLy8gKyBzdG9wXHJcblx0XHR0cnkge1xyXG5cdFx0XHQvLyAxLikgXCJUaGUgbGFiZWwgbXVzdCBiZSBpbiBVbmljb2RlIE5vcm1hbGl6YXRpb24gRm9ybSBORkNcIlxyXG5cdFx0XHRsZXQgdG9rZW5zID0gaW5mby50b2tlbnMgPSB0b2tlbnNfZnJvbV9zdHIoaW5wdXQsIG5mLCBlZik7XHJcblx0XHRcdGxldCB0b2tlbl9jb3VudCA9IHRva2Vucy5sZW5ndGg7XHJcblx0XHRcdGxldCB0eXBlO1xyXG5cdFx0XHRpZiAoIXRva2VuX2NvdW50KSB7IC8vIHRoZSBsYWJlbCB3YXMgZWZmZWN0aXZlbHkgZW1wdHkgKGNvdWxkIG9mIGhhZCBpZ25vcmVkIGNoYXJhY3RlcnMpXHJcblx0XHRcdFx0Ly9ub3JtID0gW107XHJcblx0XHRcdFx0Ly90eXBlID0gJ05vbmUnOyAvLyB1c2UgdGhpcyBpbnN0ZWFkIG9mIG5leHQgbWF0Y2gsIFwiQVNDSUlcIlxyXG5cdFx0XHRcdC8vIDIwMjMwMTIwOiBjaGFuZ2UgdG8gc3RyaWN0XHJcblx0XHRcdFx0Ly8gaHR0cHM6Ly9kaXNjdXNzLmVucy5kb21haW5zL3QvZW5zLW5hbWUtbm9ybWFsaXphdGlvbi0ybmQvMTQ1NjQvNTlcclxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYGVtcHR5IGxhYmVsYCk7XHJcblx0XHRcdH0gXHJcblx0XHRcdGxldCBub3JtID0gaW5mby5vdXRwdXQgPSB0b2tlbnMuZmxhdCgpO1xyXG5cdFx0XHRjaGVja19sZWFkaW5nX3VuZGVyc2NvcmUobm9ybSk7XHJcblx0XHRcdGxldCBlbW9qaSA9IGluZm8uZW1vamkgPSB0b2tlbl9jb3VudCA+IDEgfHwgdG9rZW5zWzBdLmlzX2Vtb2ppOyAvLyBzYW1lIGFzOiB0b2tlbnMuc29tZSh4ID0+IHguaXNfZW1vamkpO1xyXG5cdFx0XHRpZiAoIWVtb2ppICYmIG5vcm0uZXZlcnkoY3AgPT4gY3AgPCAweDgwKSkgeyAvLyBzcGVjaWFsIGNhc2UgZm9yIGFzY2lpXHJcblx0XHRcdFx0Ly8gMjAyMzAxMjM6IG1hdGNoZXMgbWF0Y2hlcyBXSEFUV0csIHNlZSBub3RlIDMuM1xyXG5cdFx0XHRcdGNoZWNrX2xhYmVsX2V4dGVuc2lvbihub3JtKTsgLy8gb25seSBuZWVkZWQgZm9yIGFzY2lpXHJcblx0XHRcdFx0Ly8gY2FudCBoYXZlIGZlbmNlZFxyXG5cdFx0XHRcdC8vIGNhbnQgaGF2ZSBjbVxyXG5cdFx0XHRcdC8vIGNhbnQgaGF2ZSB3aG9sZXNcclxuXHRcdFx0XHQvLyBzZWUgZGVyaXZlOiBcIkZhc3RwYXRoIEFTQ0lJXCJcclxuXHRcdFx0XHR0eXBlID0gJ0FTQ0lJJztcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRsZXQgY2hhcnMgPSB0b2tlbnMuZmxhdE1hcCh4ID0+IHguaXNfZW1vamkgPyBbXSA6IHgpOyAvLyBhbGwgb2YgdGhlIG5mYyB0b2tlbnMgY29uY2F0IHRvZ2V0aGVyXHJcblx0XHRcdFx0aWYgKCFjaGFycy5sZW5ndGgpIHsgLy8gdGhlcmVzIG5vIHRleHQsIGp1c3QgZW1vamlcclxuXHRcdFx0XHRcdHR5cGUgPSAnRW1vamknO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHQvLyA1LikgXCJUaGUgbGFiZWwgbXVzdCBub3QgYmVnaW4gd2l0aCBhIGNvbWJpbmluZyBtYXJrLCB0aGF0IGlzOiBHZW5lcmFsX0NhdGVnb3J5PU1hcmsuXCJcclxuXHRcdFx0XHRcdGlmIChDTS5oYXMobm9ybVswXSkpIHRocm93IGVycm9yX3BsYWNlbWVudCgnbGVhZGluZyBjb21iaW5pbmcgbWFyaycpO1xyXG5cdFx0XHRcdFx0Zm9yIChsZXQgaSA9IDE7IGkgPCB0b2tlbl9jb3VudDsgaSsrKSB7IC8vIHdlJ3ZlIGFscmVhZHkgY2hlY2tlZCB0aGUgZmlyc3QgdG9rZW5cclxuXHRcdFx0XHRcdFx0bGV0IGNwcyA9IHRva2Vuc1tpXTtcclxuXHRcdFx0XHRcdFx0aWYgKCFjcHMuaXNfZW1vamkgJiYgQ00uaGFzKGNwc1swXSkpIHsgLy8gZXZlcnkgdGV4dCB0b2tlbiBoYXMgZW1vamkgbmVpZ2hib3JzLCBlZy4gRXRFRUV0RXQuLi5cclxuXHRcdFx0XHRcdFx0XHQvLyBiaWRpX3FxKCkgbm90IG5lZWRlZCBzaW5jZSBlbW9qaSBpcyBMVFIgYW5kIGNwcyBpcyBhIENNXHJcblx0XHRcdFx0XHRcdFx0dGhyb3cgZXJyb3JfcGxhY2VtZW50KGBlbW9qaSArIGNvbWJpbmluZyBtYXJrOiBcIiR7c3RyX2Zyb21fY3BzKHRva2Vuc1tpLTFdKX0gKyAke3NhZmVfc3RyX2Zyb21fY3BzKFtjcHNbMF1dKX1cImApOyBcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0Y2hlY2tfZmVuY2VkKG5vcm0pO1xyXG5cdFx0XHRcdFx0bGV0IHVuaXF1ZSA9IEFycmF5X2Zyb20obmV3IFNldChjaGFycykpO1xyXG5cdFx0XHRcdFx0bGV0IFtnXSA9IGRldGVybWluZV9ncm91cCh1bmlxdWUpOyAvLyB0YWtlIHRoZSBmaXJzdCBtYXRjaFxyXG5cdFx0XHRcdFx0Ly8gc2VlIGRlcml2ZTogXCJNYXRjaGluZyBHcm91cHMgaGF2ZSBTYW1lIENNIFN0eWxlXCJcclxuXHRcdFx0XHRcdC8vIGFsdGVybmF0aXZlOiBjb3VsZCBmb3JtIGEgaHlicmlkIHR5cGU6IExhdGluL0phcGFuZXNlLy4uLlx0XHJcblx0XHRcdFx0XHRjaGVja19ncm91cChnLCBjaGFycyk7IC8vIG5lZWQgdGV4dCBpbiBvcmRlclxyXG5cdFx0XHRcdFx0Y2hlY2tfd2hvbGUoZywgdW5pcXVlKTsgLy8gb25seSBuZWVkIHVuaXF1ZSB0ZXh0IChvcmRlciB3b3VsZCBiZSByZXF1aXJlZCBmb3IgbXVsdGlwbGUtY2hhciBjb25mdXNhYmxlcylcclxuXHRcdFx0XHRcdHR5cGUgPSBnLk47XHJcblx0XHRcdFx0XHQvLyAyMDIzMDEyMTogY29uc2lkZXIgZXhwb3NpbmcgcmVzdHJpY3RlZCBmbGFnXHJcblx0XHRcdFx0XHQvLyBpdCdzIHNpbXBsZXIgdG8ganVzdCBjaGVjayBmb3IgJ1Jlc3RyaWN0ZWQnXHJcblx0XHRcdFx0XHQvLyBvciBldmVuIGJldHRlcjogdHlwZS5lbmRzV2l0aCgnXScpXHJcblx0XHRcdFx0XHQvL2lmIChnLlIpIGluZm8ucmVzdHJpY3RlZCA9IHRydWU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdGluZm8udHlwZSA9IHR5cGU7XHJcblx0XHR9IGNhdGNoIChlcnIpIHtcclxuXHRcdFx0aW5mby5lcnJvciA9IGVycjsgLy8gdXNlIGZ1bGwgZXJyb3Igb2JqZWN0XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gaW5mbztcclxuXHR9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gY2hlY2tfd2hvbGUoZ3JvdXAsIHVuaXF1ZSkge1xyXG5cdGxldCBtYWtlcjtcclxuXHRsZXQgc2hhcmVkID0gW107XHJcblx0Zm9yIChsZXQgY3Agb2YgdW5pcXVlKSB7XHJcblx0XHRsZXQgd2hvbGUgPSBXSE9MRV9NQVAuZ2V0KGNwKTtcclxuXHRcdGlmICh3aG9sZSA9PT0gVU5JUVVFX1BIKSByZXR1cm47IC8vIHVuaXF1ZSwgbm9uLWNvbmZ1c2FibGVcclxuXHRcdGlmICh3aG9sZSkge1xyXG5cdFx0XHRsZXQgc2V0ID0gd2hvbGUuTS5nZXQoY3ApOyAvLyBncm91cHMgd2hpY2ggaGF2ZSBhIGNoYXJhY3RlciB0aGF0IGxvb2stbGlrZSB0aGlzIGNoYXJhY3RlclxyXG5cdFx0XHRtYWtlciA9IG1ha2VyID8gbWFrZXIuZmlsdGVyKGcgPT4gc2V0LmhhcyhnKSkgOiBBcnJheV9mcm9tKHNldCk7XHJcblx0XHRcdGlmICghbWFrZXIubGVuZ3RoKSByZXR1cm47IC8vIGNvbmZ1c2FibGUgaW50ZXJzZWN0aW9uIGlzIGVtcHR5XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRzaGFyZWQucHVzaChjcCk7IFxyXG5cdFx0fVxyXG5cdH1cclxuXHRpZiAobWFrZXIpIHtcclxuXHRcdC8vIHdlIGhhdmUgMSsgY29uZnVzYWJsZVxyXG5cdFx0Ly8gY2hlY2sgaWYgYW55IG9mIHRoZSByZW1haW5pbmcgZ3JvdXBzXHJcblx0XHQvLyBjb250YWluIHRoZSBzaGFyZWQgY2hhcmFjdGVycyB0b29cclxuXHRcdGZvciAobGV0IGcgb2YgbWFrZXIpIHtcclxuXHRcdFx0aWYgKHNoYXJlZC5ldmVyeShjcCA9PiBncm91cF9oYXNfY3AoZywgY3ApKSkge1xyXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihgd2hvbGUtc2NyaXB0IGNvbmZ1c2FibGU6ICR7Z3JvdXAuTn0vJHtnLk59YCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbn1cclxuXHJcbi8vIGFzc3VtcHRpb246IHVuaXF1ZS5zaXplID4gMFxyXG4vLyByZXR1cm5zIGxpc3Qgb2YgbWF0Y2hpbmcgZ3JvdXBzXHJcbmZ1bmN0aW9uIGRldGVybWluZV9ncm91cCh1bmlxdWUpIHtcclxuXHRsZXQgZ3JvdXBzID0gR1JPVVBTO1xyXG5cdGZvciAobGV0IGNwIG9mIHVuaXF1ZSkge1xyXG5cdFx0Ly8gbm90ZTogd2UgbmVlZCB0byBkb2RnZSBDTSB0aGF0IGFyZSB3aGl0ZWxpc3RlZFxyXG5cdFx0Ly8gYnV0IHRoYXQgY29kZSBpc24ndCBjdXJyZW50bHkgbmVjZXNzYXJ5XHJcblx0XHRsZXQgZ3MgPSBncm91cHMuZmlsdGVyKGcgPT4gZ3JvdXBfaGFzX2NwKGcsIGNwKSk7XHJcblx0XHRpZiAoIWdzLmxlbmd0aCkge1xyXG5cdFx0XHRpZiAoIUdST1VQUy5zb21lKGcgPT4gZ3JvdXBfaGFzX2NwKGcsIGNwKSkpIHsgXHJcblx0XHRcdFx0Ly8gdGhlIGNoYXJhY3RlciB3YXMgY29tcG9zZWQgb2YgdmFsaWQgcGFydHNcclxuXHRcdFx0XHQvLyBidXQgaXQncyBORkMgZm9ybSBpcyBpbnZhbGlkXHJcblx0XHRcdFx0Ly8gMjAyMzA3MTY6IGNoYW5nZSB0byBtb3JlIGV4YWN0IHN0YXRlbWVudCwgc2VlOiBFTlNOb3JtYWxpemUue2NzLGphdmF9XHJcblx0XHRcdFx0Ly8gbm90ZTogdGhpcyBkb2Vzbid0IGhhdmUgdG8gYmUgYSBjb21wb3NpdGlvblxyXG5cdFx0XHRcdC8vIDIwMjMwNzIwOiBjaGFuZ2UgdG8gZnVsbCBjaGVja1xyXG5cdFx0XHRcdHRocm93IGVycm9yX2Rpc2FsbG93ZWQoY3ApOyAvLyB0aGlzIHNob3VsZCBiZSByYXJlXHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Ly8gdGhlcmUgaXMgbm8gZ3JvdXAgdGhhdCBjb250YWlucyBhbGwgdGhlc2UgY2hhcmFjdGVyc1xyXG5cdFx0XHRcdC8vIHRocm93IHVzaW5nIHRoZSBoaWdoZXN0IHByaW9yaXR5IGdyb3VwIHRoYXQgbWF0Y2hlZFxyXG5cdFx0XHRcdC8vIGh0dHBzOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIzOS8jbWl4ZWRfc2NyaXB0X2NvbmZ1c2FibGVzXHJcblx0XHRcdFx0dGhyb3cgZXJyb3JfZ3JvdXBfbWVtYmVyKGdyb3Vwc1swXSwgY3ApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRncm91cHMgPSBncztcclxuXHRcdGlmIChncy5sZW5ndGggPT0gMSkgYnJlYWs7IC8vIHRoZXJlIGlzIG9ubHkgb25lIGdyb3VwIGxlZnRcclxuXHR9XHJcblx0Ly8gdGhlcmUgYXJlIGF0IGxlYXN0IDEgZ3JvdXAocykgd2l0aCBhbGwgb2YgdGhlc2UgY2hhcmFjdGVyc1xyXG5cdHJldHVybiBncm91cHM7XHJcbn1cclxuXHJcbi8vIHRocm93IG9uIGZpcnN0IGVycm9yXHJcbmZ1bmN0aW9uIGZsYXR0ZW4oc3BsaXQpIHtcclxuXHRyZXR1cm4gc3BsaXQubWFwKCh7aW5wdXQsIGVycm9yLCBvdXRwdXR9KSA9PiB7XHJcblx0XHRpZiAoZXJyb3IpIHtcclxuXHRcdFx0Ly8gZG9uJ3QgcHJpbnQgbGFiZWwgYWdhaW4gaWYganVzdCBhIHNpbmdsZSBsYWJlbFxyXG5cdFx0XHRsZXQgbXNnID0gZXJyb3IubWVzc2FnZTtcclxuXHRcdFx0Ly8gYmlkaV9xcSgpIG9ubHkgbmVjZXNzYXJ5IGlmIG1zZyBpcyBkaWdpdHNcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKHNwbGl0Lmxlbmd0aCA9PSAxID8gbXNnIDogYEludmFsaWQgbGFiZWwgJHtiaWRpX3FxKHNhZmVfc3RyX2Zyb21fY3BzKGlucHV0LCA2MykpfTogJHttc2d9YCk7IFxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHN0cl9mcm9tX2NwcyhvdXRwdXQpO1xyXG5cdH0pLmpvaW4oU1RPUF9DSCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGVycm9yX2Rpc2FsbG93ZWQoY3ApIHtcclxuXHQvLyBUT0RPOiBhZGQgY3AgdG8gZXJyb3I/XHJcblx0cmV0dXJuIG5ldyBFcnJvcihgZGlzYWxsb3dlZCBjaGFyYWN0ZXI6ICR7cXVvdGVkX2NwKGNwKX1gKTsgXHJcbn1cclxuZnVuY3Rpb24gZXJyb3JfZ3JvdXBfbWVtYmVyKGcsIGNwKSB7XHJcblx0bGV0IHF1b3RlZCA9IHF1b3RlZF9jcChjcCk7XHJcblx0bGV0IGdnID0gR1JPVVBTLmZpbmQoZyA9PiBnLlAuaGFzKGNwKSk7IC8vIG9ubHkgY2hlY2sgcHJpbWFyeVxyXG5cdGlmIChnZykge1xyXG5cdFx0cXVvdGVkID0gYCR7Z2cuTn0gJHtxdW90ZWR9YDtcclxuXHR9XHJcblx0cmV0dXJuIG5ldyBFcnJvcihgaWxsZWdhbCBtaXh0dXJlOiAke2cuTn0gKyAke3F1b3RlZH1gKTtcclxufVxyXG5mdW5jdGlvbiBlcnJvcl9wbGFjZW1lbnQod2hlcmUpIHtcclxuXHRyZXR1cm4gbmV3IEVycm9yKGBpbGxlZ2FsIHBsYWNlbWVudDogJHt3aGVyZX1gKTtcclxufVxyXG5cclxuLy8gYXNzdW1wdGlvbjogY3BzLmxlbmd0aCA+IDBcclxuLy8gYXNzdW1wdGlvbjogY3BzWzBdIGlzbid0IGEgQ01cclxuLy8gYXNzdW1wdGlvbjogdGhlIHByZXZpb3VzIGNoYXJhY3RlciBpc24ndCBhbiBlbW9qaVxyXG5mdW5jdGlvbiBjaGVja19ncm91cChnLCBjcHMpIHtcclxuXHRmb3IgKGxldCBjcCBvZiBjcHMpIHtcclxuXHRcdGlmICghZ3JvdXBfaGFzX2NwKGcsIGNwKSkge1xyXG5cdFx0XHQvLyBmb3Igd2hpdGVsaXN0ZWQgc2NyaXB0cywgdGhpcyB3aWxsIHRocm93IGlsbGVnYWwgbWl4dHVyZSBvbiBpbnZhbGlkIGNtLCBlZy4gXCJlezMwMH17MzAwfVwiXHJcblx0XHRcdC8vIGF0IHRoZSBtb21lbnQsIGl0J3MgdW5uZWNlc3NhcnkgdG8gaW50cm9kdWNlIGFuIGV4dHJhIGVycm9yIHR5cGVcclxuXHRcdFx0Ly8gdW50aWwgdGhlcmUgZXhpc3RzIGEgd2hpdGVsaXN0ZWQgbXVsdGktY2hhcmFjdGVyXHJcblx0XHRcdC8vICAgZWcuIGlmIChNIDwgMCAmJiBpc19jb21iaW5pbmdfbWFyayhjcCkpIHsgLi4uIH1cclxuXHRcdFx0Ly8gdGhlcmUgYXJlIDMgY2FzZXM6XHJcblx0XHRcdC8vICAgMS4gaWxsZWdhbCBjbSBmb3Igd3JvbmcgZ3JvdXAgPT4gbWl4dHVyZSBlcnJvclxyXG5cdFx0XHQvLyAgIDIuIGlsbGVnYWwgY20gZm9yIHNhbWUgZ3JvdXAgPT4gY20gZXJyb3JcclxuXHRcdFx0Ly8gICAgICAgcmVxdWlyZXMgc2V0IG9mIHdoaXRlbGlzdCBjbSBwZXIgZ3JvdXA6IFxyXG5cdFx0XHQvLyAgICAgICAgZWcuIG5ldyBTZXQoWy4uLmcuUCwgLi4uZy5RXS5mbGF0TWFwKG5mYykuZmlsdGVyKGNwID0+IENNLmhhcyhjcCkpKVxyXG5cdFx0XHQvLyAgIDMuIHdyb25nIGdyb3VwID0+IG1peHR1cmUgZXJyb3JcclxuXHRcdFx0dGhyb3cgZXJyb3JfZ3JvdXBfbWVtYmVyKGcsIGNwKTtcclxuXHRcdH1cclxuXHR9XHJcblx0Ly9pZiAoTSA+PSAwKSB7IC8vIHdlIGhhdmUgYSBrbm93biBmaXhlZCBjbSBjb3VudFxyXG5cdGlmIChnLk0pIHsgLy8gd2UgbmVlZCB0byBjaGVjayBmb3IgTlNNXHJcblx0XHRsZXQgZGVjb21wb3NlZCA9IG5mZChjcHMpO1xyXG5cdFx0Zm9yIChsZXQgaSA9IDEsIGUgPSBkZWNvbXBvc2VkLmxlbmd0aDsgaSA8IGU7IGkrKykgeyAvLyBzZWU6IGFzc3VtcHRpb25cclxuXHRcdFx0Ly8gMjAyMzAyMTA6IGJ1Z2ZpeDogdXNpbmcgY3BzIGluc3RlYWQgb2YgZGVjb21wb3NlZCBoL3QgQ2FyYm9uMjI1XHJcblx0XHRcdC8qXHJcblx0XHRcdGlmIChDTS5oYXMoZGVjb21wb3NlZFtpXSkpIHtcclxuXHRcdFx0XHRsZXQgaiA9IGkgKyAxO1xyXG5cdFx0XHRcdHdoaWxlIChqIDwgZSAmJiBDTS5oYXMoZGVjb21wb3NlZFtqXSkpIGorKztcclxuXHRcdFx0XHRpZiAoaiAtIGkgPiBNKSB7XHJcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYHRvbyBtYW55IGNvbWJpbmluZyBtYXJrczogJHtnLk59ICR7YmlkaV9xcShzdHJfZnJvbV9jcHMoZGVjb21wb3NlZC5zbGljZShpLTEsIGopKSl9ICgke2otaX0vJHtNfSlgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aSA9IGo7XHJcblx0XHRcdH1cclxuXHRcdFx0Ki9cclxuXHRcdFx0Ly8gMjAyMzAyMTc6IHN3aXRjaCB0byBOU00gY291bnRpbmdcclxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjM5LyNPcHRpb25hbF9EZXRlY3Rpb25cclxuXHRcdFx0aWYgKE5TTS5oYXMoZGVjb21wb3NlZFtpXSkpIHtcclxuXHRcdFx0XHRsZXQgaiA9IGkgKyAxO1xyXG5cdFx0XHRcdGZvciAobGV0IGNwOyBqIDwgZSAmJiBOU00uaGFzKGNwID0gZGVjb21wb3NlZFtqXSk7IGorKykge1xyXG5cdFx0XHRcdFx0Ly8gYS4gRm9yYmlkIHNlcXVlbmNlcyBvZiB0aGUgc2FtZSBub25zcGFjaW5nIG1hcmsuXHJcblx0XHRcdFx0XHRmb3IgKGxldCBrID0gaTsgayA8IGo7IGsrKykgeyAvLyBPKG5eMikgYnV0IG4gPCAxMDBcclxuXHRcdFx0XHRcdFx0aWYgKGRlY29tcG9zZWRba10gPT0gY3ApIHtcclxuXHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYGR1cGxpY2F0ZSBub24tc3BhY2luZyBtYXJrczogJHtxdW90ZWRfY3AoY3ApfWApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdC8vIHBhcnNlIHRvIGVuZCBzbyB3ZSBoYXZlIGZ1bGwgbnNtIGNvdW50XHJcblx0XHRcdFx0Ly8gYi4gRm9yYmlkIHNlcXVlbmNlcyBvZiBtb3JlIHRoYW4gNCBub25zcGFjaW5nIG1hcmtzIChnYz1NbiBvciBnYz1NZSkuXHJcblx0XHRcdFx0aWYgKGogLSBpID4gTlNNX01BWCkge1xyXG5cdFx0XHRcdFx0Ly8gbm90ZTogdGhpcyBzbGljZSBzdGFydHMgd2l0aCBhIGJhc2UgY2hhciBvciBzcGFjaW5nLW1hcmsgY21cclxuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihgZXhjZXNzaXZlIG5vbi1zcGFjaW5nIG1hcmtzOiAke2JpZGlfcXEoc2FmZV9zdHJfZnJvbV9jcHMoZGVjb21wb3NlZC5zbGljZShpLTEsIGopKSl9ICgke2otaX0vJHtOU01fTUFYfSlgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aSA9IGo7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblx0Ly8gKioqIHRoaXMgY29kZSBjdXJyZW50bHkgaXNuJ3QgbmVlZGVkICoqKlxyXG5cdC8qXHJcblx0bGV0IGNtX3doaXRlbGlzdCA9IE0gaW5zdGFuY2VvZiBNYXA7XHJcblx0Zm9yIChsZXQgaSA9IDAsIGUgPSBjcHMubGVuZ3RoOyBpIDwgZTsgKSB7XHJcblx0XHRsZXQgY3AgPSBjcHNbaSsrXTtcclxuXHRcdGxldCBzZXFzID0gY21fd2hpdGVsaXN0ICYmIE0uZ2V0KGNwKTtcclxuXHRcdGlmIChzZXFzKSB7IFxyXG5cdFx0XHQvLyBsaXN0IG9mIGNvZGVwb2ludHMgdGhhdCBjYW4gZm9sbG93XHJcblx0XHRcdC8vIGlmIHRoaXMgZXhpc3RzLCB0aGlzIHdpbGwgYWx3YXlzIGJlIDErXHJcblx0XHRcdGxldCBqID0gaTtcclxuXHRcdFx0d2hpbGUgKGogPCBlICYmIENNLmhhcyhjcHNbal0pKSBqKys7XHJcblx0XHRcdGxldCBjbXMgPSBjcHMuc2xpY2UoaSwgaik7XHJcblx0XHRcdGxldCBtYXRjaCA9IHNlcXMuZmluZChzZXEgPT4gIWNvbXBhcmVfYXJyYXlzKHNlcSwgY21zKSk7XHJcblx0XHRcdGlmICghbWF0Y2gpIHRocm93IG5ldyBFcnJvcihgZGlzYWxsb3dlZCBjb21iaW5pbmcgbWFyayBzZXF1ZW5jZTogXCIke3NhZmVfc3RyX2Zyb21fY3BzKFtjcCwgLi4uY21zXSl9XCJgKTtcclxuXHRcdFx0aSA9IGo7XHJcblx0XHR9IGVsc2UgaWYgKCFWLmhhcyhjcCkpIHtcclxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjM5LyNtaXhlZF9zY3JpcHRfY29uZnVzYWJsZXNcclxuXHRcdFx0bGV0IHF1b3RlZCA9IHF1b3RlZF9jcChjcCk7XHJcblx0XHRcdGZvciAobGV0IGNwIG9mIGNwcykge1xyXG5cdFx0XHRcdGxldCB1ID0gVU5JUVVFLmdldChjcCk7XHJcblx0XHRcdFx0aWYgKHUgJiYgdSAhPT0gZykge1xyXG5cdFx0XHRcdFx0Ly8gaWYgYm90aCBzY3JpcHRzIGFyZSByZXN0cmljdGVkIHRoaXMgZXJyb3IgaXMgY29uZnVzaW5nXHJcblx0XHRcdFx0XHQvLyBiZWNhdXNlIHdlIGRvbid0IGRpZmZlcmVudGlhdGUgUmVzdHJpY3RlZEEgZnJvbSBSZXN0cmljdGVkQiBcclxuXHRcdFx0XHRcdGlmICghdS5SKSBxdW90ZWQgPSBgJHtxdW90ZWR9IGlzICR7dS5OfWA7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBkaXNhbGxvd2VkICR7Zy5OfSBjaGFyYWN0ZXI6ICR7cXVvdGVkfWApO1xyXG5cdFx0XHQvL3Rocm93IG5ldyBFcnJvcihgZGlzYWxsb3dlZCBjaGFyYWN0ZXI6ICR7cXVvdGVkfSAoZXhwZWN0ZWQgJHtnLk59KWApO1xyXG5cdFx0XHQvL3Rocm93IG5ldyBFcnJvcihgJHtnLk59IGRvZXMgbm90IGFsbG93OiAke3F1b3RlZH1gKTtcclxuXHRcdH1cclxuXHR9XHJcblx0aWYgKCFjbV93aGl0ZWxpc3QpIHtcclxuXHRcdGxldCBkZWNvbXBvc2VkID0gbmZkKGNwcyk7XHJcblx0XHRmb3IgKGxldCBpID0gMSwgZSA9IGRlY29tcG9zZWQubGVuZ3RoOyBpIDwgZTsgaSsrKSB7IC8vIHdlIGtub3cgaXQgY2FuJ3QgYmUgY20gbGVhZGluZ1xyXG5cdFx0XHRpZiAoQ00uaGFzKGRlY29tcG9zZWRbaV0pKSB7XHJcblx0XHRcdFx0bGV0IGogPSBpICsgMTtcclxuXHRcdFx0XHR3aGlsZSAoaiA8IGUgJiYgQ00uaGFzKGRlY29tcG9zZWRbal0pKSBqKys7XHJcblx0XHRcdFx0aWYgKGogLSBpID4gTSkge1xyXG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGB0b28gbWFueSBjb21iaW5pbmcgbWFya3M6IFwiJHtzdHJfZnJvbV9jcHMoZGVjb21wb3NlZC5zbGljZShpLTEsIGopKX1cIiAoJHtqLWl9LyR7TX0pYCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGkgPSBqO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cdCovXHJcbn1cclxuXHJcbi8vIGdpdmVuIGEgbGlzdCBvZiBjb2RlcG9pbnRzXHJcbi8vIHJldHVybnMgYSBsaXN0IG9mIGxpc3RzLCB3aGVyZSBlbW9qaSBhcmUgYSBmdWxseS1xdWFsaWZpZWQgKGFzIEFycmF5IHN1YmNsYXNzKVxyXG4vLyBlZy4gZXhwbG9kZV9jcChcImFiY/CfkqlkXCIpID0+IFtbNjEsIDYyLCA2M10sIEVtb2ppWzFGNEE5LCBGRTBGXSwgWzY0XV1cclxuLy8gMjAyMzA4MTg6IHJlbmFtZSBmb3IgJ3Byb2Nlc3MnIG5hbWUgY29sbGlzaW9uIGgvdCBKYXZhcm9tZVxyXG4vLyBodHRwczovL2dpdGh1Yi5jb20vYWRyYWZmeS9lbnMtbm9ybWFsaXplLmpzL2lzc3Vlcy8yM1xyXG5mdW5jdGlvbiB0b2tlbnNfZnJvbV9zdHIoaW5wdXQsIG5mLCBlZikge1xyXG5cdGxldCByZXQgPSBbXTtcclxuXHRsZXQgY2hhcnMgPSBbXTtcclxuXHRpbnB1dCA9IGlucHV0LnNsaWNlKCkucmV2ZXJzZSgpOyAvLyBmbGlwIHNvIHdlIGNhbiBwb3BcclxuXHR3aGlsZSAoaW5wdXQubGVuZ3RoKSB7XHJcblx0XHRsZXQgZW1vamkgPSBjb25zdW1lX2Vtb2ppX3JldmVyc2VkKGlucHV0KTtcclxuXHRcdGlmIChlbW9qaSkge1xyXG5cdFx0XHRpZiAoY2hhcnMubGVuZ3RoKSB7XHJcblx0XHRcdFx0cmV0LnB1c2gobmYoY2hhcnMpKTtcclxuXHRcdFx0XHRjaGFycyA9IFtdO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldC5wdXNoKGVmKGVtb2ppKSk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRsZXQgY3AgPSBpbnB1dC5wb3AoKTtcclxuXHRcdFx0aWYgKFZBTElELmhhcyhjcCkpIHtcclxuXHRcdFx0XHRjaGFycy5wdXNoKGNwKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRsZXQgY3BzID0gTUFQUEVELmdldChjcCk7XHJcblx0XHRcdFx0aWYgKGNwcykge1xyXG5cdFx0XHRcdFx0Y2hhcnMucHVzaCguLi5jcHMpOyAvLyBsZXNzIHRoYW4gMTAgZWxlbWVudHNcclxuXHRcdFx0XHR9IGVsc2UgaWYgKCFJR05PUkVELmhhcyhjcCkpIHtcclxuXHRcdFx0XHRcdC8vIDIwMjMwOTEyOiB1bmljb2RlIDE1LjEgY2hhbmdlZCB0aGUgb3JkZXIgb2YgcHJvY2Vzc2luZyBzdWNoIHRoYXRcclxuXHRcdFx0XHRcdC8vIGRpc2FsbG93ZWQgcGFydHMgYXJlIG9ubHkgcmVqZWN0ZWQgYWZ0ZXIgTkZDXHJcblx0XHRcdFx0XHQvLyBodHRwczovL3VuaWNvZGUub3JnL3JlcG9ydHMvdHI0Ni8jVmFsaWRpdHlfQ3JpdGVyaWFcclxuXHRcdFx0XHRcdC8vIHRoaXMgZG9lc24ndCBpbXBhY3Qgbm9ybWFsaXphdGlvbiBhcyBvZiB0b2RheVxyXG5cdFx0XHRcdFx0Ly8gdGVjaG5pY2FsbHksIHRoaXMgZXJyb3IgY2FuIGJlIHJlbW92ZWQgYXMgdGhlIGdyb3VwIGxvZ2ljIHdpbGwgYXBwbHkgc2ltaWxhciBsb2dpY1xyXG5cdFx0XHRcdFx0Ly8gaG93ZXZlciB0aGUgZXJyb3IgdHlwZSBtaWdodCBiZSBsZXNzIGNsZWFyXHJcblx0XHRcdFx0XHR0aHJvdyBlcnJvcl9kaXNhbGxvd2VkKGNwKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblx0aWYgKGNoYXJzLmxlbmd0aCkge1xyXG5cdFx0cmV0LnB1c2gobmYoY2hhcnMpKTtcclxuXHR9XHJcblx0cmV0dXJuIHJldDtcclxufVxyXG5cclxuZnVuY3Rpb24gZmlsdGVyX2ZlMGYoY3BzKSB7XHJcblx0cmV0dXJuIGNwcy5maWx0ZXIoY3AgPT4gY3AgIT0gRkUwRik7XHJcbn1cclxuXHJcbi8vIGdpdmVuIGFycmF5IG9mIGNvZGVwb2ludHNcclxuLy8gcmV0dXJucyB0aGUgbG9uZ2VzdCB2YWxpZCBlbW9qaSBzZXF1ZW5jZSAob3IgdW5kZWZpbmVkIGlmIG5vIG1hdGNoKVxyXG4vLyAqTVVUQVRFUyogdGhlIHN1cHBsaWVkIGFycmF5XHJcbi8vIGRpc2FsbG93cyBpbnRlcmxlYXZlZCBpZ25vcmVkIGNoYXJhY3RlcnNcclxuLy8gZmlsbHMgKG9wdGlvbmFsKSBlYXRlbiBhcnJheSB3aXRoIG1hdGNoZWQgY29kZXBvaW50c1xyXG5mdW5jdGlvbiBjb25zdW1lX2Vtb2ppX3JldmVyc2VkKGNwcywgZWF0ZW4pIHtcclxuXHRsZXQgbm9kZSA9IEVNT0pJX1JPT1Q7XHJcblx0bGV0IGVtb2ppO1xyXG5cdGxldCBwb3MgPSBjcHMubGVuZ3RoO1xyXG5cdHdoaWxlIChwb3MpIHtcclxuXHRcdG5vZGUgPSBub2RlLmdldChjcHNbLS1wb3NdKTtcclxuXHRcdGlmICghbm9kZSkgYnJlYWs7XHJcblx0XHRsZXQge1Z9ID0gbm9kZTtcclxuXHRcdGlmIChWKSB7IC8vIHRoaXMgaXMgYSB2YWxpZCBlbW9qaSAoc28gZmFyKVxyXG5cdFx0XHRlbW9qaSA9IFY7XHJcblx0XHRcdGlmIChlYXRlbikgZWF0ZW4ucHVzaCguLi5jcHMuc2xpY2UocG9zKS5yZXZlcnNlKCkpOyAvLyAob3B0aW9uYWwpIGNvcHkgaW5wdXQsIHVzZWQgZm9yIGVuc190b2tlbml6ZSgpXHJcblx0XHRcdGNwcy5sZW5ndGggPSBwb3M7IC8vIHRydW5jYXRlXHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiBlbW9qaTtcclxufVxyXG5cclxuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbi8vIHRva2VuaXplciBcclxuXHJcbmNvbnN0IFRZX1ZBTElEID0gJ3ZhbGlkJztcclxuY29uc3QgVFlfTUFQUEVEID0gJ21hcHBlZCc7XHJcbmNvbnN0IFRZX0lHTk9SRUQgPSAnaWdub3JlZCc7XHJcbmNvbnN0IFRZX0RJU0FMTE9XRUQgPSAnZGlzYWxsb3dlZCc7XHJcbmNvbnN0IFRZX0VNT0pJID0gJ2Vtb2ppJztcclxuY29uc3QgVFlfTkZDID0gJ25mYyc7XHJcbmNvbnN0IFRZX1NUT1AgPSAnc3RvcCc7XHJcblxyXG5mdW5jdGlvbiBlbnNfdG9rZW5pemUobmFtZSwge1xyXG5cdG5mID0gdHJ1ZSwgLy8gY29sbGFwc2UgdW5ub3JtYWxpemVkIHJ1bnMgaW50byBhIHNpbmdsZSB0b2tlblxyXG59ID0ge30pIHtcclxuXHRpbml0KCk7XHJcblx0bGV0IGlucHV0ID0gZXhwbG9kZV9jcChuYW1lKS5yZXZlcnNlKCk7XHJcblx0bGV0IGVhdGVuID0gW107XHJcblx0bGV0IHRva2VucyA9IFtdO1xyXG5cdHdoaWxlIChpbnB1dC5sZW5ndGgpIHtcclxuXHRcdGxldCBlbW9qaSA9IGNvbnN1bWVfZW1vamlfcmV2ZXJzZWQoaW5wdXQsIGVhdGVuKTtcclxuXHRcdGlmIChlbW9qaSkge1xyXG5cdFx0XHR0b2tlbnMucHVzaCh7XHJcblx0XHRcdFx0dHlwZTogVFlfRU1PSkksXHJcblx0XHRcdFx0ZW1vamk6IGVtb2ppLnNsaWNlKCksIC8vIGNvcHkgZW1vamlcclxuXHRcdFx0XHRpbnB1dDogZWF0ZW4sXHJcblx0XHRcdFx0Y3BzOiBmaWx0ZXJfZmUwZihlbW9qaSlcclxuXHRcdFx0fSk7XHJcblx0XHRcdGVhdGVuID0gW107IC8vIHJlc2V0IGJ1ZmZlclxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0bGV0IGNwID0gaW5wdXQucG9wKCk7XHJcblx0XHRcdGlmIChjcCA9PSBTVE9QKSB7XHJcblx0XHRcdFx0dG9rZW5zLnB1c2goe3R5cGU6IFRZX1NUT1AsIGNwfSk7XHJcblx0XHRcdH0gZWxzZSBpZiAoVkFMSUQuaGFzKGNwKSkge1xyXG5cdFx0XHRcdHRva2Vucy5wdXNoKHt0eXBlOiBUWV9WQUxJRCwgY3BzOiBbY3BdfSk7XHJcblx0XHRcdH0gZWxzZSBpZiAoSUdOT1JFRC5oYXMoY3ApKSB7XHJcblx0XHRcdFx0dG9rZW5zLnB1c2goe3R5cGU6IFRZX0lHTk9SRUQsIGNwfSk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0bGV0IGNwcyA9IE1BUFBFRC5nZXQoY3ApO1xyXG5cdFx0XHRcdGlmIChjcHMpIHtcclxuXHRcdFx0XHRcdHRva2Vucy5wdXNoKHt0eXBlOiBUWV9NQVBQRUQsIGNwLCBjcHM6IGNwcy5zbGljZSgpfSk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHRva2Vucy5wdXNoKHt0eXBlOiBUWV9ESVNBTExPV0VELCBjcH0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHRpZiAobmYpIHtcclxuXHRcdGZvciAobGV0IGkgPSAwLCBzdGFydCA9IC0xOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdGxldCB0b2tlbiA9IHRva2Vuc1tpXTtcclxuXHRcdFx0aWYgKGlzX3ZhbGlkX29yX21hcHBlZCh0b2tlbi50eXBlKSkge1xyXG5cdFx0XHRcdGlmIChyZXF1aXJlc19jaGVjayh0b2tlbi5jcHMpKSB7IC8vIG5vcm1hbGl6YXRpb24gbWlnaHQgYmUgbmVlZGVkXHJcblx0XHRcdFx0XHRsZXQgZW5kID0gaSArIDE7XHJcblx0XHRcdFx0XHRmb3IgKGxldCBwb3MgPSBlbmQ7IHBvcyA8IHRva2Vucy5sZW5ndGg7IHBvcysrKSB7IC8vIGZpbmQgYWRqYWNlbnQgdGV4dFxyXG5cdFx0XHRcdFx0XHRsZXQge3R5cGUsIGNwc30gPSB0b2tlbnNbcG9zXTtcclxuXHRcdFx0XHRcdFx0aWYgKGlzX3ZhbGlkX29yX21hcHBlZCh0eXBlKSkge1xyXG5cdFx0XHRcdFx0XHRcdGlmICghcmVxdWlyZXNfY2hlY2soY3BzKSkgYnJlYWs7XHJcblx0XHRcdFx0XHRcdFx0ZW5kID0gcG9zICsgMTtcclxuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICh0eXBlICE9PSBUWV9JR05PUkVEKSB7IC8vIHx8IHR5cGUgIT09IFRZX0RJU0FMTE9XRUQpIHsgXHJcblx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGlmIChzdGFydCA8IDApIHN0YXJ0ID0gaTtcclxuXHRcdFx0XHRcdGxldCBzbGljZSA9IHRva2Vucy5zbGljZShzdGFydCwgZW5kKTtcclxuXHRcdFx0XHRcdGxldCBjcHMwID0gc2xpY2UuZmxhdE1hcCh4ID0+IGlzX3ZhbGlkX29yX21hcHBlZCh4LnR5cGUpID8geC5jcHMgOiBbXSk7IC8vIHN0cmlwIGp1bmsgdG9rZW5zXHJcblx0XHRcdFx0XHRsZXQgY3BzID0gbmZjKGNwczApO1xyXG5cdFx0XHRcdFx0aWYgKGNvbXBhcmVfYXJyYXlzKGNwcywgY3BzMCkpIHsgLy8gYnVuZGxlIGludG8gYW4gbmZjIHRva2VuXHJcblx0XHRcdFx0XHRcdHRva2Vucy5zcGxpY2Uoc3RhcnQsIGVuZCAtIHN0YXJ0LCB7XHJcblx0XHRcdFx0XHRcdFx0dHlwZTogVFlfTkZDLCBcclxuXHRcdFx0XHRcdFx0XHRpbnB1dDogY3BzMCwgLy8gdGhlcmUgYXJlIDMgc3RhdGVzOiB0b2tlbnMwID09KHByb2Nlc3MpPT4gaW5wdXQgPT0obmZjKT0+IHRva2Vucy9jcHNcclxuXHRcdFx0XHRcdFx0XHRjcHMsIFxyXG5cdFx0XHRcdFx0XHRcdHRva2VuczA6IGNvbGxhcHNlX3ZhbGlkX3Rva2VucyhzbGljZSksXHJcblx0XHRcdFx0XHRcdFx0dG9rZW5zOiBlbnNfdG9rZW5pemUoc3RyX2Zyb21fY3BzKGNwcyksIHtuZjogZmFsc2V9KVxyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdFx0aSA9IHN0YXJ0O1xyXG5cdFx0XHRcdFx0fSBlbHNlIHsgXHJcblx0XHRcdFx0XHRcdGkgPSBlbmQgLSAxOyAvLyBza2lwIHRvIGVuZCBvZiBzbGljZVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0c3RhcnQgPSAtMTsgLy8gcmVzZXRcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0c3RhcnQgPSBpOyAvLyByZW1lbWJlciBsYXN0XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2UgaWYgKHRva2VuLnR5cGUgIT09IFRZX0lHTk9SRUQpIHsgLy8gMjAyMjEwMjQ6IGlzIHRoaXMgY29ycmVjdD9cclxuXHRcdFx0XHRzdGFydCA9IC0xOyAvLyByZXNldFxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiBjb2xsYXBzZV92YWxpZF90b2tlbnModG9rZW5zKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaXNfdmFsaWRfb3JfbWFwcGVkKHR5cGUpIHtcclxuXHRyZXR1cm4gdHlwZSA9PSBUWV9WQUxJRCB8fCB0eXBlID09IFRZX01BUFBFRDtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVxdWlyZXNfY2hlY2soY3BzKSB7XHJcblx0cmV0dXJuIGNwcy5zb21lKGNwID0+IE5GQ19DSEVDSy5oYXMoY3ApKTtcclxufVxyXG5cclxuZnVuY3Rpb24gY29sbGFwc2VfdmFsaWRfdG9rZW5zKHRva2Vucykge1xyXG5cdGZvciAobGV0IGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRpZiAodG9rZW5zW2ldLnR5cGUgPT0gVFlfVkFMSUQpIHtcclxuXHRcdFx0bGV0IGogPSBpICsgMTtcclxuXHRcdFx0d2hpbGUgKGogPCB0b2tlbnMubGVuZ3RoICYmIHRva2Vuc1tqXS50eXBlID09IFRZX1ZBTElEKSBqKys7XHJcblx0XHRcdHRva2Vucy5zcGxpY2UoaSwgaiAtIGksIHt0eXBlOiBUWV9WQUxJRCwgY3BzOiB0b2tlbnMuc2xpY2UoaSwgaikuZmxhdE1hcCh4ID0+IHguY3BzKX0pO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRyZXR1cm4gdG9rZW5zO1xyXG59XHJcblxyXG5leHBvcnQgeyBlbnNfYmVhdXRpZnksIGVuc19lbW9qaSwgZW5zX25vcm1hbGl6ZSwgZW5zX25vcm1hbGl6ZV9mcmFnbWVudCwgZW5zX3NwbGl0LCBlbnNfdG9rZW5pemUsIGlzX2NvbWJpbmluZ19tYXJrLCBuZmMsIG5mZCwgc2FmZV9zdHJfZnJvbV9jcHMsIHNob3VsZF9lc2NhcGUgfTtcclxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/@adraffy/ens-normalize/dist/index.mjs\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/@noble/curves/esm/_shortw_utils.js":
/*!*********************************************************!*\
  !*** ./node_modules/@noble/curves/esm/_shortw_utils.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createCurve: () => (/* binding */ createCurve),\n/* harmony export */   getHash: () => (/* binding */ getHash)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_hmac__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/hmac */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/hmac.js\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/hashes/utils */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/utils.js\");\n/* harmony import */ var _abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./abstract/weierstrass.js */ \"(pages-dir-browser)/./node_modules/@noble/curves/esm/abstract/weierstrass.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\n\r\n\r\n\r\n// connects noble-curves to noble-hashes\r\nfunction getHash(hash) {\r\n    return {\r\n        hash,\r\n        hmac: (key, ...msgs) => (0,_noble_hashes_hmac__WEBPACK_IMPORTED_MODULE_0__.hmac)(hash, key, (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.concatBytes)(...msgs)),\r\n        randomBytes: _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.randomBytes,\r\n    };\r\n}\r\nfunction createCurve(curveDef, defHash) {\r\n    const create = (hash) => (0,_abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_2__.weierstrass)({ ...curveDef, ...getHash(hash) });\r\n    return Object.freeze({ ...create(defHash), create });\r\n}\r\n//# sourceMappingURL=_shortw_utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Abm9ibGUvY3VydmVzL2VzbS9fc2hvcnR3X3V0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDMEM7QUFDcUI7QUFDUDtBQUN4RDtBQUNPO0FBQ1A7QUFDQTtBQUNBLGdDQUFnQyx3REFBSSxZQUFZLGdFQUFXO0FBQzNELG1CQUFtQjtBQUNuQjtBQUNBO0FBQ087QUFDUCw2QkFBNkIscUVBQVcsR0FBRywrQkFBK0I7QUFDMUUsMkJBQTJCLDRCQUE0QjtBQUN2RDtBQUNBIiwic291cmNlcyI6WyJEOlxcRG9fYW4yXFxsZW5kaHViX3YyXFxsZW5kaHViLWZyb250ZW5kLW5leHRqc1xcbm9kZV9tb2R1bGVzXFxAbm9ibGVcXGN1cnZlc1xcZXNtXFxfc2hvcnR3X3V0aWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBub2JsZS1jdXJ2ZXMgLSBNSVQgTGljZW5zZSAoYykgMjAyMiBQYXVsIE1pbGxlciAocGF1bG1pbGxyLmNvbSkgKi9cclxuaW1wb3J0IHsgaG1hYyB9IGZyb20gJ0Bub2JsZS9oYXNoZXMvaG1hYyc7XHJcbmltcG9ydCB7IGNvbmNhdEJ5dGVzLCByYW5kb21CeXRlcyB9IGZyb20gJ0Bub2JsZS9oYXNoZXMvdXRpbHMnO1xyXG5pbXBvcnQgeyB3ZWllcnN0cmFzcyB9IGZyb20gJy4vYWJzdHJhY3Qvd2VpZXJzdHJhc3MuanMnO1xyXG4vLyBjb25uZWN0cyBub2JsZS1jdXJ2ZXMgdG8gbm9ibGUtaGFzaGVzXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRIYXNoKGhhc2gpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgaGFzaCxcclxuICAgICAgICBobWFjOiAoa2V5LCAuLi5tc2dzKSA9PiBobWFjKGhhc2gsIGtleSwgY29uY2F0Qnl0ZXMoLi4ubXNncykpLFxyXG4gICAgICAgIHJhbmRvbUJ5dGVzLFxyXG4gICAgfTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ3VydmUoY3VydmVEZWYsIGRlZkhhc2gpIHtcclxuICAgIGNvbnN0IGNyZWF0ZSA9IChoYXNoKSA9PiB3ZWllcnN0cmFzcyh7IC4uLmN1cnZlRGVmLCAuLi5nZXRIYXNoKGhhc2gpIH0pO1xyXG4gICAgcmV0dXJuIE9iamVjdC5mcmVlemUoeyAuLi5jcmVhdGUoZGVmSGFzaCksIGNyZWF0ZSB9KTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1fc2hvcnR3X3V0aWxzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/@noble/curves/esm/_shortw_utils.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/@noble/curves/esm/abstract/curve.js":
/*!**********************************************************!*\
  !*** ./node_modules/@noble/curves/esm/abstract/curve.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   validateBasic: () => (/* binding */ validateBasic),\n/* harmony export */   wNAF: () => (/* binding */ wNAF)\n/* harmony export */ });\n/* harmony import */ var _modular_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modular.js */ \"(pages-dir-browser)/./node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(pages-dir-browser)/./node_modules/@noble/curves/esm/abstract/utils.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\n// Abelian group utilities\r\n\r\n\r\nconst _0n = BigInt(0);\r\nconst _1n = BigInt(1);\r\n// Elliptic curve multiplication of Point by scalar. Fragile.\r\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\r\n// Creates precomputation tables for fast multiplication:\r\n// - private scalar is split by fixed size windows of W bits\r\n// - every window point is collected from window's table & added to accumulator\r\n// - since windows are different, same point inside tables won't be accessed more than once per calc\r\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\r\n// - +1 window is neccessary for wNAF\r\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\r\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\r\n// windows to be in different memory locations\r\nfunction wNAF(c, bits) {\r\n    const constTimeNegate = (condition, item) => {\r\n        const neg = item.negate();\r\n        return condition ? neg : item;\r\n    };\r\n    const opts = (W) => {\r\n        const windows = Math.ceil(bits / W) + 1; // +1, because\r\n        const windowSize = 2 ** (W - 1); // -1 because we skip zero\r\n        return { windows, windowSize };\r\n    };\r\n    return {\r\n        constTimeNegate,\r\n        // non-const time multiplication ladder\r\n        unsafeLadder(elm, n) {\r\n            let p = c.ZERO;\r\n            let d = elm;\r\n            while (n > _0n) {\r\n                if (n & _1n)\r\n                    p = p.add(d);\r\n                d = d.double();\r\n                n >>= _1n;\r\n            }\r\n            return p;\r\n        },\r\n        /**\r\n         * Creates a wNAF precomputation window. Used for caching.\r\n         * Default window size is set by `utils.precompute()` and is equal to 8.\r\n         * Number of precomputed points depends on the curve size:\r\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\r\n         * - 𝑊 is the window size\r\n         * - 𝑛 is the bitlength of the curve order.\r\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\r\n         * @returns precomputed point tables flattened to a single array\r\n         */\r\n        precomputeWindow(elm, W) {\r\n            const { windows, windowSize } = opts(W);\r\n            const points = [];\r\n            let p = elm;\r\n            let base = p;\r\n            for (let window = 0; window < windows; window++) {\r\n                base = p;\r\n                points.push(base);\r\n                // =1, because we skip zero\r\n                for (let i = 1; i < windowSize; i++) {\r\n                    base = base.add(p);\r\n                    points.push(base);\r\n                }\r\n                p = base.double();\r\n            }\r\n            return points;\r\n        },\r\n        /**\r\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\r\n         * @param W window size\r\n         * @param precomputes precomputed tables\r\n         * @param n scalar (we don't check here, but should be less than curve order)\r\n         * @returns real and fake (for const-time) points\r\n         */\r\n        wNAF(W, precomputes, n) {\r\n            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\r\n            // But need to carefully remove other checks before wNAF. ORDER == bits here\r\n            const { windows, windowSize } = opts(W);\r\n            let p = c.ZERO;\r\n            let f = c.BASE;\r\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\r\n            const maxNumber = 2 ** W;\r\n            const shiftBy = BigInt(W);\r\n            for (let window = 0; window < windows; window++) {\r\n                const offset = window * windowSize;\r\n                // Extract W bits.\r\n                let wbits = Number(n & mask);\r\n                // Shift number by W bits.\r\n                n >>= shiftBy;\r\n                // If the bits are bigger than max size, we'll split those.\r\n                // +224 => 256 - 32\r\n                if (wbits > windowSize) {\r\n                    wbits -= maxNumber;\r\n                    n += _1n;\r\n                }\r\n                // This code was first written with assumption that 'f' and 'p' will never be infinity point:\r\n                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\r\n                // there is negate now: it is possible that negated element from low value\r\n                // would be the same as high element, which will create carry into next window.\r\n                // It's not obvious how this can fail, but still worth investigating later.\r\n                // Check if we're onto Zero point.\r\n                // Add random point inside current window to f.\r\n                const offset1 = offset;\r\n                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\r\n                const cond1 = window % 2 !== 0;\r\n                const cond2 = wbits < 0;\r\n                if (wbits === 0) {\r\n                    // The most important part for const-time getPublicKey\r\n                    f = f.add(constTimeNegate(cond1, precomputes[offset1]));\r\n                }\r\n                else {\r\n                    p = p.add(constTimeNegate(cond2, precomputes[offset2]));\r\n                }\r\n            }\r\n            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\r\n            // Even if the variable is still unused, there are some checks which will\r\n            // throw an exception, so compiler needs to prove they won't happen, which is hard.\r\n            // At this point there is a way to F be infinity-point even if p is not,\r\n            // which makes it less const-time: around 1 bigint multiply.\r\n            return { p, f };\r\n        },\r\n        wNAFCached(P, precomputesMap, n, transform) {\r\n            // @ts-ignore\r\n            const W = P._WINDOW_SIZE || 1;\r\n            // Calculate precomputes on a first run, reuse them after\r\n            let comp = precomputesMap.get(P);\r\n            if (!comp) {\r\n                comp = this.precomputeWindow(P, W);\r\n                if (W !== 1) {\r\n                    precomputesMap.set(P, transform(comp));\r\n                }\r\n            }\r\n            return this.wNAF(W, comp, n);\r\n        },\r\n    };\r\n}\r\nfunction validateBasic(curve) {\r\n    (0,_modular_js__WEBPACK_IMPORTED_MODULE_0__.validateField)(curve.Fp);\r\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.validateObject)(curve, {\r\n        n: 'bigint',\r\n        h: 'bigint',\r\n        Gx: 'field',\r\n        Gy: 'field',\r\n    }, {\r\n        nBitLength: 'isSafeInteger',\r\n        nByteLength: 'isSafeInteger',\r\n    });\r\n    // Set defaults\r\n    return Object.freeze({\r\n        ...(0,_modular_js__WEBPACK_IMPORTED_MODULE_0__.nLength)(curve.n, curve.nBitLength),\r\n        ...curve,\r\n        ...{ p: curve.Fp.ORDER },\r\n    });\r\n}\r\n//# sourceMappingURL=curve.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/@noble/curves/esm/abstract/curve.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/@noble/curves/esm/abstract/hash-to-curve.js":
/*!******************************************************************!*\
  !*** ./node_modules/@noble/curves/esm/abstract/hash-to-curve.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createHasher: () => (/* binding */ createHasher),\n/* harmony export */   expand_message_xmd: () => (/* binding */ expand_message_xmd),\n/* harmony export */   expand_message_xof: () => (/* binding */ expand_message_xof),\n/* harmony export */   hash_to_field: () => (/* binding */ hash_to_field),\n/* harmony export */   isogenyMap: () => (/* binding */ isogenyMap)\n/* harmony export */ });\n/* harmony import */ var _modular_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modular.js */ \"(pages-dir-browser)/./node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(pages-dir-browser)/./node_modules/@noble/curves/esm/abstract/utils.js\");\n\r\n\r\nfunction validateDST(dst) {\r\n    if (dst instanceof Uint8Array)\r\n        return dst;\r\n    if (typeof dst === 'string')\r\n        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.utf8ToBytes)(dst);\r\n    throw new Error('DST must be Uint8Array or string');\r\n}\r\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\r\nconst os2ip = _utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE;\r\n// Integer to Octet Stream (numberToBytesBE)\r\nfunction i2osp(value, length) {\r\n    if (value < 0 || value >= 1 << (8 * length)) {\r\n        throw new Error(`bad I2OSP call: value=${value} length=${length}`);\r\n    }\r\n    const res = Array.from({ length }).fill(0);\r\n    for (let i = length - 1; i >= 0; i--) {\r\n        res[i] = value & 0xff;\r\n        value >>>= 8;\r\n    }\r\n    return new Uint8Array(res);\r\n}\r\nfunction strxor(a, b) {\r\n    const arr = new Uint8Array(a.length);\r\n    for (let i = 0; i < a.length; i++) {\r\n        arr[i] = a[i] ^ b[i];\r\n    }\r\n    return arr;\r\n}\r\nfunction isBytes(item) {\r\n    if (!(item instanceof Uint8Array))\r\n        throw new Error('Uint8Array expected');\r\n}\r\nfunction isNum(item) {\r\n    if (!Number.isSafeInteger(item))\r\n        throw new Error('number expected');\r\n}\r\n// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits\r\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1\r\nfunction expand_message_xmd(msg, DST, lenInBytes, H) {\r\n    isBytes(msg);\r\n    isBytes(DST);\r\n    isNum(lenInBytes);\r\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\r\n    if (DST.length > 255)\r\n        DST = H((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.utf8ToBytes)('H2C-OVERSIZE-DST-'), DST));\r\n    const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\r\n    const ell = Math.ceil(lenInBytes / b_in_bytes);\r\n    if (ell > 255)\r\n        throw new Error('Invalid xmd length');\r\n    const DST_prime = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(DST, i2osp(DST.length, 1));\r\n    const Z_pad = i2osp(0, r_in_bytes);\r\n    const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\r\n    const b = new Array(ell);\r\n    const b_0 = H((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\r\n    b[0] = H((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(b_0, i2osp(1, 1), DST_prime));\r\n    for (let i = 1; i <= ell; i++) {\r\n        const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\r\n        b[i] = H((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(...args));\r\n    }\r\n    const pseudo_random_bytes = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(...b);\r\n    return pseudo_random_bytes.slice(0, lenInBytes);\r\n}\r\n// Produces a uniformly random byte string using an extendable-output function (XOF) H.\r\n// 1. The collision resistance of H MUST be at least k bits.\r\n// 2. H MUST be an XOF that has been proved indifferentiable from\r\n//    a random oracle under a reasonable cryptographic assumption.\r\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2\r\nfunction expand_message_xof(msg, DST, lenInBytes, k, H) {\r\n    isBytes(msg);\r\n    isBytes(DST);\r\n    isNum(lenInBytes);\r\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\r\n    // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\r\n    if (DST.length > 255) {\r\n        const dkLen = Math.ceil((2 * k) / 8);\r\n        DST = H.create({ dkLen }).update((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.utf8ToBytes)('H2C-OVERSIZE-DST-')).update(DST).digest();\r\n    }\r\n    if (lenInBytes > 65535 || DST.length > 255)\r\n        throw new Error('expand_message_xof: invalid lenInBytes');\r\n    return (H.create({ dkLen: lenInBytes })\r\n        .update(msg)\r\n        .update(i2osp(lenInBytes, 2))\r\n        // 2. DST_prime = DST || I2OSP(len(DST), 1)\r\n        .update(DST)\r\n        .update(i2osp(DST.length, 1))\r\n        .digest());\r\n}\r\n/**\r\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F\r\n * https://www.rfc-editor.org/rfc/rfc9380#section-5.2\r\n * @param msg a byte string containing the message to hash\r\n * @param count the number of elements of F to output\r\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\r\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\r\n */\r\nfunction hash_to_field(msg, count, options) {\r\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.validateObject)(options, {\r\n        DST: 'stringOrUint8Array',\r\n        p: 'bigint',\r\n        m: 'isSafeInteger',\r\n        k: 'isSafeInteger',\r\n        hash: 'hash',\r\n    });\r\n    const { p, k, m, hash, expand, DST: _DST } = options;\r\n    isBytes(msg);\r\n    isNum(count);\r\n    const DST = validateDST(_DST);\r\n    const log2p = p.toString(2).length;\r\n    const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\r\n    const len_in_bytes = count * m * L;\r\n    let prb; // pseudo_random_bytes\r\n    if (expand === 'xmd') {\r\n        prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\r\n    }\r\n    else if (expand === 'xof') {\r\n        prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\r\n    }\r\n    else if (expand === '_internal_pass') {\r\n        // for internal tests only\r\n        prb = msg;\r\n    }\r\n    else {\r\n        throw new Error('expand must be \"xmd\" or \"xof\"');\r\n    }\r\n    const u = new Array(count);\r\n    for (let i = 0; i < count; i++) {\r\n        const e = new Array(m);\r\n        for (let j = 0; j < m; j++) {\r\n            const elm_offset = L * (j + i * m);\r\n            const tv = prb.subarray(elm_offset, elm_offset + L);\r\n            e[j] = (0,_modular_js__WEBPACK_IMPORTED_MODULE_1__.mod)(os2ip(tv), p);\r\n        }\r\n        u[i] = e;\r\n    }\r\n    return u;\r\n}\r\nfunction isogenyMap(field, map) {\r\n    // Make same order as in spec\r\n    const COEFF = map.map((i) => Array.from(i).reverse());\r\n    return (x, y) => {\r\n        const [xNum, xDen, yNum, yDen] = COEFF.map((val) => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));\r\n        x = field.div(xNum, xDen); // xNum / xDen\r\n        y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\r\n        return { x, y };\r\n    };\r\n}\r\nfunction createHasher(Point, mapToCurve, def) {\r\n    if (typeof mapToCurve !== 'function')\r\n        throw new Error('mapToCurve() must be defined');\r\n    return {\r\n        // Encodes byte string to elliptic curve.\r\n        // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\r\n        hashToCurve(msg, options) {\r\n            const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options });\r\n            const u0 = Point.fromAffine(mapToCurve(u[0]));\r\n            const u1 = Point.fromAffine(mapToCurve(u[1]));\r\n            const P = u0.add(u1).clearCofactor();\r\n            P.assertValidity();\r\n            return P;\r\n        },\r\n        // Encodes byte string to elliptic curve.\r\n        // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\r\n        encodeToCurve(msg, options) {\r\n            const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options });\r\n            const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\r\n            P.assertValidity();\r\n            return P;\r\n        },\r\n    };\r\n}\r\n//# sourceMappingURL=hash-to-curve.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Abm9ibGUvY3VydmVzL2VzbS9hYnN0cmFjdC9oYXNoLXRvLWN1cnZlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBbUM7QUFDb0Q7QUFDdkY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHNEQUFXO0FBQzFCO0FBQ0E7QUFDQTtBQUNBLGNBQWMsc0RBQWU7QUFDN0I7QUFDQTtBQUNBO0FBQ0EsaURBQWlELE9BQU8sU0FBUyxPQUFPO0FBQ3hFO0FBQ0EsNkJBQTZCLFFBQVE7QUFDckMsNkJBQTZCLFFBQVE7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsY0FBYztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHNEQUFXLENBQUMsc0RBQVc7QUFDdkMsWUFBWSw4Q0FBOEM7QUFDMUQ7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHNEQUFXO0FBQ2pDO0FBQ0EsNENBQTRDO0FBQzVDO0FBQ0Esa0JBQWtCLHNEQUFXO0FBQzdCLGFBQWEsc0RBQVc7QUFDeEIsb0JBQW9CLFVBQVU7QUFDOUI7QUFDQSxpQkFBaUIsc0RBQVc7QUFDNUI7QUFDQSxnQ0FBZ0Msc0RBQVc7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLE9BQU8sU0FBUyxzREFBVztBQUNwRDtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsbUJBQW1CO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiw2RUFBNkU7QUFDakc7QUFDQTtBQUNPO0FBQ1AsSUFBSSx5REFBYztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVksbUNBQW1DO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsV0FBVztBQUMvQjtBQUNBLHdCQUF3QixPQUFPO0FBQy9CO0FBQ0E7QUFDQSxtQkFBbUIsZ0RBQUc7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkMsaURBQWlEO0FBQ2pELGlCQUFpQjtBQUNqQjtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsa0NBQWtDO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsOENBQThDLHdDQUF3QztBQUN0RjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBIiwic291cmNlcyI6WyJEOlxcRG9fYW4yXFxsZW5kaHViX3YyXFxsZW5kaHViLWZyb250ZW5kLW5leHRqc1xcbm9kZV9tb2R1bGVzXFxAbm9ibGVcXGN1cnZlc1xcZXNtXFxhYnN0cmFjdFxcaGFzaC10by1jdXJ2ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtb2QgfSBmcm9tICcuL21vZHVsYXIuanMnO1xyXG5pbXBvcnQgeyBieXRlc1RvTnVtYmVyQkUsIGNvbmNhdEJ5dGVzLCB1dGY4VG9CeXRlcywgdmFsaWRhdGVPYmplY3QgfSBmcm9tICcuL3V0aWxzLmpzJztcclxuZnVuY3Rpb24gdmFsaWRhdGVEU1QoZHN0KSB7XHJcbiAgICBpZiAoZHN0IGluc3RhbmNlb2YgVWludDhBcnJheSlcclxuICAgICAgICByZXR1cm4gZHN0O1xyXG4gICAgaWYgKHR5cGVvZiBkc3QgPT09ICdzdHJpbmcnKVxyXG4gICAgICAgIHJldHVybiB1dGY4VG9CeXRlcyhkc3QpO1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdEU1QgbXVzdCBiZSBVaW50OEFycmF5IG9yIHN0cmluZycpO1xyXG59XHJcbi8vIE9jdGV0IFN0cmVhbSB0byBJbnRlZ2VyLiBcInNwZWNcIiBpbXBsZW1lbnRhdGlvbiBvZiBvczJpcCBpcyAyLjV4IHNsb3dlciB2cyBieXRlc1RvTnVtYmVyQkUuXHJcbmNvbnN0IG9zMmlwID0gYnl0ZXNUb051bWJlckJFO1xyXG4vLyBJbnRlZ2VyIHRvIE9jdGV0IFN0cmVhbSAobnVtYmVyVG9CeXRlc0JFKVxyXG5mdW5jdGlvbiBpMm9zcCh2YWx1ZSwgbGVuZ3RoKSB7XHJcbiAgICBpZiAodmFsdWUgPCAwIHx8IHZhbHVlID49IDEgPDwgKDggKiBsZW5ndGgpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBiYWQgSTJPU1AgY2FsbDogdmFsdWU9JHt2YWx1ZX0gbGVuZ3RoPSR7bGVuZ3RofWApO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcmVzID0gQXJyYXkuZnJvbSh7IGxlbmd0aCB9KS5maWxsKDApO1xyXG4gICAgZm9yIChsZXQgaSA9IGxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICAgICAgcmVzW2ldID0gdmFsdWUgJiAweGZmO1xyXG4gICAgICAgIHZhbHVlID4+Pj0gODtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXcgVWludDhBcnJheShyZXMpO1xyXG59XHJcbmZ1bmN0aW9uIHN0cnhvcihhLCBiKSB7XHJcbiAgICBjb25zdCBhcnIgPSBuZXcgVWludDhBcnJheShhLmxlbmd0aCk7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBhcnJbaV0gPSBhW2ldIF4gYltpXTtcclxuICAgIH1cclxuICAgIHJldHVybiBhcnI7XHJcbn1cclxuZnVuY3Rpb24gaXNCeXRlcyhpdGVtKSB7XHJcbiAgICBpZiAoIShpdGVtIGluc3RhbmNlb2YgVWludDhBcnJheSkpXHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVaW50OEFycmF5IGV4cGVjdGVkJyk7XHJcbn1cclxuZnVuY3Rpb24gaXNOdW0oaXRlbSkge1xyXG4gICAgaWYgKCFOdW1iZXIuaXNTYWZlSW50ZWdlcihpdGVtKSlcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ251bWJlciBleHBlY3RlZCcpO1xyXG59XHJcbi8vIFByb2R1Y2VzIGEgdW5pZm9ybWx5IHJhbmRvbSBieXRlIHN0cmluZyB1c2luZyBhIGNyeXB0b2dyYXBoaWMgaGFzaCBmdW5jdGlvbiBIIHRoYXQgb3V0cHV0cyBiIGJpdHNcclxuLy8gaHR0cHM6Ly93d3cucmZjLWVkaXRvci5vcmcvcmZjL3JmYzkzODAjc2VjdGlvbi01LjMuMVxyXG5leHBvcnQgZnVuY3Rpb24gZXhwYW5kX21lc3NhZ2VfeG1kKG1zZywgRFNULCBsZW5JbkJ5dGVzLCBIKSB7XHJcbiAgICBpc0J5dGVzKG1zZyk7XHJcbiAgICBpc0J5dGVzKERTVCk7XHJcbiAgICBpc051bShsZW5JbkJ5dGVzKTtcclxuICAgIC8vIGh0dHBzOi8vd3d3LnJmYy1lZGl0b3Iub3JnL3JmYy9yZmM5MzgwI3NlY3Rpb24tNS4zLjNcclxuICAgIGlmIChEU1QubGVuZ3RoID4gMjU1KVxyXG4gICAgICAgIERTVCA9IEgoY29uY2F0Qnl0ZXModXRmOFRvQnl0ZXMoJ0gyQy1PVkVSU0laRS1EU1QtJyksIERTVCkpO1xyXG4gICAgY29uc3QgeyBvdXRwdXRMZW46IGJfaW5fYnl0ZXMsIGJsb2NrTGVuOiByX2luX2J5dGVzIH0gPSBIO1xyXG4gICAgY29uc3QgZWxsID0gTWF0aC5jZWlsKGxlbkluQnl0ZXMgLyBiX2luX2J5dGVzKTtcclxuICAgIGlmIChlbGwgPiAyNTUpXHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHhtZCBsZW5ndGgnKTtcclxuICAgIGNvbnN0IERTVF9wcmltZSA9IGNvbmNhdEJ5dGVzKERTVCwgaTJvc3AoRFNULmxlbmd0aCwgMSkpO1xyXG4gICAgY29uc3QgWl9wYWQgPSBpMm9zcCgwLCByX2luX2J5dGVzKTtcclxuICAgIGNvbnN0IGxfaV9iX3N0ciA9IGkyb3NwKGxlbkluQnl0ZXMsIDIpOyAvLyBsZW5faW5fYnl0ZXNfc3RyXHJcbiAgICBjb25zdCBiID0gbmV3IEFycmF5KGVsbCk7XHJcbiAgICBjb25zdCBiXzAgPSBIKGNvbmNhdEJ5dGVzKFpfcGFkLCBtc2csIGxfaV9iX3N0ciwgaTJvc3AoMCwgMSksIERTVF9wcmltZSkpO1xyXG4gICAgYlswXSA9IEgoY29uY2F0Qnl0ZXMoYl8wLCBpMm9zcCgxLCAxKSwgRFNUX3ByaW1lKSk7XHJcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8PSBlbGw7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IGFyZ3MgPSBbc3RyeG9yKGJfMCwgYltpIC0gMV0pLCBpMm9zcChpICsgMSwgMSksIERTVF9wcmltZV07XHJcbiAgICAgICAgYltpXSA9IEgoY29uY2F0Qnl0ZXMoLi4uYXJncykpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcHNldWRvX3JhbmRvbV9ieXRlcyA9IGNvbmNhdEJ5dGVzKC4uLmIpO1xyXG4gICAgcmV0dXJuIHBzZXVkb19yYW5kb21fYnl0ZXMuc2xpY2UoMCwgbGVuSW5CeXRlcyk7XHJcbn1cclxuLy8gUHJvZHVjZXMgYSB1bmlmb3JtbHkgcmFuZG9tIGJ5dGUgc3RyaW5nIHVzaW5nIGFuIGV4dGVuZGFibGUtb3V0cHV0IGZ1bmN0aW9uIChYT0YpIEguXHJcbi8vIDEuIFRoZSBjb2xsaXNpb24gcmVzaXN0YW5jZSBvZiBIIE1VU1QgYmUgYXQgbGVhc3QgayBiaXRzLlxyXG4vLyAyLiBIIE1VU1QgYmUgYW4gWE9GIHRoYXQgaGFzIGJlZW4gcHJvdmVkIGluZGlmZmVyZW50aWFibGUgZnJvbVxyXG4vLyAgICBhIHJhbmRvbSBvcmFjbGUgdW5kZXIgYSByZWFzb25hYmxlIGNyeXB0b2dyYXBoaWMgYXNzdW1wdGlvbi5cclxuLy8gaHR0cHM6Ly93d3cucmZjLWVkaXRvci5vcmcvcmZjL3JmYzkzODAjc2VjdGlvbi01LjMuMlxyXG5leHBvcnQgZnVuY3Rpb24gZXhwYW5kX21lc3NhZ2VfeG9mKG1zZywgRFNULCBsZW5JbkJ5dGVzLCBrLCBIKSB7XHJcbiAgICBpc0J5dGVzKG1zZyk7XHJcbiAgICBpc0J5dGVzKERTVCk7XHJcbiAgICBpc051bShsZW5JbkJ5dGVzKTtcclxuICAgIC8vIGh0dHBzOi8vd3d3LnJmYy1lZGl0b3Iub3JnL3JmYy9yZmM5MzgwI3NlY3Rpb24tNS4zLjNcclxuICAgIC8vIERTVCA9IEgoJ0gyQy1PVkVSU0laRS1EU1QtJyB8fCBhX3ZlcnlfbG9uZ19EU1QsIE1hdGguY2VpbCgobGVuSW5CeXRlcyAqIGspIC8gOCkpO1xyXG4gICAgaWYgKERTVC5sZW5ndGggPiAyNTUpIHtcclxuICAgICAgICBjb25zdCBka0xlbiA9IE1hdGguY2VpbCgoMiAqIGspIC8gOCk7XHJcbiAgICAgICAgRFNUID0gSC5jcmVhdGUoeyBka0xlbiB9KS51cGRhdGUodXRmOFRvQnl0ZXMoJ0gyQy1PVkVSU0laRS1EU1QtJykpLnVwZGF0ZShEU1QpLmRpZ2VzdCgpO1xyXG4gICAgfVxyXG4gICAgaWYgKGxlbkluQnl0ZXMgPiA2NTUzNSB8fCBEU1QubGVuZ3RoID4gMjU1KVxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignZXhwYW5kX21lc3NhZ2VfeG9mOiBpbnZhbGlkIGxlbkluQnl0ZXMnKTtcclxuICAgIHJldHVybiAoSC5jcmVhdGUoeyBka0xlbjogbGVuSW5CeXRlcyB9KVxyXG4gICAgICAgIC51cGRhdGUobXNnKVxyXG4gICAgICAgIC51cGRhdGUoaTJvc3AobGVuSW5CeXRlcywgMikpXHJcbiAgICAgICAgLy8gMi4gRFNUX3ByaW1lID0gRFNUIHx8IEkyT1NQKGxlbihEU1QpLCAxKVxyXG4gICAgICAgIC51cGRhdGUoRFNUKVxyXG4gICAgICAgIC51cGRhdGUoaTJvc3AoRFNULmxlbmd0aCwgMSkpXHJcbiAgICAgICAgLmRpZ2VzdCgpKTtcclxufVxyXG4vKipcclxuICogSGFzaGVzIGFyYml0cmFyeS1sZW5ndGggYnl0ZSBzdHJpbmdzIHRvIGEgbGlzdCBvZiBvbmUgb3IgbW9yZSBlbGVtZW50cyBvZiBhIGZpbml0ZSBmaWVsZCBGXHJcbiAqIGh0dHBzOi8vd3d3LnJmYy1lZGl0b3Iub3JnL3JmYy9yZmM5MzgwI3NlY3Rpb24tNS4yXHJcbiAqIEBwYXJhbSBtc2cgYSBieXRlIHN0cmluZyBjb250YWluaW5nIHRoZSBtZXNzYWdlIHRvIGhhc2hcclxuICogQHBhcmFtIGNvdW50IHRoZSBudW1iZXIgb2YgZWxlbWVudHMgb2YgRiB0byBvdXRwdXRcclxuICogQHBhcmFtIG9wdGlvbnMgYHtEU1Q6IHN0cmluZywgcDogYmlnaW50LCBtOiBudW1iZXIsIGs6IG51bWJlciwgZXhwYW5kOiAneG1kJyB8ICd4b2YnLCBoYXNoOiBIfWAsIHNlZSBhYm92ZVxyXG4gKiBAcmV0dXJucyBbdV8wLCAuLi4sIHVfKGNvdW50IC0gMSldLCBhIGxpc3Qgb2YgZmllbGQgZWxlbWVudHMuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaGFzaF90b19maWVsZChtc2csIGNvdW50LCBvcHRpb25zKSB7XHJcbiAgICB2YWxpZGF0ZU9iamVjdChvcHRpb25zLCB7XHJcbiAgICAgICAgRFNUOiAnc3RyaW5nT3JVaW50OEFycmF5JyxcclxuICAgICAgICBwOiAnYmlnaW50JyxcclxuICAgICAgICBtOiAnaXNTYWZlSW50ZWdlcicsXHJcbiAgICAgICAgazogJ2lzU2FmZUludGVnZXInLFxyXG4gICAgICAgIGhhc2g6ICdoYXNoJyxcclxuICAgIH0pO1xyXG4gICAgY29uc3QgeyBwLCBrLCBtLCBoYXNoLCBleHBhbmQsIERTVDogX0RTVCB9ID0gb3B0aW9ucztcclxuICAgIGlzQnl0ZXMobXNnKTtcclxuICAgIGlzTnVtKGNvdW50KTtcclxuICAgIGNvbnN0IERTVCA9IHZhbGlkYXRlRFNUKF9EU1QpO1xyXG4gICAgY29uc3QgbG9nMnAgPSBwLnRvU3RyaW5nKDIpLmxlbmd0aDtcclxuICAgIGNvbnN0IEwgPSBNYXRoLmNlaWwoKGxvZzJwICsgaykgLyA4KTsgLy8gc2VjdGlvbiA1LjEgb2YgaWV0ZiBkcmFmdCBsaW5rIGFib3ZlXHJcbiAgICBjb25zdCBsZW5faW5fYnl0ZXMgPSBjb3VudCAqIG0gKiBMO1xyXG4gICAgbGV0IHByYjsgLy8gcHNldWRvX3JhbmRvbV9ieXRlc1xyXG4gICAgaWYgKGV4cGFuZCA9PT0gJ3htZCcpIHtcclxuICAgICAgICBwcmIgPSBleHBhbmRfbWVzc2FnZV94bWQobXNnLCBEU1QsIGxlbl9pbl9ieXRlcywgaGFzaCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChleHBhbmQgPT09ICd4b2YnKSB7XHJcbiAgICAgICAgcHJiID0gZXhwYW5kX21lc3NhZ2VfeG9mKG1zZywgRFNULCBsZW5faW5fYnl0ZXMsIGssIGhhc2gpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoZXhwYW5kID09PSAnX2ludGVybmFsX3Bhc3MnKSB7XHJcbiAgICAgICAgLy8gZm9yIGludGVybmFsIHRlc3RzIG9ubHlcclxuICAgICAgICBwcmIgPSBtc2c7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2V4cGFuZCBtdXN0IGJlIFwieG1kXCIgb3IgXCJ4b2ZcIicpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgdSA9IG5ldyBBcnJheShjb3VudCk7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcclxuICAgICAgICBjb25zdCBlID0gbmV3IEFycmF5KG0pO1xyXG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbTsgaisrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVsbV9vZmZzZXQgPSBMICogKGogKyBpICogbSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHR2ID0gcHJiLnN1YmFycmF5KGVsbV9vZmZzZXQsIGVsbV9vZmZzZXQgKyBMKTtcclxuICAgICAgICAgICAgZVtqXSA9IG1vZChvczJpcCh0diksIHApO1xyXG4gICAgICAgIH1cclxuICAgICAgICB1W2ldID0gZTtcclxuICAgIH1cclxuICAgIHJldHVybiB1O1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBpc29nZW55TWFwKGZpZWxkLCBtYXApIHtcclxuICAgIC8vIE1ha2Ugc2FtZSBvcmRlciBhcyBpbiBzcGVjXHJcbiAgICBjb25zdCBDT0VGRiA9IG1hcC5tYXAoKGkpID0+IEFycmF5LmZyb20oaSkucmV2ZXJzZSgpKTtcclxuICAgIHJldHVybiAoeCwgeSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IFt4TnVtLCB4RGVuLCB5TnVtLCB5RGVuXSA9IENPRUZGLm1hcCgodmFsKSA9PiB2YWwucmVkdWNlKChhY2MsIGkpID0+IGZpZWxkLmFkZChmaWVsZC5tdWwoYWNjLCB4KSwgaSkpKTtcclxuICAgICAgICB4ID0gZmllbGQuZGl2KHhOdW0sIHhEZW4pOyAvLyB4TnVtIC8geERlblxyXG4gICAgICAgIHkgPSBmaWVsZC5tdWwoeSwgZmllbGQuZGl2KHlOdW0sIHlEZW4pKTsgLy8geSAqICh5TnVtIC8geURldilcclxuICAgICAgICByZXR1cm4geyB4LCB5IH07XHJcbiAgICB9O1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVIYXNoZXIoUG9pbnQsIG1hcFRvQ3VydmUsIGRlZikge1xyXG4gICAgaWYgKHR5cGVvZiBtYXBUb0N1cnZlICE9PSAnZnVuY3Rpb24nKVxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignbWFwVG9DdXJ2ZSgpIG11c3QgYmUgZGVmaW5lZCcpO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAvLyBFbmNvZGVzIGJ5dGUgc3RyaW5nIHRvIGVsbGlwdGljIGN1cnZlLlxyXG4gICAgICAgIC8vIGhhc2hfdG9fY3VydmUgZnJvbSBodHRwczovL3d3dy5yZmMtZWRpdG9yLm9yZy9yZmMvcmZjOTM4MCNzZWN0aW9uLTNcclxuICAgICAgICBoYXNoVG9DdXJ2ZShtc2csIG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgY29uc3QgdSA9IGhhc2hfdG9fZmllbGQobXNnLCAyLCB7IC4uLmRlZiwgRFNUOiBkZWYuRFNULCAuLi5vcHRpb25zIH0pO1xyXG4gICAgICAgICAgICBjb25zdCB1MCA9IFBvaW50LmZyb21BZmZpbmUobWFwVG9DdXJ2ZSh1WzBdKSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHUxID0gUG9pbnQuZnJvbUFmZmluZShtYXBUb0N1cnZlKHVbMV0pKTtcclxuICAgICAgICAgICAgY29uc3QgUCA9IHUwLmFkZCh1MSkuY2xlYXJDb2ZhY3RvcigpO1xyXG4gICAgICAgICAgICBQLmFzc2VydFZhbGlkaXR5KCk7XHJcbiAgICAgICAgICAgIHJldHVybiBQO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgLy8gRW5jb2RlcyBieXRlIHN0cmluZyB0byBlbGxpcHRpYyBjdXJ2ZS5cclxuICAgICAgICAvLyBlbmNvZGVfdG9fY3VydmUgZnJvbSBodHRwczovL3d3dy5yZmMtZWRpdG9yLm9yZy9yZmMvcmZjOTM4MCNzZWN0aW9uLTNcclxuICAgICAgICBlbmNvZGVUb0N1cnZlKG1zZywgb3B0aW9ucykge1xyXG4gICAgICAgICAgICBjb25zdCB1ID0gaGFzaF90b19maWVsZChtc2csIDEsIHsgLi4uZGVmLCBEU1Q6IGRlZi5lbmNvZGVEU1QsIC4uLm9wdGlvbnMgfSk7XHJcbiAgICAgICAgICAgIGNvbnN0IFAgPSBQb2ludC5mcm9tQWZmaW5lKG1hcFRvQ3VydmUodVswXSkpLmNsZWFyQ29mYWN0b3IoKTtcclxuICAgICAgICAgICAgUC5hc3NlcnRWYWxpZGl0eSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gUDtcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1oYXNoLXRvLWN1cnZlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/@noble/curves/esm/abstract/hash-to-curve.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/@noble/curves/esm/abstract/modular.js":
/*!************************************************************!*\
  !*** ./node_modules/@noble/curves/esm/abstract/modular.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Field: () => (/* binding */ Field),\n/* harmony export */   FpDiv: () => (/* binding */ FpDiv),\n/* harmony export */   FpInvertBatch: () => (/* binding */ FpInvertBatch),\n/* harmony export */   FpIsSquare: () => (/* binding */ FpIsSquare),\n/* harmony export */   FpPow: () => (/* binding */ FpPow),\n/* harmony export */   FpSqrt: () => (/* binding */ FpSqrt),\n/* harmony export */   FpSqrtEven: () => (/* binding */ FpSqrtEven),\n/* harmony export */   FpSqrtOdd: () => (/* binding */ FpSqrtOdd),\n/* harmony export */   getFieldBytesLength: () => (/* binding */ getFieldBytesLength),\n/* harmony export */   getMinHashLength: () => (/* binding */ getMinHashLength),\n/* harmony export */   hashToPrivateScalar: () => (/* binding */ hashToPrivateScalar),\n/* harmony export */   invert: () => (/* binding */ invert),\n/* harmony export */   isNegativeLE: () => (/* binding */ isNegativeLE),\n/* harmony export */   mapHashToField: () => (/* binding */ mapHashToField),\n/* harmony export */   mod: () => (/* binding */ mod),\n/* harmony export */   nLength: () => (/* binding */ nLength),\n/* harmony export */   pow: () => (/* binding */ pow),\n/* harmony export */   pow2: () => (/* binding */ pow2),\n/* harmony export */   tonelliShanks: () => (/* binding */ tonelliShanks),\n/* harmony export */   validateField: () => (/* binding */ validateField)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(pages-dir-browser)/./node_modules/@noble/curves/esm/abstract/utils.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\n// Utilities for modular arithmetics and finite fields\r\n\r\n// prettier-ignore\r\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\r\n// prettier-ignore\r\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\r\n// prettier-ignore\r\nconst _9n = BigInt(9), _16n = BigInt(16);\r\n// Calculates a modulo b\r\nfunction mod(a, b) {\r\n    const result = a % b;\r\n    return result >= _0n ? result : b + result;\r\n}\r\n/**\r\n * Efficiently raise num to power and do modular division.\r\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\r\n * @example\r\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\r\n */\r\n// TODO: use field version && remove\r\nfunction pow(num, power, modulo) {\r\n    if (modulo <= _0n || power < _0n)\r\n        throw new Error('Expected power/modulo > 0');\r\n    if (modulo === _1n)\r\n        return _0n;\r\n    let res = _1n;\r\n    while (power > _0n) {\r\n        if (power & _1n)\r\n            res = (res * num) % modulo;\r\n        num = (num * num) % modulo;\r\n        power >>= _1n;\r\n    }\r\n    return res;\r\n}\r\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\r\nfunction pow2(x, power, modulo) {\r\n    let res = x;\r\n    while (power-- > _0n) {\r\n        res *= res;\r\n        res %= modulo;\r\n    }\r\n    return res;\r\n}\r\n// Inverses number over modulo\r\nfunction invert(number, modulo) {\r\n    if (number === _0n || modulo <= _0n) {\r\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\r\n    }\r\n    // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\r\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\r\n    let a = mod(number, modulo);\r\n    let b = modulo;\r\n    // prettier-ignore\r\n    let x = _0n, y = _1n, u = _1n, v = _0n;\r\n    while (a !== _0n) {\r\n        // JIT applies optimization if those two lines follow each other\r\n        const q = b / a;\r\n        const r = b % a;\r\n        const m = x - u * q;\r\n        const n = y - v * q;\r\n        // prettier-ignore\r\n        b = a, a = r, x = u, y = v, u = m, v = n;\r\n    }\r\n    const gcd = b;\r\n    if (gcd !== _1n)\r\n        throw new Error('invert: does not exist');\r\n    return mod(x, modulo);\r\n}\r\n/**\r\n * Tonelli-Shanks square root search algorithm.\r\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\r\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\r\n * Will start an infinite loop if field order P is not prime.\r\n * @param P field order\r\n * @returns function that takes field Fp (created from P) and number n\r\n */\r\nfunction tonelliShanks(P) {\r\n    // Legendre constant: used to calculate Legendre symbol (a | p),\r\n    // which denotes the value of a^((p-1)/2) (mod p).\r\n    // (a | p) ≡ 1    if a is a square (mod p)\r\n    // (a | p) ≡ -1   if a is not a square (mod p)\r\n    // (a | p) ≡ 0    if a ≡ 0 (mod p)\r\n    const legendreC = (P - _1n) / _2n;\r\n    let Q, S, Z;\r\n    // Step 1: By factoring out powers of 2 from p - 1,\r\n    // find q and s such that p - 1 = q*(2^s) with q odd\r\n    for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++)\r\n        ;\r\n    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\r\n    for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++)\r\n        ;\r\n    // Fast-path\r\n    if (S === 1) {\r\n        const p1div4 = (P + _1n) / _4n;\r\n        return function tonelliFast(Fp, n) {\r\n            const root = Fp.pow(n, p1div4);\r\n            if (!Fp.eql(Fp.sqr(root), n))\r\n                throw new Error('Cannot find square root');\r\n            return root;\r\n        };\r\n    }\r\n    // Slow-path\r\n    const Q1div2 = (Q + _1n) / _2n;\r\n    return function tonelliSlow(Fp, n) {\r\n        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\r\n        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))\r\n            throw new Error('Cannot find square root');\r\n        let r = S;\r\n        // TODO: will fail at Fp2/etc\r\n        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\r\n        let x = Fp.pow(n, Q1div2); // first guess at the square root\r\n        let b = Fp.pow(n, Q); // first guess at the fudge factor\r\n        while (!Fp.eql(b, Fp.ONE)) {\r\n            if (Fp.eql(b, Fp.ZERO))\r\n                return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\r\n            // Find m such b^(2^m)==1\r\n            let m = 1;\r\n            for (let t2 = Fp.sqr(b); m < r; m++) {\r\n                if (Fp.eql(t2, Fp.ONE))\r\n                    break;\r\n                t2 = Fp.sqr(t2); // t2 *= t2\r\n            }\r\n            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\r\n            const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\r\n            g = Fp.sqr(ge); // g = ge * ge\r\n            x = Fp.mul(x, ge); // x *= ge\r\n            b = Fp.mul(b, g); // b *= g\r\n            r = m;\r\n        }\r\n        return x;\r\n    };\r\n}\r\nfunction FpSqrt(P) {\r\n    // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\r\n    // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\r\n    // P ≡ 3 (mod 4)\r\n    // √n = n^((P+1)/4)\r\n    if (P % _4n === _3n) {\r\n        // Not all roots possible!\r\n        // const ORDER =\r\n        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\r\n        // const NUM = 72057594037927816n;\r\n        const p1div4 = (P + _1n) / _4n;\r\n        return function sqrt3mod4(Fp, n) {\r\n            const root = Fp.pow(n, p1div4);\r\n            // Throw if root**2 != n\r\n            if (!Fp.eql(Fp.sqr(root), n))\r\n                throw new Error('Cannot find square root');\r\n            return root;\r\n        };\r\n    }\r\n    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\r\n    if (P % _8n === _5n) {\r\n        const c1 = (P - _5n) / _8n;\r\n        return function sqrt5mod8(Fp, n) {\r\n            const n2 = Fp.mul(n, _2n);\r\n            const v = Fp.pow(n2, c1);\r\n            const nv = Fp.mul(n, v);\r\n            const i = Fp.mul(Fp.mul(nv, _2n), v);\r\n            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\r\n            if (!Fp.eql(Fp.sqr(root), n))\r\n                throw new Error('Cannot find square root');\r\n            return root;\r\n        };\r\n    }\r\n    // P ≡ 9 (mod 16)\r\n    if (P % _16n === _9n) {\r\n        // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\r\n        // Means we cannot use sqrt for constants at all!\r\n        //\r\n        // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\r\n        // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\r\n        // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\r\n        // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\r\n        // sqrt = (x) => {\r\n        //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\r\n        //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\r\n        //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\r\n        //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\r\n        //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\r\n        //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\r\n        //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\r\n        //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\r\n        //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\r\n        //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\r\n        // }\r\n    }\r\n    // Other cases: Tonelli-Shanks algorithm\r\n    return tonelliShanks(P);\r\n}\r\n// Little-endian check for first LE bit (last BE bit);\r\nconst isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\r\n// prettier-ignore\r\nconst FIELD_FIELDS = [\r\n    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\r\n    'eql', 'add', 'sub', 'mul', 'pow', 'div',\r\n    'addN', 'subN', 'mulN', 'sqrN'\r\n];\r\nfunction validateField(field) {\r\n    const initial = {\r\n        ORDER: 'bigint',\r\n        MASK: 'bigint',\r\n        BYTES: 'isSafeInteger',\r\n        BITS: 'isSafeInteger',\r\n    };\r\n    const opts = FIELD_FIELDS.reduce((map, val) => {\r\n        map[val] = 'function';\r\n        return map;\r\n    }, initial);\r\n    return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.validateObject)(field, opts);\r\n}\r\n// Generic field functions\r\n/**\r\n * Same as `pow` but for Fp: non-constant-time.\r\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\r\n */\r\nfunction FpPow(f, num, power) {\r\n    // Should have same speed as pow for bigints\r\n    // TODO: benchmark!\r\n    if (power < _0n)\r\n        throw new Error('Expected power > 0');\r\n    if (power === _0n)\r\n        return f.ONE;\r\n    if (power === _1n)\r\n        return num;\r\n    let p = f.ONE;\r\n    let d = num;\r\n    while (power > _0n) {\r\n        if (power & _1n)\r\n            p = f.mul(p, d);\r\n        d = f.sqr(d);\r\n        power >>= _1n;\r\n    }\r\n    return p;\r\n}\r\n/**\r\n * Efficiently invert an array of Field elements.\r\n * `inv(0)` will return `undefined` here: make sure to throw an error.\r\n */\r\nfunction FpInvertBatch(f, nums) {\r\n    const tmp = new Array(nums.length);\r\n    // Walk from first to last, multiply them by each other MOD p\r\n    const lastMultiplied = nums.reduce((acc, num, i) => {\r\n        if (f.is0(num))\r\n            return acc;\r\n        tmp[i] = acc;\r\n        return f.mul(acc, num);\r\n    }, f.ONE);\r\n    // Invert last element\r\n    const inverted = f.inv(lastMultiplied);\r\n    // Walk from last to first, multiply them by inverted each other MOD p\r\n    nums.reduceRight((acc, num, i) => {\r\n        if (f.is0(num))\r\n            return acc;\r\n        tmp[i] = f.mul(acc, tmp[i]);\r\n        return f.mul(acc, num);\r\n    }, inverted);\r\n    return tmp;\r\n}\r\nfunction FpDiv(f, lhs, rhs) {\r\n    return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\r\n}\r\n// This function returns True whenever the value x is a square in the field F.\r\nfunction FpIsSquare(f) {\r\n    const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\r\n    return (x) => {\r\n        const p = f.pow(x, legendreConst);\r\n        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\r\n    };\r\n}\r\n// CURVE.n lengths\r\nfunction nLength(n, nBitLength) {\r\n    // Bit size, byte size of CURVE.n\r\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\r\n    const nByteLength = Math.ceil(_nBitLength / 8);\r\n    return { nBitLength: _nBitLength, nByteLength };\r\n}\r\n/**\r\n * Initializes a finite field over prime. **Non-primes are not supported.**\r\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\r\n * Major performance optimizations:\r\n * * a) denormalized operations like mulN instead of mul\r\n * * b) same object shape: never add or remove keys\r\n * * c) Object.freeze\r\n * @param ORDER prime positive bigint\r\n * @param bitLen how many bits the field consumes\r\n * @param isLE (def: false) if encoding / decoding should be in little-endian\r\n * @param redef optional faster redefinitions of sqrt and other methods\r\n */\r\nfunction Field(ORDER, bitLen, isLE = false, redef = {}) {\r\n    if (ORDER <= _0n)\r\n        throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\r\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\r\n    if (BYTES > 2048)\r\n        throw new Error('Field lengths over 2048 bytes are not supported');\r\n    const sqrtP = FpSqrt(ORDER);\r\n    const f = Object.freeze({\r\n        ORDER,\r\n        BITS,\r\n        BYTES,\r\n        MASK: (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bitMask)(BITS),\r\n        ZERO: _0n,\r\n        ONE: _1n,\r\n        create: (num) => mod(num, ORDER),\r\n        isValid: (num) => {\r\n            if (typeof num !== 'bigint')\r\n                throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\r\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\r\n        },\r\n        is0: (num) => num === _0n,\r\n        isOdd: (num) => (num & _1n) === _1n,\r\n        neg: (num) => mod(-num, ORDER),\r\n        eql: (lhs, rhs) => lhs === rhs,\r\n        sqr: (num) => mod(num * num, ORDER),\r\n        add: (lhs, rhs) => mod(lhs + rhs, ORDER),\r\n        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\r\n        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\r\n        pow: (num, power) => FpPow(f, num, power),\r\n        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\r\n        // Same as above, but doesn't normalize\r\n        sqrN: (num) => num * num,\r\n        addN: (lhs, rhs) => lhs + rhs,\r\n        subN: (lhs, rhs) => lhs - rhs,\r\n        mulN: (lhs, rhs) => lhs * rhs,\r\n        inv: (num) => invert(num, ORDER),\r\n        sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\r\n        invertBatch: (lst) => FpInvertBatch(f, lst),\r\n        // TODO: do we really need constant cmov?\r\n        // We don't have const-time bigints anyway, so probably will be not very useful\r\n        cmov: (a, b, c) => (c ? b : a),\r\n        toBytes: (num) => (isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesLE)(num, BYTES) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesBE)(num, BYTES)),\r\n        fromBytes: (bytes) => {\r\n            if (bytes.length !== BYTES)\r\n                throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\r\n            return isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberLE)(bytes) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE)(bytes);\r\n        },\r\n    });\r\n    return Object.freeze(f);\r\n}\r\nfunction FpSqrtOdd(Fp, elm) {\r\n    if (!Fp.isOdd)\r\n        throw new Error(`Field doesn't have isOdd`);\r\n    const root = Fp.sqrt(elm);\r\n    return Fp.isOdd(root) ? root : Fp.neg(root);\r\n}\r\nfunction FpSqrtEven(Fp, elm) {\r\n    if (!Fp.isOdd)\r\n        throw new Error(`Field doesn't have isOdd`);\r\n    const root = Fp.sqrt(elm);\r\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\r\n}\r\n/**\r\n * \"Constant-time\" private key generation utility.\r\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\r\n * Which makes it slightly more biased, less secure.\r\n * @deprecated use mapKeyToField instead\r\n */\r\nfunction hashToPrivateScalar(hash, groupOrder, isLE = false) {\r\n    hash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBytes)('privateHash', hash);\r\n    const hashLen = hash.length;\r\n    const minLen = nLength(groupOrder).nByteLength + 8;\r\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024)\r\n        throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\r\n    const num = isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberLE)(hash) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE)(hash);\r\n    return mod(num, groupOrder - _1n) + _1n;\r\n}\r\n/**\r\n * Returns total number of bytes consumed by the field element.\r\n * For example, 32 bytes for usual 256-bit weierstrass curve.\r\n * @param fieldOrder number of field elements, usually CURVE.n\r\n * @returns byte length of field\r\n */\r\nfunction getFieldBytesLength(fieldOrder) {\r\n    if (typeof fieldOrder !== 'bigint')\r\n        throw new Error('field order must be bigint');\r\n    const bitLength = fieldOrder.toString(2).length;\r\n    return Math.ceil(bitLength / 8);\r\n}\r\n/**\r\n * Returns minimal amount of bytes that can be safely reduced\r\n * by field order.\r\n * Should be 2^-128 for 128-bit curve such as P256.\r\n * @param fieldOrder number of field elements, usually CURVE.n\r\n * @returns byte length of target hash\r\n */\r\nfunction getMinHashLength(fieldOrder) {\r\n    const length = getFieldBytesLength(fieldOrder);\r\n    return length + Math.ceil(length / 2);\r\n}\r\n/**\r\n * \"Constant-time\" private key generation utility.\r\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\r\n * and convert them into private scalar, with the modulo bias being negligible.\r\n * Needs at least 48 bytes of input for 32-byte private key.\r\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\r\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\r\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\r\n * @param hash hash output from SHA3 or a similar function\r\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\r\n * @param isLE interpret hash bytes as LE num\r\n * @returns valid private scalar\r\n */\r\nfunction mapHashToField(key, fieldOrder, isLE = false) {\r\n    const len = key.length;\r\n    const fieldLen = getFieldBytesLength(fieldOrder);\r\n    const minLen = getMinHashLength(fieldOrder);\r\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\r\n    if (len < 16 || len < minLen || len > 1024)\r\n        throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\r\n    const num = isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE)(key) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberLE)(key);\r\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\r\n    const reduced = mod(num, fieldOrder - _1n) + _1n;\r\n    return isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesLE)(reduced, fieldLen) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesBE)(reduced, fieldLen);\r\n}\r\n//# sourceMappingURL=modular.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/@noble/curves/esm/abstract/modular.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/@noble/curves/esm/abstract/utils.js":
/*!**********************************************************!*\
  !*** ./node_modules/@noble/curves/esm/abstract/utils.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bitGet: () => (/* binding */ bitGet),\n/* harmony export */   bitLen: () => (/* binding */ bitLen),\n/* harmony export */   bitMask: () => (/* binding */ bitMask),\n/* harmony export */   bitSet: () => (/* binding */ bitSet),\n/* harmony export */   bytesToHex: () => (/* binding */ bytesToHex),\n/* harmony export */   bytesToNumberBE: () => (/* binding */ bytesToNumberBE),\n/* harmony export */   bytesToNumberLE: () => (/* binding */ bytesToNumberLE),\n/* harmony export */   concatBytes: () => (/* binding */ concatBytes),\n/* harmony export */   createHmacDrbg: () => (/* binding */ createHmacDrbg),\n/* harmony export */   ensureBytes: () => (/* binding */ ensureBytes),\n/* harmony export */   equalBytes: () => (/* binding */ equalBytes),\n/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),\n/* harmony export */   hexToNumber: () => (/* binding */ hexToNumber),\n/* harmony export */   numberToBytesBE: () => (/* binding */ numberToBytesBE),\n/* harmony export */   numberToBytesLE: () => (/* binding */ numberToBytesLE),\n/* harmony export */   numberToHexUnpadded: () => (/* binding */ numberToHexUnpadded),\n/* harmony export */   numberToVarBytesBE: () => (/* binding */ numberToVarBytesBE),\n/* harmony export */   utf8ToBytes: () => (/* binding */ utf8ToBytes),\n/* harmony export */   validateObject: () => (/* binding */ validateObject)\n/* harmony export */ });\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\r\n// This is OK: `abstract` directory does not use noble-hashes.\r\n// User may opt-in into using different hashing library. This way, noble-hashes\r\n// won't be included into their bundle.\r\nconst _0n = BigInt(0);\r\nconst _1n = BigInt(1);\r\nconst _2n = BigInt(2);\r\nconst u8a = (a) => a instanceof Uint8Array;\r\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\r\n/**\r\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\r\n */\r\nfunction bytesToHex(bytes) {\r\n    if (!u8a(bytes))\r\n        throw new Error('Uint8Array expected');\r\n    // pre-caching improves the speed 6x\r\n    let hex = '';\r\n    for (let i = 0; i < bytes.length; i++) {\r\n        hex += hexes[bytes[i]];\r\n    }\r\n    return hex;\r\n}\r\nfunction numberToHexUnpadded(num) {\r\n    const hex = num.toString(16);\r\n    return hex.length & 1 ? `0${hex}` : hex;\r\n}\r\nfunction hexToNumber(hex) {\r\n    if (typeof hex !== 'string')\r\n        throw new Error('hex string expected, got ' + typeof hex);\r\n    // Big Endian\r\n    return BigInt(hex === '' ? '0' : `0x${hex}`);\r\n}\r\n/**\r\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\r\n */\r\nfunction hexToBytes(hex) {\r\n    if (typeof hex !== 'string')\r\n        throw new Error('hex string expected, got ' + typeof hex);\r\n    const len = hex.length;\r\n    if (len % 2)\r\n        throw new Error('padded hex string expected, got unpadded hex of length ' + len);\r\n    const array = new Uint8Array(len / 2);\r\n    for (let i = 0; i < array.length; i++) {\r\n        const j = i * 2;\r\n        const hexByte = hex.slice(j, j + 2);\r\n        const byte = Number.parseInt(hexByte, 16);\r\n        if (Number.isNaN(byte) || byte < 0)\r\n            throw new Error('Invalid byte sequence');\r\n        array[i] = byte;\r\n    }\r\n    return array;\r\n}\r\n// BE: Big Endian, LE: Little Endian\r\nfunction bytesToNumberBE(bytes) {\r\n    return hexToNumber(bytesToHex(bytes));\r\n}\r\nfunction bytesToNumberLE(bytes) {\r\n    if (!u8a(bytes))\r\n        throw new Error('Uint8Array expected');\r\n    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\r\n}\r\nfunction numberToBytesBE(n, len) {\r\n    return hexToBytes(n.toString(16).padStart(len * 2, '0'));\r\n}\r\nfunction numberToBytesLE(n, len) {\r\n    return numberToBytesBE(n, len).reverse();\r\n}\r\n// Unpadded, rarely used\r\nfunction numberToVarBytesBE(n) {\r\n    return hexToBytes(numberToHexUnpadded(n));\r\n}\r\n/**\r\n * Takes hex string or Uint8Array, converts to Uint8Array.\r\n * Validates output length.\r\n * Will throw error for other types.\r\n * @param title descriptive title for an error e.g. 'private key'\r\n * @param hex hex string or Uint8Array\r\n * @param expectedLength optional, will compare to result array's length\r\n * @returns\r\n */\r\nfunction ensureBytes(title, hex, expectedLength) {\r\n    let res;\r\n    if (typeof hex === 'string') {\r\n        try {\r\n            res = hexToBytes(hex);\r\n        }\r\n        catch (e) {\r\n            throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\r\n        }\r\n    }\r\n    else if (u8a(hex)) {\r\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\r\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\r\n        res = Uint8Array.from(hex);\r\n    }\r\n    else {\r\n        throw new Error(`${title} must be hex string or Uint8Array`);\r\n    }\r\n    const len = res.length;\r\n    if (typeof expectedLength === 'number' && len !== expectedLength)\r\n        throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\r\n    return res;\r\n}\r\n/**\r\n * Copies several Uint8Arrays into one.\r\n */\r\nfunction concatBytes(...arrays) {\r\n    const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\r\n    let pad = 0; // walk through each item, ensure they have proper type\r\n    arrays.forEach((a) => {\r\n        if (!u8a(a))\r\n            throw new Error('Uint8Array expected');\r\n        r.set(a, pad);\r\n        pad += a.length;\r\n    });\r\n    return r;\r\n}\r\nfunction equalBytes(b1, b2) {\r\n    // We don't care about timing attacks here\r\n    if (b1.length !== b2.length)\r\n        return false;\r\n    for (let i = 0; i < b1.length; i++)\r\n        if (b1[i] !== b2[i])\r\n            return false;\r\n    return true;\r\n}\r\n/**\r\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\r\n */\r\nfunction utf8ToBytes(str) {\r\n    if (typeof str !== 'string')\r\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\r\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\r\n}\r\n// Bit operations\r\n/**\r\n * Calculates amount of bits in a bigint.\r\n * Same as `n.toString(2).length`\r\n */\r\nfunction bitLen(n) {\r\n    let len;\r\n    for (len = 0; n > _0n; n >>= _1n, len += 1)\r\n        ;\r\n    return len;\r\n}\r\n/**\r\n * Gets single bit at position.\r\n * NOTE: first bit position is 0 (same as arrays)\r\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\r\n */\r\nfunction bitGet(n, pos) {\r\n    return (n >> BigInt(pos)) & _1n;\r\n}\r\n/**\r\n * Sets single bit at position.\r\n */\r\nconst bitSet = (n, pos, value) => {\r\n    return n | ((value ? _1n : _0n) << BigInt(pos));\r\n};\r\n/**\r\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\r\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\r\n */\r\nconst bitMask = (n) => (_2n << BigInt(n - 1)) - _1n;\r\n// DRBG\r\nconst u8n = (data) => new Uint8Array(data); // creates Uint8Array\r\nconst u8fr = (arr) => Uint8Array.from(arr); // another shortcut\r\n/**\r\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\r\n * @returns function that will call DRBG until 2nd arg returns something meaningful\r\n * @example\r\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\r\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\r\n */\r\nfunction createHmacDrbg(hashLen, qByteLen, hmacFn) {\r\n    if (typeof hashLen !== 'number' || hashLen < 2)\r\n        throw new Error('hashLen must be a number');\r\n    if (typeof qByteLen !== 'number' || qByteLen < 2)\r\n        throw new Error('qByteLen must be a number');\r\n    if (typeof hmacFn !== 'function')\r\n        throw new Error('hmacFn must be a function');\r\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\r\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\r\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\r\n    let i = 0; // Iterations counter, will throw when over 1000\r\n    const reset = () => {\r\n        v.fill(1);\r\n        k.fill(0);\r\n        i = 0;\r\n    };\r\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\r\n    const reseed = (seed = u8n()) => {\r\n        // HMAC-DRBG reseed() function. Steps D-G\r\n        k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\r\n        v = h(); // v = hmac(k || v)\r\n        if (seed.length === 0)\r\n            return;\r\n        k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\r\n        v = h(); // v = hmac(k || v)\r\n    };\r\n    const gen = () => {\r\n        // HMAC-DRBG generate() function\r\n        if (i++ >= 1000)\r\n            throw new Error('drbg: tried 1000 values');\r\n        let len = 0;\r\n        const out = [];\r\n        while (len < qByteLen) {\r\n            v = h();\r\n            const sl = v.slice();\r\n            out.push(sl);\r\n            len += v.length;\r\n        }\r\n        return concatBytes(...out);\r\n    };\r\n    const genUntil = (seed, pred) => {\r\n        reset();\r\n        reseed(seed); // Steps D-G\r\n        let res = undefined; // Step H: grind until k is in [1..n-1]\r\n        while (!(res = pred(gen())))\r\n            reseed();\r\n        reset();\r\n        return res;\r\n    };\r\n    return genUntil;\r\n}\r\n// Validating curves and fields\r\nconst validatorFns = {\r\n    bigint: (val) => typeof val === 'bigint',\r\n    function: (val) => typeof val === 'function',\r\n    boolean: (val) => typeof val === 'boolean',\r\n    string: (val) => typeof val === 'string',\r\n    stringOrUint8Array: (val) => typeof val === 'string' || val instanceof Uint8Array,\r\n    isSafeInteger: (val) => Number.isSafeInteger(val),\r\n    array: (val) => Array.isArray(val),\r\n    field: (val, object) => object.Fp.isValid(val),\r\n    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\r\n};\r\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\r\nfunction validateObject(object, validators, optValidators = {}) {\r\n    const checkField = (fieldName, type, isOptional) => {\r\n        const checkVal = validatorFns[type];\r\n        if (typeof checkVal !== 'function')\r\n            throw new Error(`Invalid validator \"${type}\", expected function`);\r\n        const val = object[fieldName];\r\n        if (isOptional && val === undefined)\r\n            return;\r\n        if (!checkVal(val, object)) {\r\n            throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);\r\n        }\r\n    };\r\n    for (const [fieldName, type] of Object.entries(validators))\r\n        checkField(fieldName, type, false);\r\n    for (const [fieldName, type] of Object.entries(optValidators))\r\n        checkField(fieldName, type, true);\r\n    return object;\r\n}\r\n// validate type tests\r\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\r\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\r\n// // Should fail type-check\r\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\r\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\r\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\r\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\r\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/@noble/curves/esm/abstract/utils.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/@noble/curves/esm/abstract/weierstrass.js":
/*!****************************************************************!*\
  !*** ./node_modules/@noble/curves/esm/abstract/weierstrass.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DER: () => (/* binding */ DER),\n/* harmony export */   SWUFpSqrtRatio: () => (/* binding */ SWUFpSqrtRatio),\n/* harmony export */   mapToCurveSimpleSWU: () => (/* binding */ mapToCurveSimpleSWU),\n/* harmony export */   weierstrass: () => (/* binding */ weierstrass),\n/* harmony export */   weierstrassPoints: () => (/* binding */ weierstrassPoints)\n/* harmony export */ });\n/* harmony import */ var _modular_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modular.js */ \"(pages-dir-browser)/./node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(pages-dir-browser)/./node_modules/@noble/curves/esm/abstract/utils.js\");\n/* harmony import */ var _curve_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./curve.js */ \"(pages-dir-browser)/./node_modules/@noble/curves/esm/abstract/curve.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\r\n\r\n\r\n\r\n\r\nfunction validatePointOpts(curve) {\r\n    const opts = (0,_curve_js__WEBPACK_IMPORTED_MODULE_0__.validateBasic)(curve);\r\n    _utils_js__WEBPACK_IMPORTED_MODULE_1__.validateObject(opts, {\r\n        a: 'field',\r\n        b: 'field',\r\n    }, {\r\n        allowedPrivateKeyLengths: 'array',\r\n        wrapPrivateKey: 'boolean',\r\n        isTorsionFree: 'function',\r\n        clearCofactor: 'function',\r\n        allowInfinityPoint: 'boolean',\r\n        fromBytes: 'function',\r\n        toBytes: 'function',\r\n    });\r\n    const { endo, Fp, a } = opts;\r\n    if (endo) {\r\n        if (!Fp.eql(a, Fp.ZERO)) {\r\n            throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\r\n        }\r\n        if (typeof endo !== 'object' ||\r\n            typeof endo.beta !== 'bigint' ||\r\n            typeof endo.splitScalar !== 'function') {\r\n            throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\r\n        }\r\n    }\r\n    return Object.freeze({ ...opts });\r\n}\r\n// ASN.1 DER encoding utilities\r\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = _utils_js__WEBPACK_IMPORTED_MODULE_1__;\r\nconst DER = {\r\n    // asn.1 DER encoding utils\r\n    Err: class DERErr extends Error {\r\n        constructor(m = '') {\r\n            super(m);\r\n        }\r\n    },\r\n    _parseInt(data) {\r\n        const { Err: E } = DER;\r\n        if (data.length < 2 || data[0] !== 0x02)\r\n            throw new E('Invalid signature integer tag');\r\n        const len = data[1];\r\n        const res = data.subarray(2, len + 2);\r\n        if (!len || res.length !== len)\r\n            throw new E('Invalid signature integer: wrong length');\r\n        // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\r\n        // since we always use positive integers here. It must always be empty:\r\n        // - add zero byte if exists\r\n        // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\r\n        if (res[0] & 0b10000000)\r\n            throw new E('Invalid signature integer: negative');\r\n        if (res[0] === 0x00 && !(res[1] & 0b10000000))\r\n            throw new E('Invalid signature integer: unnecessary leading zero');\r\n        return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\r\n    },\r\n    toSig(hex) {\r\n        // parse DER signature\r\n        const { Err: E } = DER;\r\n        const data = typeof hex === 'string' ? h2b(hex) : hex;\r\n        if (!(data instanceof Uint8Array))\r\n            throw new Error('ui8a expected');\r\n        let l = data.length;\r\n        if (l < 2 || data[0] != 0x30)\r\n            throw new E('Invalid signature tag');\r\n        if (data[1] !== l - 2)\r\n            throw new E('Invalid signature: incorrect length');\r\n        const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\r\n        const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\r\n        if (rBytesLeft.length)\r\n            throw new E('Invalid signature: left bytes after parsing');\r\n        return { r, s };\r\n    },\r\n    hexFromSig(sig) {\r\n        // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\r\n        const slice = (s) => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\r\n        const h = (num) => {\r\n            const hex = num.toString(16);\r\n            return hex.length & 1 ? `0${hex}` : hex;\r\n        };\r\n        const s = slice(h(sig.s));\r\n        const r = slice(h(sig.r));\r\n        const shl = s.length / 2;\r\n        const rhl = r.length / 2;\r\n        const sl = h(shl);\r\n        const rl = h(rhl);\r\n        return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\r\n    },\r\n};\r\n// Be friendly to bad ECMAScript parsers by not using bigint literals\r\n// prettier-ignore\r\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\r\nfunction weierstrassPoints(opts) {\r\n    const CURVE = validatePointOpts(opts);\r\n    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\r\n    const toBytes = CURVE.toBytes ||\r\n        ((_c, point, _isCompressed) => {\r\n            const a = point.toAffine();\r\n            return _utils_js__WEBPACK_IMPORTED_MODULE_1__.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\r\n        });\r\n    const fromBytes = CURVE.fromBytes ||\r\n        ((bytes) => {\r\n            // const head = bytes[0];\r\n            const tail = bytes.subarray(1);\r\n            // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\r\n            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\r\n            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\r\n            return { x, y };\r\n        });\r\n    /**\r\n     * y² = x³ + ax + b: Short weierstrass curve formula\r\n     * @returns y²\r\n     */\r\n    function weierstrassEquation(x) {\r\n        const { a, b } = CURVE;\r\n        const x2 = Fp.sqr(x); // x * x\r\n        const x3 = Fp.mul(x2, x); // x2 * x\r\n        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\r\n    }\r\n    // Validate whether the passed curve params are valid.\r\n    // We check if curve equation works for generator point.\r\n    // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\r\n    // ProjectivePoint class has not been initialized yet.\r\n    if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\r\n        throw new Error('bad generator point: equation left != right');\r\n    // Valid group elements reside in range 1..n-1\r\n    function isWithinCurveOrder(num) {\r\n        return typeof num === 'bigint' && _0n < num && num < CURVE.n;\r\n    }\r\n    function assertGE(num) {\r\n        if (!isWithinCurveOrder(num))\r\n            throw new Error('Expected valid bigint: 0 < bigint < curve.n');\r\n    }\r\n    // Validates if priv key is valid and converts it to bigint.\r\n    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\r\n    function normPrivateKeyToScalar(key) {\r\n        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\r\n        if (lengths && typeof key !== 'bigint') {\r\n            if (key instanceof Uint8Array)\r\n                key = _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToHex(key);\r\n            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\r\n            if (typeof key !== 'string' || !lengths.includes(key.length))\r\n                throw new Error('Invalid key');\r\n            key = key.padStart(nByteLength * 2, '0');\r\n        }\r\n        let num;\r\n        try {\r\n            num =\r\n                typeof key === 'bigint'\r\n                    ? key\r\n                    : _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberBE((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('private key', key, nByteLength));\r\n        }\r\n        catch (error) {\r\n            throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\r\n        }\r\n        if (wrapPrivateKey)\r\n            num = _modular_js__WEBPACK_IMPORTED_MODULE_2__.mod(num, n); // disabled by default, enabled for BLS\r\n        assertGE(num); // num in range [1..N-1]\r\n        return num;\r\n    }\r\n    const pointPrecomputes = new Map();\r\n    function assertPrjPoint(other) {\r\n        if (!(other instanceof Point))\r\n            throw new Error('ProjectivePoint expected');\r\n    }\r\n    /**\r\n     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\r\n     * Default Point works in 2d / affine coordinates: (x, y)\r\n     * We're doing calculations in projective, because its operations don't require costly inversion.\r\n     */\r\n    class Point {\r\n        constructor(px, py, pz) {\r\n            this.px = px;\r\n            this.py = py;\r\n            this.pz = pz;\r\n            if (px == null || !Fp.isValid(px))\r\n                throw new Error('x required');\r\n            if (py == null || !Fp.isValid(py))\r\n                throw new Error('y required');\r\n            if (pz == null || !Fp.isValid(pz))\r\n                throw new Error('z required');\r\n        }\r\n        // Does not validate if the point is on-curve.\r\n        // Use fromHex instead, or call assertValidity() later.\r\n        static fromAffine(p) {\r\n            const { x, y } = p || {};\r\n            if (!p || !Fp.isValid(x) || !Fp.isValid(y))\r\n                throw new Error('invalid affine point');\r\n            if (p instanceof Point)\r\n                throw new Error('projective point not allowed');\r\n            const is0 = (i) => Fp.eql(i, Fp.ZERO);\r\n            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\r\n            if (is0(x) && is0(y))\r\n                return Point.ZERO;\r\n            return new Point(x, y, Fp.ONE);\r\n        }\r\n        get x() {\r\n            return this.toAffine().x;\r\n        }\r\n        get y() {\r\n            return this.toAffine().y;\r\n        }\r\n        /**\r\n         * Takes a bunch of Projective Points but executes only one\r\n         * inversion on all of them. Inversion is very slow operation,\r\n         * so this improves performance massively.\r\n         * Optimization: converts a list of projective points to a list of identical points with Z=1.\r\n         */\r\n        static normalizeZ(points) {\r\n            const toInv = Fp.invertBatch(points.map((p) => p.pz));\r\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\r\n        }\r\n        /**\r\n         * Converts hash string or Uint8Array to Point.\r\n         * @param hex short/long ECDSA hex\r\n         */\r\n        static fromHex(hex) {\r\n            const P = Point.fromAffine(fromBytes((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('pointHex', hex)));\r\n            P.assertValidity();\r\n            return P;\r\n        }\r\n        // Multiplies generator point by privateKey.\r\n        static fromPrivateKey(privateKey) {\r\n            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\r\n        }\r\n        // \"Private method\", don't use it directly\r\n        _setWindowSize(windowSize) {\r\n            this._WINDOW_SIZE = windowSize;\r\n            pointPrecomputes.delete(this);\r\n        }\r\n        // A point on curve is valid if it conforms to equation.\r\n        assertValidity() {\r\n            if (this.is0()) {\r\n                // (0, 1, 0) aka ZERO is invalid in most contexts.\r\n                // In BLS, ZERO can be serialized, so we allow it.\r\n                // (0, 0, 0) is wrong representation of ZERO and is always invalid.\r\n                if (CURVE.allowInfinityPoint && !Fp.is0(this.py))\r\n                    return;\r\n                throw new Error('bad point: ZERO');\r\n            }\r\n            // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\r\n            const { x, y } = this.toAffine();\r\n            // Check if x, y are valid field elements\r\n            if (!Fp.isValid(x) || !Fp.isValid(y))\r\n                throw new Error('bad point: x or y not FE');\r\n            const left = Fp.sqr(y); // y²\r\n            const right = weierstrassEquation(x); // x³ + ax + b\r\n            if (!Fp.eql(left, right))\r\n                throw new Error('bad point: equation left != right');\r\n            if (!this.isTorsionFree())\r\n                throw new Error('bad point: not in prime-order subgroup');\r\n        }\r\n        hasEvenY() {\r\n            const { y } = this.toAffine();\r\n            if (Fp.isOdd)\r\n                return !Fp.isOdd(y);\r\n            throw new Error(\"Field doesn't support isOdd\");\r\n        }\r\n        /**\r\n         * Compare one point to another.\r\n         */\r\n        equals(other) {\r\n            assertPrjPoint(other);\r\n            const { px: X1, py: Y1, pz: Z1 } = this;\r\n            const { px: X2, py: Y2, pz: Z2 } = other;\r\n            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\r\n            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\r\n            return U1 && U2;\r\n        }\r\n        /**\r\n         * Flips point to one corresponding to (x, -y) in Affine coordinates.\r\n         */\r\n        negate() {\r\n            return new Point(this.px, Fp.neg(this.py), this.pz);\r\n        }\r\n        // Renes-Costello-Batina exception-free doubling formula.\r\n        // There is 30% faster Jacobian formula, but it is not complete.\r\n        // https://eprint.iacr.org/2015/1060, algorithm 3\r\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\r\n        double() {\r\n            const { a, b } = CURVE;\r\n            const b3 = Fp.mul(b, _3n);\r\n            const { px: X1, py: Y1, pz: Z1 } = this;\r\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\r\n            let t0 = Fp.mul(X1, X1); // step 1\r\n            let t1 = Fp.mul(Y1, Y1);\r\n            let t2 = Fp.mul(Z1, Z1);\r\n            let t3 = Fp.mul(X1, Y1);\r\n            t3 = Fp.add(t3, t3); // step 5\r\n            Z3 = Fp.mul(X1, Z1);\r\n            Z3 = Fp.add(Z3, Z3);\r\n            X3 = Fp.mul(a, Z3);\r\n            Y3 = Fp.mul(b3, t2);\r\n            Y3 = Fp.add(X3, Y3); // step 10\r\n            X3 = Fp.sub(t1, Y3);\r\n            Y3 = Fp.add(t1, Y3);\r\n            Y3 = Fp.mul(X3, Y3);\r\n            X3 = Fp.mul(t3, X3);\r\n            Z3 = Fp.mul(b3, Z3); // step 15\r\n            t2 = Fp.mul(a, t2);\r\n            t3 = Fp.sub(t0, t2);\r\n            t3 = Fp.mul(a, t3);\r\n            t3 = Fp.add(t3, Z3);\r\n            Z3 = Fp.add(t0, t0); // step 20\r\n            t0 = Fp.add(Z3, t0);\r\n            t0 = Fp.add(t0, t2);\r\n            t0 = Fp.mul(t0, t3);\r\n            Y3 = Fp.add(Y3, t0);\r\n            t2 = Fp.mul(Y1, Z1); // step 25\r\n            t2 = Fp.add(t2, t2);\r\n            t0 = Fp.mul(t2, t3);\r\n            X3 = Fp.sub(X3, t0);\r\n            Z3 = Fp.mul(t2, t1);\r\n            Z3 = Fp.add(Z3, Z3); // step 30\r\n            Z3 = Fp.add(Z3, Z3);\r\n            return new Point(X3, Y3, Z3);\r\n        }\r\n        // Renes-Costello-Batina exception-free addition formula.\r\n        // There is 30% faster Jacobian formula, but it is not complete.\r\n        // https://eprint.iacr.org/2015/1060, algorithm 1\r\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\r\n        add(other) {\r\n            assertPrjPoint(other);\r\n            const { px: X1, py: Y1, pz: Z1 } = this;\r\n            const { px: X2, py: Y2, pz: Z2 } = other;\r\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\r\n            const a = CURVE.a;\r\n            const b3 = Fp.mul(CURVE.b, _3n);\r\n            let t0 = Fp.mul(X1, X2); // step 1\r\n            let t1 = Fp.mul(Y1, Y2);\r\n            let t2 = Fp.mul(Z1, Z2);\r\n            let t3 = Fp.add(X1, Y1);\r\n            let t4 = Fp.add(X2, Y2); // step 5\r\n            t3 = Fp.mul(t3, t4);\r\n            t4 = Fp.add(t0, t1);\r\n            t3 = Fp.sub(t3, t4);\r\n            t4 = Fp.add(X1, Z1);\r\n            let t5 = Fp.add(X2, Z2); // step 10\r\n            t4 = Fp.mul(t4, t5);\r\n            t5 = Fp.add(t0, t2);\r\n            t4 = Fp.sub(t4, t5);\r\n            t5 = Fp.add(Y1, Z1);\r\n            X3 = Fp.add(Y2, Z2); // step 15\r\n            t5 = Fp.mul(t5, X3);\r\n            X3 = Fp.add(t1, t2);\r\n            t5 = Fp.sub(t5, X3);\r\n            Z3 = Fp.mul(a, t4);\r\n            X3 = Fp.mul(b3, t2); // step 20\r\n            Z3 = Fp.add(X3, Z3);\r\n            X3 = Fp.sub(t1, Z3);\r\n            Z3 = Fp.add(t1, Z3);\r\n            Y3 = Fp.mul(X3, Z3);\r\n            t1 = Fp.add(t0, t0); // step 25\r\n            t1 = Fp.add(t1, t0);\r\n            t2 = Fp.mul(a, t2);\r\n            t4 = Fp.mul(b3, t4);\r\n            t1 = Fp.add(t1, t2);\r\n            t2 = Fp.sub(t0, t2); // step 30\r\n            t2 = Fp.mul(a, t2);\r\n            t4 = Fp.add(t4, t2);\r\n            t0 = Fp.mul(t1, t4);\r\n            Y3 = Fp.add(Y3, t0);\r\n            t0 = Fp.mul(t5, t4); // step 35\r\n            X3 = Fp.mul(t3, X3);\r\n            X3 = Fp.sub(X3, t0);\r\n            t0 = Fp.mul(t3, t1);\r\n            Z3 = Fp.mul(t5, Z3);\r\n            Z3 = Fp.add(Z3, t0); // step 40\r\n            return new Point(X3, Y3, Z3);\r\n        }\r\n        subtract(other) {\r\n            return this.add(other.negate());\r\n        }\r\n        is0() {\r\n            return this.equals(Point.ZERO);\r\n        }\r\n        wNAF(n) {\r\n            return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {\r\n                const toInv = Fp.invertBatch(comp.map((p) => p.pz));\r\n                return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\r\n            });\r\n        }\r\n        /**\r\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\r\n         * It's faster, but should only be used when you don't care about\r\n         * an exposed private key e.g. sig verification, which works over *public* keys.\r\n         */\r\n        multiplyUnsafe(n) {\r\n            const I = Point.ZERO;\r\n            if (n === _0n)\r\n                return I;\r\n            assertGE(n); // Will throw on 0\r\n            if (n === _1n)\r\n                return this;\r\n            const { endo } = CURVE;\r\n            if (!endo)\r\n                return wnaf.unsafeLadder(this, n);\r\n            // Apply endomorphism\r\n            let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\r\n            let k1p = I;\r\n            let k2p = I;\r\n            let d = this;\r\n            while (k1 > _0n || k2 > _0n) {\r\n                if (k1 & _1n)\r\n                    k1p = k1p.add(d);\r\n                if (k2 & _1n)\r\n                    k2p = k2p.add(d);\r\n                d = d.double();\r\n                k1 >>= _1n;\r\n                k2 >>= _1n;\r\n            }\r\n            if (k1neg)\r\n                k1p = k1p.negate();\r\n            if (k2neg)\r\n                k2p = k2p.negate();\r\n            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\r\n            return k1p.add(k2p);\r\n        }\r\n        /**\r\n         * Constant time multiplication.\r\n         * Uses wNAF method. Windowed method may be 10% faster,\r\n         * but takes 2x longer to generate and consumes 2x memory.\r\n         * Uses precomputes when available.\r\n         * Uses endomorphism for Koblitz curves.\r\n         * @param scalar by which the point would be multiplied\r\n         * @returns New point\r\n         */\r\n        multiply(scalar) {\r\n            assertGE(scalar);\r\n            let n = scalar;\r\n            let point, fake; // Fake point is used to const-time mult\r\n            const { endo } = CURVE;\r\n            if (endo) {\r\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\r\n                let { p: k1p, f: f1p } = this.wNAF(k1);\r\n                let { p: k2p, f: f2p } = this.wNAF(k2);\r\n                k1p = wnaf.constTimeNegate(k1neg, k1p);\r\n                k2p = wnaf.constTimeNegate(k2neg, k2p);\r\n                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\r\n                point = k1p.add(k2p);\r\n                fake = f1p.add(f2p);\r\n            }\r\n            else {\r\n                const { p, f } = this.wNAF(n);\r\n                point = p;\r\n                fake = f;\r\n            }\r\n            // Normalize `z` for both points, but return only real one\r\n            return Point.normalizeZ([point, fake])[0];\r\n        }\r\n        /**\r\n         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\r\n         * Not using Strauss-Shamir trick: precomputation tables are faster.\r\n         * The trick could be useful if both P and Q are not G (not in our case).\r\n         * @returns non-zero affine point\r\n         */\r\n        multiplyAndAddUnsafe(Q, a, b) {\r\n            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\r\n            const mul = (P, a // Select faster multiply() method\r\n            ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\r\n            const sum = mul(this, a).add(mul(Q, b));\r\n            return sum.is0() ? undefined : sum;\r\n        }\r\n        // Converts Projective point to affine (x, y) coordinates.\r\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\r\n        // (x, y, z) ∋ (x=x/z, y=y/z)\r\n        toAffine(iz) {\r\n            const { px: x, py: y, pz: z } = this;\r\n            const is0 = this.is0();\r\n            // If invZ was 0, we return zero point. However we still want to execute\r\n            // all operations, so we replace invZ with a random number, 1.\r\n            if (iz == null)\r\n                iz = is0 ? Fp.ONE : Fp.inv(z);\r\n            const ax = Fp.mul(x, iz);\r\n            const ay = Fp.mul(y, iz);\r\n            const zz = Fp.mul(z, iz);\r\n            if (is0)\r\n                return { x: Fp.ZERO, y: Fp.ZERO };\r\n            if (!Fp.eql(zz, Fp.ONE))\r\n                throw new Error('invZ was invalid');\r\n            return { x: ax, y: ay };\r\n        }\r\n        isTorsionFree() {\r\n            const { h: cofactor, isTorsionFree } = CURVE;\r\n            if (cofactor === _1n)\r\n                return true; // No subgroups, always torsion-free\r\n            if (isTorsionFree)\r\n                return isTorsionFree(Point, this);\r\n            throw new Error('isTorsionFree() has not been declared for the elliptic curve');\r\n        }\r\n        clearCofactor() {\r\n            const { h: cofactor, clearCofactor } = CURVE;\r\n            if (cofactor === _1n)\r\n                return this; // Fast-path\r\n            if (clearCofactor)\r\n                return clearCofactor(Point, this);\r\n            return this.multiplyUnsafe(CURVE.h);\r\n        }\r\n        toRawBytes(isCompressed = true) {\r\n            this.assertValidity();\r\n            return toBytes(Point, this, isCompressed);\r\n        }\r\n        toHex(isCompressed = true) {\r\n            return _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToHex(this.toRawBytes(isCompressed));\r\n        }\r\n    }\r\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\r\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\r\n    const _bits = CURVE.nBitLength;\r\n    const wnaf = (0,_curve_js__WEBPACK_IMPORTED_MODULE_0__.wNAF)(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\r\n    // Validate if generator point is on curve\r\n    return {\r\n        CURVE,\r\n        ProjectivePoint: Point,\r\n        normPrivateKeyToScalar,\r\n        weierstrassEquation,\r\n        isWithinCurveOrder,\r\n    };\r\n}\r\nfunction validateOpts(curve) {\r\n    const opts = (0,_curve_js__WEBPACK_IMPORTED_MODULE_0__.validateBasic)(curve);\r\n    _utils_js__WEBPACK_IMPORTED_MODULE_1__.validateObject(opts, {\r\n        hash: 'hash',\r\n        hmac: 'function',\r\n        randomBytes: 'function',\r\n    }, {\r\n        bits2int: 'function',\r\n        bits2int_modN: 'function',\r\n        lowS: 'boolean',\r\n    });\r\n    return Object.freeze({ lowS: true, ...opts });\r\n}\r\nfunction weierstrass(curveDef) {\r\n    const CURVE = validateOpts(curveDef);\r\n    const { Fp, n: CURVE_ORDER } = CURVE;\r\n    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\r\n    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\r\n    function isValidFieldElement(num) {\r\n        return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\r\n    }\r\n    function modN(a) {\r\n        return _modular_js__WEBPACK_IMPORTED_MODULE_2__.mod(a, CURVE_ORDER);\r\n    }\r\n    function invN(a) {\r\n        return _modular_js__WEBPACK_IMPORTED_MODULE_2__.invert(a, CURVE_ORDER);\r\n    }\r\n    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder, } = weierstrassPoints({\r\n        ...CURVE,\r\n        toBytes(_c, point, isCompressed) {\r\n            const a = point.toAffine();\r\n            const x = Fp.toBytes(a.x);\r\n            const cat = _utils_js__WEBPACK_IMPORTED_MODULE_1__.concatBytes;\r\n            if (isCompressed) {\r\n                return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\r\n            }\r\n            else {\r\n                return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\r\n            }\r\n        },\r\n        fromBytes(bytes) {\r\n            const len = bytes.length;\r\n            const head = bytes[0];\r\n            const tail = bytes.subarray(1);\r\n            // this.assertValidity() is done inside of fromHex\r\n            if (len === compressedLen && (head === 0x02 || head === 0x03)) {\r\n                const x = _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberBE(tail);\r\n                if (!isValidFieldElement(x))\r\n                    throw new Error('Point is not on curve');\r\n                const y2 = weierstrassEquation(x); // y² = x³ + ax + b\r\n                let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\r\n                const isYOdd = (y & _1n) === _1n;\r\n                // ECDSA\r\n                const isHeadOdd = (head & 1) === 1;\r\n                if (isHeadOdd !== isYOdd)\r\n                    y = Fp.neg(y);\r\n                return { x, y };\r\n            }\r\n            else if (len === uncompressedLen && head === 0x04) {\r\n                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\r\n                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\r\n                return { x, y };\r\n            }\r\n            else {\r\n                throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);\r\n            }\r\n        },\r\n    });\r\n    const numToNByteStr = (num) => _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToHex(_utils_js__WEBPACK_IMPORTED_MODULE_1__.numberToBytesBE(num, CURVE.nByteLength));\r\n    function isBiggerThanHalfOrder(number) {\r\n        const HALF = CURVE_ORDER >> _1n;\r\n        return number > HALF;\r\n    }\r\n    function normalizeS(s) {\r\n        return isBiggerThanHalfOrder(s) ? modN(-s) : s;\r\n    }\r\n    // slice bytes num\r\n    const slcNum = (b, from, to) => _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberBE(b.slice(from, to));\r\n    /**\r\n     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\r\n     */\r\n    class Signature {\r\n        constructor(r, s, recovery) {\r\n            this.r = r;\r\n            this.s = s;\r\n            this.recovery = recovery;\r\n            this.assertValidity();\r\n        }\r\n        // pair (bytes of r, bytes of s)\r\n        static fromCompact(hex) {\r\n            const l = CURVE.nByteLength;\r\n            hex = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('compactSignature', hex, l * 2);\r\n            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\r\n        }\r\n        // DER encoded ECDSA signature\r\n        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\r\n        static fromDER(hex) {\r\n            const { r, s } = DER.toSig((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('DER', hex));\r\n            return new Signature(r, s);\r\n        }\r\n        assertValidity() {\r\n            // can use assertGE here\r\n            if (!isWithinCurveOrder(this.r))\r\n                throw new Error('r must be 0 < r < CURVE.n');\r\n            if (!isWithinCurveOrder(this.s))\r\n                throw new Error('s must be 0 < s < CURVE.n');\r\n        }\r\n        addRecoveryBit(recovery) {\r\n            return new Signature(this.r, this.s, recovery);\r\n        }\r\n        recoverPublicKey(msgHash) {\r\n            const { r, s, recovery: rec } = this;\r\n            const h = bits2int_modN((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('msgHash', msgHash)); // Truncate hash\r\n            if (rec == null || ![0, 1, 2, 3].includes(rec))\r\n                throw new Error('recovery id invalid');\r\n            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\r\n            if (radj >= Fp.ORDER)\r\n                throw new Error('recovery id 2 or 3 invalid');\r\n            const prefix = (rec & 1) === 0 ? '02' : '03';\r\n            const R = Point.fromHex(prefix + numToNByteStr(radj));\r\n            const ir = invN(radj); // r^-1\r\n            const u1 = modN(-h * ir); // -hr^-1\r\n            const u2 = modN(s * ir); // sr^-1\r\n            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\r\n            if (!Q)\r\n                throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\r\n            Q.assertValidity();\r\n            return Q;\r\n        }\r\n        // Signatures should be low-s, to prevent malleability.\r\n        hasHighS() {\r\n            return isBiggerThanHalfOrder(this.s);\r\n        }\r\n        normalizeS() {\r\n            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\r\n        }\r\n        // DER-encoded\r\n        toDERRawBytes() {\r\n            return _utils_js__WEBPACK_IMPORTED_MODULE_1__.hexToBytes(this.toDERHex());\r\n        }\r\n        toDERHex() {\r\n            return DER.hexFromSig({ r: this.r, s: this.s });\r\n        }\r\n        // padded bytes of r, then padded bytes of s\r\n        toCompactRawBytes() {\r\n            return _utils_js__WEBPACK_IMPORTED_MODULE_1__.hexToBytes(this.toCompactHex());\r\n        }\r\n        toCompactHex() {\r\n            return numToNByteStr(this.r) + numToNByteStr(this.s);\r\n        }\r\n    }\r\n    const utils = {\r\n        isValidPrivateKey(privateKey) {\r\n            try {\r\n                normPrivateKeyToScalar(privateKey);\r\n                return true;\r\n            }\r\n            catch (error) {\r\n                return false;\r\n            }\r\n        },\r\n        normPrivateKeyToScalar: normPrivateKeyToScalar,\r\n        /**\r\n         * Produces cryptographically secure private key from random of size\r\n         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\r\n         */\r\n        randomPrivateKey: () => {\r\n            const length = _modular_js__WEBPACK_IMPORTED_MODULE_2__.getMinHashLength(CURVE.n);\r\n            return _modular_js__WEBPACK_IMPORTED_MODULE_2__.mapHashToField(CURVE.randomBytes(length), CURVE.n);\r\n        },\r\n        /**\r\n         * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\r\n         * Allows to massively speed-up `point.multiply(scalar)`.\r\n         * @returns cached point\r\n         * @example\r\n         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\r\n         * fast.multiply(privKey); // much faster ECDH now\r\n         */\r\n        precompute(windowSize = 8, point = Point.BASE) {\r\n            point._setWindowSize(windowSize);\r\n            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\r\n            return point;\r\n        },\r\n    };\r\n    /**\r\n     * Computes public key for a private key. Checks for validity of the private key.\r\n     * @param privateKey private key\r\n     * @param isCompressed whether to return compact (default), or full key\r\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\r\n     */\r\n    function getPublicKey(privateKey, isCompressed = true) {\r\n        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\r\n    }\r\n    /**\r\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\r\n     */\r\n    function isProbPub(item) {\r\n        const arr = item instanceof Uint8Array;\r\n        const str = typeof item === 'string';\r\n        const len = (arr || str) && item.length;\r\n        if (arr)\r\n            return len === compressedLen || len === uncompressedLen;\r\n        if (str)\r\n            return len === 2 * compressedLen || len === 2 * uncompressedLen;\r\n        if (item instanceof Point)\r\n            return true;\r\n        return false;\r\n    }\r\n    /**\r\n     * ECDH (Elliptic Curve Diffie Hellman).\r\n     * Computes shared public key from private key and public key.\r\n     * Checks: 1) private key validity 2) shared key is on-curve.\r\n     * Does NOT hash the result.\r\n     * @param privateA private key\r\n     * @param publicB different public key\r\n     * @param isCompressed whether to return compact (default), or full key\r\n     * @returns shared public key\r\n     */\r\n    function getSharedSecret(privateA, publicB, isCompressed = true) {\r\n        if (isProbPub(privateA))\r\n            throw new Error('first arg must be private key');\r\n        if (!isProbPub(publicB))\r\n            throw new Error('second arg must be public key');\r\n        const b = Point.fromHex(publicB); // check for being on-curve\r\n        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\r\n    }\r\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\r\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\r\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\r\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\r\n    const bits2int = CURVE.bits2int ||\r\n        function (bytes) {\r\n            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\r\n            // for some cases, since bytes.length * 8 is not actual bitLength.\r\n            const num = _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberBE(bytes); // check for == u8 done here\r\n            const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\r\n            return delta > 0 ? num >> BigInt(delta) : num;\r\n        };\r\n    const bits2int_modN = CURVE.bits2int_modN ||\r\n        function (bytes) {\r\n            return modN(bits2int(bytes)); // can't use bytesToNumberBE here\r\n        };\r\n    // NOTE: pads output with zero as per spec\r\n    const ORDER_MASK = _utils_js__WEBPACK_IMPORTED_MODULE_1__.bitMask(CURVE.nBitLength);\r\n    /**\r\n     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\r\n     */\r\n    function int2octets(num) {\r\n        if (typeof num !== 'bigint')\r\n            throw new Error('bigint expected');\r\n        if (!(_0n <= num && num < ORDER_MASK))\r\n            throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\r\n        // works with order, can have different size than numToField!\r\n        return _utils_js__WEBPACK_IMPORTED_MODULE_1__.numberToBytesBE(num, CURVE.nByteLength);\r\n    }\r\n    // Steps A, D of RFC6979 3.2\r\n    // Creates RFC6979 seed; converts msg/privKey to numbers.\r\n    // Used only in sign, not in verify.\r\n    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\r\n    // Also it can be bigger for P224 + SHA256\r\n    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\r\n        if (['recovered', 'canonical'].some((k) => k in opts))\r\n            throw new Error('sign() legacy options not supported');\r\n        const { hash, randomBytes } = CURVE;\r\n        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\r\n        if (lowS == null)\r\n            lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\r\n        msgHash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('msgHash', msgHash);\r\n        if (prehash)\r\n            msgHash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('prehashed msgHash', hash(msgHash));\r\n        // We can't later call bits2octets, since nested bits2int is broken for curves\r\n        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\r\n        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\r\n        const h1int = bits2int_modN(msgHash);\r\n        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\r\n        const seedArgs = [int2octets(d), int2octets(h1int)];\r\n        // extraEntropy. RFC6979 3.6: additional k' (optional).\r\n        if (ent != null) {\r\n            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\r\n            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\r\n            seedArgs.push((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('extraEntropy', e)); // check for being bytes\r\n        }\r\n        const seed = _utils_js__WEBPACK_IMPORTED_MODULE_1__.concatBytes(...seedArgs); // Step D of RFC6979 3.2\r\n        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\r\n        // Converts signature params into point w r/s, checks result for validity.\r\n        function k2sig(kBytes) {\r\n            // RFC 6979 Section 3.2, step 3: k = bits2int(T)\r\n            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\r\n            if (!isWithinCurveOrder(k))\r\n                return; // Important: all mod() calls here must be done over N\r\n            const ik = invN(k); // k^-1 mod n\r\n            const q = Point.BASE.multiply(k).toAffine(); // q = Gk\r\n            const r = modN(q.x); // r = q.x mod n\r\n            if (r === _0n)\r\n                return;\r\n            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\r\n            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\r\n            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\r\n            const s = modN(ik * modN(m + r * d)); // Not using blinding here\r\n            if (s === _0n)\r\n                return;\r\n            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\r\n            let normS = s;\r\n            if (lowS && isBiggerThanHalfOrder(s)) {\r\n                normS = normalizeS(s); // if lowS was passed, ensure s is always\r\n                recovery ^= 1; // // in the bottom half of N\r\n            }\r\n            return new Signature(r, normS, recovery); // use normS, not s\r\n        }\r\n        return { seed, k2sig };\r\n    }\r\n    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };\r\n    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };\r\n    /**\r\n     * Signs message hash with a private key.\r\n     * ```\r\n     * sign(m, d, k) where\r\n     *   (x, y) = G × k\r\n     *   r = x mod n\r\n     *   s = (m + dr)/k mod n\r\n     * ```\r\n     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\r\n     * @param privKey private key\r\n     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\r\n     * @returns signature with recovery param\r\n     */\r\n    function sign(msgHash, privKey, opts = defaultSigOpts) {\r\n        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\r\n        const C = CURVE;\r\n        const drbg = _utils_js__WEBPACK_IMPORTED_MODULE_1__.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\r\n        return drbg(seed, k2sig); // Steps B, C, D, E, F, G\r\n    }\r\n    // Enable precomputes. Slows down first publicKey computation by 20ms.\r\n    Point.BASE._setWindowSize(8);\r\n    // utils.precompute(8, ProjectivePoint.BASE)\r\n    /**\r\n     * Verifies a signature against message hash and public key.\r\n     * Rejects lowS signatures by default: to override,\r\n     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\r\n     *\r\n     * ```\r\n     * verify(r, s, h, P) where\r\n     *   U1 = hs^-1 mod n\r\n     *   U2 = rs^-1 mod n\r\n     *   R = U1⋅G - U2⋅P\r\n     *   mod(R.x, n) == r\r\n     * ```\r\n     */\r\n    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\r\n        const sg = signature;\r\n        msgHash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('msgHash', msgHash);\r\n        publicKey = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('publicKey', publicKey);\r\n        if ('strict' in opts)\r\n            throw new Error('options.strict was renamed to lowS');\r\n        const { lowS, prehash } = opts;\r\n        let _sig = undefined;\r\n        let P;\r\n        try {\r\n            if (typeof sg === 'string' || sg instanceof Uint8Array) {\r\n                // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\r\n                // Since DER can also be 2*nByteLength bytes, we check for it first.\r\n                try {\r\n                    _sig = Signature.fromDER(sg);\r\n                }\r\n                catch (derError) {\r\n                    if (!(derError instanceof DER.Err))\r\n                        throw derError;\r\n                    _sig = Signature.fromCompact(sg);\r\n                }\r\n            }\r\n            else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\r\n                const { r, s } = sg;\r\n                _sig = new Signature(r, s);\r\n            }\r\n            else {\r\n                throw new Error('PARSE');\r\n            }\r\n            P = Point.fromHex(publicKey);\r\n        }\r\n        catch (error) {\r\n            if (error.message === 'PARSE')\r\n                throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\r\n            return false;\r\n        }\r\n        if (lowS && _sig.hasHighS())\r\n            return false;\r\n        if (prehash)\r\n            msgHash = CURVE.hash(msgHash);\r\n        const { r, s } = _sig;\r\n        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\r\n        const is = invN(s); // s^-1\r\n        const u1 = modN(h * is); // u1 = hs^-1 mod n\r\n        const u2 = modN(r * is); // u2 = rs^-1 mod n\r\n        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\r\n        if (!R)\r\n            return false;\r\n        const v = modN(R.x);\r\n        return v === r;\r\n    }\r\n    return {\r\n        CURVE,\r\n        getPublicKey,\r\n        getSharedSecret,\r\n        sign,\r\n        verify,\r\n        ProjectivePoint: Point,\r\n        Signature,\r\n        utils,\r\n    };\r\n}\r\n/**\r\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\r\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\r\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\r\n * b = False and y = sqrt(Z * (u / v)) otherwise.\r\n * @param Fp\r\n * @param Z\r\n * @returns\r\n */\r\nfunction SWUFpSqrtRatio(Fp, Z) {\r\n    // Generic implementation\r\n    const q = Fp.ORDER;\r\n    let l = _0n;\r\n    for (let o = q - _1n; o % _2n === _0n; o /= _2n)\r\n        l += _1n;\r\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\r\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\r\n    // 2n ** c1 == 2n << (c1-1)\r\n    const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\r\n    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\r\n    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\r\n    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\r\n    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\r\n    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\r\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\r\n    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\r\n    let sqrtRatio = (u, v) => {\r\n        let tv1 = c6; // 1. tv1 = c6\r\n        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\r\n        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\r\n        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\r\n        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\r\n        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\r\n        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\r\n        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\r\n        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\r\n        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\r\n        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\r\n        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\r\n        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\r\n        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\r\n        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\r\n        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\r\n        // 17. for i in (c1, c1 - 1, ..., 2):\r\n        for (let i = c1; i > _1n; i--) {\r\n            let tv5 = i - _2n; // 18.    tv5 = i - 2\r\n            tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\r\n            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\r\n            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\r\n            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\r\n            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\r\n            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\r\n            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\r\n            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\r\n        }\r\n        return { isValid: isQR, value: tv3 };\r\n    };\r\n    if (Fp.ORDER % _4n === _3n) {\r\n        // sqrt_ratio_3mod4(u, v)\r\n        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\r\n        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\r\n        sqrtRatio = (u, v) => {\r\n            let tv1 = Fp.sqr(v); // 1. tv1 = v^2\r\n            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\r\n            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\r\n            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\r\n            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\r\n            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\r\n            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\r\n            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\r\n            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\r\n            return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\r\n        };\r\n    }\r\n    // No curves uses that\r\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\r\n    return sqrtRatio;\r\n}\r\n/**\r\n * Simplified Shallue-van de Woestijne-Ulas Method\r\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\r\n */\r\nfunction mapToCurveSimpleSWU(Fp, opts) {\r\n    _modular_js__WEBPACK_IMPORTED_MODULE_2__.validateField(Fp);\r\n    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\r\n        throw new Error('mapToCurveSimpleSWU: invalid opts');\r\n    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\r\n    if (!Fp.isOdd)\r\n        throw new Error('Fp.isOdd is not implemented!');\r\n    // Input: u, an element of F.\r\n    // Output: (x, y), a point on E.\r\n    return (u) => {\r\n        // prettier-ignore\r\n        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\r\n        tv1 = Fp.sqr(u); // 1.  tv1 = u^2\r\n        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\r\n        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\r\n        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\r\n        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\r\n        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\r\n        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\r\n        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\r\n        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\r\n        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\r\n        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\r\n        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\r\n        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\r\n        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\r\n        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\r\n        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\r\n        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\r\n        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\r\n        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\r\n        y = Fp.mul(y, value); // 20.   y = y * y1\r\n        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\r\n        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\r\n        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\r\n        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\r\n        x = Fp.div(x, tv4); // 25.   x = x / tv4\r\n        return { x, y };\r\n    };\r\n}\r\n//# sourceMappingURL=weierstrass.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/@noble/curves/esm/abstract/weierstrass.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/@noble/curves/esm/secp256k1.js":
/*!*****************************************************!*\
  !*** ./node_modules/@noble/curves/esm/secp256k1.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encodeToCurve: () => (/* binding */ encodeToCurve),\n/* harmony export */   hashToCurve: () => (/* binding */ hashToCurve),\n/* harmony export */   schnorr: () => (/* binding */ schnorr),\n/* harmony export */   secp256k1: () => (/* binding */ secp256k1)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/hashes/sha256 */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/sha256.js\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @noble/hashes/utils */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/utils.js\");\n/* harmony import */ var _abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract/modular.js */ \"(pages-dir-browser)/./node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./abstract/weierstrass.js */ \"(pages-dir-browser)/./node_modules/@noble/curves/esm/abstract/weierstrass.js\");\n/* harmony import */ var _abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./abstract/utils.js */ \"(pages-dir-browser)/./node_modules/@noble/curves/esm/abstract/utils.js\");\n/* harmony import */ var _abstract_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./abstract/hash-to-curve.js */ \"(pages-dir-browser)/./node_modules/@noble/curves/esm/abstract/hash-to-curve.js\");\n/* harmony import */ var _shortw_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_shortw_utils.js */ \"(pages-dir-browser)/./node_modules/@noble/curves/esm/_shortw_utils.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\r\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\r\nconst _1n = BigInt(1);\r\nconst _2n = BigInt(2);\r\nconst divNearest = (a, b) => (a + b / _2n) / b;\r\n/**\r\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\r\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\r\n */\r\nfunction sqrtMod(y) {\r\n    const P = secp256k1P;\r\n    // prettier-ignore\r\n    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\r\n    // prettier-ignore\r\n    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\r\n    const b2 = (y * y * y) % P; // x^3, 11\r\n    const b3 = (b2 * b2 * y) % P; // x^7\r\n    const b6 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b3, _3n, P) * b3) % P;\r\n    const b9 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b6, _3n, P) * b3) % P;\r\n    const b11 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b9, _2n, P) * b2) % P;\r\n    const b22 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b11, _11n, P) * b11) % P;\r\n    const b44 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b22, _22n, P) * b22) % P;\r\n    const b88 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b44, _44n, P) * b44) % P;\r\n    const b176 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b88, _88n, P) * b88) % P;\r\n    const b220 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b176, _44n, P) * b44) % P;\r\n    const b223 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b220, _3n, P) * b3) % P;\r\n    const t1 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b223, _23n, P) * b22) % P;\r\n    const t2 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(t1, _6n, P) * b2) % P;\r\n    const root = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(t2, _2n, P);\r\n    if (!Fp.eql(Fp.sqr(root), y))\r\n        throw new Error('Cannot find square root');\r\n    return root;\r\n}\r\nconst Fp = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.Field)(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\r\nconst secp256k1 = (0,_shortw_utils_js__WEBPACK_IMPORTED_MODULE_1__.createCurve)({\r\n    a: BigInt(0),\r\n    b: BigInt(7),\r\n    Fp,\r\n    n: secp256k1N,\r\n    // Base point (x, y) aka generator point\r\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\r\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\r\n    h: BigInt(1),\r\n    lowS: true,\r\n    /**\r\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\r\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\r\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\r\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\r\n     */\r\n    endo: {\r\n        beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\r\n        splitScalar: (k) => {\r\n            const n = secp256k1N;\r\n            const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\r\n            const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\r\n            const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\r\n            const b2 = a1;\r\n            const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\r\n            const c1 = divNearest(b2 * k, n);\r\n            const c2 = divNearest(-b1 * k, n);\r\n            let k1 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod)(k - c1 * a1 - c2 * a2, n);\r\n            let k2 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod)(-c1 * b1 - c2 * b2, n);\r\n            const k1neg = k1 > POW_2_128;\r\n            const k2neg = k2 > POW_2_128;\r\n            if (k1neg)\r\n                k1 = n - k1;\r\n            if (k2neg)\r\n                k2 = n - k2;\r\n            if (k1 > POW_2_128 || k2 > POW_2_128) {\r\n                throw new Error('splitScalar: Endomorphism failed, k=' + k);\r\n            }\r\n            return { k1neg, k1, k2neg, k2 };\r\n        },\r\n    },\r\n}, _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__.sha256);\r\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\r\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\r\nconst _0n = BigInt(0);\r\nconst fe = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1P;\r\nconst ge = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1N;\r\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\r\nconst TAGGED_HASH_PREFIXES = {};\r\nfunction taggedHash(tag, ...messages) {\r\n    let tagP = TAGGED_HASH_PREFIXES[tag];\r\n    if (tagP === undefined) {\r\n        const tagH = (0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__.sha256)(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\r\n        tagP = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.concatBytes)(tagH, tagH);\r\n        TAGGED_HASH_PREFIXES[tag] = tagP;\r\n    }\r\n    return (0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__.sha256)((0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.concatBytes)(tagP, ...messages));\r\n}\r\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\r\nconst pointToBytes = (point) => point.toRawBytes(true).slice(1);\r\nconst numTo32b = (n) => (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.numberToBytesBE)(n, 32);\r\nconst modP = (x) => (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod)(x, secp256k1P);\r\nconst modN = (x) => (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod)(x, secp256k1N);\r\nconst Point = secp256k1.ProjectivePoint;\r\nconst GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);\r\n// Calculate point, scalar and bytes\r\nfunction schnorrGetExtPubKey(priv) {\r\n    let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\r\n    let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\r\n    const scalar = p.hasEvenY() ? d_ : modN(-d_);\r\n    return { scalar: scalar, bytes: pointToBytes(p) };\r\n}\r\n/**\r\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\r\n * @returns valid point checked for being on-curve\r\n */\r\nfunction lift_x(x) {\r\n    if (!fe(x))\r\n        throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\r\n    const xx = modP(x * x);\r\n    const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\r\n    let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\r\n    if (y % _2n !== _0n)\r\n        y = modP(-y); // Return the unique point P such that x(P) = x and\r\n    const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\r\n    p.assertValidity();\r\n    return p;\r\n}\r\n/**\r\n * Create tagged hash, convert it to bigint, reduce modulo-n.\r\n */\r\nfunction challenge(...args) {\r\n    return modN((0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.bytesToNumberBE)(taggedHash('BIP0340/challenge', ...args)));\r\n}\r\n/**\r\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\r\n */\r\nfunction schnorrGetPublicKey(privateKey) {\r\n    return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\r\n}\r\n/**\r\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\r\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\r\n */\r\nfunction schnorrSign(message, privateKey, auxRand = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_4__.randomBytes)(32)) {\r\n    const m = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.ensureBytes)('message', message);\r\n    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\r\n    const a = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.ensureBytes)('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\r\n    const t = numTo32b(d ^ (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.bytesToNumberBE)(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\r\n    const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\r\n    const k_ = modN((0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.bytesToNumberBE)(rand)); // Let k' = int(rand) mod n\r\n    if (k_ === _0n)\r\n        throw new Error('sign failed: k is zero'); // Fail if k' = 0.\r\n    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\r\n    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\r\n    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\r\n    sig.set(rx, 0);\r\n    sig.set(numTo32b(modN(k + e * d)), 32);\r\n    // If Verify(bytes(P), m, sig) (see below) returns failure, abort\r\n    if (!schnorrVerify(sig, m, px))\r\n        throw new Error('sign: Invalid signature produced');\r\n    return sig;\r\n}\r\n/**\r\n * Verifies Schnorr signature.\r\n * Will swallow errors & return false except for initial type validation of arguments.\r\n */\r\nfunction schnorrVerify(signature, message, publicKey) {\r\n    const sig = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.ensureBytes)('signature', signature, 64);\r\n    const m = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.ensureBytes)('message', message);\r\n    const pub = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.ensureBytes)('publicKey', publicKey, 32);\r\n    try {\r\n        const P = lift_x((0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.bytesToNumberBE)(pub)); // P = lift_x(int(pk)); fail if that fails\r\n        const r = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.bytesToNumberBE)(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\r\n        if (!fe(r))\r\n            return false;\r\n        const s = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.bytesToNumberBE)(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\r\n        if (!ge(s))\r\n            return false;\r\n        const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\r\n        const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\r\n        if (!R || !R.hasEvenY() || R.toAffine().x !== r)\r\n            return false; // -eP == (n-e)P\r\n        return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\r\n    }\r\n    catch (error) {\r\n        return false;\r\n    }\r\n}\r\nconst schnorr = /* @__PURE__ */ (() => ({\r\n    getPublicKey: schnorrGetPublicKey,\r\n    sign: schnorrSign,\r\n    verify: schnorrVerify,\r\n    utils: {\r\n        randomPrivateKey: secp256k1.utils.randomPrivateKey,\r\n        lift_x,\r\n        pointToBytes,\r\n        numberToBytesBE: _abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.numberToBytesBE,\r\n        bytesToNumberBE: _abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.bytesToNumberBE,\r\n        taggedHash,\r\n        mod: _abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod,\r\n    },\r\n}))();\r\nconst isoMap = /* @__PURE__ */ (() => (0,_abstract_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_5__.isogenyMap)(Fp, [\r\n    // xNum\r\n    [\r\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\r\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\r\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\r\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\r\n    ],\r\n    // xDen\r\n    [\r\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\r\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\r\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\r\n    ],\r\n    // yNum\r\n    [\r\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\r\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\r\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\r\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\r\n    ],\r\n    // yDen\r\n    [\r\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\r\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\r\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\r\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\r\n    ],\r\n].map((i) => i.map((j) => BigInt(j)))))();\r\nconst mapSWU = /* @__PURE__ */ (() => (0,_abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_6__.mapToCurveSimpleSWU)(Fp, {\r\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\r\n    B: BigInt('1771'),\r\n    Z: Fp.create(BigInt('-11')),\r\n}))();\r\nconst htf = /* @__PURE__ */ (() => (0,_abstract_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_5__.createHasher)(secp256k1.ProjectivePoint, (scalars) => {\r\n    const { x, y } = mapSWU(Fp.create(scalars[0]));\r\n    return isoMap(x, y);\r\n}, {\r\n    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\r\n    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\r\n    p: Fp.ORDER,\r\n    m: 1,\r\n    k: 128,\r\n    expand: 'xmd',\r\n    hash: _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__.sha256,\r\n}))();\r\nconst hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\r\nconst encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\r\n//# sourceMappingURL=secp256k1.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/@noble/curves/esm/secp256k1.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/@noble/hashes/esm/_assert.js":
/*!***************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/_assert.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bool: () => (/* binding */ bool),\n/* harmony export */   bytes: () => (/* binding */ bytes),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   exists: () => (/* binding */ exists),\n/* harmony export */   hash: () => (/* binding */ hash),\n/* harmony export */   number: () => (/* binding */ number),\n/* harmony export */   output: () => (/* binding */ output)\n/* harmony export */ });\nfunction number(n) {\r\n    if (!Number.isSafeInteger(n) || n < 0)\r\n        throw new Error(`Wrong positive integer: ${n}`);\r\n}\r\nfunction bool(b) {\r\n    if (typeof b !== 'boolean')\r\n        throw new Error(`Expected boolean, not ${b}`);\r\n}\r\nfunction bytes(b, ...lengths) {\r\n    if (!(b instanceof Uint8Array))\r\n        throw new Error('Expected Uint8Array');\r\n    if (lengths.length > 0 && !lengths.includes(b.length))\r\n        throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\r\n}\r\nfunction hash(hash) {\r\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\r\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\r\n    number(hash.outputLen);\r\n    number(hash.blockLen);\r\n}\r\nfunction exists(instance, checkFinished = true) {\r\n    if (instance.destroyed)\r\n        throw new Error('Hash instance has been destroyed');\r\n    if (checkFinished && instance.finished)\r\n        throw new Error('Hash#digest() has already been called');\r\n}\r\nfunction output(out, instance) {\r\n    bytes(out);\r\n    const min = instance.outputLen;\r\n    if (out.length < min) {\r\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\r\n    }\r\n}\r\n\r\nconst assert = { number, bool, bytes, hash, exists, output };\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (assert);\r\n//# sourceMappingURL=_assert.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9fYXNzZXJ0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0EsbURBQW1ELEVBQUU7QUFDckQ7QUFDQTtBQUNBO0FBQ0EsaURBQWlELEVBQUU7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RCxRQUFRLGtCQUFrQixTQUFTO0FBQzVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRkFBaUYsSUFBSTtBQUNyRjtBQUNBO0FBQ3FEO0FBQ3JELGlCQUFpQjtBQUNqQixpRUFBZSxNQUFNLEVBQUM7QUFDdEIiLCJzb3VyY2VzIjpbIkQ6XFxEb19hbjJcXGxlbmRodWJfdjJcXGxlbmRodWItZnJvbnRlbmQtbmV4dGpzXFxub2RlX21vZHVsZXNcXEBub2JsZVxcaGFzaGVzXFxlc21cXF9hc3NlcnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gbnVtYmVyKG4pIHtcclxuICAgIGlmICghTnVtYmVyLmlzU2FmZUludGVnZXIobikgfHwgbiA8IDApXHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBXcm9uZyBwb3NpdGl2ZSBpbnRlZ2VyOiAke259YCk7XHJcbn1cclxuZnVuY3Rpb24gYm9vbChiKSB7XHJcbiAgICBpZiAodHlwZW9mIGIgIT09ICdib29sZWFuJylcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIGJvb2xlYW4sIG5vdCAke2J9YCk7XHJcbn1cclxuZnVuY3Rpb24gYnl0ZXMoYiwgLi4ubGVuZ3Rocykge1xyXG4gICAgaWYgKCEoYiBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKVxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgVWludDhBcnJheScpO1xyXG4gICAgaWYgKGxlbmd0aHMubGVuZ3RoID4gMCAmJiAhbGVuZ3Rocy5pbmNsdWRlcyhiLmxlbmd0aCkpXHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBVaW50OEFycmF5IG9mIGxlbmd0aCAke2xlbmd0aHN9LCBub3Qgb2YgbGVuZ3RoPSR7Yi5sZW5ndGh9YCk7XHJcbn1cclxuZnVuY3Rpb24gaGFzaChoYXNoKSB7XHJcbiAgICBpZiAodHlwZW9mIGhhc2ggIT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGhhc2guY3JlYXRlICE9PSAnZnVuY3Rpb24nKVxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSGFzaCBzaG91bGQgYmUgd3JhcHBlZCBieSB1dGlscy53cmFwQ29uc3RydWN0b3InKTtcclxuICAgIG51bWJlcihoYXNoLm91dHB1dExlbik7XHJcbiAgICBudW1iZXIoaGFzaC5ibG9ja0xlbik7XHJcbn1cclxuZnVuY3Rpb24gZXhpc3RzKGluc3RhbmNlLCBjaGVja0ZpbmlzaGVkID0gdHJ1ZSkge1xyXG4gICAgaWYgKGluc3RhbmNlLmRlc3Ryb3llZClcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0hhc2ggaW5zdGFuY2UgaGFzIGJlZW4gZGVzdHJveWVkJyk7XHJcbiAgICBpZiAoY2hlY2tGaW5pc2hlZCAmJiBpbnN0YW5jZS5maW5pc2hlZClcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0hhc2gjZGlnZXN0KCkgaGFzIGFscmVhZHkgYmVlbiBjYWxsZWQnKTtcclxufVxyXG5mdW5jdGlvbiBvdXRwdXQob3V0LCBpbnN0YW5jZSkge1xyXG4gICAgYnl0ZXMob3V0KTtcclxuICAgIGNvbnN0IG1pbiA9IGluc3RhbmNlLm91dHB1dExlbjtcclxuICAgIGlmIChvdXQubGVuZ3RoIDwgbWluKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBkaWdlc3RJbnRvKCkgZXhwZWN0cyBvdXRwdXQgYnVmZmVyIG9mIGxlbmd0aCBhdCBsZWFzdCAke21pbn1gKTtcclxuICAgIH1cclxufVxyXG5leHBvcnQgeyBudW1iZXIsIGJvb2wsIGJ5dGVzLCBoYXNoLCBleGlzdHMsIG91dHB1dCB9O1xyXG5jb25zdCBhc3NlcnQgPSB7IG51bWJlciwgYm9vbCwgYnl0ZXMsIGhhc2gsIGV4aXN0cywgb3V0cHV0IH07XHJcbmV4cG9ydCBkZWZhdWx0IGFzc2VydDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9X2Fzc2VydC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/@noble/hashes/esm/_assert.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/@noble/hashes/esm/_sha2.js":
/*!*************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/_sha2.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SHA2: () => (/* binding */ SHA2)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_assert.js */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/_assert.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/utils.js\");\n\r\n\r\n// Polyfill for Safari 14\r\nfunction setBigUint64(view, byteOffset, value, isLE) {\r\n    if (typeof view.setBigUint64 === 'function')\r\n        return view.setBigUint64(byteOffset, value, isLE);\r\n    const _32n = BigInt(32);\r\n    const _u32_max = BigInt(0xffffffff);\r\n    const wh = Number((value >> _32n) & _u32_max);\r\n    const wl = Number(value & _u32_max);\r\n    const h = isLE ? 4 : 0;\r\n    const l = isLE ? 0 : 4;\r\n    view.setUint32(byteOffset + h, wh, isLE);\r\n    view.setUint32(byteOffset + l, wl, isLE);\r\n}\r\n// Base SHA2 class (RFC 6234)\r\nclass SHA2 extends _utils_js__WEBPACK_IMPORTED_MODULE_0__.Hash {\r\n    constructor(blockLen, outputLen, padOffset, isLE) {\r\n        super();\r\n        this.blockLen = blockLen;\r\n        this.outputLen = outputLen;\r\n        this.padOffset = padOffset;\r\n        this.isLE = isLE;\r\n        this.finished = false;\r\n        this.length = 0;\r\n        this.pos = 0;\r\n        this.destroyed = false;\r\n        this.buffer = new Uint8Array(blockLen);\r\n        this.view = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(this.buffer);\r\n    }\r\n    update(data) {\r\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.exists)(this);\r\n        const { view, buffer, blockLen } = this;\r\n        data = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(data);\r\n        const len = data.length;\r\n        for (let pos = 0; pos < len;) {\r\n            const take = Math.min(blockLen - this.pos, len - pos);\r\n            // Fast path: we have at least one block in input, cast it to view and process\r\n            if (take === blockLen) {\r\n                const dataView = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(data);\r\n                for (; blockLen <= len - pos; pos += blockLen)\r\n                    this.process(dataView, pos);\r\n                continue;\r\n            }\r\n            buffer.set(data.subarray(pos, pos + take), this.pos);\r\n            this.pos += take;\r\n            pos += take;\r\n            if (this.pos === blockLen) {\r\n                this.process(view, 0);\r\n                this.pos = 0;\r\n            }\r\n        }\r\n        this.length += data.length;\r\n        this.roundClean();\r\n        return this;\r\n    }\r\n    digestInto(out) {\r\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.exists)(this);\r\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.output)(out, this);\r\n        this.finished = true;\r\n        // Padding\r\n        // We can avoid allocation of buffer for padding completely if it\r\n        // was previously not allocated here. But it won't change performance.\r\n        const { buffer, view, blockLen, isLE } = this;\r\n        let { pos } = this;\r\n        // append the bit '1' to the message\r\n        buffer[pos++] = 0b10000000;\r\n        this.buffer.subarray(pos).fill(0);\r\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\r\n        if (this.padOffset > blockLen - pos) {\r\n            this.process(view, 0);\r\n            pos = 0;\r\n        }\r\n        // Pad until full block byte with zeros\r\n        for (let i = pos; i < blockLen; i++)\r\n            buffer[i] = 0;\r\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\r\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\r\n        // So we just write lowest 64 bits of that value.\r\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\r\n        this.process(view, 0);\r\n        const oview = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(out);\r\n        const len = this.outputLen;\r\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\r\n        if (len % 4)\r\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\r\n        const outLen = len / 4;\r\n        const state = this.get();\r\n        if (outLen > state.length)\r\n            throw new Error('_sha2: outputLen bigger than state');\r\n        for (let i = 0; i < outLen; i++)\r\n            oview.setUint32(4 * i, state[i], isLE);\r\n    }\r\n    digest() {\r\n        const { buffer, outputLen } = this;\r\n        this.digestInto(buffer);\r\n        const res = buffer.slice(0, outputLen);\r\n        this.destroy();\r\n        return res;\r\n    }\r\n    _cloneInto(to) {\r\n        to || (to = new this.constructor());\r\n        to.set(...this.get());\r\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\r\n        to.length = length;\r\n        to.pos = pos;\r\n        to.finished = finished;\r\n        to.destroyed = destroyed;\r\n        if (length % blockLen)\r\n            to.buffer.set(buffer);\r\n        return to;\r\n    }\r\n}\r\n//# sourceMappingURL=_sha2.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9fc2hhMi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBOEM7QUFDUztBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sbUJBQW1CLDJDQUFJO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IscURBQVU7QUFDOUI7QUFDQTtBQUNBLFFBQVEsa0RBQU07QUFDZCxnQkFBZ0IseUJBQXlCO0FBQ3pDLGVBQWUsa0RBQU87QUFDdEI7QUFDQSwwQkFBMEIsVUFBVTtBQUNwQztBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMscURBQVU7QUFDM0MsdUJBQXVCLHVCQUF1QjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsa0RBQU07QUFDZCxRQUFRLGtEQUFNO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsK0JBQStCO0FBQy9DLGNBQWMsTUFBTTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsY0FBYztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IscURBQVU7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixZQUFZO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixvQkFBb0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixxREFBcUQ7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkQ6XFxEb19hbjJcXGxlbmRodWJfdjJcXGxlbmRodWItZnJvbnRlbmQtbmV4dGpzXFxub2RlX21vZHVsZXNcXEBub2JsZVxcaGFzaGVzXFxlc21cXF9zaGEyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4aXN0cywgb3V0cHV0IH0gZnJvbSAnLi9fYXNzZXJ0LmpzJztcclxuaW1wb3J0IHsgSGFzaCwgY3JlYXRlVmlldywgdG9CeXRlcyB9IGZyb20gJy4vdXRpbHMuanMnO1xyXG4vLyBQb2x5ZmlsbCBmb3IgU2FmYXJpIDE0XHJcbmZ1bmN0aW9uIHNldEJpZ1VpbnQ2NCh2aWV3LCBieXRlT2Zmc2V0LCB2YWx1ZSwgaXNMRSkge1xyXG4gICAgaWYgKHR5cGVvZiB2aWV3LnNldEJpZ1VpbnQ2NCA9PT0gJ2Z1bmN0aW9uJylcclxuICAgICAgICByZXR1cm4gdmlldy5zZXRCaWdVaW50NjQoYnl0ZU9mZnNldCwgdmFsdWUsIGlzTEUpO1xyXG4gICAgY29uc3QgXzMybiA9IEJpZ0ludCgzMik7XHJcbiAgICBjb25zdCBfdTMyX21heCA9IEJpZ0ludCgweGZmZmZmZmZmKTtcclxuICAgIGNvbnN0IHdoID0gTnVtYmVyKCh2YWx1ZSA+PiBfMzJuKSAmIF91MzJfbWF4KTtcclxuICAgIGNvbnN0IHdsID0gTnVtYmVyKHZhbHVlICYgX3UzMl9tYXgpO1xyXG4gICAgY29uc3QgaCA9IGlzTEUgPyA0IDogMDtcclxuICAgIGNvbnN0IGwgPSBpc0xFID8gMCA6IDQ7XHJcbiAgICB2aWV3LnNldFVpbnQzMihieXRlT2Zmc2V0ICsgaCwgd2gsIGlzTEUpO1xyXG4gICAgdmlldy5zZXRVaW50MzIoYnl0ZU9mZnNldCArIGwsIHdsLCBpc0xFKTtcclxufVxyXG4vLyBCYXNlIFNIQTIgY2xhc3MgKFJGQyA2MjM0KVxyXG5leHBvcnQgY2xhc3MgU0hBMiBleHRlbmRzIEhhc2gge1xyXG4gICAgY29uc3RydWN0b3IoYmxvY2tMZW4sIG91dHB1dExlbiwgcGFkT2Zmc2V0LCBpc0xFKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLmJsb2NrTGVuID0gYmxvY2tMZW47XHJcbiAgICAgICAgdGhpcy5vdXRwdXRMZW4gPSBvdXRwdXRMZW47XHJcbiAgICAgICAgdGhpcy5wYWRPZmZzZXQgPSBwYWRPZmZzZXQ7XHJcbiAgICAgICAgdGhpcy5pc0xFID0gaXNMRTtcclxuICAgICAgICB0aGlzLmZpbmlzaGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5sZW5ndGggPSAwO1xyXG4gICAgICAgIHRoaXMucG9zID0gMDtcclxuICAgICAgICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoYmxvY2tMZW4pO1xyXG4gICAgICAgIHRoaXMudmlldyA9IGNyZWF0ZVZpZXcodGhpcy5idWZmZXIpO1xyXG4gICAgfVxyXG4gICAgdXBkYXRlKGRhdGEpIHtcclxuICAgICAgICBleGlzdHModGhpcyk7XHJcbiAgICAgICAgY29uc3QgeyB2aWV3LCBidWZmZXIsIGJsb2NrTGVuIH0gPSB0aGlzO1xyXG4gICAgICAgIGRhdGEgPSB0b0J5dGVzKGRhdGEpO1xyXG4gICAgICAgIGNvbnN0IGxlbiA9IGRhdGEubGVuZ3RoO1xyXG4gICAgICAgIGZvciAobGV0IHBvcyA9IDA7IHBvcyA8IGxlbjspIHtcclxuICAgICAgICAgICAgY29uc3QgdGFrZSA9IE1hdGgubWluKGJsb2NrTGVuIC0gdGhpcy5wb3MsIGxlbiAtIHBvcyk7XHJcbiAgICAgICAgICAgIC8vIEZhc3QgcGF0aDogd2UgaGF2ZSBhdCBsZWFzdCBvbmUgYmxvY2sgaW4gaW5wdXQsIGNhc3QgaXQgdG8gdmlldyBhbmQgcHJvY2Vzc1xyXG4gICAgICAgICAgICBpZiAodGFrZSA9PT0gYmxvY2tMZW4pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGFWaWV3ID0gY3JlYXRlVmlldyhkYXRhKTtcclxuICAgICAgICAgICAgICAgIGZvciAoOyBibG9ja0xlbiA8PSBsZW4gLSBwb3M7IHBvcyArPSBibG9ja0xlbilcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb2Nlc3MoZGF0YVZpZXcsIHBvcyk7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBidWZmZXIuc2V0KGRhdGEuc3ViYXJyYXkocG9zLCBwb3MgKyB0YWtlKSwgdGhpcy5wb3MpO1xyXG4gICAgICAgICAgICB0aGlzLnBvcyArPSB0YWtlO1xyXG4gICAgICAgICAgICBwb3MgKz0gdGFrZTtcclxuICAgICAgICAgICAgaWYgKHRoaXMucG9zID09PSBibG9ja0xlbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9jZXNzKHZpZXcsIDApO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wb3MgPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubGVuZ3RoICs9IGRhdGEubGVuZ3RoO1xyXG4gICAgICAgIHRoaXMucm91bmRDbGVhbigpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgZGlnZXN0SW50byhvdXQpIHtcclxuICAgICAgICBleGlzdHModGhpcyk7XHJcbiAgICAgICAgb3V0cHV0KG91dCwgdGhpcyk7XHJcbiAgICAgICAgdGhpcy5maW5pc2hlZCA9IHRydWU7XHJcbiAgICAgICAgLy8gUGFkZGluZ1xyXG4gICAgICAgIC8vIFdlIGNhbiBhdm9pZCBhbGxvY2F0aW9uIG9mIGJ1ZmZlciBmb3IgcGFkZGluZyBjb21wbGV0ZWx5IGlmIGl0XHJcbiAgICAgICAgLy8gd2FzIHByZXZpb3VzbHkgbm90IGFsbG9jYXRlZCBoZXJlLiBCdXQgaXQgd29uJ3QgY2hhbmdlIHBlcmZvcm1hbmNlLlxyXG4gICAgICAgIGNvbnN0IHsgYnVmZmVyLCB2aWV3LCBibG9ja0xlbiwgaXNMRSB9ID0gdGhpcztcclxuICAgICAgICBsZXQgeyBwb3MgfSA9IHRoaXM7XHJcbiAgICAgICAgLy8gYXBwZW5kIHRoZSBiaXQgJzEnIHRvIHRoZSBtZXNzYWdlXHJcbiAgICAgICAgYnVmZmVyW3BvcysrXSA9IDBiMTAwMDAwMDA7XHJcbiAgICAgICAgdGhpcy5idWZmZXIuc3ViYXJyYXkocG9zKS5maWxsKDApO1xyXG4gICAgICAgIC8vIHdlIGhhdmUgbGVzcyB0aGFuIHBhZE9mZnNldCBsZWZ0IGluIGJ1ZmZlciwgc28gd2UgY2Fubm90IHB1dCBsZW5ndGggaW4gY3VycmVudCBibG9jaywgbmVlZCBwcm9jZXNzIGl0IGFuZCBwYWQgYWdhaW5cclxuICAgICAgICBpZiAodGhpcy5wYWRPZmZzZXQgPiBibG9ja0xlbiAtIHBvcykge1xyXG4gICAgICAgICAgICB0aGlzLnByb2Nlc3ModmlldywgMCk7XHJcbiAgICAgICAgICAgIHBvcyA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFBhZCB1bnRpbCBmdWxsIGJsb2NrIGJ5dGUgd2l0aCB6ZXJvc1xyXG4gICAgICAgIGZvciAobGV0IGkgPSBwb3M7IGkgPCBibG9ja0xlbjsgaSsrKVxyXG4gICAgICAgICAgICBidWZmZXJbaV0gPSAwO1xyXG4gICAgICAgIC8vIE5vdGU6IHNoYTUxMiByZXF1aXJlcyBsZW5ndGggdG8gYmUgMTI4Yml0IGludGVnZXIsIGJ1dCBsZW5ndGggaW4gSlMgd2lsbCBvdmVyZmxvdyBiZWZvcmUgdGhhdFxyXG4gICAgICAgIC8vIFlvdSBuZWVkIHRvIHdyaXRlIGFyb3VuZCAyIGV4YWJ5dGVzICh1NjRfbWF4IC8gOCAvICgxMDI0Kio2KSkgZm9yIHRoaXMgdG8gaGFwcGVuLlxyXG4gICAgICAgIC8vIFNvIHdlIGp1c3Qgd3JpdGUgbG93ZXN0IDY0IGJpdHMgb2YgdGhhdCB2YWx1ZS5cclxuICAgICAgICBzZXRCaWdVaW50NjQodmlldywgYmxvY2tMZW4gLSA4LCBCaWdJbnQodGhpcy5sZW5ndGggKiA4KSwgaXNMRSk7XHJcbiAgICAgICAgdGhpcy5wcm9jZXNzKHZpZXcsIDApO1xyXG4gICAgICAgIGNvbnN0IG92aWV3ID0gY3JlYXRlVmlldyhvdXQpO1xyXG4gICAgICAgIGNvbnN0IGxlbiA9IHRoaXMub3V0cHV0TGVuO1xyXG4gICAgICAgIC8vIE5PVEU6IHdlIGRvIGRpdmlzaW9uIGJ5IDQgbGF0ZXIsIHdoaWNoIHNob3VsZCBiZSBmdXNlZCBpbiBzaW5nbGUgb3Agd2l0aCBtb2R1bG8gYnkgSklUXHJcbiAgICAgICAgaWYgKGxlbiAlIDQpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignX3NoYTI6IG91dHB1dExlbiBzaG91bGQgYmUgYWxpZ25lZCB0byAzMmJpdCcpO1xyXG4gICAgICAgIGNvbnN0IG91dExlbiA9IGxlbiAvIDQ7XHJcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLmdldCgpO1xyXG4gICAgICAgIGlmIChvdXRMZW4gPiBzdGF0ZS5sZW5ndGgpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignX3NoYTI6IG91dHB1dExlbiBiaWdnZXIgdGhhbiBzdGF0ZScpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3V0TGVuOyBpKyspXHJcbiAgICAgICAgICAgIG92aWV3LnNldFVpbnQzMig0ICogaSwgc3RhdGVbaV0sIGlzTEUpO1xyXG4gICAgfVxyXG4gICAgZGlnZXN0KCkge1xyXG4gICAgICAgIGNvbnN0IHsgYnVmZmVyLCBvdXRwdXRMZW4gfSA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5kaWdlc3RJbnRvKGJ1ZmZlcik7XHJcbiAgICAgICAgY29uc3QgcmVzID0gYnVmZmVyLnNsaWNlKDAsIG91dHB1dExlbik7XHJcbiAgICAgICAgdGhpcy5kZXN0cm95KCk7XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuICAgIF9jbG9uZUludG8odG8pIHtcclxuICAgICAgICB0byB8fCAodG8gPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpKTtcclxuICAgICAgICB0by5zZXQoLi4udGhpcy5nZXQoKSk7XHJcbiAgICAgICAgY29uc3QgeyBibG9ja0xlbiwgYnVmZmVyLCBsZW5ndGgsIGZpbmlzaGVkLCBkZXN0cm95ZWQsIHBvcyB9ID0gdGhpcztcclxuICAgICAgICB0by5sZW5ndGggPSBsZW5ndGg7XHJcbiAgICAgICAgdG8ucG9zID0gcG9zO1xyXG4gICAgICAgIHRvLmZpbmlzaGVkID0gZmluaXNoZWQ7XHJcbiAgICAgICAgdG8uZGVzdHJveWVkID0gZGVzdHJveWVkO1xyXG4gICAgICAgIGlmIChsZW5ndGggJSBibG9ja0xlbilcclxuICAgICAgICAgICAgdG8uYnVmZmVyLnNldChidWZmZXIpO1xyXG4gICAgICAgIHJldHVybiB0bztcclxuICAgIH1cclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1fc2hhMi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/@noble/hashes/esm/_sha2.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/@noble/hashes/esm/_u64.js":
/*!************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/_u64.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   add3H: () => (/* binding */ add3H),\n/* harmony export */   add3L: () => (/* binding */ add3L),\n/* harmony export */   add4H: () => (/* binding */ add4H),\n/* harmony export */   add4L: () => (/* binding */ add4L),\n/* harmony export */   add5H: () => (/* binding */ add5H),\n/* harmony export */   add5L: () => (/* binding */ add5L),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   fromBig: () => (/* binding */ fromBig),\n/* harmony export */   rotlBH: () => (/* binding */ rotlBH),\n/* harmony export */   rotlBL: () => (/* binding */ rotlBL),\n/* harmony export */   rotlSH: () => (/* binding */ rotlSH),\n/* harmony export */   rotlSL: () => (/* binding */ rotlSL),\n/* harmony export */   rotr32H: () => (/* binding */ rotr32H),\n/* harmony export */   rotr32L: () => (/* binding */ rotr32L),\n/* harmony export */   rotrBH: () => (/* binding */ rotrBH),\n/* harmony export */   rotrBL: () => (/* binding */ rotrBL),\n/* harmony export */   rotrSH: () => (/* binding */ rotrSH),\n/* harmony export */   rotrSL: () => (/* binding */ rotrSL),\n/* harmony export */   shrSH: () => (/* binding */ shrSH),\n/* harmony export */   shrSL: () => (/* binding */ shrSL),\n/* harmony export */   split: () => (/* binding */ split),\n/* harmony export */   toBig: () => (/* binding */ toBig)\n/* harmony export */ });\nconst U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\r\nconst _32n = /* @__PURE__ */ BigInt(32);\r\n// We are not using BigUint64Array, because they are extremely slow as per 2022\r\nfunction fromBig(n, le = false) {\r\n    if (le)\r\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\r\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\r\n}\r\nfunction split(lst, le = false) {\r\n    let Ah = new Uint32Array(lst.length);\r\n    let Al = new Uint32Array(lst.length);\r\n    for (let i = 0; i < lst.length; i++) {\r\n        const { h, l } = fromBig(lst[i], le);\r\n        [Ah[i], Al[i]] = [h, l];\r\n    }\r\n    return [Ah, Al];\r\n}\r\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\r\n// for Shift in [0, 32)\r\nconst shrSH = (h, _l, s) => h >>> s;\r\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\r\n// Right rotate for Shift in [1, 32)\r\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\r\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\r\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\r\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\r\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\r\n// Right rotate for shift===32 (just swaps l&h)\r\nconst rotr32H = (_h, l) => l;\r\nconst rotr32L = (h, _l) => h;\r\n// Left rotate for Shift in [1, 32)\r\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\r\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\r\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\r\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\r\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\r\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\r\n// simple take carry out of low bit sum by shift, we need to use division.\r\nfunction add(Ah, Al, Bh, Bl) {\r\n    const l = (Al >>> 0) + (Bl >>> 0);\r\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\r\n}\r\n// Addition with more than 2 elements\r\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\r\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\r\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\r\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\r\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\r\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\r\n// prettier-ignore\r\n\r\n// prettier-ignore\r\nconst u64 = {\r\n    fromBig, split, toBig,\r\n    shrSH, shrSL,\r\n    rotrSH, rotrSL, rotrBH, rotrBL,\r\n    rotr32H, rotr32L,\r\n    rotlSH, rotlSL, rotlBH, rotlBL,\r\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\r\n};\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (u64);\r\n//# sourceMappingURL=_u64.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9fdTY0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsZ0JBQWdCO0FBQ3BDLGdCQUFnQixPQUFPO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDaUw7QUFDakw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWUsR0FBRyxFQUFDO0FBQ25CIiwic291cmNlcyI6WyJEOlxcRG9fYW4yXFxsZW5kaHViX3YyXFxsZW5kaHViLWZyb250ZW5kLW5leHRqc1xcbm9kZV9tb2R1bGVzXFxAbm9ibGVcXGhhc2hlc1xcZXNtXFxfdTY0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFUzMl9NQVNLNjQgPSAvKiBAX19QVVJFX18gKi8gQmlnSW50KDIgKiogMzIgLSAxKTtcclxuY29uc3QgXzMybiA9IC8qIEBfX1BVUkVfXyAqLyBCaWdJbnQoMzIpO1xyXG4vLyBXZSBhcmUgbm90IHVzaW5nIEJpZ1VpbnQ2NEFycmF5LCBiZWNhdXNlIHRoZXkgYXJlIGV4dHJlbWVseSBzbG93IGFzIHBlciAyMDIyXHJcbmZ1bmN0aW9uIGZyb21CaWcobiwgbGUgPSBmYWxzZSkge1xyXG4gICAgaWYgKGxlKVxyXG4gICAgICAgIHJldHVybiB7IGg6IE51bWJlcihuICYgVTMyX01BU0s2NCksIGw6IE51bWJlcigobiA+PiBfMzJuKSAmIFUzMl9NQVNLNjQpIH07XHJcbiAgICByZXR1cm4geyBoOiBOdW1iZXIoKG4gPj4gXzMybikgJiBVMzJfTUFTSzY0KSB8IDAsIGw6IE51bWJlcihuICYgVTMyX01BU0s2NCkgfCAwIH07XHJcbn1cclxuZnVuY3Rpb24gc3BsaXQobHN0LCBsZSA9IGZhbHNlKSB7XHJcbiAgICBsZXQgQWggPSBuZXcgVWludDMyQXJyYXkobHN0Lmxlbmd0aCk7XHJcbiAgICBsZXQgQWwgPSBuZXcgVWludDMyQXJyYXkobHN0Lmxlbmd0aCk7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxzdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IHsgaCwgbCB9ID0gZnJvbUJpZyhsc3RbaV0sIGxlKTtcclxuICAgICAgICBbQWhbaV0sIEFsW2ldXSA9IFtoLCBsXTtcclxuICAgIH1cclxuICAgIHJldHVybiBbQWgsIEFsXTtcclxufVxyXG5jb25zdCB0b0JpZyA9IChoLCBsKSA9PiAoQmlnSW50KGggPj4+IDApIDw8IF8zMm4pIHwgQmlnSW50KGwgPj4+IDApO1xyXG4vLyBmb3IgU2hpZnQgaW4gWzAsIDMyKVxyXG5jb25zdCBzaHJTSCA9IChoLCBfbCwgcykgPT4gaCA+Pj4gcztcclxuY29uc3Qgc2hyU0wgPSAoaCwgbCwgcykgPT4gKGggPDwgKDMyIC0gcykpIHwgKGwgPj4+IHMpO1xyXG4vLyBSaWdodCByb3RhdGUgZm9yIFNoaWZ0IGluIFsxLCAzMilcclxuY29uc3Qgcm90clNIID0gKGgsIGwsIHMpID0+IChoID4+PiBzKSB8IChsIDw8ICgzMiAtIHMpKTtcclxuY29uc3Qgcm90clNMID0gKGgsIGwsIHMpID0+IChoIDw8ICgzMiAtIHMpKSB8IChsID4+PiBzKTtcclxuLy8gUmlnaHQgcm90YXRlIGZvciBTaGlmdCBpbiAoMzIsIDY0KSwgTk9URTogMzIgaXMgc3BlY2lhbCBjYXNlLlxyXG5jb25zdCByb3RyQkggPSAoaCwgbCwgcykgPT4gKGggPDwgKDY0IC0gcykpIHwgKGwgPj4+IChzIC0gMzIpKTtcclxuY29uc3Qgcm90ckJMID0gKGgsIGwsIHMpID0+IChoID4+PiAocyAtIDMyKSkgfCAobCA8PCAoNjQgLSBzKSk7XHJcbi8vIFJpZ2h0IHJvdGF0ZSBmb3Igc2hpZnQ9PT0zMiAoanVzdCBzd2FwcyBsJmgpXHJcbmNvbnN0IHJvdHIzMkggPSAoX2gsIGwpID0+IGw7XHJcbmNvbnN0IHJvdHIzMkwgPSAoaCwgX2wpID0+IGg7XHJcbi8vIExlZnQgcm90YXRlIGZvciBTaGlmdCBpbiBbMSwgMzIpXHJcbmNvbnN0IHJvdGxTSCA9IChoLCBsLCBzKSA9PiAoaCA8PCBzKSB8IChsID4+PiAoMzIgLSBzKSk7XHJcbmNvbnN0IHJvdGxTTCA9IChoLCBsLCBzKSA9PiAobCA8PCBzKSB8IChoID4+PiAoMzIgLSBzKSk7XHJcbi8vIExlZnQgcm90YXRlIGZvciBTaGlmdCBpbiAoMzIsIDY0KSwgTk9URTogMzIgaXMgc3BlY2lhbCBjYXNlLlxyXG5jb25zdCByb3RsQkggPSAoaCwgbCwgcykgPT4gKGwgPDwgKHMgLSAzMikpIHwgKGggPj4+ICg2NCAtIHMpKTtcclxuY29uc3Qgcm90bEJMID0gKGgsIGwsIHMpID0+IChoIDw8IChzIC0gMzIpKSB8IChsID4+PiAoNjQgLSBzKSk7XHJcbi8vIEpTIHVzZXMgMzItYml0IHNpZ25lZCBpbnRlZ2VycyBmb3IgYml0d2lzZSBvcGVyYXRpb25zIHdoaWNoIG1lYW5zIHdlIGNhbm5vdFxyXG4vLyBzaW1wbGUgdGFrZSBjYXJyeSBvdXQgb2YgbG93IGJpdCBzdW0gYnkgc2hpZnQsIHdlIG5lZWQgdG8gdXNlIGRpdmlzaW9uLlxyXG5mdW5jdGlvbiBhZGQoQWgsIEFsLCBCaCwgQmwpIHtcclxuICAgIGNvbnN0IGwgPSAoQWwgPj4+IDApICsgKEJsID4+PiAwKTtcclxuICAgIHJldHVybiB7IGg6IChBaCArIEJoICsgKChsIC8gMiAqKiAzMikgfCAwKSkgfCAwLCBsOiBsIHwgMCB9O1xyXG59XHJcbi8vIEFkZGl0aW9uIHdpdGggbW9yZSB0aGFuIDIgZWxlbWVudHNcclxuY29uc3QgYWRkM0wgPSAoQWwsIEJsLCBDbCkgPT4gKEFsID4+PiAwKSArIChCbCA+Pj4gMCkgKyAoQ2wgPj4+IDApO1xyXG5jb25zdCBhZGQzSCA9IChsb3csIEFoLCBCaCwgQ2gpID0+IChBaCArIEJoICsgQ2ggKyAoKGxvdyAvIDIgKiogMzIpIHwgMCkpIHwgMDtcclxuY29uc3QgYWRkNEwgPSAoQWwsIEJsLCBDbCwgRGwpID0+IChBbCA+Pj4gMCkgKyAoQmwgPj4+IDApICsgKENsID4+PiAwKSArIChEbCA+Pj4gMCk7XHJcbmNvbnN0IGFkZDRIID0gKGxvdywgQWgsIEJoLCBDaCwgRGgpID0+IChBaCArIEJoICsgQ2ggKyBEaCArICgobG93IC8gMiAqKiAzMikgfCAwKSkgfCAwO1xyXG5jb25zdCBhZGQ1TCA9IChBbCwgQmwsIENsLCBEbCwgRWwpID0+IChBbCA+Pj4gMCkgKyAoQmwgPj4+IDApICsgKENsID4+PiAwKSArIChEbCA+Pj4gMCkgKyAoRWwgPj4+IDApO1xyXG5jb25zdCBhZGQ1SCA9IChsb3csIEFoLCBCaCwgQ2gsIERoLCBFaCkgPT4gKEFoICsgQmggKyBDaCArIERoICsgRWggKyAoKGxvdyAvIDIgKiogMzIpIHwgMCkpIHwgMDtcclxuLy8gcHJldHRpZXItaWdub3JlXHJcbmV4cG9ydCB7IGZyb21CaWcsIHNwbGl0LCB0b0JpZywgc2hyU0gsIHNoclNMLCByb3RyU0gsIHJvdHJTTCwgcm90ckJILCByb3RyQkwsIHJvdHIzMkgsIHJvdHIzMkwsIHJvdGxTSCwgcm90bFNMLCByb3RsQkgsIHJvdGxCTCwgYWRkLCBhZGQzTCwgYWRkM0gsIGFkZDRMLCBhZGQ0SCwgYWRkNUgsIGFkZDVMLCB9O1xyXG4vLyBwcmV0dGllci1pZ25vcmVcclxuY29uc3QgdTY0ID0ge1xyXG4gICAgZnJvbUJpZywgc3BsaXQsIHRvQmlnLFxyXG4gICAgc2hyU0gsIHNoclNMLFxyXG4gICAgcm90clNILCByb3RyU0wsIHJvdHJCSCwgcm90ckJMLFxyXG4gICAgcm90cjMySCwgcm90cjMyTCxcclxuICAgIHJvdGxTSCwgcm90bFNMLCByb3RsQkgsIHJvdGxCTCxcclxuICAgIGFkZCwgYWRkM0wsIGFkZDNILCBhZGQ0TCwgYWRkNEgsIGFkZDVILCBhZGQ1TCxcclxufTtcclxuZXhwb3J0IGRlZmF1bHQgdTY0O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1fdTY0LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/@noble/hashes/esm/_u64.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/@noble/hashes/esm/crypto.js":
/*!**************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/crypto.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   crypto: () => (/* binding */ crypto)\n/* harmony export */ });\nconst crypto = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\r\n//# sourceMappingURL=crypto.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9jcnlwdG8uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPO0FBQ1AiLCJzb3VyY2VzIjpbIkQ6XFxEb19hbjJcXGxlbmRodWJfdjJcXGxlbmRodWItZnJvbnRlbmQtbmV4dGpzXFxub2RlX21vZHVsZXNcXEBub2JsZVxcaGFzaGVzXFxlc21cXGNyeXB0by5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgY3J5cHRvID0gdHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnICYmICdjcnlwdG8nIGluIGdsb2JhbFRoaXMgPyBnbG9iYWxUaGlzLmNyeXB0byA6IHVuZGVmaW5lZDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3J5cHRvLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/@noble/hashes/esm/crypto.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/@noble/hashes/esm/hmac.js":
/*!************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/hmac.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HMAC: () => (/* binding */ HMAC),\n/* harmony export */   hmac: () => (/* binding */ hmac)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_assert.js */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/_assert.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/utils.js\");\n\r\n\r\n// HMAC (RFC 2104)\r\nclass HMAC extends _utils_js__WEBPACK_IMPORTED_MODULE_0__.Hash {\r\n    constructor(hash, _key) {\r\n        super();\r\n        this.finished = false;\r\n        this.destroyed = false;\r\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.hash)(hash);\r\n        const key = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(_key);\r\n        this.iHash = hash.create();\r\n        if (typeof this.iHash.update !== 'function')\r\n            throw new Error('Expected instance of class which extends utils.Hash');\r\n        this.blockLen = this.iHash.blockLen;\r\n        this.outputLen = this.iHash.outputLen;\r\n        const blockLen = this.blockLen;\r\n        const pad = new Uint8Array(blockLen);\r\n        // blockLen can be bigger than outputLen\r\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\r\n        for (let i = 0; i < pad.length; i++)\r\n            pad[i] ^= 0x36;\r\n        this.iHash.update(pad);\r\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\r\n        this.oHash = hash.create();\r\n        // Undo internal XOR && apply outer XOR\r\n        for (let i = 0; i < pad.length; i++)\r\n            pad[i] ^= 0x36 ^ 0x5c;\r\n        this.oHash.update(pad);\r\n        pad.fill(0);\r\n    }\r\n    update(buf) {\r\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.exists)(this);\r\n        this.iHash.update(buf);\r\n        return this;\r\n    }\r\n    digestInto(out) {\r\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.exists)(this);\r\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.bytes)(out, this.outputLen);\r\n        this.finished = true;\r\n        this.iHash.digestInto(out);\r\n        this.oHash.update(out);\r\n        this.oHash.digestInto(out);\r\n        this.destroy();\r\n    }\r\n    digest() {\r\n        const out = new Uint8Array(this.oHash.outputLen);\r\n        this.digestInto(out);\r\n        return out;\r\n    }\r\n    _cloneInto(to) {\r\n        // Create new instance without calling constructor since key already in state and we don't know it.\r\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\r\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\r\n        to = to;\r\n        to.finished = finished;\r\n        to.destroyed = destroyed;\r\n        to.blockLen = blockLen;\r\n        to.outputLen = outputLen;\r\n        to.oHash = oHash._cloneInto(to.oHash);\r\n        to.iHash = iHash._cloneInto(to.iHash);\r\n        return to;\r\n    }\r\n    destroy() {\r\n        this.destroyed = true;\r\n        this.oHash.destroy();\r\n        this.iHash.destroy();\r\n    }\r\n}\r\n/**\r\n * HMAC: RFC2104 message authentication code.\r\n * @param hash - function that would be used e.g. sha256\r\n * @param key - message key\r\n * @param message - message data\r\n */\r\nconst hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\r\nhmac.create = (hash, key) => new HMAC(hash, key);\r\n//# sourceMappingURL=hmac.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9obWFjLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBZ0c7QUFDckQ7QUFDM0M7QUFDTyxtQkFBbUIsMkNBQUk7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLGdEQUFVO0FBQ2xCLG9CQUFvQixrREFBTztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0JBQWdCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0JBQWdCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLGtEQUFZO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxrREFBWTtBQUNwQixRQUFRLGlEQUFXO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWlFO0FBQ2pFLGdCQUFnQix5REFBeUQ7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBIiwic291cmNlcyI6WyJEOlxcRG9fYW4yXFxsZW5kaHViX3YyXFxsZW5kaHViLWZyb250ZW5kLW5leHRqc1xcbm9kZV9tb2R1bGVzXFxAbm9ibGVcXGhhc2hlc1xcZXNtXFxobWFjLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGhhc2ggYXMgYXNzZXJ0SGFzaCwgYnl0ZXMgYXMgYXNzZXJ0Qnl0ZXMsIGV4aXN0cyBhcyBhc3NlcnRFeGlzdHMgfSBmcm9tICcuL19hc3NlcnQuanMnO1xyXG5pbXBvcnQgeyBIYXNoLCB0b0J5dGVzIH0gZnJvbSAnLi91dGlscy5qcyc7XHJcbi8vIEhNQUMgKFJGQyAyMTA0KVxyXG5leHBvcnQgY2xhc3MgSE1BQyBleHRlbmRzIEhhc2gge1xyXG4gICAgY29uc3RydWN0b3IoaGFzaCwgX2tleSkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy5maW5pc2hlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XHJcbiAgICAgICAgYXNzZXJ0SGFzaChoYXNoKTtcclxuICAgICAgICBjb25zdCBrZXkgPSB0b0J5dGVzKF9rZXkpO1xyXG4gICAgICAgIHRoaXMuaUhhc2ggPSBoYXNoLmNyZWF0ZSgpO1xyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5pSGFzaC51cGRhdGUgIT09ICdmdW5jdGlvbicpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgaW5zdGFuY2Ugb2YgY2xhc3Mgd2hpY2ggZXh0ZW5kcyB1dGlscy5IYXNoJyk7XHJcbiAgICAgICAgdGhpcy5ibG9ja0xlbiA9IHRoaXMuaUhhc2guYmxvY2tMZW47XHJcbiAgICAgICAgdGhpcy5vdXRwdXRMZW4gPSB0aGlzLmlIYXNoLm91dHB1dExlbjtcclxuICAgICAgICBjb25zdCBibG9ja0xlbiA9IHRoaXMuYmxvY2tMZW47XHJcbiAgICAgICAgY29uc3QgcGFkID0gbmV3IFVpbnQ4QXJyYXkoYmxvY2tMZW4pO1xyXG4gICAgICAgIC8vIGJsb2NrTGVuIGNhbiBiZSBiaWdnZXIgdGhhbiBvdXRwdXRMZW5cclxuICAgICAgICBwYWQuc2V0KGtleS5sZW5ndGggPiBibG9ja0xlbiA/IGhhc2guY3JlYXRlKCkudXBkYXRlKGtleSkuZGlnZXN0KCkgOiBrZXkpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFkLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICBwYWRbaV0gXj0gMHgzNjtcclxuICAgICAgICB0aGlzLmlIYXNoLnVwZGF0ZShwYWQpO1xyXG4gICAgICAgIC8vIEJ5IGRvaW5nIHVwZGF0ZSAocHJvY2Vzc2luZyBvZiBmaXJzdCBibG9jaykgb2Ygb3V0ZXIgaGFzaCBoZXJlIHdlIGNhbiByZS11c2UgaXQgYmV0d2VlbiBtdWx0aXBsZSBjYWxscyB2aWEgY2xvbmVcclxuICAgICAgICB0aGlzLm9IYXNoID0gaGFzaC5jcmVhdGUoKTtcclxuICAgICAgICAvLyBVbmRvIGludGVybmFsIFhPUiAmJiBhcHBseSBvdXRlciBYT1JcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhZC5sZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgcGFkW2ldIF49IDB4MzYgXiAweDVjO1xyXG4gICAgICAgIHRoaXMub0hhc2gudXBkYXRlKHBhZCk7XHJcbiAgICAgICAgcGFkLmZpbGwoMCk7XHJcbiAgICB9XHJcbiAgICB1cGRhdGUoYnVmKSB7XHJcbiAgICAgICAgYXNzZXJ0RXhpc3RzKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuaUhhc2gudXBkYXRlKGJ1Zik7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICBkaWdlc3RJbnRvKG91dCkge1xyXG4gICAgICAgIGFzc2VydEV4aXN0cyh0aGlzKTtcclxuICAgICAgICBhc3NlcnRCeXRlcyhvdXQsIHRoaXMub3V0cHV0TGVuKTtcclxuICAgICAgICB0aGlzLmZpbmlzaGVkID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmlIYXNoLmRpZ2VzdEludG8ob3V0KTtcclxuICAgICAgICB0aGlzLm9IYXNoLnVwZGF0ZShvdXQpO1xyXG4gICAgICAgIHRoaXMub0hhc2guZGlnZXN0SW50byhvdXQpO1xyXG4gICAgICAgIHRoaXMuZGVzdHJveSgpO1xyXG4gICAgfVxyXG4gICAgZGlnZXN0KCkge1xyXG4gICAgICAgIGNvbnN0IG91dCA9IG5ldyBVaW50OEFycmF5KHRoaXMub0hhc2gub3V0cHV0TGVuKTtcclxuICAgICAgICB0aGlzLmRpZ2VzdEludG8ob3V0KTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgX2Nsb25lSW50byh0bykge1xyXG4gICAgICAgIC8vIENyZWF0ZSBuZXcgaW5zdGFuY2Ugd2l0aG91dCBjYWxsaW5nIGNvbnN0cnVjdG9yIHNpbmNlIGtleSBhbHJlYWR5IGluIHN0YXRlIGFuZCB3ZSBkb24ndCBrbm93IGl0LlxyXG4gICAgICAgIHRvIHx8ICh0byA9IE9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLCB7fSkpO1xyXG4gICAgICAgIGNvbnN0IHsgb0hhc2gsIGlIYXNoLCBmaW5pc2hlZCwgZGVzdHJveWVkLCBibG9ja0xlbiwgb3V0cHV0TGVuIH0gPSB0aGlzO1xyXG4gICAgICAgIHRvID0gdG87XHJcbiAgICAgICAgdG8uZmluaXNoZWQgPSBmaW5pc2hlZDtcclxuICAgICAgICB0by5kZXN0cm95ZWQgPSBkZXN0cm95ZWQ7XHJcbiAgICAgICAgdG8uYmxvY2tMZW4gPSBibG9ja0xlbjtcclxuICAgICAgICB0by5vdXRwdXRMZW4gPSBvdXRwdXRMZW47XHJcbiAgICAgICAgdG8ub0hhc2ggPSBvSGFzaC5fY2xvbmVJbnRvKHRvLm9IYXNoKTtcclxuICAgICAgICB0by5pSGFzaCA9IGlIYXNoLl9jbG9uZUludG8odG8uaUhhc2gpO1xyXG4gICAgICAgIHJldHVybiB0bztcclxuICAgIH1cclxuICAgIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgdGhpcy5kZXN0cm95ZWQgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMub0hhc2guZGVzdHJveSgpO1xyXG4gICAgICAgIHRoaXMuaUhhc2guZGVzdHJveSgpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBITUFDOiBSRkMyMTA0IG1lc3NhZ2UgYXV0aGVudGljYXRpb24gY29kZS5cclxuICogQHBhcmFtIGhhc2ggLSBmdW5jdGlvbiB0aGF0IHdvdWxkIGJlIHVzZWQgZS5nLiBzaGEyNTZcclxuICogQHBhcmFtIGtleSAtIG1lc3NhZ2Uga2V5XHJcbiAqIEBwYXJhbSBtZXNzYWdlIC0gbWVzc2FnZSBkYXRhXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgaG1hYyA9IChoYXNoLCBrZXksIG1lc3NhZ2UpID0+IG5ldyBITUFDKGhhc2gsIGtleSkudXBkYXRlKG1lc3NhZ2UpLmRpZ2VzdCgpO1xyXG5obWFjLmNyZWF0ZSA9IChoYXNoLCBrZXkpID0+IG5ldyBITUFDKGhhc2gsIGtleSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhtYWMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/@noble/hashes/esm/hmac.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/@noble/hashes/esm/pbkdf2.js":
/*!**************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/pbkdf2.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pbkdf2: () => (/* binding */ pbkdf2),\n/* harmony export */   pbkdf2Async: () => (/* binding */ pbkdf2Async)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_assert.js */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/_assert.js\");\n/* harmony import */ var _hmac_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./hmac.js */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/hmac.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/utils.js\");\n\r\n\r\n\r\n// Common prologue and epilogue for sync/async functions\r\nfunction pbkdf2Init(hash, _password, _salt, _opts) {\r\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.hash)(hash);\r\n    const opts = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.checkOpts)({ dkLen: 32, asyncTick: 10 }, _opts);\r\n    const { c, dkLen, asyncTick } = opts;\r\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.number)(c);\r\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.number)(dkLen);\r\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.number)(asyncTick);\r\n    if (c < 1)\r\n        throw new Error('PBKDF2: iterations (c) should be >= 1');\r\n    const password = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toBytes)(_password);\r\n    const salt = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toBytes)(_salt);\r\n    // DK = PBKDF2(PRF, Password, Salt, c, dkLen);\r\n    const DK = new Uint8Array(dkLen);\r\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\r\n    const PRF = _hmac_js__WEBPACK_IMPORTED_MODULE_2__.hmac.create(hash, password);\r\n    const PRFSalt = PRF._cloneInto().update(salt);\r\n    return { c, dkLen, asyncTick, DK, PRF, PRFSalt };\r\n}\r\nfunction pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {\r\n    PRF.destroy();\r\n    PRFSalt.destroy();\r\n    if (prfW)\r\n        prfW.destroy();\r\n    u.fill(0);\r\n    return DK;\r\n}\r\n/**\r\n * PBKDF2-HMAC: RFC 2898 key derivation function\r\n * @param hash - hash function that would be used e.g. sha256\r\n * @param password - password from which a derived key is generated\r\n * @param salt - cryptographic salt\r\n * @param opts - {c, dkLen} where c is work factor and dkLen is output message size\r\n */\r\nfunction pbkdf2(hash, password, salt, opts) {\r\n    const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\r\n    let prfW; // Working copy\r\n    const arr = new Uint8Array(4);\r\n    const view = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.createView)(arr);\r\n    const u = new Uint8Array(PRF.outputLen);\r\n    // DK = T1 + T2 + ⋯ + Tdklen/hlen\r\n    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\r\n        // Ti = F(Password, Salt, c, i)\r\n        const Ti = DK.subarray(pos, pos + PRF.outputLen);\r\n        view.setInt32(0, ti, false);\r\n        // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\r\n        // U1 = PRF(Password, Salt + INT_32_BE(i))\r\n        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\r\n        Ti.set(u.subarray(0, Ti.length));\r\n        for (let ui = 1; ui < c; ui++) {\r\n            // Uc = PRF(Password, Uc−1)\r\n            PRF._cloneInto(prfW).update(u).digestInto(u);\r\n            for (let i = 0; i < Ti.length; i++)\r\n                Ti[i] ^= u[i];\r\n        }\r\n    }\r\n    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\r\n}\r\nasync function pbkdf2Async(hash, password, salt, opts) {\r\n    const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\r\n    let prfW; // Working copy\r\n    const arr = new Uint8Array(4);\r\n    const view = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.createView)(arr);\r\n    const u = new Uint8Array(PRF.outputLen);\r\n    // DK = T1 + T2 + ⋯ + Tdklen/hlen\r\n    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\r\n        // Ti = F(Password, Salt, c, i)\r\n        const Ti = DK.subarray(pos, pos + PRF.outputLen);\r\n        view.setInt32(0, ti, false);\r\n        // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\r\n        // U1 = PRF(Password, Salt + INT_32_BE(i))\r\n        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\r\n        Ti.set(u.subarray(0, Ti.length));\r\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.asyncLoop)(c - 1, asyncTick, () => {\r\n            // Uc = PRF(Password, Uc−1)\r\n            PRF._cloneInto(prfW).update(u).digestInto(u);\r\n            for (let i = 0; i < Ti.length; i++)\r\n                Ti[i] ^= u[i];\r\n        });\r\n    }\r\n    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\r\n}\r\n//# sourceMappingURL=pbkdf2.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9wYmtkZjIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBMEU7QUFDekM7QUFDc0M7QUFDdkU7QUFDQTtBQUNBLElBQUksZ0RBQVU7QUFDZCxpQkFBaUIsb0RBQVMsR0FBRywwQkFBMEI7QUFDdkQsWUFBWSxzQkFBc0I7QUFDbEMsSUFBSSxrREFBWTtBQUNoQixJQUFJLGtEQUFZO0FBQ2hCLElBQUksa0RBQVk7QUFDaEI7QUFDQTtBQUNBLHFCQUFxQixrREFBTztBQUM1QixpQkFBaUIsa0RBQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLDBDQUFJO0FBQ3BCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsVUFBVTtBQUM1QjtBQUNPO0FBQ1AsWUFBWSw2QkFBNkI7QUFDekMsY0FBYztBQUNkO0FBQ0EsaUJBQWlCLHFEQUFVO0FBQzNCO0FBQ0E7QUFDQSw4QkFBOEIsYUFBYTtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixRQUFRO0FBQ2pDO0FBQ0E7QUFDQSw0QkFBNEIsZUFBZTtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxZQUFZLHdDQUF3QztBQUNwRCxjQUFjO0FBQ2Q7QUFDQSxpQkFBaUIscURBQVU7QUFDM0I7QUFDQTtBQUNBLDhCQUE4QixhQUFhO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxvREFBUztBQUN2QjtBQUNBO0FBQ0EsNEJBQTRCLGVBQWU7QUFDM0M7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkQ6XFxEb19hbjJcXGxlbmRodWJfdjJcXGxlbmRodWItZnJvbnRlbmQtbmV4dGpzXFxub2RlX21vZHVsZXNcXEBub2JsZVxcaGFzaGVzXFxlc21cXHBia2RmMi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBoYXNoIGFzIGFzc2VydEhhc2gsIG51bWJlciBhcyBhc3NlcnROdW1iZXIgfSBmcm9tICcuL19hc3NlcnQuanMnO1xyXG5pbXBvcnQgeyBobWFjIH0gZnJvbSAnLi9obWFjLmpzJztcclxuaW1wb3J0IHsgY3JlYXRlVmlldywgdG9CeXRlcywgY2hlY2tPcHRzLCBhc3luY0xvb3AgfSBmcm9tICcuL3V0aWxzLmpzJztcclxuLy8gQ29tbW9uIHByb2xvZ3VlIGFuZCBlcGlsb2d1ZSBmb3Igc3luYy9hc3luYyBmdW5jdGlvbnNcclxuZnVuY3Rpb24gcGJrZGYySW5pdChoYXNoLCBfcGFzc3dvcmQsIF9zYWx0LCBfb3B0cykge1xyXG4gICAgYXNzZXJ0SGFzaChoYXNoKTtcclxuICAgIGNvbnN0IG9wdHMgPSBjaGVja09wdHMoeyBka0xlbjogMzIsIGFzeW5jVGljazogMTAgfSwgX29wdHMpO1xyXG4gICAgY29uc3QgeyBjLCBka0xlbiwgYXN5bmNUaWNrIH0gPSBvcHRzO1xyXG4gICAgYXNzZXJ0TnVtYmVyKGMpO1xyXG4gICAgYXNzZXJ0TnVtYmVyKGRrTGVuKTtcclxuICAgIGFzc2VydE51bWJlcihhc3luY1RpY2spO1xyXG4gICAgaWYgKGMgPCAxKVxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUEJLREYyOiBpdGVyYXRpb25zIChjKSBzaG91bGQgYmUgPj0gMScpO1xyXG4gICAgY29uc3QgcGFzc3dvcmQgPSB0b0J5dGVzKF9wYXNzd29yZCk7XHJcbiAgICBjb25zdCBzYWx0ID0gdG9CeXRlcyhfc2FsdCk7XHJcbiAgICAvLyBESyA9IFBCS0RGMihQUkYsIFBhc3N3b3JkLCBTYWx0LCBjLCBka0xlbik7XHJcbiAgICBjb25zdCBESyA9IG5ldyBVaW50OEFycmF5KGRrTGVuKTtcclxuICAgIC8vIFUxID0gUFJGKFBhc3N3b3JkLCBTYWx0ICsgSU5UXzMyX0JFKGkpKVxyXG4gICAgY29uc3QgUFJGID0gaG1hYy5jcmVhdGUoaGFzaCwgcGFzc3dvcmQpO1xyXG4gICAgY29uc3QgUFJGU2FsdCA9IFBSRi5fY2xvbmVJbnRvKCkudXBkYXRlKHNhbHQpO1xyXG4gICAgcmV0dXJuIHsgYywgZGtMZW4sIGFzeW5jVGljaywgREssIFBSRiwgUFJGU2FsdCB9O1xyXG59XHJcbmZ1bmN0aW9uIHBia2RmMk91dHB1dChQUkYsIFBSRlNhbHQsIERLLCBwcmZXLCB1KSB7XHJcbiAgICBQUkYuZGVzdHJveSgpO1xyXG4gICAgUFJGU2FsdC5kZXN0cm95KCk7XHJcbiAgICBpZiAocHJmVylcclxuICAgICAgICBwcmZXLmRlc3Ryb3koKTtcclxuICAgIHUuZmlsbCgwKTtcclxuICAgIHJldHVybiBESztcclxufVxyXG4vKipcclxuICogUEJLREYyLUhNQUM6IFJGQyAyODk4IGtleSBkZXJpdmF0aW9uIGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSBoYXNoIC0gaGFzaCBmdW5jdGlvbiB0aGF0IHdvdWxkIGJlIHVzZWQgZS5nLiBzaGEyNTZcclxuICogQHBhcmFtIHBhc3N3b3JkIC0gcGFzc3dvcmQgZnJvbSB3aGljaCBhIGRlcml2ZWQga2V5IGlzIGdlbmVyYXRlZFxyXG4gKiBAcGFyYW0gc2FsdCAtIGNyeXB0b2dyYXBoaWMgc2FsdFxyXG4gKiBAcGFyYW0gb3B0cyAtIHtjLCBka0xlbn0gd2hlcmUgYyBpcyB3b3JrIGZhY3RvciBhbmQgZGtMZW4gaXMgb3V0cHV0IG1lc3NhZ2Ugc2l6ZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHBia2RmMihoYXNoLCBwYXNzd29yZCwgc2FsdCwgb3B0cykge1xyXG4gICAgY29uc3QgeyBjLCBka0xlbiwgREssIFBSRiwgUFJGU2FsdCB9ID0gcGJrZGYySW5pdChoYXNoLCBwYXNzd29yZCwgc2FsdCwgb3B0cyk7XHJcbiAgICBsZXQgcHJmVzsgLy8gV29ya2luZyBjb3B5XHJcbiAgICBjb25zdCBhcnIgPSBuZXcgVWludDhBcnJheSg0KTtcclxuICAgIGNvbnN0IHZpZXcgPSBjcmVhdGVWaWV3KGFycik7XHJcbiAgICBjb25zdCB1ID0gbmV3IFVpbnQ4QXJyYXkoUFJGLm91dHB1dExlbik7XHJcbiAgICAvLyBESyA9IFQxICsgVDIgKyDii68gKyBUZGtsZW4vaGxlblxyXG4gICAgZm9yIChsZXQgdGkgPSAxLCBwb3MgPSAwOyBwb3MgPCBka0xlbjsgdGkrKywgcG9zICs9IFBSRi5vdXRwdXRMZW4pIHtcclxuICAgICAgICAvLyBUaSA9IEYoUGFzc3dvcmQsIFNhbHQsIGMsIGkpXHJcbiAgICAgICAgY29uc3QgVGkgPSBESy5zdWJhcnJheShwb3MsIHBvcyArIFBSRi5vdXRwdXRMZW4pO1xyXG4gICAgICAgIHZpZXcuc2V0SW50MzIoMCwgdGksIGZhbHNlKTtcclxuICAgICAgICAvLyBGKFBhc3N3b3JkLCBTYWx0LCBjLCBpKSA9IFUxIF4gVTIgXiDii68gXiBVY1xyXG4gICAgICAgIC8vIFUxID0gUFJGKFBhc3N3b3JkLCBTYWx0ICsgSU5UXzMyX0JFKGkpKVxyXG4gICAgICAgIChwcmZXID0gUFJGU2FsdC5fY2xvbmVJbnRvKHByZlcpKS51cGRhdGUoYXJyKS5kaWdlc3RJbnRvKHUpO1xyXG4gICAgICAgIFRpLnNldCh1LnN1YmFycmF5KDAsIFRpLmxlbmd0aCkpO1xyXG4gICAgICAgIGZvciAobGV0IHVpID0gMTsgdWkgPCBjOyB1aSsrKSB7XHJcbiAgICAgICAgICAgIC8vIFVjID0gUFJGKFBhc3N3b3JkLCBVY+KIkjEpXHJcbiAgICAgICAgICAgIFBSRi5fY2xvbmVJbnRvKHByZlcpLnVwZGF0ZSh1KS5kaWdlc3RJbnRvKHUpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IFRpLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICAgICAgVGlbaV0gXj0gdVtpXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcGJrZGYyT3V0cHV0KFBSRiwgUFJGU2FsdCwgREssIHByZlcsIHUpO1xyXG59XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwYmtkZjJBc3luYyhoYXNoLCBwYXNzd29yZCwgc2FsdCwgb3B0cykge1xyXG4gICAgY29uc3QgeyBjLCBka0xlbiwgYXN5bmNUaWNrLCBESywgUFJGLCBQUkZTYWx0IH0gPSBwYmtkZjJJbml0KGhhc2gsIHBhc3N3b3JkLCBzYWx0LCBvcHRzKTtcclxuICAgIGxldCBwcmZXOyAvLyBXb3JraW5nIGNvcHlcclxuICAgIGNvbnN0IGFyciA9IG5ldyBVaW50OEFycmF5KDQpO1xyXG4gICAgY29uc3QgdmlldyA9IGNyZWF0ZVZpZXcoYXJyKTtcclxuICAgIGNvbnN0IHUgPSBuZXcgVWludDhBcnJheShQUkYub3V0cHV0TGVuKTtcclxuICAgIC8vIERLID0gVDEgKyBUMiArIOKLryArIFRka2xlbi9obGVuXHJcbiAgICBmb3IgKGxldCB0aSA9IDEsIHBvcyA9IDA7IHBvcyA8IGRrTGVuOyB0aSsrLCBwb3MgKz0gUFJGLm91dHB1dExlbikge1xyXG4gICAgICAgIC8vIFRpID0gRihQYXNzd29yZCwgU2FsdCwgYywgaSlcclxuICAgICAgICBjb25zdCBUaSA9IERLLnN1YmFycmF5KHBvcywgcG9zICsgUFJGLm91dHB1dExlbik7XHJcbiAgICAgICAgdmlldy5zZXRJbnQzMigwLCB0aSwgZmFsc2UpO1xyXG4gICAgICAgIC8vIEYoUGFzc3dvcmQsIFNhbHQsIGMsIGkpID0gVTEgXiBVMiBeIOKLryBeIFVjXHJcbiAgICAgICAgLy8gVTEgPSBQUkYoUGFzc3dvcmQsIFNhbHQgKyBJTlRfMzJfQkUoaSkpXHJcbiAgICAgICAgKHByZlcgPSBQUkZTYWx0Ll9jbG9uZUludG8ocHJmVykpLnVwZGF0ZShhcnIpLmRpZ2VzdEludG8odSk7XHJcbiAgICAgICAgVGkuc2V0KHUuc3ViYXJyYXkoMCwgVGkubGVuZ3RoKSk7XHJcbiAgICAgICAgYXdhaXQgYXN5bmNMb29wKGMgLSAxLCBhc3luY1RpY2ssICgpID0+IHtcclxuICAgICAgICAgICAgLy8gVWMgPSBQUkYoUGFzc3dvcmQsIFVj4oiSMSlcclxuICAgICAgICAgICAgUFJGLl9jbG9uZUludG8ocHJmVykudXBkYXRlKHUpLmRpZ2VzdEludG8odSk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgVGkubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgICAgICBUaVtpXSBePSB1W2ldO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHBia2RmMk91dHB1dChQUkYsIFBSRlNhbHQsIERLLCBwcmZXLCB1KTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYmtkZjIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/@noble/hashes/esm/pbkdf2.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/@noble/hashes/esm/ripemd160.js":
/*!*****************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/ripemd160.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RIPEMD160: () => (/* binding */ RIPEMD160),\n/* harmony export */   ripemd160: () => (/* binding */ ripemd160)\n/* harmony export */ });\n/* harmony import */ var _sha2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_sha2.js */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/_sha2.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/utils.js\");\n\r\n\r\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\r\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\r\nconst Rho = /* @__PURE__ */ new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);\r\nconst Id = /* @__PURE__ */ Uint8Array.from({ length: 16 }, (_, i) => i);\r\nconst Pi = /* @__PURE__ */ Id.map((i) => (9 * i + 5) % 16);\r\nlet idxL = [Id];\r\nlet idxR = [Pi];\r\nfor (let i = 0; i < 4; i++)\r\n    for (let j of [idxL, idxR])\r\n        j.push(j[i].map((k) => Rho[k]));\r\nconst shifts = /* @__PURE__ */ [\r\n    [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],\r\n    [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],\r\n    [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],\r\n    [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],\r\n    [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5],\r\n].map((i) => new Uint8Array(i));\r\nconst shiftsL = /* @__PURE__ */ idxL.map((idx, i) => idx.map((j) => shifts[i][j]));\r\nconst shiftsR = /* @__PURE__ */ idxR.map((idx, i) => idx.map((j) => shifts[i][j]));\r\nconst Kl = /* @__PURE__ */ new Uint32Array([\r\n    0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e,\r\n]);\r\nconst Kr = /* @__PURE__ */ new Uint32Array([\r\n    0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000,\r\n]);\r\n// The rotate left (circular left shift) operation for uint32\r\nconst rotl = (word, shift) => (word << shift) | (word >>> (32 - shift));\r\n// It's called f() in spec.\r\nfunction f(group, x, y, z) {\r\n    if (group === 0)\r\n        return x ^ y ^ z;\r\n    else if (group === 1)\r\n        return (x & y) | (~x & z);\r\n    else if (group === 2)\r\n        return (x | ~y) ^ z;\r\n    else if (group === 3)\r\n        return (x & z) | (y & ~z);\r\n    else\r\n        return x ^ (y | ~z);\r\n}\r\n// Temporary buffer, not used to store anything between runs\r\nconst BUF = /* @__PURE__ */ new Uint32Array(16);\r\nclass RIPEMD160 extends _sha2_js__WEBPACK_IMPORTED_MODULE_0__.SHA2 {\r\n    constructor() {\r\n        super(64, 20, 8, true);\r\n        this.h0 = 0x67452301 | 0;\r\n        this.h1 = 0xefcdab89 | 0;\r\n        this.h2 = 0x98badcfe | 0;\r\n        this.h3 = 0x10325476 | 0;\r\n        this.h4 = 0xc3d2e1f0 | 0;\r\n    }\r\n    get() {\r\n        const { h0, h1, h2, h3, h4 } = this;\r\n        return [h0, h1, h2, h3, h4];\r\n    }\r\n    set(h0, h1, h2, h3, h4) {\r\n        this.h0 = h0 | 0;\r\n        this.h1 = h1 | 0;\r\n        this.h2 = h2 | 0;\r\n        this.h3 = h3 | 0;\r\n        this.h4 = h4 | 0;\r\n    }\r\n    process(view, offset) {\r\n        for (let i = 0; i < 16; i++, offset += 4)\r\n            BUF[i] = view.getUint32(offset, true);\r\n        // prettier-ignore\r\n        let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;\r\n        // Instead of iterating 0 to 80, we split it into 5 groups\r\n        // And use the groups in constants, functions, etc. Much simpler\r\n        for (let group = 0; group < 5; group++) {\r\n            const rGroup = 4 - group;\r\n            const hbl = Kl[group], hbr = Kr[group]; // prettier-ignore\r\n            const rl = idxL[group], rr = idxR[group]; // prettier-ignore\r\n            const sl = shiftsL[group], sr = shiftsR[group]; // prettier-ignore\r\n            for (let i = 0; i < 16; i++) {\r\n                const tl = (rotl(al + f(group, bl, cl, dl) + BUF[rl[i]] + hbl, sl[i]) + el) | 0;\r\n                al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore\r\n            }\r\n            // 2 loops are 10% faster\r\n            for (let i = 0; i < 16; i++) {\r\n                const tr = (rotl(ar + f(rGroup, br, cr, dr) + BUF[rr[i]] + hbr, sr[i]) + er) | 0;\r\n                ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr; // prettier-ignore\r\n            }\r\n        }\r\n        // Add the compressed chunk to the current hash value\r\n        this.set((this.h1 + cl + dr) | 0, (this.h2 + dl + er) | 0, (this.h3 + el + ar) | 0, (this.h4 + al + br) | 0, (this.h0 + bl + cr) | 0);\r\n    }\r\n    roundClean() {\r\n        BUF.fill(0);\r\n    }\r\n    destroy() {\r\n        this.destroyed = true;\r\n        this.buffer.fill(0);\r\n        this.set(0, 0, 0, 0, 0);\r\n    }\r\n}\r\n/**\r\n * RIPEMD-160 - a hash function from 1990s.\r\n * @param message - msg that would be hashed\r\n */\r\nconst ripemd160 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapConstructor)(() => new RIPEMD160());\r\n//# sourceMappingURL=ripemd160.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9yaXBlbWQxNjAuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFrQztBQUNXO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxZQUFZO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixPQUFPO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sd0JBQXdCLDBDQUFJO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixxQkFBcUI7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsUUFBUTtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLFdBQVc7QUFDdkM7QUFDQSxvREFBb0Q7QUFDcEQsc0RBQXNEO0FBQ3RELDREQUE0RDtBQUM1RCw0QkFBNEIsUUFBUTtBQUNwQztBQUNBLDJFQUEyRTtBQUMzRTtBQUNBO0FBQ0EsNEJBQTRCLFFBQVE7QUFDcEM7QUFDQSwyRUFBMkU7QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sa0NBQWtDLDBEQUFlO0FBQ3hEIiwic291cmNlcyI6WyJEOlxcRG9fYW4yXFxsZW5kaHViX3YyXFxsZW5kaHViLWZyb250ZW5kLW5leHRqc1xcbm9kZV9tb2R1bGVzXFxAbm9ibGVcXGhhc2hlc1xcZXNtXFxyaXBlbWQxNjAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU0hBMiB9IGZyb20gJy4vX3NoYTIuanMnO1xyXG5pbXBvcnQgeyB3cmFwQ29uc3RydWN0b3IgfSBmcm9tICcuL3V0aWxzLmpzJztcclxuLy8gaHR0cHM6Ly9ob21lcy5lc2F0Lmt1bGV1dmVuLmJlL35ib3NzZWxhZS9yaXBlbWQxNjAuaHRtbFxyXG4vLyBodHRwczovL2hvbWVzLmVzYXQua3VsZXV2ZW4uYmUvfmJvc3NlbGFlL3JpcGVtZDE2MC9wZGYvQUItOTYwMS9BQi05NjAxLnBkZlxyXG5jb25zdCBSaG8gPSAvKiBAX19QVVJFX18gKi8gbmV3IFVpbnQ4QXJyYXkoWzcsIDQsIDEzLCAxLCAxMCwgNiwgMTUsIDMsIDEyLCAwLCA5LCA1LCAyLCAxNCwgMTEsIDhdKTtcclxuY29uc3QgSWQgPSAvKiBAX19QVVJFX18gKi8gVWludDhBcnJheS5mcm9tKHsgbGVuZ3RoOiAxNiB9LCAoXywgaSkgPT4gaSk7XHJcbmNvbnN0IFBpID0gLyogQF9fUFVSRV9fICovIElkLm1hcCgoaSkgPT4gKDkgKiBpICsgNSkgJSAxNik7XHJcbmxldCBpZHhMID0gW0lkXTtcclxubGV0IGlkeFIgPSBbUGldO1xyXG5mb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKylcclxuICAgIGZvciAobGV0IGogb2YgW2lkeEwsIGlkeFJdKVxyXG4gICAgICAgIGoucHVzaChqW2ldLm1hcCgoaykgPT4gUmhvW2tdKSk7XHJcbmNvbnN0IHNoaWZ0cyA9IC8qIEBfX1BVUkVfXyAqLyBbXHJcbiAgICBbMTEsIDE0LCAxNSwgMTIsIDUsIDgsIDcsIDksIDExLCAxMywgMTQsIDE1LCA2LCA3LCA5LCA4XSxcclxuICAgIFsxMiwgMTMsIDExLCAxNSwgNiwgOSwgOSwgNywgMTIsIDE1LCAxMSwgMTMsIDcsIDgsIDcsIDddLFxyXG4gICAgWzEzLCAxNSwgMTQsIDExLCA3LCA3LCA2LCA4LCAxMywgMTQsIDEzLCAxMiwgNSwgNSwgNiwgOV0sXHJcbiAgICBbMTQsIDExLCAxMiwgMTQsIDgsIDYsIDUsIDUsIDE1LCAxMiwgMTUsIDE0LCA5LCA5LCA4LCA2XSxcclxuICAgIFsxNSwgMTIsIDEzLCAxMywgOSwgNSwgOCwgNiwgMTQsIDExLCAxMiwgMTEsIDgsIDYsIDUsIDVdLFxyXG5dLm1hcCgoaSkgPT4gbmV3IFVpbnQ4QXJyYXkoaSkpO1xyXG5jb25zdCBzaGlmdHNMID0gLyogQF9fUFVSRV9fICovIGlkeEwubWFwKChpZHgsIGkpID0+IGlkeC5tYXAoKGopID0+IHNoaWZ0c1tpXVtqXSkpO1xyXG5jb25zdCBzaGlmdHNSID0gLyogQF9fUFVSRV9fICovIGlkeFIubWFwKChpZHgsIGkpID0+IGlkeC5tYXAoKGopID0+IHNoaWZ0c1tpXVtqXSkpO1xyXG5jb25zdCBLbCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgVWludDMyQXJyYXkoW1xyXG4gICAgMHgwMDAwMDAwMCwgMHg1YTgyNzk5OSwgMHg2ZWQ5ZWJhMSwgMHg4ZjFiYmNkYywgMHhhOTUzZmQ0ZSxcclxuXSk7XHJcbmNvbnN0IEtyID0gLyogQF9fUFVSRV9fICovIG5ldyBVaW50MzJBcnJheShbXHJcbiAgICAweDUwYTI4YmU2LCAweDVjNGRkMTI0LCAweDZkNzAzZWYzLCAweDdhNmQ3NmU5LCAweDAwMDAwMDAwLFxyXG5dKTtcclxuLy8gVGhlIHJvdGF0ZSBsZWZ0IChjaXJjdWxhciBsZWZ0IHNoaWZ0KSBvcGVyYXRpb24gZm9yIHVpbnQzMlxyXG5jb25zdCByb3RsID0gKHdvcmQsIHNoaWZ0KSA9PiAod29yZCA8PCBzaGlmdCkgfCAod29yZCA+Pj4gKDMyIC0gc2hpZnQpKTtcclxuLy8gSXQncyBjYWxsZWQgZigpIGluIHNwZWMuXHJcbmZ1bmN0aW9uIGYoZ3JvdXAsIHgsIHksIHopIHtcclxuICAgIGlmIChncm91cCA9PT0gMClcclxuICAgICAgICByZXR1cm4geCBeIHkgXiB6O1xyXG4gICAgZWxzZSBpZiAoZ3JvdXAgPT09IDEpXHJcbiAgICAgICAgcmV0dXJuICh4ICYgeSkgfCAofnggJiB6KTtcclxuICAgIGVsc2UgaWYgKGdyb3VwID09PSAyKVxyXG4gICAgICAgIHJldHVybiAoeCB8IH55KSBeIHo7XHJcbiAgICBlbHNlIGlmIChncm91cCA9PT0gMylcclxuICAgICAgICByZXR1cm4gKHggJiB6KSB8ICh5ICYgfnopO1xyXG4gICAgZWxzZVxyXG4gICAgICAgIHJldHVybiB4IF4gKHkgfCB+eik7XHJcbn1cclxuLy8gVGVtcG9yYXJ5IGJ1ZmZlciwgbm90IHVzZWQgdG8gc3RvcmUgYW55dGhpbmcgYmV0d2VlbiBydW5zXHJcbmNvbnN0IEJVRiA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgVWludDMyQXJyYXkoMTYpO1xyXG5leHBvcnQgY2xhc3MgUklQRU1EMTYwIGV4dGVuZHMgU0hBMiB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcig2NCwgMjAsIDgsIHRydWUpO1xyXG4gICAgICAgIHRoaXMuaDAgPSAweDY3NDUyMzAxIHwgMDtcclxuICAgICAgICB0aGlzLmgxID0gMHhlZmNkYWI4OSB8IDA7XHJcbiAgICAgICAgdGhpcy5oMiA9IDB4OThiYWRjZmUgfCAwO1xyXG4gICAgICAgIHRoaXMuaDMgPSAweDEwMzI1NDc2IHwgMDtcclxuICAgICAgICB0aGlzLmg0ID0gMHhjM2QyZTFmMCB8IDA7XHJcbiAgICB9XHJcbiAgICBnZXQoKSB7XHJcbiAgICAgICAgY29uc3QgeyBoMCwgaDEsIGgyLCBoMywgaDQgfSA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIFtoMCwgaDEsIGgyLCBoMywgaDRdO1xyXG4gICAgfVxyXG4gICAgc2V0KGgwLCBoMSwgaDIsIGgzLCBoNCkge1xyXG4gICAgICAgIHRoaXMuaDAgPSBoMCB8IDA7XHJcbiAgICAgICAgdGhpcy5oMSA9IGgxIHwgMDtcclxuICAgICAgICB0aGlzLmgyID0gaDIgfCAwO1xyXG4gICAgICAgIHRoaXMuaDMgPSBoMyB8IDA7XHJcbiAgICAgICAgdGhpcy5oNCA9IGg0IHwgMDtcclxuICAgIH1cclxuICAgIHByb2Nlc3Modmlldywgb2Zmc2V0KSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgaSsrLCBvZmZzZXQgKz0gNClcclxuICAgICAgICAgICAgQlVGW2ldID0gdmlldy5nZXRVaW50MzIob2Zmc2V0LCB0cnVlKTtcclxuICAgICAgICAvLyBwcmV0dGllci1pZ25vcmVcclxuICAgICAgICBsZXQgYWwgPSB0aGlzLmgwIHwgMCwgYXIgPSBhbCwgYmwgPSB0aGlzLmgxIHwgMCwgYnIgPSBibCwgY2wgPSB0aGlzLmgyIHwgMCwgY3IgPSBjbCwgZGwgPSB0aGlzLmgzIHwgMCwgZHIgPSBkbCwgZWwgPSB0aGlzLmg0IHwgMCwgZXIgPSBlbDtcclxuICAgICAgICAvLyBJbnN0ZWFkIG9mIGl0ZXJhdGluZyAwIHRvIDgwLCB3ZSBzcGxpdCBpdCBpbnRvIDUgZ3JvdXBzXHJcbiAgICAgICAgLy8gQW5kIHVzZSB0aGUgZ3JvdXBzIGluIGNvbnN0YW50cywgZnVuY3Rpb25zLCBldGMuIE11Y2ggc2ltcGxlclxyXG4gICAgICAgIGZvciAobGV0IGdyb3VwID0gMDsgZ3JvdXAgPCA1OyBncm91cCsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJHcm91cCA9IDQgLSBncm91cDtcclxuICAgICAgICAgICAgY29uc3QgaGJsID0gS2xbZ3JvdXBdLCBoYnIgPSBLcltncm91cF07IC8vIHByZXR0aWVyLWlnbm9yZVxyXG4gICAgICAgICAgICBjb25zdCBybCA9IGlkeExbZ3JvdXBdLCByciA9IGlkeFJbZ3JvdXBdOyAvLyBwcmV0dGllci1pZ25vcmVcclxuICAgICAgICAgICAgY29uc3Qgc2wgPSBzaGlmdHNMW2dyb3VwXSwgc3IgPSBzaGlmdHNSW2dyb3VwXTsgLy8gcHJldHRpZXItaWdub3JlXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGwgPSAocm90bChhbCArIGYoZ3JvdXAsIGJsLCBjbCwgZGwpICsgQlVGW3JsW2ldXSArIGhibCwgc2xbaV0pICsgZWwpIHwgMDtcclxuICAgICAgICAgICAgICAgIGFsID0gZWwsIGVsID0gZGwsIGRsID0gcm90bChjbCwgMTApIHwgMCwgY2wgPSBibCwgYmwgPSB0bDsgLy8gcHJldHRpZXItaWdub3JlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gMiBsb29wcyBhcmUgMTAlIGZhc3RlclxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRyID0gKHJvdGwoYXIgKyBmKHJHcm91cCwgYnIsIGNyLCBkcikgKyBCVUZbcnJbaV1dICsgaGJyLCBzcltpXSkgKyBlcikgfCAwO1xyXG4gICAgICAgICAgICAgICAgYXIgPSBlciwgZXIgPSBkciwgZHIgPSByb3RsKGNyLCAxMCkgfCAwLCBjciA9IGJyLCBiciA9IHRyOyAvLyBwcmV0dGllci1pZ25vcmVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBBZGQgdGhlIGNvbXByZXNzZWQgY2h1bmsgdG8gdGhlIGN1cnJlbnQgaGFzaCB2YWx1ZVxyXG4gICAgICAgIHRoaXMuc2V0KCh0aGlzLmgxICsgY2wgKyBkcikgfCAwLCAodGhpcy5oMiArIGRsICsgZXIpIHwgMCwgKHRoaXMuaDMgKyBlbCArIGFyKSB8IDAsICh0aGlzLmg0ICsgYWwgKyBicikgfCAwLCAodGhpcy5oMCArIGJsICsgY3IpIHwgMCk7XHJcbiAgICB9XHJcbiAgICByb3VuZENsZWFuKCkge1xyXG4gICAgICAgIEJVRi5maWxsKDApO1xyXG4gICAgfVxyXG4gICAgZGVzdHJveSgpIHtcclxuICAgICAgICB0aGlzLmRlc3Ryb3llZCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5idWZmZXIuZmlsbCgwKTtcclxuICAgICAgICB0aGlzLnNldCgwLCAwLCAwLCAwLCAwKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogUklQRU1ELTE2MCAtIGEgaGFzaCBmdW5jdGlvbiBmcm9tIDE5OTBzLlxyXG4gKiBAcGFyYW0gbWVzc2FnZSAtIG1zZyB0aGF0IHdvdWxkIGJlIGhhc2hlZFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHJpcGVtZDE2MCA9IC8qIEBfX1BVUkVfXyAqLyB3cmFwQ29uc3RydWN0b3IoKCkgPT4gbmV3IFJJUEVNRDE2MCgpKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmlwZW1kMTYwLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/@noble/hashes/esm/ripemd160.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/@noble/hashes/esm/scrypt.js":
/*!**************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/scrypt.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   scrypt: () => (/* binding */ scrypt),\n/* harmony export */   scryptAsync: () => (/* binding */ scryptAsync)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_assert.js */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/_assert.js\");\n/* harmony import */ var _sha256_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sha256.js */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/sha256.js\");\n/* harmony import */ var _pbkdf2_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pbkdf2.js */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/pbkdf2.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/utils.js\");\n\r\n\r\n\r\n\r\n// RFC 7914 Scrypt KDF\r\n// Left rotate for uint32\r\nconst rotl = (a, b) => (a << b) | (a >>> (32 - b));\r\n// The main Scrypt loop: uses Salsa extensively.\r\n// Six versions of the function were tried, this is the fastest one.\r\n// prettier-ignore\r\nfunction XorAndSalsa(prev, pi, input, ii, out, oi) {\r\n    // Based on https://cr.yp.to/salsa20.html\r\n    // Xor blocks\r\n    let y00 = prev[pi++] ^ input[ii++], y01 = prev[pi++] ^ input[ii++];\r\n    let y02 = prev[pi++] ^ input[ii++], y03 = prev[pi++] ^ input[ii++];\r\n    let y04 = prev[pi++] ^ input[ii++], y05 = prev[pi++] ^ input[ii++];\r\n    let y06 = prev[pi++] ^ input[ii++], y07 = prev[pi++] ^ input[ii++];\r\n    let y08 = prev[pi++] ^ input[ii++], y09 = prev[pi++] ^ input[ii++];\r\n    let y10 = prev[pi++] ^ input[ii++], y11 = prev[pi++] ^ input[ii++];\r\n    let y12 = prev[pi++] ^ input[ii++], y13 = prev[pi++] ^ input[ii++];\r\n    let y14 = prev[pi++] ^ input[ii++], y15 = prev[pi++] ^ input[ii++];\r\n    // Save state to temporary variables (salsa)\r\n    let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;\r\n    // Main loop (salsa)\r\n    for (let i = 0; i < 8; i += 2) {\r\n        x04 ^= rotl(x00 + x12 | 0, 7);\r\n        x08 ^= rotl(x04 + x00 | 0, 9);\r\n        x12 ^= rotl(x08 + x04 | 0, 13);\r\n        x00 ^= rotl(x12 + x08 | 0, 18);\r\n        x09 ^= rotl(x05 + x01 | 0, 7);\r\n        x13 ^= rotl(x09 + x05 | 0, 9);\r\n        x01 ^= rotl(x13 + x09 | 0, 13);\r\n        x05 ^= rotl(x01 + x13 | 0, 18);\r\n        x14 ^= rotl(x10 + x06 | 0, 7);\r\n        x02 ^= rotl(x14 + x10 | 0, 9);\r\n        x06 ^= rotl(x02 + x14 | 0, 13);\r\n        x10 ^= rotl(x06 + x02 | 0, 18);\r\n        x03 ^= rotl(x15 + x11 | 0, 7);\r\n        x07 ^= rotl(x03 + x15 | 0, 9);\r\n        x11 ^= rotl(x07 + x03 | 0, 13);\r\n        x15 ^= rotl(x11 + x07 | 0, 18);\r\n        x01 ^= rotl(x00 + x03 | 0, 7);\r\n        x02 ^= rotl(x01 + x00 | 0, 9);\r\n        x03 ^= rotl(x02 + x01 | 0, 13);\r\n        x00 ^= rotl(x03 + x02 | 0, 18);\r\n        x06 ^= rotl(x05 + x04 | 0, 7);\r\n        x07 ^= rotl(x06 + x05 | 0, 9);\r\n        x04 ^= rotl(x07 + x06 | 0, 13);\r\n        x05 ^= rotl(x04 + x07 | 0, 18);\r\n        x11 ^= rotl(x10 + x09 | 0, 7);\r\n        x08 ^= rotl(x11 + x10 | 0, 9);\r\n        x09 ^= rotl(x08 + x11 | 0, 13);\r\n        x10 ^= rotl(x09 + x08 | 0, 18);\r\n        x12 ^= rotl(x15 + x14 | 0, 7);\r\n        x13 ^= rotl(x12 + x15 | 0, 9);\r\n        x14 ^= rotl(x13 + x12 | 0, 13);\r\n        x15 ^= rotl(x14 + x13 | 0, 18);\r\n    }\r\n    // Write output (salsa)\r\n    out[oi++] = (y00 + x00) | 0;\r\n    out[oi++] = (y01 + x01) | 0;\r\n    out[oi++] = (y02 + x02) | 0;\r\n    out[oi++] = (y03 + x03) | 0;\r\n    out[oi++] = (y04 + x04) | 0;\r\n    out[oi++] = (y05 + x05) | 0;\r\n    out[oi++] = (y06 + x06) | 0;\r\n    out[oi++] = (y07 + x07) | 0;\r\n    out[oi++] = (y08 + x08) | 0;\r\n    out[oi++] = (y09 + x09) | 0;\r\n    out[oi++] = (y10 + x10) | 0;\r\n    out[oi++] = (y11 + x11) | 0;\r\n    out[oi++] = (y12 + x12) | 0;\r\n    out[oi++] = (y13 + x13) | 0;\r\n    out[oi++] = (y14 + x14) | 0;\r\n    out[oi++] = (y15 + x15) | 0;\r\n}\r\nfunction BlockMix(input, ii, out, oi, r) {\r\n    // The block B is r 128-byte chunks (which is equivalent of 2r 64-byte chunks)\r\n    let head = oi + 0;\r\n    let tail = oi + 16 * r;\r\n    for (let i = 0; i < 16; i++)\r\n        out[tail + i] = input[ii + (2 * r - 1) * 16 + i]; // X ← B[2r−1]\r\n    for (let i = 0; i < r; i++, head += 16, ii += 16) {\r\n        // We write odd & even Yi at same time. Even: 0bXXXXX0 Odd:  0bXXXXX1\r\n        XorAndSalsa(out, tail, input, ii, out, head); // head[i] = Salsa(blockIn[2*i] ^ tail[i-1])\r\n        if (i > 0)\r\n            tail += 16; // First iteration overwrites tmp value in tail\r\n        XorAndSalsa(out, head, input, (ii += 16), out, tail); // tail[i] = Salsa(blockIn[2*i+1] ^ head[i])\r\n    }\r\n}\r\n// Common prologue and epilogue for sync/async functions\r\nfunction scryptInit(password, salt, _opts) {\r\n    // Maxmem - 1GB+1KB by default\r\n    const opts = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.checkOpts)({\r\n        dkLen: 32,\r\n        asyncTick: 10,\r\n        maxmem: 1024 ** 3 + 1024,\r\n    }, _opts);\r\n    const { N, r, p, dkLen, asyncTick, maxmem, onProgress } = opts;\r\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.number)(N);\r\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.number)(r);\r\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.number)(p);\r\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.number)(dkLen);\r\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.number)(asyncTick);\r\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.number)(maxmem);\r\n    if (onProgress !== undefined && typeof onProgress !== 'function')\r\n        throw new Error('progressCb should be function');\r\n    const blockSize = 128 * r;\r\n    const blockSize32 = blockSize / 4;\r\n    if (N <= 1 || (N & (N - 1)) !== 0 || N >= 2 ** (blockSize / 8) || N > 2 ** 32) {\r\n        // NOTE: we limit N to be less than 2**32 because of 32 bit variant of Integrify function\r\n        // There is no JS engines that allows alocate more than 4GB per single Uint8Array for now, but can change in future.\r\n        throw new Error('Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32');\r\n    }\r\n    if (p < 0 || p > ((2 ** 32 - 1) * 32) / blockSize) {\r\n        throw new Error('Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)');\r\n    }\r\n    if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) {\r\n        throw new Error('Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32');\r\n    }\r\n    const memUsed = blockSize * (N + p);\r\n    if (memUsed > maxmem) {\r\n        throw new Error(`Scrypt: parameters too large, ${memUsed} (128 * r * (N + p)) > ${maxmem} (maxmem)`);\r\n    }\r\n    // [B0...Bp−1] ← PBKDF2HMAC-SHA256(Passphrase, Salt, 1, blockSize*ParallelizationFactor)\r\n    // Since it has only one iteration there is no reason to use async variant\r\n    const B = (0,_pbkdf2_js__WEBPACK_IMPORTED_MODULE_2__.pbkdf2)(_sha256_js__WEBPACK_IMPORTED_MODULE_3__.sha256, password, salt, { c: 1, dkLen: blockSize * p });\r\n    const B32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(B);\r\n    // Re-used between parallel iterations. Array(iterations) of B\r\n    const V = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(new Uint8Array(blockSize * N));\r\n    const tmp = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(new Uint8Array(blockSize));\r\n    let blockMixCb = () => { };\r\n    if (onProgress) {\r\n        const totalBlockMix = 2 * N * p;\r\n        // Invoke callback if progress changes from 10.01 to 10.02\r\n        // Allows to draw smooth progress bar on up to 8K screen\r\n        const callbackPer = Math.max(Math.floor(totalBlockMix / 10000), 1);\r\n        let blockMixCnt = 0;\r\n        blockMixCb = () => {\r\n            blockMixCnt++;\r\n            if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix))\r\n                onProgress(blockMixCnt / totalBlockMix);\r\n        };\r\n    }\r\n    return { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick };\r\n}\r\nfunction scryptOutput(password, dkLen, B, V, tmp) {\r\n    const res = (0,_pbkdf2_js__WEBPACK_IMPORTED_MODULE_2__.pbkdf2)(_sha256_js__WEBPACK_IMPORTED_MODULE_3__.sha256, password, B, { c: 1, dkLen });\r\n    B.fill(0);\r\n    V.fill(0);\r\n    tmp.fill(0);\r\n    return res;\r\n}\r\n/**\r\n * Scrypt KDF from RFC 7914.\r\n * @param password - pass\r\n * @param salt - salt\r\n * @param opts - parameters\r\n * - `N` is cpu/mem work factor (power of 2 e.g. 2**18)\r\n * - `r` is block size (8 is common), fine-tunes sequential memory read size and performance\r\n * - `p` is parallelization factor (1 is common)\r\n * - `dkLen` is output key length in bytes e.g. 32.\r\n * - `asyncTick` - (default: 10) max time in ms for which async function can block execution\r\n * - `maxmem` - (default: `1024 ** 3 + 1024` aka 1GB+1KB). A limit that the app could use for scrypt\r\n * - `onProgress` - callback function that would be executed for progress report\r\n * @returns Derived key\r\n */\r\nfunction scrypt(password, salt, opts) {\r\n    const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb } = scryptInit(password, salt, opts);\r\n    for (let pi = 0; pi < p; pi++) {\r\n        const Pi = blockSize32 * pi;\r\n        for (let i = 0; i < blockSize32; i++)\r\n            V[i] = B32[Pi + i]; // V[0] = B[i]\r\n        for (let i = 0, pos = 0; i < N - 1; i++) {\r\n            BlockMix(V, pos, V, (pos += blockSize32), r); // V[i] = BlockMix(V[i-1]);\r\n            blockMixCb();\r\n        }\r\n        BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element\r\n        blockMixCb();\r\n        for (let i = 0; i < N; i++) {\r\n            // First u32 of the last 64-byte block (u32 is LE)\r\n            const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations\r\n            for (let k = 0; k < blockSize32; k++)\r\n                tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]\r\n            BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])\r\n            blockMixCb();\r\n        }\r\n    }\r\n    return scryptOutput(password, dkLen, B, V, tmp);\r\n}\r\n/**\r\n * Scrypt KDF from RFC 7914.\r\n */\r\nasync function scryptAsync(password, salt, opts) {\r\n    const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick } = scryptInit(password, salt, opts);\r\n    for (let pi = 0; pi < p; pi++) {\r\n        const Pi = blockSize32 * pi;\r\n        for (let i = 0; i < blockSize32; i++)\r\n            V[i] = B32[Pi + i]; // V[0] = B[i]\r\n        let pos = 0;\r\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.asyncLoop)(N - 1, asyncTick, () => {\r\n            BlockMix(V, pos, V, (pos += blockSize32), r); // V[i] = BlockMix(V[i-1]);\r\n            blockMixCb();\r\n        });\r\n        BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element\r\n        blockMixCb();\r\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.asyncLoop)(N, asyncTick, () => {\r\n            // First u32 of the last 64-byte block (u32 is LE)\r\n            const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations\r\n            for (let k = 0; k < blockSize32; k++)\r\n                tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]\r\n            BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])\r\n            blockMixCb();\r\n        });\r\n    }\r\n    return scryptOutput(password, dkLen, B, V, tmp);\r\n}\r\n//# sourceMappingURL=scrypt.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/@noble/hashes/esm/scrypt.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/@noble/hashes/esm/sha256.js":
/*!**************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/sha256.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sha224: () => (/* binding */ sha224),\n/* harmony export */   sha256: () => (/* binding */ sha256)\n/* harmony export */ });\n/* harmony import */ var _sha2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_sha2.js */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/_sha2.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/utils.js\");\n\r\n\r\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\r\n// BTC network is doing 2^67 hashes/sec as per early 2023.\r\n// Choice: a ? b : c\r\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\r\n// Majority function, true if any two inpust is true\r\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\r\n// Round constants:\r\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\r\n// prettier-ignore\r\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\r\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\r\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\r\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\r\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\r\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\r\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\r\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\r\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\r\n]);\r\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\r\n// prettier-ignore\r\nconst IV = /* @__PURE__ */ new Uint32Array([\r\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\r\n]);\r\n// Temporary buffer, not used to store anything between runs\r\n// Named this way because it matches specification.\r\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\r\nclass SHA256 extends _sha2_js__WEBPACK_IMPORTED_MODULE_0__.SHA2 {\r\n    constructor() {\r\n        super(64, 32, 8, false);\r\n        // We cannot use array here since array allows indexing by variable\r\n        // which means optimizer/compiler cannot use registers.\r\n        this.A = IV[0] | 0;\r\n        this.B = IV[1] | 0;\r\n        this.C = IV[2] | 0;\r\n        this.D = IV[3] | 0;\r\n        this.E = IV[4] | 0;\r\n        this.F = IV[5] | 0;\r\n        this.G = IV[6] | 0;\r\n        this.H = IV[7] | 0;\r\n    }\r\n    get() {\r\n        const { A, B, C, D, E, F, G, H } = this;\r\n        return [A, B, C, D, E, F, G, H];\r\n    }\r\n    // prettier-ignore\r\n    set(A, B, C, D, E, F, G, H) {\r\n        this.A = A | 0;\r\n        this.B = B | 0;\r\n        this.C = C | 0;\r\n        this.D = D | 0;\r\n        this.E = E | 0;\r\n        this.F = F | 0;\r\n        this.G = G | 0;\r\n        this.H = H | 0;\r\n    }\r\n    process(view, offset) {\r\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\r\n        for (let i = 0; i < 16; i++, offset += 4)\r\n            SHA256_W[i] = view.getUint32(offset, false);\r\n        for (let i = 16; i < 64; i++) {\r\n            const W15 = SHA256_W[i - 15];\r\n            const W2 = SHA256_W[i - 2];\r\n            const s0 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W15, 7) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W15, 18) ^ (W15 >>> 3);\r\n            const s1 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W2, 17) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W2, 19) ^ (W2 >>> 10);\r\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\r\n        }\r\n        // Compression function main loop, 64 rounds\r\n        let { A, B, C, D, E, F, G, H } = this;\r\n        for (let i = 0; i < 64; i++) {\r\n            const sigma1 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(E, 6) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(E, 11) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(E, 25);\r\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\r\n            const sigma0 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(A, 2) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(A, 13) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(A, 22);\r\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\r\n            H = G;\r\n            G = F;\r\n            F = E;\r\n            E = (D + T1) | 0;\r\n            D = C;\r\n            C = B;\r\n            B = A;\r\n            A = (T1 + T2) | 0;\r\n        }\r\n        // Add the compressed chunk to the current hash value\r\n        A = (A + this.A) | 0;\r\n        B = (B + this.B) | 0;\r\n        C = (C + this.C) | 0;\r\n        D = (D + this.D) | 0;\r\n        E = (E + this.E) | 0;\r\n        F = (F + this.F) | 0;\r\n        G = (G + this.G) | 0;\r\n        H = (H + this.H) | 0;\r\n        this.set(A, B, C, D, E, F, G, H);\r\n    }\r\n    roundClean() {\r\n        SHA256_W.fill(0);\r\n    }\r\n    destroy() {\r\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\r\n        this.buffer.fill(0);\r\n    }\r\n}\r\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\r\nclass SHA224 extends SHA256 {\r\n    constructor() {\r\n        super();\r\n        this.A = 0xc1059ed8 | 0;\r\n        this.B = 0x367cd507 | 0;\r\n        this.C = 0x3070dd17 | 0;\r\n        this.D = 0xf70e5939 | 0;\r\n        this.E = 0xffc00b31 | 0;\r\n        this.F = 0x68581511 | 0;\r\n        this.G = 0x64f98fa7 | 0;\r\n        this.H = 0xbefa4fa4 | 0;\r\n        this.outputLen = 28;\r\n    }\r\n}\r\n/**\r\n * SHA2-256 hash function\r\n * @param message - data that would be hashed\r\n */\r\nconst sha256 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapConstructor)(() => new SHA256());\r\nconst sha224 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapConstructor)(() => new SHA224());\r\n//# sourceMappingURL=sha256.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/@noble/hashes/esm/sha256.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/@noble/hashes/esm/sha3.js":
/*!************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/sha3.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Keccak: () => (/* binding */ Keccak),\n/* harmony export */   keccakP: () => (/* binding */ keccakP),\n/* harmony export */   keccak_224: () => (/* binding */ keccak_224),\n/* harmony export */   keccak_256: () => (/* binding */ keccak_256),\n/* harmony export */   keccak_384: () => (/* binding */ keccak_384),\n/* harmony export */   keccak_512: () => (/* binding */ keccak_512),\n/* harmony export */   sha3_224: () => (/* binding */ sha3_224),\n/* harmony export */   sha3_256: () => (/* binding */ sha3_256),\n/* harmony export */   sha3_384: () => (/* binding */ sha3_384),\n/* harmony export */   sha3_512: () => (/* binding */ sha3_512),\n/* harmony export */   shake128: () => (/* binding */ shake128),\n/* harmony export */   shake256: () => (/* binding */ shake256)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_assert.js */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/_assert.js\");\n/* harmony import */ var _u64_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_u64.js */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/_u64.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/utils.js\");\n\r\n\r\n\r\n// SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.\r\n// It's called a sponge function.\r\n// Various per round constants calculations\r\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];\r\nconst _0n = /* @__PURE__ */ BigInt(0);\r\nconst _1n = /* @__PURE__ */ BigInt(1);\r\nconst _2n = /* @__PURE__ */ BigInt(2);\r\nconst _7n = /* @__PURE__ */ BigInt(7);\r\nconst _256n = /* @__PURE__ */ BigInt(256);\r\nconst _0x71n = /* @__PURE__ */ BigInt(0x71);\r\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\r\n    // Pi\r\n    [x, y] = [y, (2 * x + 3 * y) % 5];\r\n    SHA3_PI.push(2 * (5 * y + x));\r\n    // Rotational\r\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\r\n    // Iota\r\n    let t = _0n;\r\n    for (let j = 0; j < 7; j++) {\r\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\r\n        if (R & _2n)\r\n            t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);\r\n    }\r\n    _SHA3_IOTA.push(t);\r\n}\r\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ (0,_u64_js__WEBPACK_IMPORTED_MODULE_0__.split)(_SHA3_IOTA, true);\r\n// Left rotation (without 0, 32, 64)\r\nconst rotlH = (h, l, s) => (s > 32 ? (0,_u64_js__WEBPACK_IMPORTED_MODULE_0__.rotlBH)(h, l, s) : (0,_u64_js__WEBPACK_IMPORTED_MODULE_0__.rotlSH)(h, l, s));\r\nconst rotlL = (h, l, s) => (s > 32 ? (0,_u64_js__WEBPACK_IMPORTED_MODULE_0__.rotlBL)(h, l, s) : (0,_u64_js__WEBPACK_IMPORTED_MODULE_0__.rotlSL)(h, l, s));\r\n// Same as keccakf1600, but allows to skip some rounds\r\nfunction keccakP(s, rounds = 24) {\r\n    const B = new Uint32Array(5 * 2);\r\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\r\n    for (let round = 24 - rounds; round < 24; round++) {\r\n        // Theta θ\r\n        for (let x = 0; x < 10; x++)\r\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\r\n        for (let x = 0; x < 10; x += 2) {\r\n            const idx1 = (x + 8) % 10;\r\n            const idx0 = (x + 2) % 10;\r\n            const B0 = B[idx0];\r\n            const B1 = B[idx0 + 1];\r\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\r\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\r\n            for (let y = 0; y < 50; y += 10) {\r\n                s[x + y] ^= Th;\r\n                s[x + y + 1] ^= Tl;\r\n            }\r\n        }\r\n        // Rho (ρ) and Pi (π)\r\n        let curH = s[2];\r\n        let curL = s[3];\r\n        for (let t = 0; t < 24; t++) {\r\n            const shift = SHA3_ROTL[t];\r\n            const Th = rotlH(curH, curL, shift);\r\n            const Tl = rotlL(curH, curL, shift);\r\n            const PI = SHA3_PI[t];\r\n            curH = s[PI];\r\n            curL = s[PI + 1];\r\n            s[PI] = Th;\r\n            s[PI + 1] = Tl;\r\n        }\r\n        // Chi (χ)\r\n        for (let y = 0; y < 50; y += 10) {\r\n            for (let x = 0; x < 10; x++)\r\n                B[x] = s[y + x];\r\n            for (let x = 0; x < 10; x++)\r\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\r\n        }\r\n        // Iota (ι)\r\n        s[0] ^= SHA3_IOTA_H[round];\r\n        s[1] ^= SHA3_IOTA_L[round];\r\n    }\r\n    B.fill(0);\r\n}\r\nclass Keccak extends _utils_js__WEBPACK_IMPORTED_MODULE_1__.Hash {\r\n    // NOTE: we accept arguments in bytes instead of bits here.\r\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\r\n        super();\r\n        this.blockLen = blockLen;\r\n        this.suffix = suffix;\r\n        this.outputLen = outputLen;\r\n        this.enableXOF = enableXOF;\r\n        this.rounds = rounds;\r\n        this.pos = 0;\r\n        this.posOut = 0;\r\n        this.finished = false;\r\n        this.destroyed = false;\r\n        // Can be passed from user as dkLen\r\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_2__.number)(outputLen);\r\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\r\n        if (0 >= this.blockLen || this.blockLen >= 200)\r\n            throw new Error('Sha3 supports only keccak-f1600 function');\r\n        this.state = new Uint8Array(200);\r\n        this.state32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(this.state);\r\n    }\r\n    keccak() {\r\n        keccakP(this.state32, this.rounds);\r\n        this.posOut = 0;\r\n        this.pos = 0;\r\n    }\r\n    update(data) {\r\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_2__.exists)(this);\r\n        const { blockLen, state } = this;\r\n        data = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toBytes)(data);\r\n        const len = data.length;\r\n        for (let pos = 0; pos < len;) {\r\n            const take = Math.min(blockLen - this.pos, len - pos);\r\n            for (let i = 0; i < take; i++)\r\n                state[this.pos++] ^= data[pos++];\r\n            if (this.pos === blockLen)\r\n                this.keccak();\r\n        }\r\n        return this;\r\n    }\r\n    finish() {\r\n        if (this.finished)\r\n            return;\r\n        this.finished = true;\r\n        const { state, suffix, pos, blockLen } = this;\r\n        // Do the padding\r\n        state[pos] ^= suffix;\r\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\r\n            this.keccak();\r\n        state[blockLen - 1] ^= 0x80;\r\n        this.keccak();\r\n    }\r\n    writeInto(out) {\r\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_2__.exists)(this, false);\r\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_2__.bytes)(out);\r\n        this.finish();\r\n        const bufferOut = this.state;\r\n        const { blockLen } = this;\r\n        for (let pos = 0, len = out.length; pos < len;) {\r\n            if (this.posOut >= blockLen)\r\n                this.keccak();\r\n            const take = Math.min(blockLen - this.posOut, len - pos);\r\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\r\n            this.posOut += take;\r\n            pos += take;\r\n        }\r\n        return out;\r\n    }\r\n    xofInto(out) {\r\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\r\n        if (!this.enableXOF)\r\n            throw new Error('XOF is not possible for this instance');\r\n        return this.writeInto(out);\r\n    }\r\n    xof(bytes) {\r\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_2__.number)(bytes);\r\n        return this.xofInto(new Uint8Array(bytes));\r\n    }\r\n    digestInto(out) {\r\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_2__.output)(out, this);\r\n        if (this.finished)\r\n            throw new Error('digest() was already called');\r\n        this.writeInto(out);\r\n        this.destroy();\r\n        return out;\r\n    }\r\n    digest() {\r\n        return this.digestInto(new Uint8Array(this.outputLen));\r\n    }\r\n    destroy() {\r\n        this.destroyed = true;\r\n        this.state.fill(0);\r\n    }\r\n    _cloneInto(to) {\r\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\r\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\r\n        to.state32.set(this.state32);\r\n        to.pos = this.pos;\r\n        to.posOut = this.posOut;\r\n        to.finished = this.finished;\r\n        to.rounds = rounds;\r\n        // Suffix can change in cSHAKE\r\n        to.suffix = suffix;\r\n        to.outputLen = outputLen;\r\n        to.enableXOF = enableXOF;\r\n        to.destroyed = this.destroyed;\r\n        return to;\r\n    }\r\n}\r\nconst gen = (suffix, blockLen, outputLen) => (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapConstructor)(() => new Keccak(blockLen, suffix, outputLen));\r\nconst sha3_224 = /* @__PURE__ */ gen(0x06, 144, 224 / 8);\r\n/**\r\n * SHA3-256 hash function\r\n * @param message - that would be hashed\r\n */\r\nconst sha3_256 = /* @__PURE__ */ gen(0x06, 136, 256 / 8);\r\nconst sha3_384 = /* @__PURE__ */ gen(0x06, 104, 384 / 8);\r\nconst sha3_512 = /* @__PURE__ */ gen(0x06, 72, 512 / 8);\r\nconst keccak_224 = /* @__PURE__ */ gen(0x01, 144, 224 / 8);\r\n/**\r\n * keccak-256 hash function. Different from SHA3-256.\r\n * @param message - that would be hashed\r\n */\r\nconst keccak_256 = /* @__PURE__ */ gen(0x01, 136, 256 / 8);\r\nconst keccak_384 = /* @__PURE__ */ gen(0x01, 104, 384 / 8);\r\nconst keccak_512 = /* @__PURE__ */ gen(0x01, 72, 512 / 8);\r\nconst genShake = (suffix, blockLen, outputLen) => (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapXOFConstructorWithOpts)((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\r\nconst shake128 = /* @__PURE__ */ genShake(0x1f, 168, 128 / 8);\r\nconst shake256 = /* @__PURE__ */ genShake(0x1f, 136, 256 / 8);\r\n//# sourceMappingURL=sha3.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/@noble/hashes/esm/sha3.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/@noble/hashes/esm/sha512.js":
/*!**************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/sha512.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SHA512: () => (/* binding */ SHA512),\n/* harmony export */   sha384: () => (/* binding */ sha384),\n/* harmony export */   sha512: () => (/* binding */ sha512),\n/* harmony export */   sha512_224: () => (/* binding */ sha512_224),\n/* harmony export */   sha512_256: () => (/* binding */ sha512_256)\n/* harmony export */ });\n/* harmony import */ var _sha2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_sha2.js */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/_sha2.js\");\n/* harmony import */ var _u64_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_u64.js */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/_u64.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/utils.js\");\n\r\n\r\n\r\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\r\n// prettier-ignore\r\nconst [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (() => _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].split([\r\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\r\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\r\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\r\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\r\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\r\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\r\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\r\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\r\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\r\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\r\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\r\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\r\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\r\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\r\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\r\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\r\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\r\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\r\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\r\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\r\n].map(n => BigInt(n))))();\r\n// Temporary buffer, not used to store anything between runs\r\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\r\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\r\nclass SHA512 extends _sha2_js__WEBPACK_IMPORTED_MODULE_1__.SHA2 {\r\n    constructor() {\r\n        super(128, 64, 16, false);\r\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\r\n        // Also looks cleaner and easier to verify with spec.\r\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\r\n        // h -- high 32 bits, l -- low 32 bits\r\n        this.Ah = 0x6a09e667 | 0;\r\n        this.Al = 0xf3bcc908 | 0;\r\n        this.Bh = 0xbb67ae85 | 0;\r\n        this.Bl = 0x84caa73b | 0;\r\n        this.Ch = 0x3c6ef372 | 0;\r\n        this.Cl = 0xfe94f82b | 0;\r\n        this.Dh = 0xa54ff53a | 0;\r\n        this.Dl = 0x5f1d36f1 | 0;\r\n        this.Eh = 0x510e527f | 0;\r\n        this.El = 0xade682d1 | 0;\r\n        this.Fh = 0x9b05688c | 0;\r\n        this.Fl = 0x2b3e6c1f | 0;\r\n        this.Gh = 0x1f83d9ab | 0;\r\n        this.Gl = 0xfb41bd6b | 0;\r\n        this.Hh = 0x5be0cd19 | 0;\r\n        this.Hl = 0x137e2179 | 0;\r\n    }\r\n    // prettier-ignore\r\n    get() {\r\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\r\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\r\n    }\r\n    // prettier-ignore\r\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\r\n        this.Ah = Ah | 0;\r\n        this.Al = Al | 0;\r\n        this.Bh = Bh | 0;\r\n        this.Bl = Bl | 0;\r\n        this.Ch = Ch | 0;\r\n        this.Cl = Cl | 0;\r\n        this.Dh = Dh | 0;\r\n        this.Dl = Dl | 0;\r\n        this.Eh = Eh | 0;\r\n        this.El = El | 0;\r\n        this.Fh = Fh | 0;\r\n        this.Fl = Fl | 0;\r\n        this.Gh = Gh | 0;\r\n        this.Gl = Gl | 0;\r\n        this.Hh = Hh | 0;\r\n        this.Hl = Hl | 0;\r\n    }\r\n    process(view, offset) {\r\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\r\n        for (let i = 0; i < 16; i++, offset += 4) {\r\n            SHA512_W_H[i] = view.getUint32(offset);\r\n            SHA512_W_L[i] = view.getUint32((offset += 4));\r\n        }\r\n        for (let i = 16; i < 80; i++) {\r\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\r\n            const W15h = SHA512_W_H[i - 15] | 0;\r\n            const W15l = SHA512_W_L[i - 15] | 0;\r\n            const s0h = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrSH(W15h, W15l, 1) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrSH(W15h, W15l, 8) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].shrSH(W15h, W15l, 7);\r\n            const s0l = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrSL(W15h, W15l, 1) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrSL(W15h, W15l, 8) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].shrSL(W15h, W15l, 7);\r\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\r\n            const W2h = SHA512_W_H[i - 2] | 0;\r\n            const W2l = SHA512_W_L[i - 2] | 0;\r\n            const s1h = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrSH(W2h, W2l, 19) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrBH(W2h, W2l, 61) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].shrSH(W2h, W2l, 6);\r\n            const s1l = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrSL(W2h, W2l, 19) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrBL(W2h, W2l, 61) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].shrSL(W2h, W2l, 6);\r\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\r\n            const SUMl = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\r\n            const SUMh = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\r\n            SHA512_W_H[i] = SUMh | 0;\r\n            SHA512_W_L[i] = SUMl | 0;\r\n        }\r\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\r\n        // Compression function main loop, 80 rounds\r\n        for (let i = 0; i < 80; i++) {\r\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\r\n            const sigma1h = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrSH(Eh, El, 14) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrSH(Eh, El, 18) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrBH(Eh, El, 41);\r\n            const sigma1l = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrSL(Eh, El, 14) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrSL(Eh, El, 18) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrBL(Eh, El, 41);\r\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\r\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\r\n            const CHIl = (El & Fl) ^ (~El & Gl);\r\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\r\n            // prettier-ignore\r\n            const T1ll = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\r\n            const T1h = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\r\n            const T1l = T1ll | 0;\r\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\r\n            const sigma0h = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrSH(Ah, Al, 28) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrBH(Ah, Al, 34) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrBH(Ah, Al, 39);\r\n            const sigma0l = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrSL(Ah, Al, 28) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrBL(Ah, Al, 34) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrBL(Ah, Al, 39);\r\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\r\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\r\n            Hh = Gh | 0;\r\n            Hl = Gl | 0;\r\n            Gh = Fh | 0;\r\n            Gl = Fl | 0;\r\n            Fh = Eh | 0;\r\n            Fl = El | 0;\r\n            ({ h: Eh, l: El } = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\r\n            Dh = Ch | 0;\r\n            Dl = Cl | 0;\r\n            Ch = Bh | 0;\r\n            Cl = Bl | 0;\r\n            Bh = Ah | 0;\r\n            Bl = Al | 0;\r\n            const All = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add3L(T1l, sigma0l, MAJl);\r\n            Ah = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add3H(All, T1h, sigma0h, MAJh);\r\n            Al = All | 0;\r\n        }\r\n        // Add the compressed chunk to the current hash value\r\n        ({ h: Ah, l: Al } = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\r\n        ({ h: Bh, l: Bl } = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\r\n        ({ h: Ch, l: Cl } = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\r\n        ({ h: Dh, l: Dl } = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\r\n        ({ h: Eh, l: El } = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\r\n        ({ h: Fh, l: Fl } = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\r\n        ({ h: Gh, l: Gl } = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\r\n        ({ h: Hh, l: Hl } = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\r\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\r\n    }\r\n    roundClean() {\r\n        SHA512_W_H.fill(0);\r\n        SHA512_W_L.fill(0);\r\n    }\r\n    destroy() {\r\n        this.buffer.fill(0);\r\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\r\n    }\r\n}\r\nclass SHA512_224 extends SHA512 {\r\n    constructor() {\r\n        super();\r\n        // h -- high 32 bits, l -- low 32 bits\r\n        this.Ah = 0x8c3d37c8 | 0;\r\n        this.Al = 0x19544da2 | 0;\r\n        this.Bh = 0x73e19966 | 0;\r\n        this.Bl = 0x89dcd4d6 | 0;\r\n        this.Ch = 0x1dfab7ae | 0;\r\n        this.Cl = 0x32ff9c82 | 0;\r\n        this.Dh = 0x679dd514 | 0;\r\n        this.Dl = 0x582f9fcf | 0;\r\n        this.Eh = 0x0f6d2b69 | 0;\r\n        this.El = 0x7bd44da8 | 0;\r\n        this.Fh = 0x77e36f73 | 0;\r\n        this.Fl = 0x04c48942 | 0;\r\n        this.Gh = 0x3f9d85a8 | 0;\r\n        this.Gl = 0x6a1d36c8 | 0;\r\n        this.Hh = 0x1112e6ad | 0;\r\n        this.Hl = 0x91d692a1 | 0;\r\n        this.outputLen = 28;\r\n    }\r\n}\r\nclass SHA512_256 extends SHA512 {\r\n    constructor() {\r\n        super();\r\n        // h -- high 32 bits, l -- low 32 bits\r\n        this.Ah = 0x22312194 | 0;\r\n        this.Al = 0xfc2bf72c | 0;\r\n        this.Bh = 0x9f555fa3 | 0;\r\n        this.Bl = 0xc84c64c2 | 0;\r\n        this.Ch = 0x2393b86b | 0;\r\n        this.Cl = 0x6f53b151 | 0;\r\n        this.Dh = 0x96387719 | 0;\r\n        this.Dl = 0x5940eabd | 0;\r\n        this.Eh = 0x96283ee2 | 0;\r\n        this.El = 0xa88effe3 | 0;\r\n        this.Fh = 0xbe5e1e25 | 0;\r\n        this.Fl = 0x53863992 | 0;\r\n        this.Gh = 0x2b0199fc | 0;\r\n        this.Gl = 0x2c85b8aa | 0;\r\n        this.Hh = 0x0eb72ddc | 0;\r\n        this.Hl = 0x81c52ca2 | 0;\r\n        this.outputLen = 32;\r\n    }\r\n}\r\nclass SHA384 extends SHA512 {\r\n    constructor() {\r\n        super();\r\n        // h -- high 32 bits, l -- low 32 bits\r\n        this.Ah = 0xcbbb9d5d | 0;\r\n        this.Al = 0xc1059ed8 | 0;\r\n        this.Bh = 0x629a292a | 0;\r\n        this.Bl = 0x367cd507 | 0;\r\n        this.Ch = 0x9159015a | 0;\r\n        this.Cl = 0x3070dd17 | 0;\r\n        this.Dh = 0x152fecd8 | 0;\r\n        this.Dl = 0xf70e5939 | 0;\r\n        this.Eh = 0x67332667 | 0;\r\n        this.El = 0xffc00b31 | 0;\r\n        this.Fh = 0x8eb44a87 | 0;\r\n        this.Fl = 0x68581511 | 0;\r\n        this.Gh = 0xdb0c2e0d | 0;\r\n        this.Gl = 0x64f98fa7 | 0;\r\n        this.Hh = 0x47b5481d | 0;\r\n        this.Hl = 0xbefa4fa4 | 0;\r\n        this.outputLen = 48;\r\n    }\r\n}\r\nconst sha512 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.wrapConstructor)(() => new SHA512());\r\nconst sha512_224 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.wrapConstructor)(() => new SHA512_224());\r\nconst sha512_256 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.wrapConstructor)(() => new SHA512_256());\r\nconst sha384 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.wrapConstructor)(() => new SHA384());\r\n//# sourceMappingURL=sha512.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/@noble/hashes/esm/sha512.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/@noble/hashes/esm/utils.js":
/*!*************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/utils.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Hash: () => (/* binding */ Hash),\n/* harmony export */   asyncLoop: () => (/* binding */ asyncLoop),\n/* harmony export */   bytesToHex: () => (/* binding */ bytesToHex),\n/* harmony export */   checkOpts: () => (/* binding */ checkOpts),\n/* harmony export */   concatBytes: () => (/* binding */ concatBytes),\n/* harmony export */   createView: () => (/* binding */ createView),\n/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),\n/* harmony export */   isLE: () => (/* binding */ isLE),\n/* harmony export */   nextTick: () => (/* binding */ nextTick),\n/* harmony export */   randomBytes: () => (/* binding */ randomBytes),\n/* harmony export */   rotr: () => (/* binding */ rotr),\n/* harmony export */   toBytes: () => (/* binding */ toBytes),\n/* harmony export */   u32: () => (/* binding */ u32),\n/* harmony export */   u8: () => (/* binding */ u8),\n/* harmony export */   utf8ToBytes: () => (/* binding */ utf8ToBytes),\n/* harmony export */   wrapConstructor: () => (/* binding */ wrapConstructor),\n/* harmony export */   wrapConstructorWithOpts: () => (/* binding */ wrapConstructorWithOpts),\n/* harmony export */   wrapXOFConstructorWithOpts: () => (/* binding */ wrapXOFConstructorWithOpts)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/crypto */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/crypto.js\");\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\r\n// node.js versions earlier than v19 don't declare it in global scope.\r\n// For node.js, package.json#exports field mapping rewrites import\r\n// from `crypto` to `cryptoNode`, which imports native module.\r\n// Makes the utils un-importable in browsers without a bundler.\r\n// Once node.js 18 is deprecated, we can just drop the import.\r\n\r\nconst u8a = (a) => a instanceof Uint8Array;\r\n// Cast array to different type\r\nconst u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\r\nconst u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\r\n// Cast array to view\r\nconst createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\r\n// The rotate right (circular right shift) operation for uint32\r\nconst rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\r\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\r\n// early-throw an error because we don't support BE yet.\r\nconst isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\r\nif (!isLE)\r\n    throw new Error('Non little-endian hardware is not supported');\r\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\r\n/**\r\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\r\n */\r\nfunction bytesToHex(bytes) {\r\n    if (!u8a(bytes))\r\n        throw new Error('Uint8Array expected');\r\n    // pre-caching improves the speed 6x\r\n    let hex = '';\r\n    for (let i = 0; i < bytes.length; i++) {\r\n        hex += hexes[bytes[i]];\r\n    }\r\n    return hex;\r\n}\r\n/**\r\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\r\n */\r\nfunction hexToBytes(hex) {\r\n    if (typeof hex !== 'string')\r\n        throw new Error('hex string expected, got ' + typeof hex);\r\n    const len = hex.length;\r\n    if (len % 2)\r\n        throw new Error('padded hex string expected, got unpadded hex of length ' + len);\r\n    const array = new Uint8Array(len / 2);\r\n    for (let i = 0; i < array.length; i++) {\r\n        const j = i * 2;\r\n        const hexByte = hex.slice(j, j + 2);\r\n        const byte = Number.parseInt(hexByte, 16);\r\n        if (Number.isNaN(byte) || byte < 0)\r\n            throw new Error('Invalid byte sequence');\r\n        array[i] = byte;\r\n    }\r\n    return array;\r\n}\r\n// There is no setImmediate in browser and setTimeout is slow.\r\n// call of async fn will return Promise, which will be fullfiled only on\r\n// next scheduler queue processing step and this is exactly what we need.\r\nconst nextTick = async () => { };\r\n// Returns control to thread each 'tick' ms to avoid blocking\r\nasync function asyncLoop(iters, tick, cb) {\r\n    let ts = Date.now();\r\n    for (let i = 0; i < iters; i++) {\r\n        cb(i);\r\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\r\n        const diff = Date.now() - ts;\r\n        if (diff >= 0 && diff < tick)\r\n            continue;\r\n        await nextTick();\r\n        ts += diff;\r\n    }\r\n}\r\n/**\r\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\r\n */\r\nfunction utf8ToBytes(str) {\r\n    if (typeof str !== 'string')\r\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\r\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\r\n}\r\n/**\r\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\r\n * Warning: when Uint8Array is passed, it would NOT get copied.\r\n * Keep in mind for future mutable operations.\r\n */\r\nfunction toBytes(data) {\r\n    if (typeof data === 'string')\r\n        data = utf8ToBytes(data);\r\n    if (!u8a(data))\r\n        throw new Error(`expected Uint8Array, got ${typeof data}`);\r\n    return data;\r\n}\r\n/**\r\n * Copies several Uint8Arrays into one.\r\n */\r\nfunction concatBytes(...arrays) {\r\n    const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\r\n    let pad = 0; // walk through each item, ensure they have proper type\r\n    arrays.forEach((a) => {\r\n        if (!u8a(a))\r\n            throw new Error('Uint8Array expected');\r\n        r.set(a, pad);\r\n        pad += a.length;\r\n    });\r\n    return r;\r\n}\r\n// For runtime check if class implements interface\r\nclass Hash {\r\n    // Safe version that clones internal state\r\n    clone() {\r\n        return this._cloneInto();\r\n    }\r\n}\r\nconst toStr = {}.toString;\r\nfunction checkOpts(defaults, opts) {\r\n    if (opts !== undefined && toStr.call(opts) !== '[object Object]')\r\n        throw new Error('Options should be object or undefined');\r\n    const merged = Object.assign(defaults, opts);\r\n    return merged;\r\n}\r\nfunction wrapConstructor(hashCons) {\r\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\r\n    const tmp = hashCons();\r\n    hashC.outputLen = tmp.outputLen;\r\n    hashC.blockLen = tmp.blockLen;\r\n    hashC.create = () => hashCons();\r\n    return hashC;\r\n}\r\nfunction wrapConstructorWithOpts(hashCons) {\r\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\r\n    const tmp = hashCons({});\r\n    hashC.outputLen = tmp.outputLen;\r\n    hashC.blockLen = tmp.blockLen;\r\n    hashC.create = (opts) => hashCons(opts);\r\n    return hashC;\r\n}\r\nfunction wrapXOFConstructorWithOpts(hashCons) {\r\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\r\n    const tmp = hashCons({});\r\n    hashC.outputLen = tmp.outputLen;\r\n    hashC.blockLen = tmp.blockLen;\r\n    hashC.create = (opts) => hashCons(opts);\r\n    return hashC;\r\n}\r\n/**\r\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\r\n */\r\nfunction randomBytes(bytesLength = 32) {\r\n    if (_noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__.crypto && typeof _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__.crypto.getRandomValues === 'function') {\r\n        return _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__.crypto.getRandomValues(new Uint8Array(bytesLength));\r\n    }\r\n    throw new Error('crypto.getRandomValues must be defined');\r\n}\r\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/@noble/hashes/esm/utils.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/aes-js/lib.esm/aes.js":
/*!********************************************!*\
  !*** ./node_modules/aes-js/lib.esm/aes.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AES: () => (/* binding */ AES)\n/* harmony export */ });\n/*! MIT License. Copyright 2015-2022 Richard Moore <me@ricmoo.com>. See LICENSE.txt. */\r\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n};\r\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n};\r\nvar _AES_key, _AES_Kd, _AES_Ke;\r\n// Number of rounds by keysize\r\nconst numberOfRounds = { 16: 10, 24: 12, 32: 14 };\r\n// Round constant words\r\nconst rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91];\r\n// S-box and Inverse S-box (S is for Substitution)\r\nconst S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];\r\nconst Si = [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d];\r\n// Transformations for encryption\r\nconst T1 = [0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a];\r\nconst T2 = [0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616];\r\nconst T3 = [0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16];\r\nconst T4 = [0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c];\r\n// Transformations for decryption\r\nconst T5 = [0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742];\r\nconst T6 = [0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857];\r\nconst T7 = [0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8];\r\nconst T8 = [0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0];\r\n// Transformations for decryption key expansion\r\nconst U1 = [0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3];\r\nconst U2 = [0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697];\r\nconst U3 = [0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46];\r\nconst U4 = [0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d];\r\nfunction convertToInt32(bytes) {\r\n    const result = [];\r\n    for (let i = 0; i < bytes.length; i += 4) {\r\n        result.push((bytes[i] << 24) | (bytes[i + 1] << 16) | (bytes[i + 2] << 8) | bytes[i + 3]);\r\n    }\r\n    return result;\r\n}\r\nclass AES {\r\n    get key() { return __classPrivateFieldGet(this, _AES_key, \"f\").slice(); }\r\n    constructor(key) {\r\n        _AES_key.set(this, void 0);\r\n        _AES_Kd.set(this, void 0);\r\n        _AES_Ke.set(this, void 0);\r\n        if (!(this instanceof AES)) {\r\n            throw Error('AES must be instanitated with `new`');\r\n        }\r\n        __classPrivateFieldSet(this, _AES_key, new Uint8Array(key), \"f\");\r\n        const rounds = numberOfRounds[this.key.length];\r\n        if (rounds == null) {\r\n            throw new TypeError('invalid key size (must be 16, 24 or 32 bytes)');\r\n        }\r\n        // encryption round keys\r\n        __classPrivateFieldSet(this, _AES_Ke, [], \"f\");\r\n        // decryption round keys\r\n        __classPrivateFieldSet(this, _AES_Kd, [], \"f\");\r\n        for (let i = 0; i <= rounds; i++) {\r\n            __classPrivateFieldGet(this, _AES_Ke, \"f\").push([0, 0, 0, 0]);\r\n            __classPrivateFieldGet(this, _AES_Kd, \"f\").push([0, 0, 0, 0]);\r\n        }\r\n        const roundKeyCount = (rounds + 1) * 4;\r\n        const KC = this.key.length / 4;\r\n        // convert the key into ints\r\n        const tk = convertToInt32(this.key);\r\n        // copy values into round key arrays\r\n        let index;\r\n        for (let i = 0; i < KC; i++) {\r\n            index = i >> 2;\r\n            __classPrivateFieldGet(this, _AES_Ke, \"f\")[index][i % 4] = tk[i];\r\n            __classPrivateFieldGet(this, _AES_Kd, \"f\")[rounds - index][i % 4] = tk[i];\r\n        }\r\n        // key expansion (fips-197 section 5.2)\r\n        let rconpointer = 0;\r\n        let t = KC, tt;\r\n        while (t < roundKeyCount) {\r\n            tt = tk[KC - 1];\r\n            tk[0] ^= ((S[(tt >> 16) & 0xFF] << 24) ^\r\n                (S[(tt >> 8) & 0xFF] << 16) ^\r\n                (S[tt & 0xFF] << 8) ^\r\n                S[(tt >> 24) & 0xFF] ^\r\n                (rcon[rconpointer] << 24));\r\n            rconpointer += 1;\r\n            // key expansion (for non-256 bit)\r\n            if (KC != 8) {\r\n                for (let i = 1; i < KC; i++) {\r\n                    tk[i] ^= tk[i - 1];\r\n                }\r\n                // key expansion for 256-bit keys is \"slightly different\" (fips-197)\r\n            }\r\n            else {\r\n                for (let i = 1; i < (KC / 2); i++) {\r\n                    tk[i] ^= tk[i - 1];\r\n                }\r\n                tt = tk[(KC / 2) - 1];\r\n                tk[KC / 2] ^= (S[tt & 0xFF] ^\r\n                    (S[(tt >> 8) & 0xFF] << 8) ^\r\n                    (S[(tt >> 16) & 0xFF] << 16) ^\r\n                    (S[(tt >> 24) & 0xFF] << 24));\r\n                for (let i = (KC / 2) + 1; i < KC; i++) {\r\n                    tk[i] ^= tk[i - 1];\r\n                }\r\n            }\r\n            // copy values into round key arrays\r\n            let i = 0, r, c;\r\n            while (i < KC && t < roundKeyCount) {\r\n                r = t >> 2;\r\n                c = t % 4;\r\n                __classPrivateFieldGet(this, _AES_Ke, \"f\")[r][c] = tk[i];\r\n                __classPrivateFieldGet(this, _AES_Kd, \"f\")[rounds - r][c] = tk[i++];\r\n                t++;\r\n            }\r\n        }\r\n        // inverse-cipher-ify the decryption round key (fips-197 section 5.3)\r\n        for (let r = 1; r < rounds; r++) {\r\n            for (let c = 0; c < 4; c++) {\r\n                tt = __classPrivateFieldGet(this, _AES_Kd, \"f\")[r][c];\r\n                __classPrivateFieldGet(this, _AES_Kd, \"f\")[r][c] = (U1[(tt >> 24) & 0xFF] ^\r\n                    U2[(tt >> 16) & 0xFF] ^\r\n                    U3[(tt >> 8) & 0xFF] ^\r\n                    U4[tt & 0xFF]);\r\n            }\r\n        }\r\n    }\r\n    encrypt(plaintext) {\r\n        if (plaintext.length != 16) {\r\n            throw new TypeError('invalid plaintext size (must be 16 bytes)');\r\n        }\r\n        const rounds = __classPrivateFieldGet(this, _AES_Ke, \"f\").length - 1;\r\n        const a = [0, 0, 0, 0];\r\n        // convert plaintext to (ints ^ key)\r\n        let t = convertToInt32(plaintext);\r\n        for (let i = 0; i < 4; i++) {\r\n            t[i] ^= __classPrivateFieldGet(this, _AES_Ke, \"f\")[0][i];\r\n        }\r\n        // apply round transforms\r\n        for (let r = 1; r < rounds; r++) {\r\n            for (let i = 0; i < 4; i++) {\r\n                a[i] = (T1[(t[i] >> 24) & 0xff] ^\r\n                    T2[(t[(i + 1) % 4] >> 16) & 0xff] ^\r\n                    T3[(t[(i + 2) % 4] >> 8) & 0xff] ^\r\n                    T4[t[(i + 3) % 4] & 0xff] ^\r\n                    __classPrivateFieldGet(this, _AES_Ke, \"f\")[r][i]);\r\n            }\r\n            t = a.slice();\r\n        }\r\n        // the last round is special\r\n        const result = new Uint8Array(16);\r\n        let tt = 0;\r\n        for (let i = 0; i < 4; i++) {\r\n            tt = __classPrivateFieldGet(this, _AES_Ke, \"f\")[rounds][i];\r\n            result[4 * i] = (S[(t[i] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;\r\n            result[4 * i + 1] = (S[(t[(i + 1) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;\r\n            result[4 * i + 2] = (S[(t[(i + 2) % 4] >> 8) & 0xff] ^ (tt >> 8)) & 0xff;\r\n            result[4 * i + 3] = (S[t[(i + 3) % 4] & 0xff] ^ tt) & 0xff;\r\n        }\r\n        return result;\r\n    }\r\n    decrypt(ciphertext) {\r\n        if (ciphertext.length != 16) {\r\n            throw new TypeError('invalid ciphertext size (must be 16 bytes)');\r\n        }\r\n        const rounds = __classPrivateFieldGet(this, _AES_Kd, \"f\").length - 1;\r\n        const a = [0, 0, 0, 0];\r\n        // convert plaintext to (ints ^ key)\r\n        let t = convertToInt32(ciphertext);\r\n        for (let i = 0; i < 4; i++) {\r\n            t[i] ^= __classPrivateFieldGet(this, _AES_Kd, \"f\")[0][i];\r\n        }\r\n        // apply round transforms\r\n        for (let r = 1; r < rounds; r++) {\r\n            for (let i = 0; i < 4; i++) {\r\n                a[i] = (T5[(t[i] >> 24) & 0xff] ^\r\n                    T6[(t[(i + 3) % 4] >> 16) & 0xff] ^\r\n                    T7[(t[(i + 2) % 4] >> 8) & 0xff] ^\r\n                    T8[t[(i + 1) % 4] & 0xff] ^\r\n                    __classPrivateFieldGet(this, _AES_Kd, \"f\")[r][i]);\r\n            }\r\n            t = a.slice();\r\n        }\r\n        // the last round is special\r\n        const result = new Uint8Array(16);\r\n        let tt = 0;\r\n        for (let i = 0; i < 4; i++) {\r\n            tt = __classPrivateFieldGet(this, _AES_Kd, \"f\")[rounds][i];\r\n            result[4 * i] = (Si[(t[i] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;\r\n            result[4 * i + 1] = (Si[(t[(i + 3) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;\r\n            result[4 * i + 2] = (Si[(t[(i + 2) % 4] >> 8) & 0xff] ^ (tt >> 8)) & 0xff;\r\n            result[4 * i + 3] = (Si[t[(i + 1) % 4] & 0xff] ^ tt) & 0xff;\r\n        }\r\n        return result;\r\n    }\r\n}\r\n_AES_key = new WeakMap(), _AES_Kd = new WeakMap(), _AES_Ke = new WeakMap();\r\n//# sourceMappingURL=aes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9hZXMtanMvbGliLmVzbS9hZXMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0EsOEJBQThCLFNBQUksSUFBSSxTQUFJO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLFNBQUksSUFBSSxTQUFJO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGtCQUFrQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGFBQWE7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLFFBQVE7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxRQUFRO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsY0FBYztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyxRQUFRO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsWUFBWTtBQUNwQyw0QkFBNEIsT0FBTztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixPQUFPO0FBQy9CO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixZQUFZO0FBQ3BDLDRCQUE0QixPQUFPO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsT0FBTztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixPQUFPO0FBQy9CO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixZQUFZO0FBQ3BDLDRCQUE0QixPQUFPO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsT0FBTztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJEOlxcRG9fYW4yXFxsZW5kaHViX3YyXFxsZW5kaHViLWZyb250ZW5kLW5leHRqc1xcbm9kZV9tb2R1bGVzXFxhZXMtanNcXGxpYi5lc21cXGFlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgTUlUIExpY2Vuc2UuIENvcHlyaWdodCAyMDE1LTIwMjIgUmljaGFyZCBNb29yZSA8bWVAcmljbW9vLmNvbT4uIFNlZSBMSUNFTlNFLnR4dC4gKi9cclxudmFyIF9fY2xhc3NQcml2YXRlRmllbGRHZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRHZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcclxuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcclxuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xyXG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcclxufTtcclxudmFyIF9fY2xhc3NQcml2YXRlRmllbGRTZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRTZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XHJcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xyXG4gICAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XHJcbn07XHJcbnZhciBfQUVTX2tleSwgX0FFU19LZCwgX0FFU19LZTtcclxuLy8gTnVtYmVyIG9mIHJvdW5kcyBieSBrZXlzaXplXHJcbmNvbnN0IG51bWJlck9mUm91bmRzID0geyAxNjogMTAsIDI0OiAxMiwgMzI6IDE0IH07XHJcbi8vIFJvdW5kIGNvbnN0YW50IHdvcmRzXHJcbmNvbnN0IHJjb24gPSBbMHgwMSwgMHgwMiwgMHgwNCwgMHgwOCwgMHgxMCwgMHgyMCwgMHg0MCwgMHg4MCwgMHgxYiwgMHgzNiwgMHg2YywgMHhkOCwgMHhhYiwgMHg0ZCwgMHg5YSwgMHgyZiwgMHg1ZSwgMHhiYywgMHg2MywgMHhjNiwgMHg5NywgMHgzNSwgMHg2YSwgMHhkNCwgMHhiMywgMHg3ZCwgMHhmYSwgMHhlZiwgMHhjNSwgMHg5MV07XHJcbi8vIFMtYm94IGFuZCBJbnZlcnNlIFMtYm94IChTIGlzIGZvciBTdWJzdGl0dXRpb24pXHJcbmNvbnN0IFMgPSBbMHg2MywgMHg3YywgMHg3NywgMHg3YiwgMHhmMiwgMHg2YiwgMHg2ZiwgMHhjNSwgMHgzMCwgMHgwMSwgMHg2NywgMHgyYiwgMHhmZSwgMHhkNywgMHhhYiwgMHg3NiwgMHhjYSwgMHg4MiwgMHhjOSwgMHg3ZCwgMHhmYSwgMHg1OSwgMHg0NywgMHhmMCwgMHhhZCwgMHhkNCwgMHhhMiwgMHhhZiwgMHg5YywgMHhhNCwgMHg3MiwgMHhjMCwgMHhiNywgMHhmZCwgMHg5MywgMHgyNiwgMHgzNiwgMHgzZiwgMHhmNywgMHhjYywgMHgzNCwgMHhhNSwgMHhlNSwgMHhmMSwgMHg3MSwgMHhkOCwgMHgzMSwgMHgxNSwgMHgwNCwgMHhjNywgMHgyMywgMHhjMywgMHgxOCwgMHg5NiwgMHgwNSwgMHg5YSwgMHgwNywgMHgxMiwgMHg4MCwgMHhlMiwgMHhlYiwgMHgyNywgMHhiMiwgMHg3NSwgMHgwOSwgMHg4MywgMHgyYywgMHgxYSwgMHgxYiwgMHg2ZSwgMHg1YSwgMHhhMCwgMHg1MiwgMHgzYiwgMHhkNiwgMHhiMywgMHgyOSwgMHhlMywgMHgyZiwgMHg4NCwgMHg1MywgMHhkMSwgMHgwMCwgMHhlZCwgMHgyMCwgMHhmYywgMHhiMSwgMHg1YiwgMHg2YSwgMHhjYiwgMHhiZSwgMHgzOSwgMHg0YSwgMHg0YywgMHg1OCwgMHhjZiwgMHhkMCwgMHhlZiwgMHhhYSwgMHhmYiwgMHg0MywgMHg0ZCwgMHgzMywgMHg4NSwgMHg0NSwgMHhmOSwgMHgwMiwgMHg3ZiwgMHg1MCwgMHgzYywgMHg5ZiwgMHhhOCwgMHg1MSwgMHhhMywgMHg0MCwgMHg4ZiwgMHg5MiwgMHg5ZCwgMHgzOCwgMHhmNSwgMHhiYywgMHhiNiwgMHhkYSwgMHgyMSwgMHgxMCwgMHhmZiwgMHhmMywgMHhkMiwgMHhjZCwgMHgwYywgMHgxMywgMHhlYywgMHg1ZiwgMHg5NywgMHg0NCwgMHgxNywgMHhjNCwgMHhhNywgMHg3ZSwgMHgzZCwgMHg2NCwgMHg1ZCwgMHgxOSwgMHg3MywgMHg2MCwgMHg4MSwgMHg0ZiwgMHhkYywgMHgyMiwgMHgyYSwgMHg5MCwgMHg4OCwgMHg0NiwgMHhlZSwgMHhiOCwgMHgxNCwgMHhkZSwgMHg1ZSwgMHgwYiwgMHhkYiwgMHhlMCwgMHgzMiwgMHgzYSwgMHgwYSwgMHg0OSwgMHgwNiwgMHgyNCwgMHg1YywgMHhjMiwgMHhkMywgMHhhYywgMHg2MiwgMHg5MSwgMHg5NSwgMHhlNCwgMHg3OSwgMHhlNywgMHhjOCwgMHgzNywgMHg2ZCwgMHg4ZCwgMHhkNSwgMHg0ZSwgMHhhOSwgMHg2YywgMHg1NiwgMHhmNCwgMHhlYSwgMHg2NSwgMHg3YSwgMHhhZSwgMHgwOCwgMHhiYSwgMHg3OCwgMHgyNSwgMHgyZSwgMHgxYywgMHhhNiwgMHhiNCwgMHhjNiwgMHhlOCwgMHhkZCwgMHg3NCwgMHgxZiwgMHg0YiwgMHhiZCwgMHg4YiwgMHg4YSwgMHg3MCwgMHgzZSwgMHhiNSwgMHg2NiwgMHg0OCwgMHgwMywgMHhmNiwgMHgwZSwgMHg2MSwgMHgzNSwgMHg1NywgMHhiOSwgMHg4NiwgMHhjMSwgMHgxZCwgMHg5ZSwgMHhlMSwgMHhmOCwgMHg5OCwgMHgxMSwgMHg2OSwgMHhkOSwgMHg4ZSwgMHg5NCwgMHg5YiwgMHgxZSwgMHg4NywgMHhlOSwgMHhjZSwgMHg1NSwgMHgyOCwgMHhkZiwgMHg4YywgMHhhMSwgMHg4OSwgMHgwZCwgMHhiZiwgMHhlNiwgMHg0MiwgMHg2OCwgMHg0MSwgMHg5OSwgMHgyZCwgMHgwZiwgMHhiMCwgMHg1NCwgMHhiYiwgMHgxNl07XHJcbmNvbnN0IFNpID0gWzB4NTIsIDB4MDksIDB4NmEsIDB4ZDUsIDB4MzAsIDB4MzYsIDB4YTUsIDB4MzgsIDB4YmYsIDB4NDAsIDB4YTMsIDB4OWUsIDB4ODEsIDB4ZjMsIDB4ZDcsIDB4ZmIsIDB4N2MsIDB4ZTMsIDB4MzksIDB4ODIsIDB4OWIsIDB4MmYsIDB4ZmYsIDB4ODcsIDB4MzQsIDB4OGUsIDB4NDMsIDB4NDQsIDB4YzQsIDB4ZGUsIDB4ZTksIDB4Y2IsIDB4NTQsIDB4N2IsIDB4OTQsIDB4MzIsIDB4YTYsIDB4YzIsIDB4MjMsIDB4M2QsIDB4ZWUsIDB4NGMsIDB4OTUsIDB4MGIsIDB4NDIsIDB4ZmEsIDB4YzMsIDB4NGUsIDB4MDgsIDB4MmUsIDB4YTEsIDB4NjYsIDB4MjgsIDB4ZDksIDB4MjQsIDB4YjIsIDB4NzYsIDB4NWIsIDB4YTIsIDB4NDksIDB4NmQsIDB4OGIsIDB4ZDEsIDB4MjUsIDB4NzIsIDB4ZjgsIDB4ZjYsIDB4NjQsIDB4ODYsIDB4NjgsIDB4OTgsIDB4MTYsIDB4ZDQsIDB4YTQsIDB4NWMsIDB4Y2MsIDB4NWQsIDB4NjUsIDB4YjYsIDB4OTIsIDB4NmMsIDB4NzAsIDB4NDgsIDB4NTAsIDB4ZmQsIDB4ZWQsIDB4YjksIDB4ZGEsIDB4NWUsIDB4MTUsIDB4NDYsIDB4NTcsIDB4YTcsIDB4OGQsIDB4OWQsIDB4ODQsIDB4OTAsIDB4ZDgsIDB4YWIsIDB4MDAsIDB4OGMsIDB4YmMsIDB4ZDMsIDB4MGEsIDB4ZjcsIDB4ZTQsIDB4NTgsIDB4MDUsIDB4YjgsIDB4YjMsIDB4NDUsIDB4MDYsIDB4ZDAsIDB4MmMsIDB4MWUsIDB4OGYsIDB4Y2EsIDB4M2YsIDB4MGYsIDB4MDIsIDB4YzEsIDB4YWYsIDB4YmQsIDB4MDMsIDB4MDEsIDB4MTMsIDB4OGEsIDB4NmIsIDB4M2EsIDB4OTEsIDB4MTEsIDB4NDEsIDB4NGYsIDB4NjcsIDB4ZGMsIDB4ZWEsIDB4OTcsIDB4ZjIsIDB4Y2YsIDB4Y2UsIDB4ZjAsIDB4YjQsIDB4ZTYsIDB4NzMsIDB4OTYsIDB4YWMsIDB4NzQsIDB4MjIsIDB4ZTcsIDB4YWQsIDB4MzUsIDB4ODUsIDB4ZTIsIDB4ZjksIDB4MzcsIDB4ZTgsIDB4MWMsIDB4NzUsIDB4ZGYsIDB4NmUsIDB4NDcsIDB4ZjEsIDB4MWEsIDB4NzEsIDB4MWQsIDB4MjksIDB4YzUsIDB4ODksIDB4NmYsIDB4YjcsIDB4NjIsIDB4MGUsIDB4YWEsIDB4MTgsIDB4YmUsIDB4MWIsIDB4ZmMsIDB4NTYsIDB4M2UsIDB4NGIsIDB4YzYsIDB4ZDIsIDB4NzksIDB4MjAsIDB4OWEsIDB4ZGIsIDB4YzAsIDB4ZmUsIDB4NzgsIDB4Y2QsIDB4NWEsIDB4ZjQsIDB4MWYsIDB4ZGQsIDB4YTgsIDB4MzMsIDB4ODgsIDB4MDcsIDB4YzcsIDB4MzEsIDB4YjEsIDB4MTIsIDB4MTAsIDB4NTksIDB4MjcsIDB4ODAsIDB4ZWMsIDB4NWYsIDB4NjAsIDB4NTEsIDB4N2YsIDB4YTksIDB4MTksIDB4YjUsIDB4NGEsIDB4MGQsIDB4MmQsIDB4ZTUsIDB4N2EsIDB4OWYsIDB4OTMsIDB4YzksIDB4OWMsIDB4ZWYsIDB4YTAsIDB4ZTAsIDB4M2IsIDB4NGQsIDB4YWUsIDB4MmEsIDB4ZjUsIDB4YjAsIDB4YzgsIDB4ZWIsIDB4YmIsIDB4M2MsIDB4ODMsIDB4NTMsIDB4OTksIDB4NjEsIDB4MTcsIDB4MmIsIDB4MDQsIDB4N2UsIDB4YmEsIDB4NzcsIDB4ZDYsIDB4MjYsIDB4ZTEsIDB4NjksIDB4MTQsIDB4NjMsIDB4NTUsIDB4MjEsIDB4MGMsIDB4N2RdO1xyXG4vLyBUcmFuc2Zvcm1hdGlvbnMgZm9yIGVuY3J5cHRpb25cclxuY29uc3QgVDEgPSBbMHhjNjYzNjNhNSwgMHhmODdjN2M4NCwgMHhlZTc3Nzc5OSwgMHhmNjdiN2I4ZCwgMHhmZmYyZjIwZCwgMHhkNjZiNmJiZCwgMHhkZTZmNmZiMSwgMHg5MWM1YzU1NCwgMHg2MDMwMzA1MCwgMHgwMjAxMDEwMywgMHhjZTY3NjdhOSwgMHg1NjJiMmI3ZCwgMHhlN2ZlZmUxOSwgMHhiNWQ3ZDc2MiwgMHg0ZGFiYWJlNiwgMHhlYzc2NzY5YSwgMHg4ZmNhY2E0NSwgMHgxZjgyODI5ZCwgMHg4OWM5Yzk0MCwgMHhmYTdkN2Q4NywgMHhlZmZhZmExNSwgMHhiMjU5NTllYiwgMHg4ZTQ3NDdjOSwgMHhmYmYwZjAwYiwgMHg0MWFkYWRlYywgMHhiM2Q0ZDQ2NywgMHg1ZmEyYTJmZCwgMHg0NWFmYWZlYSwgMHgyMzljOWNiZiwgMHg1M2E0YTRmNywgMHhlNDcyNzI5NiwgMHg5YmMwYzA1YiwgMHg3NWI3YjdjMiwgMHhlMWZkZmQxYywgMHgzZDkzOTNhZSwgMHg0YzI2MjY2YSwgMHg2YzM2MzY1YSwgMHg3ZTNmM2Y0MSwgMHhmNWY3ZjcwMiwgMHg4M2NjY2M0ZiwgMHg2ODM0MzQ1YywgMHg1MWE1YTVmNCwgMHhkMWU1ZTUzNCwgMHhmOWYxZjEwOCwgMHhlMjcxNzE5MywgMHhhYmQ4ZDg3MywgMHg2MjMxMzE1MywgMHgyYTE1MTUzZiwgMHgwODA0MDQwYywgMHg5NWM3Yzc1MiwgMHg0NjIzMjM2NSwgMHg5ZGMzYzM1ZSwgMHgzMDE4MTgyOCwgMHgzNzk2OTZhMSwgMHgwYTA1MDUwZiwgMHgyZjlhOWFiNSwgMHgwZTA3MDcwOSwgMHgyNDEyMTIzNiwgMHgxYjgwODA5YiwgMHhkZmUyZTIzZCwgMHhjZGViZWIyNiwgMHg0ZTI3Mjc2OSwgMHg3ZmIyYjJjZCwgMHhlYTc1NzU5ZiwgMHgxMjA5MDkxYiwgMHgxZDgzODM5ZSwgMHg1ODJjMmM3NCwgMHgzNDFhMWEyZSwgMHgzNjFiMWIyZCwgMHhkYzZlNmViMiwgMHhiNDVhNWFlZSwgMHg1YmEwYTBmYiwgMHhhNDUyNTJmNiwgMHg3NjNiM2I0ZCwgMHhiN2Q2ZDY2MSwgMHg3ZGIzYjNjZSwgMHg1MjI5Mjk3YiwgMHhkZGUzZTMzZSwgMHg1ZTJmMmY3MSwgMHgxMzg0ODQ5NywgMHhhNjUzNTNmNSwgMHhiOWQxZDE2OCwgMHgwMDAwMDAwMCwgMHhjMWVkZWQyYywgMHg0MDIwMjA2MCwgMHhlM2ZjZmMxZiwgMHg3OWIxYjFjOCwgMHhiNjViNWJlZCwgMHhkNDZhNmFiZSwgMHg4ZGNiY2I0NiwgMHg2N2JlYmVkOSwgMHg3MjM5Mzk0YiwgMHg5NDRhNGFkZSwgMHg5ODRjNGNkNCwgMHhiMDU4NThlOCwgMHg4NWNmY2Y0YSwgMHhiYmQwZDA2YiwgMHhjNWVmZWYyYSwgMHg0ZmFhYWFlNSwgMHhlZGZiZmIxNiwgMHg4NjQzNDNjNSwgMHg5YTRkNGRkNywgMHg2NjMzMzM1NSwgMHgxMTg1ODU5NCwgMHg4YTQ1NDVjZiwgMHhlOWY5ZjkxMCwgMHgwNDAyMDIwNiwgMHhmZTdmN2Y4MSwgMHhhMDUwNTBmMCwgMHg3ODNjM2M0NCwgMHgyNTlmOWZiYSwgMHg0YmE4YThlMywgMHhhMjUxNTFmMywgMHg1ZGEzYTNmZSwgMHg4MDQwNDBjMCwgMHgwNThmOGY4YSwgMHgzZjkyOTJhZCwgMHgyMTlkOWRiYywgMHg3MDM4Mzg0OCwgMHhmMWY1ZjUwNCwgMHg2M2JjYmNkZiwgMHg3N2I2YjZjMSwgMHhhZmRhZGE3NSwgMHg0MjIxMjE2MywgMHgyMDEwMTAzMCwgMHhlNWZmZmYxYSwgMHhmZGYzZjMwZSwgMHhiZmQyZDI2ZCwgMHg4MWNkY2Q0YywgMHgxODBjMGMxNCwgMHgyNjEzMTMzNSwgMHhjM2VjZWMyZiwgMHhiZTVmNWZlMSwgMHgzNTk3OTdhMiwgMHg4ODQ0NDRjYywgMHgyZTE3MTczOSwgMHg5M2M0YzQ1NywgMHg1NWE3YTdmMiwgMHhmYzdlN2U4MiwgMHg3YTNkM2Q0NywgMHhjODY0NjRhYywgMHhiYTVkNWRlNywgMHgzMjE5MTkyYiwgMHhlNjczNzM5NSwgMHhjMDYwNjBhMCwgMHgxOTgxODE5OCwgMHg5ZTRmNGZkMSwgMHhhM2RjZGM3ZiwgMHg0NDIyMjI2NiwgMHg1NDJhMmE3ZSwgMHgzYjkwOTBhYiwgMHgwYjg4ODg4MywgMHg4YzQ2NDZjYSwgMHhjN2VlZWUyOSwgMHg2YmI4YjhkMywgMHgyODE0MTQzYywgMHhhN2RlZGU3OSwgMHhiYzVlNWVlMiwgMHgxNjBiMGIxZCwgMHhhZGRiZGI3NiwgMHhkYmUwZTAzYiwgMHg2NDMyMzI1NiwgMHg3NDNhM2E0ZSwgMHgxNDBhMGExZSwgMHg5MjQ5NDlkYiwgMHgwYzA2MDYwYSwgMHg0ODI0MjQ2YywgMHhiODVjNWNlNCwgMHg5ZmMyYzI1ZCwgMHhiZGQzZDM2ZSwgMHg0M2FjYWNlZiwgMHhjNDYyNjJhNiwgMHgzOTkxOTFhOCwgMHgzMTk1OTVhNCwgMHhkM2U0ZTQzNywgMHhmMjc5Nzk4YiwgMHhkNWU3ZTczMiwgMHg4YmM4Yzg0MywgMHg2ZTM3Mzc1OSwgMHhkYTZkNmRiNywgMHgwMThkOGQ4YywgMHhiMWQ1ZDU2NCwgMHg5YzRlNGVkMiwgMHg0OWE5YTllMCwgMHhkODZjNmNiNCwgMHhhYzU2NTZmYSwgMHhmM2Y0ZjQwNywgMHhjZmVhZWEyNSwgMHhjYTY1NjVhZiwgMHhmNDdhN2E4ZSwgMHg0N2FlYWVlOSwgMHgxMDA4MDgxOCwgMHg2ZmJhYmFkNSwgMHhmMDc4Nzg4OCwgMHg0YTI1MjU2ZiwgMHg1YzJlMmU3MiwgMHgzODFjMWMyNCwgMHg1N2E2YTZmMSwgMHg3M2I0YjRjNywgMHg5N2M2YzY1MSwgMHhjYmU4ZTgyMywgMHhhMWRkZGQ3YywgMHhlODc0NzQ5YywgMHgzZTFmMWYyMSwgMHg5NjRiNGJkZCwgMHg2MWJkYmRkYywgMHgwZDhiOGI4NiwgMHgwZjhhOGE4NSwgMHhlMDcwNzA5MCwgMHg3YzNlM2U0MiwgMHg3MWI1YjVjNCwgMHhjYzY2NjZhYSwgMHg5MDQ4NDhkOCwgMHgwNjAzMDMwNSwgMHhmN2Y2ZjYwMSwgMHgxYzBlMGUxMiwgMHhjMjYxNjFhMywgMHg2YTM1MzU1ZiwgMHhhZTU3NTdmOSwgMHg2OWI5YjlkMCwgMHgxNzg2ODY5MSwgMHg5OWMxYzE1OCwgMHgzYTFkMWQyNywgMHgyNzllOWViOSwgMHhkOWUxZTEzOCwgMHhlYmY4ZjgxMywgMHgyYjk4OThiMywgMHgyMjExMTEzMywgMHhkMjY5NjliYiwgMHhhOWQ5ZDk3MCwgMHgwNzhlOGU4OSwgMHgzMzk0OTRhNywgMHgyZDliOWJiNiwgMHgzYzFlMWUyMiwgMHgxNTg3ODc5MiwgMHhjOWU5ZTkyMCwgMHg4N2NlY2U0OSwgMHhhYTU1NTVmZiwgMHg1MDI4Mjg3OCwgMHhhNWRmZGY3YSwgMHgwMzhjOGM4ZiwgMHg1OWExYTFmOCwgMHgwOTg5ODk4MCwgMHgxYTBkMGQxNywgMHg2NWJmYmZkYSwgMHhkN2U2ZTYzMSwgMHg4NDQyNDJjNiwgMHhkMDY4NjhiOCwgMHg4MjQxNDFjMywgMHgyOTk5OTliMCwgMHg1YTJkMmQ3NywgMHgxZTBmMGYxMSwgMHg3YmIwYjBjYiwgMHhhODU0NTRmYywgMHg2ZGJiYmJkNiwgMHgyYzE2MTYzYV07XHJcbmNvbnN0IFQyID0gWzB4YTVjNjYzNjMsIDB4ODRmODdjN2MsIDB4OTllZTc3NzcsIDB4OGRmNjdiN2IsIDB4MGRmZmYyZjIsIDB4YmRkNjZiNmIsIDB4YjFkZTZmNmYsIDB4NTQ5MWM1YzUsIDB4NTA2MDMwMzAsIDB4MDMwMjAxMDEsIDB4YTljZTY3NjcsIDB4N2Q1NjJiMmIsIDB4MTllN2ZlZmUsIDB4NjJiNWQ3ZDcsIDB4ZTY0ZGFiYWIsIDB4OWFlYzc2NzYsIDB4NDU4ZmNhY2EsIDB4OWQxZjgyODIsIDB4NDA4OWM5YzksIDB4ODdmYTdkN2QsIDB4MTVlZmZhZmEsIDB4ZWJiMjU5NTksIDB4Yzk4ZTQ3NDcsIDB4MGJmYmYwZjAsIDB4ZWM0MWFkYWQsIDB4NjdiM2Q0ZDQsIDB4ZmQ1ZmEyYTIsIDB4ZWE0NWFmYWYsIDB4YmYyMzljOWMsIDB4Zjc1M2E0YTQsIDB4OTZlNDcyNzIsIDB4NWI5YmMwYzAsIDB4YzI3NWI3YjcsIDB4MWNlMWZkZmQsIDB4YWUzZDkzOTMsIDB4NmE0YzI2MjYsIDB4NWE2YzM2MzYsIDB4NDE3ZTNmM2YsIDB4MDJmNWY3ZjcsIDB4NGY4M2NjY2MsIDB4NWM2ODM0MzQsIDB4ZjQ1MWE1YTUsIDB4MzRkMWU1ZTUsIDB4MDhmOWYxZjEsIDB4OTNlMjcxNzEsIDB4NzNhYmQ4ZDgsIDB4NTM2MjMxMzEsIDB4M2YyYTE1MTUsIDB4MGMwODA0MDQsIDB4NTI5NWM3YzcsIDB4NjU0NjIzMjMsIDB4NWU5ZGMzYzMsIDB4MjgzMDE4MTgsIDB4YTEzNzk2OTYsIDB4MGYwYTA1MDUsIDB4YjUyZjlhOWEsIDB4MDkwZTA3MDcsIDB4MzYyNDEyMTIsIDB4OWIxYjgwODAsIDB4M2RkZmUyZTIsIDB4MjZjZGViZWIsIDB4Njk0ZTI3MjcsIDB4Y2Q3ZmIyYjIsIDB4OWZlYTc1NzUsIDB4MWIxMjA5MDksIDB4OWUxZDgzODMsIDB4NzQ1ODJjMmMsIDB4MmUzNDFhMWEsIDB4MmQzNjFiMWIsIDB4YjJkYzZlNmUsIDB4ZWViNDVhNWEsIDB4ZmI1YmEwYTAsIDB4ZjZhNDUyNTIsIDB4NGQ3NjNiM2IsIDB4NjFiN2Q2ZDYsIDB4Y2U3ZGIzYjMsIDB4N2I1MjI5MjksIDB4M2VkZGUzZTMsIDB4NzE1ZTJmMmYsIDB4OTcxMzg0ODQsIDB4ZjVhNjUzNTMsIDB4NjhiOWQxZDEsIDB4MDAwMDAwMDAsIDB4MmNjMWVkZWQsIDB4NjA0MDIwMjAsIDB4MWZlM2ZjZmMsIDB4Yzg3OWIxYjEsIDB4ZWRiNjViNWIsIDB4YmVkNDZhNmEsIDB4NDY4ZGNiY2IsIDB4ZDk2N2JlYmUsIDB4NGI3MjM5MzksIDB4ZGU5NDRhNGEsIDB4ZDQ5ODRjNGMsIDB4ZThiMDU4NTgsIDB4NGE4NWNmY2YsIDB4NmJiYmQwZDAsIDB4MmFjNWVmZWYsIDB4ZTU0ZmFhYWEsIDB4MTZlZGZiZmIsIDB4YzU4NjQzNDMsIDB4ZDc5YTRkNGQsIDB4NTU2NjMzMzMsIDB4OTQxMTg1ODUsIDB4Y2Y4YTQ1NDUsIDB4MTBlOWY5ZjksIDB4MDYwNDAyMDIsIDB4ODFmZTdmN2YsIDB4ZjBhMDUwNTAsIDB4NDQ3ODNjM2MsIDB4YmEyNTlmOWYsIDB4ZTM0YmE4YTgsIDB4ZjNhMjUxNTEsIDB4ZmU1ZGEzYTMsIDB4YzA4MDQwNDAsIDB4OGEwNThmOGYsIDB4YWQzZjkyOTIsIDB4YmMyMTlkOWQsIDB4NDg3MDM4MzgsIDB4MDRmMWY1ZjUsIDB4ZGY2M2JjYmMsIDB4YzE3N2I2YjYsIDB4NzVhZmRhZGEsIDB4NjM0MjIxMjEsIDB4MzAyMDEwMTAsIDB4MWFlNWZmZmYsIDB4MGVmZGYzZjMsIDB4NmRiZmQyZDIsIDB4NGM4MWNkY2QsIDB4MTQxODBjMGMsIDB4MzUyNjEzMTMsIDB4MmZjM2VjZWMsIDB4ZTFiZTVmNWYsIDB4YTIzNTk3OTcsIDB4Y2M4ODQ0NDQsIDB4MzkyZTE3MTcsIDB4NTc5M2M0YzQsIDB4ZjI1NWE3YTcsIDB4ODJmYzdlN2UsIDB4NDc3YTNkM2QsIDB4YWNjODY0NjQsIDB4ZTdiYTVkNWQsIDB4MmIzMjE5MTksIDB4OTVlNjczNzMsIDB4YTBjMDYwNjAsIDB4OTgxOTgxODEsIDB4ZDE5ZTRmNGYsIDB4N2ZhM2RjZGMsIDB4NjY0NDIyMjIsIDB4N2U1NDJhMmEsIDB4YWIzYjkwOTAsIDB4ODMwYjg4ODgsIDB4Y2E4YzQ2NDYsIDB4MjljN2VlZWUsIDB4ZDM2YmI4YjgsIDB4M2MyODE0MTQsIDB4NzlhN2RlZGUsIDB4ZTJiYzVlNWUsIDB4MWQxNjBiMGIsIDB4NzZhZGRiZGIsIDB4M2JkYmUwZTAsIDB4NTY2NDMyMzIsIDB4NGU3NDNhM2EsIDB4MWUxNDBhMGEsIDB4ZGI5MjQ5NDksIDB4MGEwYzA2MDYsIDB4NmM0ODI0MjQsIDB4ZTRiODVjNWMsIDB4NWQ5ZmMyYzIsIDB4NmViZGQzZDMsIDB4ZWY0M2FjYWMsIDB4YTZjNDYyNjIsIDB4YTgzOTkxOTEsIDB4YTQzMTk1OTUsIDB4MzdkM2U0ZTQsIDB4OGJmMjc5NzksIDB4MzJkNWU3ZTcsIDB4NDM4YmM4YzgsIDB4NTk2ZTM3MzcsIDB4YjdkYTZkNmQsIDB4OGMwMThkOGQsIDB4NjRiMWQ1ZDUsIDB4ZDI5YzRlNGUsIDB4ZTA0OWE5YTksIDB4YjRkODZjNmMsIDB4ZmFhYzU2NTYsIDB4MDdmM2Y0ZjQsIDB4MjVjZmVhZWEsIDB4YWZjYTY1NjUsIDB4OGVmNDdhN2EsIDB4ZTk0N2FlYWUsIDB4MTgxMDA4MDgsIDB4ZDU2ZmJhYmEsIDB4ODhmMDc4NzgsIDB4NmY0YTI1MjUsIDB4NzI1YzJlMmUsIDB4MjQzODFjMWMsIDB4ZjE1N2E2YTYsIDB4Yzc3M2I0YjQsIDB4NTE5N2M2YzYsIDB4MjNjYmU4ZTgsIDB4N2NhMWRkZGQsIDB4OWNlODc0NzQsIDB4MjEzZTFmMWYsIDB4ZGQ5NjRiNGIsIDB4ZGM2MWJkYmQsIDB4ODYwZDhiOGIsIDB4ODUwZjhhOGEsIDB4OTBlMDcwNzAsIDB4NDI3YzNlM2UsIDB4YzQ3MWI1YjUsIDB4YWFjYzY2NjYsIDB4ZDg5MDQ4NDgsIDB4MDUwNjAzMDMsIDB4MDFmN2Y2ZjYsIDB4MTIxYzBlMGUsIDB4YTNjMjYxNjEsIDB4NWY2YTM1MzUsIDB4ZjlhZTU3NTcsIDB4ZDA2OWI5YjksIDB4OTExNzg2ODYsIDB4NTg5OWMxYzEsIDB4MjczYTFkMWQsIDB4YjkyNzllOWUsIDB4MzhkOWUxZTEsIDB4MTNlYmY4ZjgsIDB4YjMyYjk4OTgsIDB4MzMyMjExMTEsIDB4YmJkMjY5NjksIDB4NzBhOWQ5ZDksIDB4ODkwNzhlOGUsIDB4YTczMzk0OTQsIDB4YjYyZDliOWIsIDB4MjIzYzFlMWUsIDB4OTIxNTg3ODcsIDB4MjBjOWU5ZTksIDB4NDk4N2NlY2UsIDB4ZmZhYTU1NTUsIDB4Nzg1MDI4MjgsIDB4N2FhNWRmZGYsIDB4OGYwMzhjOGMsIDB4Zjg1OWExYTEsIDB4ODAwOTg5ODksIDB4MTcxYTBkMGQsIDB4ZGE2NWJmYmYsIDB4MzFkN2U2ZTYsIDB4YzY4NDQyNDIsIDB4YjhkMDY4NjgsIDB4YzM4MjQxNDEsIDB4YjAyOTk5OTksIDB4Nzc1YTJkMmQsIDB4MTExZTBmMGYsIDB4Y2I3YmIwYjAsIDB4ZmNhODU0NTQsIDB4ZDY2ZGJiYmIsIDB4M2EyYzE2MTZdO1xyXG5jb25zdCBUMyA9IFsweDYzYTVjNjYzLCAweDdjODRmODdjLCAweDc3OTllZTc3LCAweDdiOGRmNjdiLCAweGYyMGRmZmYyLCAweDZiYmRkNjZiLCAweDZmYjFkZTZmLCAweGM1NTQ5MWM1LCAweDMwNTA2MDMwLCAweDAxMDMwMjAxLCAweDY3YTljZTY3LCAweDJiN2Q1NjJiLCAweGZlMTllN2ZlLCAweGQ3NjJiNWQ3LCAweGFiZTY0ZGFiLCAweDc2OWFlYzc2LCAweGNhNDU4ZmNhLCAweDgyOWQxZjgyLCAweGM5NDA4OWM5LCAweDdkODdmYTdkLCAweGZhMTVlZmZhLCAweDU5ZWJiMjU5LCAweDQ3Yzk4ZTQ3LCAweGYwMGJmYmYwLCAweGFkZWM0MWFkLCAweGQ0NjdiM2Q0LCAweGEyZmQ1ZmEyLCAweGFmZWE0NWFmLCAweDljYmYyMzljLCAweGE0Zjc1M2E0LCAweDcyOTZlNDcyLCAweGMwNWI5YmMwLCAweGI3YzI3NWI3LCAweGZkMWNlMWZkLCAweDkzYWUzZDkzLCAweDI2NmE0YzI2LCAweDM2NWE2YzM2LCAweDNmNDE3ZTNmLCAweGY3MDJmNWY3LCAweGNjNGY4M2NjLCAweDM0NWM2ODM0LCAweGE1ZjQ1MWE1LCAweGU1MzRkMWU1LCAweGYxMDhmOWYxLCAweDcxOTNlMjcxLCAweGQ4NzNhYmQ4LCAweDMxNTM2MjMxLCAweDE1M2YyYTE1LCAweDA0MGMwODA0LCAweGM3NTI5NWM3LCAweDIzNjU0NjIzLCAweGMzNWU5ZGMzLCAweDE4MjgzMDE4LCAweDk2YTEzNzk2LCAweDA1MGYwYTA1LCAweDlhYjUyZjlhLCAweDA3MDkwZTA3LCAweDEyMzYyNDEyLCAweDgwOWIxYjgwLCAweGUyM2RkZmUyLCAweGViMjZjZGViLCAweDI3Njk0ZTI3LCAweGIyY2Q3ZmIyLCAweDc1OWZlYTc1LCAweDA5MWIxMjA5LCAweDgzOWUxZDgzLCAweDJjNzQ1ODJjLCAweDFhMmUzNDFhLCAweDFiMmQzNjFiLCAweDZlYjJkYzZlLCAweDVhZWViNDVhLCAweGEwZmI1YmEwLCAweDUyZjZhNDUyLCAweDNiNGQ3NjNiLCAweGQ2NjFiN2Q2LCAweGIzY2U3ZGIzLCAweDI5N2I1MjI5LCAweGUzM2VkZGUzLCAweDJmNzE1ZTJmLCAweDg0OTcxMzg0LCAweDUzZjVhNjUzLCAweGQxNjhiOWQxLCAweDAwMDAwMDAwLCAweGVkMmNjMWVkLCAweDIwNjA0MDIwLCAweGZjMWZlM2ZjLCAweGIxYzg3OWIxLCAweDViZWRiNjViLCAweDZhYmVkNDZhLCAweGNiNDY4ZGNiLCAweGJlZDk2N2JlLCAweDM5NGI3MjM5LCAweDRhZGU5NDRhLCAweDRjZDQ5ODRjLCAweDU4ZThiMDU4LCAweGNmNGE4NWNmLCAweGQwNmJiYmQwLCAweGVmMmFjNWVmLCAweGFhZTU0ZmFhLCAweGZiMTZlZGZiLCAweDQzYzU4NjQzLCAweDRkZDc5YTRkLCAweDMzNTU2NjMzLCAweDg1OTQxMTg1LCAweDQ1Y2Y4YTQ1LCAweGY5MTBlOWY5LCAweDAyMDYwNDAyLCAweDdmODFmZTdmLCAweDUwZjBhMDUwLCAweDNjNDQ3ODNjLCAweDlmYmEyNTlmLCAweGE4ZTM0YmE4LCAweDUxZjNhMjUxLCAweGEzZmU1ZGEzLCAweDQwYzA4MDQwLCAweDhmOGEwNThmLCAweDkyYWQzZjkyLCAweDlkYmMyMTlkLCAweDM4NDg3MDM4LCAweGY1MDRmMWY1LCAweGJjZGY2M2JjLCAweGI2YzE3N2I2LCAweGRhNzVhZmRhLCAweDIxNjM0MjIxLCAweDEwMzAyMDEwLCAweGZmMWFlNWZmLCAweGYzMGVmZGYzLCAweGQyNmRiZmQyLCAweGNkNGM4MWNkLCAweDBjMTQxODBjLCAweDEzMzUyNjEzLCAweGVjMmZjM2VjLCAweDVmZTFiZTVmLCAweDk3YTIzNTk3LCAweDQ0Y2M4ODQ0LCAweDE3MzkyZTE3LCAweGM0NTc5M2M0LCAweGE3ZjI1NWE3LCAweDdlODJmYzdlLCAweDNkNDc3YTNkLCAweDY0YWNjODY0LCAweDVkZTdiYTVkLCAweDE5MmIzMjE5LCAweDczOTVlNjczLCAweDYwYTBjMDYwLCAweDgxOTgxOTgxLCAweDRmZDE5ZTRmLCAweGRjN2ZhM2RjLCAweDIyNjY0NDIyLCAweDJhN2U1NDJhLCAweDkwYWIzYjkwLCAweDg4ODMwYjg4LCAweDQ2Y2E4YzQ2LCAweGVlMjljN2VlLCAweGI4ZDM2YmI4LCAweDE0M2MyODE0LCAweGRlNzlhN2RlLCAweDVlZTJiYzVlLCAweDBiMWQxNjBiLCAweGRiNzZhZGRiLCAweGUwM2JkYmUwLCAweDMyNTY2NDMyLCAweDNhNGU3NDNhLCAweDBhMWUxNDBhLCAweDQ5ZGI5MjQ5LCAweDA2MGEwYzA2LCAweDI0NmM0ODI0LCAweDVjZTRiODVjLCAweGMyNWQ5ZmMyLCAweGQzNmViZGQzLCAweGFjZWY0M2FjLCAweDYyYTZjNDYyLCAweDkxYTgzOTkxLCAweDk1YTQzMTk1LCAweGU0MzdkM2U0LCAweDc5OGJmMjc5LCAweGU3MzJkNWU3LCAweGM4NDM4YmM4LCAweDM3NTk2ZTM3LCAweDZkYjdkYTZkLCAweDhkOGMwMThkLCAweGQ1NjRiMWQ1LCAweDRlZDI5YzRlLCAweGE5ZTA0OWE5LCAweDZjYjRkODZjLCAweDU2ZmFhYzU2LCAweGY0MDdmM2Y0LCAweGVhMjVjZmVhLCAweDY1YWZjYTY1LCAweDdhOGVmNDdhLCAweGFlZTk0N2FlLCAweDA4MTgxMDA4LCAweGJhZDU2ZmJhLCAweDc4ODhmMDc4LCAweDI1NmY0YTI1LCAweDJlNzI1YzJlLCAweDFjMjQzODFjLCAweGE2ZjE1N2E2LCAweGI0Yzc3M2I0LCAweGM2NTE5N2M2LCAweGU4MjNjYmU4LCAweGRkN2NhMWRkLCAweDc0OWNlODc0LCAweDFmMjEzZTFmLCAweDRiZGQ5NjRiLCAweGJkZGM2MWJkLCAweDhiODYwZDhiLCAweDhhODUwZjhhLCAweDcwOTBlMDcwLCAweDNlNDI3YzNlLCAweGI1YzQ3MWI1LCAweDY2YWFjYzY2LCAweDQ4ZDg5MDQ4LCAweDAzMDUwNjAzLCAweGY2MDFmN2Y2LCAweDBlMTIxYzBlLCAweDYxYTNjMjYxLCAweDM1NWY2YTM1LCAweDU3ZjlhZTU3LCAweGI5ZDA2OWI5LCAweDg2OTExNzg2LCAweGMxNTg5OWMxLCAweDFkMjczYTFkLCAweDllYjkyNzllLCAweGUxMzhkOWUxLCAweGY4MTNlYmY4LCAweDk4YjMyYjk4LCAweDExMzMyMjExLCAweDY5YmJkMjY5LCAweGQ5NzBhOWQ5LCAweDhlODkwNzhlLCAweDk0YTczMzk0LCAweDliYjYyZDliLCAweDFlMjIzYzFlLCAweDg3OTIxNTg3LCAweGU5MjBjOWU5LCAweGNlNDk4N2NlLCAweDU1ZmZhYTU1LCAweDI4Nzg1MDI4LCAweGRmN2FhNWRmLCAweDhjOGYwMzhjLCAweGExZjg1OWExLCAweDg5ODAwOTg5LCAweDBkMTcxYTBkLCAweGJmZGE2NWJmLCAweGU2MzFkN2U2LCAweDQyYzY4NDQyLCAweDY4YjhkMDY4LCAweDQxYzM4MjQxLCAweDk5YjAyOTk5LCAweDJkNzc1YTJkLCAweDBmMTExZTBmLCAweGIwY2I3YmIwLCAweDU0ZmNhODU0LCAweGJiZDY2ZGJiLCAweDE2M2EyYzE2XTtcclxuY29uc3QgVDQgPSBbMHg2MzYzYTVjNiwgMHg3YzdjODRmOCwgMHg3Nzc3OTllZSwgMHg3YjdiOGRmNiwgMHhmMmYyMGRmZiwgMHg2YjZiYmRkNiwgMHg2ZjZmYjFkZSwgMHhjNWM1NTQ5MSwgMHgzMDMwNTA2MCwgMHgwMTAxMDMwMiwgMHg2NzY3YTljZSwgMHgyYjJiN2Q1NiwgMHhmZWZlMTllNywgMHhkN2Q3NjJiNSwgMHhhYmFiZTY0ZCwgMHg3Njc2OWFlYywgMHhjYWNhNDU4ZiwgMHg4MjgyOWQxZiwgMHhjOWM5NDA4OSwgMHg3ZDdkODdmYSwgMHhmYWZhMTVlZiwgMHg1OTU5ZWJiMiwgMHg0NzQ3Yzk4ZSwgMHhmMGYwMGJmYiwgMHhhZGFkZWM0MSwgMHhkNGQ0NjdiMywgMHhhMmEyZmQ1ZiwgMHhhZmFmZWE0NSwgMHg5YzljYmYyMywgMHhhNGE0Zjc1MywgMHg3MjcyOTZlNCwgMHhjMGMwNWI5YiwgMHhiN2I3YzI3NSwgMHhmZGZkMWNlMSwgMHg5MzkzYWUzZCwgMHgyNjI2NmE0YywgMHgzNjM2NWE2YywgMHgzZjNmNDE3ZSwgMHhmN2Y3MDJmNSwgMHhjY2NjNGY4MywgMHgzNDM0NWM2OCwgMHhhNWE1ZjQ1MSwgMHhlNWU1MzRkMSwgMHhmMWYxMDhmOSwgMHg3MTcxOTNlMiwgMHhkOGQ4NzNhYiwgMHgzMTMxNTM2MiwgMHgxNTE1M2YyYSwgMHgwNDA0MGMwOCwgMHhjN2M3NTI5NSwgMHgyMzIzNjU0NiwgMHhjM2MzNWU5ZCwgMHgxODE4MjgzMCwgMHg5Njk2YTEzNywgMHgwNTA1MGYwYSwgMHg5YTlhYjUyZiwgMHgwNzA3MDkwZSwgMHgxMjEyMzYyNCwgMHg4MDgwOWIxYiwgMHhlMmUyM2RkZiwgMHhlYmViMjZjZCwgMHgyNzI3Njk0ZSwgMHhiMmIyY2Q3ZiwgMHg3NTc1OWZlYSwgMHgwOTA5MWIxMiwgMHg4MzgzOWUxZCwgMHgyYzJjNzQ1OCwgMHgxYTFhMmUzNCwgMHgxYjFiMmQzNiwgMHg2ZTZlYjJkYywgMHg1YTVhZWViNCwgMHhhMGEwZmI1YiwgMHg1MjUyZjZhNCwgMHgzYjNiNGQ3NiwgMHhkNmQ2NjFiNywgMHhiM2IzY2U3ZCwgMHgyOTI5N2I1MiwgMHhlM2UzM2VkZCwgMHgyZjJmNzE1ZSwgMHg4NDg0OTcxMywgMHg1MzUzZjVhNiwgMHhkMWQxNjhiOSwgMHgwMDAwMDAwMCwgMHhlZGVkMmNjMSwgMHgyMDIwNjA0MCwgMHhmY2ZjMWZlMywgMHhiMWIxYzg3OSwgMHg1YjViZWRiNiwgMHg2YTZhYmVkNCwgMHhjYmNiNDY4ZCwgMHhiZWJlZDk2NywgMHgzOTM5NGI3MiwgMHg0YTRhZGU5NCwgMHg0YzRjZDQ5OCwgMHg1ODU4ZThiMCwgMHhjZmNmNGE4NSwgMHhkMGQwNmJiYiwgMHhlZmVmMmFjNSwgMHhhYWFhZTU0ZiwgMHhmYmZiMTZlZCwgMHg0MzQzYzU4NiwgMHg0ZDRkZDc5YSwgMHgzMzMzNTU2NiwgMHg4NTg1OTQxMSwgMHg0NTQ1Y2Y4YSwgMHhmOWY5MTBlOSwgMHgwMjAyMDYwNCwgMHg3ZjdmODFmZSwgMHg1MDUwZjBhMCwgMHgzYzNjNDQ3OCwgMHg5ZjlmYmEyNSwgMHhhOGE4ZTM0YiwgMHg1MTUxZjNhMiwgMHhhM2EzZmU1ZCwgMHg0MDQwYzA4MCwgMHg4ZjhmOGEwNSwgMHg5MjkyYWQzZiwgMHg5ZDlkYmMyMSwgMHgzODM4NDg3MCwgMHhmNWY1MDRmMSwgMHhiY2JjZGY2MywgMHhiNmI2YzE3NywgMHhkYWRhNzVhZiwgMHgyMTIxNjM0MiwgMHgxMDEwMzAyMCwgMHhmZmZmMWFlNSwgMHhmM2YzMGVmZCwgMHhkMmQyNmRiZiwgMHhjZGNkNGM4MSwgMHgwYzBjMTQxOCwgMHgxMzEzMzUyNiwgMHhlY2VjMmZjMywgMHg1ZjVmZTFiZSwgMHg5Nzk3YTIzNSwgMHg0NDQ0Y2M4OCwgMHgxNzE3MzkyZSwgMHhjNGM0NTc5MywgMHhhN2E3ZjI1NSwgMHg3ZTdlODJmYywgMHgzZDNkNDc3YSwgMHg2NDY0YWNjOCwgMHg1ZDVkZTdiYSwgMHgxOTE5MmIzMiwgMHg3MzczOTVlNiwgMHg2MDYwYTBjMCwgMHg4MTgxOTgxOSwgMHg0ZjRmZDE5ZSwgMHhkY2RjN2ZhMywgMHgyMjIyNjY0NCwgMHgyYTJhN2U1NCwgMHg5MDkwYWIzYiwgMHg4ODg4ODMwYiwgMHg0NjQ2Y2E4YywgMHhlZWVlMjljNywgMHhiOGI4ZDM2YiwgMHgxNDE0M2MyOCwgMHhkZWRlNzlhNywgMHg1ZTVlZTJiYywgMHgwYjBiMWQxNiwgMHhkYmRiNzZhZCwgMHhlMGUwM2JkYiwgMHgzMjMyNTY2NCwgMHgzYTNhNGU3NCwgMHgwYTBhMWUxNCwgMHg0OTQ5ZGI5MiwgMHgwNjA2MGEwYywgMHgyNDI0NmM0OCwgMHg1YzVjZTRiOCwgMHhjMmMyNWQ5ZiwgMHhkM2QzNmViZCwgMHhhY2FjZWY0MywgMHg2MjYyYTZjNCwgMHg5MTkxYTgzOSwgMHg5NTk1YTQzMSwgMHhlNGU0MzdkMywgMHg3OTc5OGJmMiwgMHhlN2U3MzJkNSwgMHhjOGM4NDM4YiwgMHgzNzM3NTk2ZSwgMHg2ZDZkYjdkYSwgMHg4ZDhkOGMwMSwgMHhkNWQ1NjRiMSwgMHg0ZTRlZDI5YywgMHhhOWE5ZTA0OSwgMHg2YzZjYjRkOCwgMHg1NjU2ZmFhYywgMHhmNGY0MDdmMywgMHhlYWVhMjVjZiwgMHg2NTY1YWZjYSwgMHg3YTdhOGVmNCwgMHhhZWFlZTk0NywgMHgwODA4MTgxMCwgMHhiYWJhZDU2ZiwgMHg3ODc4ODhmMCwgMHgyNTI1NmY0YSwgMHgyZTJlNzI1YywgMHgxYzFjMjQzOCwgMHhhNmE2ZjE1NywgMHhiNGI0Yzc3MywgMHhjNmM2NTE5NywgMHhlOGU4MjNjYiwgMHhkZGRkN2NhMSwgMHg3NDc0OWNlOCwgMHgxZjFmMjEzZSwgMHg0YjRiZGQ5NiwgMHhiZGJkZGM2MSwgMHg4YjhiODYwZCwgMHg4YThhODUwZiwgMHg3MDcwOTBlMCwgMHgzZTNlNDI3YywgMHhiNWI1YzQ3MSwgMHg2NjY2YWFjYywgMHg0ODQ4ZDg5MCwgMHgwMzAzMDUwNiwgMHhmNmY2MDFmNywgMHgwZTBlMTIxYywgMHg2MTYxYTNjMiwgMHgzNTM1NWY2YSwgMHg1NzU3ZjlhZSwgMHhiOWI5ZDA2OSwgMHg4Njg2OTExNywgMHhjMWMxNTg5OSwgMHgxZDFkMjczYSwgMHg5ZTllYjkyNywgMHhlMWUxMzhkOSwgMHhmOGY4MTNlYiwgMHg5ODk4YjMyYiwgMHgxMTExMzMyMiwgMHg2OTY5YmJkMiwgMHhkOWQ5NzBhOSwgMHg4ZThlODkwNywgMHg5NDk0YTczMywgMHg5YjliYjYyZCwgMHgxZTFlMjIzYywgMHg4Nzg3OTIxNSwgMHhlOWU5MjBjOSwgMHhjZWNlNDk4NywgMHg1NTU1ZmZhYSwgMHgyODI4Nzg1MCwgMHhkZmRmN2FhNSwgMHg4YzhjOGYwMywgMHhhMWExZjg1OSwgMHg4OTg5ODAwOSwgMHgwZDBkMTcxYSwgMHhiZmJmZGE2NSwgMHhlNmU2MzFkNywgMHg0MjQyYzY4NCwgMHg2ODY4YjhkMCwgMHg0MTQxYzM4MiwgMHg5OTk5YjAyOSwgMHgyZDJkNzc1YSwgMHgwZjBmMTExZSwgMHhiMGIwY2I3YiwgMHg1NDU0ZmNhOCwgMHhiYmJiZDY2ZCwgMHgxNjE2M2EyY107XHJcbi8vIFRyYW5zZm9ybWF0aW9ucyBmb3IgZGVjcnlwdGlvblxyXG5jb25zdCBUNSA9IFsweDUxZjRhNzUwLCAweDdlNDE2NTUzLCAweDFhMTdhNGMzLCAweDNhMjc1ZTk2LCAweDNiYWI2YmNiLCAweDFmOWQ0NWYxLCAweGFjZmE1OGFiLCAweDRiZTMwMzkzLCAweDIwMzBmYTU1LCAweGFkNzY2ZGY2LCAweDg4Y2M3NjkxLCAweGY1MDI0YzI1LCAweDRmZTVkN2ZjLCAweGM1MmFjYmQ3LCAweDI2MzU0NDgwLCAweGI1NjJhMzhmLCAweGRlYjE1YTQ5LCAweDI1YmExYjY3LCAweDQ1ZWEwZTk4LCAweDVkZmVjMGUxLCAweGMzMmY3NTAyLCAweDgxNGNmMDEyLCAweDhkNDY5N2EzLCAweDZiZDNmOWM2LCAweDAzOGY1ZmU3LCAweDE1OTI5Yzk1LCAweGJmNmQ3YWViLCAweDk1NTI1OWRhLCAweGQ0YmU4MzJkLCAweDU4NzQyMWQzLCAweDQ5ZTA2OTI5LCAweDhlYzljODQ0LCAweDc1YzI4OTZhLCAweGY0OGU3OTc4LCAweDk5NTgzZTZiLCAweDI3Yjk3MWRkLCAweGJlZTE0ZmI2LCAweGYwODhhZDE3LCAweGM5MjBhYzY2LCAweDdkY2UzYWI0LCAweDYzZGY0YTE4LCAweGU1MWEzMTgyLCAweDk3NTEzMzYwLCAweDYyNTM3ZjQ1LCAweGIxNjQ3N2UwLCAweGJiNmJhZTg0LCAweGZlODFhMDFjLCAweGY5MDgyYjk0LCAweDcwNDg2ODU4LCAweDhmNDVmZDE5LCAweDk0ZGU2Yzg3LCAweDUyN2JmOGI3LCAweGFiNzNkMzIzLCAweDcyNGIwMmUyLCAweGUzMWY4ZjU3LCAweDY2NTVhYjJhLCAweGIyZWIyODA3LCAweDJmYjVjMjAzLCAweDg2YzU3YjlhLCAweGQzMzcwOGE1LCAweDMwMjg4N2YyLCAweDIzYmZhNWIyLCAweDAyMDM2YWJhLCAweGVkMTY4MjVjLCAweDhhY2YxYzJiLCAweGE3NzliNDkyLCAweGYzMDdmMmYwLCAweDRlNjllMmExLCAweDY1ZGFmNGNkLCAweDA2MDViZWQ1LCAweGQxMzQ2MjFmLCAweGM0YTZmZThhLCAweDM0MmU1MzlkLCAweGEyZjM1NWEwLCAweDA1OGFlMTMyLCAweGE0ZjZlYjc1LCAweDBiODNlYzM5LCAweDQwNjBlZmFhLCAweDVlNzE5ZjA2LCAweGJkNmUxMDUxLCAweDNlMjE4YWY5LCAweDk2ZGQwNjNkLCAweGRkM2UwNWFlLCAweDRkZTZiZDQ2LCAweDkxNTQ4ZGI1LCAweDcxYzQ1ZDA1LCAweDA0MDZkNDZmLCAweDYwNTAxNWZmLCAweDE5OThmYjI0LCAweGQ2YmRlOTk3LCAweDg5NDA0M2NjLCAweDY3ZDk5ZTc3LCAweGIwZTg0MmJkLCAweDA3ODk4Yjg4LCAweGU3MTk1YjM4LCAweDc5YzhlZWRiLCAweGExN2MwYTQ3LCAweDdjNDIwZmU5LCAweGY4ODQxZWM5LCAweDAwMDAwMDAwLCAweDA5ODA4NjgzLCAweDMyMmJlZDQ4LCAweDFlMTE3MGFjLCAweDZjNWE3MjRlLCAweGZkMGVmZmZiLCAweDBmODUzODU2LCAweDNkYWVkNTFlLCAweDM2MmQzOTI3LCAweDBhMGZkOTY0LCAweDY4NWNhNjIxLCAweDliNWI1NGQxLCAweDI0MzYyZTNhLCAweDBjMGE2N2IxLCAweDkzNTdlNzBmLCAweGI0ZWU5NmQyLCAweDFiOWI5MTllLCAweDgwYzBjNTRmLCAweDYxZGMyMGEyLCAweDVhNzc0YjY5LCAweDFjMTIxYTE2LCAweGUyOTNiYTBhLCAweGMwYTAyYWU1LCAweDNjMjJlMDQzLCAweDEyMWIxNzFkLCAweDBlMDkwZDBiLCAweGYyOGJjN2FkLCAweDJkYjZhOGI5LCAweDE0MWVhOWM4LCAweDU3ZjExOTg1LCAweGFmNzUwNzRjLCAweGVlOTlkZGJiLCAweGEzN2Y2MGZkLCAweGY3MDEyNjlmLCAweDVjNzJmNWJjLCAweDQ0NjYzYmM1LCAweDViZmI3ZTM0LCAweDhiNDMyOTc2LCAweGNiMjNjNmRjLCAweGI2ZWRmYzY4LCAweGI4ZTRmMTYzLCAweGQ3MzFkY2NhLCAweDQyNjM4NTEwLCAweDEzOTcyMjQwLCAweDg0YzYxMTIwLCAweDg1NGEyNDdkLCAweGQyYmIzZGY4LCAweGFlZjkzMjExLCAweGM3MjlhMTZkLCAweDFkOWUyZjRiLCAweGRjYjIzMGYzLCAweDBkODY1MmVjLCAweDc3YzFlM2QwLCAweDJiYjMxNjZjLCAweGE5NzBiOTk5LCAweDExOTQ0OGZhLCAweDQ3ZTk2NDIyLCAweGE4ZmM4Y2M0LCAweGEwZjAzZjFhLCAweDU2N2QyY2Q4LCAweDIyMzM5MGVmLCAweDg3NDk0ZWM3LCAweGQ5MzhkMWMxLCAweDhjY2FhMmZlLCAweDk4ZDQwYjM2LCAweGE2ZjU4MWNmLCAweGE1N2FkZTI4LCAweGRhYjc4ZTI2LCAweDNmYWRiZmE0LCAweDJjM2E5ZGU0LCAweDUwNzg5MjBkLCAweDZhNWZjYzliLCAweDU0N2U0NjYyLCAweGY2OGQxM2MyLCAweDkwZDhiOGU4LCAweDJlMzlmNzVlLCAweDgyYzNhZmY1LCAweDlmNWQ4MGJlLCAweDY5ZDA5MzdjLCAweDZmZDUyZGE5LCAweGNmMjUxMmIzLCAweGM4YWM5OTNiLCAweDEwMTg3ZGE3LCAweGU4OWM2MzZlLCAweGRiM2JiYjdiLCAweGNkMjY3ODA5LCAweDZlNTkxOGY0LCAweGVjOWFiNzAxLCAweDgzNGY5YWE4LCAweGU2OTU2ZTY1LCAweGFhZmZlNjdlLCAweDIxYmNjZjA4LCAweGVmMTVlOGU2LCAweGJhZTc5YmQ5LCAweDRhNmYzNmNlLCAweGVhOWYwOWQ0LCAweDI5YjA3Y2Q2LCAweDMxYTRiMmFmLCAweDJhM2YyMzMxLCAweGM2YTU5NDMwLCAweDM1YTI2NmMwLCAweDc0NGViYzM3LCAweGZjODJjYWE2LCAweGUwOTBkMGIwLCAweDMzYTdkODE1LCAweGYxMDQ5ODRhLCAweDQxZWNkYWY3LCAweDdmY2Q1MDBlLCAweDE3OTFmNjJmLCAweDc2NGRkNjhkLCAweDQzZWZiMDRkLCAweGNjYWE0ZDU0LCAweGU0OTYwNGRmLCAweDllZDFiNWUzLCAweDRjNmE4ODFiLCAweGMxMmMxZmI4LCAweDQ2NjU1MTdmLCAweDlkNWVlYTA0LCAweDAxOGMzNTVkLCAweGZhODc3NDczLCAweGZiMGI0MTJlLCAweGIzNjcxZDVhLCAweDkyZGJkMjUyLCAweGU5MTA1NjMzLCAweDZkZDY0NzEzLCAweDlhZDc2MThjLCAweDM3YTEwYzdhLCAweDU5ZjgxNDhlLCAweGViMTMzYzg5LCAweGNlYTkyN2VlLCAweGI3NjFjOTM1LCAweGUxMWNlNWVkLCAweDdhNDdiMTNjLCAweDljZDJkZjU5LCAweDU1ZjI3MzNmLCAweDE4MTRjZTc5LCAweDczYzczN2JmLCAweDUzZjdjZGVhLCAweDVmZmRhYTViLCAweGRmM2Q2ZjE0LCAweDc4NDRkYjg2LCAweGNhYWZmMzgxLCAweGI5NjhjNDNlLCAweDM4MjQzNDJjLCAweGMyYTM0MDVmLCAweDE2MWRjMzcyLCAweGJjZTIyNTBjLCAweDI4M2M0OThiLCAweGZmMGQ5NTQxLCAweDM5YTgwMTcxLCAweDA4MGNiM2RlLCAweGQ4YjRlNDljLCAweDY0NTZjMTkwLCAweDdiY2I4NDYxLCAweGQ1MzJiNjcwLCAweDQ4NmM1Yzc0LCAweGQwYjg1NzQyXTtcclxuY29uc3QgVDYgPSBbMHg1MDUxZjRhNywgMHg1MzdlNDE2NSwgMHhjMzFhMTdhNCwgMHg5NjNhMjc1ZSwgMHhjYjNiYWI2YiwgMHhmMTFmOWQ0NSwgMHhhYmFjZmE1OCwgMHg5MzRiZTMwMywgMHg1NTIwMzBmYSwgMHhmNmFkNzY2ZCwgMHg5MTg4Y2M3NiwgMHgyNWY1MDI0YywgMHhmYzRmZTVkNywgMHhkN2M1MmFjYiwgMHg4MDI2MzU0NCwgMHg4ZmI1NjJhMywgMHg0OWRlYjE1YSwgMHg2NzI1YmExYiwgMHg5ODQ1ZWEwZSwgMHhlMTVkZmVjMCwgMHgwMmMzMmY3NSwgMHgxMjgxNGNmMCwgMHhhMzhkNDY5NywgMHhjNjZiZDNmOSwgMHhlNzAzOGY1ZiwgMHg5NTE1OTI5YywgMHhlYmJmNmQ3YSwgMHhkYTk1NTI1OSwgMHgyZGQ0YmU4MywgMHhkMzU4NzQyMSwgMHgyOTQ5ZTA2OSwgMHg0NDhlYzljOCwgMHg2YTc1YzI4OSwgMHg3OGY0OGU3OSwgMHg2Yjk5NTgzZSwgMHhkZDI3Yjk3MSwgMHhiNmJlZTE0ZiwgMHgxN2YwODhhZCwgMHg2NmM5MjBhYywgMHhiNDdkY2UzYSwgMHgxODYzZGY0YSwgMHg4MmU1MWEzMSwgMHg2MDk3NTEzMywgMHg0NTYyNTM3ZiwgMHhlMGIxNjQ3NywgMHg4NGJiNmJhZSwgMHgxY2ZlODFhMCwgMHg5NGY5MDgyYiwgMHg1ODcwNDg2OCwgMHgxOThmNDVmZCwgMHg4Nzk0ZGU2YywgMHhiNzUyN2JmOCwgMHgyM2FiNzNkMywgMHhlMjcyNGIwMiwgMHg1N2UzMWY4ZiwgMHgyYTY2NTVhYiwgMHgwN2IyZWIyOCwgMHgwMzJmYjVjMiwgMHg5YTg2YzU3YiwgMHhhNWQzMzcwOCwgMHhmMjMwMjg4NywgMHhiMjIzYmZhNSwgMHhiYTAyMDM2YSwgMHg1Y2VkMTY4MiwgMHgyYjhhY2YxYywgMHg5MmE3NzliNCwgMHhmMGYzMDdmMiwgMHhhMTRlNjllMiwgMHhjZDY1ZGFmNCwgMHhkNTA2MDViZSwgMHgxZmQxMzQ2MiwgMHg4YWM0YTZmZSwgMHg5ZDM0MmU1MywgMHhhMGEyZjM1NSwgMHgzMjA1OGFlMSwgMHg3NWE0ZjZlYiwgMHgzOTBiODNlYywgMHhhYTQwNjBlZiwgMHgwNjVlNzE5ZiwgMHg1MWJkNmUxMCwgMHhmOTNlMjE4YSwgMHgzZDk2ZGQwNiwgMHhhZWRkM2UwNSwgMHg0NjRkZTZiZCwgMHhiNTkxNTQ4ZCwgMHgwNTcxYzQ1ZCwgMHg2ZjA0MDZkNCwgMHhmZjYwNTAxNSwgMHgyNDE5OThmYiwgMHg5N2Q2YmRlOSwgMHhjYzg5NDA0MywgMHg3NzY3ZDk5ZSwgMHhiZGIwZTg0MiwgMHg4ODA3ODk4YiwgMHgzOGU3MTk1YiwgMHhkYjc5YzhlZSwgMHg0N2ExN2MwYSwgMHhlOTdjNDIwZiwgMHhjOWY4ODQxZSwgMHgwMDAwMDAwMCwgMHg4MzA5ODA4NiwgMHg0ODMyMmJlZCwgMHhhYzFlMTE3MCwgMHg0ZTZjNWE3MiwgMHhmYmZkMGVmZiwgMHg1NjBmODUzOCwgMHgxZTNkYWVkNSwgMHgyNzM2MmQzOSwgMHg2NDBhMGZkOSwgMHgyMTY4NWNhNiwgMHhkMTliNWI1NCwgMHgzYTI0MzYyZSwgMHhiMTBjMGE2NywgMHgwZjkzNTdlNywgMHhkMmI0ZWU5NiwgMHg5ZTFiOWI5MSwgMHg0ZjgwYzBjNSwgMHhhMjYxZGMyMCwgMHg2OTVhNzc0YiwgMHgxNjFjMTIxYSwgMHgwYWUyOTNiYSwgMHhlNWMwYTAyYSwgMHg0MzNjMjJlMCwgMHgxZDEyMWIxNywgMHgwYjBlMDkwZCwgMHhhZGYyOGJjNywgMHhiOTJkYjZhOCwgMHhjODE0MWVhOSwgMHg4NTU3ZjExOSwgMHg0Y2FmNzUwNywgMHhiYmVlOTlkZCwgMHhmZGEzN2Y2MCwgMHg5ZmY3MDEyNiwgMHhiYzVjNzJmNSwgMHhjNTQ0NjYzYiwgMHgzNDViZmI3ZSwgMHg3NjhiNDMyOSwgMHhkY2NiMjNjNiwgMHg2OGI2ZWRmYywgMHg2M2I4ZTRmMSwgMHhjYWQ3MzFkYywgMHgxMDQyNjM4NSwgMHg0MDEzOTcyMiwgMHgyMDg0YzYxMSwgMHg3ZDg1NGEyNCwgMHhmOGQyYmIzZCwgMHgxMWFlZjkzMiwgMHg2ZGM3MjlhMSwgMHg0YjFkOWUyZiwgMHhmM2RjYjIzMCwgMHhlYzBkODY1MiwgMHhkMDc3YzFlMywgMHg2YzJiYjMxNiwgMHg5OWE5NzBiOSwgMHhmYTExOTQ0OCwgMHgyMjQ3ZTk2NCwgMHhjNGE4ZmM4YywgMHgxYWEwZjAzZiwgMHhkODU2N2QyYywgMHhlZjIyMzM5MCwgMHhjNzg3NDk0ZSwgMHhjMWQ5MzhkMSwgMHhmZThjY2FhMiwgMHgzNjk4ZDQwYiwgMHhjZmE2ZjU4MSwgMHgyOGE1N2FkZSwgMHgyNmRhYjc4ZSwgMHhhNDNmYWRiZiwgMHhlNDJjM2E5ZCwgMHgwZDUwNzg5MiwgMHg5YjZhNWZjYywgMHg2MjU0N2U0NiwgMHhjMmY2OGQxMywgMHhlODkwZDhiOCwgMHg1ZTJlMzlmNywgMHhmNTgyYzNhZiwgMHhiZTlmNWQ4MCwgMHg3YzY5ZDA5MywgMHhhOTZmZDUyZCwgMHhiM2NmMjUxMiwgMHgzYmM4YWM5OSwgMHhhNzEwMTg3ZCwgMHg2ZWU4OWM2MywgMHg3YmRiM2JiYiwgMHgwOWNkMjY3OCwgMHhmNDZlNTkxOCwgMHgwMWVjOWFiNywgMHhhODgzNGY5YSwgMHg2NWU2OTU2ZSwgMHg3ZWFhZmZlNiwgMHgwODIxYmNjZiwgMHhlNmVmMTVlOCwgMHhkOWJhZTc5YiwgMHhjZTRhNmYzNiwgMHhkNGVhOWYwOSwgMHhkNjI5YjA3YywgMHhhZjMxYTRiMiwgMHgzMTJhM2YyMywgMHgzMGM2YTU5NCwgMHhjMDM1YTI2NiwgMHgzNzc0NGViYywgMHhhNmZjODJjYSwgMHhiMGUwOTBkMCwgMHgxNTMzYTdkOCwgMHg0YWYxMDQ5OCwgMHhmNzQxZWNkYSwgMHgwZTdmY2Q1MCwgMHgyZjE3OTFmNiwgMHg4ZDc2NGRkNiwgMHg0ZDQzZWZiMCwgMHg1NGNjYWE0ZCwgMHhkZmU0OTYwNCwgMHhlMzllZDFiNSwgMHgxYjRjNmE4OCwgMHhiOGMxMmMxZiwgMHg3ZjQ2NjU1MSwgMHgwNDlkNWVlYSwgMHg1ZDAxOGMzNSwgMHg3M2ZhODc3NCwgMHgyZWZiMGI0MSwgMHg1YWIzNjcxZCwgMHg1MjkyZGJkMiwgMHgzM2U5MTA1NiwgMHgxMzZkZDY0NywgMHg4YzlhZDc2MSwgMHg3YTM3YTEwYywgMHg4ZTU5ZjgxNCwgMHg4OWViMTMzYywgMHhlZWNlYTkyNywgMHgzNWI3NjFjOSwgMHhlZGUxMWNlNSwgMHgzYzdhNDdiMSwgMHg1OTljZDJkZiwgMHgzZjU1ZjI3MywgMHg3OTE4MTRjZSwgMHhiZjczYzczNywgMHhlYTUzZjdjZCwgMHg1YjVmZmRhYSwgMHgxNGRmM2Q2ZiwgMHg4Njc4NDRkYiwgMHg4MWNhYWZmMywgMHgzZWI5NjhjNCwgMHgyYzM4MjQzNCwgMHg1ZmMyYTM0MCwgMHg3MjE2MWRjMywgMHgwY2JjZTIyNSwgMHg4YjI4M2M0OSwgMHg0MWZmMGQ5NSwgMHg3MTM5YTgwMSwgMHhkZTA4MGNiMywgMHg5Y2Q4YjRlNCwgMHg5MDY0NTZjMSwgMHg2MTdiY2I4NCwgMHg3MGQ1MzJiNiwgMHg3NDQ4NmM1YywgMHg0MmQwYjg1N107XHJcbmNvbnN0IFQ3ID0gWzB4YTc1MDUxZjQsIDB4NjU1MzdlNDEsIDB4YTRjMzFhMTcsIDB4NWU5NjNhMjcsIDB4NmJjYjNiYWIsIDB4NDVmMTFmOWQsIDB4NThhYmFjZmEsIDB4MDM5MzRiZTMsIDB4ZmE1NTIwMzAsIDB4NmRmNmFkNzYsIDB4NzY5MTg4Y2MsIDB4NGMyNWY1MDIsIDB4ZDdmYzRmZTUsIDB4Y2JkN2M1MmEsIDB4NDQ4MDI2MzUsIDB4YTM4ZmI1NjIsIDB4NWE0OWRlYjEsIDB4MWI2NzI1YmEsIDB4MGU5ODQ1ZWEsIDB4YzBlMTVkZmUsIDB4NzUwMmMzMmYsIDB4ZjAxMjgxNGMsIDB4OTdhMzhkNDYsIDB4ZjljNjZiZDMsIDB4NWZlNzAzOGYsIDB4OWM5NTE1OTIsIDB4N2FlYmJmNmQsIDB4NTlkYTk1NTIsIDB4ODMyZGQ0YmUsIDB4MjFkMzU4NzQsIDB4NjkyOTQ5ZTAsIDB4Yzg0NDhlYzksIDB4ODk2YTc1YzIsIDB4Nzk3OGY0OGUsIDB4M2U2Yjk5NTgsIDB4NzFkZDI3YjksIDB4NGZiNmJlZTEsIDB4YWQxN2YwODgsIDB4YWM2NmM5MjAsIDB4M2FiNDdkY2UsIDB4NGExODYzZGYsIDB4MzE4MmU1MWEsIDB4MzM2MDk3NTEsIDB4N2Y0NTYyNTMsIDB4NzdlMGIxNjQsIDB4YWU4NGJiNmIsIDB4YTAxY2ZlODEsIDB4MmI5NGY5MDgsIDB4Njg1ODcwNDgsIDB4ZmQxOThmNDUsIDB4NmM4Nzk0ZGUsIDB4ZjhiNzUyN2IsIDB4ZDMyM2FiNzMsIDB4MDJlMjcyNGIsIDB4OGY1N2UzMWYsIDB4YWIyYTY2NTUsIDB4MjgwN2IyZWIsIDB4YzIwMzJmYjUsIDB4N2I5YTg2YzUsIDB4MDhhNWQzMzcsIDB4ODdmMjMwMjgsIDB4YTViMjIzYmYsIDB4NmFiYTAyMDMsIDB4ODI1Y2VkMTYsIDB4MWMyYjhhY2YsIDB4YjQ5MmE3NzksIDB4ZjJmMGYzMDcsIDB4ZTJhMTRlNjksIDB4ZjRjZDY1ZGEsIDB4YmVkNTA2MDUsIDB4NjIxZmQxMzQsIDB4ZmU4YWM0YTYsIDB4NTM5ZDM0MmUsIDB4NTVhMGEyZjMsIDB4ZTEzMjA1OGEsIDB4ZWI3NWE0ZjYsIDB4ZWMzOTBiODMsIDB4ZWZhYTQwNjAsIDB4OWYwNjVlNzEsIDB4MTA1MWJkNmUsIDB4OGFmOTNlMjEsIDB4MDYzZDk2ZGQsIDB4MDVhZWRkM2UsIDB4YmQ0NjRkZTYsIDB4OGRiNTkxNTQsIDB4NWQwNTcxYzQsIDB4ZDQ2ZjA0MDYsIDB4MTVmZjYwNTAsIDB4ZmIyNDE5OTgsIDB4ZTk5N2Q2YmQsIDB4NDNjYzg5NDAsIDB4OWU3NzY3ZDksIDB4NDJiZGIwZTgsIDB4OGI4ODA3ODksIDB4NWIzOGU3MTksIDB4ZWVkYjc5YzgsIDB4MGE0N2ExN2MsIDB4MGZlOTdjNDIsIDB4MWVjOWY4ODQsIDB4MDAwMDAwMDAsIDB4ODY4MzA5ODAsIDB4ZWQ0ODMyMmIsIDB4NzBhYzFlMTEsIDB4NzI0ZTZjNWEsIDB4ZmZmYmZkMGUsIDB4Mzg1NjBmODUsIDB4ZDUxZTNkYWUsIDB4MzkyNzM2MmQsIDB4ZDk2NDBhMGYsIDB4YTYyMTY4NWMsIDB4NTRkMTliNWIsIDB4MmUzYTI0MzYsIDB4NjdiMTBjMGEsIDB4ZTcwZjkzNTcsIDB4OTZkMmI0ZWUsIDB4OTE5ZTFiOWIsIDB4YzU0ZjgwYzAsIDB4MjBhMjYxZGMsIDB4NGI2OTVhNzcsIDB4MWExNjFjMTIsIDB4YmEwYWUyOTMsIDB4MmFlNWMwYTAsIDB4ZTA0MzNjMjIsIDB4MTcxZDEyMWIsIDB4MGQwYjBlMDksIDB4YzdhZGYyOGIsIDB4YThiOTJkYjYsIDB4YTljODE0MWUsIDB4MTk4NTU3ZjEsIDB4MDc0Y2FmNzUsIDB4ZGRiYmVlOTksIDB4NjBmZGEzN2YsIDB4MjY5ZmY3MDEsIDB4ZjViYzVjNzIsIDB4M2JjNTQ0NjYsIDB4N2UzNDViZmIsIDB4Mjk3NjhiNDMsIDB4YzZkY2NiMjMsIDB4ZmM2OGI2ZWQsIDB4ZjE2M2I4ZTQsIDB4ZGNjYWQ3MzEsIDB4ODUxMDQyNjMsIDB4MjI0MDEzOTcsIDB4MTEyMDg0YzYsIDB4MjQ3ZDg1NGEsIDB4M2RmOGQyYmIsIDB4MzIxMWFlZjksIDB4YTE2ZGM3MjksIDB4MmY0YjFkOWUsIDB4MzBmM2RjYjIsIDB4NTJlYzBkODYsIDB4ZTNkMDc3YzEsIDB4MTY2YzJiYjMsIDB4Yjk5OWE5NzAsIDB4NDhmYTExOTQsIDB4NjQyMjQ3ZTksIDB4OGNjNGE4ZmMsIDB4M2YxYWEwZjAsIDB4MmNkODU2N2QsIDB4OTBlZjIyMzMsIDB4NGVjNzg3NDksIDB4ZDFjMWQ5MzgsIDB4YTJmZThjY2EsIDB4MGIzNjk4ZDQsIDB4ODFjZmE2ZjUsIDB4ZGUyOGE1N2EsIDB4OGUyNmRhYjcsIDB4YmZhNDNmYWQsIDB4OWRlNDJjM2EsIDB4OTIwZDUwNzgsIDB4Y2M5YjZhNWYsIDB4NDY2MjU0N2UsIDB4MTNjMmY2OGQsIDB4YjhlODkwZDgsIDB4Zjc1ZTJlMzksIDB4YWZmNTgyYzMsIDB4ODBiZTlmNWQsIDB4OTM3YzY5ZDAsIDB4MmRhOTZmZDUsIDB4MTJiM2NmMjUsIDB4OTkzYmM4YWMsIDB4N2RhNzEwMTgsIDB4NjM2ZWU4OWMsIDB4YmI3YmRiM2IsIDB4NzgwOWNkMjYsIDB4MThmNDZlNTksIDB4YjcwMWVjOWEsIDB4OWFhODgzNGYsIDB4NmU2NWU2OTUsIDB4ZTY3ZWFhZmYsIDB4Y2YwODIxYmMsIDB4ZThlNmVmMTUsIDB4OWJkOWJhZTcsIDB4MzZjZTRhNmYsIDB4MDlkNGVhOWYsIDB4N2NkNjI5YjAsIDB4YjJhZjMxYTQsIDB4MjMzMTJhM2YsIDB4OTQzMGM2YTUsIDB4NjZjMDM1YTIsIDB4YmMzNzc0NGUsIDB4Y2FhNmZjODIsIDB4ZDBiMGUwOTAsIDB4ZDgxNTMzYTcsIDB4OTg0YWYxMDQsIDB4ZGFmNzQxZWMsIDB4NTAwZTdmY2QsIDB4ZjYyZjE3OTEsIDB4ZDY4ZDc2NGQsIDB4YjA0ZDQzZWYsIDB4NGQ1NGNjYWEsIDB4MDRkZmU0OTYsIDB4YjVlMzllZDEsIDB4ODgxYjRjNmEsIDB4MWZiOGMxMmMsIDB4NTE3ZjQ2NjUsIDB4ZWEwNDlkNWUsIDB4MzU1ZDAxOGMsIDB4NzQ3M2ZhODcsIDB4NDEyZWZiMGIsIDB4MWQ1YWIzNjcsIDB4ZDI1MjkyZGIsIDB4NTYzM2U5MTAsIDB4NDcxMzZkZDYsIDB4NjE4YzlhZDcsIDB4MGM3YTM3YTEsIDB4MTQ4ZTU5ZjgsIDB4M2M4OWViMTMsIDB4MjdlZWNlYTksIDB4YzkzNWI3NjEsIDB4ZTVlZGUxMWMsIDB4YjEzYzdhNDcsIDB4ZGY1OTljZDIsIDB4NzMzZjU1ZjIsIDB4Y2U3OTE4MTQsIDB4MzdiZjczYzcsIDB4Y2RlYTUzZjcsIDB4YWE1YjVmZmQsIDB4NmYxNGRmM2QsIDB4ZGI4Njc4NDQsIDB4ZjM4MWNhYWYsIDB4YzQzZWI5NjgsIDB4MzQyYzM4MjQsIDB4NDA1ZmMyYTMsIDB4YzM3MjE2MWQsIDB4MjUwY2JjZTIsIDB4NDk4YjI4M2MsIDB4OTU0MWZmMGQsIDB4MDE3MTM5YTgsIDB4YjNkZTA4MGMsIDB4ZTQ5Y2Q4YjQsIDB4YzE5MDY0NTYsIDB4ODQ2MTdiY2IsIDB4YjY3MGQ1MzIsIDB4NWM3NDQ4NmMsIDB4NTc0MmQwYjhdO1xyXG5jb25zdCBUOCA9IFsweGY0YTc1MDUxLCAweDQxNjU1MzdlLCAweDE3YTRjMzFhLCAweDI3NWU5NjNhLCAweGFiNmJjYjNiLCAweDlkNDVmMTFmLCAweGZhNThhYmFjLCAweGUzMDM5MzRiLCAweDMwZmE1NTIwLCAweDc2NmRmNmFkLCAweGNjNzY5MTg4LCAweDAyNGMyNWY1LCAweGU1ZDdmYzRmLCAweDJhY2JkN2M1LCAweDM1NDQ4MDI2LCAweDYyYTM4ZmI1LCAweGIxNWE0OWRlLCAweGJhMWI2NzI1LCAweGVhMGU5ODQ1LCAweGZlYzBlMTVkLCAweDJmNzUwMmMzLCAweDRjZjAxMjgxLCAweDQ2OTdhMzhkLCAweGQzZjljNjZiLCAweDhmNWZlNzAzLCAweDkyOWM5NTE1LCAweDZkN2FlYmJmLCAweDUyNTlkYTk1LCAweGJlODMyZGQ0LCAweDc0MjFkMzU4LCAweGUwNjkyOTQ5LCAweGM5Yzg0NDhlLCAweGMyODk2YTc1LCAweDhlNzk3OGY0LCAweDU4M2U2Yjk5LCAweGI5NzFkZDI3LCAweGUxNGZiNmJlLCAweDg4YWQxN2YwLCAweDIwYWM2NmM5LCAweGNlM2FiNDdkLCAweGRmNGExODYzLCAweDFhMzE4MmU1LCAweDUxMzM2MDk3LCAweDUzN2Y0NTYyLCAweDY0NzdlMGIxLCAweDZiYWU4NGJiLCAweDgxYTAxY2ZlLCAweDA4MmI5NGY5LCAweDQ4Njg1ODcwLCAweDQ1ZmQxOThmLCAweGRlNmM4Nzk0LCAweDdiZjhiNzUyLCAweDczZDMyM2FiLCAweDRiMDJlMjcyLCAweDFmOGY1N2UzLCAweDU1YWIyYTY2LCAweGViMjgwN2IyLCAweGI1YzIwMzJmLCAweGM1N2I5YTg2LCAweDM3MDhhNWQzLCAweDI4ODdmMjMwLCAweGJmYTViMjIzLCAweDAzNmFiYTAyLCAweDE2ODI1Y2VkLCAweGNmMWMyYjhhLCAweDc5YjQ5MmE3LCAweDA3ZjJmMGYzLCAweDY5ZTJhMTRlLCAweGRhZjRjZDY1LCAweDA1YmVkNTA2LCAweDM0NjIxZmQxLCAweGE2ZmU4YWM0LCAweDJlNTM5ZDM0LCAweGYzNTVhMGEyLCAweDhhZTEzMjA1LCAweGY2ZWI3NWE0LCAweDgzZWMzOTBiLCAweDYwZWZhYTQwLCAweDcxOWYwNjVlLCAweDZlMTA1MWJkLCAweDIxOGFmOTNlLCAweGRkMDYzZDk2LCAweDNlMDVhZWRkLCAweGU2YmQ0NjRkLCAweDU0OGRiNTkxLCAweGM0NWQwNTcxLCAweDA2ZDQ2ZjA0LCAweDUwMTVmZjYwLCAweDk4ZmIyNDE5LCAweGJkZTk5N2Q2LCAweDQwNDNjYzg5LCAweGQ5OWU3NzY3LCAweGU4NDJiZGIwLCAweDg5OGI4ODA3LCAweDE5NWIzOGU3LCAweGM4ZWVkYjc5LCAweDdjMGE0N2ExLCAweDQyMGZlOTdjLCAweDg0MWVjOWY4LCAweDAwMDAwMDAwLCAweDgwODY4MzA5LCAweDJiZWQ0ODMyLCAweDExNzBhYzFlLCAweDVhNzI0ZTZjLCAweDBlZmZmYmZkLCAweDg1Mzg1NjBmLCAweGFlZDUxZTNkLCAweDJkMzkyNzM2LCAweDBmZDk2NDBhLCAweDVjYTYyMTY4LCAweDViNTRkMTliLCAweDM2MmUzYTI0LCAweDBhNjdiMTBjLCAweDU3ZTcwZjkzLCAweGVlOTZkMmI0LCAweDliOTE5ZTFiLCAweGMwYzU0ZjgwLCAweGRjMjBhMjYxLCAweDc3NGI2OTVhLCAweDEyMWExNjFjLCAweDkzYmEwYWUyLCAweGEwMmFlNWMwLCAweDIyZTA0MzNjLCAweDFiMTcxZDEyLCAweDA5MGQwYjBlLCAweDhiYzdhZGYyLCAweGI2YThiOTJkLCAweDFlYTljODE0LCAweGYxMTk4NTU3LCAweDc1MDc0Y2FmLCAweDk5ZGRiYmVlLCAweDdmNjBmZGEzLCAweDAxMjY5ZmY3LCAweDcyZjViYzVjLCAweDY2M2JjNTQ0LCAweGZiN2UzNDViLCAweDQzMjk3NjhiLCAweDIzYzZkY2NiLCAweGVkZmM2OGI2LCAweGU0ZjE2M2I4LCAweDMxZGNjYWQ3LCAweDYzODUxMDQyLCAweDk3MjI0MDEzLCAweGM2MTEyMDg0LCAweDRhMjQ3ZDg1LCAweGJiM2RmOGQyLCAweGY5MzIxMWFlLCAweDI5YTE2ZGM3LCAweDllMmY0YjFkLCAweGIyMzBmM2RjLCAweDg2NTJlYzBkLCAweGMxZTNkMDc3LCAweGIzMTY2YzJiLCAweDcwYjk5OWE5LCAweDk0NDhmYTExLCAweGU5NjQyMjQ3LCAweGZjOGNjNGE4LCAweGYwM2YxYWEwLCAweDdkMmNkODU2LCAweDMzOTBlZjIyLCAweDQ5NGVjNzg3LCAweDM4ZDFjMWQ5LCAweGNhYTJmZThjLCAweGQ0MGIzNjk4LCAweGY1ODFjZmE2LCAweDdhZGUyOGE1LCAweGI3OGUyNmRhLCAweGFkYmZhNDNmLCAweDNhOWRlNDJjLCAweDc4OTIwZDUwLCAweDVmY2M5YjZhLCAweDdlNDY2MjU0LCAweDhkMTNjMmY2LCAweGQ4YjhlODkwLCAweDM5Zjc1ZTJlLCAweGMzYWZmNTgyLCAweDVkODBiZTlmLCAweGQwOTM3YzY5LCAweGQ1MmRhOTZmLCAweDI1MTJiM2NmLCAweGFjOTkzYmM4LCAweDE4N2RhNzEwLCAweDljNjM2ZWU4LCAweDNiYmI3YmRiLCAweDI2NzgwOWNkLCAweDU5MThmNDZlLCAweDlhYjcwMWVjLCAweDRmOWFhODgzLCAweDk1NmU2NWU2LCAweGZmZTY3ZWFhLCAweGJjY2YwODIxLCAweDE1ZThlNmVmLCAweGU3OWJkOWJhLCAweDZmMzZjZTRhLCAweDlmMDlkNGVhLCAweGIwN2NkNjI5LCAweGE0YjJhZjMxLCAweDNmMjMzMTJhLCAweGE1OTQzMGM2LCAweGEyNjZjMDM1LCAweDRlYmMzNzc0LCAweDgyY2FhNmZjLCAweDkwZDBiMGUwLCAweGE3ZDgxNTMzLCAweDA0OTg0YWYxLCAweGVjZGFmNzQxLCAweGNkNTAwZTdmLCAweDkxZjYyZjE3LCAweDRkZDY4ZDc2LCAweGVmYjA0ZDQzLCAweGFhNGQ1NGNjLCAweDk2MDRkZmU0LCAweGQxYjVlMzllLCAweDZhODgxYjRjLCAweDJjMWZiOGMxLCAweDY1NTE3ZjQ2LCAweDVlZWEwNDlkLCAweDhjMzU1ZDAxLCAweDg3NzQ3M2ZhLCAweDBiNDEyZWZiLCAweDY3MWQ1YWIzLCAweGRiZDI1MjkyLCAweDEwNTYzM2U5LCAweGQ2NDcxMzZkLCAweGQ3NjE4YzlhLCAweGExMGM3YTM3LCAweGY4MTQ4ZTU5LCAweDEzM2M4OWViLCAweGE5MjdlZWNlLCAweDYxYzkzNWI3LCAweDFjZTVlZGUxLCAweDQ3YjEzYzdhLCAweGQyZGY1OTljLCAweGYyNzMzZjU1LCAweDE0Y2U3OTE4LCAweGM3MzdiZjczLCAweGY3Y2RlYTUzLCAweGZkYWE1YjVmLCAweDNkNmYxNGRmLCAweDQ0ZGI4Njc4LCAweGFmZjM4MWNhLCAweDY4YzQzZWI5LCAweDI0MzQyYzM4LCAweGEzNDA1ZmMyLCAweDFkYzM3MjE2LCAweGUyMjUwY2JjLCAweDNjNDk4YjI4LCAweDBkOTU0MWZmLCAweGE4MDE3MTM5LCAweDBjYjNkZTA4LCAweGI0ZTQ5Y2Q4LCAweDU2YzE5MDY0LCAweGNiODQ2MTdiLCAweDMyYjY3MGQ1LCAweDZjNWM3NDQ4LCAweGI4NTc0MmQwXTtcclxuLy8gVHJhbnNmb3JtYXRpb25zIGZvciBkZWNyeXB0aW9uIGtleSBleHBhbnNpb25cclxuY29uc3QgVTEgPSBbMHgwMDAwMDAwMCwgMHgwZTA5MGQwYiwgMHgxYzEyMWExNiwgMHgxMjFiMTcxZCwgMHgzODI0MzQyYywgMHgzNjJkMzkyNywgMHgyNDM2MmUzYSwgMHgyYTNmMjMzMSwgMHg3MDQ4Njg1OCwgMHg3ZTQxNjU1MywgMHg2YzVhNzI0ZSwgMHg2MjUzN2Y0NSwgMHg0ODZjNWM3NCwgMHg0NjY1NTE3ZiwgMHg1NDdlNDY2MiwgMHg1YTc3NGI2OSwgMHhlMDkwZDBiMCwgMHhlZTk5ZGRiYiwgMHhmYzgyY2FhNiwgMHhmMjhiYzdhZCwgMHhkOGI0ZTQ5YywgMHhkNmJkZTk5NywgMHhjNGE2ZmU4YSwgMHhjYWFmZjM4MSwgMHg5MGQ4YjhlOCwgMHg5ZWQxYjVlMywgMHg4Y2NhYTJmZSwgMHg4MmMzYWZmNSwgMHhhOGZjOGNjNCwgMHhhNmY1ODFjZiwgMHhiNGVlOTZkMiwgMHhiYWU3OWJkOSwgMHhkYjNiYmI3YiwgMHhkNTMyYjY3MCwgMHhjNzI5YTE2ZCwgMHhjOTIwYWM2NiwgMHhlMzFmOGY1NywgMHhlZDE2ODI1YywgMHhmZjBkOTU0MSwgMHhmMTA0OTg0YSwgMHhhYjczZDMyMywgMHhhNTdhZGUyOCwgMHhiNzYxYzkzNSwgMHhiOTY4YzQzZSwgMHg5MzU3ZTcwZiwgMHg5ZDVlZWEwNCwgMHg4ZjQ1ZmQxOSwgMHg4MTRjZjAxMiwgMHgzYmFiNmJjYiwgMHgzNWEyNjZjMCwgMHgyN2I5NzFkZCwgMHgyOWIwN2NkNiwgMHgwMzhmNWZlNywgMHgwZDg2NTJlYywgMHgxZjlkNDVmMSwgMHgxMTk0NDhmYSwgMHg0YmUzMDM5MywgMHg0NWVhMGU5OCwgMHg1N2YxMTk4NSwgMHg1OWY4MTQ4ZSwgMHg3M2M3MzdiZiwgMHg3ZGNlM2FiNCwgMHg2ZmQ1MmRhOSwgMHg2MWRjMjBhMiwgMHhhZDc2NmRmNiwgMHhhMzdmNjBmZCwgMHhiMTY0NzdlMCwgMHhiZjZkN2FlYiwgMHg5NTUyNTlkYSwgMHg5YjViNTRkMSwgMHg4OTQwNDNjYywgMHg4NzQ5NGVjNywgMHhkZDNlMDVhZSwgMHhkMzM3MDhhNSwgMHhjMTJjMWZiOCwgMHhjZjI1MTJiMywgMHhlNTFhMzE4MiwgMHhlYjEzM2M4OSwgMHhmOTA4MmI5NCwgMHhmNzAxMjY5ZiwgMHg0ZGU2YmQ0NiwgMHg0M2VmYjA0ZCwgMHg1MWY0YTc1MCwgMHg1ZmZkYWE1YiwgMHg3NWMyODk2YSwgMHg3YmNiODQ2MSwgMHg2OWQwOTM3YywgMHg2N2Q5OWU3NywgMHgzZGFlZDUxZSwgMHgzM2E3ZDgxNSwgMHgyMWJjY2YwOCwgMHgyZmI1YzIwMywgMHgwNThhZTEzMiwgMHgwYjgzZWMzOSwgMHgxOTk4ZmIyNCwgMHgxNzkxZjYyZiwgMHg3NjRkZDY4ZCwgMHg3ODQ0ZGI4NiwgMHg2YTVmY2M5YiwgMHg2NDU2YzE5MCwgMHg0ZTY5ZTJhMSwgMHg0MDYwZWZhYSwgMHg1MjdiZjhiNywgMHg1YzcyZjViYywgMHgwNjA1YmVkNSwgMHgwODBjYjNkZSwgMHgxYTE3YTRjMywgMHgxNDFlYTljOCwgMHgzZTIxOGFmOSwgMHgzMDI4ODdmMiwgMHgyMjMzOTBlZiwgMHgyYzNhOWRlNCwgMHg5NmRkMDYzZCwgMHg5OGQ0MGIzNiwgMHg4YWNmMWMyYiwgMHg4NGM2MTEyMCwgMHhhZWY5MzIxMSwgMHhhMGYwM2YxYSwgMHhiMmViMjgwNywgMHhiY2UyMjUwYywgMHhlNjk1NmU2NSwgMHhlODljNjM2ZSwgMHhmYTg3NzQ3MywgMHhmNDhlNzk3OCwgMHhkZWIxNWE0OSwgMHhkMGI4NTc0MiwgMHhjMmEzNDA1ZiwgMHhjY2FhNGQ1NCwgMHg0MWVjZGFmNywgMHg0ZmU1ZDdmYywgMHg1ZGZlYzBlMSwgMHg1M2Y3Y2RlYSwgMHg3OWM4ZWVkYiwgMHg3N2MxZTNkMCwgMHg2NWRhZjRjZCwgMHg2YmQzZjljNiwgMHgzMWE0YjJhZiwgMHgzZmFkYmZhNCwgMHgyZGI2YThiOSwgMHgyM2JmYTViMiwgMHgwOTgwODY4MywgMHgwNzg5OGI4OCwgMHgxNTkyOWM5NSwgMHgxYjliOTE5ZSwgMHhhMTdjMGE0NywgMHhhZjc1MDc0YywgMHhiZDZlMTA1MSwgMHhiMzY3MWQ1YSwgMHg5OTU4M2U2YiwgMHg5NzUxMzM2MCwgMHg4NTRhMjQ3ZCwgMHg4YjQzMjk3NiwgMHhkMTM0NjIxZiwgMHhkZjNkNmYxNCwgMHhjZDI2NzgwOSwgMHhjMzJmNzUwMiwgMHhlOTEwNTYzMywgMHhlNzE5NWIzOCwgMHhmNTAyNGMyNSwgMHhmYjBiNDEyZSwgMHg5YWQ3NjE4YywgMHg5NGRlNmM4NywgMHg4NmM1N2I5YSwgMHg4OGNjNzY5MSwgMHhhMmYzNTVhMCwgMHhhY2ZhNThhYiwgMHhiZWUxNGZiNiwgMHhiMGU4NDJiZCwgMHhlYTlmMDlkNCwgMHhlNDk2MDRkZiwgMHhmNjhkMTNjMiwgMHhmODg0MWVjOSwgMHhkMmJiM2RmOCwgMHhkY2IyMzBmMywgMHhjZWE5MjdlZSwgMHhjMGEwMmFlNSwgMHg3YTQ3YjEzYywgMHg3NDRlYmMzNywgMHg2NjU1YWIyYSwgMHg2ODVjYTYyMSwgMHg0MjYzODUxMCwgMHg0YzZhODgxYiwgMHg1ZTcxOWYwNiwgMHg1MDc4OTIwZCwgMHgwYTBmZDk2NCwgMHgwNDA2ZDQ2ZiwgMHgxNjFkYzM3MiwgMHgxODE0Y2U3OSwgMHgzMjJiZWQ0OCwgMHgzYzIyZTA0MywgMHgyZTM5Zjc1ZSwgMHgyMDMwZmE1NSwgMHhlYzlhYjcwMSwgMHhlMjkzYmEwYSwgMHhmMDg4YWQxNywgMHhmZTgxYTAxYywgMHhkNGJlODMyZCwgMHhkYWI3OGUyNiwgMHhjOGFjOTkzYiwgMHhjNmE1OTQzMCwgMHg5Y2QyZGY1OSwgMHg5MmRiZDI1MiwgMHg4MGMwYzU0ZiwgMHg4ZWM5Yzg0NCwgMHhhNGY2ZWI3NSwgMHhhYWZmZTY3ZSwgMHhiOGU0ZjE2MywgMHhiNmVkZmM2OCwgMHgwYzBhNjdiMSwgMHgwMjAzNmFiYSwgMHgxMDE4N2RhNywgMHgxZTExNzBhYywgMHgzNDJlNTM5ZCwgMHgzYTI3NWU5NiwgMHgyODNjNDk4YiwgMHgyNjM1NDQ4MCwgMHg3YzQyMGZlOSwgMHg3MjRiMDJlMiwgMHg2MDUwMTVmZiwgMHg2ZTU5MThmNCwgMHg0NDY2M2JjNSwgMHg0YTZmMzZjZSwgMHg1ODc0MjFkMywgMHg1NjdkMmNkOCwgMHgzN2ExMGM3YSwgMHgzOWE4MDE3MSwgMHgyYmIzMTY2YywgMHgyNWJhMWI2NywgMHgwZjg1Mzg1NiwgMHgwMThjMzU1ZCwgMHgxMzk3MjI0MCwgMHgxZDllMmY0YiwgMHg0N2U5NjQyMiwgMHg0OWUwNjkyOSwgMHg1YmZiN2UzNCwgMHg1NWYyNzMzZiwgMHg3ZmNkNTAwZSwgMHg3MWM0NWQwNSwgMHg2M2RmNGExOCwgMHg2ZGQ2NDcxMywgMHhkNzMxZGNjYSwgMHhkOTM4ZDFjMSwgMHhjYjIzYzZkYywgMHhjNTJhY2JkNywgMHhlZjE1ZThlNiwgMHhlMTFjZTVlZCwgMHhmMzA3ZjJmMCwgMHhmZDBlZmZmYiwgMHhhNzc5YjQ5MiwgMHhhOTcwYjk5OSwgMHhiYjZiYWU4NCwgMHhiNTYyYTM4ZiwgMHg5ZjVkODBiZSwgMHg5MTU0OGRiNSwgMHg4MzRmOWFhOCwgMHg4ZDQ2OTdhM107XHJcbmNvbnN0IFUyID0gWzB4MDAwMDAwMDAsIDB4MGIwZTA5MGQsIDB4MTYxYzEyMWEsIDB4MWQxMjFiMTcsIDB4MmMzODI0MzQsIDB4MjczNjJkMzksIDB4M2EyNDM2MmUsIDB4MzEyYTNmMjMsIDB4NTg3MDQ4NjgsIDB4NTM3ZTQxNjUsIDB4NGU2YzVhNzIsIDB4NDU2MjUzN2YsIDB4NzQ0ODZjNWMsIDB4N2Y0NjY1NTEsIDB4NjI1NDdlNDYsIDB4Njk1YTc3NGIsIDB4YjBlMDkwZDAsIDB4YmJlZTk5ZGQsIDB4YTZmYzgyY2EsIDB4YWRmMjhiYzcsIDB4OWNkOGI0ZTQsIDB4OTdkNmJkZTksIDB4OGFjNGE2ZmUsIDB4ODFjYWFmZjMsIDB4ZTg5MGQ4YjgsIDB4ZTM5ZWQxYjUsIDB4ZmU4Y2NhYTIsIDB4ZjU4MmMzYWYsIDB4YzRhOGZjOGMsIDB4Y2ZhNmY1ODEsIDB4ZDJiNGVlOTYsIDB4ZDliYWU3OWIsIDB4N2JkYjNiYmIsIDB4NzBkNTMyYjYsIDB4NmRjNzI5YTEsIDB4NjZjOTIwYWMsIDB4NTdlMzFmOGYsIDB4NWNlZDE2ODIsIDB4NDFmZjBkOTUsIDB4NGFmMTA0OTgsIDB4MjNhYjczZDMsIDB4MjhhNTdhZGUsIDB4MzViNzYxYzksIDB4M2ViOTY4YzQsIDB4MGY5MzU3ZTcsIDB4MDQ5ZDVlZWEsIDB4MTk4ZjQ1ZmQsIDB4MTI4MTRjZjAsIDB4Y2IzYmFiNmIsIDB4YzAzNWEyNjYsIDB4ZGQyN2I5NzEsIDB4ZDYyOWIwN2MsIDB4ZTcwMzhmNWYsIDB4ZWMwZDg2NTIsIDB4ZjExZjlkNDUsIDB4ZmExMTk0NDgsIDB4OTM0YmUzMDMsIDB4OTg0NWVhMGUsIDB4ODU1N2YxMTksIDB4OGU1OWY4MTQsIDB4YmY3M2M3MzcsIDB4YjQ3ZGNlM2EsIDB4YTk2ZmQ1MmQsIDB4YTI2MWRjMjAsIDB4ZjZhZDc2NmQsIDB4ZmRhMzdmNjAsIDB4ZTBiMTY0NzcsIDB4ZWJiZjZkN2EsIDB4ZGE5NTUyNTksIDB4ZDE5YjViNTQsIDB4Y2M4OTQwNDMsIDB4Yzc4NzQ5NGUsIDB4YWVkZDNlMDUsIDB4YTVkMzM3MDgsIDB4YjhjMTJjMWYsIDB4YjNjZjI1MTIsIDB4ODJlNTFhMzEsIDB4ODllYjEzM2MsIDB4OTRmOTA4MmIsIDB4OWZmNzAxMjYsIDB4NDY0ZGU2YmQsIDB4NGQ0M2VmYjAsIDB4NTA1MWY0YTcsIDB4NWI1ZmZkYWEsIDB4NmE3NWMyODksIDB4NjE3YmNiODQsIDB4N2M2OWQwOTMsIDB4Nzc2N2Q5OWUsIDB4MWUzZGFlZDUsIDB4MTUzM2E3ZDgsIDB4MDgyMWJjY2YsIDB4MDMyZmI1YzIsIDB4MzIwNThhZTEsIDB4MzkwYjgzZWMsIDB4MjQxOTk4ZmIsIDB4MmYxNzkxZjYsIDB4OGQ3NjRkZDYsIDB4ODY3ODQ0ZGIsIDB4OWI2YTVmY2MsIDB4OTA2NDU2YzEsIDB4YTE0ZTY5ZTIsIDB4YWE0MDYwZWYsIDB4Yjc1MjdiZjgsIDB4YmM1YzcyZjUsIDB4ZDUwNjA1YmUsIDB4ZGUwODBjYjMsIDB4YzMxYTE3YTQsIDB4YzgxNDFlYTksIDB4ZjkzZTIxOGEsIDB4ZjIzMDI4ODcsIDB4ZWYyMjMzOTAsIDB4ZTQyYzNhOWQsIDB4M2Q5NmRkMDYsIDB4MzY5OGQ0MGIsIDB4MmI4YWNmMWMsIDB4MjA4NGM2MTEsIDB4MTFhZWY5MzIsIDB4MWFhMGYwM2YsIDB4MDdiMmViMjgsIDB4MGNiY2UyMjUsIDB4NjVlNjk1NmUsIDB4NmVlODljNjMsIDB4NzNmYTg3NzQsIDB4NzhmNDhlNzksIDB4NDlkZWIxNWEsIDB4NDJkMGI4NTcsIDB4NWZjMmEzNDAsIDB4NTRjY2FhNGQsIDB4Zjc0MWVjZGEsIDB4ZmM0ZmU1ZDcsIDB4ZTE1ZGZlYzAsIDB4ZWE1M2Y3Y2QsIDB4ZGI3OWM4ZWUsIDB4ZDA3N2MxZTMsIDB4Y2Q2NWRhZjQsIDB4YzY2YmQzZjksIDB4YWYzMWE0YjIsIDB4YTQzZmFkYmYsIDB4YjkyZGI2YTgsIDB4YjIyM2JmYTUsIDB4ODMwOTgwODYsIDB4ODgwNzg5OGIsIDB4OTUxNTkyOWMsIDB4OWUxYjliOTEsIDB4NDdhMTdjMGEsIDB4NGNhZjc1MDcsIDB4NTFiZDZlMTAsIDB4NWFiMzY3MWQsIDB4NmI5OTU4M2UsIDB4NjA5NzUxMzMsIDB4N2Q4NTRhMjQsIDB4NzY4YjQzMjksIDB4MWZkMTM0NjIsIDB4MTRkZjNkNmYsIDB4MDljZDI2NzgsIDB4MDJjMzJmNzUsIDB4MzNlOTEwNTYsIDB4MzhlNzE5NWIsIDB4MjVmNTAyNGMsIDB4MmVmYjBiNDEsIDB4OGM5YWQ3NjEsIDB4ODc5NGRlNmMsIDB4OWE4NmM1N2IsIDB4OTE4OGNjNzYsIDB4YTBhMmYzNTUsIDB4YWJhY2ZhNTgsIDB4YjZiZWUxNGYsIDB4YmRiMGU4NDIsIDB4ZDRlYTlmMDksIDB4ZGZlNDk2MDQsIDB4YzJmNjhkMTMsIDB4YzlmODg0MWUsIDB4ZjhkMmJiM2QsIDB4ZjNkY2IyMzAsIDB4ZWVjZWE5MjcsIDB4ZTVjMGEwMmEsIDB4M2M3YTQ3YjEsIDB4Mzc3NDRlYmMsIDB4MmE2NjU1YWIsIDB4MjE2ODVjYTYsIDB4MTA0MjYzODUsIDB4MWI0YzZhODgsIDB4MDY1ZTcxOWYsIDB4MGQ1MDc4OTIsIDB4NjQwYTBmZDksIDB4NmYwNDA2ZDQsIDB4NzIxNjFkYzMsIDB4NzkxODE0Y2UsIDB4NDgzMjJiZWQsIDB4NDMzYzIyZTAsIDB4NWUyZTM5ZjcsIDB4NTUyMDMwZmEsIDB4MDFlYzlhYjcsIDB4MGFlMjkzYmEsIDB4MTdmMDg4YWQsIDB4MWNmZTgxYTAsIDB4MmRkNGJlODMsIDB4MjZkYWI3OGUsIDB4M2JjOGFjOTksIDB4MzBjNmE1OTQsIDB4NTk5Y2QyZGYsIDB4NTI5MmRiZDIsIDB4NGY4MGMwYzUsIDB4NDQ4ZWM5YzgsIDB4NzVhNGY2ZWIsIDB4N2VhYWZmZTYsIDB4NjNiOGU0ZjEsIDB4NjhiNmVkZmMsIDB4YjEwYzBhNjcsIDB4YmEwMjAzNmEsIDB4YTcxMDE4N2QsIDB4YWMxZTExNzAsIDB4OWQzNDJlNTMsIDB4OTYzYTI3NWUsIDB4OGIyODNjNDksIDB4ODAyNjM1NDQsIDB4ZTk3YzQyMGYsIDB4ZTI3MjRiMDIsIDB4ZmY2MDUwMTUsIDB4ZjQ2ZTU5MTgsIDB4YzU0NDY2M2IsIDB4Y2U0YTZmMzYsIDB4ZDM1ODc0MjEsIDB4ZDg1NjdkMmMsIDB4N2EzN2ExMGMsIDB4NzEzOWE4MDEsIDB4NmMyYmIzMTYsIDB4NjcyNWJhMWIsIDB4NTYwZjg1MzgsIDB4NWQwMThjMzUsIDB4NDAxMzk3MjIsIDB4NGIxZDllMmYsIDB4MjI0N2U5NjQsIDB4Mjk0OWUwNjksIDB4MzQ1YmZiN2UsIDB4M2Y1NWYyNzMsIDB4MGU3ZmNkNTAsIDB4MDU3MWM0NWQsIDB4MTg2M2RmNGEsIDB4MTM2ZGQ2NDcsIDB4Y2FkNzMxZGMsIDB4YzFkOTM4ZDEsIDB4ZGNjYjIzYzYsIDB4ZDdjNTJhY2IsIDB4ZTZlZjE1ZTgsIDB4ZWRlMTFjZTUsIDB4ZjBmMzA3ZjIsIDB4ZmJmZDBlZmYsIDB4OTJhNzc5YjQsIDB4OTlhOTcwYjksIDB4ODRiYjZiYWUsIDB4OGZiNTYyYTMsIDB4YmU5ZjVkODAsIDB4YjU5MTU0OGQsIDB4YTg4MzRmOWEsIDB4YTM4ZDQ2OTddO1xyXG5jb25zdCBVMyA9IFsweDAwMDAwMDAwLCAweDBkMGIwZTA5LCAweDFhMTYxYzEyLCAweDE3MWQxMjFiLCAweDM0MmMzODI0LCAweDM5MjczNjJkLCAweDJlM2EyNDM2LCAweDIzMzEyYTNmLCAweDY4NTg3MDQ4LCAweDY1NTM3ZTQxLCAweDcyNGU2YzVhLCAweDdmNDU2MjUzLCAweDVjNzQ0ODZjLCAweDUxN2Y0NjY1LCAweDQ2NjI1NDdlLCAweDRiNjk1YTc3LCAweGQwYjBlMDkwLCAweGRkYmJlZTk5LCAweGNhYTZmYzgyLCAweGM3YWRmMjhiLCAweGU0OWNkOGI0LCAweGU5OTdkNmJkLCAweGZlOGFjNGE2LCAweGYzODFjYWFmLCAweGI4ZTg5MGQ4LCAweGI1ZTM5ZWQxLCAweGEyZmU4Y2NhLCAweGFmZjU4MmMzLCAweDhjYzRhOGZjLCAweDgxY2ZhNmY1LCAweDk2ZDJiNGVlLCAweDliZDliYWU3LCAweGJiN2JkYjNiLCAweGI2NzBkNTMyLCAweGExNmRjNzI5LCAweGFjNjZjOTIwLCAweDhmNTdlMzFmLCAweDgyNWNlZDE2LCAweDk1NDFmZjBkLCAweDk4NGFmMTA0LCAweGQzMjNhYjczLCAweGRlMjhhNTdhLCAweGM5MzViNzYxLCAweGM0M2ViOTY4LCAweGU3MGY5MzU3LCAweGVhMDQ5ZDVlLCAweGZkMTk4ZjQ1LCAweGYwMTI4MTRjLCAweDZiY2IzYmFiLCAweDY2YzAzNWEyLCAweDcxZGQyN2I5LCAweDdjZDYyOWIwLCAweDVmZTcwMzhmLCAweDUyZWMwZDg2LCAweDQ1ZjExZjlkLCAweDQ4ZmExMTk0LCAweDAzOTM0YmUzLCAweDBlOTg0NWVhLCAweDE5ODU1N2YxLCAweDE0OGU1OWY4LCAweDM3YmY3M2M3LCAweDNhYjQ3ZGNlLCAweDJkYTk2ZmQ1LCAweDIwYTI2MWRjLCAweDZkZjZhZDc2LCAweDYwZmRhMzdmLCAweDc3ZTBiMTY0LCAweDdhZWJiZjZkLCAweDU5ZGE5NTUyLCAweDU0ZDE5YjViLCAweDQzY2M4OTQwLCAweDRlYzc4NzQ5LCAweDA1YWVkZDNlLCAweDA4YTVkMzM3LCAweDFmYjhjMTJjLCAweDEyYjNjZjI1LCAweDMxODJlNTFhLCAweDNjODllYjEzLCAweDJiOTRmOTA4LCAweDI2OWZmNzAxLCAweGJkNDY0ZGU2LCAweGIwNGQ0M2VmLCAweGE3NTA1MWY0LCAweGFhNWI1ZmZkLCAweDg5NmE3NWMyLCAweDg0NjE3YmNiLCAweDkzN2M2OWQwLCAweDllNzc2N2Q5LCAweGQ1MWUzZGFlLCAweGQ4MTUzM2E3LCAweGNmMDgyMWJjLCAweGMyMDMyZmI1LCAweGUxMzIwNThhLCAweGVjMzkwYjgzLCAweGZiMjQxOTk4LCAweGY2MmYxNzkxLCAweGQ2OGQ3NjRkLCAweGRiODY3ODQ0LCAweGNjOWI2YTVmLCAweGMxOTA2NDU2LCAweGUyYTE0ZTY5LCAweGVmYWE0MDYwLCAweGY4Yjc1MjdiLCAweGY1YmM1YzcyLCAweGJlZDUwNjA1LCAweGIzZGUwODBjLCAweGE0YzMxYTE3LCAweGE5YzgxNDFlLCAweDhhZjkzZTIxLCAweDg3ZjIzMDI4LCAweDkwZWYyMjMzLCAweDlkZTQyYzNhLCAweDA2M2Q5NmRkLCAweDBiMzY5OGQ0LCAweDFjMmI4YWNmLCAweDExMjA4NGM2LCAweDMyMTFhZWY5LCAweDNmMWFhMGYwLCAweDI4MDdiMmViLCAweDI1MGNiY2UyLCAweDZlNjVlNjk1LCAweDYzNmVlODljLCAweDc0NzNmYTg3LCAweDc5NzhmNDhlLCAweDVhNDlkZWIxLCAweDU3NDJkMGI4LCAweDQwNWZjMmEzLCAweDRkNTRjY2FhLCAweGRhZjc0MWVjLCAweGQ3ZmM0ZmU1LCAweGMwZTE1ZGZlLCAweGNkZWE1M2Y3LCAweGVlZGI3OWM4LCAweGUzZDA3N2MxLCAweGY0Y2Q2NWRhLCAweGY5YzY2YmQzLCAweGIyYWYzMWE0LCAweGJmYTQzZmFkLCAweGE4YjkyZGI2LCAweGE1YjIyM2JmLCAweDg2ODMwOTgwLCAweDhiODgwNzg5LCAweDljOTUxNTkyLCAweDkxOWUxYjliLCAweDBhNDdhMTdjLCAweDA3NGNhZjc1LCAweDEwNTFiZDZlLCAweDFkNWFiMzY3LCAweDNlNmI5OTU4LCAweDMzNjA5NzUxLCAweDI0N2Q4NTRhLCAweDI5NzY4YjQzLCAweDYyMWZkMTM0LCAweDZmMTRkZjNkLCAweDc4MDljZDI2LCAweDc1MDJjMzJmLCAweDU2MzNlOTEwLCAweDViMzhlNzE5LCAweDRjMjVmNTAyLCAweDQxMmVmYjBiLCAweDYxOGM5YWQ3LCAweDZjODc5NGRlLCAweDdiOWE4NmM1LCAweDc2OTE4OGNjLCAweDU1YTBhMmYzLCAweDU4YWJhY2ZhLCAweDRmYjZiZWUxLCAweDQyYmRiMGU4LCAweDA5ZDRlYTlmLCAweDA0ZGZlNDk2LCAweDEzYzJmNjhkLCAweDFlYzlmODg0LCAweDNkZjhkMmJiLCAweDMwZjNkY2IyLCAweDI3ZWVjZWE5LCAweDJhZTVjMGEwLCAweGIxM2M3YTQ3LCAweGJjMzc3NDRlLCAweGFiMmE2NjU1LCAweGE2MjE2ODVjLCAweDg1MTA0MjYzLCAweDg4MWI0YzZhLCAweDlmMDY1ZTcxLCAweDkyMGQ1MDc4LCAweGQ5NjQwYTBmLCAweGQ0NmYwNDA2LCAweGMzNzIxNjFkLCAweGNlNzkxODE0LCAweGVkNDgzMjJiLCAweGUwNDMzYzIyLCAweGY3NWUyZTM5LCAweGZhNTUyMDMwLCAweGI3MDFlYzlhLCAweGJhMGFlMjkzLCAweGFkMTdmMDg4LCAweGEwMWNmZTgxLCAweDgzMmRkNGJlLCAweDhlMjZkYWI3LCAweDk5M2JjOGFjLCAweDk0MzBjNmE1LCAweGRmNTk5Y2QyLCAweGQyNTI5MmRiLCAweGM1NGY4MGMwLCAweGM4NDQ4ZWM5LCAweGViNzVhNGY2LCAweGU2N2VhYWZmLCAweGYxNjNiOGU0LCAweGZjNjhiNmVkLCAweDY3YjEwYzBhLCAweDZhYmEwMjAzLCAweDdkYTcxMDE4LCAweDcwYWMxZTExLCAweDUzOWQzNDJlLCAweDVlOTYzYTI3LCAweDQ5OGIyODNjLCAweDQ0ODAyNjM1LCAweDBmZTk3YzQyLCAweDAyZTI3MjRiLCAweDE1ZmY2MDUwLCAweDE4ZjQ2ZTU5LCAweDNiYzU0NDY2LCAweDM2Y2U0YTZmLCAweDIxZDM1ODc0LCAweDJjZDg1NjdkLCAweDBjN2EzN2ExLCAweDAxNzEzOWE4LCAweDE2NmMyYmIzLCAweDFiNjcyNWJhLCAweDM4NTYwZjg1LCAweDM1NWQwMThjLCAweDIyNDAxMzk3LCAweDJmNGIxZDllLCAweDY0MjI0N2U5LCAweDY5Mjk0OWUwLCAweDdlMzQ1YmZiLCAweDczM2Y1NWYyLCAweDUwMGU3ZmNkLCAweDVkMDU3MWM0LCAweDRhMTg2M2RmLCAweDQ3MTM2ZGQ2LCAweGRjY2FkNzMxLCAweGQxYzFkOTM4LCAweGM2ZGNjYjIzLCAweGNiZDdjNTJhLCAweGU4ZTZlZjE1LCAweGU1ZWRlMTFjLCAweGYyZjBmMzA3LCAweGZmZmJmZDBlLCAweGI0OTJhNzc5LCAweGI5OTlhOTcwLCAweGFlODRiYjZiLCAweGEzOGZiNTYyLCAweDgwYmU5ZjVkLCAweDhkYjU5MTU0LCAweDlhYTg4MzRmLCAweDk3YTM4ZDQ2XTtcclxuY29uc3QgVTQgPSBbMHgwMDAwMDAwMCwgMHgwOTBkMGIwZSwgMHgxMjFhMTYxYywgMHgxYjE3MWQxMiwgMHgyNDM0MmMzOCwgMHgyZDM5MjczNiwgMHgzNjJlM2EyNCwgMHgzZjIzMzEyYSwgMHg0ODY4NTg3MCwgMHg0MTY1NTM3ZSwgMHg1YTcyNGU2YywgMHg1MzdmNDU2MiwgMHg2YzVjNzQ0OCwgMHg2NTUxN2Y0NiwgMHg3ZTQ2NjI1NCwgMHg3NzRiNjk1YSwgMHg5MGQwYjBlMCwgMHg5OWRkYmJlZSwgMHg4MmNhYTZmYywgMHg4YmM3YWRmMiwgMHhiNGU0OWNkOCwgMHhiZGU5OTdkNiwgMHhhNmZlOGFjNCwgMHhhZmYzODFjYSwgMHhkOGI4ZTg5MCwgMHhkMWI1ZTM5ZSwgMHhjYWEyZmU4YywgMHhjM2FmZjU4MiwgMHhmYzhjYzRhOCwgMHhmNTgxY2ZhNiwgMHhlZTk2ZDJiNCwgMHhlNzliZDliYSwgMHgzYmJiN2JkYiwgMHgzMmI2NzBkNSwgMHgyOWExNmRjNywgMHgyMGFjNjZjOSwgMHgxZjhmNTdlMywgMHgxNjgyNWNlZCwgMHgwZDk1NDFmZiwgMHgwNDk4NGFmMSwgMHg3M2QzMjNhYiwgMHg3YWRlMjhhNSwgMHg2MWM5MzViNywgMHg2OGM0M2ViOSwgMHg1N2U3MGY5MywgMHg1ZWVhMDQ5ZCwgMHg0NWZkMTk4ZiwgMHg0Y2YwMTI4MSwgMHhhYjZiY2IzYiwgMHhhMjY2YzAzNSwgMHhiOTcxZGQyNywgMHhiMDdjZDYyOSwgMHg4ZjVmZTcwMywgMHg4NjUyZWMwZCwgMHg5ZDQ1ZjExZiwgMHg5NDQ4ZmExMSwgMHhlMzAzOTM0YiwgMHhlYTBlOTg0NSwgMHhmMTE5ODU1NywgMHhmODE0OGU1OSwgMHhjNzM3YmY3MywgMHhjZTNhYjQ3ZCwgMHhkNTJkYTk2ZiwgMHhkYzIwYTI2MSwgMHg3NjZkZjZhZCwgMHg3ZjYwZmRhMywgMHg2NDc3ZTBiMSwgMHg2ZDdhZWJiZiwgMHg1MjU5ZGE5NSwgMHg1YjU0ZDE5YiwgMHg0MDQzY2M4OSwgMHg0OTRlYzc4NywgMHgzZTA1YWVkZCwgMHgzNzA4YTVkMywgMHgyYzFmYjhjMSwgMHgyNTEyYjNjZiwgMHgxYTMxODJlNSwgMHgxMzNjODllYiwgMHgwODJiOTRmOSwgMHgwMTI2OWZmNywgMHhlNmJkNDY0ZCwgMHhlZmIwNGQ0MywgMHhmNGE3NTA1MSwgMHhmZGFhNWI1ZiwgMHhjMjg5NmE3NSwgMHhjYjg0NjE3YiwgMHhkMDkzN2M2OSwgMHhkOTllNzc2NywgMHhhZWQ1MWUzZCwgMHhhN2Q4MTUzMywgMHhiY2NmMDgyMSwgMHhiNWMyMDMyZiwgMHg4YWUxMzIwNSwgMHg4M2VjMzkwYiwgMHg5OGZiMjQxOSwgMHg5MWY2MmYxNywgMHg0ZGQ2OGQ3NiwgMHg0NGRiODY3OCwgMHg1ZmNjOWI2YSwgMHg1NmMxOTA2NCwgMHg2OWUyYTE0ZSwgMHg2MGVmYWE0MCwgMHg3YmY4Yjc1MiwgMHg3MmY1YmM1YywgMHgwNWJlZDUwNiwgMHgwY2IzZGUwOCwgMHgxN2E0YzMxYSwgMHgxZWE5YzgxNCwgMHgyMThhZjkzZSwgMHgyODg3ZjIzMCwgMHgzMzkwZWYyMiwgMHgzYTlkZTQyYywgMHhkZDA2M2Q5NiwgMHhkNDBiMzY5OCwgMHhjZjFjMmI4YSwgMHhjNjExMjA4NCwgMHhmOTMyMTFhZSwgMHhmMDNmMWFhMCwgMHhlYjI4MDdiMiwgMHhlMjI1MGNiYywgMHg5NTZlNjVlNiwgMHg5YzYzNmVlOCwgMHg4Nzc0NzNmYSwgMHg4ZTc5NzhmNCwgMHhiMTVhNDlkZSwgMHhiODU3NDJkMCwgMHhhMzQwNWZjMiwgMHhhYTRkNTRjYywgMHhlY2RhZjc0MSwgMHhlNWQ3ZmM0ZiwgMHhmZWMwZTE1ZCwgMHhmN2NkZWE1MywgMHhjOGVlZGI3OSwgMHhjMWUzZDA3NywgMHhkYWY0Y2Q2NSwgMHhkM2Y5YzY2YiwgMHhhNGIyYWYzMSwgMHhhZGJmYTQzZiwgMHhiNmE4YjkyZCwgMHhiZmE1YjIyMywgMHg4MDg2ODMwOSwgMHg4OThiODgwNywgMHg5MjljOTUxNSwgMHg5YjkxOWUxYiwgMHg3YzBhNDdhMSwgMHg3NTA3NGNhZiwgMHg2ZTEwNTFiZCwgMHg2NzFkNWFiMywgMHg1ODNlNmI5OSwgMHg1MTMzNjA5NywgMHg0YTI0N2Q4NSwgMHg0MzI5NzY4YiwgMHgzNDYyMWZkMSwgMHgzZDZmMTRkZiwgMHgyNjc4MDljZCwgMHgyZjc1MDJjMywgMHgxMDU2MzNlOSwgMHgxOTViMzhlNywgMHgwMjRjMjVmNSwgMHgwYjQxMmVmYiwgMHhkNzYxOGM5YSwgMHhkZTZjODc5NCwgMHhjNTdiOWE4NiwgMHhjYzc2OTE4OCwgMHhmMzU1YTBhMiwgMHhmYTU4YWJhYywgMHhlMTRmYjZiZSwgMHhlODQyYmRiMCwgMHg5ZjA5ZDRlYSwgMHg5NjA0ZGZlNCwgMHg4ZDEzYzJmNiwgMHg4NDFlYzlmOCwgMHhiYjNkZjhkMiwgMHhiMjMwZjNkYywgMHhhOTI3ZWVjZSwgMHhhMDJhZTVjMCwgMHg0N2IxM2M3YSwgMHg0ZWJjMzc3NCwgMHg1NWFiMmE2NiwgMHg1Y2E2MjE2OCwgMHg2Mzg1MTA0MiwgMHg2YTg4MWI0YywgMHg3MTlmMDY1ZSwgMHg3ODkyMGQ1MCwgMHgwZmQ5NjQwYSwgMHgwNmQ0NmYwNCwgMHgxZGMzNzIxNiwgMHgxNGNlNzkxOCwgMHgyYmVkNDgzMiwgMHgyMmUwNDMzYywgMHgzOWY3NWUyZSwgMHgzMGZhNTUyMCwgMHg5YWI3MDFlYywgMHg5M2JhMGFlMiwgMHg4OGFkMTdmMCwgMHg4MWEwMWNmZSwgMHhiZTgzMmRkNCwgMHhiNzhlMjZkYSwgMHhhYzk5M2JjOCwgMHhhNTk0MzBjNiwgMHhkMmRmNTk5YywgMHhkYmQyNTI5MiwgMHhjMGM1NGY4MCwgMHhjOWM4NDQ4ZSwgMHhmNmViNzVhNCwgMHhmZmU2N2VhYSwgMHhlNGYxNjNiOCwgMHhlZGZjNjhiNiwgMHgwYTY3YjEwYywgMHgwMzZhYmEwMiwgMHgxODdkYTcxMCwgMHgxMTcwYWMxZSwgMHgyZTUzOWQzNCwgMHgyNzVlOTYzYSwgMHgzYzQ5OGIyOCwgMHgzNTQ0ODAyNiwgMHg0MjBmZTk3YywgMHg0YjAyZTI3MiwgMHg1MDE1ZmY2MCwgMHg1OTE4ZjQ2ZSwgMHg2NjNiYzU0NCwgMHg2ZjM2Y2U0YSwgMHg3NDIxZDM1OCwgMHg3ZDJjZDg1NiwgMHhhMTBjN2EzNywgMHhhODAxNzEzOSwgMHhiMzE2NmMyYiwgMHhiYTFiNjcyNSwgMHg4NTM4NTYwZiwgMHg4YzM1NWQwMSwgMHg5NzIyNDAxMywgMHg5ZTJmNGIxZCwgMHhlOTY0MjI0NywgMHhlMDY5Mjk0OSwgMHhmYjdlMzQ1YiwgMHhmMjczM2Y1NSwgMHhjZDUwMGU3ZiwgMHhjNDVkMDU3MSwgMHhkZjRhMTg2MywgMHhkNjQ3MTM2ZCwgMHgzMWRjY2FkNywgMHgzOGQxYzFkOSwgMHgyM2M2ZGNjYiwgMHgyYWNiZDdjNSwgMHgxNWU4ZTZlZiwgMHgxY2U1ZWRlMSwgMHgwN2YyZjBmMywgMHgwZWZmZmJmZCwgMHg3OWI0OTJhNywgMHg3MGI5OTlhOSwgMHg2YmFlODRiYiwgMHg2MmEzOGZiNSwgMHg1ZDgwYmU5ZiwgMHg1NDhkYjU5MSwgMHg0ZjlhYTg4MywgMHg0Njk3YTM4ZF07XHJcbmZ1bmN0aW9uIGNvbnZlcnRUb0ludDMyKGJ5dGVzKSB7XHJcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDQpIHtcclxuICAgICAgICByZXN1bHQucHVzaCgoYnl0ZXNbaV0gPDwgMjQpIHwgKGJ5dGVzW2kgKyAxXSA8PCAxNikgfCAoYnl0ZXNbaSArIDJdIDw8IDgpIHwgYnl0ZXNbaSArIDNdKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuZXhwb3J0IGNsYXNzIEFFUyB7XHJcbiAgICBnZXQga2V5KCkgeyByZXR1cm4gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQUVTX2tleSwgXCJmXCIpLnNsaWNlKCk7IH1cclxuICAgIGNvbnN0cnVjdG9yKGtleSkge1xyXG4gICAgICAgIF9BRVNfa2V5LnNldCh0aGlzLCB2b2lkIDApO1xyXG4gICAgICAgIF9BRVNfS2Quc2V0KHRoaXMsIHZvaWQgMCk7XHJcbiAgICAgICAgX0FFU19LZS5zZXQodGhpcywgdm9pZCAwKTtcclxuICAgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgQUVTKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcignQUVTIG11c3QgYmUgaW5zdGFuaXRhdGVkIHdpdGggYG5ld2AnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfQUVTX2tleSwgbmV3IFVpbnQ4QXJyYXkoa2V5KSwgXCJmXCIpO1xyXG4gICAgICAgIGNvbnN0IHJvdW5kcyA9IG51bWJlck9mUm91bmRzW3RoaXMua2V5Lmxlbmd0aF07XHJcbiAgICAgICAgaWYgKHJvdW5kcyA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQga2V5IHNpemUgKG11c3QgYmUgMTYsIDI0IG9yIDMyIGJ5dGVzKScpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBlbmNyeXB0aW9uIHJvdW5kIGtleXNcclxuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9BRVNfS2UsIFtdLCBcImZcIik7XHJcbiAgICAgICAgLy8gZGVjcnlwdGlvbiByb3VuZCBrZXlzXHJcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfQUVTX0tkLCBbXSwgXCJmXCIpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDw9IHJvdW5kczsgaSsrKSB7XHJcbiAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0FFU19LZSwgXCJmXCIpLnB1c2goWzAsIDAsIDAsIDBdKTtcclxuICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQUVTX0tkLCBcImZcIikucHVzaChbMCwgMCwgMCwgMF0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCByb3VuZEtleUNvdW50ID0gKHJvdW5kcyArIDEpICogNDtcclxuICAgICAgICBjb25zdCBLQyA9IHRoaXMua2V5Lmxlbmd0aCAvIDQ7XHJcbiAgICAgICAgLy8gY29udmVydCB0aGUga2V5IGludG8gaW50c1xyXG4gICAgICAgIGNvbnN0IHRrID0gY29udmVydFRvSW50MzIodGhpcy5rZXkpO1xyXG4gICAgICAgIC8vIGNvcHkgdmFsdWVzIGludG8gcm91bmQga2V5IGFycmF5c1xyXG4gICAgICAgIGxldCBpbmRleDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IEtDOyBpKyspIHtcclxuICAgICAgICAgICAgaW5kZXggPSBpID4+IDI7XHJcbiAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0FFU19LZSwgXCJmXCIpW2luZGV4XVtpICUgNF0gPSB0a1tpXTtcclxuICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQUVTX0tkLCBcImZcIilbcm91bmRzIC0gaW5kZXhdW2kgJSA0XSA9IHRrW2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBrZXkgZXhwYW5zaW9uIChmaXBzLTE5NyBzZWN0aW9uIDUuMilcclxuICAgICAgICBsZXQgcmNvbnBvaW50ZXIgPSAwO1xyXG4gICAgICAgIGxldCB0ID0gS0MsIHR0O1xyXG4gICAgICAgIHdoaWxlICh0IDwgcm91bmRLZXlDb3VudCkge1xyXG4gICAgICAgICAgICB0dCA9IHRrW0tDIC0gMV07XHJcbiAgICAgICAgICAgIHRrWzBdIF49ICgoU1sodHQgPj4gMTYpICYgMHhGRl0gPDwgMjQpIF5cclxuICAgICAgICAgICAgICAgIChTWyh0dCA+PiA4KSAmIDB4RkZdIDw8IDE2KSBeXHJcbiAgICAgICAgICAgICAgICAoU1t0dCAmIDB4RkZdIDw8IDgpIF5cclxuICAgICAgICAgICAgICAgIFNbKHR0ID4+IDI0KSAmIDB4RkZdIF5cclxuICAgICAgICAgICAgICAgIChyY29uW3Jjb25wb2ludGVyXSA8PCAyNCkpO1xyXG4gICAgICAgICAgICByY29ucG9pbnRlciArPSAxO1xyXG4gICAgICAgICAgICAvLyBrZXkgZXhwYW5zaW9uIChmb3Igbm9uLTI1NiBiaXQpXHJcbiAgICAgICAgICAgIGlmIChLQyAhPSA4KSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IEtDOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB0a1tpXSBePSB0a1tpIC0gMV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBrZXkgZXhwYW5zaW9uIGZvciAyNTYtYml0IGtleXMgaXMgXCJzbGlnaHRseSBkaWZmZXJlbnRcIiAoZmlwcy0xOTcpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IChLQyAvIDIpOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB0a1tpXSBePSB0a1tpIC0gMV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0dCA9IHRrWyhLQyAvIDIpIC0gMV07XHJcbiAgICAgICAgICAgICAgICB0a1tLQyAvIDJdIF49IChTW3R0ICYgMHhGRl0gXlxyXG4gICAgICAgICAgICAgICAgICAgIChTWyh0dCA+PiA4KSAmIDB4RkZdIDw8IDgpIF5cclxuICAgICAgICAgICAgICAgICAgICAoU1sodHQgPj4gMTYpICYgMHhGRl0gPDwgMTYpIF5cclxuICAgICAgICAgICAgICAgICAgICAoU1sodHQgPj4gMjQpICYgMHhGRl0gPDwgMjQpKTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAoS0MgLyAyKSArIDE7IGkgPCBLQzsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGtbaV0gXj0gdGtbaSAtIDFdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGNvcHkgdmFsdWVzIGludG8gcm91bmQga2V5IGFycmF5c1xyXG4gICAgICAgICAgICBsZXQgaSA9IDAsIHIsIGM7XHJcbiAgICAgICAgICAgIHdoaWxlIChpIDwgS0MgJiYgdCA8IHJvdW5kS2V5Q291bnQpIHtcclxuICAgICAgICAgICAgICAgIHIgPSB0ID4+IDI7XHJcbiAgICAgICAgICAgICAgICBjID0gdCAlIDQ7XHJcbiAgICAgICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9BRVNfS2UsIFwiZlwiKVtyXVtjXSA9IHRrW2ldO1xyXG4gICAgICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQUVTX0tkLCBcImZcIilbcm91bmRzIC0gcl1bY10gPSB0a1tpKytdO1xyXG4gICAgICAgICAgICAgICAgdCsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGludmVyc2UtY2lwaGVyLWlmeSB0aGUgZGVjcnlwdGlvbiByb3VuZCBrZXkgKGZpcHMtMTk3IHNlY3Rpb24gNS4zKVxyXG4gICAgICAgIGZvciAobGV0IHIgPSAxOyByIDwgcm91bmRzOyByKyspIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCA0OyBjKyspIHtcclxuICAgICAgICAgICAgICAgIHR0ID0gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQUVTX0tkLCBcImZcIilbcl1bY107XHJcbiAgICAgICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9BRVNfS2QsIFwiZlwiKVtyXVtjXSA9IChVMVsodHQgPj4gMjQpICYgMHhGRl0gXlxyXG4gICAgICAgICAgICAgICAgICAgIFUyWyh0dCA+PiAxNikgJiAweEZGXSBeXHJcbiAgICAgICAgICAgICAgICAgICAgVTNbKHR0ID4+IDgpICYgMHhGRl0gXlxyXG4gICAgICAgICAgICAgICAgICAgIFU0W3R0ICYgMHhGRl0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZW5jcnlwdChwbGFpbnRleHQpIHtcclxuICAgICAgICBpZiAocGxhaW50ZXh0Lmxlbmd0aCAhPSAxNikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHBsYWludGV4dCBzaXplIChtdXN0IGJlIDE2IGJ5dGVzKScpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCByb3VuZHMgPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9BRVNfS2UsIFwiZlwiKS5sZW5ndGggLSAxO1xyXG4gICAgICAgIGNvbnN0IGEgPSBbMCwgMCwgMCwgMF07XHJcbiAgICAgICAgLy8gY29udmVydCBwbGFpbnRleHQgdG8gKGludHMgXiBrZXkpXHJcbiAgICAgICAgbGV0IHQgPSBjb252ZXJ0VG9JbnQzMihwbGFpbnRleHQpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRbaV0gXj0gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQUVTX0tlLCBcImZcIilbMF1baV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGFwcGx5IHJvdW5kIHRyYW5zZm9ybXNcclxuICAgICAgICBmb3IgKGxldCByID0gMTsgciA8IHJvdW5kczsgcisrKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBhW2ldID0gKFQxWyh0W2ldID4+IDI0KSAmIDB4ZmZdIF5cclxuICAgICAgICAgICAgICAgICAgICBUMlsodFsoaSArIDEpICUgNF0gPj4gMTYpICYgMHhmZl0gXlxyXG4gICAgICAgICAgICAgICAgICAgIFQzWyh0WyhpICsgMikgJSA0XSA+PiA4KSAmIDB4ZmZdIF5cclxuICAgICAgICAgICAgICAgICAgICBUNFt0WyhpICsgMykgJSA0XSAmIDB4ZmZdIF5cclxuICAgICAgICAgICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9BRVNfS2UsIFwiZlwiKVtyXVtpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdCA9IGEuc2xpY2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gdGhlIGxhc3Qgcm91bmQgaXMgc3BlY2lhbFxyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KDE2KTtcclxuICAgICAgICBsZXQgdHQgPSAwO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHR0ID0gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQUVTX0tlLCBcImZcIilbcm91bmRzXVtpXTtcclxuICAgICAgICAgICAgcmVzdWx0WzQgKiBpXSA9IChTWyh0W2ldID4+IDI0KSAmIDB4ZmZdIF4gKHR0ID4+IDI0KSkgJiAweGZmO1xyXG4gICAgICAgICAgICByZXN1bHRbNCAqIGkgKyAxXSA9IChTWyh0WyhpICsgMSkgJSA0XSA+PiAxNikgJiAweGZmXSBeICh0dCA+PiAxNikpICYgMHhmZjtcclxuICAgICAgICAgICAgcmVzdWx0WzQgKiBpICsgMl0gPSAoU1sodFsoaSArIDIpICUgNF0gPj4gOCkgJiAweGZmXSBeICh0dCA+PiA4KSkgJiAweGZmO1xyXG4gICAgICAgICAgICByZXN1bHRbNCAqIGkgKyAzXSA9IChTW3RbKGkgKyAzKSAlIDRdICYgMHhmZl0gXiB0dCkgJiAweGZmO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG4gICAgZGVjcnlwdChjaXBoZXJ0ZXh0KSB7XHJcbiAgICAgICAgaWYgKGNpcGhlcnRleHQubGVuZ3RoICE9IDE2KSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgY2lwaGVydGV4dCBzaXplIChtdXN0IGJlIDE2IGJ5dGVzKScpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCByb3VuZHMgPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9BRVNfS2QsIFwiZlwiKS5sZW5ndGggLSAxO1xyXG4gICAgICAgIGNvbnN0IGEgPSBbMCwgMCwgMCwgMF07XHJcbiAgICAgICAgLy8gY29udmVydCBwbGFpbnRleHQgdG8gKGludHMgXiBrZXkpXHJcbiAgICAgICAgbGV0IHQgPSBjb252ZXJ0VG9JbnQzMihjaXBoZXJ0ZXh0KTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xyXG4gICAgICAgICAgICB0W2ldIF49IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0FFU19LZCwgXCJmXCIpWzBdW2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBhcHBseSByb3VuZCB0cmFuc2Zvcm1zXHJcbiAgICAgICAgZm9yIChsZXQgciA9IDE7IHIgPCByb3VuZHM7IHIrKykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgYVtpXSA9IChUNVsodFtpXSA+PiAyNCkgJiAweGZmXSBeXHJcbiAgICAgICAgICAgICAgICAgICAgVDZbKHRbKGkgKyAzKSAlIDRdID4+IDE2KSAmIDB4ZmZdIF5cclxuICAgICAgICAgICAgICAgICAgICBUN1sodFsoaSArIDIpICUgNF0gPj4gOCkgJiAweGZmXSBeXHJcbiAgICAgICAgICAgICAgICAgICAgVDhbdFsoaSArIDEpICUgNF0gJiAweGZmXSBeXHJcbiAgICAgICAgICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQUVTX0tkLCBcImZcIilbcl1baV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHQgPSBhLnNsaWNlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHRoZSBsYXN0IHJvdW5kIGlzIHNwZWNpYWxcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgVWludDhBcnJheSgxNik7XHJcbiAgICAgICAgbGV0IHR0ID0gMDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xyXG4gICAgICAgICAgICB0dCA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0FFU19LZCwgXCJmXCIpW3JvdW5kc11baV07XHJcbiAgICAgICAgICAgIHJlc3VsdFs0ICogaV0gPSAoU2lbKHRbaV0gPj4gMjQpICYgMHhmZl0gXiAodHQgPj4gMjQpKSAmIDB4ZmY7XHJcbiAgICAgICAgICAgIHJlc3VsdFs0ICogaSArIDFdID0gKFNpWyh0WyhpICsgMykgJSA0XSA+PiAxNikgJiAweGZmXSBeICh0dCA+PiAxNikpICYgMHhmZjtcclxuICAgICAgICAgICAgcmVzdWx0WzQgKiBpICsgMl0gPSAoU2lbKHRbKGkgKyAyKSAlIDRdID4+IDgpICYgMHhmZl0gXiAodHQgPj4gOCkpICYgMHhmZjtcclxuICAgICAgICAgICAgcmVzdWx0WzQgKiBpICsgM10gPSAoU2lbdFsoaSArIDEpICUgNF0gJiAweGZmXSBeIHR0KSAmIDB4ZmY7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbn1cclxuX0FFU19rZXkgPSBuZXcgV2Vha01hcCgpLCBfQUVTX0tkID0gbmV3IFdlYWtNYXAoKSwgX0FFU19LZSA9IG5ldyBXZWFrTWFwKCk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/aes-js/lib.esm/aes.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/aes-js/lib.esm/index.js":
/*!**********************************************!*\
  !*** ./node_modules/aes-js/lib.esm/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AES: () => (/* reexport safe */ _aes_js__WEBPACK_IMPORTED_MODULE_0__.AES),\n/* harmony export */   CBC: () => (/* reexport safe */ _mode_cbc_js__WEBPACK_IMPORTED_MODULE_2__.CBC),\n/* harmony export */   CFB: () => (/* reexport safe */ _mode_cfb_js__WEBPACK_IMPORTED_MODULE_3__.CFB),\n/* harmony export */   CTR: () => (/* reexport safe */ _mode_ctr_js__WEBPACK_IMPORTED_MODULE_4__.CTR),\n/* harmony export */   ECB: () => (/* reexport safe */ _mode_ecb_js__WEBPACK_IMPORTED_MODULE_5__.ECB),\n/* harmony export */   ModeOfOperation: () => (/* reexport safe */ _mode_js__WEBPACK_IMPORTED_MODULE_1__.ModeOfOperation),\n/* harmony export */   OFB: () => (/* reexport safe */ _mode_ofb_js__WEBPACK_IMPORTED_MODULE_6__.OFB),\n/* harmony export */   pkcs7Pad: () => (/* reexport safe */ _padding_js__WEBPACK_IMPORTED_MODULE_7__.pkcs7Pad),\n/* harmony export */   pkcs7Strip: () => (/* reexport safe */ _padding_js__WEBPACK_IMPORTED_MODULE_7__.pkcs7Strip)\n/* harmony export */ });\n/* harmony import */ var _aes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./aes.js */ \"(pages-dir-browser)/./node_modules/aes-js/lib.esm/aes.js\");\n/* harmony import */ var _mode_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mode.js */ \"(pages-dir-browser)/./node_modules/aes-js/lib.esm/mode.js\");\n/* harmony import */ var _mode_cbc_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mode-cbc.js */ \"(pages-dir-browser)/./node_modules/aes-js/lib.esm/mode-cbc.js\");\n/* harmony import */ var _mode_cfb_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./mode-cfb.js */ \"(pages-dir-browser)/./node_modules/aes-js/lib.esm/mode-cfb.js\");\n/* harmony import */ var _mode_ctr_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./mode-ctr.js */ \"(pages-dir-browser)/./node_modules/aes-js/lib.esm/mode-ctr.js\");\n/* harmony import */ var _mode_ecb_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./mode-ecb.js */ \"(pages-dir-browser)/./node_modules/aes-js/lib.esm/mode-ecb.js\");\n/* harmony import */ var _mode_ofb_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./mode-ofb.js */ \"(pages-dir-browser)/./node_modules/aes-js/lib.esm/mode-ofb.js\");\n/* harmony import */ var _padding_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./padding.js */ \"(pages-dir-browser)/./node_modules/aes-js/lib.esm/padding.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9hZXMtanMvbGliLmVzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUErQjtBQUNhO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNnQjtBQUNwRCIsInNvdXJjZXMiOlsiRDpcXERvX2FuMlxcbGVuZGh1Yl92MlxcbGVuZGh1Yi1mcm9udGVuZC1uZXh0anNcXG5vZGVfbW9kdWxlc1xcYWVzLWpzXFxsaWIuZXNtXFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBBRVMgfSBmcm9tIFwiLi9hZXMuanNcIjtcclxuZXhwb3J0IHsgTW9kZU9mT3BlcmF0aW9uIH0gZnJvbSBcIi4vbW9kZS5qc1wiO1xyXG5leHBvcnQgeyBDQkMgfSBmcm9tIFwiLi9tb2RlLWNiYy5qc1wiO1xyXG5leHBvcnQgeyBDRkIgfSBmcm9tIFwiLi9tb2RlLWNmYi5qc1wiO1xyXG5leHBvcnQgeyBDVFIgfSBmcm9tIFwiLi9tb2RlLWN0ci5qc1wiO1xyXG5leHBvcnQgeyBFQ0IgfSBmcm9tIFwiLi9tb2RlLWVjYi5qc1wiO1xyXG5leHBvcnQgeyBPRkIgfSBmcm9tIFwiLi9tb2RlLW9mYi5qc1wiO1xyXG5leHBvcnQgeyBwa2NzN1BhZCwgcGtjczdTdHJpcCB9IGZyb20gXCIuL3BhZGRpbmcuanNcIjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/aes-js/lib.esm/index.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/aes-js/lib.esm/mode-cbc.js":
/*!*************************************************!*\
  !*** ./node_modules/aes-js/lib.esm/mode-cbc.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CBC: () => (/* binding */ CBC)\n/* harmony export */ });\n/* harmony import */ var _mode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mode.js */ \"(pages-dir-browser)/./node_modules/aes-js/lib.esm/mode.js\");\n// Cipher Block Chaining\r\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n};\r\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n};\r\nvar _CBC_iv, _CBC_lastBlock;\r\n\r\nclass CBC extends _mode_js__WEBPACK_IMPORTED_MODULE_0__.ModeOfOperation {\r\n    constructor(key, iv) {\r\n        super(\"ECC\", key, CBC);\r\n        _CBC_iv.set(this, void 0);\r\n        _CBC_lastBlock.set(this, void 0);\r\n        if (iv) {\r\n            if (iv.length % 16) {\r\n                throw new TypeError(\"invalid iv size (must be 16 bytes)\");\r\n            }\r\n            __classPrivateFieldSet(this, _CBC_iv, new Uint8Array(iv), \"f\");\r\n        }\r\n        else {\r\n            __classPrivateFieldSet(this, _CBC_iv, new Uint8Array(16), \"f\");\r\n        }\r\n        __classPrivateFieldSet(this, _CBC_lastBlock, this.iv, \"f\");\r\n    }\r\n    get iv() { return new Uint8Array(__classPrivateFieldGet(this, _CBC_iv, \"f\")); }\r\n    encrypt(plaintext) {\r\n        if (plaintext.length % 16) {\r\n            throw new TypeError(\"invalid plaintext size (must be multiple of 16 bytes)\");\r\n        }\r\n        const ciphertext = new Uint8Array(plaintext.length);\r\n        for (let i = 0; i < plaintext.length; i += 16) {\r\n            for (let j = 0; j < 16; j++) {\r\n                __classPrivateFieldGet(this, _CBC_lastBlock, \"f\")[j] ^= plaintext[i + j];\r\n            }\r\n            __classPrivateFieldSet(this, _CBC_lastBlock, this.aes.encrypt(__classPrivateFieldGet(this, _CBC_lastBlock, \"f\")), \"f\");\r\n            ciphertext.set(__classPrivateFieldGet(this, _CBC_lastBlock, \"f\"), i);\r\n        }\r\n        return ciphertext;\r\n    }\r\n    decrypt(ciphertext) {\r\n        if (ciphertext.length % 16) {\r\n            throw new TypeError(\"invalid ciphertext size (must be multiple of 16 bytes)\");\r\n        }\r\n        const plaintext = new Uint8Array(ciphertext.length);\r\n        for (let i = 0; i < ciphertext.length; i += 16) {\r\n            const block = this.aes.decrypt(ciphertext.subarray(i, i + 16));\r\n            for (let j = 0; j < 16; j++) {\r\n                plaintext[i + j] = block[j] ^ __classPrivateFieldGet(this, _CBC_lastBlock, \"f\")[j];\r\n                __classPrivateFieldGet(this, _CBC_lastBlock, \"f\")[j] = ciphertext[i + j];\r\n            }\r\n        }\r\n        return plaintext;\r\n    }\r\n}\r\n_CBC_iv = new WeakMap(), _CBC_lastBlock = new WeakMap();\r\n//# sourceMappingURL=mode-cbc.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9hZXMtanMvbGliLmVzbS9tb2RlLWNiYy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0EsOEJBQThCLFNBQUksSUFBSSxTQUFJO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsU0FBSSxJQUFJLFNBQUk7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUM0QztBQUNyQyxrQkFBa0IscURBQWU7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isc0JBQXNCO0FBQzlDLDRCQUE0QixRQUFRO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix1QkFBdUI7QUFDL0M7QUFDQSw0QkFBNEIsUUFBUTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkQ6XFxEb19hbjJcXGxlbmRodWJfdjJcXGxlbmRodWItZnJvbnRlbmQtbmV4dGpzXFxub2RlX21vZHVsZXNcXGFlcy1qc1xcbGliLmVzbVxcbW9kZS1jYmMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ2lwaGVyIEJsb2NrIENoYWluaW5nXHJcbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xyXG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xyXG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcclxuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xyXG59O1xyXG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZEdldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZEdldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xyXG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XHJcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xyXG59O1xyXG52YXIgX0NCQ19pdiwgX0NCQ19sYXN0QmxvY2s7XHJcbmltcG9ydCB7IE1vZGVPZk9wZXJhdGlvbiB9IGZyb20gXCIuL21vZGUuanNcIjtcclxuZXhwb3J0IGNsYXNzIENCQyBleHRlbmRzIE1vZGVPZk9wZXJhdGlvbiB7XHJcbiAgICBjb25zdHJ1Y3RvcihrZXksIGl2KSB7XHJcbiAgICAgICAgc3VwZXIoXCJFQ0NcIiwga2V5LCBDQkMpO1xyXG4gICAgICAgIF9DQkNfaXYuc2V0KHRoaXMsIHZvaWQgMCk7XHJcbiAgICAgICAgX0NCQ19sYXN0QmxvY2suc2V0KHRoaXMsIHZvaWQgMCk7XHJcbiAgICAgICAgaWYgKGl2KSB7XHJcbiAgICAgICAgICAgIGlmIChpdi5sZW5ndGggJSAxNikge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImludmFsaWQgaXYgc2l6ZSAobXVzdCBiZSAxNiBieXRlcylcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfQ0JDX2l2LCBuZXcgVWludDhBcnJheShpdiksIFwiZlwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX0NCQ19pdiwgbmV3IFVpbnQ4QXJyYXkoMTYpLCBcImZcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX0NCQ19sYXN0QmxvY2ssIHRoaXMuaXYsIFwiZlwiKTtcclxuICAgIH1cclxuICAgIGdldCBpdigpIHsgcmV0dXJuIG5ldyBVaW50OEFycmF5KF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0NCQ19pdiwgXCJmXCIpKTsgfVxyXG4gICAgZW5jcnlwdChwbGFpbnRleHQpIHtcclxuICAgICAgICBpZiAocGxhaW50ZXh0Lmxlbmd0aCAlIDE2KSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJpbnZhbGlkIHBsYWludGV4dCBzaXplIChtdXN0IGJlIG11bHRpcGxlIG9mIDE2IGJ5dGVzKVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgY2lwaGVydGV4dCA9IG5ldyBVaW50OEFycmF5KHBsYWludGV4dC5sZW5ndGgpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGxhaW50ZXh0Lmxlbmd0aDsgaSArPSAxNikge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDE2OyBqKyspIHtcclxuICAgICAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0NCQ19sYXN0QmxvY2ssIFwiZlwiKVtqXSBePSBwbGFpbnRleHRbaSArIGpdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX0NCQ19sYXN0QmxvY2ssIHRoaXMuYWVzLmVuY3J5cHQoX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQ0JDX2xhc3RCbG9jaywgXCJmXCIpKSwgXCJmXCIpO1xyXG4gICAgICAgICAgICBjaXBoZXJ0ZXh0LnNldChfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9DQkNfbGFzdEJsb2NrLCBcImZcIiksIGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY2lwaGVydGV4dDtcclxuICAgIH1cclxuICAgIGRlY3J5cHQoY2lwaGVydGV4dCkge1xyXG4gICAgICAgIGlmIChjaXBoZXJ0ZXh0Lmxlbmd0aCAlIDE2KSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJpbnZhbGlkIGNpcGhlcnRleHQgc2l6ZSAobXVzdCBiZSBtdWx0aXBsZSBvZiAxNiBieXRlcylcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHBsYWludGV4dCA9IG5ldyBVaW50OEFycmF5KGNpcGhlcnRleHQubGVuZ3RoKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNpcGhlcnRleHQubGVuZ3RoOyBpICs9IDE2KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJsb2NrID0gdGhpcy5hZXMuZGVjcnlwdChjaXBoZXJ0ZXh0LnN1YmFycmF5KGksIGkgKyAxNikpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDE2OyBqKyspIHtcclxuICAgICAgICAgICAgICAgIHBsYWludGV4dFtpICsgal0gPSBibG9ja1tqXSBeIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0NCQ19sYXN0QmxvY2ssIFwiZlwiKVtqXTtcclxuICAgICAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0NCQ19sYXN0QmxvY2ssIFwiZlwiKVtqXSA9IGNpcGhlcnRleHRbaSArIGpdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBwbGFpbnRleHQ7XHJcbiAgICB9XHJcbn1cclxuX0NCQ19pdiA9IG5ldyBXZWFrTWFwKCksIF9DQkNfbGFzdEJsb2NrID0gbmV3IFdlYWtNYXAoKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kZS1jYmMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/aes-js/lib.esm/mode-cbc.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/aes-js/lib.esm/mode-cfb.js":
/*!*************************************************!*\
  !*** ./node_modules/aes-js/lib.esm/mode-cfb.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CFB: () => (/* binding */ CFB)\n/* harmony export */ });\n/* harmony import */ var _mode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mode.js */ \"(pages-dir-browser)/./node_modules/aes-js/lib.esm/mode.js\");\n// Cipher Feedback\r\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n};\r\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n};\r\nvar _CFB_instances, _CFB_iv, _CFB_shiftRegister, _CFB_shift;\r\n\r\nclass CFB extends _mode_js__WEBPACK_IMPORTED_MODULE_0__.ModeOfOperation {\r\n    constructor(key, iv, segmentSize = 8) {\r\n        super(\"CFB\", key, CFB);\r\n        _CFB_instances.add(this);\r\n        _CFB_iv.set(this, void 0);\r\n        _CFB_shiftRegister.set(this, void 0);\r\n        // This library currently only handles byte-aligned segmentSize\r\n        if (!Number.isInteger(segmentSize) || (segmentSize % 8)) {\r\n            throw new TypeError(\"invalid segmentSize\");\r\n        }\r\n        Object.defineProperties(this, {\r\n            segmentSize: { enumerable: true, value: segmentSize }\r\n        });\r\n        if (iv) {\r\n            if (iv.length % 16) {\r\n                throw new TypeError(\"invalid iv size (must be 16 bytes)\");\r\n            }\r\n            __classPrivateFieldSet(this, _CFB_iv, new Uint8Array(iv), \"f\");\r\n        }\r\n        else {\r\n            __classPrivateFieldSet(this, _CFB_iv, new Uint8Array(16), \"f\");\r\n        }\r\n        __classPrivateFieldSet(this, _CFB_shiftRegister, this.iv, \"f\");\r\n    }\r\n    get iv() { return new Uint8Array(__classPrivateFieldGet(this, _CFB_iv, \"f\")); }\r\n    encrypt(plaintext) {\r\n        if (8 * plaintext.length % this.segmentSize) {\r\n            throw new TypeError(\"invalid plaintext size (must be multiple of segmentSize bytes)\");\r\n        }\r\n        const segmentSize = this.segmentSize / 8;\r\n        const ciphertext = new Uint8Array(plaintext);\r\n        for (let i = 0; i < ciphertext.length; i += segmentSize) {\r\n            const xorSegment = this.aes.encrypt(__classPrivateFieldGet(this, _CFB_shiftRegister, \"f\"));\r\n            for (let j = 0; j < segmentSize; j++) {\r\n                ciphertext[i + j] ^= xorSegment[j];\r\n            }\r\n            __classPrivateFieldGet(this, _CFB_instances, \"m\", _CFB_shift).call(this, ciphertext.subarray(i));\r\n        }\r\n        return ciphertext;\r\n    }\r\n    decrypt(ciphertext) {\r\n        if (8 * ciphertext.length % this.segmentSize) {\r\n            throw new TypeError(\"invalid ciphertext size (must be multiple of segmentSize bytes)\");\r\n        }\r\n        const segmentSize = this.segmentSize / 8;\r\n        const plaintext = new Uint8Array(ciphertext);\r\n        for (let i = 0; i < plaintext.length; i += segmentSize) {\r\n            const xorSegment = this.aes.encrypt(__classPrivateFieldGet(this, _CFB_shiftRegister, \"f\"));\r\n            for (let j = 0; j < segmentSize; j++) {\r\n                plaintext[i + j] ^= xorSegment[j];\r\n            }\r\n            __classPrivateFieldGet(this, _CFB_instances, \"m\", _CFB_shift).call(this, ciphertext.subarray(i));\r\n        }\r\n        return plaintext;\r\n    }\r\n}\r\n_CFB_iv = new WeakMap(), _CFB_shiftRegister = new WeakMap(), _CFB_instances = new WeakSet(), _CFB_shift = function _CFB_shift(data) {\r\n    const segmentSize = this.segmentSize / 8;\r\n    // Shift the register\r\n    __classPrivateFieldGet(this, _CFB_shiftRegister, \"f\").set(__classPrivateFieldGet(this, _CFB_shiftRegister, \"f\").subarray(segmentSize));\r\n    __classPrivateFieldGet(this, _CFB_shiftRegister, \"f\").set(data.subarray(0, segmentSize), 16 - segmentSize);\r\n};\r\n//# sourceMappingURL=mode-cfb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9hZXMtanMvbGliLmVzbS9tb2RlLWNmYi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0EsOEJBQThCLFNBQUksSUFBSSxTQUFJO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsU0FBSSxJQUFJLFNBQUk7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUM0QztBQUNyQyxrQkFBa0IscURBQWU7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHVCQUF1QjtBQUMvQztBQUNBLDRCQUE0QixpQkFBaUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHNCQUFzQjtBQUM5QztBQUNBLDRCQUE0QixpQkFBaUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiRDpcXERvX2FuMlxcbGVuZGh1Yl92MlxcbGVuZGh1Yi1mcm9udGVuZC1uZXh0anNcXG5vZGVfbW9kdWxlc1xcYWVzLWpzXFxsaWIuZXNtXFxtb2RlLWNmYi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDaXBoZXIgRmVlZGJhY2tcclxudmFyIF9fY2xhc3NQcml2YXRlRmllbGRTZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRTZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XHJcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xyXG4gICAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XHJcbn07XHJcbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XHJcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcclxuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XHJcbn07XHJcbnZhciBfQ0ZCX2luc3RhbmNlcywgX0NGQl9pdiwgX0NGQl9zaGlmdFJlZ2lzdGVyLCBfQ0ZCX3NoaWZ0O1xyXG5pbXBvcnQgeyBNb2RlT2ZPcGVyYXRpb24gfSBmcm9tIFwiLi9tb2RlLmpzXCI7XHJcbmV4cG9ydCBjbGFzcyBDRkIgZXh0ZW5kcyBNb2RlT2ZPcGVyYXRpb24ge1xyXG4gICAgY29uc3RydWN0b3Ioa2V5LCBpdiwgc2VnbWVudFNpemUgPSA4KSB7XHJcbiAgICAgICAgc3VwZXIoXCJDRkJcIiwga2V5LCBDRkIpO1xyXG4gICAgICAgIF9DRkJfaW5zdGFuY2VzLmFkZCh0aGlzKTtcclxuICAgICAgICBfQ0ZCX2l2LnNldCh0aGlzLCB2b2lkIDApO1xyXG4gICAgICAgIF9DRkJfc2hpZnRSZWdpc3Rlci5zZXQodGhpcywgdm9pZCAwKTtcclxuICAgICAgICAvLyBUaGlzIGxpYnJhcnkgY3VycmVudGx5IG9ubHkgaGFuZGxlcyBieXRlLWFsaWduZWQgc2VnbWVudFNpemVcclxuICAgICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIoc2VnbWVudFNpemUpIHx8IChzZWdtZW50U2l6ZSAlIDgpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJpbnZhbGlkIHNlZ21lbnRTaXplXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7XHJcbiAgICAgICAgICAgIHNlZ21lbnRTaXplOiB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiBzZWdtZW50U2l6ZSB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKGl2KSB7XHJcbiAgICAgICAgICAgIGlmIChpdi5sZW5ndGggJSAxNikge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImludmFsaWQgaXYgc2l6ZSAobXVzdCBiZSAxNiBieXRlcylcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfQ0ZCX2l2LCBuZXcgVWludDhBcnJheShpdiksIFwiZlwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX0NGQl9pdiwgbmV3IFVpbnQ4QXJyYXkoMTYpLCBcImZcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX0NGQl9zaGlmdFJlZ2lzdGVyLCB0aGlzLml2LCBcImZcIik7XHJcbiAgICB9XHJcbiAgICBnZXQgaXYoKSB7IHJldHVybiBuZXcgVWludDhBcnJheShfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9DRkJfaXYsIFwiZlwiKSk7IH1cclxuICAgIGVuY3J5cHQocGxhaW50ZXh0KSB7XHJcbiAgICAgICAgaWYgKDggKiBwbGFpbnRleHQubGVuZ3RoICUgdGhpcy5zZWdtZW50U2l6ZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiaW52YWxpZCBwbGFpbnRleHQgc2l6ZSAobXVzdCBiZSBtdWx0aXBsZSBvZiBzZWdtZW50U2l6ZSBieXRlcylcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHNlZ21lbnRTaXplID0gdGhpcy5zZWdtZW50U2l6ZSAvIDg7XHJcbiAgICAgICAgY29uc3QgY2lwaGVydGV4dCA9IG5ldyBVaW50OEFycmF5KHBsYWludGV4dCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaXBoZXJ0ZXh0Lmxlbmd0aDsgaSArPSBzZWdtZW50U2l6ZSkge1xyXG4gICAgICAgICAgICBjb25zdCB4b3JTZWdtZW50ID0gdGhpcy5hZXMuZW5jcnlwdChfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9DRkJfc2hpZnRSZWdpc3RlciwgXCJmXCIpKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBzZWdtZW50U2l6ZTsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICBjaXBoZXJ0ZXh0W2kgKyBqXSBePSB4b3JTZWdtZW50W2pdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0NGQl9pbnN0YW5jZXMsIFwibVwiLCBfQ0ZCX3NoaWZ0KS5jYWxsKHRoaXMsIGNpcGhlcnRleHQuc3ViYXJyYXkoaSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY2lwaGVydGV4dDtcclxuICAgIH1cclxuICAgIGRlY3J5cHQoY2lwaGVydGV4dCkge1xyXG4gICAgICAgIGlmICg4ICogY2lwaGVydGV4dC5sZW5ndGggJSB0aGlzLnNlZ21lbnRTaXplKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJpbnZhbGlkIGNpcGhlcnRleHQgc2l6ZSAobXVzdCBiZSBtdWx0aXBsZSBvZiBzZWdtZW50U2l6ZSBieXRlcylcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHNlZ21lbnRTaXplID0gdGhpcy5zZWdtZW50U2l6ZSAvIDg7XHJcbiAgICAgICAgY29uc3QgcGxhaW50ZXh0ID0gbmV3IFVpbnQ4QXJyYXkoY2lwaGVydGV4dCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwbGFpbnRleHQubGVuZ3RoOyBpICs9IHNlZ21lbnRTaXplKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHhvclNlZ21lbnQgPSB0aGlzLmFlcy5lbmNyeXB0KF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0NGQl9zaGlmdFJlZ2lzdGVyLCBcImZcIikpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHNlZ21lbnRTaXplOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIHBsYWludGV4dFtpICsgal0gXj0geG9yU2VnbWVudFtqXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9DRkJfaW5zdGFuY2VzLCBcIm1cIiwgX0NGQl9zaGlmdCkuY2FsbCh0aGlzLCBjaXBoZXJ0ZXh0LnN1YmFycmF5KGkpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHBsYWludGV4dDtcclxuICAgIH1cclxufVxyXG5fQ0ZCX2l2ID0gbmV3IFdlYWtNYXAoKSwgX0NGQl9zaGlmdFJlZ2lzdGVyID0gbmV3IFdlYWtNYXAoKSwgX0NGQl9pbnN0YW5jZXMgPSBuZXcgV2Vha1NldCgpLCBfQ0ZCX3NoaWZ0ID0gZnVuY3Rpb24gX0NGQl9zaGlmdChkYXRhKSB7XHJcbiAgICBjb25zdCBzZWdtZW50U2l6ZSA9IHRoaXMuc2VnbWVudFNpemUgLyA4O1xyXG4gICAgLy8gU2hpZnQgdGhlIHJlZ2lzdGVyXHJcbiAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9DRkJfc2hpZnRSZWdpc3RlciwgXCJmXCIpLnNldChfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9DRkJfc2hpZnRSZWdpc3RlciwgXCJmXCIpLnN1YmFycmF5KHNlZ21lbnRTaXplKSk7XHJcbiAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9DRkJfc2hpZnRSZWdpc3RlciwgXCJmXCIpLnNldChkYXRhLnN1YmFycmF5KDAsIHNlZ21lbnRTaXplKSwgMTYgLSBzZWdtZW50U2l6ZSk7XHJcbn07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vZGUtY2ZiLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/aes-js/lib.esm/mode-cfb.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/aes-js/lib.esm/mode-ctr.js":
/*!*************************************************!*\
  !*** ./node_modules/aes-js/lib.esm/mode-ctr.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CTR: () => (/* binding */ CTR)\n/* harmony export */ });\n/* harmony import */ var _mode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mode.js */ \"(pages-dir-browser)/./node_modules/aes-js/lib.esm/mode.js\");\n// Counter Mode\r\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n};\r\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n};\r\nvar _CTR_remaining, _CTR_remainingIndex, _CTR_counter;\r\n\r\nclass CTR extends _mode_js__WEBPACK_IMPORTED_MODULE_0__.ModeOfOperation {\r\n    constructor(key, initialValue) {\r\n        super(\"CTR\", key, CTR);\r\n        // Remaining bytes for the one-time pad\r\n        _CTR_remaining.set(this, void 0);\r\n        _CTR_remainingIndex.set(this, void 0);\r\n        // The current counter\r\n        _CTR_counter.set(this, void 0);\r\n        __classPrivateFieldSet(this, _CTR_counter, new Uint8Array(16), \"f\");\r\n        __classPrivateFieldGet(this, _CTR_counter, \"f\").fill(0);\r\n        __classPrivateFieldSet(this, _CTR_remaining, __classPrivateFieldGet(this, _CTR_counter, \"f\"), \"f\"); // This will be discarded immediately\r\n        __classPrivateFieldSet(this, _CTR_remainingIndex, 16, \"f\");\r\n        if (initialValue == null) {\r\n            initialValue = 1;\r\n        }\r\n        if (typeof (initialValue) === \"number\") {\r\n            this.setCounterValue(initialValue);\r\n        }\r\n        else {\r\n            this.setCounterBytes(initialValue);\r\n        }\r\n    }\r\n    get counter() { return new Uint8Array(__classPrivateFieldGet(this, _CTR_counter, \"f\")); }\r\n    setCounterValue(value) {\r\n        if (!Number.isInteger(value) || value < 0 || value > Number.MAX_SAFE_INTEGER) {\r\n            throw new TypeError(\"invalid counter initial integer value\");\r\n        }\r\n        for (let index = 15; index >= 0; --index) {\r\n            __classPrivateFieldGet(this, _CTR_counter, \"f\")[index] = value % 256;\r\n            value = Math.floor(value / 256);\r\n        }\r\n    }\r\n    setCounterBytes(value) {\r\n        if (value.length !== 16) {\r\n            throw new TypeError(\"invalid counter initial Uint8Array value length\");\r\n        }\r\n        __classPrivateFieldGet(this, _CTR_counter, \"f\").set(value);\r\n    }\r\n    increment() {\r\n        for (let i = 15; i >= 0; i--) {\r\n            if (__classPrivateFieldGet(this, _CTR_counter, \"f\")[i] === 255) {\r\n                __classPrivateFieldGet(this, _CTR_counter, \"f\")[i] = 0;\r\n            }\r\n            else {\r\n                __classPrivateFieldGet(this, _CTR_counter, \"f\")[i]++;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    encrypt(plaintext) {\r\n        var _a, _b;\r\n        const crypttext = new Uint8Array(plaintext);\r\n        for (let i = 0; i < crypttext.length; i++) {\r\n            if (__classPrivateFieldGet(this, _CTR_remainingIndex, \"f\") === 16) {\r\n                __classPrivateFieldSet(this, _CTR_remaining, this.aes.encrypt(__classPrivateFieldGet(this, _CTR_counter, \"f\")), \"f\");\r\n                __classPrivateFieldSet(this, _CTR_remainingIndex, 0, \"f\");\r\n                this.increment();\r\n            }\r\n            crypttext[i] ^= __classPrivateFieldGet(this, _CTR_remaining, \"f\")[__classPrivateFieldSet(this, _CTR_remainingIndex, (_b = __classPrivateFieldGet(this, _CTR_remainingIndex, \"f\"), _a = _b++, _b), \"f\"), _a];\r\n        }\r\n        return crypttext;\r\n    }\r\n    decrypt(ciphertext) {\r\n        return this.encrypt(ciphertext);\r\n    }\r\n}\r\n_CTR_remaining = new WeakMap(), _CTR_remainingIndex = new WeakMap(), _CTR_counter = new WeakMap();\r\n//# sourceMappingURL=mode-ctr.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9hZXMtanMvbGliLmVzbS9tb2RlLWN0ci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0EsOEJBQThCLFNBQUksSUFBSSxTQUFJO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsU0FBSSxJQUFJLFNBQUk7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUM0QztBQUNyQyxrQkFBa0IscURBQWU7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEdBQTRHO0FBQzVHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsWUFBWTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLFFBQVE7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHNCQUFzQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkQ6XFxEb19hbjJcXGxlbmRodWJfdjJcXGxlbmRodWItZnJvbnRlbmQtbmV4dGpzXFxub2RlX21vZHVsZXNcXGFlcy1qc1xcbGliLmVzbVxcbW9kZS1jdHIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ291bnRlciBNb2RlXHJcbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xyXG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xyXG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcclxuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xyXG59O1xyXG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZEdldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZEdldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xyXG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XHJcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xyXG59O1xyXG52YXIgX0NUUl9yZW1haW5pbmcsIF9DVFJfcmVtYWluaW5nSW5kZXgsIF9DVFJfY291bnRlcjtcclxuaW1wb3J0IHsgTW9kZU9mT3BlcmF0aW9uIH0gZnJvbSBcIi4vbW9kZS5qc1wiO1xyXG5leHBvcnQgY2xhc3MgQ1RSIGV4dGVuZHMgTW9kZU9mT3BlcmF0aW9uIHtcclxuICAgIGNvbnN0cnVjdG9yKGtleSwgaW5pdGlhbFZhbHVlKSB7XHJcbiAgICAgICAgc3VwZXIoXCJDVFJcIiwga2V5LCBDVFIpO1xyXG4gICAgICAgIC8vIFJlbWFpbmluZyBieXRlcyBmb3IgdGhlIG9uZS10aW1lIHBhZFxyXG4gICAgICAgIF9DVFJfcmVtYWluaW5nLnNldCh0aGlzLCB2b2lkIDApO1xyXG4gICAgICAgIF9DVFJfcmVtYWluaW5nSW5kZXguc2V0KHRoaXMsIHZvaWQgMCk7XHJcbiAgICAgICAgLy8gVGhlIGN1cnJlbnQgY291bnRlclxyXG4gICAgICAgIF9DVFJfY291bnRlci5zZXQodGhpcywgdm9pZCAwKTtcclxuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9DVFJfY291bnRlciwgbmV3IFVpbnQ4QXJyYXkoMTYpLCBcImZcIik7XHJcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQ1RSX2NvdW50ZXIsIFwiZlwiKS5maWxsKDApO1xyXG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX0NUUl9yZW1haW5pbmcsIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0NUUl9jb3VudGVyLCBcImZcIiksIFwiZlwiKTsgLy8gVGhpcyB3aWxsIGJlIGRpc2NhcmRlZCBpbW1lZGlhdGVseVxyXG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX0NUUl9yZW1haW5pbmdJbmRleCwgMTYsIFwiZlwiKTtcclxuICAgICAgICBpZiAoaW5pdGlhbFZhbHVlID09IG51bGwpIHtcclxuICAgICAgICAgICAgaW5pdGlhbFZhbHVlID0gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiAoaW5pdGlhbFZhbHVlKSA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICB0aGlzLnNldENvdW50ZXJWYWx1ZShpbml0aWFsVmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRDb3VudGVyQnl0ZXMoaW5pdGlhbFZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBnZXQgY291bnRlcigpIHsgcmV0dXJuIG5ldyBVaW50OEFycmF5KF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0NUUl9jb3VudGVyLCBcImZcIikpOyB9XHJcbiAgICBzZXRDb3VudGVyVmFsdWUodmFsdWUpIHtcclxuICAgICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIodmFsdWUpIHx8IHZhbHVlIDwgMCB8fCB2YWx1ZSA+IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJpbnZhbGlkIGNvdW50ZXIgaW5pdGlhbCBpbnRlZ2VyIHZhbHVlXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDE1OyBpbmRleCA+PSAwOyAtLWluZGV4KSB7XHJcbiAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0NUUl9jb3VudGVyLCBcImZcIilbaW5kZXhdID0gdmFsdWUgJSAyNTY7XHJcbiAgICAgICAgICAgIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSAvIDI1Nik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc2V0Q291bnRlckJ5dGVzKHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCAhPT0gMTYpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImludmFsaWQgY291bnRlciBpbml0aWFsIFVpbnQ4QXJyYXkgdmFsdWUgbGVuZ3RoXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9DVFJfY291bnRlciwgXCJmXCIpLnNldCh2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBpbmNyZW1lbnQoKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDE1OyBpID49IDA7IGktLSkge1xyXG4gICAgICAgICAgICBpZiAoX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQ1RSX2NvdW50ZXIsIFwiZlwiKVtpXSA9PT0gMjU1KSB7XHJcbiAgICAgICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9DVFJfY291bnRlciwgXCJmXCIpW2ldID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0NUUl9jb3VudGVyLCBcImZcIilbaV0rKztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZW5jcnlwdChwbGFpbnRleHQpIHtcclxuICAgICAgICB2YXIgX2EsIF9iO1xyXG4gICAgICAgIGNvbnN0IGNyeXB0dGV4dCA9IG5ldyBVaW50OEFycmF5KHBsYWludGV4dCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjcnlwdHRleHQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0NUUl9yZW1haW5pbmdJbmRleCwgXCJmXCIpID09PSAxNikge1xyXG4gICAgICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfQ1RSX3JlbWFpbmluZywgdGhpcy5hZXMuZW5jcnlwdChfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9DVFJfY291bnRlciwgXCJmXCIpKSwgXCJmXCIpO1xyXG4gICAgICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfQ1RSX3JlbWFpbmluZ0luZGV4LCAwLCBcImZcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmluY3JlbWVudCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNyeXB0dGV4dFtpXSBePSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9DVFJfcmVtYWluaW5nLCBcImZcIilbX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfQ1RSX3JlbWFpbmluZ0luZGV4LCAoX2IgPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9DVFJfcmVtYWluaW5nSW5kZXgsIFwiZlwiKSwgX2EgPSBfYisrLCBfYiksIFwiZlwiKSwgX2FdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY3J5cHR0ZXh0O1xyXG4gICAgfVxyXG4gICAgZGVjcnlwdChjaXBoZXJ0ZXh0KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZW5jcnlwdChjaXBoZXJ0ZXh0KTtcclxuICAgIH1cclxufVxyXG5fQ1RSX3JlbWFpbmluZyA9IG5ldyBXZWFrTWFwKCksIF9DVFJfcmVtYWluaW5nSW5kZXggPSBuZXcgV2Vha01hcCgpLCBfQ1RSX2NvdW50ZXIgPSBuZXcgV2Vha01hcCgpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2RlLWN0ci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/aes-js/lib.esm/mode-ctr.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/aes-js/lib.esm/mode-ecb.js":
/*!*************************************************!*\
  !*** ./node_modules/aes-js/lib.esm/mode-ecb.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ECB: () => (/* binding */ ECB)\n/* harmony export */ });\n/* harmony import */ var _mode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mode.js */ \"(pages-dir-browser)/./node_modules/aes-js/lib.esm/mode.js\");\n// Electronic Code Book\r\n\r\nclass ECB extends _mode_js__WEBPACK_IMPORTED_MODULE_0__.ModeOfOperation {\r\n    constructor(key) {\r\n        super(\"ECB\", key, ECB);\r\n    }\r\n    encrypt(plaintext) {\r\n        if (plaintext.length % 16) {\r\n            throw new TypeError(\"invalid plaintext size (must be multiple of 16 bytes)\");\r\n        }\r\n        const crypttext = new Uint8Array(plaintext.length);\r\n        for (let i = 0; i < plaintext.length; i += 16) {\r\n            crypttext.set(this.aes.encrypt(plaintext.subarray(i, i + 16)), i);\r\n        }\r\n        return crypttext;\r\n    }\r\n    decrypt(crypttext) {\r\n        if (crypttext.length % 16) {\r\n            throw new TypeError(\"invalid ciphertext size (must be multiple of 16 bytes)\");\r\n        }\r\n        const plaintext = new Uint8Array(crypttext.length);\r\n        for (let i = 0; i < crypttext.length; i += 16) {\r\n            plaintext.set(this.aes.decrypt(crypttext.subarray(i, i + 16)), i);\r\n        }\r\n        return plaintext;\r\n    }\r\n}\r\n//# sourceMappingURL=mode-ecb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9hZXMtanMvbGliLmVzbS9tb2RlLWVjYi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQzRDO0FBQ3JDLGtCQUFrQixxREFBZTtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHNCQUFzQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isc0JBQXNCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiRDpcXERvX2FuMlxcbGVuZGh1Yl92MlxcbGVuZGh1Yi1mcm9udGVuZC1uZXh0anNcXG5vZGVfbW9kdWxlc1xcYWVzLWpzXFxsaWIuZXNtXFxtb2RlLWVjYi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBFbGVjdHJvbmljIENvZGUgQm9va1xyXG5pbXBvcnQgeyBNb2RlT2ZPcGVyYXRpb24gfSBmcm9tIFwiLi9tb2RlLmpzXCI7XHJcbmV4cG9ydCBjbGFzcyBFQ0IgZXh0ZW5kcyBNb2RlT2ZPcGVyYXRpb24ge1xyXG4gICAgY29uc3RydWN0b3Ioa2V5KSB7XHJcbiAgICAgICAgc3VwZXIoXCJFQ0JcIiwga2V5LCBFQ0IpO1xyXG4gICAgfVxyXG4gICAgZW5jcnlwdChwbGFpbnRleHQpIHtcclxuICAgICAgICBpZiAocGxhaW50ZXh0Lmxlbmd0aCAlIDE2KSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJpbnZhbGlkIHBsYWludGV4dCBzaXplIChtdXN0IGJlIG11bHRpcGxlIG9mIDE2IGJ5dGVzKVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgY3J5cHR0ZXh0ID0gbmV3IFVpbnQ4QXJyYXkocGxhaW50ZXh0Lmxlbmd0aCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwbGFpbnRleHQubGVuZ3RoOyBpICs9IDE2KSB7XHJcbiAgICAgICAgICAgIGNyeXB0dGV4dC5zZXQodGhpcy5hZXMuZW5jcnlwdChwbGFpbnRleHQuc3ViYXJyYXkoaSwgaSArIDE2KSksIGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY3J5cHR0ZXh0O1xyXG4gICAgfVxyXG4gICAgZGVjcnlwdChjcnlwdHRleHQpIHtcclxuICAgICAgICBpZiAoY3J5cHR0ZXh0Lmxlbmd0aCAlIDE2KSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJpbnZhbGlkIGNpcGhlcnRleHQgc2l6ZSAobXVzdCBiZSBtdWx0aXBsZSBvZiAxNiBieXRlcylcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHBsYWludGV4dCA9IG5ldyBVaW50OEFycmF5KGNyeXB0dGV4dC5sZW5ndGgpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY3J5cHR0ZXh0Lmxlbmd0aDsgaSArPSAxNikge1xyXG4gICAgICAgICAgICBwbGFpbnRleHQuc2V0KHRoaXMuYWVzLmRlY3J5cHQoY3J5cHR0ZXh0LnN1YmFycmF5KGksIGkgKyAxNikpLCBpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHBsYWludGV4dDtcclxuICAgIH1cclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2RlLWVjYi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/aes-js/lib.esm/mode-ecb.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/aes-js/lib.esm/mode-ofb.js":
/*!*************************************************!*\
  !*** ./node_modules/aes-js/lib.esm/mode-ofb.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OFB: () => (/* binding */ OFB)\n/* harmony export */ });\n/* harmony import */ var _mode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mode.js */ \"(pages-dir-browser)/./node_modules/aes-js/lib.esm/mode.js\");\n// Output Feedback\r\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n};\r\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n};\r\nvar _OFB_iv, _OFB_lastPrecipher, _OFB_lastPrecipherIndex;\r\n\r\nclass OFB extends _mode_js__WEBPACK_IMPORTED_MODULE_0__.ModeOfOperation {\r\n    constructor(key, iv) {\r\n        super(\"OFB\", key, OFB);\r\n        _OFB_iv.set(this, void 0);\r\n        _OFB_lastPrecipher.set(this, void 0);\r\n        _OFB_lastPrecipherIndex.set(this, void 0);\r\n        if (iv) {\r\n            if (iv.length % 16) {\r\n                throw new TypeError(\"invalid iv size (must be 16 bytes)\");\r\n            }\r\n            __classPrivateFieldSet(this, _OFB_iv, new Uint8Array(iv), \"f\");\r\n        }\r\n        else {\r\n            __classPrivateFieldSet(this, _OFB_iv, new Uint8Array(16), \"f\");\r\n        }\r\n        __classPrivateFieldSet(this, _OFB_lastPrecipher, this.iv, \"f\");\r\n        __classPrivateFieldSet(this, _OFB_lastPrecipherIndex, 16, \"f\");\r\n    }\r\n    get iv() { return new Uint8Array(__classPrivateFieldGet(this, _OFB_iv, \"f\")); }\r\n    encrypt(plaintext) {\r\n        var _a, _b;\r\n        if (plaintext.length % 16) {\r\n            throw new TypeError(\"invalid plaintext size (must be multiple of 16 bytes)\");\r\n        }\r\n        const ciphertext = new Uint8Array(plaintext);\r\n        for (let i = 0; i < ciphertext.length; i++) {\r\n            if (__classPrivateFieldGet(this, _OFB_lastPrecipherIndex, \"f\") === 16) {\r\n                __classPrivateFieldSet(this, _OFB_lastPrecipher, this.aes.encrypt(__classPrivateFieldGet(this, _OFB_lastPrecipher, \"f\")), \"f\");\r\n                __classPrivateFieldSet(this, _OFB_lastPrecipherIndex, 0, \"f\");\r\n            }\r\n            ciphertext[i] ^= __classPrivateFieldGet(this, _OFB_lastPrecipher, \"f\")[__classPrivateFieldSet(this, _OFB_lastPrecipherIndex, (_b = __classPrivateFieldGet(this, _OFB_lastPrecipherIndex, \"f\"), _a = _b++, _b), \"f\"), _a];\r\n        }\r\n        return ciphertext;\r\n    }\r\n    decrypt(ciphertext) {\r\n        if (ciphertext.length % 16) {\r\n            throw new TypeError(\"invalid ciphertext size (must be multiple of 16 bytes)\");\r\n        }\r\n        return this.encrypt(ciphertext);\r\n    }\r\n}\r\n_OFB_iv = new WeakMap(), _OFB_lastPrecipher = new WeakMap(), _OFB_lastPrecipherIndex = new WeakMap();\r\n//# sourceMappingURL=mode-ofb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9hZXMtanMvbGliLmVzbS9tb2RlLW9mYi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0EsOEJBQThCLFNBQUksSUFBSSxTQUFJO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsU0FBSSxJQUFJLFNBQUk7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUM0QztBQUNyQyxrQkFBa0IscURBQWU7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsdUJBQXVCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkQ6XFxEb19hbjJcXGxlbmRodWJfdjJcXGxlbmRodWItZnJvbnRlbmQtbmV4dGpzXFxub2RlX21vZHVsZXNcXGFlcy1qc1xcbGliLmVzbVxcbW9kZS1vZmIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gT3V0cHV0IEZlZWRiYWNrXHJcbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xyXG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xyXG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcclxuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xyXG59O1xyXG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZEdldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZEdldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xyXG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XHJcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xyXG59O1xyXG52YXIgX09GQl9pdiwgX09GQl9sYXN0UHJlY2lwaGVyLCBfT0ZCX2xhc3RQcmVjaXBoZXJJbmRleDtcclxuaW1wb3J0IHsgTW9kZU9mT3BlcmF0aW9uIH0gZnJvbSBcIi4vbW9kZS5qc1wiO1xyXG5leHBvcnQgY2xhc3MgT0ZCIGV4dGVuZHMgTW9kZU9mT3BlcmF0aW9uIHtcclxuICAgIGNvbnN0cnVjdG9yKGtleSwgaXYpIHtcclxuICAgICAgICBzdXBlcihcIk9GQlwiLCBrZXksIE9GQik7XHJcbiAgICAgICAgX09GQl9pdi5zZXQodGhpcywgdm9pZCAwKTtcclxuICAgICAgICBfT0ZCX2xhc3RQcmVjaXBoZXIuc2V0KHRoaXMsIHZvaWQgMCk7XHJcbiAgICAgICAgX09GQl9sYXN0UHJlY2lwaGVySW5kZXguc2V0KHRoaXMsIHZvaWQgMCk7XHJcbiAgICAgICAgaWYgKGl2KSB7XHJcbiAgICAgICAgICAgIGlmIChpdi5sZW5ndGggJSAxNikge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImludmFsaWQgaXYgc2l6ZSAobXVzdCBiZSAxNiBieXRlcylcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfT0ZCX2l2LCBuZXcgVWludDhBcnJheShpdiksIFwiZlwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX09GQl9pdiwgbmV3IFVpbnQ4QXJyYXkoMTYpLCBcImZcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX09GQl9sYXN0UHJlY2lwaGVyLCB0aGlzLml2LCBcImZcIik7XHJcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfT0ZCX2xhc3RQcmVjaXBoZXJJbmRleCwgMTYsIFwiZlwiKTtcclxuICAgIH1cclxuICAgIGdldCBpdigpIHsgcmV0dXJuIG5ldyBVaW50OEFycmF5KF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX09GQl9pdiwgXCJmXCIpKTsgfVxyXG4gICAgZW5jcnlwdChwbGFpbnRleHQpIHtcclxuICAgICAgICB2YXIgX2EsIF9iO1xyXG4gICAgICAgIGlmIChwbGFpbnRleHQubGVuZ3RoICUgMTYpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImludmFsaWQgcGxhaW50ZXh0IHNpemUgKG11c3QgYmUgbXVsdGlwbGUgb2YgMTYgYnl0ZXMpXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBjaXBoZXJ0ZXh0ID0gbmV3IFVpbnQ4QXJyYXkocGxhaW50ZXh0KTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNpcGhlcnRleHQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX09GQl9sYXN0UHJlY2lwaGVySW5kZXgsIFwiZlwiKSA9PT0gMTYpIHtcclxuICAgICAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX09GQl9sYXN0UHJlY2lwaGVyLCB0aGlzLmFlcy5lbmNyeXB0KF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX09GQl9sYXN0UHJlY2lwaGVyLCBcImZcIikpLCBcImZcIik7XHJcbiAgICAgICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9PRkJfbGFzdFByZWNpcGhlckluZGV4LCAwLCBcImZcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2lwaGVydGV4dFtpXSBePSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9PRkJfbGFzdFByZWNpcGhlciwgXCJmXCIpW19fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX09GQl9sYXN0UHJlY2lwaGVySW5kZXgsIChfYiA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX09GQl9sYXN0UHJlY2lwaGVySW5kZXgsIFwiZlwiKSwgX2EgPSBfYisrLCBfYiksIFwiZlwiKSwgX2FdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY2lwaGVydGV4dDtcclxuICAgIH1cclxuICAgIGRlY3J5cHQoY2lwaGVydGV4dCkge1xyXG4gICAgICAgIGlmIChjaXBoZXJ0ZXh0Lmxlbmd0aCAlIDE2KSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJpbnZhbGlkIGNpcGhlcnRleHQgc2l6ZSAobXVzdCBiZSBtdWx0aXBsZSBvZiAxNiBieXRlcylcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmVuY3J5cHQoY2lwaGVydGV4dCk7XHJcbiAgICB9XHJcbn1cclxuX09GQl9pdiA9IG5ldyBXZWFrTWFwKCksIF9PRkJfbGFzdFByZWNpcGhlciA9IG5ldyBXZWFrTWFwKCksIF9PRkJfbGFzdFByZWNpcGhlckluZGV4ID0gbmV3IFdlYWtNYXAoKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kZS1vZmIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/aes-js/lib.esm/mode-ofb.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/aes-js/lib.esm/mode.js":
/*!*********************************************!*\
  !*** ./node_modules/aes-js/lib.esm/mode.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ModeOfOperation: () => (/* binding */ ModeOfOperation)\n/* harmony export */ });\n/* harmony import */ var _aes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./aes.js */ \"(pages-dir-browser)/./node_modules/aes-js/lib.esm/aes.js\");\n\r\nclass ModeOfOperation {\r\n    constructor(name, key, cls) {\r\n        if (cls && !(this instanceof cls)) {\r\n            throw new Error(`${name} must be instantiated with \"new\"`);\r\n        }\r\n        Object.defineProperties(this, {\r\n            aes: { enumerable: true, value: new _aes_js__WEBPACK_IMPORTED_MODULE_0__.AES(key) },\r\n            name: { enumerable: true, value: name }\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=mode.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9hZXMtanMvbGliLmVzbS9tb2RlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQStCO0FBQ3hCO0FBQ1A7QUFDQTtBQUNBLCtCQUErQixNQUFNO0FBQ3JDO0FBQ0E7QUFDQSxtQkFBbUIsNkJBQTZCLHdDQUFHLE9BQU87QUFDMUQsb0JBQW9CO0FBQ3BCLFNBQVM7QUFDVDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkQ6XFxEb19hbjJcXGxlbmRodWJfdjJcXGxlbmRodWItZnJvbnRlbmQtbmV4dGpzXFxub2RlX21vZHVsZXNcXGFlcy1qc1xcbGliLmVzbVxcbW9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBRVMgfSBmcm9tIFwiLi9hZXMuanNcIjtcclxuZXhwb3J0IGNsYXNzIE1vZGVPZk9wZXJhdGlvbiB7XHJcbiAgICBjb25zdHJ1Y3RvcihuYW1lLCBrZXksIGNscykge1xyXG4gICAgICAgIGlmIChjbHMgJiYgISh0aGlzIGluc3RhbmNlb2YgY2xzKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7bmFtZX0gbXVzdCBiZSBpbnN0YW50aWF0ZWQgd2l0aCBcIm5ld1wiYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcclxuICAgICAgICAgICAgYWVzOiB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiBuZXcgQUVTKGtleSkgfSxcclxuICAgICAgICAgICAgbmFtZTogeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogbmFtZSB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/aes-js/lib.esm/mode.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/aes-js/lib.esm/padding.js":
/*!************************************************!*\
  !*** ./node_modules/aes-js/lib.esm/padding.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pkcs7Pad: () => (/* binding */ pkcs7Pad),\n/* harmony export */   pkcs7Strip: () => (/* binding */ pkcs7Strip)\n/* harmony export */ });\nfunction pkcs7Pad(data) {\r\n    const padder = 16 - (data.length % 16);\r\n    const result = new Uint8Array(data.length + padder);\r\n    result.set(data);\r\n    for (let i = data.length; i < result.length; i++) {\r\n        result[i] = padder;\r\n    }\r\n    return result;\r\n}\r\nfunction pkcs7Strip(data) {\r\n    if (data.length < 16) {\r\n        throw new TypeError('PKCS#7 invalid length');\r\n    }\r\n    const padder = data[data.length - 1];\r\n    if (padder > 16) {\r\n        throw new TypeError('PKCS#7 padding byte out of range');\r\n    }\r\n    const length = data.length - padder;\r\n    for (let i = 0; i < padder; i++) {\r\n        if (data[length + i] !== padder) {\r\n            throw new TypeError('PKCS#7 invalid padding byte');\r\n        }\r\n    }\r\n    return new Uint8Array(data.subarray(0, length));\r\n}\r\n//# sourceMappingURL=padding.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9hZXMtanMvbGliLmVzbS9wYWRkaW5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsbUJBQW1CO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFlBQVk7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkQ6XFxEb19hbjJcXGxlbmRodWJfdjJcXGxlbmRodWItZnJvbnRlbmQtbmV4dGpzXFxub2RlX21vZHVsZXNcXGFlcy1qc1xcbGliLmVzbVxccGFkZGluZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gcGtjczdQYWQoZGF0YSkge1xyXG4gICAgY29uc3QgcGFkZGVyID0gMTYgLSAoZGF0YS5sZW5ndGggJSAxNik7XHJcbiAgICBjb25zdCByZXN1bHQgPSBuZXcgVWludDhBcnJheShkYXRhLmxlbmd0aCArIHBhZGRlcik7XHJcbiAgICByZXN1bHQuc2V0KGRhdGEpO1xyXG4gICAgZm9yIChsZXQgaSA9IGRhdGEubGVuZ3RoOyBpIDwgcmVzdWx0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgcmVzdWx0W2ldID0gcGFkZGVyO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gcGtjczdTdHJpcChkYXRhKSB7XHJcbiAgICBpZiAoZGF0YS5sZW5ndGggPCAxNikge1xyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1BLQ1MjNyBpbnZhbGlkIGxlbmd0aCcpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcGFkZGVyID0gZGF0YVtkYXRhLmxlbmd0aCAtIDFdO1xyXG4gICAgaWYgKHBhZGRlciA+IDE2KSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUEtDUyM3IHBhZGRpbmcgYnl0ZSBvdXQgb2YgcmFuZ2UnKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGxlbmd0aCA9IGRhdGEubGVuZ3RoIC0gcGFkZGVyO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYWRkZXI7IGkrKykge1xyXG4gICAgICAgIGlmIChkYXRhW2xlbmd0aCArIGldICE9PSBwYWRkZXIpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUEtDUyM3IGludmFsaWQgcGFkZGluZyBieXRlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGRhdGEuc3ViYXJyYXkoMCwgbGVuZ3RoKSk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFkZGluZy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/aes-js/lib.esm/padding.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/_version.js":
/*!*************************************************!*\
  !*** ./node_modules/ethers/lib.esm/_version.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\n/* Do NOT modify this file; see /src.ts/_admin/update-version.ts */\r\n/**\r\n *  The current version of Ethers.\r\n */\r\nconst version = \"6.15.0\";\r\n//# sourceMappingURL=_version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9fdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNPO0FBQ1AiLCJzb3VyY2VzIjpbIkQ6XFxEb19hbjJcXGxlbmRodWJfdjJcXGxlbmRodWItZnJvbnRlbmQtbmV4dGpzXFxub2RlX21vZHVsZXNcXGV0aGVyc1xcbGliLmVzbVxcX3ZlcnNpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogRG8gTk9UIG1vZGlmeSB0aGlzIGZpbGU7IHNlZSAvc3JjLnRzL19hZG1pbi91cGRhdGUtdmVyc2lvbi50cyAqL1xyXG4vKipcclxuICogIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgRXRoZXJzLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHZlcnNpb24gPSBcIjYuMTUuMFwiO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1fdmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/_version.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/abi-coder.js":
/*!******************************************************!*\
  !*** ./node_modules/ethers/lib.esm/abi/abi-coder.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbiCoder: () => (/* binding */ AbiCoder)\n/* harmony export */ });\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/* harmony import */ var _coders_abstract_coder_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./coders/abstract-coder.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/coders/abstract-coder.js\");\n/* harmony import */ var _coders_address_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./coders/address.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/coders/address.js\");\n/* harmony import */ var _coders_array_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./coders/array.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/coders/array.js\");\n/* harmony import */ var _coders_boolean_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./coders/boolean.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/coders/boolean.js\");\n/* harmony import */ var _coders_bytes_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./coders/bytes.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/coders/bytes.js\");\n/* harmony import */ var _coders_fixed_bytes_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./coders/fixed-bytes.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/coders/fixed-bytes.js\");\n/* harmony import */ var _coders_null_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./coders/null.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/coders/null.js\");\n/* harmony import */ var _coders_number_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./coders/number.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/coders/number.js\");\n/* harmony import */ var _coders_string_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./coders/string.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/coders/string.js\");\n/* harmony import */ var _coders_tuple_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./coders/tuple.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/coders/tuple.js\");\n/* harmony import */ var _fragments_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./fragments.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/fragments.js\");\n/* harmony import */ var _address_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../address/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/address/index.js\");\n/**\r\n *  When sending values to or receiving values from a [[Contract]], the\r\n *  data is generally encoded using the [ABI standard](link-solc-abi).\r\n *\r\n *  The AbiCoder provides a utility to encode values to ABI data and\r\n *  decode values from ABI data.\r\n *\r\n *  Most of the time, developers should favour the [[Contract]] class,\r\n *  which further abstracts a lot of the finer details of ABI data.\r\n *\r\n *  @_section api/abi/abi-coder:ABI Encoding\r\n */\r\n// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// https://docs.soliditylang.org/en/v0.8.17/control-structures.html\r\nconst PanicReasons = new Map();\r\nPanicReasons.set(0x00, \"GENERIC_PANIC\");\r\nPanicReasons.set(0x01, \"ASSERT_FALSE\");\r\nPanicReasons.set(0x11, \"OVERFLOW\");\r\nPanicReasons.set(0x12, \"DIVIDE_BY_ZERO\");\r\nPanicReasons.set(0x21, \"ENUM_RANGE_ERROR\");\r\nPanicReasons.set(0x22, \"BAD_STORAGE_DATA\");\r\nPanicReasons.set(0x31, \"STACK_UNDERFLOW\");\r\nPanicReasons.set(0x32, \"ARRAY_RANGE_ERROR\");\r\nPanicReasons.set(0x41, \"OUT_OF_MEMORY\");\r\nPanicReasons.set(0x51, \"UNINITIALIZED_FUNCTION_CALL\");\r\nconst paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\r\nconst paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\r\nlet defaultCoder = null;\r\nlet defaultMaxInflation = 1024;\r\nfunction getBuiltinCallException(action, tx, data, abiCoder) {\r\n    let message = \"missing revert data\";\r\n    let reason = null;\r\n    const invocation = null;\r\n    let revert = null;\r\n    if (data) {\r\n        message = \"execution reverted\";\r\n        const bytes = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(data);\r\n        data = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(data);\r\n        if (bytes.length === 0) {\r\n            message += \" (no data present; likely require(false) occurred\";\r\n            reason = \"require(false)\";\r\n        }\r\n        else if (bytes.length % 32 !== 4) {\r\n            message += \" (could not decode reason; invalid data length)\";\r\n        }\r\n        else if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(bytes.slice(0, 4)) === \"0x08c379a0\") {\r\n            // Error(string)\r\n            try {\r\n                reason = abiCoder.decode([\"string\"], bytes.slice(4))[0];\r\n                revert = {\r\n                    signature: \"Error(string)\",\r\n                    name: \"Error\",\r\n                    args: [reason]\r\n                };\r\n                message += `: ${JSON.stringify(reason)}`;\r\n            }\r\n            catch (error) {\r\n                message += \" (could not decode reason; invalid string data)\";\r\n            }\r\n        }\r\n        else if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(bytes.slice(0, 4)) === \"0x4e487b71\") {\r\n            // Panic(uint256)\r\n            try {\r\n                const code = Number(abiCoder.decode([\"uint256\"], bytes.slice(4))[0]);\r\n                revert = {\r\n                    signature: \"Panic(uint256)\",\r\n                    name: \"Panic\",\r\n                    args: [code]\r\n                };\r\n                reason = `Panic due to ${PanicReasons.get(code) || \"UNKNOWN\"}(${code})`;\r\n                message += `: ${reason}`;\r\n            }\r\n            catch (error) {\r\n                message += \" (could not decode panic code)\";\r\n            }\r\n        }\r\n        else {\r\n            message += \" (unknown custom error)\";\r\n        }\r\n    }\r\n    const transaction = {\r\n        to: (tx.to ? (0,_address_index_js__WEBPACK_IMPORTED_MODULE_1__.getAddress)(tx.to) : null),\r\n        data: (tx.data || \"0x\")\r\n    };\r\n    if (tx.from) {\r\n        transaction.from = (0,_address_index_js__WEBPACK_IMPORTED_MODULE_1__.getAddress)(tx.from);\r\n    }\r\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.makeError)(message, \"CALL_EXCEPTION\", {\r\n        action, data, reason, transaction, invocation, revert\r\n    });\r\n}\r\n/**\r\n *  The **AbiCoder** is a low-level class responsible for encoding JavaScript\r\n *  values into binary data and decoding binary data into JavaScript values.\r\n */\r\nclass AbiCoder {\r\n    #getCoder(param) {\r\n        if (param.isArray()) {\r\n            return new _coders_array_js__WEBPACK_IMPORTED_MODULE_2__.ArrayCoder(this.#getCoder(param.arrayChildren), param.arrayLength, param.name);\r\n        }\r\n        if (param.isTuple()) {\r\n            return new _coders_tuple_js__WEBPACK_IMPORTED_MODULE_3__.TupleCoder(param.components.map((c) => this.#getCoder(c)), param.name);\r\n        }\r\n        switch (param.baseType) {\r\n            case \"address\":\r\n                return new _coders_address_js__WEBPACK_IMPORTED_MODULE_4__.AddressCoder(param.name);\r\n            case \"bool\":\r\n                return new _coders_boolean_js__WEBPACK_IMPORTED_MODULE_5__.BooleanCoder(param.name);\r\n            case \"string\":\r\n                return new _coders_string_js__WEBPACK_IMPORTED_MODULE_6__.StringCoder(param.name);\r\n            case \"bytes\":\r\n                return new _coders_bytes_js__WEBPACK_IMPORTED_MODULE_7__.BytesCoder(param.name);\r\n            case \"\":\r\n                return new _coders_null_js__WEBPACK_IMPORTED_MODULE_8__.NullCoder(param.name);\r\n        }\r\n        // u?int[0-9]*\r\n        let match = param.type.match(paramTypeNumber);\r\n        if (match) {\r\n            let size = parseInt(match[2] || \"256\");\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(size !== 0 && size <= 256 && (size % 8) === 0, \"invalid \" + match[1] + \" bit length\", \"param\", param);\r\n            return new _coders_number_js__WEBPACK_IMPORTED_MODULE_9__.NumberCoder(size / 8, (match[1] === \"int\"), param.name);\r\n        }\r\n        // bytes[0-9]+\r\n        match = param.type.match(paramTypeBytes);\r\n        if (match) {\r\n            let size = parseInt(match[1]);\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(size !== 0 && size <= 32, \"invalid bytes length\", \"param\", param);\r\n            return new _coders_fixed_bytes_js__WEBPACK_IMPORTED_MODULE_10__.FixedBytesCoder(size, param.name);\r\n        }\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"invalid type\", \"type\", param.type);\r\n    }\r\n    /**\r\n     *  Get the default values for the given %%types%%.\r\n     *\r\n     *  For example, a ``uint`` is by default ``0`` and ``bool``\r\n     *  is by default ``false``.\r\n     */\r\n    getDefaultValue(types) {\r\n        const coders = types.map((type) => this.#getCoder(_fragments_js__WEBPACK_IMPORTED_MODULE_11__.ParamType.from(type)));\r\n        const coder = new _coders_tuple_js__WEBPACK_IMPORTED_MODULE_3__.TupleCoder(coders, \"_\");\r\n        return coder.defaultValue();\r\n    }\r\n    /**\r\n     *  Encode the %%values%% as the %%types%% into ABI data.\r\n     *\r\n     *  @returns DataHexstring\r\n     */\r\n    encode(types, values) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgumentCount)(values.length, types.length, \"types/values length mismatch\");\r\n        const coders = types.map((type) => this.#getCoder(_fragments_js__WEBPACK_IMPORTED_MODULE_11__.ParamType.from(type)));\r\n        const coder = (new _coders_tuple_js__WEBPACK_IMPORTED_MODULE_3__.TupleCoder(coders, \"_\"));\r\n        const writer = new _coders_abstract_coder_js__WEBPACK_IMPORTED_MODULE_12__.Writer();\r\n        coder.encode(writer, values);\r\n        return writer.data;\r\n    }\r\n    /**\r\n     *  Decode the ABI %%data%% as the %%types%% into values.\r\n     *\r\n     *  If %%loose%% decoding is enabled, then strict padding is\r\n     *  not enforced. Some older versions of Solidity incorrectly\r\n     *  padded event data emitted from ``external`` functions.\r\n     */\r\n    decode(types, data, loose) {\r\n        const coders = types.map((type) => this.#getCoder(_fragments_js__WEBPACK_IMPORTED_MODULE_11__.ParamType.from(type)));\r\n        const coder = new _coders_tuple_js__WEBPACK_IMPORTED_MODULE_3__.TupleCoder(coders, \"_\");\r\n        return coder.decode(new _coders_abstract_coder_js__WEBPACK_IMPORTED_MODULE_12__.Reader(data, loose, defaultMaxInflation));\r\n    }\r\n    static _setDefaultMaxInflation(value) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(typeof (value) === \"number\" && Number.isInteger(value), \"invalid defaultMaxInflation factor\", \"value\", value);\r\n        defaultMaxInflation = value;\r\n    }\r\n    /**\r\n     *  Returns the shared singleton instance of a default [[AbiCoder]].\r\n     *\r\n     *  On the first call, the instance is created internally.\r\n     */\r\n    static defaultAbiCoder() {\r\n        if (defaultCoder == null) {\r\n            defaultCoder = new AbiCoder();\r\n        }\r\n        return defaultCoder;\r\n    }\r\n    /**\r\n     *  Returns an ethers-compatible [[CallExceptionError]] Error for the given\r\n     *  result %%data%% for the [[CallExceptionAction]] %%action%% against\r\n     *  the Transaction %%tx%%.\r\n     */\r\n    static getBuiltinCallException(action, tx, data) {\r\n        return getBuiltinCallException(action, tx, data, AbiCoder.defaultAbiCoder());\r\n    }\r\n}\r\n//# sourceMappingURL=abi-coder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/abi-coder.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/bytes32.js":
/*!****************************************************!*\
  !*** ./node_modules/ethers/lib.esm/abi/bytes32.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeBytes32String: () => (/* binding */ decodeBytes32String),\n/* harmony export */   encodeBytes32String: () => (/* binding */ encodeBytes32String)\n/* harmony export */ });\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/**\r\n *  About bytes32 strings...\r\n *\r\n *  @_docloc: api/utils:Bytes32 Strings\r\n */\r\n\r\n/**\r\n *  Encodes %%text%% as a Bytes32 string.\r\n */\r\nfunction encodeBytes32String(text) {\r\n    // Get the bytes\r\n    const bytes = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toUtf8Bytes)(text);\r\n    // Check we have room for null-termination\r\n    if (bytes.length > 31) {\r\n        throw new Error(\"bytes32 string must be less than 32 bytes\");\r\n    }\r\n    // Zero-pad (implicitly null-terminates)\r\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.zeroPadBytes)(bytes, 32);\r\n}\r\n/**\r\n *  Encodes the Bytes32-encoded %%bytes%% into a string.\r\n */\r\nfunction decodeBytes32String(_bytes) {\r\n    const data = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(_bytes, \"bytes\");\r\n    // Must be 32 bytes with a null-termination\r\n    if (data.length !== 32) {\r\n        throw new Error(\"invalid bytes32 - not 32 bytes long\");\r\n    }\r\n    if (data[31] !== 0) {\r\n        throw new Error(\"invalid bytes32 string - no null terminator\");\r\n    }\r\n    // Find the null termination\r\n    let length = 31;\r\n    while (data[length - 1] === 0) {\r\n        length--;\r\n    }\r\n    // Determine the string value\r\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toUtf8String)(data.slice(0, length));\r\n}\r\n//# sourceMappingURL=bytes32.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9hYmkvYnl0ZXMzMi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3NGO0FBQ3RGO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSxrQkFBa0IsNERBQVc7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsNkRBQVk7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLGlCQUFpQix5REFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsNkRBQVk7QUFDdkI7QUFDQSIsInNvdXJjZXMiOlsiRDpcXERvX2FuMlxcbGVuZGh1Yl92MlxcbGVuZGh1Yi1mcm9udGVuZC1uZXh0anNcXG5vZGVfbW9kdWxlc1xcZXRoZXJzXFxsaWIuZXNtXFxhYmlcXGJ5dGVzMzIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqICBBYm91dCBieXRlczMyIHN0cmluZ3MuLi5cclxuICpcclxuICogIEBfZG9jbG9jOiBhcGkvdXRpbHM6Qnl0ZXMzMiBTdHJpbmdzXHJcbiAqL1xyXG5pbXBvcnQgeyBnZXRCeXRlcywgdG9VdGY4Qnl0ZXMsIHRvVXRmOFN0cmluZywgemVyb1BhZEJ5dGVzIH0gZnJvbSBcIi4uL3V0aWxzL2luZGV4LmpzXCI7XHJcbi8qKlxyXG4gKiAgRW5jb2RlcyAlJXRleHQlJSBhcyBhIEJ5dGVzMzIgc3RyaW5nLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZUJ5dGVzMzJTdHJpbmcodGV4dCkge1xyXG4gICAgLy8gR2V0IHRoZSBieXRlc1xyXG4gICAgY29uc3QgYnl0ZXMgPSB0b1V0ZjhCeXRlcyh0ZXh0KTtcclxuICAgIC8vIENoZWNrIHdlIGhhdmUgcm9vbSBmb3IgbnVsbC10ZXJtaW5hdGlvblxyXG4gICAgaWYgKGJ5dGVzLmxlbmd0aCA+IDMxKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYnl0ZXMzMiBzdHJpbmcgbXVzdCBiZSBsZXNzIHRoYW4gMzIgYnl0ZXNcIik7XHJcbiAgICB9XHJcbiAgICAvLyBaZXJvLXBhZCAoaW1wbGljaXRseSBudWxsLXRlcm1pbmF0ZXMpXHJcbiAgICByZXR1cm4gemVyb1BhZEJ5dGVzKGJ5dGVzLCAzMik7XHJcbn1cclxuLyoqXHJcbiAqICBFbmNvZGVzIHRoZSBCeXRlczMyLWVuY29kZWQgJSVieXRlcyUlIGludG8gYSBzdHJpbmcuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlQnl0ZXMzMlN0cmluZyhfYnl0ZXMpIHtcclxuICAgIGNvbnN0IGRhdGEgPSBnZXRCeXRlcyhfYnl0ZXMsIFwiYnl0ZXNcIik7XHJcbiAgICAvLyBNdXN0IGJlIDMyIGJ5dGVzIHdpdGggYSBudWxsLXRlcm1pbmF0aW9uXHJcbiAgICBpZiAoZGF0YS5sZW5ndGggIT09IDMyKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBieXRlczMyIC0gbm90IDMyIGJ5dGVzIGxvbmdcIik7XHJcbiAgICB9XHJcbiAgICBpZiAoZGF0YVszMV0gIT09IDApIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGJ5dGVzMzIgc3RyaW5nIC0gbm8gbnVsbCB0ZXJtaW5hdG9yXCIpO1xyXG4gICAgfVxyXG4gICAgLy8gRmluZCB0aGUgbnVsbCB0ZXJtaW5hdGlvblxyXG4gICAgbGV0IGxlbmd0aCA9IDMxO1xyXG4gICAgd2hpbGUgKGRhdGFbbGVuZ3RoIC0gMV0gPT09IDApIHtcclxuICAgICAgICBsZW5ndGgtLTtcclxuICAgIH1cclxuICAgIC8vIERldGVybWluZSB0aGUgc3RyaW5nIHZhbHVlXHJcbiAgICByZXR1cm4gdG9VdGY4U3RyaW5nKGRhdGEuc2xpY2UoMCwgbGVuZ3RoKSk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Ynl0ZXMzMi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/bytes32.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/coders/abstract-coder.js":
/*!******************************************************************!*\
  !*** ./node_modules/ethers/lib.esm/abi/coders/abstract-coder.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Coder: () => (/* binding */ Coder),\n/* harmony export */   Reader: () => (/* binding */ Reader),\n/* harmony export */   Result: () => (/* binding */ Result),\n/* harmony export */   WordSize: () => (/* binding */ WordSize),\n/* harmony export */   Writer: () => (/* binding */ Writer),\n/* harmony export */   checkResultErrors: () => (/* binding */ checkResultErrors)\n/* harmony export */ });\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n\r\n/**\r\n * @_ignore:\r\n */\r\nconst WordSize = 32;\r\nconst Padding = new Uint8Array(WordSize);\r\n// Properties used to immediate pass through to the underlying object\r\n// - `then` is used to detect if an object is a Promise for await\r\nconst passProperties = [\"then\"];\r\nconst _guard = {};\r\nconst resultNames = new WeakMap();\r\nfunction getNames(result) {\r\n    return resultNames.get(result);\r\n}\r\nfunction setNames(result, names) {\r\n    resultNames.set(result, names);\r\n}\r\nfunction throwError(name, error) {\r\n    const wrapped = new Error(`deferred error during ABI decoding triggered accessing ${name}`);\r\n    wrapped.error = error;\r\n    throw wrapped;\r\n}\r\nfunction toObject(names, items, deep) {\r\n    if (names.indexOf(null) >= 0) {\r\n        return items.map((item, index) => {\r\n            if (item instanceof Result) {\r\n                return toObject(getNames(item), item, deep);\r\n            }\r\n            return item;\r\n        });\r\n    }\r\n    return names.reduce((accum, name, index) => {\r\n        let item = items.getValue(name);\r\n        if (!(name in accum)) {\r\n            if (deep && item instanceof Result) {\r\n                item = toObject(getNames(item), item, deep);\r\n            }\r\n            accum[name] = item;\r\n        }\r\n        return accum;\r\n    }, {});\r\n}\r\n/**\r\n *  A [[Result]] is a sub-class of Array, which allows accessing any\r\n *  of its values either positionally by its index or, if keys are\r\n *  provided by its name.\r\n *\r\n *  @_docloc: api/abi\r\n */\r\nclass Result extends Array {\r\n    // No longer used; but cannot be removed as it will remove the\r\n    // #private field from the .d.ts which may break backwards\r\n    // compatibility\r\n    #names;\r\n    /**\r\n     *  @private\r\n     */\r\n    constructor(...args) {\r\n        // To properly sub-class Array so the other built-in\r\n        // functions work, the constructor has to behave fairly\r\n        // well. So, in the event we are created via fromItems()\r\n        // we build the read-only Result object we want, but on\r\n        // any other input, we use the default constructor\r\n        // constructor(guard: any, items: Array<any>, keys?: Array<null | string>);\r\n        const guard = args[0];\r\n        let items = args[1];\r\n        let names = (args[2] || []).slice();\r\n        let wrap = true;\r\n        if (guard !== _guard) {\r\n            items = args;\r\n            names = [];\r\n            wrap = false;\r\n        }\r\n        // Can't just pass in ...items since an array of length 1\r\n        // is a special case in the super.\r\n        super(items.length);\r\n        items.forEach((item, index) => { this[index] = item; });\r\n        // Find all unique keys\r\n        const nameCounts = names.reduce((accum, name) => {\r\n            if (typeof (name) === \"string\") {\r\n                accum.set(name, (accum.get(name) || 0) + 1);\r\n            }\r\n            return accum;\r\n        }, (new Map()));\r\n        // Remove any key thats not unique\r\n        setNames(this, Object.freeze(items.map((item, index) => {\r\n            const name = names[index];\r\n            if (name != null && nameCounts.get(name) === 1) {\r\n                return name;\r\n            }\r\n            return null;\r\n        })));\r\n        // Dummy operations to prevent TypeScript from complaining\r\n        this.#names = [];\r\n        if (this.#names == null) {\r\n            void (this.#names);\r\n        }\r\n        if (!wrap) {\r\n            return;\r\n        }\r\n        // A wrapped Result is immutable\r\n        Object.freeze(this);\r\n        // Proxy indices and names so we can trap deferred errors\r\n        const proxy = new Proxy(this, {\r\n            get: (target, prop, receiver) => {\r\n                if (typeof (prop) === \"string\") {\r\n                    // Index accessor\r\n                    if (prop.match(/^[0-9]+$/)) {\r\n                        const index = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getNumber)(prop, \"%index\");\r\n                        if (index < 0 || index >= this.length) {\r\n                            throw new RangeError(\"out of result range\");\r\n                        }\r\n                        const item = target[index];\r\n                        if (item instanceof Error) {\r\n                            throwError(`index ${index}`, item);\r\n                        }\r\n                        return item;\r\n                    }\r\n                    // Pass important checks (like `then` for Promise) through\r\n                    if (passProperties.indexOf(prop) >= 0) {\r\n                        return Reflect.get(target, prop, receiver);\r\n                    }\r\n                    const value = target[prop];\r\n                    if (value instanceof Function) {\r\n                        // Make sure functions work with private variables\r\n                        // See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#no_private_property_forwarding\r\n                        return function (...args) {\r\n                            return value.apply((this === receiver) ? target : this, args);\r\n                        };\r\n                    }\r\n                    else if (!(prop in target)) {\r\n                        // Possible name accessor\r\n                        return target.getValue.apply((this === receiver) ? target : this, [prop]);\r\n                    }\r\n                }\r\n                return Reflect.get(target, prop, receiver);\r\n            }\r\n        });\r\n        setNames(proxy, getNames(this));\r\n        return proxy;\r\n    }\r\n    /**\r\n     *  Returns the Result as a normal Array. If %%deep%%, any children\r\n     *  which are Result objects are also converted to a normal Array.\r\n     *\r\n     *  This will throw if there are any outstanding deferred\r\n     *  errors.\r\n     */\r\n    toArray(deep) {\r\n        const result = [];\r\n        this.forEach((item, index) => {\r\n            if (item instanceof Error) {\r\n                throwError(`index ${index}`, item);\r\n            }\r\n            if (deep && item instanceof Result) {\r\n                item = item.toArray(deep);\r\n            }\r\n            result.push(item);\r\n        });\r\n        return result;\r\n    }\r\n    /**\r\n     *  Returns the Result as an Object with each name-value pair. If\r\n     *  %%deep%%, any children which are Result objects are also\r\n     *  converted to an Object.\r\n     *\r\n     *  This will throw if any value is unnamed, or if there are\r\n     *  any outstanding deferred errors.\r\n     */\r\n    toObject(deep) {\r\n        const names = getNames(this);\r\n        return names.reduce((accum, name, index) => {\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(name != null, `value at index ${index} unnamed`, \"UNSUPPORTED_OPERATION\", {\r\n                operation: \"toObject()\"\r\n            });\r\n            return toObject(names, this, deep);\r\n        }, {});\r\n    }\r\n    /**\r\n     *  @_ignore\r\n     */\r\n    slice(start, end) {\r\n        if (start == null) {\r\n            start = 0;\r\n        }\r\n        if (start < 0) {\r\n            start += this.length;\r\n            if (start < 0) {\r\n                start = 0;\r\n            }\r\n        }\r\n        if (end == null) {\r\n            end = this.length;\r\n        }\r\n        if (end < 0) {\r\n            end += this.length;\r\n            if (end < 0) {\r\n                end = 0;\r\n            }\r\n        }\r\n        if (end > this.length) {\r\n            end = this.length;\r\n        }\r\n        const _names = getNames(this);\r\n        const result = [], names = [];\r\n        for (let i = start; i < end; i++) {\r\n            result.push(this[i]);\r\n            names.push(_names[i]);\r\n        }\r\n        return new Result(_guard, result, names);\r\n    }\r\n    /**\r\n     *  @_ignore\r\n     */\r\n    filter(callback, thisArg) {\r\n        const _names = getNames(this);\r\n        const result = [], names = [];\r\n        for (let i = 0; i < this.length; i++) {\r\n            const item = this[i];\r\n            if (item instanceof Error) {\r\n                throwError(`index ${i}`, item);\r\n            }\r\n            if (callback.call(thisArg, item, i, this)) {\r\n                result.push(item);\r\n                names.push(_names[i]);\r\n            }\r\n        }\r\n        return new Result(_guard, result, names);\r\n    }\r\n    /**\r\n     *  @_ignore\r\n     */\r\n    map(callback, thisArg) {\r\n        const result = [];\r\n        for (let i = 0; i < this.length; i++) {\r\n            const item = this[i];\r\n            if (item instanceof Error) {\r\n                throwError(`index ${i}`, item);\r\n            }\r\n            result.push(callback.call(thisArg, item, i, this));\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     *  Returns the value for %%name%%.\r\n     *\r\n     *  Since it is possible to have a key whose name conflicts with\r\n     *  a method on a [[Result]] or its superclass Array, or any\r\n     *  JavaScript keyword, this ensures all named values are still\r\n     *  accessible by name.\r\n     */\r\n    getValue(name) {\r\n        const index = getNames(this).indexOf(name);\r\n        if (index === -1) {\r\n            return undefined;\r\n        }\r\n        const value = this[index];\r\n        if (value instanceof Error) {\r\n            throwError(`property ${JSON.stringify(name)}`, value.error);\r\n        }\r\n        return value;\r\n    }\r\n    /**\r\n     *  Creates a new [[Result]] for %%items%% with each entry\r\n     *  also accessible by its corresponding name in %%keys%%.\r\n     */\r\n    static fromItems(items, keys) {\r\n        return new Result(_guard, items, keys);\r\n    }\r\n}\r\n/**\r\n *  Returns all errors found in a [[Result]].\r\n *\r\n *  Since certain errors encountered when creating a [[Result]] do\r\n *  not impact the ability to continue parsing data, they are\r\n *  deferred until they are actually accessed. Hence a faulty string\r\n *  in an Event that is never used does not impact the program flow.\r\n *\r\n *  However, sometimes it may be useful to access, identify or\r\n *  validate correctness of a [[Result]].\r\n *\r\n *  @_docloc api/abi\r\n */\r\nfunction checkResultErrors(result) {\r\n    // Find the first error (if any)\r\n    const errors = [];\r\n    const checkErrors = function (path, object) {\r\n        if (!Array.isArray(object)) {\r\n            return;\r\n        }\r\n        for (let key in object) {\r\n            const childPath = path.slice();\r\n            childPath.push(key);\r\n            try {\r\n                checkErrors(childPath, object[key]);\r\n            }\r\n            catch (error) {\r\n                errors.push({ path: childPath, error: error });\r\n            }\r\n        }\r\n    };\r\n    checkErrors([], result);\r\n    return errors;\r\n}\r\nfunction getValue(value) {\r\n    let bytes = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toBeArray)(value);\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(bytes.length <= WordSize, \"value out-of-bounds\", \"BUFFER_OVERRUN\", { buffer: bytes, length: WordSize, offset: bytes.length });\r\n    if (bytes.length !== WordSize) {\r\n        bytes = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytesCopy)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.concat)([Padding.slice(bytes.length % WordSize), bytes]));\r\n    }\r\n    return bytes;\r\n}\r\n/**\r\n *  @_ignore\r\n */\r\nclass Coder {\r\n    // The coder name:\r\n    //   - address, uint256, tuple, array, etc.\r\n    name;\r\n    // The fully expanded type, including composite types:\r\n    //   - address, uint256, tuple(address,bytes), uint256[3][4][],  etc.\r\n    type;\r\n    // The localName bound in the signature, in this example it is \"baz\":\r\n    //   - tuple(address foo, uint bar) baz\r\n    localName;\r\n    // Whether this type is dynamic:\r\n    //  - Dynamic: bytes, string, address[], tuple(boolean[]), etc.\r\n    //  - Not Dynamic: address, uint256, boolean[3], tuple(address, uint8)\r\n    dynamic;\r\n    constructor(name, type, localName, dynamic) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, { name, type, localName, dynamic }, {\r\n            name: \"string\", type: \"string\", localName: \"string\", dynamic: \"boolean\"\r\n        });\r\n    }\r\n    _throwError(message, value) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, message, this.localName, value);\r\n    }\r\n}\r\n/**\r\n *  @_ignore\r\n */\r\nclass Writer {\r\n    // An array of WordSize lengthed objects to concatenation\r\n    #data;\r\n    #dataLength;\r\n    constructor() {\r\n        this.#data = [];\r\n        this.#dataLength = 0;\r\n    }\r\n    get data() {\r\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.concat)(this.#data);\r\n    }\r\n    get length() { return this.#dataLength; }\r\n    #writeData(data) {\r\n        this.#data.push(data);\r\n        this.#dataLength += data.length;\r\n        return data.length;\r\n    }\r\n    appendWriter(writer) {\r\n        return this.#writeData((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytesCopy)(writer.data));\r\n    }\r\n    // Arrayish item; pad on the right to *nearest* WordSize\r\n    writeBytes(value) {\r\n        let bytes = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytesCopy)(value);\r\n        const paddingOffset = bytes.length % WordSize;\r\n        if (paddingOffset) {\r\n            bytes = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytesCopy)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.concat)([bytes, Padding.slice(paddingOffset)]));\r\n        }\r\n        return this.#writeData(bytes);\r\n    }\r\n    // Numeric item; pad on the left *to* WordSize\r\n    writeValue(value) {\r\n        return this.#writeData(getValue(value));\r\n    }\r\n    // Inserts a numeric place-holder, returning a callback that can\r\n    // be used to asjust the value later\r\n    writeUpdatableValue() {\r\n        const offset = this.#data.length;\r\n        this.#data.push(Padding);\r\n        this.#dataLength += WordSize;\r\n        return (value) => {\r\n            this.#data[offset] = getValue(value);\r\n        };\r\n    }\r\n}\r\n/**\r\n *  @_ignore\r\n */\r\nclass Reader {\r\n    // Allows incomplete unpadded data to be read; otherwise an error\r\n    // is raised if attempting to overrun the buffer. This is required\r\n    // to deal with an old Solidity bug, in which event data for\r\n    // external (not public thoguh) was tightly packed.\r\n    allowLoose;\r\n    #data;\r\n    #offset;\r\n    #bytesRead;\r\n    #parent;\r\n    #maxInflation;\r\n    constructor(data, allowLoose, maxInflation) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, { allowLoose: !!allowLoose });\r\n        this.#data = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytesCopy)(data);\r\n        this.#bytesRead = 0;\r\n        this.#parent = null;\r\n        this.#maxInflation = (maxInflation != null) ? maxInflation : 1024;\r\n        this.#offset = 0;\r\n    }\r\n    get data() { return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(this.#data); }\r\n    get dataLength() { return this.#data.length; }\r\n    get consumed() { return this.#offset; }\r\n    get bytes() { return new Uint8Array(this.#data); }\r\n    #incrementBytesRead(count) {\r\n        if (this.#parent) {\r\n            return this.#parent.#incrementBytesRead(count);\r\n        }\r\n        this.#bytesRead += count;\r\n        // Check for excessive inflation (see: #4537)\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(this.#maxInflation < 1 || this.#bytesRead <= this.#maxInflation * this.dataLength, `compressed ABI data exceeds inflation ratio of ${this.#maxInflation} ( see: https:/\\/github.com/ethers-io/ethers.js/issues/4537 )`, \"BUFFER_OVERRUN\", {\r\n            buffer: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytesCopy)(this.#data), offset: this.#offset,\r\n            length: count, info: {\r\n                bytesRead: this.#bytesRead,\r\n                dataLength: this.dataLength\r\n            }\r\n        });\r\n    }\r\n    #peekBytes(offset, length, loose) {\r\n        let alignedLength = Math.ceil(length / WordSize) * WordSize;\r\n        if (this.#offset + alignedLength > this.#data.length) {\r\n            if (this.allowLoose && loose && this.#offset + length <= this.#data.length) {\r\n                alignedLength = length;\r\n            }\r\n            else {\r\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(false, \"data out-of-bounds\", \"BUFFER_OVERRUN\", {\r\n                    buffer: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytesCopy)(this.#data),\r\n                    length: this.#data.length,\r\n                    offset: this.#offset + alignedLength\r\n                });\r\n            }\r\n        }\r\n        return this.#data.slice(this.#offset, this.#offset + alignedLength);\r\n    }\r\n    // Create a sub-reader with the same underlying data, but offset\r\n    subReader(offset) {\r\n        const reader = new Reader(this.#data.slice(this.#offset + offset), this.allowLoose, this.#maxInflation);\r\n        reader.#parent = this;\r\n        return reader;\r\n    }\r\n    // Read bytes\r\n    readBytes(length, loose) {\r\n        let bytes = this.#peekBytes(0, length, !!loose);\r\n        this.#incrementBytesRead(length);\r\n        this.#offset += bytes.length;\r\n        // @TODO: Make sure the length..end bytes are all 0?\r\n        return bytes.slice(0, length);\r\n    }\r\n    // Read a numeric values\r\n    readValue() {\r\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toBigInt)(this.readBytes(WordSize));\r\n    }\r\n    readIndex() {\r\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toNumber)(this.readBytes(WordSize));\r\n    }\r\n}\r\n//# sourceMappingURL=abstract-coder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/coders/abstract-coder.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/coders/address.js":
/*!***********************************************************!*\
  !*** ./node_modules/ethers/lib.esm/abi/coders/address.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AddressCoder: () => (/* binding */ AddressCoder)\n/* harmony export */ });\n/* harmony import */ var _address_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../address/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/address/index.js\");\n/* harmony import */ var _utils_maths_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/maths.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/maths.js\");\n/* harmony import */ var _typed_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../typed.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/typed.js\");\n/* harmony import */ var _abstract_coder_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract-coder.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/coders/abstract-coder.js\");\n\r\n\r\n\r\n\r\n/**\r\n *  @_ignore\r\n */\r\nclass AddressCoder extends _abstract_coder_js__WEBPACK_IMPORTED_MODULE_0__.Coder {\r\n    constructor(localName) {\r\n        super(\"address\", \"address\", localName, false);\r\n    }\r\n    defaultValue() {\r\n        return \"0x0000000000000000000000000000000000000000\";\r\n    }\r\n    encode(writer, _value) {\r\n        let value = _typed_js__WEBPACK_IMPORTED_MODULE_1__.Typed.dereference(_value, \"string\");\r\n        try {\r\n            value = (0,_address_index_js__WEBPACK_IMPORTED_MODULE_2__.getAddress)(value);\r\n        }\r\n        catch (error) {\r\n            return this._throwError(error.message, _value);\r\n        }\r\n        return writer.writeValue(value);\r\n    }\r\n    decode(reader) {\r\n        return (0,_address_index_js__WEBPACK_IMPORTED_MODULE_2__.getAddress)((0,_utils_maths_js__WEBPACK_IMPORTED_MODULE_3__.toBeHex)(reader.readValue(), 20));\r\n    }\r\n}\r\n//# sourceMappingURL=address.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9hYmkvY29kZXJzL2FkZHJlc3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBb0Q7QUFDTDtBQUNYO0FBQ1E7QUFDNUM7QUFDQTtBQUNBO0FBQ08sMkJBQTJCLHFEQUFLO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLDRDQUFLO0FBQ3pCO0FBQ0Esb0JBQW9CLDZEQUFVO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSw2REFBVSxDQUFDLHdEQUFPO0FBQ2pDO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiRDpcXERvX2FuMlxcbGVuZGh1Yl92MlxcbGVuZGh1Yi1mcm9udGVuZC1uZXh0anNcXG5vZGVfbW9kdWxlc1xcZXRoZXJzXFxsaWIuZXNtXFxhYmlcXGNvZGVyc1xcYWRkcmVzcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRBZGRyZXNzIH0gZnJvbSBcIi4uLy4uL2FkZHJlc3MvaW5kZXguanNcIjtcclxuaW1wb3J0IHsgdG9CZUhleCB9IGZyb20gXCIuLi8uLi91dGlscy9tYXRocy5qc1wiO1xyXG5pbXBvcnQgeyBUeXBlZCB9IGZyb20gXCIuLi90eXBlZC5qc1wiO1xyXG5pbXBvcnQgeyBDb2RlciB9IGZyb20gXCIuL2Fic3RyYWN0LWNvZGVyLmpzXCI7XHJcbi8qKlxyXG4gKiAgQF9pZ25vcmVcclxuICovXHJcbmV4cG9ydCBjbGFzcyBBZGRyZXNzQ29kZXIgZXh0ZW5kcyBDb2RlciB7XHJcbiAgICBjb25zdHJ1Y3Rvcihsb2NhbE5hbWUpIHtcclxuICAgICAgICBzdXBlcihcImFkZHJlc3NcIiwgXCJhZGRyZXNzXCIsIGxvY2FsTmFtZSwgZmFsc2UpO1xyXG4gICAgfVxyXG4gICAgZGVmYXVsdFZhbHVlKCkge1xyXG4gICAgICAgIHJldHVybiBcIjB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiO1xyXG4gICAgfVxyXG4gICAgZW5jb2RlKHdyaXRlciwgX3ZhbHVlKSB7XHJcbiAgICAgICAgbGV0IHZhbHVlID0gVHlwZWQuZGVyZWZlcmVuY2UoX3ZhbHVlLCBcInN0cmluZ1wiKTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICB2YWx1ZSA9IGdldEFkZHJlc3ModmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Rocm93RXJyb3IoZXJyb3IubWVzc2FnZSwgX3ZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHdyaXRlci53cml0ZVZhbHVlKHZhbHVlKTtcclxuICAgIH1cclxuICAgIGRlY29kZShyZWFkZXIpIHtcclxuICAgICAgICByZXR1cm4gZ2V0QWRkcmVzcyh0b0JlSGV4KHJlYWRlci5yZWFkVmFsdWUoKSwgMjApKTtcclxuICAgIH1cclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hZGRyZXNzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/coders/address.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/coders/anonymous.js":
/*!*************************************************************!*\
  !*** ./node_modules/ethers/lib.esm/abi/coders/anonymous.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnonymousCoder: () => (/* binding */ AnonymousCoder)\n/* harmony export */ });\n/* harmony import */ var _abstract_coder_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract-coder.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/coders/abstract-coder.js\");\n\r\n/**\r\n *  Clones the functionality of an existing Coder, but without a localName\r\n *\r\n *  @_ignore\r\n */\r\nclass AnonymousCoder extends _abstract_coder_js__WEBPACK_IMPORTED_MODULE_0__.Coder {\r\n    coder;\r\n    constructor(coder) {\r\n        super(coder.name, coder.type, \"_\", coder.dynamic);\r\n        this.coder = coder;\r\n    }\r\n    defaultValue() {\r\n        return this.coder.defaultValue();\r\n    }\r\n    encode(writer, value) {\r\n        return this.coder.encode(writer, value);\r\n    }\r\n    decode(reader) {\r\n        return this.coder.decode(reader);\r\n    }\r\n}\r\n//# sourceMappingURL=anonymous.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9hYmkvY29kZXJzL2Fub255bW91cy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sNkJBQTZCLHFEQUFLO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJEOlxcRG9fYW4yXFxsZW5kaHViX3YyXFxsZW5kaHViLWZyb250ZW5kLW5leHRqc1xcbm9kZV9tb2R1bGVzXFxldGhlcnNcXGxpYi5lc21cXGFiaVxcY29kZXJzXFxhbm9ueW1vdXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29kZXIgfSBmcm9tIFwiLi9hYnN0cmFjdC1jb2Rlci5qc1wiO1xyXG4vKipcclxuICogIENsb25lcyB0aGUgZnVuY3Rpb25hbGl0eSBvZiBhbiBleGlzdGluZyBDb2RlciwgYnV0IHdpdGhvdXQgYSBsb2NhbE5hbWVcclxuICpcclxuICogIEBfaWdub3JlXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQW5vbnltb3VzQ29kZXIgZXh0ZW5kcyBDb2RlciB7XHJcbiAgICBjb2RlcjtcclxuICAgIGNvbnN0cnVjdG9yKGNvZGVyKSB7XHJcbiAgICAgICAgc3VwZXIoY29kZXIubmFtZSwgY29kZXIudHlwZSwgXCJfXCIsIGNvZGVyLmR5bmFtaWMpO1xyXG4gICAgICAgIHRoaXMuY29kZXIgPSBjb2RlcjtcclxuICAgIH1cclxuICAgIGRlZmF1bHRWYWx1ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb2Rlci5kZWZhdWx0VmFsdWUoKTtcclxuICAgIH1cclxuICAgIGVuY29kZSh3cml0ZXIsIHZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29kZXIuZW5jb2RlKHdyaXRlciwgdmFsdWUpO1xyXG4gICAgfVxyXG4gICAgZGVjb2RlKHJlYWRlcikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvZGVyLmRlY29kZShyZWFkZXIpO1xyXG4gICAgfVxyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFub255bW91cy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/coders/anonymous.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/coders/array.js":
/*!*********************************************************!*\
  !*** ./node_modules/ethers/lib.esm/abi/coders/array.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ArrayCoder: () => (/* binding */ ArrayCoder),\n/* harmony export */   pack: () => (/* binding */ pack),\n/* harmony export */   unpack: () => (/* binding */ unpack)\n/* harmony export */ });\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/* harmony import */ var _typed_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../typed.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/typed.js\");\n/* harmony import */ var _abstract_coder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./abstract-coder.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/coders/abstract-coder.js\");\n/* harmony import */ var _anonymous_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./anonymous.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/coders/anonymous.js\");\n\r\n\r\n\r\n\r\n/**\r\n *  @_ignore\r\n */\r\nfunction pack(writer, coders, values) {\r\n    let arrayValues = [];\r\n    if (Array.isArray(values)) {\r\n        arrayValues = values;\r\n    }\r\n    else if (values && typeof (values) === \"object\") {\r\n        let unique = {};\r\n        arrayValues = coders.map((coder) => {\r\n            const name = coder.localName;\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(name, \"cannot encode object for signature with missing names\", \"INVALID_ARGUMENT\", { argument: \"values\", info: { coder }, value: values });\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(!unique[name], \"cannot encode object for signature with duplicate names\", \"INVALID_ARGUMENT\", { argument: \"values\", info: { coder }, value: values });\r\n            unique[name] = true;\r\n            return values[name];\r\n        });\r\n    }\r\n    else {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"invalid tuple value\", \"tuple\", values);\r\n    }\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(coders.length === arrayValues.length, \"types/value length mismatch\", \"tuple\", values);\r\n    let staticWriter = new _abstract_coder_js__WEBPACK_IMPORTED_MODULE_1__.Writer();\r\n    let dynamicWriter = new _abstract_coder_js__WEBPACK_IMPORTED_MODULE_1__.Writer();\r\n    let updateFuncs = [];\r\n    coders.forEach((coder, index) => {\r\n        let value = arrayValues[index];\r\n        if (coder.dynamic) {\r\n            // Get current dynamic offset (for the future pointer)\r\n            let dynamicOffset = dynamicWriter.length;\r\n            // Encode the dynamic value into the dynamicWriter\r\n            coder.encode(dynamicWriter, value);\r\n            // Prepare to populate the correct offset once we are done\r\n            let updateFunc = staticWriter.writeUpdatableValue();\r\n            updateFuncs.push((baseOffset) => {\r\n                updateFunc(baseOffset + dynamicOffset);\r\n            });\r\n        }\r\n        else {\r\n            coder.encode(staticWriter, value);\r\n        }\r\n    });\r\n    // Backfill all the dynamic offsets, now that we know the static length\r\n    updateFuncs.forEach((func) => { func(staticWriter.length); });\r\n    let length = writer.appendWriter(staticWriter);\r\n    length += writer.appendWriter(dynamicWriter);\r\n    return length;\r\n}\r\n/**\r\n *  @_ignore\r\n */\r\nfunction unpack(reader, coders) {\r\n    let values = [];\r\n    let keys = [];\r\n    // A reader anchored to this base\r\n    let baseReader = reader.subReader(0);\r\n    coders.forEach((coder) => {\r\n        let value = null;\r\n        if (coder.dynamic) {\r\n            let offset = reader.readIndex();\r\n            let offsetReader = baseReader.subReader(offset);\r\n            try {\r\n                value = coder.decode(offsetReader);\r\n            }\r\n            catch (error) {\r\n                // Cannot recover from this\r\n                if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isError)(error, \"BUFFER_OVERRUN\")) {\r\n                    throw error;\r\n                }\r\n                value = error;\r\n                value.baseType = coder.name;\r\n                value.name = coder.localName;\r\n                value.type = coder.type;\r\n            }\r\n        }\r\n        else {\r\n            try {\r\n                value = coder.decode(reader);\r\n            }\r\n            catch (error) {\r\n                // Cannot recover from this\r\n                if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isError)(error, \"BUFFER_OVERRUN\")) {\r\n                    throw error;\r\n                }\r\n                value = error;\r\n                value.baseType = coder.name;\r\n                value.name = coder.localName;\r\n                value.type = coder.type;\r\n            }\r\n        }\r\n        if (value == undefined) {\r\n            throw new Error(\"investigate\");\r\n        }\r\n        values.push(value);\r\n        keys.push(coder.localName || null);\r\n    });\r\n    return _abstract_coder_js__WEBPACK_IMPORTED_MODULE_1__.Result.fromItems(values, keys);\r\n}\r\n/**\r\n *  @_ignore\r\n */\r\nclass ArrayCoder extends _abstract_coder_js__WEBPACK_IMPORTED_MODULE_1__.Coder {\r\n    coder;\r\n    length;\r\n    constructor(coder, length, localName) {\r\n        const type = (coder.type + \"[\" + (length >= 0 ? length : \"\") + \"]\");\r\n        const dynamic = (length === -1 || coder.dynamic);\r\n        super(\"array\", type, localName, dynamic);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, { coder, length });\r\n    }\r\n    defaultValue() {\r\n        // Verifies the child coder is valid (even if the array is dynamic or 0-length)\r\n        const defaultChild = this.coder.defaultValue();\r\n        const result = [];\r\n        for (let i = 0; i < this.length; i++) {\r\n            result.push(defaultChild);\r\n        }\r\n        return result;\r\n    }\r\n    encode(writer, _value) {\r\n        const value = _typed_js__WEBPACK_IMPORTED_MODULE_2__.Typed.dereference(_value, \"array\");\r\n        if (!Array.isArray(value)) {\r\n            this._throwError(\"expected array value\", value);\r\n        }\r\n        let count = this.length;\r\n        if (count === -1) {\r\n            count = value.length;\r\n            writer.writeValue(value.length);\r\n        }\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgumentCount)(value.length, count, \"coder array\" + (this.localName ? (\" \" + this.localName) : \"\"));\r\n        let coders = [];\r\n        for (let i = 0; i < value.length; i++) {\r\n            coders.push(this.coder);\r\n        }\r\n        return pack(writer, coders, value);\r\n    }\r\n    decode(reader) {\r\n        let count = this.length;\r\n        if (count === -1) {\r\n            count = reader.readIndex();\r\n            // Check that there is *roughly* enough data to ensure\r\n            // stray random data is not being read as a length. Each\r\n            // slot requires at least 32 bytes for their value (or 32\r\n            // bytes as a link to the data). This could use a much\r\n            // tighter bound, but we are erroring on the side of safety.\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(count * _abstract_coder_js__WEBPACK_IMPORTED_MODULE_1__.WordSize <= reader.dataLength, \"insufficient data length\", \"BUFFER_OVERRUN\", { buffer: reader.bytes, offset: count * _abstract_coder_js__WEBPACK_IMPORTED_MODULE_1__.WordSize, length: reader.dataLength });\r\n        }\r\n        let coders = [];\r\n        for (let i = 0; i < count; i++) {\r\n            coders.push(new _anonymous_js__WEBPACK_IMPORTED_MODULE_3__.AnonymousCoder(this.coder));\r\n        }\r\n        return unpack(reader, coders);\r\n    }\r\n}\r\n//# sourceMappingURL=array.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/coders/array.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/coders/boolean.js":
/*!***********************************************************!*\
  !*** ./node_modules/ethers/lib.esm/abi/coders/boolean.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BooleanCoder: () => (/* binding */ BooleanCoder)\n/* harmony export */ });\n/* harmony import */ var _typed_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../typed.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/typed.js\");\n/* harmony import */ var _abstract_coder_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract-coder.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/coders/abstract-coder.js\");\n\r\n\r\n/**\r\n *  @_ignore\r\n */\r\nclass BooleanCoder extends _abstract_coder_js__WEBPACK_IMPORTED_MODULE_0__.Coder {\r\n    constructor(localName) {\r\n        super(\"bool\", \"bool\", localName, false);\r\n    }\r\n    defaultValue() {\r\n        return false;\r\n    }\r\n    encode(writer, _value) {\r\n        const value = _typed_js__WEBPACK_IMPORTED_MODULE_1__.Typed.dereference(_value, \"bool\");\r\n        return writer.writeValue(value ? 1 : 0);\r\n    }\r\n    decode(reader) {\r\n        return !!reader.readValue();\r\n    }\r\n}\r\n//# sourceMappingURL=boolean.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9hYmkvY29kZXJzL2Jvb2xlYW4uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW9DO0FBQ1E7QUFDNUM7QUFDQTtBQUNBO0FBQ08sMkJBQTJCLHFEQUFLO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLDRDQUFLO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJEOlxcRG9fYW4yXFxsZW5kaHViX3YyXFxsZW5kaHViLWZyb250ZW5kLW5leHRqc1xcbm9kZV9tb2R1bGVzXFxldGhlcnNcXGxpYi5lc21cXGFiaVxcY29kZXJzXFxib29sZWFuLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFR5cGVkIH0gZnJvbSBcIi4uL3R5cGVkLmpzXCI7XHJcbmltcG9ydCB7IENvZGVyIH0gZnJvbSBcIi4vYWJzdHJhY3QtY29kZXIuanNcIjtcclxuLyoqXHJcbiAqICBAX2lnbm9yZVxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEJvb2xlYW5Db2RlciBleHRlbmRzIENvZGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKGxvY2FsTmFtZSkge1xyXG4gICAgICAgIHN1cGVyKFwiYm9vbFwiLCBcImJvb2xcIiwgbG9jYWxOYW1lLCBmYWxzZSk7XHJcbiAgICB9XHJcbiAgICBkZWZhdWx0VmFsdWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgZW5jb2RlKHdyaXRlciwgX3ZhbHVlKSB7XHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSBUeXBlZC5kZXJlZmVyZW5jZShfdmFsdWUsIFwiYm9vbFwiKTtcclxuICAgICAgICByZXR1cm4gd3JpdGVyLndyaXRlVmFsdWUodmFsdWUgPyAxIDogMCk7XHJcbiAgICB9XHJcbiAgICBkZWNvZGUocmVhZGVyKSB7XHJcbiAgICAgICAgcmV0dXJuICEhcmVhZGVyLnJlYWRWYWx1ZSgpO1xyXG4gICAgfVxyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJvb2xlYW4uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/coders/boolean.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/coders/bytes.js":
/*!*********************************************************!*\
  !*** ./node_modules/ethers/lib.esm/abi/coders/bytes.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BytesCoder: () => (/* binding */ BytesCoder),\n/* harmony export */   DynamicBytesCoder: () => (/* binding */ DynamicBytesCoder)\n/* harmony export */ });\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/* harmony import */ var _abstract_coder_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract-coder.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/coders/abstract-coder.js\");\n\r\n\r\n/**\r\n *  @_ignore\r\n */\r\nclass DynamicBytesCoder extends _abstract_coder_js__WEBPACK_IMPORTED_MODULE_0__.Coder {\r\n    constructor(type, localName) {\r\n        super(type, type, localName, true);\r\n    }\r\n    defaultValue() {\r\n        return \"0x\";\r\n    }\r\n    encode(writer, value) {\r\n        value = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBytesCopy)(value);\r\n        let length = writer.writeValue(value.length);\r\n        length += writer.writeBytes(value);\r\n        return length;\r\n    }\r\n    decode(reader) {\r\n        return reader.readBytes(reader.readIndex(), true);\r\n    }\r\n}\r\n/**\r\n *  @_ignore\r\n */\r\nclass BytesCoder extends DynamicBytesCoder {\r\n    constructor(localName) {\r\n        super(\"bytes\", localName);\r\n    }\r\n    decode(reader) {\r\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.hexlify)(super.decode(reader));\r\n    }\r\n}\r\n//# sourceMappingURL=bytes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9hYmkvY29kZXJzL2J5dGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBNkQ7QUFDakI7QUFDNUM7QUFDQTtBQUNBO0FBQ08sZ0NBQWdDLHFEQUFLO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLDZEQUFZO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSx3REFBTztBQUN0QjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkQ6XFxEb19hbjJcXGxlbmRodWJfdjJcXGxlbmRodWItZnJvbnRlbmQtbmV4dGpzXFxub2RlX21vZHVsZXNcXGV0aGVyc1xcbGliLmVzbVxcYWJpXFxjb2RlcnNcXGJ5dGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldEJ5dGVzQ29weSwgaGV4bGlmeSB9IGZyb20gXCIuLi8uLi91dGlscy9pbmRleC5qc1wiO1xyXG5pbXBvcnQgeyBDb2RlciB9IGZyb20gXCIuL2Fic3RyYWN0LWNvZGVyLmpzXCI7XHJcbi8qKlxyXG4gKiAgQF9pZ25vcmVcclxuICovXHJcbmV4cG9ydCBjbGFzcyBEeW5hbWljQnl0ZXNDb2RlciBleHRlbmRzIENvZGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKHR5cGUsIGxvY2FsTmFtZSkge1xyXG4gICAgICAgIHN1cGVyKHR5cGUsIHR5cGUsIGxvY2FsTmFtZSwgdHJ1ZSk7XHJcbiAgICB9XHJcbiAgICBkZWZhdWx0VmFsdWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiMHhcIjtcclxuICAgIH1cclxuICAgIGVuY29kZSh3cml0ZXIsIHZhbHVlKSB7XHJcbiAgICAgICAgdmFsdWUgPSBnZXRCeXRlc0NvcHkodmFsdWUpO1xyXG4gICAgICAgIGxldCBsZW5ndGggPSB3cml0ZXIud3JpdGVWYWx1ZSh2YWx1ZS5sZW5ndGgpO1xyXG4gICAgICAgIGxlbmd0aCArPSB3cml0ZXIud3JpdGVCeXRlcyh2YWx1ZSk7XHJcbiAgICAgICAgcmV0dXJuIGxlbmd0aDtcclxuICAgIH1cclxuICAgIGRlY29kZShyZWFkZXIpIHtcclxuICAgICAgICByZXR1cm4gcmVhZGVyLnJlYWRCeXRlcyhyZWFkZXIucmVhZEluZGV4KCksIHRydWUpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiAgQF9pZ25vcmVcclxuICovXHJcbmV4cG9ydCBjbGFzcyBCeXRlc0NvZGVyIGV4dGVuZHMgRHluYW1pY0J5dGVzQ29kZXIge1xyXG4gICAgY29uc3RydWN0b3IobG9jYWxOYW1lKSB7XHJcbiAgICAgICAgc3VwZXIoXCJieXRlc1wiLCBsb2NhbE5hbWUpO1xyXG4gICAgfVxyXG4gICAgZGVjb2RlKHJlYWRlcikge1xyXG4gICAgICAgIHJldHVybiBoZXhsaWZ5KHN1cGVyLmRlY29kZShyZWFkZXIpKTtcclxuICAgIH1cclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1ieXRlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/coders/bytes.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/coders/fixed-bytes.js":
/*!***************************************************************!*\
  !*** ./node_modules/ethers/lib.esm/abi/coders/fixed-bytes.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FixedBytesCoder: () => (/* binding */ FixedBytesCoder)\n/* harmony export */ });\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/* harmony import */ var _typed_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../typed.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/typed.js\");\n/* harmony import */ var _abstract_coder_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract-coder.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/coders/abstract-coder.js\");\n\r\n\r\n\r\n/**\r\n *  @_ignore\r\n */\r\nclass FixedBytesCoder extends _abstract_coder_js__WEBPACK_IMPORTED_MODULE_0__.Coder {\r\n    size;\r\n    constructor(size, localName) {\r\n        let name = \"bytes\" + String(size);\r\n        super(name, name, localName, false);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.defineProperties)(this, { size }, { size: \"number\" });\r\n    }\r\n    defaultValue() {\r\n        return (\"0x0000000000000000000000000000000000000000000000000000000000000000\").substring(0, 2 + this.size * 2);\r\n    }\r\n    encode(writer, _value) {\r\n        let data = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBytesCopy)(_typed_js__WEBPACK_IMPORTED_MODULE_2__.Typed.dereference(_value, this.type));\r\n        if (data.length !== this.size) {\r\n            this._throwError(\"incorrect data length\", _value);\r\n        }\r\n        return writer.writeBytes(data);\r\n    }\r\n    decode(reader) {\r\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.hexlify)(reader.readBytes(this.size));\r\n    }\r\n}\r\n//# sourceMappingURL=fixed-bytes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9hYmkvY29kZXJzL2ZpeGVkLWJ5dGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBK0U7QUFDM0M7QUFDUTtBQUM1QztBQUNBO0FBQ0E7QUFDTyw4QkFBOEIscURBQUs7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFnQixTQUFTLE1BQU0sSUFBSSxnQkFBZ0I7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQiw2REFBWSxDQUFDLDRDQUFLO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsd0RBQU87QUFDdEI7QUFDQTtBQUNBIiwic291cmNlcyI6WyJEOlxcRG9fYW4yXFxsZW5kaHViX3YyXFxsZW5kaHViLWZyb250ZW5kLW5leHRqc1xcbm9kZV9tb2R1bGVzXFxldGhlcnNcXGxpYi5lc21cXGFiaVxcY29kZXJzXFxmaXhlZC1ieXRlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZWZpbmVQcm9wZXJ0aWVzLCBnZXRCeXRlc0NvcHksIGhleGxpZnkgfSBmcm9tIFwiLi4vLi4vdXRpbHMvaW5kZXguanNcIjtcclxuaW1wb3J0IHsgVHlwZWQgfSBmcm9tIFwiLi4vdHlwZWQuanNcIjtcclxuaW1wb3J0IHsgQ29kZXIgfSBmcm9tIFwiLi9hYnN0cmFjdC1jb2Rlci5qc1wiO1xyXG4vKipcclxuICogIEBfaWdub3JlXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRml4ZWRCeXRlc0NvZGVyIGV4dGVuZHMgQ29kZXIge1xyXG4gICAgc2l6ZTtcclxuICAgIGNvbnN0cnVjdG9yKHNpemUsIGxvY2FsTmFtZSkge1xyXG4gICAgICAgIGxldCBuYW1lID0gXCJieXRlc1wiICsgU3RyaW5nKHNpemUpO1xyXG4gICAgICAgIHN1cGVyKG5hbWUsIG5hbWUsIGxvY2FsTmFtZSwgZmFsc2UpO1xyXG4gICAgICAgIGRlZmluZVByb3BlcnRpZXModGhpcywgeyBzaXplIH0sIHsgc2l6ZTogXCJudW1iZXJcIiB9KTtcclxuICAgIH1cclxuICAgIGRlZmF1bHRWYWx1ZSgpIHtcclxuICAgICAgICByZXR1cm4gKFwiMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCIpLnN1YnN0cmluZygwLCAyICsgdGhpcy5zaXplICogMik7XHJcbiAgICB9XHJcbiAgICBlbmNvZGUod3JpdGVyLCBfdmFsdWUpIHtcclxuICAgICAgICBsZXQgZGF0YSA9IGdldEJ5dGVzQ29weShUeXBlZC5kZXJlZmVyZW5jZShfdmFsdWUsIHRoaXMudHlwZSkpO1xyXG4gICAgICAgIGlmIChkYXRhLmxlbmd0aCAhPT0gdGhpcy5zaXplKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3Rocm93RXJyb3IoXCJpbmNvcnJlY3QgZGF0YSBsZW5ndGhcIiwgX3ZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHdyaXRlci53cml0ZUJ5dGVzKGRhdGEpO1xyXG4gICAgfVxyXG4gICAgZGVjb2RlKHJlYWRlcikge1xyXG4gICAgICAgIHJldHVybiBoZXhsaWZ5KHJlYWRlci5yZWFkQnl0ZXModGhpcy5zaXplKSk7XHJcbiAgICB9XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zml4ZWQtYnl0ZXMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/coders/fixed-bytes.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/coders/null.js":
/*!********************************************************!*\
  !*** ./node_modules/ethers/lib.esm/abi/coders/null.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NullCoder: () => (/* binding */ NullCoder)\n/* harmony export */ });\n/* harmony import */ var _abstract_coder_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract-coder.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/coders/abstract-coder.js\");\n\r\nconst Empty = new Uint8Array([]);\r\n/**\r\n *  @_ignore\r\n */\r\nclass NullCoder extends _abstract_coder_js__WEBPACK_IMPORTED_MODULE_0__.Coder {\r\n    constructor(localName) {\r\n        super(\"null\", \"\", localName, false);\r\n    }\r\n    defaultValue() {\r\n        return null;\r\n    }\r\n    encode(writer, value) {\r\n        if (value != null) {\r\n            this._throwError(\"not null\", value);\r\n        }\r\n        return writer.writeBytes(Empty);\r\n    }\r\n    decode(reader) {\r\n        reader.readBytes(0);\r\n        return null;\r\n    }\r\n}\r\n//# sourceMappingURL=null.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9hYmkvY29kZXJzL251bGwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDTyx3QkFBd0IscURBQUs7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJEOlxcRG9fYW4yXFxsZW5kaHViX3YyXFxsZW5kaHViLWZyb250ZW5kLW5leHRqc1xcbm9kZV9tb2R1bGVzXFxldGhlcnNcXGxpYi5lc21cXGFiaVxcY29kZXJzXFxudWxsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvZGVyIH0gZnJvbSBcIi4vYWJzdHJhY3QtY29kZXIuanNcIjtcclxuY29uc3QgRW1wdHkgPSBuZXcgVWludDhBcnJheShbXSk7XHJcbi8qKlxyXG4gKiAgQF9pZ25vcmVcclxuICovXHJcbmV4cG9ydCBjbGFzcyBOdWxsQ29kZXIgZXh0ZW5kcyBDb2RlciB7XHJcbiAgICBjb25zdHJ1Y3Rvcihsb2NhbE5hbWUpIHtcclxuICAgICAgICBzdXBlcihcIm51bGxcIiwgXCJcIiwgbG9jYWxOYW1lLCBmYWxzZSk7XHJcbiAgICB9XHJcbiAgICBkZWZhdWx0VmFsdWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBlbmNvZGUod3JpdGVyLCB2YWx1ZSkge1xyXG4gICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3Rocm93RXJyb3IoXCJub3QgbnVsbFwiLCB2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB3cml0ZXIud3JpdGVCeXRlcyhFbXB0eSk7XHJcbiAgICB9XHJcbiAgICBkZWNvZGUocmVhZGVyKSB7XHJcbiAgICAgICAgcmVhZGVyLnJlYWRCeXRlcygwKTtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1udWxsLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/coders/null.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/coders/number.js":
/*!**********************************************************!*\
  !*** ./node_modules/ethers/lib.esm/abi/coders/number.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NumberCoder: () => (/* binding */ NumberCoder)\n/* harmony export */ });\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/* harmony import */ var _typed_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../typed.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/typed.js\");\n/* harmony import */ var _abstract_coder_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract-coder.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/coders/abstract-coder.js\");\n\r\n\r\n\r\nconst BN_0 = BigInt(0);\r\nconst BN_1 = BigInt(1);\r\nconst BN_MAX_UINT256 = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\r\n/**\r\n *  @_ignore\r\n */\r\nclass NumberCoder extends _abstract_coder_js__WEBPACK_IMPORTED_MODULE_0__.Coder {\r\n    size;\r\n    signed;\r\n    constructor(size, signed, localName) {\r\n        const name = ((signed ? \"int\" : \"uint\") + (size * 8));\r\n        super(name, name, localName, false);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.defineProperties)(this, { size, signed }, { size: \"number\", signed: \"boolean\" });\r\n    }\r\n    defaultValue() {\r\n        return 0;\r\n    }\r\n    encode(writer, _value) {\r\n        let value = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBigInt)(_typed_js__WEBPACK_IMPORTED_MODULE_2__.Typed.dereference(_value, this.type));\r\n        // Check bounds are safe for encoding\r\n        let maxUintValue = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.mask)(BN_MAX_UINT256, _abstract_coder_js__WEBPACK_IMPORTED_MODULE_0__.WordSize * 8);\r\n        if (this.signed) {\r\n            let bounds = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.mask)(maxUintValue, (this.size * 8) - 1);\r\n            if (value > bounds || value < -(bounds + BN_1)) {\r\n                this._throwError(\"value out-of-bounds\", _value);\r\n            }\r\n            value = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.toTwos)(value, 8 * _abstract_coder_js__WEBPACK_IMPORTED_MODULE_0__.WordSize);\r\n        }\r\n        else if (value < BN_0 || value > (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.mask)(maxUintValue, this.size * 8)) {\r\n            this._throwError(\"value out-of-bounds\", _value);\r\n        }\r\n        return writer.writeValue(value);\r\n    }\r\n    decode(reader) {\r\n        let value = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.mask)(reader.readValue(), this.size * 8);\r\n        if (this.signed) {\r\n            value = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.fromTwos)(value, this.size * 8);\r\n        }\r\n        return value;\r\n    }\r\n}\r\n//# sourceMappingURL=number.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9hYmkvY29kZXJzL251bWJlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTJGO0FBQ3ZEO0FBQ2tCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLDBCQUEwQixxREFBSztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxpRUFBZ0IsU0FBUyxjQUFjLElBQUksbUNBQW1DO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsMERBQVMsQ0FBQyw0Q0FBSztBQUNuQztBQUNBLDJCQUEyQixxREFBSSxpQkFBaUIsd0RBQVE7QUFDeEQ7QUFDQSx5QkFBeUIscURBQUk7QUFDN0I7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHVEQUFNLFlBQVksd0RBQVE7QUFDOUM7QUFDQSx5Q0FBeUMscURBQUk7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixxREFBSTtBQUN4QjtBQUNBLG9CQUFvQix5REFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJEOlxcRG9fYW4yXFxsZW5kaHViX3YyXFxsZW5kaHViLWZyb250ZW5kLW5leHRqc1xcbm9kZV9tb2R1bGVzXFxldGhlcnNcXGxpYi5lc21cXGFiaVxcY29kZXJzXFxudW1iZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVmaW5lUHJvcGVydGllcywgZnJvbVR3b3MsIGdldEJpZ0ludCwgbWFzaywgdG9Ud29zIH0gZnJvbSBcIi4uLy4uL3V0aWxzL2luZGV4LmpzXCI7XHJcbmltcG9ydCB7IFR5cGVkIH0gZnJvbSBcIi4uL3R5cGVkLmpzXCI7XHJcbmltcG9ydCB7IENvZGVyLCBXb3JkU2l6ZSB9IGZyb20gXCIuL2Fic3RyYWN0LWNvZGVyLmpzXCI7XHJcbmNvbnN0IEJOXzAgPSBCaWdJbnQoMCk7XHJcbmNvbnN0IEJOXzEgPSBCaWdJbnQoMSk7XHJcbmNvbnN0IEJOX01BWF9VSU5UMjU2ID0gQmlnSW50KFwiMHhmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmXCIpO1xyXG4vKipcclxuICogIEBfaWdub3JlXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTnVtYmVyQ29kZXIgZXh0ZW5kcyBDb2RlciB7XHJcbiAgICBzaXplO1xyXG4gICAgc2lnbmVkO1xyXG4gICAgY29uc3RydWN0b3Ioc2l6ZSwgc2lnbmVkLCBsb2NhbE5hbWUpIHtcclxuICAgICAgICBjb25zdCBuYW1lID0gKChzaWduZWQgPyBcImludFwiIDogXCJ1aW50XCIpICsgKHNpemUgKiA4KSk7XHJcbiAgICAgICAgc3VwZXIobmFtZSwgbmFtZSwgbG9jYWxOYW1lLCBmYWxzZSk7XHJcbiAgICAgICAgZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7IHNpemUsIHNpZ25lZCB9LCB7IHNpemU6IFwibnVtYmVyXCIsIHNpZ25lZDogXCJib29sZWFuXCIgfSk7XHJcbiAgICB9XHJcbiAgICBkZWZhdWx0VmFsdWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcbiAgICBlbmNvZGUod3JpdGVyLCBfdmFsdWUpIHtcclxuICAgICAgICBsZXQgdmFsdWUgPSBnZXRCaWdJbnQoVHlwZWQuZGVyZWZlcmVuY2UoX3ZhbHVlLCB0aGlzLnR5cGUpKTtcclxuICAgICAgICAvLyBDaGVjayBib3VuZHMgYXJlIHNhZmUgZm9yIGVuY29kaW5nXHJcbiAgICAgICAgbGV0IG1heFVpbnRWYWx1ZSA9IG1hc2soQk5fTUFYX1VJTlQyNTYsIFdvcmRTaXplICogOCk7XHJcbiAgICAgICAgaWYgKHRoaXMuc2lnbmVkKSB7XHJcbiAgICAgICAgICAgIGxldCBib3VuZHMgPSBtYXNrKG1heFVpbnRWYWx1ZSwgKHRoaXMuc2l6ZSAqIDgpIC0gMSk7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSA+IGJvdW5kcyB8fCB2YWx1ZSA8IC0oYm91bmRzICsgQk5fMSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Rocm93RXJyb3IoXCJ2YWx1ZSBvdXQtb2YtYm91bmRzXCIsIF92YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFsdWUgPSB0b1R3b3ModmFsdWUsIDggKiBXb3JkU2l6ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHZhbHVlIDwgQk5fMCB8fCB2YWx1ZSA+IG1hc2sobWF4VWludFZhbHVlLCB0aGlzLnNpemUgKiA4KSkge1xyXG4gICAgICAgICAgICB0aGlzLl90aHJvd0Vycm9yKFwidmFsdWUgb3V0LW9mLWJvdW5kc1wiLCBfdmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gd3JpdGVyLndyaXRlVmFsdWUodmFsdWUpO1xyXG4gICAgfVxyXG4gICAgZGVjb2RlKHJlYWRlcikge1xyXG4gICAgICAgIGxldCB2YWx1ZSA9IG1hc2socmVhZGVyLnJlYWRWYWx1ZSgpLCB0aGlzLnNpemUgKiA4KTtcclxuICAgICAgICBpZiAodGhpcy5zaWduZWQpIHtcclxuICAgICAgICAgICAgdmFsdWUgPSBmcm9tVHdvcyh2YWx1ZSwgdGhpcy5zaXplICogOCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH1cclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1udW1iZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/coders/number.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/coders/string.js":
/*!**********************************************************!*\
  !*** ./node_modules/ethers/lib.esm/abi/coders/string.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StringCoder: () => (/* binding */ StringCoder)\n/* harmony export */ });\n/* harmony import */ var _utils_utf8_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/utf8.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/utf8.js\");\n/* harmony import */ var _typed_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../typed.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/typed.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bytes.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/coders/bytes.js\");\n\r\n\r\n\r\n/**\r\n *  @_ignore\r\n */\r\nclass StringCoder extends _bytes_js__WEBPACK_IMPORTED_MODULE_0__.DynamicBytesCoder {\r\n    constructor(localName) {\r\n        super(\"string\", localName);\r\n    }\r\n    defaultValue() {\r\n        return \"\";\r\n    }\r\n    encode(writer, _value) {\r\n        return super.encode(writer, (0,_utils_utf8_js__WEBPACK_IMPORTED_MODULE_1__.toUtf8Bytes)(_typed_js__WEBPACK_IMPORTED_MODULE_2__.Typed.dereference(_value, \"string\")));\r\n    }\r\n    decode(reader) {\r\n        return (0,_utils_utf8_js__WEBPACK_IMPORTED_MODULE_1__.toUtf8String)(super.decode(reader));\r\n    }\r\n}\r\n//# sourceMappingURL=string.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9hYmkvY29kZXJzL3N0cmluZy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWdFO0FBQzVCO0FBQ1c7QUFDL0M7QUFDQTtBQUNBO0FBQ08sMEJBQTBCLHdEQUFpQjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQywyREFBVyxDQUFDLDRDQUFLO0FBQ3JEO0FBQ0E7QUFDQSxlQUFlLDREQUFZO0FBQzNCO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiRDpcXERvX2FuMlxcbGVuZGh1Yl92MlxcbGVuZGh1Yi1mcm9udGVuZC1uZXh0anNcXG5vZGVfbW9kdWxlc1xcZXRoZXJzXFxsaWIuZXNtXFxhYmlcXGNvZGVyc1xcc3RyaW5nLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHRvVXRmOEJ5dGVzLCB0b1V0ZjhTdHJpbmcgfSBmcm9tIFwiLi4vLi4vdXRpbHMvdXRmOC5qc1wiO1xyXG5pbXBvcnQgeyBUeXBlZCB9IGZyb20gXCIuLi90eXBlZC5qc1wiO1xyXG5pbXBvcnQgeyBEeW5hbWljQnl0ZXNDb2RlciB9IGZyb20gXCIuL2J5dGVzLmpzXCI7XHJcbi8qKlxyXG4gKiAgQF9pZ25vcmVcclxuICovXHJcbmV4cG9ydCBjbGFzcyBTdHJpbmdDb2RlciBleHRlbmRzIER5bmFtaWNCeXRlc0NvZGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKGxvY2FsTmFtZSkge1xyXG4gICAgICAgIHN1cGVyKFwic3RyaW5nXCIsIGxvY2FsTmFtZSk7XHJcbiAgICB9XHJcbiAgICBkZWZhdWx0VmFsdWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICB9XHJcbiAgICBlbmNvZGUod3JpdGVyLCBfdmFsdWUpIHtcclxuICAgICAgICByZXR1cm4gc3VwZXIuZW5jb2RlKHdyaXRlciwgdG9VdGY4Qnl0ZXMoVHlwZWQuZGVyZWZlcmVuY2UoX3ZhbHVlLCBcInN0cmluZ1wiKSkpO1xyXG4gICAgfVxyXG4gICAgZGVjb2RlKHJlYWRlcikge1xyXG4gICAgICAgIHJldHVybiB0b1V0ZjhTdHJpbmcoc3VwZXIuZGVjb2RlKHJlYWRlcikpO1xyXG4gICAgfVxyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0cmluZy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/coders/string.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/coders/tuple.js":
/*!*********************************************************!*\
  !*** ./node_modules/ethers/lib.esm/abi/coders/tuple.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TupleCoder: () => (/* binding */ TupleCoder)\n/* harmony export */ });\n/* harmony import */ var _utils_properties_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/properties.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/properties.js\");\n/* harmony import */ var _typed_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../typed.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/typed.js\");\n/* harmony import */ var _abstract_coder_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract-coder.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/coders/abstract-coder.js\");\n/* harmony import */ var _array_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./array.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/coders/array.js\");\n\r\n\r\n\r\n\r\n/**\r\n *  @_ignore\r\n */\r\nclass TupleCoder extends _abstract_coder_js__WEBPACK_IMPORTED_MODULE_0__.Coder {\r\n    coders;\r\n    constructor(coders, localName) {\r\n        let dynamic = false;\r\n        const types = [];\r\n        coders.forEach((coder) => {\r\n            if (coder.dynamic) {\r\n                dynamic = true;\r\n            }\r\n            types.push(coder.type);\r\n        });\r\n        const type = (\"tuple(\" + types.join(\",\") + \")\");\r\n        super(\"tuple\", type, localName, dynamic);\r\n        (0,_utils_properties_js__WEBPACK_IMPORTED_MODULE_1__.defineProperties)(this, { coders: Object.freeze(coders.slice()) });\r\n    }\r\n    defaultValue() {\r\n        const values = [];\r\n        this.coders.forEach((coder) => {\r\n            values.push(coder.defaultValue());\r\n        });\r\n        // We only output named properties for uniquely named coders\r\n        const uniqueNames = this.coders.reduce((accum, coder) => {\r\n            const name = coder.localName;\r\n            if (name) {\r\n                if (!accum[name]) {\r\n                    accum[name] = 0;\r\n                }\r\n                accum[name]++;\r\n            }\r\n            return accum;\r\n        }, {});\r\n        // Add named values\r\n        this.coders.forEach((coder, index) => {\r\n            let name = coder.localName;\r\n            if (!name || uniqueNames[name] !== 1) {\r\n                return;\r\n            }\r\n            if (name === \"length\") {\r\n                name = \"_length\";\r\n            }\r\n            if (values[name] != null) {\r\n                return;\r\n            }\r\n            values[name] = values[index];\r\n        });\r\n        return Object.freeze(values);\r\n    }\r\n    encode(writer, _value) {\r\n        const value = _typed_js__WEBPACK_IMPORTED_MODULE_2__.Typed.dereference(_value, \"tuple\");\r\n        return (0,_array_js__WEBPACK_IMPORTED_MODULE_3__.pack)(writer, this.coders, value);\r\n    }\r\n    decode(reader) {\r\n        return (0,_array_js__WEBPACK_IMPORTED_MODULE_3__.unpack)(reader, this.coders);\r\n    }\r\n}\r\n//# sourceMappingURL=tuple.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9hYmkvY29kZXJzL3R1cGxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTZEO0FBQ3pCO0FBQ1E7QUFDRjtBQUMxQztBQUNBO0FBQ0E7QUFDTyx5QkFBeUIscURBQUs7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxRQUFRLHNFQUFnQixTQUFTLHVDQUF1QztBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxJQUFJO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLDRDQUFLO0FBQzNCLGVBQWUsK0NBQUk7QUFDbkI7QUFDQTtBQUNBLGVBQWUsaURBQU07QUFDckI7QUFDQTtBQUNBIiwic291cmNlcyI6WyJEOlxcRG9fYW4yXFxsZW5kaHViX3YyXFxsZW5kaHViLWZyb250ZW5kLW5leHRqc1xcbm9kZV9tb2R1bGVzXFxldGhlcnNcXGxpYi5lc21cXGFiaVxcY29kZXJzXFx0dXBsZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZWZpbmVQcm9wZXJ0aWVzIH0gZnJvbSBcIi4uLy4uL3V0aWxzL3Byb3BlcnRpZXMuanNcIjtcclxuaW1wb3J0IHsgVHlwZWQgfSBmcm9tIFwiLi4vdHlwZWQuanNcIjtcclxuaW1wb3J0IHsgQ29kZXIgfSBmcm9tIFwiLi9hYnN0cmFjdC1jb2Rlci5qc1wiO1xyXG5pbXBvcnQgeyBwYWNrLCB1bnBhY2sgfSBmcm9tIFwiLi9hcnJheS5qc1wiO1xyXG4vKipcclxuICogIEBfaWdub3JlXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgVHVwbGVDb2RlciBleHRlbmRzIENvZGVyIHtcclxuICAgIGNvZGVycztcclxuICAgIGNvbnN0cnVjdG9yKGNvZGVycywgbG9jYWxOYW1lKSB7XHJcbiAgICAgICAgbGV0IGR5bmFtaWMgPSBmYWxzZTtcclxuICAgICAgICBjb25zdCB0eXBlcyA9IFtdO1xyXG4gICAgICAgIGNvZGVycy5mb3JFYWNoKChjb2RlcikgPT4ge1xyXG4gICAgICAgICAgICBpZiAoY29kZXIuZHluYW1pYykge1xyXG4gICAgICAgICAgICAgICAgZHluYW1pYyA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdHlwZXMucHVzaChjb2Rlci50eXBlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBjb25zdCB0eXBlID0gKFwidHVwbGUoXCIgKyB0eXBlcy5qb2luKFwiLFwiKSArIFwiKVwiKTtcclxuICAgICAgICBzdXBlcihcInR1cGxlXCIsIHR5cGUsIGxvY2FsTmFtZSwgZHluYW1pYyk7XHJcbiAgICAgICAgZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7IGNvZGVyczogT2JqZWN0LmZyZWV6ZShjb2RlcnMuc2xpY2UoKSkgfSk7XHJcbiAgICB9XHJcbiAgICBkZWZhdWx0VmFsdWUoKSB7XHJcbiAgICAgICAgY29uc3QgdmFsdWVzID0gW107XHJcbiAgICAgICAgdGhpcy5jb2RlcnMuZm9yRWFjaCgoY29kZXIpID0+IHtcclxuICAgICAgICAgICAgdmFsdWVzLnB1c2goY29kZXIuZGVmYXVsdFZhbHVlKCkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIFdlIG9ubHkgb3V0cHV0IG5hbWVkIHByb3BlcnRpZXMgZm9yIHVuaXF1ZWx5IG5hbWVkIGNvZGVyc1xyXG4gICAgICAgIGNvbnN0IHVuaXF1ZU5hbWVzID0gdGhpcy5jb2RlcnMucmVkdWNlKChhY2N1bSwgY29kZXIpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgbmFtZSA9IGNvZGVyLmxvY2FsTmFtZTtcclxuICAgICAgICAgICAgaWYgKG5hbWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICghYWNjdW1bbmFtZV0pIHtcclxuICAgICAgICAgICAgICAgICAgICBhY2N1bVtuYW1lXSA9IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBhY2N1bVtuYW1lXSsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBhY2N1bTtcclxuICAgICAgICB9LCB7fSk7XHJcbiAgICAgICAgLy8gQWRkIG5hbWVkIHZhbHVlc1xyXG4gICAgICAgIHRoaXMuY29kZXJzLmZvckVhY2goKGNvZGVyLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgbmFtZSA9IGNvZGVyLmxvY2FsTmFtZTtcclxuICAgICAgICAgICAgaWYgKCFuYW1lIHx8IHVuaXF1ZU5hbWVzW25hbWVdICE9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKG5hbWUgPT09IFwibGVuZ3RoXCIpIHtcclxuICAgICAgICAgICAgICAgIG5hbWUgPSBcIl9sZW5ndGhcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodmFsdWVzW25hbWVdICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YWx1ZXNbbmFtZV0gPSB2YWx1ZXNbaW5kZXhdO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBPYmplY3QuZnJlZXplKHZhbHVlcyk7XHJcbiAgICB9XHJcbiAgICBlbmNvZGUod3JpdGVyLCBfdmFsdWUpIHtcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IFR5cGVkLmRlcmVmZXJlbmNlKF92YWx1ZSwgXCJ0dXBsZVwiKTtcclxuICAgICAgICByZXR1cm4gcGFjayh3cml0ZXIsIHRoaXMuY29kZXJzLCB2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBkZWNvZGUocmVhZGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIHVucGFjayhyZWFkZXIsIHRoaXMuY29kZXJzKTtcclxuICAgIH1cclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD10dXBsZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/coders/tuple.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/fragments.js":
/*!******************************************************!*\
  !*** ./node_modules/ethers/lib.esm/abi/fragments.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConstructorFragment: () => (/* binding */ ConstructorFragment),\n/* harmony export */   ErrorFragment: () => (/* binding */ ErrorFragment),\n/* harmony export */   EventFragment: () => (/* binding */ EventFragment),\n/* harmony export */   FallbackFragment: () => (/* binding */ FallbackFragment),\n/* harmony export */   Fragment: () => (/* binding */ Fragment),\n/* harmony export */   FunctionFragment: () => (/* binding */ FunctionFragment),\n/* harmony export */   NamedFragment: () => (/* binding */ NamedFragment),\n/* harmony export */   ParamType: () => (/* binding */ ParamType),\n/* harmony export */   StructFragment: () => (/* binding */ StructFragment)\n/* harmony export */ });\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/* harmony import */ var _hash_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../hash/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/hash/index.js\");\n/**\r\n *  A fragment is a single item from an ABI, which may represent any of:\r\n *\r\n *  - [Functions](FunctionFragment)\r\n *  - [Events](EventFragment)\r\n *  - [Constructors](ConstructorFragment)\r\n *  - Custom [Errors](ErrorFragment)\r\n *  - [Fallback or Receive](FallbackFragment) functions\r\n *\r\n *  @_subsection api/abi/abi-coder:Fragments  [about-fragments]\r\n */\r\n\r\n\r\n;\r\n// [ \"a\", \"b\" ] => { \"a\": 1, \"b\": 1 }\r\nfunction setify(items) {\r\n    const result = new Set();\r\n    items.forEach((k) => result.add(k));\r\n    return Object.freeze(result);\r\n}\r\nconst _kwVisibDeploy = \"external public payable override\";\r\nconst KwVisibDeploy = setify(_kwVisibDeploy.split(\" \"));\r\n// Visibility Keywords\r\nconst _kwVisib = \"constant external internal payable private public pure view override\";\r\nconst KwVisib = setify(_kwVisib.split(\" \"));\r\nconst _kwTypes = \"constructor error event fallback function receive struct\";\r\nconst KwTypes = setify(_kwTypes.split(\" \"));\r\nconst _kwModifiers = \"calldata memory storage payable indexed\";\r\nconst KwModifiers = setify(_kwModifiers.split(\" \"));\r\nconst _kwOther = \"tuple returns\";\r\n// All Keywords\r\nconst _keywords = [_kwTypes, _kwModifiers, _kwOther, _kwVisib].join(\" \");\r\nconst Keywords = setify(_keywords.split(\" \"));\r\n// Single character tokens\r\nconst SimpleTokens = {\r\n    \"(\": \"OPEN_PAREN\", \")\": \"CLOSE_PAREN\",\r\n    \"[\": \"OPEN_BRACKET\", \"]\": \"CLOSE_BRACKET\",\r\n    \",\": \"COMMA\", \"@\": \"AT\"\r\n};\r\n// Parser regexes to consume the next token\r\nconst regexWhitespacePrefix = new RegExp(\"^(\\\\s*)\");\r\nconst regexNumberPrefix = new RegExp(\"^([0-9]+)\");\r\nconst regexIdPrefix = new RegExp(\"^([a-zA-Z$_][a-zA-Z0-9$_]*)\");\r\n// Parser regexs to check validity\r\nconst regexId = new RegExp(\"^([a-zA-Z$_][a-zA-Z0-9$_]*)$\");\r\nconst regexType = new RegExp(\"^(address|bool|bytes([0-9]*)|string|u?int([0-9]*))$\");\r\nclass TokenString {\r\n    #offset;\r\n    #tokens;\r\n    get offset() { return this.#offset; }\r\n    get length() { return this.#tokens.length - this.#offset; }\r\n    constructor(tokens) {\r\n        this.#offset = 0;\r\n        this.#tokens = tokens.slice();\r\n    }\r\n    clone() { return new TokenString(this.#tokens); }\r\n    reset() { this.#offset = 0; }\r\n    #subTokenString(from = 0, to = 0) {\r\n        return new TokenString(this.#tokens.slice(from, to).map((t) => {\r\n            return Object.freeze(Object.assign({}, t, {\r\n                match: (t.match - from),\r\n                linkBack: (t.linkBack - from),\r\n                linkNext: (t.linkNext - from),\r\n            }));\r\n        }));\r\n    }\r\n    // Pops and returns the value of the next token, if it is a keyword in allowed; throws if out of tokens\r\n    popKeyword(allowed) {\r\n        const top = this.peek();\r\n        if (top.type !== \"KEYWORD\" || !allowed.has(top.text)) {\r\n            throw new Error(`expected keyword ${top.text}`);\r\n        }\r\n        return this.pop().text;\r\n    }\r\n    // Pops and returns the value of the next token if it is `type`; throws if out of tokens\r\n    popType(type) {\r\n        if (this.peek().type !== type) {\r\n            const top = this.peek();\r\n            throw new Error(`expected ${type}; got ${top.type} ${JSON.stringify(top.text)}`);\r\n        }\r\n        return this.pop().text;\r\n    }\r\n    // Pops and returns a \"(\" TOKENS \")\"\r\n    popParen() {\r\n        const top = this.peek();\r\n        if (top.type !== \"OPEN_PAREN\") {\r\n            throw new Error(\"bad start\");\r\n        }\r\n        const result = this.#subTokenString(this.#offset + 1, top.match + 1);\r\n        this.#offset = top.match + 1;\r\n        return result;\r\n    }\r\n    // Pops and returns the items within \"(\" ITEM1 \",\" ITEM2 \",\" ... \")\"\r\n    popParams() {\r\n        const top = this.peek();\r\n        if (top.type !== \"OPEN_PAREN\") {\r\n            throw new Error(\"bad start\");\r\n        }\r\n        const result = [];\r\n        while (this.#offset < top.match - 1) {\r\n            const link = this.peek().linkNext;\r\n            result.push(this.#subTokenString(this.#offset + 1, link));\r\n            this.#offset = link;\r\n        }\r\n        this.#offset = top.match + 1;\r\n        return result;\r\n    }\r\n    // Returns the top Token, throwing if out of tokens\r\n    peek() {\r\n        if (this.#offset >= this.#tokens.length) {\r\n            throw new Error(\"out-of-bounds\");\r\n        }\r\n        return this.#tokens[this.#offset];\r\n    }\r\n    // Returns the next value, if it is a keyword in `allowed`\r\n    peekKeyword(allowed) {\r\n        const top = this.peekType(\"KEYWORD\");\r\n        return (top != null && allowed.has(top)) ? top : null;\r\n    }\r\n    // Returns the value of the next token if it is `type`\r\n    peekType(type) {\r\n        if (this.length === 0) {\r\n            return null;\r\n        }\r\n        const top = this.peek();\r\n        return (top.type === type) ? top.text : null;\r\n    }\r\n    // Returns the next token; throws if out of tokens\r\n    pop() {\r\n        const result = this.peek();\r\n        this.#offset++;\r\n        return result;\r\n    }\r\n    toString() {\r\n        const tokens = [];\r\n        for (let i = this.#offset; i < this.#tokens.length; i++) {\r\n            const token = this.#tokens[i];\r\n            tokens.push(`${token.type}:${token.text}`);\r\n        }\r\n        return `<TokenString ${tokens.join(\" \")}>`;\r\n    }\r\n}\r\nfunction lex(text) {\r\n    const tokens = [];\r\n    const throwError = (message) => {\r\n        const token = (offset < text.length) ? JSON.stringify(text[offset]) : \"$EOI\";\r\n        throw new Error(`invalid token ${token} at ${offset}: ${message}`);\r\n    };\r\n    let brackets = [];\r\n    let commas = [];\r\n    let offset = 0;\r\n    while (offset < text.length) {\r\n        // Strip off any leading whitespace\r\n        let cur = text.substring(offset);\r\n        let match = cur.match(regexWhitespacePrefix);\r\n        if (match) {\r\n            offset += match[1].length;\r\n            cur = text.substring(offset);\r\n        }\r\n        const token = { depth: brackets.length, linkBack: -1, linkNext: -1, match: -1, type: \"\", text: \"\", offset, value: -1 };\r\n        tokens.push(token);\r\n        let type = (SimpleTokens[cur[0]] || \"\");\r\n        if (type) {\r\n            token.type = type;\r\n            token.text = cur[0];\r\n            offset++;\r\n            if (type === \"OPEN_PAREN\") {\r\n                brackets.push(tokens.length - 1);\r\n                commas.push(tokens.length - 1);\r\n            }\r\n            else if (type == \"CLOSE_PAREN\") {\r\n                if (brackets.length === 0) {\r\n                    throwError(\"no matching open bracket\");\r\n                }\r\n                token.match = brackets.pop();\r\n                (tokens[token.match]).match = tokens.length - 1;\r\n                token.depth--;\r\n                token.linkBack = commas.pop();\r\n                (tokens[token.linkBack]).linkNext = tokens.length - 1;\r\n            }\r\n            else if (type === \"COMMA\") {\r\n                token.linkBack = commas.pop();\r\n                (tokens[token.linkBack]).linkNext = tokens.length - 1;\r\n                commas.push(tokens.length - 1);\r\n            }\r\n            else if (type === \"OPEN_BRACKET\") {\r\n                token.type = \"BRACKET\";\r\n            }\r\n            else if (type === \"CLOSE_BRACKET\") {\r\n                // Remove the CLOSE_BRACKET\r\n                let suffix = tokens.pop().text;\r\n                if (tokens.length > 0 && tokens[tokens.length - 1].type === \"NUMBER\") {\r\n                    const value = tokens.pop().text;\r\n                    suffix = value + suffix;\r\n                    (tokens[tokens.length - 1]).value = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getNumber)(value);\r\n                }\r\n                if (tokens.length === 0 || tokens[tokens.length - 1].type !== \"BRACKET\") {\r\n                    throw new Error(\"missing opening bracket\");\r\n                }\r\n                (tokens[tokens.length - 1]).text += suffix;\r\n            }\r\n            continue;\r\n        }\r\n        match = cur.match(regexIdPrefix);\r\n        if (match) {\r\n            token.text = match[1];\r\n            offset += token.text.length;\r\n            if (Keywords.has(token.text)) {\r\n                token.type = \"KEYWORD\";\r\n                continue;\r\n            }\r\n            if (token.text.match(regexType)) {\r\n                token.type = \"TYPE\";\r\n                continue;\r\n            }\r\n            token.type = \"ID\";\r\n            continue;\r\n        }\r\n        match = cur.match(regexNumberPrefix);\r\n        if (match) {\r\n            token.text = match[1];\r\n            token.type = \"NUMBER\";\r\n            offset += token.text.length;\r\n            continue;\r\n        }\r\n        throw new Error(`unexpected token ${JSON.stringify(cur[0])} at position ${offset}`);\r\n    }\r\n    return new TokenString(tokens.map((t) => Object.freeze(t)));\r\n}\r\n// Check only one of `allowed` is in `set`\r\nfunction allowSingle(set, allowed) {\r\n    let included = [];\r\n    for (const key in allowed.keys()) {\r\n        if (set.has(key)) {\r\n            included.push(key);\r\n        }\r\n    }\r\n    if (included.length > 1) {\r\n        throw new Error(`conflicting types: ${included.join(\", \")}`);\r\n    }\r\n}\r\n// Functions to process a Solidity Signature TokenString from left-to-right for...\r\n// ...the name with an optional type, returning the name\r\nfunction consumeName(type, tokens) {\r\n    if (tokens.peekKeyword(KwTypes)) {\r\n        const keyword = tokens.pop().text;\r\n        if (keyword !== type) {\r\n            throw new Error(`expected ${type}, got ${keyword}`);\r\n        }\r\n    }\r\n    return tokens.popType(\"ID\");\r\n}\r\n// ...all keywords matching allowed, returning the keywords\r\nfunction consumeKeywords(tokens, allowed) {\r\n    const keywords = new Set();\r\n    while (true) {\r\n        const keyword = tokens.peekType(\"KEYWORD\");\r\n        if (keyword == null || (allowed && !allowed.has(keyword))) {\r\n            break;\r\n        }\r\n        tokens.pop();\r\n        if (keywords.has(keyword)) {\r\n            throw new Error(`duplicate keywords: ${JSON.stringify(keyword)}`);\r\n        }\r\n        keywords.add(keyword);\r\n    }\r\n    return Object.freeze(keywords);\r\n}\r\n// ...all visibility keywords, returning the coalesced mutability\r\nfunction consumeMutability(tokens) {\r\n    let modifiers = consumeKeywords(tokens, KwVisib);\r\n    // Detect conflicting modifiers\r\n    allowSingle(modifiers, setify(\"constant payable nonpayable\".split(\" \")));\r\n    allowSingle(modifiers, setify(\"pure view payable nonpayable\".split(\" \")));\r\n    // Process mutability states\r\n    if (modifiers.has(\"view\")) {\r\n        return \"view\";\r\n    }\r\n    if (modifiers.has(\"pure\")) {\r\n        return \"pure\";\r\n    }\r\n    if (modifiers.has(\"payable\")) {\r\n        return \"payable\";\r\n    }\r\n    if (modifiers.has(\"nonpayable\")) {\r\n        return \"nonpayable\";\r\n    }\r\n    // Process legacy `constant` last\r\n    if (modifiers.has(\"constant\")) {\r\n        return \"view\";\r\n    }\r\n    return \"nonpayable\";\r\n}\r\n// ...a parameter list, returning the ParamType list\r\nfunction consumeParams(tokens, allowIndexed) {\r\n    return tokens.popParams().map((t) => ParamType.from(t, allowIndexed));\r\n}\r\n// ...a gas limit, returning a BigNumber or null if none\r\nfunction consumeGas(tokens) {\r\n    if (tokens.peekType(\"AT\")) {\r\n        tokens.pop();\r\n        if (tokens.peekType(\"NUMBER\")) {\r\n            return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt)(tokens.pop().text);\r\n        }\r\n        throw new Error(\"invalid gas\");\r\n    }\r\n    return null;\r\n}\r\nfunction consumeEoi(tokens) {\r\n    if (tokens.length) {\r\n        throw new Error(`unexpected tokens at offset ${tokens.offset}: ${tokens.toString()}`);\r\n    }\r\n}\r\nconst regexArrayType = new RegExp(/^(.*)\\[([0-9]*)\\]$/);\r\nfunction verifyBasicType(type) {\r\n    const match = type.match(regexType);\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(match, \"invalid type\", \"type\", type);\r\n    if (type === \"uint\") {\r\n        return \"uint256\";\r\n    }\r\n    if (type === \"int\") {\r\n        return \"int256\";\r\n    }\r\n    if (match[2]) {\r\n        // bytesXX\r\n        const length = parseInt(match[2]);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(length !== 0 && length <= 32, \"invalid bytes length\", \"type\", type);\r\n    }\r\n    else if (match[3]) {\r\n        // intXX or uintXX\r\n        const size = parseInt(match[3]);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(size !== 0 && size <= 256 && (size % 8) === 0, \"invalid numeric width\", \"type\", type);\r\n    }\r\n    return type;\r\n}\r\n// Make the Fragment constructors effectively private\r\nconst _guard = {};\r\nconst internal = Symbol.for(\"_ethers_internal\");\r\nconst ParamTypeInternal = \"_ParamTypeInternal\";\r\nconst ErrorFragmentInternal = \"_ErrorInternal\";\r\nconst EventFragmentInternal = \"_EventInternal\";\r\nconst ConstructorFragmentInternal = \"_ConstructorInternal\";\r\nconst FallbackFragmentInternal = \"_FallbackInternal\";\r\nconst FunctionFragmentInternal = \"_FunctionInternal\";\r\nconst StructFragmentInternal = \"_StructInternal\";\r\n/**\r\n *  Each input and output of a [[Fragment]] is an Array of **ParamType**.\r\n */\r\nclass ParamType {\r\n    /**\r\n     *  The local name of the parameter (or ``\"\"`` if unbound)\r\n     */\r\n    name;\r\n    /**\r\n     *  The fully qualified type (e.g. ``\"address\"``, ``\"tuple(address)\"``,\r\n     *  ``\"uint256[3][]\"``)\r\n     */\r\n    type;\r\n    /**\r\n     *  The base type (e.g. ``\"address\"``, ``\"tuple\"``, ``\"array\"``)\r\n     */\r\n    baseType;\r\n    /**\r\n     *  True if the parameters is indexed.\r\n     *\r\n     *  For non-indexable types this is ``null``.\r\n     */\r\n    indexed;\r\n    /**\r\n     *  The components for the tuple.\r\n     *\r\n     *  For non-tuple types this is ``null``.\r\n     */\r\n    components;\r\n    /**\r\n     *  The array length, or ``-1`` for dynamic-lengthed arrays.\r\n     *\r\n     *  For non-array types this is ``null``.\r\n     */\r\n    arrayLength;\r\n    /**\r\n     *  The type of each child in the array.\r\n     *\r\n     *  For non-array types this is ``null``.\r\n     */\r\n    arrayChildren;\r\n    /**\r\n     *  @private\r\n     */\r\n    constructor(guard, name, type, baseType, indexed, components, arrayLength, arrayChildren) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertPrivate)(guard, _guard, \"ParamType\");\r\n        Object.defineProperty(this, internal, { value: ParamTypeInternal });\r\n        if (components) {\r\n            components = Object.freeze(components.slice());\r\n        }\r\n        if (baseType === \"array\") {\r\n            if (arrayLength == null || arrayChildren == null) {\r\n                throw new Error(\"\");\r\n            }\r\n        }\r\n        else if (arrayLength != null || arrayChildren != null) {\r\n            throw new Error(\"\");\r\n        }\r\n        if (baseType === \"tuple\") {\r\n            if (components == null) {\r\n                throw new Error(\"\");\r\n            }\r\n        }\r\n        else if (components != null) {\r\n            throw new Error(\"\");\r\n        }\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, {\r\n            name, type, baseType, indexed, components, arrayLength, arrayChildren\r\n        });\r\n    }\r\n    /**\r\n     *  Return a string representation of this type.\r\n     *\r\n     *  For example,\r\n     *\r\n     *  ``sighash\" => \"(uint256,address)\"``\r\n     *\r\n     *  ``\"minimal\" => \"tuple(uint256,address) indexed\"``\r\n     *\r\n     *  ``\"full\" => \"tuple(uint256 foo, address bar) indexed baz\"``\r\n     */\r\n    format(format) {\r\n        if (format == null) {\r\n            format = \"sighash\";\r\n        }\r\n        if (format === \"json\") {\r\n            const name = this.name || \"\";\r\n            if (this.isArray()) {\r\n                const result = JSON.parse(this.arrayChildren.format(\"json\"));\r\n                result.name = name;\r\n                result.type += `[${(this.arrayLength < 0 ? \"\" : String(this.arrayLength))}]`;\r\n                return JSON.stringify(result);\r\n            }\r\n            const result = {\r\n                type: ((this.baseType === \"tuple\") ? \"tuple\" : this.type),\r\n                name\r\n            };\r\n            if (typeof (this.indexed) === \"boolean\") {\r\n                result.indexed = this.indexed;\r\n            }\r\n            if (this.isTuple()) {\r\n                result.components = this.components.map((c) => JSON.parse(c.format(format)));\r\n            }\r\n            return JSON.stringify(result);\r\n        }\r\n        let result = \"\";\r\n        // Array\r\n        if (this.isArray()) {\r\n            result += this.arrayChildren.format(format);\r\n            result += `[${(this.arrayLength < 0 ? \"\" : String(this.arrayLength))}]`;\r\n        }\r\n        else {\r\n            if (this.isTuple()) {\r\n                result += \"(\" + this.components.map((comp) => comp.format(format)).join((format === \"full\") ? \", \" : \",\") + \")\";\r\n            }\r\n            else {\r\n                result += this.type;\r\n            }\r\n        }\r\n        if (format !== \"sighash\") {\r\n            if (this.indexed === true) {\r\n                result += \" indexed\";\r\n            }\r\n            if (format === \"full\" && this.name) {\r\n                result += \" \" + this.name;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     *  Returns true if %%this%% is an Array type.\r\n     *\r\n     *  This provides a type gaurd ensuring that [[arrayChildren]]\r\n     *  and [[arrayLength]] are non-null.\r\n     */\r\n    isArray() {\r\n        return (this.baseType === \"array\");\r\n    }\r\n    /**\r\n     *  Returns true if %%this%% is a Tuple type.\r\n     *\r\n     *  This provides a type gaurd ensuring that [[components]]\r\n     *  is non-null.\r\n     */\r\n    isTuple() {\r\n        return (this.baseType === \"tuple\");\r\n    }\r\n    /**\r\n     *  Returns true if %%this%% is an Indexable type.\r\n     *\r\n     *  This provides a type gaurd ensuring that [[indexed]]\r\n     *  is non-null.\r\n     */\r\n    isIndexable() {\r\n        return (this.indexed != null);\r\n    }\r\n    /**\r\n     *  Walks the **ParamType** with %%value%%, calling %%process%%\r\n     *  on each type, destructing the %%value%% recursively.\r\n     */\r\n    walk(value, process) {\r\n        if (this.isArray()) {\r\n            if (!Array.isArray(value)) {\r\n                throw new Error(\"invalid array value\");\r\n            }\r\n            if (this.arrayLength !== -1 && value.length !== this.arrayLength) {\r\n                throw new Error(\"array is wrong length\");\r\n            }\r\n            const _this = this;\r\n            return value.map((v) => (_this.arrayChildren.walk(v, process)));\r\n        }\r\n        if (this.isTuple()) {\r\n            if (!Array.isArray(value)) {\r\n                throw new Error(\"invalid tuple value\");\r\n            }\r\n            if (value.length !== this.components.length) {\r\n                throw new Error(\"array is wrong length\");\r\n            }\r\n            const _this = this;\r\n            return value.map((v, i) => (_this.components[i].walk(v, process)));\r\n        }\r\n        return process(this.type, value);\r\n    }\r\n    #walkAsync(promises, value, process, setValue) {\r\n        if (this.isArray()) {\r\n            if (!Array.isArray(value)) {\r\n                throw new Error(\"invalid array value\");\r\n            }\r\n            if (this.arrayLength !== -1 && value.length !== this.arrayLength) {\r\n                throw new Error(\"array is wrong length\");\r\n            }\r\n            const childType = this.arrayChildren;\r\n            const result = value.slice();\r\n            result.forEach((value, index) => {\r\n                childType.#walkAsync(promises, value, process, (value) => {\r\n                    result[index] = value;\r\n                });\r\n            });\r\n            setValue(result);\r\n            return;\r\n        }\r\n        if (this.isTuple()) {\r\n            const components = this.components;\r\n            // Convert the object into an array\r\n            let result;\r\n            if (Array.isArray(value)) {\r\n                result = value.slice();\r\n            }\r\n            else {\r\n                if (value == null || typeof (value) !== \"object\") {\r\n                    throw new Error(\"invalid tuple value\");\r\n                }\r\n                result = components.map((param) => {\r\n                    if (!param.name) {\r\n                        throw new Error(\"cannot use object value with unnamed components\");\r\n                    }\r\n                    if (!(param.name in value)) {\r\n                        throw new Error(`missing value for component ${param.name}`);\r\n                    }\r\n                    return value[param.name];\r\n                });\r\n            }\r\n            if (result.length !== this.components.length) {\r\n                throw new Error(\"array is wrong length\");\r\n            }\r\n            result.forEach((value, index) => {\r\n                components[index].#walkAsync(promises, value, process, (value) => {\r\n                    result[index] = value;\r\n                });\r\n            });\r\n            setValue(result);\r\n            return;\r\n        }\r\n        const result = process(this.type, value);\r\n        if (result.then) {\r\n            promises.push((async function () { setValue(await result); })());\r\n        }\r\n        else {\r\n            setValue(result);\r\n        }\r\n    }\r\n    /**\r\n     *  Walks the **ParamType** with %%value%%, asynchronously calling\r\n     *  %%process%% on each type, destructing the %%value%% recursively.\r\n     *\r\n     *  This can be used to resolve ENS names by walking and resolving each\r\n     *  ``\"address\"`` type.\r\n     */\r\n    async walkAsync(value, process) {\r\n        const promises = [];\r\n        const result = [value];\r\n        this.#walkAsync(promises, value, process, (value) => {\r\n            result[0] = value;\r\n        });\r\n        if (promises.length) {\r\n            await Promise.all(promises);\r\n        }\r\n        return result[0];\r\n    }\r\n    /**\r\n     *  Creates a new **ParamType** for %%obj%%.\r\n     *\r\n     *  If %%allowIndexed%% then the ``indexed`` keyword is permitted,\r\n     *  otherwise the ``indexed`` keyword will throw an error.\r\n     */\r\n    static from(obj, allowIndexed) {\r\n        if (ParamType.isParamType(obj)) {\r\n            return obj;\r\n        }\r\n        if (typeof (obj) === \"string\") {\r\n            try {\r\n                return ParamType.from(lex(obj), allowIndexed);\r\n            }\r\n            catch (error) {\r\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"invalid param type\", \"obj\", obj);\r\n            }\r\n        }\r\n        else if (obj instanceof TokenString) {\r\n            let type = \"\", baseType = \"\";\r\n            let comps = null;\r\n            if (consumeKeywords(obj, setify([\"tuple\"])).has(\"tuple\") || obj.peekType(\"OPEN_PAREN\")) {\r\n                // Tuple\r\n                baseType = \"tuple\";\r\n                comps = obj.popParams().map((t) => ParamType.from(t));\r\n                type = `tuple(${comps.map((c) => c.format()).join(\",\")})`;\r\n            }\r\n            else {\r\n                // Normal\r\n                type = verifyBasicType(obj.popType(\"TYPE\"));\r\n                baseType = type;\r\n            }\r\n            // Check for Array\r\n            let arrayChildren = null;\r\n            let arrayLength = null;\r\n            while (obj.length && obj.peekType(\"BRACKET\")) {\r\n                const bracket = obj.pop(); //arrays[i];\r\n                arrayChildren = new ParamType(_guard, \"\", type, baseType, null, comps, arrayLength, arrayChildren);\r\n                arrayLength = bracket.value;\r\n                type += bracket.text;\r\n                baseType = \"array\";\r\n                comps = null;\r\n            }\r\n            let indexed = null;\r\n            const keywords = consumeKeywords(obj, KwModifiers);\r\n            if (keywords.has(\"indexed\")) {\r\n                if (!allowIndexed) {\r\n                    throw new Error(\"\");\r\n                }\r\n                indexed = true;\r\n            }\r\n            const name = (obj.peekType(\"ID\") ? obj.pop().text : \"\");\r\n            if (obj.length) {\r\n                throw new Error(\"leftover tokens\");\r\n            }\r\n            return new ParamType(_guard, name, type, baseType, indexed, comps, arrayLength, arrayChildren);\r\n        }\r\n        const name = obj.name;\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(!name || (typeof (name) === \"string\" && name.match(regexId)), \"invalid name\", \"obj.name\", name);\r\n        let indexed = obj.indexed;\r\n        if (indexed != null) {\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(allowIndexed, \"parameter cannot be indexed\", \"obj.indexed\", obj.indexed);\r\n            indexed = !!indexed;\r\n        }\r\n        let type = obj.type;\r\n        let arrayMatch = type.match(regexArrayType);\r\n        if (arrayMatch) {\r\n            const arrayLength = parseInt(arrayMatch[2] || \"-1\");\r\n            const arrayChildren = ParamType.from({\r\n                type: arrayMatch[1],\r\n                components: obj.components\r\n            });\r\n            return new ParamType(_guard, name || \"\", type, \"array\", indexed, null, arrayLength, arrayChildren);\r\n        }\r\n        if (type === \"tuple\" || type.startsWith(\"tuple(\" /* fix: ) */) || type.startsWith(\"(\" /* fix: ) */)) {\r\n            const comps = (obj.components != null) ? obj.components.map((c) => ParamType.from(c)) : null;\r\n            const tuple = new ParamType(_guard, name || \"\", type, \"tuple\", indexed, comps, null, null);\r\n            // @TODO: use lexer to validate and normalize type\r\n            return tuple;\r\n        }\r\n        type = verifyBasicType(obj.type);\r\n        return new ParamType(_guard, name || \"\", type, type, indexed, null, null, null);\r\n    }\r\n    /**\r\n     *  Returns true if %%value%% is a **ParamType**.\r\n     */\r\n    static isParamType(value) {\r\n        return (value && value[internal] === ParamTypeInternal);\r\n    }\r\n}\r\n/**\r\n *  An abstract class to represent An individual fragment from a parse ABI.\r\n */\r\nclass Fragment {\r\n    /**\r\n     *  The type of the fragment.\r\n     */\r\n    type;\r\n    /**\r\n     *  The inputs for the fragment.\r\n     */\r\n    inputs;\r\n    /**\r\n     *  @private\r\n     */\r\n    constructor(guard, type, inputs) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertPrivate)(guard, _guard, \"Fragment\");\r\n        inputs = Object.freeze(inputs.slice());\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, { type, inputs });\r\n    }\r\n    /**\r\n     *  Creates a new **Fragment** for %%obj%%, wich can be any supported\r\n     *  ABI frgament type.\r\n     */\r\n    static from(obj) {\r\n        if (typeof (obj) === \"string\") {\r\n            // Try parsing JSON...\r\n            try {\r\n                Fragment.from(JSON.parse(obj));\r\n            }\r\n            catch (e) { }\r\n            // ...otherwise, use the human-readable lexer\r\n            return Fragment.from(lex(obj));\r\n        }\r\n        if (obj instanceof TokenString) {\r\n            // Human-readable ABI (already lexed)\r\n            const type = obj.peekKeyword(KwTypes);\r\n            switch (type) {\r\n                case \"constructor\": return ConstructorFragment.from(obj);\r\n                case \"error\": return ErrorFragment.from(obj);\r\n                case \"event\": return EventFragment.from(obj);\r\n                case \"fallback\":\r\n                case \"receive\":\r\n                    return FallbackFragment.from(obj);\r\n                case \"function\": return FunctionFragment.from(obj);\r\n                case \"struct\": return StructFragment.from(obj);\r\n            }\r\n        }\r\n        else if (typeof (obj) === \"object\") {\r\n            // JSON ABI\r\n            switch (obj.type) {\r\n                case \"constructor\": return ConstructorFragment.from(obj);\r\n                case \"error\": return ErrorFragment.from(obj);\r\n                case \"event\": return EventFragment.from(obj);\r\n                case \"fallback\":\r\n                case \"receive\":\r\n                    return FallbackFragment.from(obj);\r\n                case \"function\": return FunctionFragment.from(obj);\r\n                case \"struct\": return StructFragment.from(obj);\r\n            }\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(false, `unsupported type: ${obj.type}`, \"UNSUPPORTED_OPERATION\", {\r\n                operation: \"Fragment.from\"\r\n            });\r\n        }\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"unsupported frgament object\", \"obj\", obj);\r\n    }\r\n    /**\r\n     *  Returns true if %%value%% is a [[ConstructorFragment]].\r\n     */\r\n    static isConstructor(value) {\r\n        return ConstructorFragment.isFragment(value);\r\n    }\r\n    /**\r\n     *  Returns true if %%value%% is an [[ErrorFragment]].\r\n     */\r\n    static isError(value) {\r\n        return ErrorFragment.isFragment(value);\r\n    }\r\n    /**\r\n     *  Returns true if %%value%% is an [[EventFragment]].\r\n     */\r\n    static isEvent(value) {\r\n        return EventFragment.isFragment(value);\r\n    }\r\n    /**\r\n     *  Returns true if %%value%% is a [[FunctionFragment]].\r\n     */\r\n    static isFunction(value) {\r\n        return FunctionFragment.isFragment(value);\r\n    }\r\n    /**\r\n     *  Returns true if %%value%% is a [[StructFragment]].\r\n     */\r\n    static isStruct(value) {\r\n        return StructFragment.isFragment(value);\r\n    }\r\n}\r\n/**\r\n *  An abstract class to represent An individual fragment\r\n *  which has a name from a parse ABI.\r\n */\r\nclass NamedFragment extends Fragment {\r\n    /**\r\n     *  The name of the fragment.\r\n     */\r\n    name;\r\n    /**\r\n     *  @private\r\n     */\r\n    constructor(guard, type, name, inputs) {\r\n        super(guard, type, inputs);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(typeof (name) === \"string\" && name.match(regexId), \"invalid identifier\", \"name\", name);\r\n        inputs = Object.freeze(inputs.slice());\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, { name });\r\n    }\r\n}\r\nfunction joinParams(format, params) {\r\n    return \"(\" + params.map((p) => p.format(format)).join((format === \"full\") ? \", \" : \",\") + \")\";\r\n}\r\n/**\r\n *  A Fragment which represents a //Custom Error//.\r\n */\r\nclass ErrorFragment extends NamedFragment {\r\n    /**\r\n     *  @private\r\n     */\r\n    constructor(guard, name, inputs) {\r\n        super(guard, \"error\", name, inputs);\r\n        Object.defineProperty(this, internal, { value: ErrorFragmentInternal });\r\n    }\r\n    /**\r\n     *  The Custom Error selector.\r\n     */\r\n    get selector() {\r\n        return (0,_hash_index_js__WEBPACK_IMPORTED_MODULE_1__.id)(this.format(\"sighash\")).substring(0, 10);\r\n    }\r\n    /**\r\n     *  Returns a string representation of this fragment as %%format%%.\r\n     */\r\n    format(format) {\r\n        if (format == null) {\r\n            format = \"sighash\";\r\n        }\r\n        if (format === \"json\") {\r\n            return JSON.stringify({\r\n                type: \"error\",\r\n                name: this.name,\r\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format))),\r\n            });\r\n        }\r\n        const result = [];\r\n        if (format !== \"sighash\") {\r\n            result.push(\"error\");\r\n        }\r\n        result.push(this.name + joinParams(format, this.inputs));\r\n        return result.join(\" \");\r\n    }\r\n    /**\r\n     *  Returns a new **ErrorFragment** for %%obj%%.\r\n     */\r\n    static from(obj) {\r\n        if (ErrorFragment.isFragment(obj)) {\r\n            return obj;\r\n        }\r\n        if (typeof (obj) === \"string\") {\r\n            return ErrorFragment.from(lex(obj));\r\n        }\r\n        else if (obj instanceof TokenString) {\r\n            const name = consumeName(\"error\", obj);\r\n            const inputs = consumeParams(obj);\r\n            consumeEoi(obj);\r\n            return new ErrorFragment(_guard, name, inputs);\r\n        }\r\n        return new ErrorFragment(_guard, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);\r\n    }\r\n    /**\r\n     *  Returns ``true`` and provides a type guard if %%value%% is an\r\n     *  **ErrorFragment**.\r\n     */\r\n    static isFragment(value) {\r\n        return (value && value[internal] === ErrorFragmentInternal);\r\n    }\r\n}\r\n/**\r\n *  A Fragment which represents an Event.\r\n */\r\nclass EventFragment extends NamedFragment {\r\n    /**\r\n     *  Whether this event is anonymous.\r\n     */\r\n    anonymous;\r\n    /**\r\n     *  @private\r\n     */\r\n    constructor(guard, name, inputs, anonymous) {\r\n        super(guard, \"event\", name, inputs);\r\n        Object.defineProperty(this, internal, { value: EventFragmentInternal });\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, { anonymous });\r\n    }\r\n    /**\r\n     *  The Event topic hash.\r\n     */\r\n    get topicHash() {\r\n        return (0,_hash_index_js__WEBPACK_IMPORTED_MODULE_1__.id)(this.format(\"sighash\"));\r\n    }\r\n    /**\r\n     *  Returns a string representation of this event as %%format%%.\r\n     */\r\n    format(format) {\r\n        if (format == null) {\r\n            format = \"sighash\";\r\n        }\r\n        if (format === \"json\") {\r\n            return JSON.stringify({\r\n                type: \"event\",\r\n                anonymous: this.anonymous,\r\n                name: this.name,\r\n                inputs: this.inputs.map((i) => JSON.parse(i.format(format)))\r\n            });\r\n        }\r\n        const result = [];\r\n        if (format !== \"sighash\") {\r\n            result.push(\"event\");\r\n        }\r\n        result.push(this.name + joinParams(format, this.inputs));\r\n        if (format !== \"sighash\" && this.anonymous) {\r\n            result.push(\"anonymous\");\r\n        }\r\n        return result.join(\" \");\r\n    }\r\n    /**\r\n     *  Return the topic hash for an event with %%name%% and %%params%%.\r\n     */\r\n    static getTopicHash(name, params) {\r\n        params = (params || []).map((p) => ParamType.from(p));\r\n        const fragment = new EventFragment(_guard, name, params, false);\r\n        return fragment.topicHash;\r\n    }\r\n    /**\r\n     *  Returns a new **EventFragment** for %%obj%%.\r\n     */\r\n    static from(obj) {\r\n        if (EventFragment.isFragment(obj)) {\r\n            return obj;\r\n        }\r\n        if (typeof (obj) === \"string\") {\r\n            try {\r\n                return EventFragment.from(lex(obj));\r\n            }\r\n            catch (error) {\r\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"invalid event fragment\", \"obj\", obj);\r\n            }\r\n        }\r\n        else if (obj instanceof TokenString) {\r\n            const name = consumeName(\"event\", obj);\r\n            const inputs = consumeParams(obj, true);\r\n            const anonymous = !!consumeKeywords(obj, setify([\"anonymous\"])).has(\"anonymous\");\r\n            consumeEoi(obj);\r\n            return new EventFragment(_guard, name, inputs, anonymous);\r\n        }\r\n        return new EventFragment(_guard, obj.name, obj.inputs ? obj.inputs.map((p) => ParamType.from(p, true)) : [], !!obj.anonymous);\r\n    }\r\n    /**\r\n     *  Returns ``true`` and provides a type guard if %%value%% is an\r\n     *  **EventFragment**.\r\n     */\r\n    static isFragment(value) {\r\n        return (value && value[internal] === EventFragmentInternal);\r\n    }\r\n}\r\n/**\r\n *  A Fragment which represents a constructor.\r\n */\r\nclass ConstructorFragment extends Fragment {\r\n    /**\r\n     *  Whether the constructor can receive an endowment.\r\n     */\r\n    payable;\r\n    /**\r\n     *  The recommended gas limit for deployment or ``null``.\r\n     */\r\n    gas;\r\n    /**\r\n     *  @private\r\n     */\r\n    constructor(guard, type, inputs, payable, gas) {\r\n        super(guard, type, inputs);\r\n        Object.defineProperty(this, internal, { value: ConstructorFragmentInternal });\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, { payable, gas });\r\n    }\r\n    /**\r\n     *  Returns a string representation of this constructor as %%format%%.\r\n     */\r\n    format(format) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(format != null && format !== \"sighash\", \"cannot format a constructor for sighash\", \"UNSUPPORTED_OPERATION\", { operation: \"format(sighash)\" });\r\n        if (format === \"json\") {\r\n            return JSON.stringify({\r\n                type: \"constructor\",\r\n                stateMutability: (this.payable ? \"payable\" : \"undefined\"),\r\n                payable: this.payable,\r\n                gas: ((this.gas != null) ? this.gas : undefined),\r\n                inputs: this.inputs.map((i) => JSON.parse(i.format(format)))\r\n            });\r\n        }\r\n        const result = [`constructor${joinParams(format, this.inputs)}`];\r\n        if (this.payable) {\r\n            result.push(\"payable\");\r\n        }\r\n        if (this.gas != null) {\r\n            result.push(`@${this.gas.toString()}`);\r\n        }\r\n        return result.join(\" \");\r\n    }\r\n    /**\r\n     *  Returns a new **ConstructorFragment** for %%obj%%.\r\n     */\r\n    static from(obj) {\r\n        if (ConstructorFragment.isFragment(obj)) {\r\n            return obj;\r\n        }\r\n        if (typeof (obj) === \"string\") {\r\n            try {\r\n                return ConstructorFragment.from(lex(obj));\r\n            }\r\n            catch (error) {\r\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"invalid constuctor fragment\", \"obj\", obj);\r\n            }\r\n        }\r\n        else if (obj instanceof TokenString) {\r\n            consumeKeywords(obj, setify([\"constructor\"]));\r\n            const inputs = consumeParams(obj);\r\n            const payable = !!consumeKeywords(obj, KwVisibDeploy).has(\"payable\");\r\n            const gas = consumeGas(obj);\r\n            consumeEoi(obj);\r\n            return new ConstructorFragment(_guard, \"constructor\", inputs, payable, gas);\r\n        }\r\n        return new ConstructorFragment(_guard, \"constructor\", obj.inputs ? obj.inputs.map(ParamType.from) : [], !!obj.payable, (obj.gas != null) ? obj.gas : null);\r\n    }\r\n    /**\r\n     *  Returns ``true`` and provides a type guard if %%value%% is a\r\n     *  **ConstructorFragment**.\r\n     */\r\n    static isFragment(value) {\r\n        return (value && value[internal] === ConstructorFragmentInternal);\r\n    }\r\n}\r\n/**\r\n *  A Fragment which represents a method.\r\n */\r\nclass FallbackFragment extends Fragment {\r\n    /**\r\n     *  If the function can be sent value during invocation.\r\n     */\r\n    payable;\r\n    constructor(guard, inputs, payable) {\r\n        super(guard, \"fallback\", inputs);\r\n        Object.defineProperty(this, internal, { value: FallbackFragmentInternal });\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, { payable });\r\n    }\r\n    /**\r\n     *  Returns a string representation of this fallback as %%format%%.\r\n     */\r\n    format(format) {\r\n        const type = ((this.inputs.length === 0) ? \"receive\" : \"fallback\");\r\n        if (format === \"json\") {\r\n            const stateMutability = (this.payable ? \"payable\" : \"nonpayable\");\r\n            return JSON.stringify({ type, stateMutability });\r\n        }\r\n        return `${type}()${this.payable ? \" payable\" : \"\"}`;\r\n    }\r\n    /**\r\n     *  Returns a new **FallbackFragment** for %%obj%%.\r\n     */\r\n    static from(obj) {\r\n        if (FallbackFragment.isFragment(obj)) {\r\n            return obj;\r\n        }\r\n        if (typeof (obj) === \"string\") {\r\n            try {\r\n                return FallbackFragment.from(lex(obj));\r\n            }\r\n            catch (error) {\r\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"invalid fallback fragment\", \"obj\", obj);\r\n            }\r\n        }\r\n        else if (obj instanceof TokenString) {\r\n            const errorObj = obj.toString();\r\n            const topIsValid = obj.peekKeyword(setify([\"fallback\", \"receive\"]));\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(topIsValid, \"type must be fallback or receive\", \"obj\", errorObj);\r\n            const type = obj.popKeyword(setify([\"fallback\", \"receive\"]));\r\n            // receive()\r\n            if (type === \"receive\") {\r\n                const inputs = consumeParams(obj);\r\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(inputs.length === 0, `receive cannot have arguments`, \"obj.inputs\", inputs);\r\n                consumeKeywords(obj, setify([\"payable\"]));\r\n                consumeEoi(obj);\r\n                return new FallbackFragment(_guard, [], true);\r\n            }\r\n            // fallback() [payable]\r\n            // fallback(bytes) [payable] returns (bytes)\r\n            let inputs = consumeParams(obj);\r\n            if (inputs.length) {\r\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(inputs.length === 1 && inputs[0].type === \"bytes\", \"invalid fallback inputs\", \"obj.inputs\", inputs.map((i) => i.format(\"minimal\")).join(\", \"));\r\n            }\r\n            else {\r\n                inputs = [ParamType.from(\"bytes\")];\r\n            }\r\n            const mutability = consumeMutability(obj);\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(mutability === \"nonpayable\" || mutability === \"payable\", \"fallback cannot be constants\", \"obj.stateMutability\", mutability);\r\n            if (consumeKeywords(obj, setify([\"returns\"])).has(\"returns\")) {\r\n                const outputs = consumeParams(obj);\r\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(outputs.length === 1 && outputs[0].type === \"bytes\", \"invalid fallback outputs\", \"obj.outputs\", outputs.map((i) => i.format(\"minimal\")).join(\", \"));\r\n            }\r\n            consumeEoi(obj);\r\n            return new FallbackFragment(_guard, inputs, mutability === \"payable\");\r\n        }\r\n        if (obj.type === \"receive\") {\r\n            return new FallbackFragment(_guard, [], true);\r\n        }\r\n        if (obj.type === \"fallback\") {\r\n            const inputs = [ParamType.from(\"bytes\")];\r\n            const payable = (obj.stateMutability === \"payable\");\r\n            return new FallbackFragment(_guard, inputs, payable);\r\n        }\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"invalid fallback description\", \"obj\", obj);\r\n    }\r\n    /**\r\n     *  Returns ``true`` and provides a type guard if %%value%% is a\r\n     *  **FallbackFragment**.\r\n     */\r\n    static isFragment(value) {\r\n        return (value && value[internal] === FallbackFragmentInternal);\r\n    }\r\n}\r\n/**\r\n *  A Fragment which represents a method.\r\n */\r\nclass FunctionFragment extends NamedFragment {\r\n    /**\r\n     *  If the function is constant (e.g. ``pure`` or ``view`` functions).\r\n     */\r\n    constant;\r\n    /**\r\n     *  The returned types for the result of calling this function.\r\n     */\r\n    outputs;\r\n    /**\r\n     *  The state mutability (e.g. ``payable``, ``nonpayable``, ``view``\r\n     *  or ``pure``)\r\n     */\r\n    stateMutability;\r\n    /**\r\n     *  If the function can be sent value during invocation.\r\n     */\r\n    payable;\r\n    /**\r\n     *  The recommended gas limit to send when calling this function.\r\n     */\r\n    gas;\r\n    /**\r\n     *  @private\r\n     */\r\n    constructor(guard, name, stateMutability, inputs, outputs, gas) {\r\n        super(guard, \"function\", name, inputs);\r\n        Object.defineProperty(this, internal, { value: FunctionFragmentInternal });\r\n        outputs = Object.freeze(outputs.slice());\r\n        const constant = (stateMutability === \"view\" || stateMutability === \"pure\");\r\n        const payable = (stateMutability === \"payable\");\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, { constant, gas, outputs, payable, stateMutability });\r\n    }\r\n    /**\r\n     *  The Function selector.\r\n     */\r\n    get selector() {\r\n        return (0,_hash_index_js__WEBPACK_IMPORTED_MODULE_1__.id)(this.format(\"sighash\")).substring(0, 10);\r\n    }\r\n    /**\r\n     *  Returns a string representation of this function as %%format%%.\r\n     */\r\n    format(format) {\r\n        if (format == null) {\r\n            format = \"sighash\";\r\n        }\r\n        if (format === \"json\") {\r\n            return JSON.stringify({\r\n                type: \"function\",\r\n                name: this.name,\r\n                constant: this.constant,\r\n                stateMutability: ((this.stateMutability !== \"nonpayable\") ? this.stateMutability : undefined),\r\n                payable: this.payable,\r\n                gas: ((this.gas != null) ? this.gas : undefined),\r\n                inputs: this.inputs.map((i) => JSON.parse(i.format(format))),\r\n                outputs: this.outputs.map((o) => JSON.parse(o.format(format))),\r\n            });\r\n        }\r\n        const result = [];\r\n        if (format !== \"sighash\") {\r\n            result.push(\"function\");\r\n        }\r\n        result.push(this.name + joinParams(format, this.inputs));\r\n        if (format !== \"sighash\") {\r\n            if (this.stateMutability !== \"nonpayable\") {\r\n                result.push(this.stateMutability);\r\n            }\r\n            if (this.outputs && this.outputs.length) {\r\n                result.push(\"returns\");\r\n                result.push(joinParams(format, this.outputs));\r\n            }\r\n            if (this.gas != null) {\r\n                result.push(`@${this.gas.toString()}`);\r\n            }\r\n        }\r\n        return result.join(\" \");\r\n    }\r\n    /**\r\n     *  Return the selector for a function with %%name%% and %%params%%.\r\n     */\r\n    static getSelector(name, params) {\r\n        params = (params || []).map((p) => ParamType.from(p));\r\n        const fragment = new FunctionFragment(_guard, name, \"view\", params, [], null);\r\n        return fragment.selector;\r\n    }\r\n    /**\r\n     *  Returns a new **FunctionFragment** for %%obj%%.\r\n     */\r\n    static from(obj) {\r\n        if (FunctionFragment.isFragment(obj)) {\r\n            return obj;\r\n        }\r\n        if (typeof (obj) === \"string\") {\r\n            try {\r\n                return FunctionFragment.from(lex(obj));\r\n            }\r\n            catch (error) {\r\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"invalid function fragment\", \"obj\", obj);\r\n            }\r\n        }\r\n        else if (obj instanceof TokenString) {\r\n            const name = consumeName(\"function\", obj);\r\n            const inputs = consumeParams(obj);\r\n            const mutability = consumeMutability(obj);\r\n            let outputs = [];\r\n            if (consumeKeywords(obj, setify([\"returns\"])).has(\"returns\")) {\r\n                outputs = consumeParams(obj);\r\n            }\r\n            const gas = consumeGas(obj);\r\n            consumeEoi(obj);\r\n            return new FunctionFragment(_guard, name, mutability, inputs, outputs, gas);\r\n        }\r\n        let stateMutability = obj.stateMutability;\r\n        // Use legacy Solidity ABI logic if stateMutability is missing\r\n        if (stateMutability == null) {\r\n            stateMutability = \"payable\";\r\n            if (typeof (obj.constant) === \"boolean\") {\r\n                stateMutability = \"view\";\r\n                if (!obj.constant) {\r\n                    stateMutability = \"payable\";\r\n                    if (typeof (obj.payable) === \"boolean\" && !obj.payable) {\r\n                        stateMutability = \"nonpayable\";\r\n                    }\r\n                }\r\n            }\r\n            else if (typeof (obj.payable) === \"boolean\" && !obj.payable) {\r\n                stateMutability = \"nonpayable\";\r\n            }\r\n        }\r\n        // @TODO: verifyState for stateMutability (e.g. throw if\r\n        //        payable: false but stateMutability is \"nonpayable\")\r\n        return new FunctionFragment(_guard, obj.name, stateMutability, obj.inputs ? obj.inputs.map(ParamType.from) : [], obj.outputs ? obj.outputs.map(ParamType.from) : [], (obj.gas != null) ? obj.gas : null);\r\n    }\r\n    /**\r\n     *  Returns ``true`` and provides a type guard if %%value%% is a\r\n     *  **FunctionFragment**.\r\n     */\r\n    static isFragment(value) {\r\n        return (value && value[internal] === FunctionFragmentInternal);\r\n    }\r\n}\r\n/**\r\n *  A Fragment which represents a structure.\r\n */\r\nclass StructFragment extends NamedFragment {\r\n    /**\r\n     *  @private\r\n     */\r\n    constructor(guard, name, inputs) {\r\n        super(guard, \"struct\", name, inputs);\r\n        Object.defineProperty(this, internal, { value: StructFragmentInternal });\r\n    }\r\n    /**\r\n     *  Returns a string representation of this struct as %%format%%.\r\n     */\r\n    format() {\r\n        throw new Error(\"@TODO\");\r\n    }\r\n    /**\r\n     *  Returns a new **StructFragment** for %%obj%%.\r\n     */\r\n    static from(obj) {\r\n        if (typeof (obj) === \"string\") {\r\n            try {\r\n                return StructFragment.from(lex(obj));\r\n            }\r\n            catch (error) {\r\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"invalid struct fragment\", \"obj\", obj);\r\n            }\r\n        }\r\n        else if (obj instanceof TokenString) {\r\n            const name = consumeName(\"struct\", obj);\r\n            const inputs = consumeParams(obj);\r\n            consumeEoi(obj);\r\n            return new StructFragment(_guard, name, inputs);\r\n        }\r\n        return new StructFragment(_guard, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);\r\n    }\r\n    // @TODO: fix this return type\r\n    /**\r\n     *  Returns ``true`` and provides a type guard if %%value%% is a\r\n     *  **StructFragment**.\r\n     */\r\n    static isFragment(value) {\r\n        return (value && value[internal] === StructFragmentInternal);\r\n    }\r\n}\r\n//# sourceMappingURL=fragments.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/fragments.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/index.js":
/*!**************************************************!*\
  !*** ./node_modules/ethers/lib.esm/abi/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbiCoder: () => (/* reexport safe */ _abi_coder_js__WEBPACK_IMPORTED_MODULE_0__.AbiCoder),\n/* harmony export */   ConstructorFragment: () => (/* reexport safe */ _fragments_js__WEBPACK_IMPORTED_MODULE_2__.ConstructorFragment),\n/* harmony export */   ErrorDescription: () => (/* reexport safe */ _interface_js__WEBPACK_IMPORTED_MODULE_3__.ErrorDescription),\n/* harmony export */   ErrorFragment: () => (/* reexport safe */ _fragments_js__WEBPACK_IMPORTED_MODULE_2__.ErrorFragment),\n/* harmony export */   EventFragment: () => (/* reexport safe */ _fragments_js__WEBPACK_IMPORTED_MODULE_2__.EventFragment),\n/* harmony export */   FallbackFragment: () => (/* reexport safe */ _fragments_js__WEBPACK_IMPORTED_MODULE_2__.FallbackFragment),\n/* harmony export */   Fragment: () => (/* reexport safe */ _fragments_js__WEBPACK_IMPORTED_MODULE_2__.Fragment),\n/* harmony export */   FunctionFragment: () => (/* reexport safe */ _fragments_js__WEBPACK_IMPORTED_MODULE_2__.FunctionFragment),\n/* harmony export */   Indexed: () => (/* reexport safe */ _interface_js__WEBPACK_IMPORTED_MODULE_3__.Indexed),\n/* harmony export */   Interface: () => (/* reexport safe */ _interface_js__WEBPACK_IMPORTED_MODULE_3__.Interface),\n/* harmony export */   LogDescription: () => (/* reexport safe */ _interface_js__WEBPACK_IMPORTED_MODULE_3__.LogDescription),\n/* harmony export */   NamedFragment: () => (/* reexport safe */ _fragments_js__WEBPACK_IMPORTED_MODULE_2__.NamedFragment),\n/* harmony export */   ParamType: () => (/* reexport safe */ _fragments_js__WEBPACK_IMPORTED_MODULE_2__.ParamType),\n/* harmony export */   Result: () => (/* reexport safe */ _interface_js__WEBPACK_IMPORTED_MODULE_3__.Result),\n/* harmony export */   StructFragment: () => (/* reexport safe */ _fragments_js__WEBPACK_IMPORTED_MODULE_2__.StructFragment),\n/* harmony export */   TransactionDescription: () => (/* reexport safe */ _interface_js__WEBPACK_IMPORTED_MODULE_3__.TransactionDescription),\n/* harmony export */   Typed: () => (/* reexport safe */ _typed_js__WEBPACK_IMPORTED_MODULE_4__.Typed),\n/* harmony export */   checkResultErrors: () => (/* reexport safe */ _interface_js__WEBPACK_IMPORTED_MODULE_3__.checkResultErrors),\n/* harmony export */   decodeBytes32String: () => (/* reexport safe */ _bytes32_js__WEBPACK_IMPORTED_MODULE_1__.decodeBytes32String),\n/* harmony export */   encodeBytes32String: () => (/* reexport safe */ _bytes32_js__WEBPACK_IMPORTED_MODULE_1__.encodeBytes32String)\n/* harmony export */ });\n/* harmony import */ var _abi_coder_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abi-coder.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/abi-coder.js\");\n/* harmony import */ var _bytes32_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bytes32.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/bytes32.js\");\n/* harmony import */ var _fragments_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./fragments.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/fragments.js\");\n/* harmony import */ var _interface_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./interface.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/interface.js\");\n/* harmony import */ var _typed_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./typed.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/typed.js\");\n/**\r\n *  The Application Binary Interface (ABI) describes how method input\r\n *  parameters should be encoded, their results decoded, and how to\r\n *  decode events and errors.\r\n *\r\n *  See [About ABIs](docs-abi) for more details how they are used.\r\n *\r\n *  @_section api/abi:Application Binary Interface  [about-abi]\r\n *  @_navTitle: ABI\r\n */\r\n//////\r\n\r\n\r\n\r\n\r\n\r\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9hYmkvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDMEM7QUFDOEI7QUFDb0c7QUFDbkM7QUFDdEc7QUFDbkMiLCJzb3VyY2VzIjpbIkQ6XFxEb19hbjJcXGxlbmRodWJfdjJcXGxlbmRodWItZnJvbnRlbmQtbmV4dGpzXFxub2RlX21vZHVsZXNcXGV0aGVyc1xcbGliLmVzbVxcYWJpXFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogIFRoZSBBcHBsaWNhdGlvbiBCaW5hcnkgSW50ZXJmYWNlIChBQkkpIGRlc2NyaWJlcyBob3cgbWV0aG9kIGlucHV0XHJcbiAqICBwYXJhbWV0ZXJzIHNob3VsZCBiZSBlbmNvZGVkLCB0aGVpciByZXN1bHRzIGRlY29kZWQsIGFuZCBob3cgdG9cclxuICogIGRlY29kZSBldmVudHMgYW5kIGVycm9ycy5cclxuICpcclxuICogIFNlZSBbQWJvdXQgQUJJc10oZG9jcy1hYmkpIGZvciBtb3JlIGRldGFpbHMgaG93IHRoZXkgYXJlIHVzZWQuXHJcbiAqXHJcbiAqICBAX3NlY3Rpb24gYXBpL2FiaTpBcHBsaWNhdGlvbiBCaW5hcnkgSW50ZXJmYWNlICBbYWJvdXQtYWJpXVxyXG4gKiAgQF9uYXZUaXRsZTogQUJJXHJcbiAqL1xyXG4vLy8vLy9cclxuZXhwb3J0IHsgQWJpQ29kZXIgfSBmcm9tIFwiLi9hYmktY29kZXIuanNcIjtcclxuZXhwb3J0IHsgZGVjb2RlQnl0ZXMzMlN0cmluZywgZW5jb2RlQnl0ZXMzMlN0cmluZyB9IGZyb20gXCIuL2J5dGVzMzIuanNcIjtcclxuZXhwb3J0IHsgQ29uc3RydWN0b3JGcmFnbWVudCwgRXJyb3JGcmFnbWVudCwgRXZlbnRGcmFnbWVudCwgRmFsbGJhY2tGcmFnbWVudCwgRnJhZ21lbnQsIEZ1bmN0aW9uRnJhZ21lbnQsIE5hbWVkRnJhZ21lbnQsIFBhcmFtVHlwZSwgU3RydWN0RnJhZ21lbnQsIH0gZnJvbSBcIi4vZnJhZ21lbnRzLmpzXCI7XHJcbmV4cG9ydCB7IGNoZWNrUmVzdWx0RXJyb3JzLCBJbmRleGVkLCBJbnRlcmZhY2UsIEVycm9yRGVzY3JpcHRpb24sIExvZ0Rlc2NyaXB0aW9uLCBUcmFuc2FjdGlvbkRlc2NyaXB0aW9uLCBSZXN1bHQgfSBmcm9tIFwiLi9pbnRlcmZhY2UuanNcIjtcclxuZXhwb3J0IHsgVHlwZWQgfSBmcm9tIFwiLi90eXBlZC5qc1wiO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/index.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/interface.js":
/*!******************************************************!*\
  !*** ./node_modules/ethers/lib.esm/abi/interface.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ErrorDescription: () => (/* binding */ ErrorDescription),\n/* harmony export */   Indexed: () => (/* binding */ Indexed),\n/* harmony export */   Interface: () => (/* binding */ Interface),\n/* harmony export */   LogDescription: () => (/* binding */ LogDescription),\n/* harmony export */   Result: () => (/* reexport safe */ _coders_abstract_coder_js__WEBPACK_IMPORTED_MODULE_0__.Result),\n/* harmony export */   TransactionDescription: () => (/* binding */ TransactionDescription),\n/* harmony export */   checkResultErrors: () => (/* reexport safe */ _coders_abstract_coder_js__WEBPACK_IMPORTED_MODULE_0__.checkResultErrors)\n/* harmony export */ });\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../crypto/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/index.js\");\n/* harmony import */ var _hash_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../hash/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/hash/index.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/* harmony import */ var _abi_coder_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./abi-coder.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/abi-coder.js\");\n/* harmony import */ var _coders_abstract_coder_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./coders/abstract-coder.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/coders/abstract-coder.js\");\n/* harmony import */ var _fragments_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./fragments.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/fragments.js\");\n/* harmony import */ var _typed_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./typed.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/typed.js\");\n/**\r\n *  The Interface class is a low-level class that accepts an\r\n *  ABI and provides all the necessary functionality to encode\r\n *  and decode paramaters to and results from methods, events\r\n *  and errors.\r\n *\r\n *  It also provides several convenience methods to automatically\r\n *  search and find matching transactions and events to parse them.\r\n *\r\n *  @_subsection api/abi:Interfaces  [interfaces]\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n *  When using the [[Interface-parseLog]] to automatically match a Log to its event\r\n *  for parsing, a **LogDescription** is returned.\r\n */\r\nclass LogDescription {\r\n    /**\r\n     *  The matching fragment for the ``topic0``.\r\n     */\r\n    fragment;\r\n    /**\r\n     *  The name of the Event.\r\n     */\r\n    name;\r\n    /**\r\n     *  The full Event signature.\r\n     */\r\n    signature;\r\n    /**\r\n     *  The topic hash for the Event.\r\n     */\r\n    topic;\r\n    /**\r\n     *  The arguments passed into the Event with ``emit``.\r\n     */\r\n    args;\r\n    /**\r\n     *  @_ignore:\r\n     */\r\n    constructor(fragment, topic, args) {\r\n        const name = fragment.name, signature = fragment.format();\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.defineProperties)(this, {\r\n            fragment, name, signature, topic, args\r\n        });\r\n    }\r\n}\r\n/**\r\n *  When using the [[Interface-parseTransaction]] to automatically match\r\n *  a transaction data to its function for parsing,\r\n *  a **TransactionDescription** is returned.\r\n */\r\nclass TransactionDescription {\r\n    /**\r\n     *  The matching fragment from the transaction ``data``.\r\n     */\r\n    fragment;\r\n    /**\r\n     *  The name of the Function from the transaction ``data``.\r\n     */\r\n    name;\r\n    /**\r\n     *  The arguments passed to the Function from the transaction ``data``.\r\n     */\r\n    args;\r\n    /**\r\n     *  The full Function signature from the transaction ``data``.\r\n     */\r\n    signature;\r\n    /**\r\n     *  The selector for the Function from the transaction ``data``.\r\n     */\r\n    selector;\r\n    /**\r\n     *  The ``value`` (in wei) from the transaction.\r\n     */\r\n    value;\r\n    /**\r\n     *  @_ignore:\r\n     */\r\n    constructor(fragment, selector, args, value) {\r\n        const name = fragment.name, signature = fragment.format();\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.defineProperties)(this, {\r\n            fragment, name, args, signature, selector, value\r\n        });\r\n    }\r\n}\r\n/**\r\n *  When using the [[Interface-parseError]] to automatically match an\r\n *  error for a call result for parsing, an **ErrorDescription** is returned.\r\n */\r\nclass ErrorDescription {\r\n    /**\r\n     *  The matching fragment.\r\n     */\r\n    fragment;\r\n    /**\r\n     *  The name of the Error.\r\n     */\r\n    name;\r\n    /**\r\n     *  The arguments passed to the Error with ``revert``.\r\n     */\r\n    args;\r\n    /**\r\n     *  The full Error signature.\r\n     */\r\n    signature;\r\n    /**\r\n     *  The selector for the Error.\r\n     */\r\n    selector;\r\n    /**\r\n     *  @_ignore:\r\n     */\r\n    constructor(fragment, selector, args) {\r\n        const name = fragment.name, signature = fragment.format();\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.defineProperties)(this, {\r\n            fragment, name, args, signature, selector\r\n        });\r\n    }\r\n}\r\n/**\r\n *  An **Indexed** is used as a value when a value that does not\r\n *  fit within a topic (i.e. not a fixed-length, 32-byte type). It\r\n *  is the ``keccak256`` of the value, and used for types such as\r\n *  arrays, tuples, bytes and strings.\r\n */\r\nclass Indexed {\r\n    /**\r\n     *  The ``keccak256`` of the value logged.\r\n     */\r\n    hash;\r\n    /**\r\n     *  @_ignore:\r\n     */\r\n    _isIndexed;\r\n    /**\r\n     *  Returns ``true`` if %%value%% is an **Indexed**.\r\n     *\r\n     *  This provides a Type Guard for property access.\r\n     */\r\n    static isIndexed(value) {\r\n        return !!(value && value._isIndexed);\r\n    }\r\n    /**\r\n     *  @_ignore:\r\n     */\r\n    constructor(hash) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.defineProperties)(this, { hash, _isIndexed: true });\r\n    }\r\n}\r\n// https://docs.soliditylang.org/en/v0.8.13/control-structures.html?highlight=panic#panic-via-assert-and-error-via-require\r\nconst PanicReasons = {\r\n    \"0\": \"generic panic\",\r\n    \"1\": \"assert(false)\",\r\n    \"17\": \"arithmetic overflow\",\r\n    \"18\": \"division or modulo by zero\",\r\n    \"33\": \"enum overflow\",\r\n    \"34\": \"invalid encoded storage byte array accessed\",\r\n    \"49\": \"out-of-bounds array access; popping on an empty array\",\r\n    \"50\": \"out-of-bounds access of an array or bytesN\",\r\n    \"65\": \"out of memory\",\r\n    \"81\": \"uninitialized function\",\r\n};\r\nconst BuiltinErrors = {\r\n    \"0x08c379a0\": {\r\n        signature: \"Error(string)\",\r\n        name: \"Error\",\r\n        inputs: [\"string\"],\r\n        reason: (message) => {\r\n            return `reverted with reason string ${JSON.stringify(message)}`;\r\n        }\r\n    },\r\n    \"0x4e487b71\": {\r\n        signature: \"Panic(uint256)\",\r\n        name: \"Panic\",\r\n        inputs: [\"uint256\"],\r\n        reason: (code) => {\r\n            let reason = \"unknown panic code\";\r\n            if (code >= 0 && code <= 0xff && PanicReasons[code.toString()]) {\r\n                reason = PanicReasons[code.toString()];\r\n            }\r\n            return `reverted with panic code 0x${code.toString(16)} (${reason})`;\r\n        }\r\n    }\r\n};\r\n/**\r\n *  An Interface abstracts many of the low-level details for\r\n *  encoding and decoding the data on the blockchain.\r\n *\r\n *  An ABI provides information on how to encode data to send to\r\n *  a Contract, how to decode the results and events and how to\r\n *  interpret revert errors.\r\n *\r\n *  The ABI can be specified by [any supported format](InterfaceAbi).\r\n */\r\nclass Interface {\r\n    /**\r\n     *  All the Contract ABI members (i.e. methods, events, errors, etc).\r\n     */\r\n    fragments;\r\n    /**\r\n     *  The Contract constructor.\r\n     */\r\n    deploy;\r\n    /**\r\n     *  The Fallback method, if any.\r\n     */\r\n    fallback;\r\n    /**\r\n     *  If receiving ether is supported.\r\n     */\r\n    receive;\r\n    #errors;\r\n    #events;\r\n    #functions;\r\n    //    #structs: Map<string, StructFragment>;\r\n    #abiCoder;\r\n    /**\r\n     *  Create a new Interface for the %%fragments%%.\r\n     */\r\n    constructor(fragments) {\r\n        let abi = [];\r\n        if (typeof (fragments) === \"string\") {\r\n            abi = JSON.parse(fragments);\r\n        }\r\n        else {\r\n            abi = fragments;\r\n        }\r\n        this.#functions = new Map();\r\n        this.#errors = new Map();\r\n        this.#events = new Map();\r\n        //        this.#structs = new Map();\r\n        const frags = [];\r\n        for (const a of abi) {\r\n            try {\r\n                frags.push(_fragments_js__WEBPACK_IMPORTED_MODULE_2__.Fragment.from(a));\r\n            }\r\n            catch (error) {\r\n                console.log(`[Warning] Invalid Fragment ${JSON.stringify(a)}:`, error.message);\r\n            }\r\n        }\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.defineProperties)(this, {\r\n            fragments: Object.freeze(frags)\r\n        });\r\n        let fallback = null;\r\n        let receive = false;\r\n        this.#abiCoder = this.getAbiCoder();\r\n        // Add all fragments by their signature\r\n        this.fragments.forEach((fragment, index) => {\r\n            let bucket;\r\n            switch (fragment.type) {\r\n                case \"constructor\":\r\n                    if (this.deploy) {\r\n                        console.log(\"duplicate definition - constructor\");\r\n                        return;\r\n                    }\r\n                    //checkNames(fragment, \"input\", fragment.inputs);\r\n                    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.defineProperties)(this, { deploy: fragment });\r\n                    return;\r\n                case \"fallback\":\r\n                    if (fragment.inputs.length === 0) {\r\n                        receive = true;\r\n                    }\r\n                    else {\r\n                        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(!fallback || fragment.payable !== fallback.payable, \"conflicting fallback fragments\", `fragments[${index}]`, fragment);\r\n                        fallback = fragment;\r\n                        receive = fallback.payable;\r\n                    }\r\n                    return;\r\n                case \"function\":\r\n                    //checkNames(fragment, \"input\", fragment.inputs);\r\n                    //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\r\n                    bucket = this.#functions;\r\n                    break;\r\n                case \"event\":\r\n                    //checkNames(fragment, \"input\", fragment.inputs);\r\n                    bucket = this.#events;\r\n                    break;\r\n                case \"error\":\r\n                    bucket = this.#errors;\r\n                    break;\r\n                default:\r\n                    return;\r\n            }\r\n            // Two identical entries; ignore it\r\n            const signature = fragment.format();\r\n            if (bucket.has(signature)) {\r\n                return;\r\n            }\r\n            bucket.set(signature, fragment);\r\n        });\r\n        // If we do not have a constructor add a default\r\n        if (!this.deploy) {\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.defineProperties)(this, {\r\n                deploy: _fragments_js__WEBPACK_IMPORTED_MODULE_2__.ConstructorFragment.from(\"constructor()\")\r\n            });\r\n        }\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.defineProperties)(this, { fallback, receive });\r\n    }\r\n    /**\r\n     *  Returns the entire Human-Readable ABI, as an array of\r\n     *  signatures, optionally as %%minimal%% strings, which\r\n     *  removes parameter names and unneceesary spaces.\r\n     */\r\n    format(minimal) {\r\n        const format = (minimal ? \"minimal\" : \"full\");\r\n        const abi = this.fragments.map((f) => f.format(format));\r\n        return abi;\r\n    }\r\n    /**\r\n     *  Return the JSON-encoded ABI. This is the format Solidiy\r\n     *  returns.\r\n     */\r\n    formatJson() {\r\n        const abi = this.fragments.map((f) => f.format(\"json\"));\r\n        // We need to re-bundle the JSON fragments a bit\r\n        return JSON.stringify(abi.map((j) => JSON.parse(j)));\r\n    }\r\n    /**\r\n     *  The ABI coder that will be used to encode and decode binary\r\n     *  data.\r\n     */\r\n    getAbiCoder() {\r\n        return _abi_coder_js__WEBPACK_IMPORTED_MODULE_3__.AbiCoder.defaultAbiCoder();\r\n    }\r\n    // Find a function definition by any means necessary (unless it is ambiguous)\r\n    #getFunction(key, values, forceUnique) {\r\n        // Selector\r\n        if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.isHexString)(key)) {\r\n            const selector = key.toLowerCase();\r\n            for (const fragment of this.#functions.values()) {\r\n                if (selector === fragment.selector) {\r\n                    return fragment;\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n        // It is a bare name, look up the function (will return null if ambiguous)\r\n        if (key.indexOf(\"(\") === -1) {\r\n            const matching = [];\r\n            for (const [name, fragment] of this.#functions) {\r\n                if (name.split(\"(\" /* fix:) */)[0] === key) {\r\n                    matching.push(fragment);\r\n                }\r\n            }\r\n            if (values) {\r\n                const lastValue = (values.length > 0) ? values[values.length - 1] : null;\r\n                let valueLength = values.length;\r\n                let allowOptions = true;\r\n                if (_typed_js__WEBPACK_IMPORTED_MODULE_4__.Typed.isTyped(lastValue) && lastValue.type === \"overrides\") {\r\n                    allowOptions = false;\r\n                    valueLength--;\r\n                }\r\n                // Remove all matches that don't have a compatible length. The args\r\n                // may contain an overrides, so the match may have n or n - 1 parameters\r\n                for (let i = matching.length - 1; i >= 0; i--) {\r\n                    const inputs = matching[i].inputs.length;\r\n                    if (inputs !== valueLength && (!allowOptions || inputs !== valueLength - 1)) {\r\n                        matching.splice(i, 1);\r\n                    }\r\n                }\r\n                // Remove all matches that don't match the Typed signature\r\n                for (let i = matching.length - 1; i >= 0; i--) {\r\n                    const inputs = matching[i].inputs;\r\n                    for (let j = 0; j < values.length; j++) {\r\n                        // Not a typed value\r\n                        if (!_typed_js__WEBPACK_IMPORTED_MODULE_4__.Typed.isTyped(values[j])) {\r\n                            continue;\r\n                        }\r\n                        // We are past the inputs\r\n                        if (j >= inputs.length) {\r\n                            if (values[j].type === \"overrides\") {\r\n                                continue;\r\n                            }\r\n                            matching.splice(i, 1);\r\n                            break;\r\n                        }\r\n                        // Make sure the value type matches the input type\r\n                        if (values[j].type !== inputs[j].baseType) {\r\n                            matching.splice(i, 1);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // We found a single matching signature with an overrides, but the\r\n            // last value is something that cannot possibly be an options\r\n            if (matching.length === 1 && values && values.length !== matching[0].inputs.length) {\r\n                const lastArg = values[values.length - 1];\r\n                if (lastArg == null || Array.isArray(lastArg) || typeof (lastArg) !== \"object\") {\r\n                    matching.splice(0, 1);\r\n                }\r\n            }\r\n            if (matching.length === 0) {\r\n                return null;\r\n            }\r\n            if (matching.length > 1 && forceUnique) {\r\n                const matchStr = matching.map((m) => JSON.stringify(m.format())).join(\", \");\r\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(false, `ambiguous function description (i.e. matches ${matchStr})`, \"key\", key);\r\n            }\r\n            return matching[0];\r\n        }\r\n        // Normalize the signature and lookup the function\r\n        const result = this.#functions.get(_fragments_js__WEBPACK_IMPORTED_MODULE_2__.FunctionFragment.from(key).format());\r\n        if (result) {\r\n            return result;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     *  Get the function name for %%key%%, which may be a function selector,\r\n     *  function name or function signature that belongs to the ABI.\r\n     */\r\n    getFunctionName(key) {\r\n        const fragment = this.#getFunction(key, null, false);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(fragment, \"no matching function\", \"key\", key);\r\n        return fragment.name;\r\n    }\r\n    /**\r\n     *  Returns true if %%key%% (a function selector, function name or\r\n     *  function signature) is present in the ABI.\r\n     *\r\n     *  In the case of a function name, the name may be ambiguous, so\r\n     *  accessing the [[FunctionFragment]] may require refinement.\r\n     */\r\n    hasFunction(key) {\r\n        return !!this.#getFunction(key, null, false);\r\n    }\r\n    /**\r\n     *  Get the [[FunctionFragment]] for %%key%%, which may be a function\r\n     *  selector, function name or function signature that belongs to the ABI.\r\n     *\r\n     *  If %%values%% is provided, it will use the Typed API to handle\r\n     *  ambiguous cases where multiple functions match by name.\r\n     *\r\n     *  If the %%key%% and %%values%% do not refine to a single function in\r\n     *  the ABI, this will throw.\r\n     */\r\n    getFunction(key, values) {\r\n        return this.#getFunction(key, values || null, true);\r\n    }\r\n    /**\r\n     *  Iterate over all functions, calling %%callback%%, sorted by their name.\r\n     */\r\n    forEachFunction(callback) {\r\n        const names = Array.from(this.#functions.keys());\r\n        names.sort((a, b) => a.localeCompare(b));\r\n        for (let i = 0; i < names.length; i++) {\r\n            const name = names[i];\r\n            callback((this.#functions.get(name)), i);\r\n        }\r\n    }\r\n    // Find an event definition by any means necessary (unless it is ambiguous)\r\n    #getEvent(key, values, forceUnique) {\r\n        // EventTopic\r\n        if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.isHexString)(key)) {\r\n            const eventTopic = key.toLowerCase();\r\n            for (const fragment of this.#events.values()) {\r\n                if (eventTopic === fragment.topicHash) {\r\n                    return fragment;\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n        // It is a bare name, look up the function (will return null if ambiguous)\r\n        if (key.indexOf(\"(\") === -1) {\r\n            const matching = [];\r\n            for (const [name, fragment] of this.#events) {\r\n                if (name.split(\"(\" /* fix:) */)[0] === key) {\r\n                    matching.push(fragment);\r\n                }\r\n            }\r\n            if (values) {\r\n                // Remove all matches that don't have a compatible length.\r\n                for (let i = matching.length - 1; i >= 0; i--) {\r\n                    if (matching[i].inputs.length < values.length) {\r\n                        matching.splice(i, 1);\r\n                    }\r\n                }\r\n                // Remove all matches that don't match the Typed signature\r\n                for (let i = matching.length - 1; i >= 0; i--) {\r\n                    const inputs = matching[i].inputs;\r\n                    for (let j = 0; j < values.length; j++) {\r\n                        // Not a typed value\r\n                        if (!_typed_js__WEBPACK_IMPORTED_MODULE_4__.Typed.isTyped(values[j])) {\r\n                            continue;\r\n                        }\r\n                        // Make sure the value type matches the input type\r\n                        if (values[j].type !== inputs[j].baseType) {\r\n                            matching.splice(i, 1);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (matching.length === 0) {\r\n                return null;\r\n            }\r\n            if (matching.length > 1 && forceUnique) {\r\n                const matchStr = matching.map((m) => JSON.stringify(m.format())).join(\", \");\r\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(false, `ambiguous event description (i.e. matches ${matchStr})`, \"key\", key);\r\n            }\r\n            return matching[0];\r\n        }\r\n        // Normalize the signature and lookup the function\r\n        const result = this.#events.get(_fragments_js__WEBPACK_IMPORTED_MODULE_2__.EventFragment.from(key).format());\r\n        if (result) {\r\n            return result;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     *  Get the event name for %%key%%, which may be a topic hash,\r\n     *  event name or event signature that belongs to the ABI.\r\n     */\r\n    getEventName(key) {\r\n        const fragment = this.#getEvent(key, null, false);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(fragment, \"no matching event\", \"key\", key);\r\n        return fragment.name;\r\n    }\r\n    /**\r\n     *  Returns true if %%key%% (an event topic hash, event name or\r\n     *  event signature) is present in the ABI.\r\n     *\r\n     *  In the case of an event name, the name may be ambiguous, so\r\n     *  accessing the [[EventFragment]] may require refinement.\r\n     */\r\n    hasEvent(key) {\r\n        return !!this.#getEvent(key, null, false);\r\n    }\r\n    /**\r\n     *  Get the [[EventFragment]] for %%key%%, which may be a topic hash,\r\n     *  event name or event signature that belongs to the ABI.\r\n     *\r\n     *  If %%values%% is provided, it will use the Typed API to handle\r\n     *  ambiguous cases where multiple events match by name.\r\n     *\r\n     *  If the %%key%% and %%values%% do not refine to a single event in\r\n     *  the ABI, this will throw.\r\n     */\r\n    getEvent(key, values) {\r\n        return this.#getEvent(key, values || null, true);\r\n    }\r\n    /**\r\n     *  Iterate over all events, calling %%callback%%, sorted by their name.\r\n     */\r\n    forEachEvent(callback) {\r\n        const names = Array.from(this.#events.keys());\r\n        names.sort((a, b) => a.localeCompare(b));\r\n        for (let i = 0; i < names.length; i++) {\r\n            const name = names[i];\r\n            callback((this.#events.get(name)), i);\r\n        }\r\n    }\r\n    /**\r\n     *  Get the [[ErrorFragment]] for %%key%%, which may be an error\r\n     *  selector, error name or error signature that belongs to the ABI.\r\n     *\r\n     *  If %%values%% is provided, it will use the Typed API to handle\r\n     *  ambiguous cases where multiple errors match by name.\r\n     *\r\n     *  If the %%key%% and %%values%% do not refine to a single error in\r\n     *  the ABI, this will throw.\r\n     */\r\n    getError(key, values) {\r\n        if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.isHexString)(key)) {\r\n            const selector = key.toLowerCase();\r\n            if (BuiltinErrors[selector]) {\r\n                return _fragments_js__WEBPACK_IMPORTED_MODULE_2__.ErrorFragment.from(BuiltinErrors[selector].signature);\r\n            }\r\n            for (const fragment of this.#errors.values()) {\r\n                if (selector === fragment.selector) {\r\n                    return fragment;\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n        // It is a bare name, look up the function (will return null if ambiguous)\r\n        if (key.indexOf(\"(\") === -1) {\r\n            const matching = [];\r\n            for (const [name, fragment] of this.#errors) {\r\n                if (name.split(\"(\" /* fix:) */)[0] === key) {\r\n                    matching.push(fragment);\r\n                }\r\n            }\r\n            if (matching.length === 0) {\r\n                if (key === \"Error\") {\r\n                    return _fragments_js__WEBPACK_IMPORTED_MODULE_2__.ErrorFragment.from(\"error Error(string)\");\r\n                }\r\n                if (key === \"Panic\") {\r\n                    return _fragments_js__WEBPACK_IMPORTED_MODULE_2__.ErrorFragment.from(\"error Panic(uint256)\");\r\n                }\r\n                return null;\r\n            }\r\n            else if (matching.length > 1) {\r\n                const matchStr = matching.map((m) => JSON.stringify(m.format())).join(\", \");\r\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(false, `ambiguous error description (i.e. ${matchStr})`, \"name\", key);\r\n            }\r\n            return matching[0];\r\n        }\r\n        // Normalize the signature and lookup the function\r\n        key = _fragments_js__WEBPACK_IMPORTED_MODULE_2__.ErrorFragment.from(key).format();\r\n        if (key === \"Error(string)\") {\r\n            return _fragments_js__WEBPACK_IMPORTED_MODULE_2__.ErrorFragment.from(\"error Error(string)\");\r\n        }\r\n        if (key === \"Panic(uint256)\") {\r\n            return _fragments_js__WEBPACK_IMPORTED_MODULE_2__.ErrorFragment.from(\"error Panic(uint256)\");\r\n        }\r\n        const result = this.#errors.get(key);\r\n        if (result) {\r\n            return result;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     *  Iterate over all errors, calling %%callback%%, sorted by their name.\r\n     */\r\n    forEachError(callback) {\r\n        const names = Array.from(this.#errors.keys());\r\n        names.sort((a, b) => a.localeCompare(b));\r\n        for (let i = 0; i < names.length; i++) {\r\n            const name = names[i];\r\n            callback((this.#errors.get(name)), i);\r\n        }\r\n    }\r\n    // Get the 4-byte selector used by Solidity to identify a function\r\n    /*\r\ngetSelector(fragment: ErrorFragment | FunctionFragment): string {\r\n    if (typeof(fragment) === \"string\") {\r\n        const matches: Array<Fragment> = [ ];\r\n\r\n        try { matches.push(this.getFunction(fragment)); } catch (error) { }\r\n        try { matches.push(this.getError(<string>fragment)); } catch (_) { }\r\n\r\n        if (matches.length === 0) {\r\n            logger.throwArgumentError(\"unknown fragment\", \"key\", fragment);\r\n        } else if (matches.length > 1) {\r\n            logger.throwArgumentError(\"ambiguous fragment matches function and error\", \"key\", fragment);\r\n        }\r\n\r\n        fragment = matches[0];\r\n    }\r\n\r\n    return dataSlice(id(fragment.format()), 0, 4);\r\n}\r\n    */\r\n    // Get the 32-byte topic hash used by Solidity to identify an event\r\n    /*\r\n    getEventTopic(fragment: EventFragment): string {\r\n        //if (typeof(fragment) === \"string\") { fragment = this.getEvent(eventFragment); }\r\n        return id(fragment.format());\r\n    }\r\n    */\r\n    _decodeParams(params, data) {\r\n        return this.#abiCoder.decode(params, data);\r\n    }\r\n    _encodeParams(params, values) {\r\n        return this.#abiCoder.encode(params, values);\r\n    }\r\n    /**\r\n     *  Encodes a ``tx.data`` object for deploying the Contract with\r\n     *  the %%values%% as the constructor arguments.\r\n     */\r\n    encodeDeploy(values) {\r\n        return this._encodeParams(this.deploy.inputs, values || []);\r\n    }\r\n    /**\r\n     *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the\r\n     *  specified error (see [[getError]] for valid values for\r\n     *  %%key%%).\r\n     *\r\n     *  Most developers should prefer the [[parseCallResult]] method instead,\r\n     *  which will automatically detect a ``CALL_EXCEPTION`` and throw the\r\n     *  corresponding error.\r\n     */\r\n    decodeErrorResult(fragment, data) {\r\n        if (typeof (fragment) === \"string\") {\r\n            const f = this.getError(fragment);\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(f, \"unknown error\", \"fragment\", fragment);\r\n            fragment = f;\r\n        }\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.dataSlice)(data, 0, 4) === fragment.selector, `data signature does not match error ${fragment.name}.`, \"data\", data);\r\n        return this._decodeParams(fragment.inputs, (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.dataSlice)(data, 4));\r\n    }\r\n    /**\r\n     *  Encodes the transaction revert data for a call result that\r\n     *  reverted from the the Contract with the sepcified %%error%%\r\n     *  (see [[getError]] for valid values for %%fragment%%) with the %%values%%.\r\n     *\r\n     *  This is generally not used by most developers, unless trying to mock\r\n     *  a result from a Contract.\r\n     */\r\n    encodeErrorResult(fragment, values) {\r\n        if (typeof (fragment) === \"string\") {\r\n            const f = this.getError(fragment);\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(f, \"unknown error\", \"fragment\", fragment);\r\n            fragment = f;\r\n        }\r\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.concat)([\r\n            fragment.selector,\r\n            this._encodeParams(fragment.inputs, values || [])\r\n        ]);\r\n    }\r\n    /**\r\n     *  Decodes the %%data%% from a transaction ``tx.data`` for\r\n     *  the function specified (see [[getFunction]] for valid values\r\n     *  for %%fragment%%).\r\n     *\r\n     *  Most developers should prefer the [[parseTransaction]] method\r\n     *  instead, which will automatically detect the fragment.\r\n     */\r\n    decodeFunctionData(fragment, data) {\r\n        if (typeof (fragment) === \"string\") {\r\n            const f = this.getFunction(fragment);\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(f, \"unknown function\", \"fragment\", fragment);\r\n            fragment = f;\r\n        }\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.dataSlice)(data, 0, 4) === fragment.selector, `data signature does not match function ${fragment.name}.`, \"data\", data);\r\n        return this._decodeParams(fragment.inputs, (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.dataSlice)(data, 4));\r\n    }\r\n    /**\r\n     *  Encodes the ``tx.data`` for a transaction that calls the function\r\n     *  specified (see [[getFunction]] for valid values for %%fragment%%) with\r\n     *  the %%values%%.\r\n     */\r\n    encodeFunctionData(fragment, values) {\r\n        if (typeof (fragment) === \"string\") {\r\n            const f = this.getFunction(fragment);\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(f, \"unknown function\", \"fragment\", fragment);\r\n            fragment = f;\r\n        }\r\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.concat)([\r\n            fragment.selector,\r\n            this._encodeParams(fragment.inputs, values || [])\r\n        ]);\r\n    }\r\n    /**\r\n     *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the\r\n     *  specified function (see [[getFunction]] for valid values for\r\n     *  %%key%%).\r\n     *\r\n     *  Most developers should prefer the [[parseCallResult]] method instead,\r\n     *  which will automatically detect a ``CALL_EXCEPTION`` and throw the\r\n     *  corresponding error.\r\n     */\r\n    decodeFunctionResult(fragment, data) {\r\n        if (typeof (fragment) === \"string\") {\r\n            const f = this.getFunction(fragment);\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(f, \"unknown function\", \"fragment\", fragment);\r\n            fragment = f;\r\n        }\r\n        let message = \"invalid length for result data\";\r\n        const bytes = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBytesCopy)(data);\r\n        if ((bytes.length % 32) === 0) {\r\n            try {\r\n                return this.#abiCoder.decode(fragment.outputs, bytes);\r\n            }\r\n            catch (error) {\r\n                message = \"could not decode result data\";\r\n            }\r\n        }\r\n        // Call returned data with no error, but the data is junk\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assert)(false, message, \"BAD_DATA\", {\r\n            value: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.hexlify)(bytes),\r\n            info: { method: fragment.name, signature: fragment.format() }\r\n        });\r\n    }\r\n    makeError(_data, tx) {\r\n        const data = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBytes)(_data, \"data\");\r\n        const error = _abi_coder_js__WEBPACK_IMPORTED_MODULE_3__.AbiCoder.getBuiltinCallException(\"call\", tx, data);\r\n        // Not a built-in error; try finding a custom error\r\n        const customPrefix = \"execution reverted (unknown custom error)\";\r\n        if (error.message.startsWith(customPrefix)) {\r\n            const selector = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.hexlify)(data.slice(0, 4));\r\n            const ef = this.getError(selector);\r\n            if (ef) {\r\n                try {\r\n                    const args = this.#abiCoder.decode(ef.inputs, data.slice(4));\r\n                    error.revert = {\r\n                        name: ef.name, signature: ef.format(), args\r\n                    };\r\n                    error.reason = error.revert.signature;\r\n                    error.message = `execution reverted: ${error.reason}`;\r\n                }\r\n                catch (e) {\r\n                    error.message = `execution reverted (coult not decode custom error)`;\r\n                }\r\n            }\r\n        }\r\n        // Add the invocation, if available\r\n        const parsed = this.parseTransaction(tx);\r\n        if (parsed) {\r\n            error.invocation = {\r\n                method: parsed.name,\r\n                signature: parsed.signature,\r\n                args: parsed.args\r\n            };\r\n        }\r\n        return error;\r\n    }\r\n    /**\r\n     *  Encodes the result data (e.g. from an ``eth_call``) for the\r\n     *  specified function (see [[getFunction]] for valid values\r\n     *  for %%fragment%%) with %%values%%.\r\n     *\r\n     *  This is generally not used by most developers, unless trying to mock\r\n     *  a result from a Contract.\r\n     */\r\n    encodeFunctionResult(fragment, values) {\r\n        if (typeof (fragment) === \"string\") {\r\n            const f = this.getFunction(fragment);\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(f, \"unknown function\", \"fragment\", fragment);\r\n            fragment = f;\r\n        }\r\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.hexlify)(this.#abiCoder.encode(fragment.outputs, values || []));\r\n    }\r\n    /*\r\n        spelunk(inputs: Array<ParamType>, values: ReadonlyArray<any>, processfunc: (type: string, value: any) => Promise<any>): Promise<Array<any>> {\r\n            const promises: Array<Promise<>> = [ ];\r\n            const process = function(type: ParamType, value: any): any {\r\n                if (type.baseType === \"array\") {\r\n                    return descend(type.child\r\n                }\r\n                if (type. === \"address\") {\r\n                }\r\n            };\r\n    \r\n            const descend = function (inputs: Array<ParamType>, values: ReadonlyArray<any>) {\r\n                if (inputs.length !== values.length) { throw new Error(\"length mismatch\"); }\r\n                \r\n            };\r\n    \r\n            const result: Array<any> = [ ];\r\n            values.forEach((value, index) => {\r\n                if (value == null) {\r\n                    topics.push(null);\r\n                } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\r\n                    logger.throwArgumentError(\"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\r\n                } else if (Array.isArray(value)) {\r\n                    topics.push(value.map((value) => encodeTopic(param, value)));\r\n                } else {\r\n                    topics.push(encodeTopic(param, value));\r\n                }\r\n            });\r\n        }\r\n    */\r\n    // Create the filter for the event with search criteria (e.g. for eth_filterLog)\r\n    encodeFilterTopics(fragment, values) {\r\n        if (typeof (fragment) === \"string\") {\r\n            const f = this.getEvent(fragment);\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(f, \"unknown event\", \"eventFragment\", fragment);\r\n            fragment = f;\r\n        }\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assert)(values.length <= fragment.inputs.length, `too many arguments for ${fragment.format()}`, \"UNEXPECTED_ARGUMENT\", { count: values.length, expectedCount: fragment.inputs.length });\r\n        const topics = [];\r\n        if (!fragment.anonymous) {\r\n            topics.push(fragment.topicHash);\r\n        }\r\n        // @TODO: Use the coders for this; to properly support tuples, etc.\r\n        const encodeTopic = (param, value) => {\r\n            if (param.type === \"string\") {\r\n                return (0,_hash_index_js__WEBPACK_IMPORTED_MODULE_5__.id)(value);\r\n            }\r\n            else if (param.type === \"bytes\") {\r\n                return (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_6__.keccak256)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.hexlify)(value));\r\n            }\r\n            if (param.type === \"bool\" && typeof (value) === \"boolean\") {\r\n                value = (value ? \"0x01\" : \"0x00\");\r\n            }\r\n            else if (param.type.match(/^u?int/)) {\r\n                value = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.toBeHex)(value); // @TODO: Should this toTwos??\r\n            }\r\n            else if (param.type.match(/^bytes/)) {\r\n                value = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.zeroPadBytes)(value, 32);\r\n            }\r\n            else if (param.type === \"address\") {\r\n                // Check addresses are valid\r\n                this.#abiCoder.encode([\"address\"], [value]);\r\n            }\r\n            return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.zeroPadValue)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.hexlify)(value), 32);\r\n        };\r\n        values.forEach((value, index) => {\r\n            const param = fragment.inputs[index];\r\n            if (!param.indexed) {\r\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(value == null, \"cannot filter non-indexed parameters; must be null\", (\"contract.\" + param.name), value);\r\n                return;\r\n            }\r\n            if (value == null) {\r\n                topics.push(null);\r\n            }\r\n            else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\r\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(false, \"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\r\n            }\r\n            else if (Array.isArray(value)) {\r\n                topics.push(value.map((value) => encodeTopic(param, value)));\r\n            }\r\n            else {\r\n                topics.push(encodeTopic(param, value));\r\n            }\r\n        });\r\n        // Trim off trailing nulls\r\n        while (topics.length && topics[topics.length - 1] === null) {\r\n            topics.pop();\r\n        }\r\n        return topics;\r\n    }\r\n    encodeEventLog(fragment, values) {\r\n        if (typeof (fragment) === \"string\") {\r\n            const f = this.getEvent(fragment);\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(f, \"unknown event\", \"eventFragment\", fragment);\r\n            fragment = f;\r\n        }\r\n        const topics = [];\r\n        const dataTypes = [];\r\n        const dataValues = [];\r\n        if (!fragment.anonymous) {\r\n            topics.push(fragment.topicHash);\r\n        }\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(values.length === fragment.inputs.length, \"event arguments/values mismatch\", \"values\", values);\r\n        fragment.inputs.forEach((param, index) => {\r\n            const value = values[index];\r\n            if (param.indexed) {\r\n                if (param.type === \"string\") {\r\n                    topics.push((0,_hash_index_js__WEBPACK_IMPORTED_MODULE_5__.id)(value));\r\n                }\r\n                else if (param.type === \"bytes\") {\r\n                    topics.push((0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_6__.keccak256)(value));\r\n                }\r\n                else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\r\n                    // @TODO\r\n                    throw new Error(\"not implemented\");\r\n                }\r\n                else {\r\n                    topics.push(this.#abiCoder.encode([param.type], [value]));\r\n                }\r\n            }\r\n            else {\r\n                dataTypes.push(param);\r\n                dataValues.push(value);\r\n            }\r\n        });\r\n        return {\r\n            data: this.#abiCoder.encode(dataTypes, dataValues),\r\n            topics: topics\r\n        };\r\n    }\r\n    // Decode a filter for the event and the search criteria\r\n    decodeEventLog(fragment, data, topics) {\r\n        if (typeof (fragment) === \"string\") {\r\n            const f = this.getEvent(fragment);\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(f, \"unknown event\", \"eventFragment\", fragment);\r\n            fragment = f;\r\n        }\r\n        if (topics != null && !fragment.anonymous) {\r\n            const eventTopic = fragment.topicHash;\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.isHexString)(topics[0], 32) && topics[0].toLowerCase() === eventTopic, \"fragment/topic mismatch\", \"topics[0]\", topics[0]);\r\n            topics = topics.slice(1);\r\n        }\r\n        const indexed = [];\r\n        const nonIndexed = [];\r\n        const dynamic = [];\r\n        fragment.inputs.forEach((param, index) => {\r\n            if (param.indexed) {\r\n                if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\r\n                    indexed.push(_fragments_js__WEBPACK_IMPORTED_MODULE_2__.ParamType.from({ type: \"bytes32\", name: param.name }));\r\n                    dynamic.push(true);\r\n                }\r\n                else {\r\n                    indexed.push(param);\r\n                    dynamic.push(false);\r\n                }\r\n            }\r\n            else {\r\n                nonIndexed.push(param);\r\n                dynamic.push(false);\r\n            }\r\n        });\r\n        const resultIndexed = (topics != null) ? this.#abiCoder.decode(indexed, (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.concat)(topics)) : null;\r\n        const resultNonIndexed = this.#abiCoder.decode(nonIndexed, data, true);\r\n        //const result: (Array<any> & { [ key: string ]: any }) = [ ];\r\n        const values = [];\r\n        const keys = [];\r\n        let nonIndexedIndex = 0, indexedIndex = 0;\r\n        fragment.inputs.forEach((param, index) => {\r\n            let value = null;\r\n            if (param.indexed) {\r\n                if (resultIndexed == null) {\r\n                    value = new Indexed(null);\r\n                }\r\n                else if (dynamic[index]) {\r\n                    value = new Indexed(resultIndexed[indexedIndex++]);\r\n                }\r\n                else {\r\n                    try {\r\n                        value = resultIndexed[indexedIndex++];\r\n                    }\r\n                    catch (error) {\r\n                        value = error;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                try {\r\n                    value = resultNonIndexed[nonIndexedIndex++];\r\n                }\r\n                catch (error) {\r\n                    value = error;\r\n                }\r\n            }\r\n            values.push(value);\r\n            keys.push(param.name || null);\r\n        });\r\n        return _coders_abstract_coder_js__WEBPACK_IMPORTED_MODULE_0__.Result.fromItems(values, keys);\r\n    }\r\n    /**\r\n     *  Parses a transaction, finding the matching function and extracts\r\n     *  the parameter values along with other useful function details.\r\n     *\r\n     *  If the matching function cannot be found, return null.\r\n     */\r\n    parseTransaction(tx) {\r\n        const data = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBytes)(tx.data, \"tx.data\");\r\n        const value = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBigInt)((tx.value != null) ? tx.value : 0, \"tx.value\");\r\n        const fragment = this.getFunction((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.hexlify)(data.slice(0, 4)));\r\n        if (!fragment) {\r\n            return null;\r\n        }\r\n        const args = this.#abiCoder.decode(fragment.inputs, data.slice(4));\r\n        return new TransactionDescription(fragment, fragment.selector, args, value);\r\n    }\r\n    parseCallResult(data) {\r\n        throw new Error(\"@TODO\");\r\n    }\r\n    /**\r\n     *  Parses a receipt log, finding the matching event and extracts\r\n     *  the parameter values along with other useful event details.\r\n     *\r\n     *  If the matching event cannot be found, returns null.\r\n     */\r\n    parseLog(log) {\r\n        const fragment = this.getEvent(log.topics[0]);\r\n        if (!fragment || fragment.anonymous) {\r\n            return null;\r\n        }\r\n        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\r\n        //        Probably not, because just because it is the only event in the ABI does\r\n        //        not mean we have the full ABI; maybe just a fragment?\r\n        return new LogDescription(fragment, fragment.topicHash, this.decodeEventLog(fragment, log.data, log.topics));\r\n    }\r\n    /**\r\n     *  Parses a revert data, finding the matching error and extracts\r\n     *  the parameter values along with other useful error details.\r\n     *\r\n     *  If the matching error cannot be found, returns null.\r\n     */\r\n    parseError(data) {\r\n        const hexData = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.hexlify)(data);\r\n        const fragment = this.getError((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.dataSlice)(hexData, 0, 4));\r\n        if (!fragment) {\r\n            return null;\r\n        }\r\n        const args = this.#abiCoder.decode(fragment.inputs, (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.dataSlice)(hexData, 4));\r\n        return new ErrorDescription(fragment, fragment.selector, args);\r\n    }\r\n    /**\r\n     *  Creates a new [[Interface]] from the ABI %%value%%.\r\n     *\r\n     *  The %%value%% may be provided as an existing [[Interface]] object,\r\n     *  a JSON-encoded ABI or any Human-Readable ABI format.\r\n     */\r\n    static from(value) {\r\n        // Already an Interface, which is immutable\r\n        if (value instanceof Interface) {\r\n            return value;\r\n        }\r\n        // JSON\r\n        if (typeof (value) === \"string\") {\r\n            return new Interface(JSON.parse(value));\r\n        }\r\n        // An Interface; possibly from another v6 instance\r\n        if (typeof (value.formatJson) === \"function\") {\r\n            return new Interface(value.formatJson());\r\n        }\r\n        // A legacy Interface; from an older version\r\n        if (typeof (value.format) === \"function\") {\r\n            return new Interface(value.format(\"json\"));\r\n        }\r\n        // Array of fragments\r\n        return new Interface(value);\r\n    }\r\n}\r\n//# sourceMappingURL=interface.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/interface.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/typed.js":
/*!**************************************************!*\
  !*** ./node_modules/ethers/lib.esm/abi/typed.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Typed: () => (/* binding */ Typed)\n/* harmony export */ });\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/**\r\n *  A Typed object allows a value to have its type explicitly\r\n *  specified.\r\n *\r\n *  For example, in Solidity, the value ``45`` could represent a\r\n *  ``uint8`` or a ``uint256``. The value ``0x1234`` could represent\r\n *  a ``bytes2`` or ``bytes``.\r\n *\r\n *  Since JavaScript has no meaningful way to explicitly inform any\r\n *  APIs which what the type is, this allows transparent interoperation\r\n *  with Soldity.\r\n *\r\n *  @_subsection: api/abi:Typed Values\r\n */\r\n\r\nconst _gaurd = {};\r\nfunction n(value, width) {\r\n    let signed = false;\r\n    if (width < 0) {\r\n        signed = true;\r\n        width *= -1;\r\n    }\r\n    // @TODO: Check range is valid for value\r\n    return new Typed(_gaurd, `${signed ? \"\" : \"u\"}int${width}`, value, { signed, width });\r\n}\r\nfunction b(value, size) {\r\n    // @TODO: Check range is valid for value\r\n    return new Typed(_gaurd, `bytes${(size) ? size : \"\"}`, value, { size });\r\n}\r\nconst _typedSymbol = Symbol.for(\"_ethers_typed\");\r\n/**\r\n *  The **Typed** class to wrap values providing explicit type information.\r\n */\r\nclass Typed {\r\n    /**\r\n     *  The type, as a Solidity-compatible type.\r\n     */\r\n    type;\r\n    /**\r\n     *  The actual value.\r\n     */\r\n    value;\r\n    #options;\r\n    /**\r\n     *  @_ignore:\r\n     */\r\n    _typedSymbol;\r\n    /**\r\n     *  @_ignore:\r\n     */\r\n    constructor(gaurd, type, value, options) {\r\n        if (options == null) {\r\n            options = null;\r\n        }\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertPrivate)(_gaurd, gaurd, \"Typed\");\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, { _typedSymbol, type, value });\r\n        this.#options = options;\r\n        // Check the value is valid\r\n        this.format();\r\n    }\r\n    /**\r\n     *  Format the type as a Human-Readable type.\r\n     */\r\n    format() {\r\n        if (this.type === \"array\") {\r\n            throw new Error(\"\");\r\n        }\r\n        else if (this.type === \"dynamicArray\") {\r\n            throw new Error(\"\");\r\n        }\r\n        else if (this.type === \"tuple\") {\r\n            return `tuple(${this.value.map((v) => v.format()).join(\",\")})`;\r\n        }\r\n        return this.type;\r\n    }\r\n    /**\r\n     *  The default value returned by this type.\r\n     */\r\n    defaultValue() {\r\n        return 0;\r\n    }\r\n    /**\r\n     *  The minimum value for numeric types.\r\n     */\r\n    minValue() {\r\n        return 0;\r\n    }\r\n    /**\r\n     *  The maximum value for numeric types.\r\n     */\r\n    maxValue() {\r\n        return 0;\r\n    }\r\n    /**\r\n     *  Returns ``true`` and provides a type guard is this is a [[TypedBigInt]].\r\n     */\r\n    isBigInt() {\r\n        return !!(this.type.match(/^u?int[0-9]+$/));\r\n    }\r\n    /**\r\n     *  Returns ``true`` and provides a type guard is this is a [[TypedData]].\r\n     */\r\n    isData() {\r\n        return this.type.startsWith(\"bytes\");\r\n    }\r\n    /**\r\n     *  Returns ``true`` and provides a type guard is this is a [[TypedString]].\r\n     */\r\n    isString() {\r\n        return (this.type === \"string\");\r\n    }\r\n    /**\r\n     *  Returns the tuple name, if this is a tuple. Throws otherwise.\r\n     */\r\n    get tupleName() {\r\n        if (this.type !== \"tuple\") {\r\n            throw TypeError(\"not a tuple\");\r\n        }\r\n        return this.#options;\r\n    }\r\n    // Returns the length of this type as an array\r\n    // - `null` indicates the length is unforced, it could be dynamic\r\n    // - `-1` indicates the length is dynamic\r\n    // - any other value indicates it is a static array and is its length\r\n    /**\r\n     *  Returns the length of the array type or ``-1`` if it is dynamic.\r\n     *\r\n     *  Throws if the type is not an array.\r\n     */\r\n    get arrayLength() {\r\n        if (this.type !== \"array\") {\r\n            throw TypeError(\"not an array\");\r\n        }\r\n        if (this.#options === true) {\r\n            return -1;\r\n        }\r\n        if (this.#options === false) {\r\n            return (this.value).length;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     *  Returns a new **Typed** of %%type%% with the %%value%%.\r\n     */\r\n    static from(type, value) {\r\n        return new Typed(_gaurd, type, value);\r\n    }\r\n    /**\r\n     *  Return a new ``uint8`` type for %%v%%.\r\n     */\r\n    static uint8(v) { return n(v, 8); }\r\n    /**\r\n     *  Return a new ``uint16`` type for %%v%%.\r\n     */\r\n    static uint16(v) { return n(v, 16); }\r\n    /**\r\n     *  Return a new ``uint24`` type for %%v%%.\r\n     */\r\n    static uint24(v) { return n(v, 24); }\r\n    /**\r\n     *  Return a new ``uint32`` type for %%v%%.\r\n     */\r\n    static uint32(v) { return n(v, 32); }\r\n    /**\r\n     *  Return a new ``uint40`` type for %%v%%.\r\n     */\r\n    static uint40(v) { return n(v, 40); }\r\n    /**\r\n     *  Return a new ``uint48`` type for %%v%%.\r\n     */\r\n    static uint48(v) { return n(v, 48); }\r\n    /**\r\n     *  Return a new ``uint56`` type for %%v%%.\r\n     */\r\n    static uint56(v) { return n(v, 56); }\r\n    /**\r\n     *  Return a new ``uint64`` type for %%v%%.\r\n     */\r\n    static uint64(v) { return n(v, 64); }\r\n    /**\r\n     *  Return a new ``uint72`` type for %%v%%.\r\n     */\r\n    static uint72(v) { return n(v, 72); }\r\n    /**\r\n     *  Return a new ``uint80`` type for %%v%%.\r\n     */\r\n    static uint80(v) { return n(v, 80); }\r\n    /**\r\n     *  Return a new ``uint88`` type for %%v%%.\r\n     */\r\n    static uint88(v) { return n(v, 88); }\r\n    /**\r\n     *  Return a new ``uint96`` type for %%v%%.\r\n     */\r\n    static uint96(v) { return n(v, 96); }\r\n    /**\r\n     *  Return a new ``uint104`` type for %%v%%.\r\n     */\r\n    static uint104(v) { return n(v, 104); }\r\n    /**\r\n     *  Return a new ``uint112`` type for %%v%%.\r\n     */\r\n    static uint112(v) { return n(v, 112); }\r\n    /**\r\n     *  Return a new ``uint120`` type for %%v%%.\r\n     */\r\n    static uint120(v) { return n(v, 120); }\r\n    /**\r\n     *  Return a new ``uint128`` type for %%v%%.\r\n     */\r\n    static uint128(v) { return n(v, 128); }\r\n    /**\r\n     *  Return a new ``uint136`` type for %%v%%.\r\n     */\r\n    static uint136(v) { return n(v, 136); }\r\n    /**\r\n     *  Return a new ``uint144`` type for %%v%%.\r\n     */\r\n    static uint144(v) { return n(v, 144); }\r\n    /**\r\n     *  Return a new ``uint152`` type for %%v%%.\r\n     */\r\n    static uint152(v) { return n(v, 152); }\r\n    /**\r\n     *  Return a new ``uint160`` type for %%v%%.\r\n     */\r\n    static uint160(v) { return n(v, 160); }\r\n    /**\r\n     *  Return a new ``uint168`` type for %%v%%.\r\n     */\r\n    static uint168(v) { return n(v, 168); }\r\n    /**\r\n     *  Return a new ``uint176`` type for %%v%%.\r\n     */\r\n    static uint176(v) { return n(v, 176); }\r\n    /**\r\n     *  Return a new ``uint184`` type for %%v%%.\r\n     */\r\n    static uint184(v) { return n(v, 184); }\r\n    /**\r\n     *  Return a new ``uint192`` type for %%v%%.\r\n     */\r\n    static uint192(v) { return n(v, 192); }\r\n    /**\r\n     *  Return a new ``uint200`` type for %%v%%.\r\n     */\r\n    static uint200(v) { return n(v, 200); }\r\n    /**\r\n     *  Return a new ``uint208`` type for %%v%%.\r\n     */\r\n    static uint208(v) { return n(v, 208); }\r\n    /**\r\n     *  Return a new ``uint216`` type for %%v%%.\r\n     */\r\n    static uint216(v) { return n(v, 216); }\r\n    /**\r\n     *  Return a new ``uint224`` type for %%v%%.\r\n     */\r\n    static uint224(v) { return n(v, 224); }\r\n    /**\r\n     *  Return a new ``uint232`` type for %%v%%.\r\n     */\r\n    static uint232(v) { return n(v, 232); }\r\n    /**\r\n     *  Return a new ``uint240`` type for %%v%%.\r\n     */\r\n    static uint240(v) { return n(v, 240); }\r\n    /**\r\n     *  Return a new ``uint248`` type for %%v%%.\r\n     */\r\n    static uint248(v) { return n(v, 248); }\r\n    /**\r\n     *  Return a new ``uint256`` type for %%v%%.\r\n     */\r\n    static uint256(v) { return n(v, 256); }\r\n    /**\r\n     *  Return a new ``uint256`` type for %%v%%.\r\n     */\r\n    static uint(v) { return n(v, 256); }\r\n    /**\r\n     *  Return a new ``int8`` type for %%v%%.\r\n     */\r\n    static int8(v) { return n(v, -8); }\r\n    /**\r\n     *  Return a new ``int16`` type for %%v%%.\r\n     */\r\n    static int16(v) { return n(v, -16); }\r\n    /**\r\n     *  Return a new ``int24`` type for %%v%%.\r\n     */\r\n    static int24(v) { return n(v, -24); }\r\n    /**\r\n     *  Return a new ``int32`` type for %%v%%.\r\n     */\r\n    static int32(v) { return n(v, -32); }\r\n    /**\r\n     *  Return a new ``int40`` type for %%v%%.\r\n     */\r\n    static int40(v) { return n(v, -40); }\r\n    /**\r\n     *  Return a new ``int48`` type for %%v%%.\r\n     */\r\n    static int48(v) { return n(v, -48); }\r\n    /**\r\n     *  Return a new ``int56`` type for %%v%%.\r\n     */\r\n    static int56(v) { return n(v, -56); }\r\n    /**\r\n     *  Return a new ``int64`` type for %%v%%.\r\n     */\r\n    static int64(v) { return n(v, -64); }\r\n    /**\r\n     *  Return a new ``int72`` type for %%v%%.\r\n     */\r\n    static int72(v) { return n(v, -72); }\r\n    /**\r\n     *  Return a new ``int80`` type for %%v%%.\r\n     */\r\n    static int80(v) { return n(v, -80); }\r\n    /**\r\n     *  Return a new ``int88`` type for %%v%%.\r\n     */\r\n    static int88(v) { return n(v, -88); }\r\n    /**\r\n     *  Return a new ``int96`` type for %%v%%.\r\n     */\r\n    static int96(v) { return n(v, -96); }\r\n    /**\r\n     *  Return a new ``int104`` type for %%v%%.\r\n     */\r\n    static int104(v) { return n(v, -104); }\r\n    /**\r\n     *  Return a new ``int112`` type for %%v%%.\r\n     */\r\n    static int112(v) { return n(v, -112); }\r\n    /**\r\n     *  Return a new ``int120`` type for %%v%%.\r\n     */\r\n    static int120(v) { return n(v, -120); }\r\n    /**\r\n     *  Return a new ``int128`` type for %%v%%.\r\n     */\r\n    static int128(v) { return n(v, -128); }\r\n    /**\r\n     *  Return a new ``int136`` type for %%v%%.\r\n     */\r\n    static int136(v) { return n(v, -136); }\r\n    /**\r\n     *  Return a new ``int144`` type for %%v%%.\r\n     */\r\n    static int144(v) { return n(v, -144); }\r\n    /**\r\n     *  Return a new ``int52`` type for %%v%%.\r\n     */\r\n    static int152(v) { return n(v, -152); }\r\n    /**\r\n     *  Return a new ``int160`` type for %%v%%.\r\n     */\r\n    static int160(v) { return n(v, -160); }\r\n    /**\r\n     *  Return a new ``int168`` type for %%v%%.\r\n     */\r\n    static int168(v) { return n(v, -168); }\r\n    /**\r\n     *  Return a new ``int176`` type for %%v%%.\r\n     */\r\n    static int176(v) { return n(v, -176); }\r\n    /**\r\n     *  Return a new ``int184`` type for %%v%%.\r\n     */\r\n    static int184(v) { return n(v, -184); }\r\n    /**\r\n     *  Return a new ``int92`` type for %%v%%.\r\n     */\r\n    static int192(v) { return n(v, -192); }\r\n    /**\r\n     *  Return a new ``int200`` type for %%v%%.\r\n     */\r\n    static int200(v) { return n(v, -200); }\r\n    /**\r\n     *  Return a new ``int208`` type for %%v%%.\r\n     */\r\n    static int208(v) { return n(v, -208); }\r\n    /**\r\n     *  Return a new ``int216`` type for %%v%%.\r\n     */\r\n    static int216(v) { return n(v, -216); }\r\n    /**\r\n     *  Return a new ``int224`` type for %%v%%.\r\n     */\r\n    static int224(v) { return n(v, -224); }\r\n    /**\r\n     *  Return a new ``int232`` type for %%v%%.\r\n     */\r\n    static int232(v) { return n(v, -232); }\r\n    /**\r\n     *  Return a new ``int240`` type for %%v%%.\r\n     */\r\n    static int240(v) { return n(v, -240); }\r\n    /**\r\n     *  Return a new ``int248`` type for %%v%%.\r\n     */\r\n    static int248(v) { return n(v, -248); }\r\n    /**\r\n     *  Return a new ``int256`` type for %%v%%.\r\n     */\r\n    static int256(v) { return n(v, -256); }\r\n    /**\r\n     *  Return a new ``int256`` type for %%v%%.\r\n     */\r\n    static int(v) { return n(v, -256); }\r\n    /**\r\n     *  Return a new ``bytes1`` type for %%v%%.\r\n     */\r\n    static bytes1(v) { return b(v, 1); }\r\n    /**\r\n     *  Return a new ``bytes2`` type for %%v%%.\r\n     */\r\n    static bytes2(v) { return b(v, 2); }\r\n    /**\r\n     *  Return a new ``bytes3`` type for %%v%%.\r\n     */\r\n    static bytes3(v) { return b(v, 3); }\r\n    /**\r\n     *  Return a new ``bytes4`` type for %%v%%.\r\n     */\r\n    static bytes4(v) { return b(v, 4); }\r\n    /**\r\n     *  Return a new ``bytes5`` type for %%v%%.\r\n     */\r\n    static bytes5(v) { return b(v, 5); }\r\n    /**\r\n     *  Return a new ``bytes6`` type for %%v%%.\r\n     */\r\n    static bytes6(v) { return b(v, 6); }\r\n    /**\r\n     *  Return a new ``bytes7`` type for %%v%%.\r\n     */\r\n    static bytes7(v) { return b(v, 7); }\r\n    /**\r\n     *  Return a new ``bytes8`` type for %%v%%.\r\n     */\r\n    static bytes8(v) { return b(v, 8); }\r\n    /**\r\n     *  Return a new ``bytes9`` type for %%v%%.\r\n     */\r\n    static bytes9(v) { return b(v, 9); }\r\n    /**\r\n     *  Return a new ``bytes10`` type for %%v%%.\r\n     */\r\n    static bytes10(v) { return b(v, 10); }\r\n    /**\r\n     *  Return a new ``bytes11`` type for %%v%%.\r\n     */\r\n    static bytes11(v) { return b(v, 11); }\r\n    /**\r\n     *  Return a new ``bytes12`` type for %%v%%.\r\n     */\r\n    static bytes12(v) { return b(v, 12); }\r\n    /**\r\n     *  Return a new ``bytes13`` type for %%v%%.\r\n     */\r\n    static bytes13(v) { return b(v, 13); }\r\n    /**\r\n     *  Return a new ``bytes14`` type for %%v%%.\r\n     */\r\n    static bytes14(v) { return b(v, 14); }\r\n    /**\r\n     *  Return a new ``bytes15`` type for %%v%%.\r\n     */\r\n    static bytes15(v) { return b(v, 15); }\r\n    /**\r\n     *  Return a new ``bytes16`` type for %%v%%.\r\n     */\r\n    static bytes16(v) { return b(v, 16); }\r\n    /**\r\n     *  Return a new ``bytes17`` type for %%v%%.\r\n     */\r\n    static bytes17(v) { return b(v, 17); }\r\n    /**\r\n     *  Return a new ``bytes18`` type for %%v%%.\r\n     */\r\n    static bytes18(v) { return b(v, 18); }\r\n    /**\r\n     *  Return a new ``bytes19`` type for %%v%%.\r\n     */\r\n    static bytes19(v) { return b(v, 19); }\r\n    /**\r\n     *  Return a new ``bytes20`` type for %%v%%.\r\n     */\r\n    static bytes20(v) { return b(v, 20); }\r\n    /**\r\n     *  Return a new ``bytes21`` type for %%v%%.\r\n     */\r\n    static bytes21(v) { return b(v, 21); }\r\n    /**\r\n     *  Return a new ``bytes22`` type for %%v%%.\r\n     */\r\n    static bytes22(v) { return b(v, 22); }\r\n    /**\r\n     *  Return a new ``bytes23`` type for %%v%%.\r\n     */\r\n    static bytes23(v) { return b(v, 23); }\r\n    /**\r\n     *  Return a new ``bytes24`` type for %%v%%.\r\n     */\r\n    static bytes24(v) { return b(v, 24); }\r\n    /**\r\n     *  Return a new ``bytes25`` type for %%v%%.\r\n     */\r\n    static bytes25(v) { return b(v, 25); }\r\n    /**\r\n     *  Return a new ``bytes26`` type for %%v%%.\r\n     */\r\n    static bytes26(v) { return b(v, 26); }\r\n    /**\r\n     *  Return a new ``bytes27`` type for %%v%%.\r\n     */\r\n    static bytes27(v) { return b(v, 27); }\r\n    /**\r\n     *  Return a new ``bytes28`` type for %%v%%.\r\n     */\r\n    static bytes28(v) { return b(v, 28); }\r\n    /**\r\n     *  Return a new ``bytes29`` type for %%v%%.\r\n     */\r\n    static bytes29(v) { return b(v, 29); }\r\n    /**\r\n     *  Return a new ``bytes30`` type for %%v%%.\r\n     */\r\n    static bytes30(v) { return b(v, 30); }\r\n    /**\r\n     *  Return a new ``bytes31`` type for %%v%%.\r\n     */\r\n    static bytes31(v) { return b(v, 31); }\r\n    /**\r\n     *  Return a new ``bytes32`` type for %%v%%.\r\n     */\r\n    static bytes32(v) { return b(v, 32); }\r\n    /**\r\n     *  Return a new ``address`` type for %%v%%.\r\n     */\r\n    static address(v) { return new Typed(_gaurd, \"address\", v); }\r\n    /**\r\n     *  Return a new ``bool`` type for %%v%%.\r\n     */\r\n    static bool(v) { return new Typed(_gaurd, \"bool\", !!v); }\r\n    /**\r\n     *  Return a new ``bytes`` type for %%v%%.\r\n     */\r\n    static bytes(v) { return new Typed(_gaurd, \"bytes\", v); }\r\n    /**\r\n     *  Return a new ``string`` type for %%v%%.\r\n     */\r\n    static string(v) { return new Typed(_gaurd, \"string\", v); }\r\n    /**\r\n     *  Return a new ``array`` type for %%v%%, allowing %%dynamic%% length.\r\n     */\r\n    static array(v, dynamic) {\r\n        throw new Error(\"not implemented yet\");\r\n        return new Typed(_gaurd, \"array\", v, dynamic);\r\n    }\r\n    /**\r\n     *  Return a new ``tuple`` type for %%v%%, with the optional %%name%%.\r\n     */\r\n    static tuple(v, name) {\r\n        throw new Error(\"not implemented yet\");\r\n        return new Typed(_gaurd, \"tuple\", v, name);\r\n    }\r\n    /**\r\n     *  Return a new ``uint8`` type for %%v%%.\r\n     */\r\n    static overrides(v) {\r\n        return new Typed(_gaurd, \"overrides\", Object.assign({}, v));\r\n    }\r\n    /**\r\n     *  Returns true only if %%value%% is a [[Typed]] instance.\r\n     */\r\n    static isTyped(value) {\r\n        return (value\r\n            && typeof (value) === \"object\"\r\n            && \"_typedSymbol\" in value\r\n            && value._typedSymbol === _typedSymbol);\r\n    }\r\n    /**\r\n     *  If the value is a [[Typed]] instance, validates the underlying value\r\n     *  and returns it, otherwise returns value directly.\r\n     *\r\n     *  This is useful for functions that with to accept either a [[Typed]]\r\n     *  object or values.\r\n     */\r\n    static dereference(value, type) {\r\n        if (Typed.isTyped(value)) {\r\n            if (value.type !== type) {\r\n                throw new Error(`invalid type: expecetd ${type}, got ${value.type}`);\r\n            }\r\n            return value.value;\r\n        }\r\n        return value;\r\n    }\r\n}\r\n//# sourceMappingURL=typed.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9hYmkvdHlwZWQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ29FO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0Msa0JBQWtCLEtBQUssTUFBTSxZQUFZLGVBQWU7QUFDeEY7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLG1CQUFtQixZQUFZLE1BQU07QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsOERBQWE7QUFDckIsUUFBUSxpRUFBZ0IsU0FBUywyQkFBMkI7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLDRDQUE0QztBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4REFBOEQ7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBEQUEwRCxLQUFLLFFBQVEsV0FBVztBQUNsRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiRDpcXERvX2FuMlxcbGVuZGh1Yl92MlxcbGVuZGh1Yi1mcm9udGVuZC1uZXh0anNcXG5vZGVfbW9kdWxlc1xcZXRoZXJzXFxsaWIuZXNtXFxhYmlcXHR5cGVkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiAgQSBUeXBlZCBvYmplY3QgYWxsb3dzIGEgdmFsdWUgdG8gaGF2ZSBpdHMgdHlwZSBleHBsaWNpdGx5XHJcbiAqICBzcGVjaWZpZWQuXHJcbiAqXHJcbiAqICBGb3IgZXhhbXBsZSwgaW4gU29saWRpdHksIHRoZSB2YWx1ZSBgYDQ1YGAgY291bGQgcmVwcmVzZW50IGFcclxuICogIGBgdWludDhgYCBvciBhIGBgdWludDI1NmBgLiBUaGUgdmFsdWUgYGAweDEyMzRgYCBjb3VsZCByZXByZXNlbnRcclxuICogIGEgYGBieXRlczJgYCBvciBgYGJ5dGVzYGAuXHJcbiAqXHJcbiAqICBTaW5jZSBKYXZhU2NyaXB0IGhhcyBubyBtZWFuaW5nZnVsIHdheSB0byBleHBsaWNpdGx5IGluZm9ybSBhbnlcclxuICogIEFQSXMgd2hpY2ggd2hhdCB0aGUgdHlwZSBpcywgdGhpcyBhbGxvd3MgdHJhbnNwYXJlbnQgaW50ZXJvcGVyYXRpb25cclxuICogIHdpdGggU29sZGl0eS5cclxuICpcclxuICogIEBfc3Vic2VjdGlvbjogYXBpL2FiaTpUeXBlZCBWYWx1ZXNcclxuICovXHJcbmltcG9ydCB7IGFzc2VydFByaXZhdGUsIGRlZmluZVByb3BlcnRpZXMgfSBmcm9tIFwiLi4vdXRpbHMvaW5kZXguanNcIjtcclxuY29uc3QgX2dhdXJkID0ge307XHJcbmZ1bmN0aW9uIG4odmFsdWUsIHdpZHRoKSB7XHJcbiAgICBsZXQgc2lnbmVkID0gZmFsc2U7XHJcbiAgICBpZiAod2lkdGggPCAwKSB7XHJcbiAgICAgICAgc2lnbmVkID0gdHJ1ZTtcclxuICAgICAgICB3aWR0aCAqPSAtMTtcclxuICAgIH1cclxuICAgIC8vIEBUT0RPOiBDaGVjayByYW5nZSBpcyB2YWxpZCBmb3IgdmFsdWVcclxuICAgIHJldHVybiBuZXcgVHlwZWQoX2dhdXJkLCBgJHtzaWduZWQgPyBcIlwiIDogXCJ1XCJ9aW50JHt3aWR0aH1gLCB2YWx1ZSwgeyBzaWduZWQsIHdpZHRoIH0pO1xyXG59XHJcbmZ1bmN0aW9uIGIodmFsdWUsIHNpemUpIHtcclxuICAgIC8vIEBUT0RPOiBDaGVjayByYW5nZSBpcyB2YWxpZCBmb3IgdmFsdWVcclxuICAgIHJldHVybiBuZXcgVHlwZWQoX2dhdXJkLCBgYnl0ZXMkeyhzaXplKSA/IHNpemUgOiBcIlwifWAsIHZhbHVlLCB7IHNpemUgfSk7XHJcbn1cclxuY29uc3QgX3R5cGVkU3ltYm9sID0gU3ltYm9sLmZvcihcIl9ldGhlcnNfdHlwZWRcIik7XHJcbi8qKlxyXG4gKiAgVGhlICoqVHlwZWQqKiBjbGFzcyB0byB3cmFwIHZhbHVlcyBwcm92aWRpbmcgZXhwbGljaXQgdHlwZSBpbmZvcm1hdGlvbi5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBUeXBlZCB7XHJcbiAgICAvKipcclxuICAgICAqICBUaGUgdHlwZSwgYXMgYSBTb2xpZGl0eS1jb21wYXRpYmxlIHR5cGUuXHJcbiAgICAgKi9cclxuICAgIHR5cGU7XHJcbiAgICAvKipcclxuICAgICAqICBUaGUgYWN0dWFsIHZhbHVlLlxyXG4gICAgICovXHJcbiAgICB2YWx1ZTtcclxuICAgICNvcHRpb25zO1xyXG4gICAgLyoqXHJcbiAgICAgKiAgQF9pZ25vcmU6XHJcbiAgICAgKi9cclxuICAgIF90eXBlZFN5bWJvbDtcclxuICAgIC8qKlxyXG4gICAgICogIEBfaWdub3JlOlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihnYXVyZCwgdHlwZSwgdmFsdWUsIG9wdGlvbnMpIHtcclxuICAgICAgICBpZiAob3B0aW9ucyA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhc3NlcnRQcml2YXRlKF9nYXVyZCwgZ2F1cmQsIFwiVHlwZWRcIik7XHJcbiAgICAgICAgZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7IF90eXBlZFN5bWJvbCwgdHlwZSwgdmFsdWUgfSk7XHJcbiAgICAgICAgdGhpcy4jb3B0aW9ucyA9IG9wdGlvbnM7XHJcbiAgICAgICAgLy8gQ2hlY2sgdGhlIHZhbHVlIGlzIHZhbGlkXHJcbiAgICAgICAgdGhpcy5mb3JtYXQoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogIEZvcm1hdCB0aGUgdHlwZSBhcyBhIEh1bWFuLVJlYWRhYmxlIHR5cGUuXHJcbiAgICAgKi9cclxuICAgIGZvcm1hdCgpIHtcclxuICAgICAgICBpZiAodGhpcy50eXBlID09PSBcImFycmF5XCIpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLnR5cGUgPT09IFwiZHluYW1pY0FycmF5XCIpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLnR5cGUgPT09IFwidHVwbGVcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gYHR1cGxlKCR7dGhpcy52YWx1ZS5tYXAoKHYpID0+IHYuZm9ybWF0KCkpLmpvaW4oXCIsXCIpfSlgO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy50eXBlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgVGhlIGRlZmF1bHQgdmFsdWUgcmV0dXJuZWQgYnkgdGhpcyB0eXBlLlxyXG4gICAgICovXHJcbiAgICBkZWZhdWx0VmFsdWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqICBUaGUgbWluaW11bSB2YWx1ZSBmb3IgbnVtZXJpYyB0eXBlcy5cclxuICAgICAqL1xyXG4gICAgbWluVmFsdWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqICBUaGUgbWF4aW11bSB2YWx1ZSBmb3IgbnVtZXJpYyB0eXBlcy5cclxuICAgICAqL1xyXG4gICAgbWF4VmFsdWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqICBSZXR1cm5zIGBgdHJ1ZWBgIGFuZCBwcm92aWRlcyBhIHR5cGUgZ3VhcmQgaXMgdGhpcyBpcyBhIFtbVHlwZWRCaWdJbnRdXS5cclxuICAgICAqL1xyXG4gICAgaXNCaWdJbnQoKSB7XHJcbiAgICAgICAgcmV0dXJuICEhKHRoaXMudHlwZS5tYXRjaCgvXnU/aW50WzAtOV0rJC8pKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybnMgYGB0cnVlYGAgYW5kIHByb3ZpZGVzIGEgdHlwZSBndWFyZCBpcyB0aGlzIGlzIGEgW1tUeXBlZERhdGFdXS5cclxuICAgICAqL1xyXG4gICAgaXNEYXRhKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnR5cGUuc3RhcnRzV2l0aChcImJ5dGVzXCIpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgUmV0dXJucyBgYHRydWVgYCBhbmQgcHJvdmlkZXMgYSB0eXBlIGd1YXJkIGlzIHRoaXMgaXMgYSBbW1R5cGVkU3RyaW5nXV0uXHJcbiAgICAgKi9cclxuICAgIGlzU3RyaW5nKCkge1xyXG4gICAgICAgIHJldHVybiAodGhpcy50eXBlID09PSBcInN0cmluZ1wiKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybnMgdGhlIHR1cGxlIG5hbWUsIGlmIHRoaXMgaXMgYSB0dXBsZS4gVGhyb3dzIG90aGVyd2lzZS5cclxuICAgICAqL1xyXG4gICAgZ2V0IHR1cGxlTmFtZSgpIHtcclxuICAgICAgICBpZiAodGhpcy50eXBlICE9PSBcInR1cGxlXCIpIHtcclxuICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwibm90IGEgdHVwbGVcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLiNvcHRpb25zO1xyXG4gICAgfVxyXG4gICAgLy8gUmV0dXJucyB0aGUgbGVuZ3RoIG9mIHRoaXMgdHlwZSBhcyBhbiBhcnJheVxyXG4gICAgLy8gLSBgbnVsbGAgaW5kaWNhdGVzIHRoZSBsZW5ndGggaXMgdW5mb3JjZWQsIGl0IGNvdWxkIGJlIGR5bmFtaWNcclxuICAgIC8vIC0gYC0xYCBpbmRpY2F0ZXMgdGhlIGxlbmd0aCBpcyBkeW5hbWljXHJcbiAgICAvLyAtIGFueSBvdGhlciB2YWx1ZSBpbmRpY2F0ZXMgaXQgaXMgYSBzdGF0aWMgYXJyYXkgYW5kIGlzIGl0cyBsZW5ndGhcclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybnMgdGhlIGxlbmd0aCBvZiB0aGUgYXJyYXkgdHlwZSBvciBgYC0xYGAgaWYgaXQgaXMgZHluYW1pYy5cclxuICAgICAqXHJcbiAgICAgKiAgVGhyb3dzIGlmIHRoZSB0eXBlIGlzIG5vdCBhbiBhcnJheS5cclxuICAgICAqL1xyXG4gICAgZ2V0IGFycmF5TGVuZ3RoKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnR5cGUgIT09IFwiYXJyYXlcIikge1xyXG4gICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJub3QgYW4gYXJyYXlcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLiNvcHRpb25zID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuI29wdGlvbnMgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAodGhpcy52YWx1ZSkubGVuZ3RoO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybnMgYSBuZXcgKipUeXBlZCoqIG9mICUldHlwZSUlIHdpdGggdGhlICUldmFsdWUlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGZyb20odHlwZSwgdmFsdWUpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFR5cGVkKF9nYXVyZCwgdHlwZSwgdmFsdWUpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgdWludDhgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIHVpbnQ4KHYpIHsgcmV0dXJuIG4odiwgOCk7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYHVpbnQxNmBgIHR5cGUgZm9yICUldiUlLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgdWludDE2KHYpIHsgcmV0dXJuIG4odiwgMTYpOyB9XHJcbiAgICAvKipcclxuICAgICAqICBSZXR1cm4gYSBuZXcgYGB1aW50MjRgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIHVpbnQyNCh2KSB7IHJldHVybiBuKHYsIDI0KTsgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgdWludDMyYGAgdHlwZSBmb3IgJSV2JSUuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyB1aW50MzIodikgeyByZXR1cm4gbih2LCAzMik7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYHVpbnQ0MGBgIHR5cGUgZm9yICUldiUlLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgdWludDQwKHYpIHsgcmV0dXJuIG4odiwgNDApOyB9XHJcbiAgICAvKipcclxuICAgICAqICBSZXR1cm4gYSBuZXcgYGB1aW50NDhgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIHVpbnQ0OCh2KSB7IHJldHVybiBuKHYsIDQ4KTsgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgdWludDU2YGAgdHlwZSBmb3IgJSV2JSUuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyB1aW50NTYodikgeyByZXR1cm4gbih2LCA1Nik7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYHVpbnQ2NGBgIHR5cGUgZm9yICUldiUlLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgdWludDY0KHYpIHsgcmV0dXJuIG4odiwgNjQpOyB9XHJcbiAgICAvKipcclxuICAgICAqICBSZXR1cm4gYSBuZXcgYGB1aW50NzJgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIHVpbnQ3Mih2KSB7IHJldHVybiBuKHYsIDcyKTsgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgdWludDgwYGAgdHlwZSBmb3IgJSV2JSUuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyB1aW50ODAodikgeyByZXR1cm4gbih2LCA4MCk7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYHVpbnQ4OGBgIHR5cGUgZm9yICUldiUlLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgdWludDg4KHYpIHsgcmV0dXJuIG4odiwgODgpOyB9XHJcbiAgICAvKipcclxuICAgICAqICBSZXR1cm4gYSBuZXcgYGB1aW50OTZgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIHVpbnQ5Nih2KSB7IHJldHVybiBuKHYsIDk2KTsgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgdWludDEwNGBgIHR5cGUgZm9yICUldiUlLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgdWludDEwNCh2KSB7IHJldHVybiBuKHYsIDEwNCk7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYHVpbnQxMTJgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIHVpbnQxMTIodikgeyByZXR1cm4gbih2LCAxMTIpOyB9XHJcbiAgICAvKipcclxuICAgICAqICBSZXR1cm4gYSBuZXcgYGB1aW50MTIwYGAgdHlwZSBmb3IgJSV2JSUuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyB1aW50MTIwKHYpIHsgcmV0dXJuIG4odiwgMTIwKTsgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgdWludDEyOGBgIHR5cGUgZm9yICUldiUlLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgdWludDEyOCh2KSB7IHJldHVybiBuKHYsIDEyOCk7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYHVpbnQxMzZgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIHVpbnQxMzYodikgeyByZXR1cm4gbih2LCAxMzYpOyB9XHJcbiAgICAvKipcclxuICAgICAqICBSZXR1cm4gYSBuZXcgYGB1aW50MTQ0YGAgdHlwZSBmb3IgJSV2JSUuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyB1aW50MTQ0KHYpIHsgcmV0dXJuIG4odiwgMTQ0KTsgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgdWludDE1MmBgIHR5cGUgZm9yICUldiUlLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgdWludDE1Mih2KSB7IHJldHVybiBuKHYsIDE1Mik7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYHVpbnQxNjBgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIHVpbnQxNjAodikgeyByZXR1cm4gbih2LCAxNjApOyB9XHJcbiAgICAvKipcclxuICAgICAqICBSZXR1cm4gYSBuZXcgYGB1aW50MTY4YGAgdHlwZSBmb3IgJSV2JSUuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyB1aW50MTY4KHYpIHsgcmV0dXJuIG4odiwgMTY4KTsgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgdWludDE3NmBgIHR5cGUgZm9yICUldiUlLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgdWludDE3Nih2KSB7IHJldHVybiBuKHYsIDE3Nik7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYHVpbnQxODRgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIHVpbnQxODQodikgeyByZXR1cm4gbih2LCAxODQpOyB9XHJcbiAgICAvKipcclxuICAgICAqICBSZXR1cm4gYSBuZXcgYGB1aW50MTkyYGAgdHlwZSBmb3IgJSV2JSUuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyB1aW50MTkyKHYpIHsgcmV0dXJuIG4odiwgMTkyKTsgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgdWludDIwMGBgIHR5cGUgZm9yICUldiUlLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgdWludDIwMCh2KSB7IHJldHVybiBuKHYsIDIwMCk7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYHVpbnQyMDhgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIHVpbnQyMDgodikgeyByZXR1cm4gbih2LCAyMDgpOyB9XHJcbiAgICAvKipcclxuICAgICAqICBSZXR1cm4gYSBuZXcgYGB1aW50MjE2YGAgdHlwZSBmb3IgJSV2JSUuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyB1aW50MjE2KHYpIHsgcmV0dXJuIG4odiwgMjE2KTsgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgdWludDIyNGBgIHR5cGUgZm9yICUldiUlLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgdWludDIyNCh2KSB7IHJldHVybiBuKHYsIDIyNCk7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYHVpbnQyMzJgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIHVpbnQyMzIodikgeyByZXR1cm4gbih2LCAyMzIpOyB9XHJcbiAgICAvKipcclxuICAgICAqICBSZXR1cm4gYSBuZXcgYGB1aW50MjQwYGAgdHlwZSBmb3IgJSV2JSUuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyB1aW50MjQwKHYpIHsgcmV0dXJuIG4odiwgMjQwKTsgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgdWludDI0OGBgIHR5cGUgZm9yICUldiUlLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgdWludDI0OCh2KSB7IHJldHVybiBuKHYsIDI0OCk7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYHVpbnQyNTZgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIHVpbnQyNTYodikgeyByZXR1cm4gbih2LCAyNTYpOyB9XHJcbiAgICAvKipcclxuICAgICAqICBSZXR1cm4gYSBuZXcgYGB1aW50MjU2YGAgdHlwZSBmb3IgJSV2JSUuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyB1aW50KHYpIHsgcmV0dXJuIG4odiwgMjU2KTsgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgaW50OGBgIHR5cGUgZm9yICUldiUlLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgaW50OCh2KSB7IHJldHVybiBuKHYsIC04KTsgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgaW50MTZgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGludDE2KHYpIHsgcmV0dXJuIG4odiwgLTE2KTsgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgaW50MjRgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGludDI0KHYpIHsgcmV0dXJuIG4odiwgLTI0KTsgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgaW50MzJgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGludDMyKHYpIHsgcmV0dXJuIG4odiwgLTMyKTsgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgaW50NDBgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGludDQwKHYpIHsgcmV0dXJuIG4odiwgLTQwKTsgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgaW50NDhgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGludDQ4KHYpIHsgcmV0dXJuIG4odiwgLTQ4KTsgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgaW50NTZgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGludDU2KHYpIHsgcmV0dXJuIG4odiwgLTU2KTsgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgaW50NjRgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGludDY0KHYpIHsgcmV0dXJuIG4odiwgLTY0KTsgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgaW50NzJgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGludDcyKHYpIHsgcmV0dXJuIG4odiwgLTcyKTsgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgaW50ODBgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGludDgwKHYpIHsgcmV0dXJuIG4odiwgLTgwKTsgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgaW50ODhgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGludDg4KHYpIHsgcmV0dXJuIG4odiwgLTg4KTsgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgaW50OTZgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGludDk2KHYpIHsgcmV0dXJuIG4odiwgLTk2KTsgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgaW50MTA0YGAgdHlwZSBmb3IgJSV2JSUuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBpbnQxMDQodikgeyByZXR1cm4gbih2LCAtMTA0KTsgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgaW50MTEyYGAgdHlwZSBmb3IgJSV2JSUuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBpbnQxMTIodikgeyByZXR1cm4gbih2LCAtMTEyKTsgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgaW50MTIwYGAgdHlwZSBmb3IgJSV2JSUuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBpbnQxMjAodikgeyByZXR1cm4gbih2LCAtMTIwKTsgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgaW50MTI4YGAgdHlwZSBmb3IgJSV2JSUuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBpbnQxMjgodikgeyByZXR1cm4gbih2LCAtMTI4KTsgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgaW50MTM2YGAgdHlwZSBmb3IgJSV2JSUuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBpbnQxMzYodikgeyByZXR1cm4gbih2LCAtMTM2KTsgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgaW50MTQ0YGAgdHlwZSBmb3IgJSV2JSUuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBpbnQxNDQodikgeyByZXR1cm4gbih2LCAtMTQ0KTsgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgaW50NTJgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGludDE1Mih2KSB7IHJldHVybiBuKHYsIC0xNTIpOyB9XHJcbiAgICAvKipcclxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBpbnQxNjBgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGludDE2MCh2KSB7IHJldHVybiBuKHYsIC0xNjApOyB9XHJcbiAgICAvKipcclxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBpbnQxNjhgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGludDE2OCh2KSB7IHJldHVybiBuKHYsIC0xNjgpOyB9XHJcbiAgICAvKipcclxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBpbnQxNzZgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGludDE3Nih2KSB7IHJldHVybiBuKHYsIC0xNzYpOyB9XHJcbiAgICAvKipcclxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBpbnQxODRgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGludDE4NCh2KSB7IHJldHVybiBuKHYsIC0xODQpOyB9XHJcbiAgICAvKipcclxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBpbnQ5MmBgIHR5cGUgZm9yICUldiUlLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgaW50MTkyKHYpIHsgcmV0dXJuIG4odiwgLTE5Mik7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYGludDIwMGBgIHR5cGUgZm9yICUldiUlLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgaW50MjAwKHYpIHsgcmV0dXJuIG4odiwgLTIwMCk7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYGludDIwOGBgIHR5cGUgZm9yICUldiUlLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgaW50MjA4KHYpIHsgcmV0dXJuIG4odiwgLTIwOCk7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYGludDIxNmBgIHR5cGUgZm9yICUldiUlLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgaW50MjE2KHYpIHsgcmV0dXJuIG4odiwgLTIxNik7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYGludDIyNGBgIHR5cGUgZm9yICUldiUlLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgaW50MjI0KHYpIHsgcmV0dXJuIG4odiwgLTIyNCk7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYGludDIzMmBgIHR5cGUgZm9yICUldiUlLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgaW50MjMyKHYpIHsgcmV0dXJuIG4odiwgLTIzMik7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYGludDI0MGBgIHR5cGUgZm9yICUldiUlLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgaW50MjQwKHYpIHsgcmV0dXJuIG4odiwgLTI0MCk7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYGludDI0OGBgIHR5cGUgZm9yICUldiUlLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgaW50MjQ4KHYpIHsgcmV0dXJuIG4odiwgLTI0OCk7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYGludDI1NmBgIHR5cGUgZm9yICUldiUlLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgaW50MjU2KHYpIHsgcmV0dXJuIG4odiwgLTI1Nik7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYGludDI1NmBgIHR5cGUgZm9yICUldiUlLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgaW50KHYpIHsgcmV0dXJuIG4odiwgLTI1Nik7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzMWBgIHR5cGUgZm9yICUldiUlLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgYnl0ZXMxKHYpIHsgcmV0dXJuIGIodiwgMSk7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzMmBgIHR5cGUgZm9yICUldiUlLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgYnl0ZXMyKHYpIHsgcmV0dXJuIGIodiwgMik7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzM2BgIHR5cGUgZm9yICUldiUlLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgYnl0ZXMzKHYpIHsgcmV0dXJuIGIodiwgMyk7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzNGBgIHR5cGUgZm9yICUldiUlLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgYnl0ZXM0KHYpIHsgcmV0dXJuIGIodiwgNCk7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzNWBgIHR5cGUgZm9yICUldiUlLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgYnl0ZXM1KHYpIHsgcmV0dXJuIGIodiwgNSk7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzNmBgIHR5cGUgZm9yICUldiUlLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgYnl0ZXM2KHYpIHsgcmV0dXJuIGIodiwgNik7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzN2BgIHR5cGUgZm9yICUldiUlLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgYnl0ZXM3KHYpIHsgcmV0dXJuIGIodiwgNyk7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzOGBgIHR5cGUgZm9yICUldiUlLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgYnl0ZXM4KHYpIHsgcmV0dXJuIGIodiwgOCk7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzOWBgIHR5cGUgZm9yICUldiUlLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgYnl0ZXM5KHYpIHsgcmV0dXJuIGIodiwgOSk7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzMTBgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGJ5dGVzMTAodikgeyByZXR1cm4gYih2LCAxMCk7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzMTFgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGJ5dGVzMTEodikgeyByZXR1cm4gYih2LCAxMSk7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzMTJgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGJ5dGVzMTIodikgeyByZXR1cm4gYih2LCAxMik7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzMTNgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGJ5dGVzMTModikgeyByZXR1cm4gYih2LCAxMyk7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzMTRgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGJ5dGVzMTQodikgeyByZXR1cm4gYih2LCAxNCk7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzMTVgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGJ5dGVzMTUodikgeyByZXR1cm4gYih2LCAxNSk7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzMTZgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGJ5dGVzMTYodikgeyByZXR1cm4gYih2LCAxNik7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzMTdgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGJ5dGVzMTcodikgeyByZXR1cm4gYih2LCAxNyk7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzMThgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGJ5dGVzMTgodikgeyByZXR1cm4gYih2LCAxOCk7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzMTlgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGJ5dGVzMTkodikgeyByZXR1cm4gYih2LCAxOSk7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzMjBgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGJ5dGVzMjAodikgeyByZXR1cm4gYih2LCAyMCk7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzMjFgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGJ5dGVzMjEodikgeyByZXR1cm4gYih2LCAyMSk7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzMjJgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGJ5dGVzMjIodikgeyByZXR1cm4gYih2LCAyMik7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzMjNgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGJ5dGVzMjModikgeyByZXR1cm4gYih2LCAyMyk7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzMjRgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGJ5dGVzMjQodikgeyByZXR1cm4gYih2LCAyNCk7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzMjVgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGJ5dGVzMjUodikgeyByZXR1cm4gYih2LCAyNSk7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzMjZgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGJ5dGVzMjYodikgeyByZXR1cm4gYih2LCAyNik7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzMjdgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGJ5dGVzMjcodikgeyByZXR1cm4gYih2LCAyNyk7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzMjhgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGJ5dGVzMjgodikgeyByZXR1cm4gYih2LCAyOCk7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzMjlgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGJ5dGVzMjkodikgeyByZXR1cm4gYih2LCAyOSk7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzMzBgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGJ5dGVzMzAodikgeyByZXR1cm4gYih2LCAzMCk7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzMzFgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGJ5dGVzMzEodikgeyByZXR1cm4gYih2LCAzMSk7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzMzJgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGJ5dGVzMzIodikgeyByZXR1cm4gYih2LCAzMik7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYGFkZHJlc3NgYCB0eXBlIGZvciAlJXYlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGFkZHJlc3ModikgeyByZXR1cm4gbmV3IFR5cGVkKF9nYXVyZCwgXCJhZGRyZXNzXCIsIHYpOyB9XHJcbiAgICAvKipcclxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBib29sYGAgdHlwZSBmb3IgJSV2JSUuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBib29sKHYpIHsgcmV0dXJuIG5ldyBUeXBlZChfZ2F1cmQsIFwiYm9vbFwiLCAhIXYpOyB9XHJcbiAgICAvKipcclxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBieXRlc2BgIHR5cGUgZm9yICUldiUlLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgYnl0ZXModikgeyByZXR1cm4gbmV3IFR5cGVkKF9nYXVyZCwgXCJieXRlc1wiLCB2KTsgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgc3RyaW5nYGAgdHlwZSBmb3IgJSV2JSUuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBzdHJpbmcodikgeyByZXR1cm4gbmV3IFR5cGVkKF9nYXVyZCwgXCJzdHJpbmdcIiwgdik7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYGFycmF5YGAgdHlwZSBmb3IgJSV2JSUsIGFsbG93aW5nICUlZHluYW1pYyUlIGxlbmd0aC5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGFycmF5KHYsIGR5bmFtaWMpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub3QgaW1wbGVtZW50ZWQgeWV0XCIpO1xyXG4gICAgICAgIHJldHVybiBuZXcgVHlwZWQoX2dhdXJkLCBcImFycmF5XCIsIHYsIGR5bmFtaWMpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgdHVwbGVgYCB0eXBlIGZvciAlJXYlJSwgd2l0aCB0aGUgb3B0aW9uYWwgJSVuYW1lJSUuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyB0dXBsZSh2LCBuYW1lKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm90IGltcGxlbWVudGVkIHlldFwiKTtcclxuICAgICAgICByZXR1cm4gbmV3IFR5cGVkKF9nYXVyZCwgXCJ0dXBsZVwiLCB2LCBuYW1lKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyBgYHVpbnQ4YGAgdHlwZSBmb3IgJSV2JSUuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBvdmVycmlkZXModikge1xyXG4gICAgICAgIHJldHVybiBuZXcgVHlwZWQoX2dhdXJkLCBcIm92ZXJyaWRlc1wiLCBPYmplY3QuYXNzaWduKHt9LCB2KSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqICBSZXR1cm5zIHRydWUgb25seSBpZiAlJXZhbHVlJSUgaXMgYSBbW1R5cGVkXV0gaW5zdGFuY2UuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBpc1R5cGVkKHZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuICh2YWx1ZVxyXG4gICAgICAgICAgICAmJiB0eXBlb2YgKHZhbHVlKSA9PT0gXCJvYmplY3RcIlxyXG4gICAgICAgICAgICAmJiBcIl90eXBlZFN5bWJvbFwiIGluIHZhbHVlXHJcbiAgICAgICAgICAgICYmIHZhbHVlLl90eXBlZFN5bWJvbCA9PT0gX3R5cGVkU3ltYm9sKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogIElmIHRoZSB2YWx1ZSBpcyBhIFtbVHlwZWRdXSBpbnN0YW5jZSwgdmFsaWRhdGVzIHRoZSB1bmRlcmx5aW5nIHZhbHVlXHJcbiAgICAgKiAgYW5kIHJldHVybnMgaXQsIG90aGVyd2lzZSByZXR1cm5zIHZhbHVlIGRpcmVjdGx5LlxyXG4gICAgICpcclxuICAgICAqICBUaGlzIGlzIHVzZWZ1bCBmb3IgZnVuY3Rpb25zIHRoYXQgd2l0aCB0byBhY2NlcHQgZWl0aGVyIGEgW1tUeXBlZF1dXHJcbiAgICAgKiAgb2JqZWN0IG9yIHZhbHVlcy5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGRlcmVmZXJlbmNlKHZhbHVlLCB0eXBlKSB7XHJcbiAgICAgICAgaWYgKFR5cGVkLmlzVHlwZWQodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZS50eXBlICE9PSB0eXBlKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGludmFsaWQgdHlwZTogZXhwZWNldGQgJHt0eXBlfSwgZ290ICR7dmFsdWUudHlwZX1gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWUudmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH1cclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlZC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/typed.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/address/address.js":
/*!********************************************************!*\
  !*** ./node_modules/ethers/lib.esm/address/address.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAddress: () => (/* binding */ getAddress),\n/* harmony export */   getIcapAddress: () => (/* binding */ getIcapAddress)\n/* harmony export */ });\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../crypto/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/index.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n\r\n\r\nconst BN_0 = BigInt(0);\r\nconst BN_36 = BigInt(36);\r\nfunction getChecksumAddress(address) {\r\n    //    if (!isHexString(address, 20)) {\r\n    //        logger.throwArgumentError(\"invalid address\", \"address\", address);\r\n    //    }\r\n    address = address.toLowerCase();\r\n    const chars = address.substring(2).split(\"\");\r\n    const expanded = new Uint8Array(40);\r\n    for (let i = 0; i < 40; i++) {\r\n        expanded[i] = chars[i].charCodeAt(0);\r\n    }\r\n    const hashed = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)((0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)(expanded));\r\n    for (let i = 0; i < 40; i += 2) {\r\n        if ((hashed[i >> 1] >> 4) >= 8) {\r\n            chars[i] = chars[i].toUpperCase();\r\n        }\r\n        if ((hashed[i >> 1] & 0x0f) >= 8) {\r\n            chars[i + 1] = chars[i + 1].toUpperCase();\r\n        }\r\n    }\r\n    return \"0x\" + chars.join(\"\");\r\n}\r\n// See: https://en.wikipedia.org/wiki/International_Bank_Account_Number\r\n// Create lookup table\r\nconst ibanLookup = {};\r\nfor (let i = 0; i < 10; i++) {\r\n    ibanLookup[String(i)] = String(i);\r\n}\r\nfor (let i = 0; i < 26; i++) {\r\n    ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);\r\n}\r\n// How many decimal digits can we process? (for 64-bit float, this is 15)\r\n// i.e. Math.floor(Math.log10(Number.MAX_SAFE_INTEGER));\r\nconst safeDigits = 15;\r\nfunction ibanChecksum(address) {\r\n    address = address.toUpperCase();\r\n    address = address.substring(4) + address.substring(0, 2) + \"00\";\r\n    let expanded = address.split(\"\").map((c) => { return ibanLookup[c]; }).join(\"\");\r\n    // Javascript can handle integers safely up to 15 (decimal) digits\r\n    while (expanded.length >= safeDigits) {\r\n        let block = expanded.substring(0, safeDigits);\r\n        expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);\r\n    }\r\n    let checksum = String(98 - (parseInt(expanded, 10) % 97));\r\n    while (checksum.length < 2) {\r\n        checksum = \"0\" + checksum;\r\n    }\r\n    return checksum;\r\n}\r\n;\r\nconst Base36 = (function () {\r\n    ;\r\n    const result = {};\r\n    for (let i = 0; i < 36; i++) {\r\n        const key = \"0123456789abcdefghijklmnopqrstuvwxyz\"[i];\r\n        result[key] = BigInt(i);\r\n    }\r\n    return result;\r\n})();\r\nfunction fromBase36(value) {\r\n    value = value.toLowerCase();\r\n    let result = BN_0;\r\n    for (let i = 0; i < value.length; i++) {\r\n        result = result * BN_36 + Base36[value[i]];\r\n    }\r\n    return result;\r\n}\r\n/**\r\n *  Returns a normalized and checksumed address for %%address%%.\r\n *  This accepts non-checksum addresses, checksum addresses and\r\n *  [[getIcapAddress]] formats.\r\n *\r\n *  The checksum in Ethereum uses the capitalization (upper-case\r\n *  vs lower-case) of the characters within an address to encode\r\n *  its checksum, which offers, on average, a checksum of 15-bits.\r\n *\r\n *  If %%address%% contains both upper-case and lower-case, it is\r\n *  assumed to already be a checksum address and its checksum is\r\n *  validated, and if the address fails its expected checksum an\r\n *  error is thrown.\r\n *\r\n *  If you wish the checksum of %%address%% to be ignore, it should\r\n *  be converted to lower-case (i.e. ``.toLowercase()``) before\r\n *  being passed in. This should be a very rare situation though,\r\n *  that you wish to bypass the safegaurds in place to protect\r\n *  against an address that has been incorrectly copied from another\r\n *  source.\r\n *\r\n *  @example:\r\n *    // Adds the checksum (via upper-casing specific letters)\r\n *    getAddress(\"0x8ba1f109551bd432803012645ac136ddd64dba72\")\r\n *    //_result:\r\n *\r\n *    // Converts ICAP address and adds checksum\r\n *    getAddress(\"XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK36\");\r\n *    //_result:\r\n *\r\n *    // Throws an error if an address contains mixed case,\r\n *    // but the checksum fails\r\n *    getAddress(\"0x8Ba1f109551bD432803012645Ac136ddd64DBA72\")\r\n *    //_error:\r\n */\r\nfunction getAddress(address) {\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(typeof (address) === \"string\", \"invalid address\", \"address\", address);\r\n    if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {\r\n        // Missing the 0x prefix\r\n        if (!address.startsWith(\"0x\")) {\r\n            address = \"0x\" + address;\r\n        }\r\n        const result = getChecksumAddress(address);\r\n        // It is a checksummed address with a bad checksum\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(!address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) || result === address, \"bad address checksum\", \"address\", address);\r\n        return result;\r\n    }\r\n    // Maybe ICAP? (we only support direct mode)\r\n    if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {\r\n        // It is an ICAP address with a bad checksum\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(address.substring(2, 4) === ibanChecksum(address), \"bad icap checksum\", \"address\", address);\r\n        let result = fromBase36(address.substring(4)).toString(16);\r\n        while (result.length < 40) {\r\n            result = \"0\" + result;\r\n        }\r\n        return getChecksumAddress(\"0x\" + result);\r\n    }\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"invalid address\", \"address\", address);\r\n}\r\n/**\r\n *  The [ICAP Address format](link-icap) format is an early checksum\r\n *  format which attempts to be compatible with the banking\r\n *  industry [IBAN format](link-wiki-iban) for bank accounts.\r\n *\r\n *  It is no longer common or a recommended format.\r\n *\r\n *  @example:\r\n *    getIcapAddress(\"0x8ba1f109551bd432803012645ac136ddd64dba72\");\r\n *    //_result:\r\n *\r\n *    getIcapAddress(\"XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK36\");\r\n *    //_result:\r\n *\r\n *    // Throws an error if the ICAP checksum is wrong\r\n *    getIcapAddress(\"XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK37\");\r\n *    //_error:\r\n */\r\nfunction getIcapAddress(address) {\r\n    //let base36 = _base16To36(getAddress(address).substring(2)).toUpperCase();\r\n    let base36 = BigInt(getAddress(address)).toString(36).toUpperCase();\r\n    while (base36.length < 30) {\r\n        base36 = \"0\" + base36;\r\n    }\r\n    return \"XE\" + ibanChecksum(\"XE00\" + base36) + base36;\r\n}\r\n//# sourceMappingURL=address.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/address/address.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/address/checks.js":
/*!*******************************************************!*\
  !*** ./node_modules/ethers/lib.esm/address/checks.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isAddress: () => (/* binding */ isAddress),\n/* harmony export */   isAddressable: () => (/* binding */ isAddressable),\n/* harmony export */   resolveAddress: () => (/* binding */ resolveAddress)\n/* harmony export */ });\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/* harmony import */ var _address_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./address.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/address/address.js\");\n\r\n\r\n/**\r\n *  Returns true if %%value%% is an object which implements the\r\n *  [[Addressable]] interface.\r\n *\r\n *  @example:\r\n *    // Wallets and AbstractSigner sub-classes\r\n *    isAddressable(Wallet.createRandom())\r\n *    //_result:\r\n *\r\n *    // Contracts\r\n *    contract = new Contract(\"dai.tokens.ethers.eth\", [ ], provider)\r\n *    isAddressable(contract)\r\n *    //_result:\r\n */\r\nfunction isAddressable(value) {\r\n    return (value && typeof (value.getAddress) === \"function\");\r\n}\r\n/**\r\n *  Returns true if %%value%% is a valid address.\r\n *\r\n *  @example:\r\n *    // Valid address\r\n *    isAddress(\"0x8ba1f109551bD432803012645Ac136ddd64DBA72\")\r\n *    //_result:\r\n *\r\n *    // Valid ICAP address\r\n *    isAddress(\"XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK36\")\r\n *    //_result:\r\n *\r\n *    // Invalid checksum\r\n *    isAddress(\"0x8Ba1f109551bD432803012645Ac136ddd64DBa72\")\r\n *    //_result:\r\n *\r\n *    // Invalid ICAP checksum\r\n *    isAddress(\"0x8Ba1f109551bD432803012645Ac136ddd64DBA72\")\r\n *    //_result:\r\n *\r\n *    // Not an address (an ENS name requires a provided and an\r\n *    // asynchronous API to access)\r\n *    isAddress(\"ricmoo.eth\")\r\n *    //_result:\r\n */\r\nfunction isAddress(value) {\r\n    try {\r\n        (0,_address_js__WEBPACK_IMPORTED_MODULE_0__.getAddress)(value);\r\n        return true;\r\n    }\r\n    catch (error) { }\r\n    return false;\r\n}\r\nasync function checkAddress(target, promise) {\r\n    const result = await promise;\r\n    if (result == null || result === \"0x0000000000000000000000000000000000000000\") {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assert)(typeof (target) !== \"string\", \"unconfigured name\", \"UNCONFIGURED_NAME\", { value: target });\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(false, \"invalid AddressLike value; did not resolve to a value address\", \"target\", target);\r\n    }\r\n    return (0,_address_js__WEBPACK_IMPORTED_MODULE_0__.getAddress)(result);\r\n}\r\n/**\r\n *  Resolves to an address for the %%target%%, which may be any\r\n *  supported address type, an [[Addressable]] or a Promise which\r\n *  resolves to an address.\r\n *\r\n *  If an ENS name is provided, but that name has not been correctly\r\n *  configured a [[UnconfiguredNameError]] is thrown.\r\n *\r\n *  @example:\r\n *    addr = \"0x6B175474E89094C44Da98b954EedeAC495271d0F\"\r\n *\r\n *    // Addresses are return synchronously\r\n *    resolveAddress(addr, provider)\r\n *    //_result:\r\n *\r\n *    // Address promises are resolved asynchronously\r\n *    resolveAddress(Promise.resolve(addr))\r\n *    //_result:\r\n *\r\n *    // ENS names are resolved asynchronously\r\n *    resolveAddress(\"dai.tokens.ethers.eth\", provider)\r\n *    //_result:\r\n *\r\n *    // Addressable objects are resolved asynchronously\r\n *    contract = new Contract(addr, [ ])\r\n *    resolveAddress(contract, provider)\r\n *    //_result:\r\n *\r\n *    // Unconfigured ENS names reject\r\n *    resolveAddress(\"nothing-here.ricmoo.eth\", provider)\r\n *    //_error:\r\n *\r\n *    // ENS names require a NameResolver object passed in\r\n *    // (notice the provider was omitted)\r\n *    resolveAddress(\"nothing-here.ricmoo.eth\")\r\n *    //_error:\r\n */\r\nfunction resolveAddress(target, resolver) {\r\n    if (typeof (target) === \"string\") {\r\n        if (target.match(/^0x[0-9a-f]{40}$/i)) {\r\n            return (0,_address_js__WEBPACK_IMPORTED_MODULE_0__.getAddress)(target);\r\n        }\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assert)(resolver != null, \"ENS resolution requires a provider\", \"UNSUPPORTED_OPERATION\", { operation: \"resolveName\" });\r\n        return checkAddress(target, resolver.resolveName(target));\r\n    }\r\n    else if (isAddressable(target)) {\r\n        return checkAddress(target, target.getAddress());\r\n    }\r\n    else if (target && typeof (target.then) === \"function\") {\r\n        return checkAddress(target, target);\r\n    }\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(false, \"unsupported addressable value\", \"target\", target);\r\n}\r\n//# sourceMappingURL=checks.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9hZGRyZXNzL2NoZWNrcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUEyRDtBQUNqQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsUUFBUSx1REFBVTtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSx1REFBTSwyRUFBMkUsZUFBZTtBQUN4RyxRQUFRLCtEQUFjLG9DQUFvQztBQUMxRDtBQUNBLFdBQVcsdURBQVU7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSxzQ0FBc0MsR0FBRztBQUN6QyxtQkFBbUIsdURBQVU7QUFDN0I7QUFDQSxRQUFRLHVEQUFNLG9GQUFvRiwwQkFBMEI7QUFDNUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksK0RBQWM7QUFDbEI7QUFDQSIsInNvdXJjZXMiOlsiRDpcXERvX2FuMlxcbGVuZGh1Yl92MlxcbGVuZGh1Yi1mcm9udGVuZC1uZXh0anNcXG5vZGVfbW9kdWxlc1xcZXRoZXJzXFxsaWIuZXNtXFxhZGRyZXNzXFxjaGVja3MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXNzZXJ0LCBhc3NlcnRBcmd1bWVudCB9IGZyb20gXCIuLi91dGlscy9pbmRleC5qc1wiO1xyXG5pbXBvcnQgeyBnZXRBZGRyZXNzIH0gZnJvbSBcIi4vYWRkcmVzcy5qc1wiO1xyXG4vKipcclxuICogIFJldHVybnMgdHJ1ZSBpZiAlJXZhbHVlJSUgaXMgYW4gb2JqZWN0IHdoaWNoIGltcGxlbWVudHMgdGhlXHJcbiAqICBbW0FkZHJlc3NhYmxlXV0gaW50ZXJmYWNlLlxyXG4gKlxyXG4gKiAgQGV4YW1wbGU6XHJcbiAqICAgIC8vIFdhbGxldHMgYW5kIEFic3RyYWN0U2lnbmVyIHN1Yi1jbGFzc2VzXHJcbiAqICAgIGlzQWRkcmVzc2FibGUoV2FsbGV0LmNyZWF0ZVJhbmRvbSgpKVxyXG4gKiAgICAvL19yZXN1bHQ6XHJcbiAqXHJcbiAqICAgIC8vIENvbnRyYWN0c1xyXG4gKiAgICBjb250cmFjdCA9IG5ldyBDb250cmFjdChcImRhaS50b2tlbnMuZXRoZXJzLmV0aFwiLCBbIF0sIHByb3ZpZGVyKVxyXG4gKiAgICBpc0FkZHJlc3NhYmxlKGNvbnRyYWN0KVxyXG4gKiAgICAvL19yZXN1bHQ6XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNBZGRyZXNzYWJsZSh2YWx1ZSkge1xyXG4gICAgcmV0dXJuICh2YWx1ZSAmJiB0eXBlb2YgKHZhbHVlLmdldEFkZHJlc3MpID09PSBcImZ1bmN0aW9uXCIpO1xyXG59XHJcbi8qKlxyXG4gKiAgUmV0dXJucyB0cnVlIGlmICUldmFsdWUlJSBpcyBhIHZhbGlkIGFkZHJlc3MuXHJcbiAqXHJcbiAqICBAZXhhbXBsZTpcclxuICogICAgLy8gVmFsaWQgYWRkcmVzc1xyXG4gKiAgICBpc0FkZHJlc3MoXCIweDhiYTFmMTA5NTUxYkQ0MzI4MDMwMTI2NDVBYzEzNmRkZDY0REJBNzJcIilcclxuICogICAgLy9fcmVzdWx0OlxyXG4gKlxyXG4gKiAgICAvLyBWYWxpZCBJQ0FQIGFkZHJlc3NcclxuICogICAgaXNBZGRyZXNzKFwiWEU2NUdCNkxETlhZT0ZUWDBOU1YzRlVXS09XSVhBTUpLMzZcIilcclxuICogICAgLy9fcmVzdWx0OlxyXG4gKlxyXG4gKiAgICAvLyBJbnZhbGlkIGNoZWNrc3VtXHJcbiAqICAgIGlzQWRkcmVzcyhcIjB4OEJhMWYxMDk1NTFiRDQzMjgwMzAxMjY0NUFjMTM2ZGRkNjREQmE3MlwiKVxyXG4gKiAgICAvL19yZXN1bHQ6XHJcbiAqXHJcbiAqICAgIC8vIEludmFsaWQgSUNBUCBjaGVja3N1bVxyXG4gKiAgICBpc0FkZHJlc3MoXCIweDhCYTFmMTA5NTUxYkQ0MzI4MDMwMTI2NDVBYzEzNmRkZDY0REJBNzJcIilcclxuICogICAgLy9fcmVzdWx0OlxyXG4gKlxyXG4gKiAgICAvLyBOb3QgYW4gYWRkcmVzcyAoYW4gRU5TIG5hbWUgcmVxdWlyZXMgYSBwcm92aWRlZCBhbmQgYW5cclxuICogICAgLy8gYXN5bmNocm9ub3VzIEFQSSB0byBhY2Nlc3MpXHJcbiAqICAgIGlzQWRkcmVzcyhcInJpY21vby5ldGhcIilcclxuICogICAgLy9fcmVzdWx0OlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzQWRkcmVzcyh2YWx1ZSkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBnZXRBZGRyZXNzKHZhbHVlKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvcikgeyB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cclxuYXN5bmMgZnVuY3Rpb24gY2hlY2tBZGRyZXNzKHRhcmdldCwgcHJvbWlzZSkge1xyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcHJvbWlzZTtcclxuICAgIGlmIChyZXN1bHQgPT0gbnVsbCB8fCByZXN1bHQgPT09IFwiMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCIpIHtcclxuICAgICAgICBhc3NlcnQodHlwZW9mICh0YXJnZXQpICE9PSBcInN0cmluZ1wiLCBcInVuY29uZmlndXJlZCBuYW1lXCIsIFwiVU5DT05GSUdVUkVEX05BTUVcIiwgeyB2YWx1ZTogdGFyZ2V0IH0pO1xyXG4gICAgICAgIGFzc2VydEFyZ3VtZW50KGZhbHNlLCBcImludmFsaWQgQWRkcmVzc0xpa2UgdmFsdWU7IGRpZCBub3QgcmVzb2x2ZSB0byBhIHZhbHVlIGFkZHJlc3NcIiwgXCJ0YXJnZXRcIiwgdGFyZ2V0KTtcclxuICAgIH1cclxuICAgIHJldHVybiBnZXRBZGRyZXNzKHJlc3VsdCk7XHJcbn1cclxuLyoqXHJcbiAqICBSZXNvbHZlcyB0byBhbiBhZGRyZXNzIGZvciB0aGUgJSV0YXJnZXQlJSwgd2hpY2ggbWF5IGJlIGFueVxyXG4gKiAgc3VwcG9ydGVkIGFkZHJlc3MgdHlwZSwgYW4gW1tBZGRyZXNzYWJsZV1dIG9yIGEgUHJvbWlzZSB3aGljaFxyXG4gKiAgcmVzb2x2ZXMgdG8gYW4gYWRkcmVzcy5cclxuICpcclxuICogIElmIGFuIEVOUyBuYW1lIGlzIHByb3ZpZGVkLCBidXQgdGhhdCBuYW1lIGhhcyBub3QgYmVlbiBjb3JyZWN0bHlcclxuICogIGNvbmZpZ3VyZWQgYSBbW1VuY29uZmlndXJlZE5hbWVFcnJvcl1dIGlzIHRocm93bi5cclxuICpcclxuICogIEBleGFtcGxlOlxyXG4gKiAgICBhZGRyID0gXCIweDZCMTc1NDc0RTg5MDk0QzQ0RGE5OGI5NTRFZWRlQUM0OTUyNzFkMEZcIlxyXG4gKlxyXG4gKiAgICAvLyBBZGRyZXNzZXMgYXJlIHJldHVybiBzeW5jaHJvbm91c2x5XHJcbiAqICAgIHJlc29sdmVBZGRyZXNzKGFkZHIsIHByb3ZpZGVyKVxyXG4gKiAgICAvL19yZXN1bHQ6XHJcbiAqXHJcbiAqICAgIC8vIEFkZHJlc3MgcHJvbWlzZXMgYXJlIHJlc29sdmVkIGFzeW5jaHJvbm91c2x5XHJcbiAqICAgIHJlc29sdmVBZGRyZXNzKFByb21pc2UucmVzb2x2ZShhZGRyKSlcclxuICogICAgLy9fcmVzdWx0OlxyXG4gKlxyXG4gKiAgICAvLyBFTlMgbmFtZXMgYXJlIHJlc29sdmVkIGFzeW5jaHJvbm91c2x5XHJcbiAqICAgIHJlc29sdmVBZGRyZXNzKFwiZGFpLnRva2Vucy5ldGhlcnMuZXRoXCIsIHByb3ZpZGVyKVxyXG4gKiAgICAvL19yZXN1bHQ6XHJcbiAqXHJcbiAqICAgIC8vIEFkZHJlc3NhYmxlIG9iamVjdHMgYXJlIHJlc29sdmVkIGFzeW5jaHJvbm91c2x5XHJcbiAqICAgIGNvbnRyYWN0ID0gbmV3IENvbnRyYWN0KGFkZHIsIFsgXSlcclxuICogICAgcmVzb2x2ZUFkZHJlc3MoY29udHJhY3QsIHByb3ZpZGVyKVxyXG4gKiAgICAvL19yZXN1bHQ6XHJcbiAqXHJcbiAqICAgIC8vIFVuY29uZmlndXJlZCBFTlMgbmFtZXMgcmVqZWN0XHJcbiAqICAgIHJlc29sdmVBZGRyZXNzKFwibm90aGluZy1oZXJlLnJpY21vby5ldGhcIiwgcHJvdmlkZXIpXHJcbiAqICAgIC8vX2Vycm9yOlxyXG4gKlxyXG4gKiAgICAvLyBFTlMgbmFtZXMgcmVxdWlyZSBhIE5hbWVSZXNvbHZlciBvYmplY3QgcGFzc2VkIGluXHJcbiAqICAgIC8vIChub3RpY2UgdGhlIHByb3ZpZGVyIHdhcyBvbWl0dGVkKVxyXG4gKiAgICByZXNvbHZlQWRkcmVzcyhcIm5vdGhpbmctaGVyZS5yaWNtb28uZXRoXCIpXHJcbiAqICAgIC8vX2Vycm9yOlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVBZGRyZXNzKHRhcmdldCwgcmVzb2x2ZXIpIHtcclxuICAgIGlmICh0eXBlb2YgKHRhcmdldCkgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICBpZiAodGFyZ2V0Lm1hdGNoKC9eMHhbMC05YS1mXXs0MH0kL2kpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBnZXRBZGRyZXNzKHRhcmdldCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFzc2VydChyZXNvbHZlciAhPSBudWxsLCBcIkVOUyByZXNvbHV0aW9uIHJlcXVpcmVzIGEgcHJvdmlkZXJcIiwgXCJVTlNVUFBPUlRFRF9PUEVSQVRJT05cIiwgeyBvcGVyYXRpb246IFwicmVzb2x2ZU5hbWVcIiB9KTtcclxuICAgICAgICByZXR1cm4gY2hlY2tBZGRyZXNzKHRhcmdldCwgcmVzb2x2ZXIucmVzb2x2ZU5hbWUodGFyZ2V0KSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc0FkZHJlc3NhYmxlKHRhcmdldCkpIHtcclxuICAgICAgICByZXR1cm4gY2hlY2tBZGRyZXNzKHRhcmdldCwgdGFyZ2V0LmdldEFkZHJlc3MoKSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0YXJnZXQgJiYgdHlwZW9mICh0YXJnZXQudGhlbikgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgIHJldHVybiBjaGVja0FkZHJlc3ModGFyZ2V0LCB0YXJnZXQpO1xyXG4gICAgfVxyXG4gICAgYXNzZXJ0QXJndW1lbnQoZmFsc2UsIFwidW5zdXBwb3J0ZWQgYWRkcmVzc2FibGUgdmFsdWVcIiwgXCJ0YXJnZXRcIiwgdGFyZ2V0KTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaGVja3MuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/address/checks.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/address/contract-address.js":
/*!*****************************************************************!*\
  !*** ./node_modules/ethers/lib.esm/address/contract-address.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCreate2Address: () => (/* binding */ getCreate2Address),\n/* harmony export */   getCreateAddress: () => (/* binding */ getCreateAddress)\n/* harmony export */ });\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../crypto/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/index.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/* harmony import */ var _address_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./address.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/address/address.js\");\n\r\n\r\n\r\n// http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed\r\n/**\r\n *  Returns the address that would result from a ``CREATE`` for %%tx%%.\r\n *\r\n *  This can be used to compute the address a contract will be\r\n *  deployed to by an EOA when sending a deployment transaction (i.e.\r\n *  when the ``to`` address is ``null``).\r\n *\r\n *  This can also be used to compute the address a contract will be\r\n *  deployed to by a contract, by using the contract's address as the\r\n *  ``to`` and the contract's nonce.\r\n *\r\n *  @example\r\n *    from = \"0x8ba1f109551bD432803012645Ac136ddd64DBA72\";\r\n *    nonce = 5;\r\n *\r\n *    getCreateAddress({ from, nonce });\r\n *    //_result:\r\n */\r\nfunction getCreateAddress(tx) {\r\n    const from = (0,_address_js__WEBPACK_IMPORTED_MODULE_0__.getAddress)(tx.from);\r\n    const nonce = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBigInt)(tx.nonce, \"tx.nonce\");\r\n    let nonceHex = nonce.toString(16);\r\n    if (nonceHex === \"0\") {\r\n        nonceHex = \"0x\";\r\n    }\r\n    else if (nonceHex.length % 2) {\r\n        nonceHex = \"0x0\" + nonceHex;\r\n    }\r\n    else {\r\n        nonceHex = \"0x\" + nonceHex;\r\n    }\r\n    return (0,_address_js__WEBPACK_IMPORTED_MODULE_0__.getAddress)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.dataSlice)((0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_2__.keccak256)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.encodeRlp)([from, nonceHex])), 12));\r\n}\r\n/**\r\n *  Returns the address that would result from a ``CREATE2`` operation\r\n *  with the given %%from%%, %%salt%% and %%initCodeHash%%.\r\n *\r\n *  To compute the %%initCodeHash%% from a contract's init code, use\r\n *  the [[keccak256]] function.\r\n *\r\n *  For a quick overview and example of ``CREATE2``, see [[link-ricmoo-wisps]].\r\n *\r\n *  @example\r\n *    // The address of the contract\r\n *    from = \"0x8ba1f109551bD432803012645Ac136ddd64DBA72\"\r\n *\r\n *    // The salt\r\n *    salt = id(\"HelloWorld\")\r\n *\r\n *    // The hash of the initCode\r\n *    initCode = \"0x6394198df16000526103ff60206004601c335afa6040516060f3\";\r\n *    initCodeHash = keccak256(initCode)\r\n *\r\n *    getCreate2Address(from, salt, initCodeHash)\r\n *    //_result:\r\n */\r\nfunction getCreate2Address(_from, _salt, _initCodeHash) {\r\n    const from = (0,_address_js__WEBPACK_IMPORTED_MODULE_0__.getAddress)(_from);\r\n    const salt = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBytes)(_salt, \"salt\");\r\n    const initCodeHash = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBytes)(_initCodeHash, \"initCodeHash\");\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(salt.length === 32, \"salt must be 32 bytes\", \"salt\", _salt);\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(initCodeHash.length === 32, \"initCodeHash must be 32 bytes\", \"initCodeHash\", _initCodeHash);\r\n    return (0,_address_js__WEBPACK_IMPORTED_MODULE_0__.getAddress)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.dataSlice)((0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_2__.keccak256)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.concat)([\"0xff\", from, salt, initCodeHash])), 12));\r\n}\r\n//# sourceMappingURL=contract-address.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9hZGRyZXNzL2NvbnRyYWN0LWFkZHJlc3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBK0M7QUFDdUQ7QUFDNUQ7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsYUFBYTtBQUN0QztBQUNBO0FBQ087QUFDUCxpQkFBaUIsdURBQVU7QUFDM0Isa0JBQWtCLDBEQUFTO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyx1REFBVSxDQUFDLDBEQUFTLENBQUMsMkRBQVMsQ0FBQywwREFBUztBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLGlCQUFpQix1REFBVTtBQUMzQixpQkFBaUIseURBQVE7QUFDekIseUJBQXlCLHlEQUFRO0FBQ2pDLElBQUksK0RBQWM7QUFDbEIsSUFBSSwrREFBYztBQUNsQixXQUFXLHVEQUFVLENBQUMsMERBQVMsQ0FBQywyREFBUyxDQUFDLHVEQUFNO0FBQ2hEO0FBQ0EiLCJzb3VyY2VzIjpbIkQ6XFxEb19hbjJcXGxlbmRodWJfdjJcXGxlbmRodWItZnJvbnRlbmQtbmV4dGpzXFxub2RlX21vZHVsZXNcXGV0aGVyc1xcbGliLmVzbVxcYWRkcmVzc1xcY29udHJhY3QtYWRkcmVzcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBrZWNjYWsyNTYgfSBmcm9tIFwiLi4vY3J5cHRvL2luZGV4LmpzXCI7XHJcbmltcG9ydCB7IGNvbmNhdCwgZGF0YVNsaWNlLCBnZXRCaWdJbnQsIGdldEJ5dGVzLCBlbmNvZGVSbHAsIGFzc2VydEFyZ3VtZW50IH0gZnJvbSBcIi4uL3V0aWxzL2luZGV4LmpzXCI7XHJcbmltcG9ydCB7IGdldEFkZHJlc3MgfSBmcm9tIFwiLi9hZGRyZXNzLmpzXCI7XHJcbi8vIGh0dHA6Ly9ldGhlcmV1bS5zdGFja2V4Y2hhbmdlLmNvbS9xdWVzdGlvbnMvNzYwL2hvdy1pcy10aGUtYWRkcmVzcy1vZi1hbi1ldGhlcmV1bS1jb250cmFjdC1jb21wdXRlZFxyXG4vKipcclxuICogIFJldHVybnMgdGhlIGFkZHJlc3MgdGhhdCB3b3VsZCByZXN1bHQgZnJvbSBhIGBgQ1JFQVRFYGAgZm9yICUldHglJS5cclxuICpcclxuICogIFRoaXMgY2FuIGJlIHVzZWQgdG8gY29tcHV0ZSB0aGUgYWRkcmVzcyBhIGNvbnRyYWN0IHdpbGwgYmVcclxuICogIGRlcGxveWVkIHRvIGJ5IGFuIEVPQSB3aGVuIHNlbmRpbmcgYSBkZXBsb3ltZW50IHRyYW5zYWN0aW9uIChpLmUuXHJcbiAqICB3aGVuIHRoZSBgYHRvYGAgYWRkcmVzcyBpcyBgYG51bGxgYCkuXHJcbiAqXHJcbiAqICBUaGlzIGNhbiBhbHNvIGJlIHVzZWQgdG8gY29tcHV0ZSB0aGUgYWRkcmVzcyBhIGNvbnRyYWN0IHdpbGwgYmVcclxuICogIGRlcGxveWVkIHRvIGJ5IGEgY29udHJhY3QsIGJ5IHVzaW5nIHRoZSBjb250cmFjdCdzIGFkZHJlc3MgYXMgdGhlXHJcbiAqICBgYHRvYGAgYW5kIHRoZSBjb250cmFjdCdzIG5vbmNlLlxyXG4gKlxyXG4gKiAgQGV4YW1wbGVcclxuICogICAgZnJvbSA9IFwiMHg4YmExZjEwOTU1MWJENDMyODAzMDEyNjQ1QWMxMzZkZGQ2NERCQTcyXCI7XHJcbiAqICAgIG5vbmNlID0gNTtcclxuICpcclxuICogICAgZ2V0Q3JlYXRlQWRkcmVzcyh7IGZyb20sIG5vbmNlIH0pO1xyXG4gKiAgICAvL19yZXN1bHQ6XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q3JlYXRlQWRkcmVzcyh0eCkge1xyXG4gICAgY29uc3QgZnJvbSA9IGdldEFkZHJlc3ModHguZnJvbSk7XHJcbiAgICBjb25zdCBub25jZSA9IGdldEJpZ0ludCh0eC5ub25jZSwgXCJ0eC5ub25jZVwiKTtcclxuICAgIGxldCBub25jZUhleCA9IG5vbmNlLnRvU3RyaW5nKDE2KTtcclxuICAgIGlmIChub25jZUhleCA9PT0gXCIwXCIpIHtcclxuICAgICAgICBub25jZUhleCA9IFwiMHhcIjtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKG5vbmNlSGV4Lmxlbmd0aCAlIDIpIHtcclxuICAgICAgICBub25jZUhleCA9IFwiMHgwXCIgKyBub25jZUhleDtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIG5vbmNlSGV4ID0gXCIweFwiICsgbm9uY2VIZXg7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZ2V0QWRkcmVzcyhkYXRhU2xpY2Uoa2VjY2FrMjU2KGVuY29kZVJscChbZnJvbSwgbm9uY2VIZXhdKSksIDEyKSk7XHJcbn1cclxuLyoqXHJcbiAqICBSZXR1cm5zIHRoZSBhZGRyZXNzIHRoYXQgd291bGQgcmVzdWx0IGZyb20gYSBgYENSRUFURTJgYCBvcGVyYXRpb25cclxuICogIHdpdGggdGhlIGdpdmVuICUlZnJvbSUlLCAlJXNhbHQlJSBhbmQgJSVpbml0Q29kZUhhc2glJS5cclxuICpcclxuICogIFRvIGNvbXB1dGUgdGhlICUlaW5pdENvZGVIYXNoJSUgZnJvbSBhIGNvbnRyYWN0J3MgaW5pdCBjb2RlLCB1c2VcclxuICogIHRoZSBbW2tlY2NhazI1Nl1dIGZ1bmN0aW9uLlxyXG4gKlxyXG4gKiAgRm9yIGEgcXVpY2sgb3ZlcnZpZXcgYW5kIGV4YW1wbGUgb2YgYGBDUkVBVEUyYGAsIHNlZSBbW2xpbmstcmljbW9vLXdpc3BzXV0uXHJcbiAqXHJcbiAqICBAZXhhbXBsZVxyXG4gKiAgICAvLyBUaGUgYWRkcmVzcyBvZiB0aGUgY29udHJhY3RcclxuICogICAgZnJvbSA9IFwiMHg4YmExZjEwOTU1MWJENDMyODAzMDEyNjQ1QWMxMzZkZGQ2NERCQTcyXCJcclxuICpcclxuICogICAgLy8gVGhlIHNhbHRcclxuICogICAgc2FsdCA9IGlkKFwiSGVsbG9Xb3JsZFwiKVxyXG4gKlxyXG4gKiAgICAvLyBUaGUgaGFzaCBvZiB0aGUgaW5pdENvZGVcclxuICogICAgaW5pdENvZGUgPSBcIjB4NjM5NDE5OGRmMTYwMDA1MjYxMDNmZjYwMjA2MDA0NjAxYzMzNWFmYTYwNDA1MTYwNjBmM1wiO1xyXG4gKiAgICBpbml0Q29kZUhhc2ggPSBrZWNjYWsyNTYoaW5pdENvZGUpXHJcbiAqXHJcbiAqICAgIGdldENyZWF0ZTJBZGRyZXNzKGZyb20sIHNhbHQsIGluaXRDb2RlSGFzaClcclxuICogICAgLy9fcmVzdWx0OlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldENyZWF0ZTJBZGRyZXNzKF9mcm9tLCBfc2FsdCwgX2luaXRDb2RlSGFzaCkge1xyXG4gICAgY29uc3QgZnJvbSA9IGdldEFkZHJlc3MoX2Zyb20pO1xyXG4gICAgY29uc3Qgc2FsdCA9IGdldEJ5dGVzKF9zYWx0LCBcInNhbHRcIik7XHJcbiAgICBjb25zdCBpbml0Q29kZUhhc2ggPSBnZXRCeXRlcyhfaW5pdENvZGVIYXNoLCBcImluaXRDb2RlSGFzaFwiKTtcclxuICAgIGFzc2VydEFyZ3VtZW50KHNhbHQubGVuZ3RoID09PSAzMiwgXCJzYWx0IG11c3QgYmUgMzIgYnl0ZXNcIiwgXCJzYWx0XCIsIF9zYWx0KTtcclxuICAgIGFzc2VydEFyZ3VtZW50KGluaXRDb2RlSGFzaC5sZW5ndGggPT09IDMyLCBcImluaXRDb2RlSGFzaCBtdXN0IGJlIDMyIGJ5dGVzXCIsIFwiaW5pdENvZGVIYXNoXCIsIF9pbml0Q29kZUhhc2gpO1xyXG4gICAgcmV0dXJuIGdldEFkZHJlc3MoZGF0YVNsaWNlKGtlY2NhazI1Nihjb25jYXQoW1wiMHhmZlwiLCBmcm9tLCBzYWx0LCBpbml0Q29kZUhhc2hdKSksIDEyKSk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29udHJhY3QtYWRkcmVzcy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/address/contract-address.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/address/index.js":
/*!******************************************************!*\
  !*** ./node_modules/ethers/lib.esm/address/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAddress: () => (/* reexport safe */ _address_js__WEBPACK_IMPORTED_MODULE_0__.getAddress),\n/* harmony export */   getCreate2Address: () => (/* reexport safe */ _contract_address_js__WEBPACK_IMPORTED_MODULE_1__.getCreate2Address),\n/* harmony export */   getCreateAddress: () => (/* reexport safe */ _contract_address_js__WEBPACK_IMPORTED_MODULE_1__.getCreateAddress),\n/* harmony export */   getIcapAddress: () => (/* reexport safe */ _address_js__WEBPACK_IMPORTED_MODULE_0__.getIcapAddress),\n/* harmony export */   isAddress: () => (/* reexport safe */ _checks_js__WEBPACK_IMPORTED_MODULE_2__.isAddress),\n/* harmony export */   isAddressable: () => (/* reexport safe */ _checks_js__WEBPACK_IMPORTED_MODULE_2__.isAddressable),\n/* harmony export */   resolveAddress: () => (/* reexport safe */ _checks_js__WEBPACK_IMPORTED_MODULE_2__.resolveAddress)\n/* harmony export */ });\n/* harmony import */ var _address_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./address.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/address/address.js\");\n/* harmony import */ var _contract_address_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./contract-address.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/address/contract-address.js\");\n/* harmony import */ var _checks_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./checks.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/address/checks.js\");\n/**\r\n *  Addresses are a fundamental part of interacting with Ethereum. They\r\n *  represent the global identity of Externally Owned Accounts (accounts\r\n *  backed by a private key) and contracts.\r\n *\r\n *  The Ethereum Naming Service (ENS) provides an interconnected ecosystem\r\n *  of contracts, standards and libraries which enable looking up an\r\n *  address for an ENS name.\r\n *\r\n *  These functions help convert between various formats, validate\r\n *  addresses and safely resolve ENS names.\r\n *\r\n *  @_section: api/address:Addresses  [about-addresses]\r\n */\r\nnull;\r\n\r\n\r\n\r\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9hZGRyZXNzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDMEQ7QUFDa0I7QUFDTDtBQUN2RSIsInNvdXJjZXMiOlsiRDpcXERvX2FuMlxcbGVuZGh1Yl92MlxcbGVuZGh1Yi1mcm9udGVuZC1uZXh0anNcXG5vZGVfbW9kdWxlc1xcZXRoZXJzXFxsaWIuZXNtXFxhZGRyZXNzXFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogIEFkZHJlc3NlcyBhcmUgYSBmdW5kYW1lbnRhbCBwYXJ0IG9mIGludGVyYWN0aW5nIHdpdGggRXRoZXJldW0uIFRoZXlcclxuICogIHJlcHJlc2VudCB0aGUgZ2xvYmFsIGlkZW50aXR5IG9mIEV4dGVybmFsbHkgT3duZWQgQWNjb3VudHMgKGFjY291bnRzXHJcbiAqICBiYWNrZWQgYnkgYSBwcml2YXRlIGtleSkgYW5kIGNvbnRyYWN0cy5cclxuICpcclxuICogIFRoZSBFdGhlcmV1bSBOYW1pbmcgU2VydmljZSAoRU5TKSBwcm92aWRlcyBhbiBpbnRlcmNvbm5lY3RlZCBlY29zeXN0ZW1cclxuICogIG9mIGNvbnRyYWN0cywgc3RhbmRhcmRzIGFuZCBsaWJyYXJpZXMgd2hpY2ggZW5hYmxlIGxvb2tpbmcgdXAgYW5cclxuICogIGFkZHJlc3MgZm9yIGFuIEVOUyBuYW1lLlxyXG4gKlxyXG4gKiAgVGhlc2UgZnVuY3Rpb25zIGhlbHAgY29udmVydCBiZXR3ZWVuIHZhcmlvdXMgZm9ybWF0cywgdmFsaWRhdGVcclxuICogIGFkZHJlc3NlcyBhbmQgc2FmZWx5IHJlc29sdmUgRU5TIG5hbWVzLlxyXG4gKlxyXG4gKiAgQF9zZWN0aW9uOiBhcGkvYWRkcmVzczpBZGRyZXNzZXMgIFthYm91dC1hZGRyZXNzZXNdXHJcbiAqL1xyXG5udWxsO1xyXG5leHBvcnQgeyBnZXRBZGRyZXNzLCBnZXRJY2FwQWRkcmVzcyB9IGZyb20gXCIuL2FkZHJlc3MuanNcIjtcclxuZXhwb3J0IHsgZ2V0Q3JlYXRlQWRkcmVzcywgZ2V0Q3JlYXRlMkFkZHJlc3MgfSBmcm9tIFwiLi9jb250cmFjdC1hZGRyZXNzLmpzXCI7XHJcbmV4cG9ydCB7IGlzQWRkcmVzc2FibGUsIGlzQWRkcmVzcywgcmVzb2x2ZUFkZHJlc3MgfSBmcm9tIFwiLi9jaGVja3MuanNcIjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/address/index.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/constants/addresses.js":
/*!************************************************************!*\
  !*** ./node_modules/ethers/lib.esm/constants/addresses.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ZeroAddress: () => (/* binding */ ZeroAddress)\n/* harmony export */ });\n/**\r\n *  A constant for the zero address.\r\n *\r\n *  (**i.e.** ``\"0x0000000000000000000000000000000000000000\"``)\r\n */\r\nconst ZeroAddress = \"0x0000000000000000000000000000000000000000\";\r\n//# sourceMappingURL=addresses.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9jb25zdGFudHMvYWRkcmVzc2VzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCIsInNvdXJjZXMiOlsiRDpcXERvX2FuMlxcbGVuZGh1Yl92MlxcbGVuZGh1Yi1mcm9udGVuZC1uZXh0anNcXG5vZGVfbW9kdWxlc1xcZXRoZXJzXFxsaWIuZXNtXFxjb25zdGFudHNcXGFkZHJlc3Nlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogIEEgY29uc3RhbnQgZm9yIHRoZSB6ZXJvIGFkZHJlc3MuXHJcbiAqXHJcbiAqICAoKippLmUuKiogYGBcIjB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiYGApXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgWmVyb0FkZHJlc3MgPSBcIjB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hZGRyZXNzZXMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/constants/addresses.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/constants/hashes.js":
/*!*********************************************************!*\
  !*** ./node_modules/ethers/lib.esm/constants/hashes.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ZeroHash: () => (/* binding */ ZeroHash)\n/* harmony export */ });\n/**\r\n *  A constant for the zero hash.\r\n *\r\n *  (**i.e.** ``\"0x0000000000000000000000000000000000000000000000000000000000000000\"``)\r\n */\r\nconst ZeroHash = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\r\n//# sourceMappingURL=hashes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9jb25zdGFudHMvaGFzaGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCIsInNvdXJjZXMiOlsiRDpcXERvX2FuMlxcbGVuZGh1Yl92MlxcbGVuZGh1Yi1mcm9udGVuZC1uZXh0anNcXG5vZGVfbW9kdWxlc1xcZXRoZXJzXFxsaWIuZXNtXFxjb25zdGFudHNcXGhhc2hlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogIEEgY29uc3RhbnQgZm9yIHRoZSB6ZXJvIGhhc2guXHJcbiAqXHJcbiAqICAoKippLmUuKiogYGBcIjB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiYGApXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgWmVyb0hhc2ggPSBcIjB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1oYXNoZXMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/constants/hashes.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/constants/index.js":
/*!********************************************************!*\
  !*** ./node_modules/ethers/lib.esm/constants/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EtherSymbol: () => (/* reexport safe */ _strings_js__WEBPACK_IMPORTED_MODULE_3__.EtherSymbol),\n/* harmony export */   MaxInt256: () => (/* reexport safe */ _numbers_js__WEBPACK_IMPORTED_MODULE_2__.MaxInt256),\n/* harmony export */   MaxUint256: () => (/* reexport safe */ _numbers_js__WEBPACK_IMPORTED_MODULE_2__.MaxUint256),\n/* harmony export */   MessagePrefix: () => (/* reexport safe */ _strings_js__WEBPACK_IMPORTED_MODULE_3__.MessagePrefix),\n/* harmony export */   MinInt256: () => (/* reexport safe */ _numbers_js__WEBPACK_IMPORTED_MODULE_2__.MinInt256),\n/* harmony export */   N: () => (/* reexport safe */ _numbers_js__WEBPACK_IMPORTED_MODULE_2__.N),\n/* harmony export */   WeiPerEther: () => (/* reexport safe */ _numbers_js__WEBPACK_IMPORTED_MODULE_2__.WeiPerEther),\n/* harmony export */   ZeroAddress: () => (/* reexport safe */ _addresses_js__WEBPACK_IMPORTED_MODULE_0__.ZeroAddress),\n/* harmony export */   ZeroHash: () => (/* reexport safe */ _hashes_js__WEBPACK_IMPORTED_MODULE_1__.ZeroHash)\n/* harmony export */ });\n/* harmony import */ var _addresses_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./addresses.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/constants/addresses.js\");\n/* harmony import */ var _hashes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./hashes.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/constants/hashes.js\");\n/* harmony import */ var _numbers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./numbers.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/constants/numbers.js\");\n/* harmony import */ var _strings_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./strings.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/constants/strings.js\");\n/**\r\n *  Some common constants useful for Ethereum.\r\n *\r\n *  @_section: api/constants: Constants  [about-constants]\r\n */\r\n\r\n\r\n\r\n\r\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9jb25zdGFudHMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDNkM7QUFDTjtBQUN5QztBQUN0QjtBQUMxRCIsInNvdXJjZXMiOlsiRDpcXERvX2FuMlxcbGVuZGh1Yl92MlxcbGVuZGh1Yi1mcm9udGVuZC1uZXh0anNcXG5vZGVfbW9kdWxlc1xcZXRoZXJzXFxsaWIuZXNtXFxjb25zdGFudHNcXGluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiAgU29tZSBjb21tb24gY29uc3RhbnRzIHVzZWZ1bCBmb3IgRXRoZXJldW0uXHJcbiAqXHJcbiAqICBAX3NlY3Rpb246IGFwaS9jb25zdGFudHM6IENvbnN0YW50cyAgW2Fib3V0LWNvbnN0YW50c11cclxuICovXHJcbmV4cG9ydCB7IFplcm9BZGRyZXNzIH0gZnJvbSBcIi4vYWRkcmVzc2VzLmpzXCI7XHJcbmV4cG9ydCB7IFplcm9IYXNoIH0gZnJvbSBcIi4vaGFzaGVzLmpzXCI7XHJcbmV4cG9ydCB7IE4sIFdlaVBlckV0aGVyLCBNYXhVaW50MjU2LCBNaW5JbnQyNTYsIE1heEludDI1NiB9IGZyb20gXCIuL251bWJlcnMuanNcIjtcclxuZXhwb3J0IHsgRXRoZXJTeW1ib2wsIE1lc3NhZ2VQcmVmaXggfSBmcm9tIFwiLi9zdHJpbmdzLmpzXCI7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/constants/index.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/constants/numbers.js":
/*!**********************************************************!*\
  !*** ./node_modules/ethers/lib.esm/constants/numbers.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MaxInt256: () => (/* binding */ MaxInt256),\n/* harmony export */   MaxUint256: () => (/* binding */ MaxUint256),\n/* harmony export */   MinInt256: () => (/* binding */ MinInt256),\n/* harmony export */   N: () => (/* binding */ N),\n/* harmony export */   WeiPerEther: () => (/* binding */ WeiPerEther)\n/* harmony export */ });\n/**\r\n *  A constant for the order N for the secp256k1 curve.\r\n *\r\n *  (**i.e.** ``0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141n``)\r\n */\r\nconst N = BigInt(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\r\n/**\r\n *  A constant for the number of wei in a single ether.\r\n *\r\n *  (**i.e.** ``1000000000000000000n``)\r\n */\r\nconst WeiPerEther = BigInt(\"1000000000000000000\");\r\n/**\r\n *  A constant for the maximum value for a ``uint256``.\r\n *\r\n *  (**i.e.** ``0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn``)\r\n */\r\nconst MaxUint256 = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\r\n/**\r\n *  A constant for the minimum value for an ``int256``.\r\n *\r\n *  (**i.e.** ``-8000000000000000000000000000000000000000000000000000000000000000n``)\r\n */\r\nconst MinInt256 = BigInt(\"0x8000000000000000000000000000000000000000000000000000000000000000\") * BigInt(-1);\r\n/**\r\n *  A constant for the maximum value for an ``int256``.\r\n *\r\n *  (**i.e.** ``0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn``)\r\n */\r\nconst MaxInt256 = BigInt(\"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\r\n//# sourceMappingURL=numbers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9jb25zdGFudHMvbnVtYmVycy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQIiwic291cmNlcyI6WyJEOlxcRG9fYW4yXFxsZW5kaHViX3YyXFxsZW5kaHViLWZyb250ZW5kLW5leHRqc1xcbm9kZV9tb2R1bGVzXFxldGhlcnNcXGxpYi5lc21cXGNvbnN0YW50c1xcbnVtYmVycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogIEEgY29uc3RhbnQgZm9yIHRoZSBvcmRlciBOIGZvciB0aGUgc2VjcDI1NmsxIGN1cnZlLlxyXG4gKlxyXG4gKiAgKCoqaS5lLioqIGBgMHhmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZWJhYWVkY2U2YWY0OGEwM2JiZmQyNWU4Y2QwMzY0MTQxbmBgKVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IE4gPSBCaWdJbnQoXCIweGZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZlYmFhZWRjZTZhZjQ4YTAzYmJmZDI1ZThjZDAzNjQxNDFcIik7XHJcbi8qKlxyXG4gKiAgQSBjb25zdGFudCBmb3IgdGhlIG51bWJlciBvZiB3ZWkgaW4gYSBzaW5nbGUgZXRoZXIuXHJcbiAqXHJcbiAqICAoKippLmUuKiogYGAxMDAwMDAwMDAwMDAwMDAwMDAwbmBgKVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFdlaVBlckV0aGVyID0gQmlnSW50KFwiMTAwMDAwMDAwMDAwMDAwMDAwMFwiKTtcclxuLyoqXHJcbiAqICBBIGNvbnN0YW50IGZvciB0aGUgbWF4aW11bSB2YWx1ZSBmb3IgYSBgYHVpbnQyNTZgYC5cclxuICpcclxuICogICgqKmkuZS4qKiBgYDB4ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZm5gYClcclxuICovXHJcbmV4cG9ydCBjb25zdCBNYXhVaW50MjU2ID0gQmlnSW50KFwiMHhmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmXCIpO1xyXG4vKipcclxuICogIEEgY29uc3RhbnQgZm9yIHRoZSBtaW5pbXVtIHZhbHVlIGZvciBhbiBgYGludDI1NmBgLlxyXG4gKlxyXG4gKiAgKCoqaS5lLioqIGBgLTgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBuYGApXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgTWluSW50MjU2ID0gQmlnSW50KFwiMHg4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCIpICogQmlnSW50KC0xKTtcclxuLyoqXHJcbiAqICBBIGNvbnN0YW50IGZvciB0aGUgbWF4aW11bSB2YWx1ZSBmb3IgYW4gYGBpbnQyNTZgYC5cclxuICpcclxuICogICgqKmkuZS4qKiBgYDB4N2ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZm5gYClcclxuICovXHJcbmV4cG9ydCBjb25zdCBNYXhJbnQyNTYgPSBCaWdJbnQoXCIweDdmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZcIik7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW51bWJlcnMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/constants/numbers.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/constants/strings.js":
/*!**********************************************************!*\
  !*** ./node_modules/ethers/lib.esm/constants/strings.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EtherSymbol: () => (/* binding */ EtherSymbol),\n/* harmony export */   MessagePrefix: () => (/* binding */ MessagePrefix)\n/* harmony export */ });\n// NFKC (composed)             // (decomposed)\r\n/**\r\n *  A constant for the ether symbol (normalized using NFKC).\r\n *\r\n *  (**i.e.** ``\"\\\\u039e\"``)\r\n */\r\nconst EtherSymbol = \"\\u039e\"; // \"\\uD835\\uDF63\";\r\n/**\r\n *  A constant for the [[link-eip-191]] personal message prefix.\r\n *\r\n *  (**i.e.** ``\"\\\\x19Ethereum Signed Message:\\\\n\"``)\r\n */\r\nconst MessagePrefix = \"\\x19Ethereum Signed Message:\\n\";\r\n//# sourceMappingURL=strings.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9jb25zdGFudHMvc3RyaW5ncy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLDhCQUE4QjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCIsInNvdXJjZXMiOlsiRDpcXERvX2FuMlxcbGVuZGh1Yl92MlxcbGVuZGh1Yi1mcm9udGVuZC1uZXh0anNcXG5vZGVfbW9kdWxlc1xcZXRoZXJzXFxsaWIuZXNtXFxjb25zdGFudHNcXHN0cmluZ3MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gTkZLQyAoY29tcG9zZWQpICAgICAgICAgICAgIC8vIChkZWNvbXBvc2VkKVxyXG4vKipcclxuICogIEEgY29uc3RhbnQgZm9yIHRoZSBldGhlciBzeW1ib2wgKG5vcm1hbGl6ZWQgdXNpbmcgTkZLQykuXHJcbiAqXHJcbiAqICAoKippLmUuKiogYGBcIlxcXFx1MDM5ZVwiYGApXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgRXRoZXJTeW1ib2wgPSBcIlxcdTAzOWVcIjsgLy8gXCJcXHVEODM1XFx1REY2M1wiO1xyXG4vKipcclxuICogIEEgY29uc3RhbnQgZm9yIHRoZSBbW2xpbmstZWlwLTE5MV1dIHBlcnNvbmFsIG1lc3NhZ2UgcHJlZml4LlxyXG4gKlxyXG4gKiAgKCoqaS5lLioqIGBgXCJcXFxceDE5RXRoZXJldW0gU2lnbmVkIE1lc3NhZ2U6XFxcXG5cImBgKVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IE1lc3NhZ2VQcmVmaXggPSBcIlxceDE5RXRoZXJldW0gU2lnbmVkIE1lc3NhZ2U6XFxuXCI7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0cmluZ3MuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/constants/strings.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/contract/contract.js":
/*!**********************************************************!*\
  !*** ./node_modules/ethers/lib.esm/contract/contract.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseContract: () => (/* binding */ BaseContract),\n/* harmony export */   Contract: () => (/* binding */ Contract),\n/* harmony export */   copyOverrides: () => (/* binding */ copyOverrides),\n/* harmony export */   resolveArgs: () => (/* binding */ resolveArgs)\n/* harmony export */ });\n/* harmony import */ var _abi_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../abi/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/index.js\");\n/* harmony import */ var _address_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../address/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/address/index.js\");\n/* harmony import */ var _providers_provider_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../providers/provider.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/* harmony import */ var _wrappers_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./wrappers.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/contract/wrappers.js\");\n\r\n\r\n// import from provider.ts instead of index.ts to prevent circular dep\r\n// from EtherscanProvider\r\n\r\n\r\n\r\nconst BN_0 = BigInt(0);\r\nfunction canCall(value) {\r\n    return (value && typeof (value.call) === \"function\");\r\n}\r\nfunction canEstimate(value) {\r\n    return (value && typeof (value.estimateGas) === \"function\");\r\n}\r\nfunction canResolve(value) {\r\n    return (value && typeof (value.resolveName) === \"function\");\r\n}\r\nfunction canSend(value) {\r\n    return (value && typeof (value.sendTransaction) === \"function\");\r\n}\r\nfunction getResolver(value) {\r\n    if (value != null) {\r\n        if (canResolve(value)) {\r\n            return value;\r\n        }\r\n        if (value.provider) {\r\n            return value.provider;\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\nclass PreparedTopicFilter {\r\n    #filter;\r\n    fragment;\r\n    constructor(contract, fragment, args) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, { fragment });\r\n        if (fragment.inputs.length < args.length) {\r\n            throw new Error(\"too many arguments\");\r\n        }\r\n        // Recursively descend into args and resolve any addresses\r\n        const runner = getRunner(contract.runner, \"resolveName\");\r\n        const resolver = canResolve(runner) ? runner : null;\r\n        this.#filter = (async function () {\r\n            const resolvedArgs = await Promise.all(fragment.inputs.map((param, index) => {\r\n                const arg = args[index];\r\n                if (arg == null) {\r\n                    return null;\r\n                }\r\n                return param.walkAsync(args[index], (type, value) => {\r\n                    if (type === \"address\") {\r\n                        if (Array.isArray(value)) {\r\n                            return Promise.all(value.map((v) => (0,_address_index_js__WEBPACK_IMPORTED_MODULE_1__.resolveAddress)(v, resolver)));\r\n                        }\r\n                        return (0,_address_index_js__WEBPACK_IMPORTED_MODULE_1__.resolveAddress)(value, resolver);\r\n                    }\r\n                    return value;\r\n                });\r\n            }));\r\n            return contract.interface.encodeFilterTopics(fragment, resolvedArgs);\r\n        })();\r\n    }\r\n    getTopicFilter() {\r\n        return this.#filter;\r\n    }\r\n}\r\n// A = Arguments passed in as a tuple\r\n// R = The result type of the call (i.e. if only one return type,\r\n//     the qualified type, otherwise Result)\r\n// D = The type the default call will return (i.e. R for view/pure,\r\n//     TransactionResponse otherwise)\r\n//export interface ContractMethod<A extends Array<any> = Array<any>, R = any, D extends R | ContractTransactionResponse = ContractTransactionResponse> {\r\nfunction getRunner(value, feature) {\r\n    if (value == null) {\r\n        return null;\r\n    }\r\n    if (typeof (value[feature]) === \"function\") {\r\n        return value;\r\n    }\r\n    if (value.provider && typeof (value.provider[feature]) === \"function\") {\r\n        return value.provider;\r\n    }\r\n    return null;\r\n}\r\nfunction getProvider(value) {\r\n    if (value == null) {\r\n        return null;\r\n    }\r\n    return value.provider || null;\r\n}\r\n/**\r\n *  @_ignore:\r\n */\r\nasync function copyOverrides(arg, allowed) {\r\n    // Make sure the overrides passed in are a valid overrides object\r\n    const _overrides = _abi_index_js__WEBPACK_IMPORTED_MODULE_2__.Typed.dereference(arg, \"overrides\");\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(typeof (_overrides) === \"object\", \"invalid overrides parameter\", \"overrides\", arg);\r\n    // Create a shallow copy (we'll deep-ify anything needed during normalizing)\r\n    const overrides = (0,_providers_provider_js__WEBPACK_IMPORTED_MODULE_3__.copyRequest)(_overrides);\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(overrides.to == null || (allowed || []).indexOf(\"to\") >= 0, \"cannot override to\", \"overrides.to\", overrides.to);\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(overrides.data == null || (allowed || []).indexOf(\"data\") >= 0, \"cannot override data\", \"overrides.data\", overrides.data);\r\n    // Resolve any from\r\n    if (overrides.from) {\r\n        overrides.from = overrides.from;\r\n    }\r\n    return overrides;\r\n}\r\n/**\r\n *  @_ignore:\r\n */\r\nasync function resolveArgs(_runner, inputs, args) {\r\n    // Recursively descend into args and resolve any addresses\r\n    const runner = getRunner(_runner, \"resolveName\");\r\n    const resolver = canResolve(runner) ? runner : null;\r\n    return await Promise.all(inputs.map((param, index) => {\r\n        return param.walkAsync(args[index], (type, value) => {\r\n            value = _abi_index_js__WEBPACK_IMPORTED_MODULE_2__.Typed.dereference(value, type);\r\n            if (type === \"address\") {\r\n                return (0,_address_index_js__WEBPACK_IMPORTED_MODULE_1__.resolveAddress)(value, resolver);\r\n            }\r\n            return value;\r\n        });\r\n    }));\r\n}\r\nfunction buildWrappedFallback(contract) {\r\n    const populateTransaction = async function (overrides) {\r\n        // If an overrides was passed in, copy it and normalize the values\r\n        const tx = (await copyOverrides(overrides, [\"data\"]));\r\n        tx.to = await contract.getAddress();\r\n        if (tx.from) {\r\n            tx.from = await (0,_address_index_js__WEBPACK_IMPORTED_MODULE_1__.resolveAddress)(tx.from, getResolver(contract.runner));\r\n        }\r\n        const iface = contract.interface;\r\n        const noValue = ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt)((tx.value || BN_0), \"overrides.value\") === BN_0);\r\n        const noData = ((tx.data || \"0x\") === \"0x\");\r\n        if (iface.fallback && !iface.fallback.payable && iface.receive && !noData && !noValue) {\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"cannot send data to receive or send value to non-payable fallback\", \"overrides\", overrides);\r\n        }\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(iface.fallback || noData, \"cannot send data to receive-only contract\", \"overrides.data\", tx.data);\r\n        // Only allow payable contracts to set non-zero value\r\n        const payable = iface.receive || (iface.fallback && iface.fallback.payable);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(payable || noValue, \"cannot send value to non-payable fallback\", \"overrides.value\", tx.value);\r\n        // Only allow fallback contracts to set non-empty data\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(iface.fallback || noData, \"cannot send data to receive-only contract\", \"overrides.data\", tx.data);\r\n        return tx;\r\n    };\r\n    const staticCall = async function (overrides) {\r\n        const runner = getRunner(contract.runner, \"call\");\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(canCall(runner), \"contract runner does not support calling\", \"UNSUPPORTED_OPERATION\", { operation: \"call\" });\r\n        const tx = await populateTransaction(overrides);\r\n        try {\r\n            return await runner.call(tx);\r\n        }\r\n        catch (error) {\r\n            if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isCallException)(error) && error.data) {\r\n                throw contract.interface.makeError(error.data, tx);\r\n            }\r\n            throw error;\r\n        }\r\n    };\r\n    const send = async function (overrides) {\r\n        const runner = contract.runner;\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(canSend(runner), \"contract runner does not support sending transactions\", \"UNSUPPORTED_OPERATION\", { operation: \"sendTransaction\" });\r\n        const tx = await runner.sendTransaction(await populateTransaction(overrides));\r\n        const provider = getProvider(contract.runner);\r\n        // @TODO: the provider can be null; make a custom dummy provider that will throw a\r\n        // meaningful error\r\n        return new _wrappers_js__WEBPACK_IMPORTED_MODULE_4__.ContractTransactionResponse(contract.interface, provider, tx);\r\n    };\r\n    const estimateGas = async function (overrides) {\r\n        const runner = getRunner(contract.runner, \"estimateGas\");\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(canEstimate(runner), \"contract runner does not support gas estimation\", \"UNSUPPORTED_OPERATION\", { operation: \"estimateGas\" });\r\n        return await runner.estimateGas(await populateTransaction(overrides));\r\n    };\r\n    const method = async (overrides) => {\r\n        return await send(overrides);\r\n    };\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(method, {\r\n        _contract: contract,\r\n        estimateGas,\r\n        populateTransaction,\r\n        send, staticCall\r\n    });\r\n    return method;\r\n}\r\nfunction buildWrappedMethod(contract, key) {\r\n    const getFragment = function (...args) {\r\n        const fragment = contract.interface.getFunction(key, args);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\r\n            operation: \"fragment\",\r\n            info: { key, args }\r\n        });\r\n        return fragment;\r\n    };\r\n    const populateTransaction = async function (...args) {\r\n        const fragment = getFragment(...args);\r\n        // If an overrides was passed in, copy it and normalize the values\r\n        let overrides = {};\r\n        if (fragment.inputs.length + 1 === args.length) {\r\n            overrides = await copyOverrides(args.pop());\r\n            if (overrides.from) {\r\n                overrides.from = await (0,_address_index_js__WEBPACK_IMPORTED_MODULE_1__.resolveAddress)(overrides.from, getResolver(contract.runner));\r\n            }\r\n        }\r\n        if (fragment.inputs.length !== args.length) {\r\n            throw new Error(\"internal error: fragment inputs doesn't match arguments; should not happen\");\r\n        }\r\n        const resolvedArgs = await resolveArgs(contract.runner, fragment.inputs, args);\r\n        return Object.assign({}, overrides, await (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.resolveProperties)({\r\n            to: contract.getAddress(),\r\n            data: contract.interface.encodeFunctionData(fragment, resolvedArgs)\r\n        }));\r\n    };\r\n    const staticCall = async function (...args) {\r\n        const result = await staticCallResult(...args);\r\n        if (result.length === 1) {\r\n            return result[0];\r\n        }\r\n        return result;\r\n    };\r\n    const send = async function (...args) {\r\n        const runner = contract.runner;\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(canSend(runner), \"contract runner does not support sending transactions\", \"UNSUPPORTED_OPERATION\", { operation: \"sendTransaction\" });\r\n        const tx = await runner.sendTransaction(await populateTransaction(...args));\r\n        const provider = getProvider(contract.runner);\r\n        // @TODO: the provider can be null; make a custom dummy provider that will throw a\r\n        // meaningful error\r\n        return new _wrappers_js__WEBPACK_IMPORTED_MODULE_4__.ContractTransactionResponse(contract.interface, provider, tx);\r\n    };\r\n    const estimateGas = async function (...args) {\r\n        const runner = getRunner(contract.runner, \"estimateGas\");\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(canEstimate(runner), \"contract runner does not support gas estimation\", \"UNSUPPORTED_OPERATION\", { operation: \"estimateGas\" });\r\n        return await runner.estimateGas(await populateTransaction(...args));\r\n    };\r\n    const staticCallResult = async function (...args) {\r\n        const runner = getRunner(contract.runner, \"call\");\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(canCall(runner), \"contract runner does not support calling\", \"UNSUPPORTED_OPERATION\", { operation: \"call\" });\r\n        const tx = await populateTransaction(...args);\r\n        let result = \"0x\";\r\n        try {\r\n            result = await runner.call(tx);\r\n        }\r\n        catch (error) {\r\n            if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isCallException)(error) && error.data) {\r\n                throw contract.interface.makeError(error.data, tx);\r\n            }\r\n            throw error;\r\n        }\r\n        const fragment = getFragment(...args);\r\n        return contract.interface.decodeFunctionResult(fragment, result);\r\n    };\r\n    const method = async (...args) => {\r\n        const fragment = getFragment(...args);\r\n        if (fragment.constant) {\r\n            return await staticCall(...args);\r\n        }\r\n        return await send(...args);\r\n    };\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(method, {\r\n        name: contract.interface.getFunctionName(key),\r\n        _contract: contract, _key: key,\r\n        getFragment,\r\n        estimateGas,\r\n        populateTransaction,\r\n        send, staticCall, staticCallResult,\r\n    });\r\n    // Only works on non-ambiguous keys (refined fragment is always non-ambiguous)\r\n    Object.defineProperty(method, \"fragment\", {\r\n        configurable: false,\r\n        enumerable: true,\r\n        get: () => {\r\n            const fragment = contract.interface.getFunction(key);\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\r\n                operation: \"fragment\",\r\n                info: { key }\r\n            });\r\n            return fragment;\r\n        }\r\n    });\r\n    return method;\r\n}\r\nfunction buildWrappedEvent(contract, key) {\r\n    const getFragment = function (...args) {\r\n        const fragment = contract.interface.getEvent(key, args);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\r\n            operation: \"fragment\",\r\n            info: { key, args }\r\n        });\r\n        return fragment;\r\n    };\r\n    const method = function (...args) {\r\n        return new PreparedTopicFilter(contract, getFragment(...args), args);\r\n    };\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(method, {\r\n        name: contract.interface.getEventName(key),\r\n        _contract: contract, _key: key,\r\n        getFragment\r\n    });\r\n    // Only works on non-ambiguous keys (refined fragment is always non-ambiguous)\r\n    Object.defineProperty(method, \"fragment\", {\r\n        configurable: false,\r\n        enumerable: true,\r\n        get: () => {\r\n            const fragment = contract.interface.getEvent(key);\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\r\n                operation: \"fragment\",\r\n                info: { key }\r\n            });\r\n            return fragment;\r\n        }\r\n    });\r\n    return method;\r\n}\r\n// The combination of TypeScrype, Private Fields and Proxies makes\r\n// the world go boom; so we hide variables with some trickery keeping\r\n// a symbol attached to each BaseContract which its sub-class (even\r\n// via a Proxy) can reach and use to look up its internal values.\r\nconst internal = Symbol.for(\"_ethersInternal_contract\");\r\nconst internalValues = new WeakMap();\r\nfunction setInternal(contract, values) {\r\n    internalValues.set(contract[internal], values);\r\n}\r\nfunction getInternal(contract) {\r\n    return internalValues.get(contract[internal]);\r\n}\r\nfunction isDeferred(value) {\r\n    return (value && typeof (value) === \"object\" && (\"getTopicFilter\" in value) &&\r\n        (typeof (value.getTopicFilter) === \"function\") && value.fragment);\r\n}\r\nasync function getSubInfo(contract, event) {\r\n    let topics;\r\n    let fragment = null;\r\n    // Convert named events to topicHash and get the fragment for\r\n    // events which need deconstructing.\r\n    if (Array.isArray(event)) {\r\n        const topicHashify = function (name) {\r\n            if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isHexString)(name, 32)) {\r\n                return name;\r\n            }\r\n            const fragment = contract.interface.getEvent(name);\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(fragment, \"unknown fragment\", \"name\", name);\r\n            return fragment.topicHash;\r\n        };\r\n        // Array of Topics and Names; e.g. `[ \"0x1234...89ab\", \"Transfer(address)\" ]`\r\n        topics = event.map((e) => {\r\n            if (e == null) {\r\n                return null;\r\n            }\r\n            if (Array.isArray(e)) {\r\n                return e.map(topicHashify);\r\n            }\r\n            return topicHashify(e);\r\n        });\r\n    }\r\n    else if (event === \"*\") {\r\n        topics = [null];\r\n    }\r\n    else if (typeof (event) === \"string\") {\r\n        if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isHexString)(event, 32)) {\r\n            // Topic Hash\r\n            topics = [event];\r\n        }\r\n        else {\r\n            // Name or Signature; e.g. `\"Transfer\", `\"Transfer(address)\"`\r\n            fragment = contract.interface.getEvent(event);\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(fragment, \"unknown fragment\", \"event\", event);\r\n            topics = [fragment.topicHash];\r\n        }\r\n    }\r\n    else if (isDeferred(event)) {\r\n        // Deferred Topic Filter; e.g. `contract.filter.Transfer(from)`\r\n        topics = await event.getTopicFilter();\r\n    }\r\n    else if (\"fragment\" in event) {\r\n        // ContractEvent; e.g. `contract.filter.Transfer`\r\n        fragment = event.fragment;\r\n        topics = [fragment.topicHash];\r\n    }\r\n    else {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"unknown event name\", \"event\", event);\r\n    }\r\n    // Normalize topics and sort TopicSets\r\n    topics = topics.map((t) => {\r\n        if (t == null) {\r\n            return null;\r\n        }\r\n        if (Array.isArray(t)) {\r\n            const items = Array.from(new Set(t.map((t) => t.toLowerCase())).values());\r\n            if (items.length === 1) {\r\n                return items[0];\r\n            }\r\n            items.sort();\r\n            return items;\r\n        }\r\n        return t.toLowerCase();\r\n    });\r\n    const tag = topics.map((t) => {\r\n        if (t == null) {\r\n            return \"null\";\r\n        }\r\n        if (Array.isArray(t)) {\r\n            return t.join(\"|\");\r\n        }\r\n        return t;\r\n    }).join(\"&\");\r\n    return { fragment, tag, topics };\r\n}\r\nasync function hasSub(contract, event) {\r\n    const { subs } = getInternal(contract);\r\n    return subs.get((await getSubInfo(contract, event)).tag) || null;\r\n}\r\nasync function getSub(contract, operation, event) {\r\n    // Make sure our runner can actually subscribe to events\r\n    const provider = getProvider(contract.runner);\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(provider, \"contract runner does not support subscribing\", \"UNSUPPORTED_OPERATION\", { operation });\r\n    const { fragment, tag, topics } = await getSubInfo(contract, event);\r\n    const { addr, subs } = getInternal(contract);\r\n    let sub = subs.get(tag);\r\n    if (!sub) {\r\n        const address = (addr ? addr : contract);\r\n        const filter = { address, topics };\r\n        const listener = (log) => {\r\n            let foundFragment = fragment;\r\n            if (foundFragment == null) {\r\n                try {\r\n                    foundFragment = contract.interface.getEvent(log.topics[0]);\r\n                }\r\n                catch (error) { }\r\n            }\r\n            // If fragment is null, we do not deconstruct the args to emit\r\n            if (foundFragment) {\r\n                const _foundFragment = foundFragment;\r\n                const args = fragment ? contract.interface.decodeEventLog(fragment, log.data, log.topics) : [];\r\n                emit(contract, event, args, (listener) => {\r\n                    return new _wrappers_js__WEBPACK_IMPORTED_MODULE_4__.ContractEventPayload(contract, listener, event, _foundFragment, log);\r\n                });\r\n            }\r\n            else {\r\n                emit(contract, event, [], (listener) => {\r\n                    return new _wrappers_js__WEBPACK_IMPORTED_MODULE_4__.ContractUnknownEventPayload(contract, listener, event, log);\r\n                });\r\n            }\r\n        };\r\n        let starting = [];\r\n        const start = () => {\r\n            if (starting.length) {\r\n                return;\r\n            }\r\n            starting.push(provider.on(filter, listener));\r\n        };\r\n        const stop = async () => {\r\n            if (starting.length == 0) {\r\n                return;\r\n            }\r\n            let started = starting;\r\n            starting = [];\r\n            await Promise.all(started);\r\n            provider.off(filter, listener);\r\n        };\r\n        sub = { tag, listeners: [], start, stop };\r\n        subs.set(tag, sub);\r\n    }\r\n    return sub;\r\n}\r\n// We use this to ensure one emit resolves before firing the next to\r\n// ensure correct ordering (note this cannot throw and just adds the\r\n// notice to the event queu using setTimeout).\r\nlet lastEmit = Promise.resolve();\r\nasync function _emit(contract, event, args, payloadFunc) {\r\n    await lastEmit;\r\n    const sub = await hasSub(contract, event);\r\n    if (!sub) {\r\n        return false;\r\n    }\r\n    const count = sub.listeners.length;\r\n    sub.listeners = sub.listeners.filter(({ listener, once }) => {\r\n        const passArgs = Array.from(args);\r\n        if (payloadFunc) {\r\n            passArgs.push(payloadFunc(once ? null : listener));\r\n        }\r\n        try {\r\n            listener.call(contract, ...passArgs);\r\n        }\r\n        catch (error) { }\r\n        return !once;\r\n    });\r\n    if (sub.listeners.length === 0) {\r\n        sub.stop();\r\n        getInternal(contract).subs.delete(sub.tag);\r\n    }\r\n    return (count > 0);\r\n}\r\nasync function emit(contract, event, args, payloadFunc) {\r\n    try {\r\n        await lastEmit;\r\n    }\r\n    catch (error) { }\r\n    const resultPromise = _emit(contract, event, args, payloadFunc);\r\n    lastEmit = resultPromise;\r\n    return await resultPromise;\r\n}\r\nconst passProperties = [\"then\"];\r\nclass BaseContract {\r\n    /**\r\n     *  The target to connect to.\r\n     *\r\n     *  This can be an address, ENS name or any [[Addressable]], such as\r\n     *  another contract. To get the resovled address, use the ``getAddress``\r\n     *  method.\r\n     */\r\n    target;\r\n    /**\r\n     *  The contract Interface.\r\n     */\r\n    interface;\r\n    /**\r\n     *  The connected runner. This is generally a [[Provider]] or a\r\n     *  [[Signer]], which dictates what operations are supported.\r\n     *\r\n     *  For example, a **Contract** connected to a [[Provider]] may\r\n     *  only execute read-only operations.\r\n     */\r\n    runner;\r\n    /**\r\n     *  All the Events available on this contract.\r\n     */\r\n    filters;\r\n    /**\r\n     *  @_ignore:\r\n     */\r\n    [internal];\r\n    /**\r\n     *  The fallback or receive function if any.\r\n     */\r\n    fallback;\r\n    /**\r\n     *  Creates a new contract connected to %%target%% with the %%abi%% and\r\n     *  optionally connected to a %%runner%% to perform operations on behalf\r\n     *  of.\r\n     */\r\n    constructor(target, abi, runner, _deployTx) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(typeof (target) === \"string\" || (0,_address_index_js__WEBPACK_IMPORTED_MODULE_1__.isAddressable)(target), \"invalid value for Contract target\", \"target\", target);\r\n        if (runner == null) {\r\n            runner = null;\r\n        }\r\n        const iface = _abi_index_js__WEBPACK_IMPORTED_MODULE_2__.Interface.from(abi);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, { target, runner, interface: iface });\r\n        Object.defineProperty(this, internal, { value: {} });\r\n        let addrPromise;\r\n        let addr = null;\r\n        let deployTx = null;\r\n        if (_deployTx) {\r\n            const provider = getProvider(runner);\r\n            // @TODO: the provider can be null; make a custom dummy provider that will throw a\r\n            // meaningful error\r\n            deployTx = new _wrappers_js__WEBPACK_IMPORTED_MODULE_4__.ContractTransactionResponse(this.interface, provider, _deployTx);\r\n        }\r\n        let subs = new Map();\r\n        // Resolve the target as the address\r\n        if (typeof (target) === \"string\") {\r\n            if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isHexString)(target)) {\r\n                addr = target;\r\n                addrPromise = Promise.resolve(target);\r\n            }\r\n            else {\r\n                const resolver = getRunner(runner, \"resolveName\");\r\n                if (!canResolve(resolver)) {\r\n                    throw (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.makeError)(\"contract runner does not support name resolution\", \"UNSUPPORTED_OPERATION\", {\r\n                        operation: \"resolveName\"\r\n                    });\r\n                }\r\n                addrPromise = resolver.resolveName(target).then((addr) => {\r\n                    if (addr == null) {\r\n                        throw (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.makeError)(\"an ENS name used for a contract target must be correctly configured\", \"UNCONFIGURED_NAME\", {\r\n                            value: target\r\n                        });\r\n                    }\r\n                    getInternal(this).addr = addr;\r\n                    return addr;\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            addrPromise = target.getAddress().then((addr) => {\r\n                if (addr == null) {\r\n                    throw new Error(\"TODO\");\r\n                }\r\n                getInternal(this).addr = addr;\r\n                return addr;\r\n            });\r\n        }\r\n        // Set our private values\r\n        setInternal(this, { addrPromise, addr, deployTx, subs });\r\n        // Add the event filters\r\n        const filters = new Proxy({}, {\r\n            get: (target, prop, receiver) => {\r\n                // Pass important checks (like `then` for Promise) through\r\n                if (typeof (prop) === \"symbol\" || passProperties.indexOf(prop) >= 0) {\r\n                    return Reflect.get(target, prop, receiver);\r\n                }\r\n                try {\r\n                    return this.getEvent(prop);\r\n                }\r\n                catch (error) {\r\n                    if (!(0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isError)(error, \"INVALID_ARGUMENT\") || error.argument !== \"key\") {\r\n                        throw error;\r\n                    }\r\n                }\r\n                return undefined;\r\n            },\r\n            has: (target, prop) => {\r\n                // Pass important checks (like `then` for Promise) through\r\n                if (passProperties.indexOf(prop) >= 0) {\r\n                    return Reflect.has(target, prop);\r\n                }\r\n                return Reflect.has(target, prop) || this.interface.hasEvent(String(prop));\r\n            }\r\n        });\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, { filters });\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, {\r\n            fallback: ((iface.receive || iface.fallback) ? (buildWrappedFallback(this)) : null)\r\n        });\r\n        // Return a Proxy that will respond to functions\r\n        return new Proxy(this, {\r\n            get: (target, prop, receiver) => {\r\n                if (typeof (prop) === \"symbol\" || prop in target || passProperties.indexOf(prop) >= 0) {\r\n                    return Reflect.get(target, prop, receiver);\r\n                }\r\n                // Undefined properties should return undefined\r\n                try {\r\n                    return target.getFunction(prop);\r\n                }\r\n                catch (error) {\r\n                    if (!(0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isError)(error, \"INVALID_ARGUMENT\") || error.argument !== \"key\") {\r\n                        throw error;\r\n                    }\r\n                }\r\n                return undefined;\r\n            },\r\n            has: (target, prop) => {\r\n                if (typeof (prop) === \"symbol\" || prop in target || passProperties.indexOf(prop) >= 0) {\r\n                    return Reflect.has(target, prop);\r\n                }\r\n                return target.interface.hasFunction(prop);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     *  Return a new Contract instance with the same target and ABI, but\r\n     *  a different %%runner%%.\r\n     */\r\n    connect(runner) {\r\n        return new BaseContract(this.target, this.interface, runner);\r\n    }\r\n    /**\r\n     *  Return a new Contract instance with the same ABI and runner, but\r\n     *  a different %%target%%.\r\n     */\r\n    attach(target) {\r\n        return new BaseContract(target, this.interface, this.runner);\r\n    }\r\n    /**\r\n     *  Return the resolved address of this Contract.\r\n     */\r\n    async getAddress() { return await getInternal(this).addrPromise; }\r\n    /**\r\n     *  Return the deployed bytecode or null if no bytecode is found.\r\n     */\r\n    async getDeployedCode() {\r\n        const provider = getProvider(this.runner);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(provider, \"runner does not support .provider\", \"UNSUPPORTED_OPERATION\", { operation: \"getDeployedCode\" });\r\n        const code = await provider.getCode(await this.getAddress());\r\n        if (code === \"0x\") {\r\n            return null;\r\n        }\r\n        return code;\r\n    }\r\n    /**\r\n     *  Resolve to this Contract once the bytecode has been deployed, or\r\n     *  resolve immediately if already deployed.\r\n     */\r\n    async waitForDeployment() {\r\n        // We have the deployement transaction; just use that (throws if deployement fails)\r\n        const deployTx = this.deploymentTransaction();\r\n        if (deployTx) {\r\n            await deployTx.wait();\r\n            return this;\r\n        }\r\n        // Check for code\r\n        const code = await this.getDeployedCode();\r\n        if (code != null) {\r\n            return this;\r\n        }\r\n        // Make sure we can subscribe to a provider event\r\n        const provider = getProvider(this.runner);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(provider != null, \"contract runner does not support .provider\", \"UNSUPPORTED_OPERATION\", { operation: \"waitForDeployment\" });\r\n        return new Promise((resolve, reject) => {\r\n            const checkCode = async () => {\r\n                try {\r\n                    const code = await this.getDeployedCode();\r\n                    if (code != null) {\r\n                        return resolve(this);\r\n                    }\r\n                    provider.once(\"block\", checkCode);\r\n                }\r\n                catch (error) {\r\n                    reject(error);\r\n                }\r\n            };\r\n            checkCode();\r\n        });\r\n    }\r\n    /**\r\n     *  Return the transaction used to deploy this contract.\r\n     *\r\n     *  This is only available if this instance was returned from a\r\n     *  [[ContractFactory]].\r\n     */\r\n    deploymentTransaction() {\r\n        return getInternal(this).deployTx;\r\n    }\r\n    /**\r\n     *  Return the function for a given name. This is useful when a contract\r\n     *  method name conflicts with a JavaScript name such as ``prototype`` or\r\n     *  when using a Contract programatically.\r\n     */\r\n    getFunction(key) {\r\n        if (typeof (key) !== \"string\") {\r\n            key = key.format();\r\n        }\r\n        const func = buildWrappedMethod(this, key);\r\n        return func;\r\n    }\r\n    /**\r\n     *  Return the event for a given name. This is useful when a contract\r\n     *  event name conflicts with a JavaScript name such as ``prototype`` or\r\n     *  when using a Contract programatically.\r\n     */\r\n    getEvent(key) {\r\n        if (typeof (key) !== \"string\") {\r\n            key = key.format();\r\n        }\r\n        return buildWrappedEvent(this, key);\r\n    }\r\n    /**\r\n     *  @_ignore:\r\n     */\r\n    async queryTransaction(hash) {\r\n        throw new Error(\"@TODO\");\r\n    }\r\n    /*\r\n    // @TODO: this is a non-backwards compatible change, but will be added\r\n    //        in v7 and in a potential SmartContract class in an upcoming\r\n    //        v6 release\r\n    async getTransactionReceipt(hash: string): Promise<null | ContractTransactionReceipt> {\r\n        const provider = getProvider(this.runner);\r\n        assert(provider, \"contract runner does not have a provider\",\r\n            \"UNSUPPORTED_OPERATION\", { operation: \"queryTransaction\" });\r\n\r\n        const receipt = await provider.getTransactionReceipt(hash);\r\n        if (receipt == null) { return null; }\r\n\r\n        return new ContractTransactionReceipt(this.interface, provider, receipt);\r\n    }\r\n    */\r\n    /**\r\n     *  Provide historic access to event data for %%event%% in the range\r\n     *  %%fromBlock%% (default: ``0``) to %%toBlock%% (default: ``\"latest\"``)\r\n     *  inclusive.\r\n     */\r\n    async queryFilter(event, fromBlock, toBlock) {\r\n        if (fromBlock == null) {\r\n            fromBlock = 0;\r\n        }\r\n        if (toBlock == null) {\r\n            toBlock = \"latest\";\r\n        }\r\n        const { addr, addrPromise } = getInternal(this);\r\n        const address = (addr ? addr : (await addrPromise));\r\n        const { fragment, topics } = await getSubInfo(this, event);\r\n        const filter = { address, topics, fromBlock, toBlock };\r\n        const provider = getProvider(this.runner);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(provider, \"contract runner does not have a provider\", \"UNSUPPORTED_OPERATION\", { operation: \"queryFilter\" });\r\n        return (await provider.getLogs(filter)).map((log) => {\r\n            let foundFragment = fragment;\r\n            if (foundFragment == null) {\r\n                try {\r\n                    foundFragment = this.interface.getEvent(log.topics[0]);\r\n                }\r\n                catch (error) { }\r\n            }\r\n            if (foundFragment) {\r\n                try {\r\n                    return new _wrappers_js__WEBPACK_IMPORTED_MODULE_4__.EventLog(log, this.interface, foundFragment);\r\n                }\r\n                catch (error) {\r\n                    return new _wrappers_js__WEBPACK_IMPORTED_MODULE_4__.UndecodedEventLog(log, error);\r\n                }\r\n            }\r\n            return new _providers_provider_js__WEBPACK_IMPORTED_MODULE_3__.Log(log, provider);\r\n        });\r\n    }\r\n    /**\r\n     *  Add an event %%listener%% for the %%event%%.\r\n     */\r\n    async on(event, listener) {\r\n        const sub = await getSub(this, \"on\", event);\r\n        sub.listeners.push({ listener, once: false });\r\n        sub.start();\r\n        return this;\r\n    }\r\n    /**\r\n     *  Add an event %%listener%% for the %%event%%, but remove the listener\r\n     *  after it is fired once.\r\n     */\r\n    async once(event, listener) {\r\n        const sub = await getSub(this, \"once\", event);\r\n        sub.listeners.push({ listener, once: true });\r\n        sub.start();\r\n        return this;\r\n    }\r\n    /**\r\n     *  Emit an %%event%% calling all listeners with %%args%%.\r\n     *\r\n     *  Resolves to ``true`` if any listeners were called.\r\n     */\r\n    async emit(event, ...args) {\r\n        return await emit(this, event, args, null);\r\n    }\r\n    /**\r\n     *  Resolves to the number of listeners of %%event%% or the total number\r\n     *  of listeners if unspecified.\r\n     */\r\n    async listenerCount(event) {\r\n        if (event) {\r\n            const sub = await hasSub(this, event);\r\n            if (!sub) {\r\n                return 0;\r\n            }\r\n            return sub.listeners.length;\r\n        }\r\n        const { subs } = getInternal(this);\r\n        let total = 0;\r\n        for (const { listeners } of subs.values()) {\r\n            total += listeners.length;\r\n        }\r\n        return total;\r\n    }\r\n    /**\r\n     *  Resolves to the listeners subscribed to %%event%% or all listeners\r\n     *  if unspecified.\r\n     */\r\n    async listeners(event) {\r\n        if (event) {\r\n            const sub = await hasSub(this, event);\r\n            if (!sub) {\r\n                return [];\r\n            }\r\n            return sub.listeners.map(({ listener }) => listener);\r\n        }\r\n        const { subs } = getInternal(this);\r\n        let result = [];\r\n        for (const { listeners } of subs.values()) {\r\n            result = result.concat(listeners.map(({ listener }) => listener));\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     *  Remove the %%listener%% from the listeners for %%event%% or remove\r\n     *  all listeners if unspecified.\r\n     */\r\n    async off(event, listener) {\r\n        const sub = await hasSub(this, event);\r\n        if (!sub) {\r\n            return this;\r\n        }\r\n        if (listener) {\r\n            const index = sub.listeners.map(({ listener }) => listener).indexOf(listener);\r\n            if (index >= 0) {\r\n                sub.listeners.splice(index, 1);\r\n            }\r\n        }\r\n        if (listener == null || sub.listeners.length === 0) {\r\n            sub.stop();\r\n            getInternal(this).subs.delete(sub.tag);\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     *  Remove all the listeners for %%event%% or remove all listeners if\r\n     *  unspecified.\r\n     */\r\n    async removeAllListeners(event) {\r\n        if (event) {\r\n            const sub = await hasSub(this, event);\r\n            if (!sub) {\r\n                return this;\r\n            }\r\n            sub.stop();\r\n            getInternal(this).subs.delete(sub.tag);\r\n        }\r\n        else {\r\n            const { subs } = getInternal(this);\r\n            for (const { tag, stop } of subs.values()) {\r\n                stop();\r\n                subs.delete(tag);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     *  Alias for [on].\r\n     */\r\n    async addListener(event, listener) {\r\n        return await this.on(event, listener);\r\n    }\r\n    /**\r\n     *  Alias for [off].\r\n     */\r\n    async removeListener(event, listener) {\r\n        return await this.off(event, listener);\r\n    }\r\n    /**\r\n     *  Create a new Class for the %%abi%%.\r\n     */\r\n    static buildClass(abi) {\r\n        class CustomContract extends BaseContract {\r\n            constructor(address, runner = null) {\r\n                super(address, abi, runner);\r\n            }\r\n        }\r\n        return CustomContract;\r\n    }\r\n    ;\r\n    /**\r\n     *  Create a new BaseContract with a specified Interface.\r\n     */\r\n    static from(target, abi, runner) {\r\n        if (runner == null) {\r\n            runner = null;\r\n        }\r\n        const contract = new this(target, abi, runner);\r\n        return contract;\r\n    }\r\n}\r\nfunction _ContractBase() {\r\n    return BaseContract;\r\n}\r\n/**\r\n *  A [[BaseContract]] with no type guards on its methods or events.\r\n */\r\nclass Contract extends _ContractBase() {\r\n}\r\n//# sourceMappingURL=contract.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/contract/contract.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/contract/factory.js":
/*!*********************************************************!*\
  !*** ./node_modules/ethers/lib.esm/contract/factory.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContractFactory: () => (/* binding */ ContractFactory)\n/* harmony export */ });\n/* harmony import */ var _abi_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../abi/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/index.js\");\n/* harmony import */ var _address_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../address/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/address/index.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/* harmony import */ var _contract_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./contract.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/contract/contract.js\");\n\r\n\r\n\r\n\r\n// A = Arguments to the constructor\r\n// I = Interface of deployed contracts\r\n/**\r\n *  A **ContractFactory** is used to deploy a Contract to the blockchain.\r\n */\r\nclass ContractFactory {\r\n    /**\r\n     *  The Contract Interface.\r\n     */\r\n    interface;\r\n    /**\r\n     *  The Contract deployment bytecode. Often called the initcode.\r\n     */\r\n    bytecode;\r\n    /**\r\n     *  The ContractRunner to deploy the Contract as.\r\n     */\r\n    runner;\r\n    /**\r\n     *  Create a new **ContractFactory** with %%abi%% and %%bytecode%%,\r\n     *  optionally connected to %%runner%%.\r\n     *\r\n     *  The %%bytecode%% may be the ``bytecode`` property within the\r\n     *  standard Solidity JSON output.\r\n     */\r\n    constructor(abi, bytecode, runner) {\r\n        const iface = _abi_index_js__WEBPACK_IMPORTED_MODULE_0__.Interface.from(abi);\r\n        // Dereference Solidity bytecode objects and allow a missing `0x`-prefix\r\n        if (bytecode instanceof Uint8Array) {\r\n            bytecode = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.hexlify)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBytes)(bytecode));\r\n        }\r\n        else {\r\n            if (typeof (bytecode) === \"object\") {\r\n                bytecode = bytecode.object;\r\n            }\r\n            if (!bytecode.startsWith(\"0x\")) {\r\n                bytecode = \"0x\" + bytecode;\r\n            }\r\n            bytecode = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.hexlify)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBytes)(bytecode));\r\n        }\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.defineProperties)(this, {\r\n            bytecode, interface: iface, runner: (runner || null)\r\n        });\r\n    }\r\n    attach(target) {\r\n        return new _contract_js__WEBPACK_IMPORTED_MODULE_2__.BaseContract(target, this.interface, this.runner);\r\n    }\r\n    /**\r\n     *  Resolves to the transaction to deploy the contract, passing %%args%%\r\n     *  into the constructor.\r\n     */\r\n    async getDeployTransaction(...args) {\r\n        let overrides = {};\r\n        const fragment = this.interface.deploy;\r\n        if (fragment.inputs.length + 1 === args.length) {\r\n            overrides = await (0,_contract_js__WEBPACK_IMPORTED_MODULE_2__.copyOverrides)(args.pop());\r\n        }\r\n        if (fragment.inputs.length !== args.length) {\r\n            throw new Error(\"incorrect number of arguments to constructor\");\r\n        }\r\n        const resolvedArgs = await (0,_contract_js__WEBPACK_IMPORTED_MODULE_2__.resolveArgs)(this.runner, fragment.inputs, args);\r\n        const data = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.concat)([this.bytecode, this.interface.encodeDeploy(resolvedArgs)]);\r\n        return Object.assign({}, overrides, { data });\r\n    }\r\n    /**\r\n     *  Resolves to the Contract deployed by passing %%args%% into the\r\n     *  constructor.\r\n     *\r\n     *  This will resolve to the Contract before it has been deployed to the\r\n     *  network, so the [[BaseContract-waitForDeployment]] should be used before\r\n     *  sending any transactions to it.\r\n     */\r\n    async deploy(...args) {\r\n        const tx = await this.getDeployTransaction(...args);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assert)(this.runner && typeof (this.runner.sendTransaction) === \"function\", \"factory runner does not support sending transactions\", \"UNSUPPORTED_OPERATION\", {\r\n            operation: \"sendTransaction\"\r\n        });\r\n        const sentTx = await this.runner.sendTransaction(tx);\r\n        const address = (0,_address_index_js__WEBPACK_IMPORTED_MODULE_3__.getCreateAddress)(sentTx);\r\n        return new _contract_js__WEBPACK_IMPORTED_MODULE_2__.BaseContract(address, this.interface, this.runner, sentTx);\r\n    }\r\n    /**\r\n     *  Return a new **ContractFactory** with the same ABI and bytecode,\r\n     *  but connected to %%runner%%.\r\n     */\r\n    connect(runner) {\r\n        return new ContractFactory(this.interface, this.bytecode, runner);\r\n    }\r\n    /**\r\n     *  Create a new **ContractFactory** from the standard Solidity JSON output.\r\n     */\r\n    static fromSolidity(output, runner) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(output != null, \"bad compiler output\", \"output\", output);\r\n        if (typeof (output) === \"string\") {\r\n            output = JSON.parse(output);\r\n        }\r\n        const abi = output.abi;\r\n        let bytecode = \"\";\r\n        if (output.bytecode) {\r\n            bytecode = output.bytecode;\r\n        }\r\n        else if (output.evm && output.evm.bytecode) {\r\n            bytecode = output.evm.bytecode;\r\n        }\r\n        return new this(abi, bytecode, runner);\r\n    }\r\n}\r\n//# sourceMappingURL=factory.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9jb250cmFjdC9mYWN0b3J5LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTRDO0FBQ1c7QUFDaUQ7QUFDL0I7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixvREFBUztBQUMvQjtBQUNBO0FBQ0EsdUJBQXVCLHdEQUFPLENBQUMseURBQVE7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qix3REFBTyxDQUFDLHlEQUFRO0FBQ3ZDO0FBQ0EsUUFBUSxpRUFBZ0I7QUFDeEI7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLG1CQUFtQixzREFBWTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsMkRBQWE7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMseURBQVc7QUFDOUMscUJBQXFCLHVEQUFNO0FBQzNCLCtCQUErQixlQUFlLE1BQU07QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsdURBQU07QUFDZDtBQUNBLFNBQVM7QUFDVDtBQUNBLHdCQUF3QixtRUFBZ0I7QUFDeEMsbUJBQW1CLHNEQUFZO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsK0RBQWM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJEOlxcRG9fYW4yXFxsZW5kaHViX3YyXFxsZW5kaHViLWZyb250ZW5kLW5leHRqc1xcbm9kZV9tb2R1bGVzXFxldGhlcnNcXGxpYi5lc21cXGNvbnRyYWN0XFxmYWN0b3J5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEludGVyZmFjZSB9IGZyb20gXCIuLi9hYmkvaW5kZXguanNcIjtcclxuaW1wb3J0IHsgZ2V0Q3JlYXRlQWRkcmVzcyB9IGZyb20gXCIuLi9hZGRyZXNzL2luZGV4LmpzXCI7XHJcbmltcG9ydCB7IGNvbmNhdCwgZGVmaW5lUHJvcGVydGllcywgZ2V0Qnl0ZXMsIGhleGxpZnksIGFzc2VydCwgYXNzZXJ0QXJndW1lbnQgfSBmcm9tIFwiLi4vdXRpbHMvaW5kZXguanNcIjtcclxuaW1wb3J0IHsgQmFzZUNvbnRyYWN0LCBjb3B5T3ZlcnJpZGVzLCByZXNvbHZlQXJncyB9IGZyb20gXCIuL2NvbnRyYWN0LmpzXCI7XHJcbi8vIEEgPSBBcmd1bWVudHMgdG8gdGhlIGNvbnN0cnVjdG9yXHJcbi8vIEkgPSBJbnRlcmZhY2Ugb2YgZGVwbG95ZWQgY29udHJhY3RzXHJcbi8qKlxyXG4gKiAgQSAqKkNvbnRyYWN0RmFjdG9yeSoqIGlzIHVzZWQgdG8gZGVwbG95IGEgQ29udHJhY3QgdG8gdGhlIGJsb2NrY2hhaW4uXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ29udHJhY3RGYWN0b3J5IHtcclxuICAgIC8qKlxyXG4gICAgICogIFRoZSBDb250cmFjdCBJbnRlcmZhY2UuXHJcbiAgICAgKi9cclxuICAgIGludGVyZmFjZTtcclxuICAgIC8qKlxyXG4gICAgICogIFRoZSBDb250cmFjdCBkZXBsb3ltZW50IGJ5dGVjb2RlLiBPZnRlbiBjYWxsZWQgdGhlIGluaXRjb2RlLlxyXG4gICAgICovXHJcbiAgICBieXRlY29kZTtcclxuICAgIC8qKlxyXG4gICAgICogIFRoZSBDb250cmFjdFJ1bm5lciB0byBkZXBsb3kgdGhlIENvbnRyYWN0IGFzLlxyXG4gICAgICovXHJcbiAgICBydW5uZXI7XHJcbiAgICAvKipcclxuICAgICAqICBDcmVhdGUgYSBuZXcgKipDb250cmFjdEZhY3RvcnkqKiB3aXRoICUlYWJpJSUgYW5kICUlYnl0ZWNvZGUlJSxcclxuICAgICAqICBvcHRpb25hbGx5IGNvbm5lY3RlZCB0byAlJXJ1bm5lciUlLlxyXG4gICAgICpcclxuICAgICAqICBUaGUgJSVieXRlY29kZSUlIG1heSBiZSB0aGUgYGBieXRlY29kZWBgIHByb3BlcnR5IHdpdGhpbiB0aGVcclxuICAgICAqICBzdGFuZGFyZCBTb2xpZGl0eSBKU09OIG91dHB1dC5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoYWJpLCBieXRlY29kZSwgcnVubmVyKSB7XHJcbiAgICAgICAgY29uc3QgaWZhY2UgPSBJbnRlcmZhY2UuZnJvbShhYmkpO1xyXG4gICAgICAgIC8vIERlcmVmZXJlbmNlIFNvbGlkaXR5IGJ5dGVjb2RlIG9iamVjdHMgYW5kIGFsbG93IGEgbWlzc2luZyBgMHhgLXByZWZpeFxyXG4gICAgICAgIGlmIChieXRlY29kZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcclxuICAgICAgICAgICAgYnl0ZWNvZGUgPSBoZXhsaWZ5KGdldEJ5dGVzKGJ5dGVjb2RlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIChieXRlY29kZSkgPT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICAgICAgICAgIGJ5dGVjb2RlID0gYnl0ZWNvZGUub2JqZWN0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghYnl0ZWNvZGUuc3RhcnRzV2l0aChcIjB4XCIpKSB7XHJcbiAgICAgICAgICAgICAgICBieXRlY29kZSA9IFwiMHhcIiArIGJ5dGVjb2RlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJ5dGVjb2RlID0gaGV4bGlmeShnZXRCeXRlcyhieXRlY29kZSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcclxuICAgICAgICAgICAgYnl0ZWNvZGUsIGludGVyZmFjZTogaWZhY2UsIHJ1bm5lcjogKHJ1bm5lciB8fCBudWxsKVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgYXR0YWNoKHRhcmdldCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgQmFzZUNvbnRyYWN0KHRhcmdldCwgdGhpcy5pbnRlcmZhY2UsIHRoaXMucnVubmVyKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogIFJlc29sdmVzIHRvIHRoZSB0cmFuc2FjdGlvbiB0byBkZXBsb3kgdGhlIGNvbnRyYWN0LCBwYXNzaW5nICUlYXJncyUlXHJcbiAgICAgKiAgaW50byB0aGUgY29uc3RydWN0b3IuXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIGdldERlcGxveVRyYW5zYWN0aW9uKC4uLmFyZ3MpIHtcclxuICAgICAgICBsZXQgb3ZlcnJpZGVzID0ge307XHJcbiAgICAgICAgY29uc3QgZnJhZ21lbnQgPSB0aGlzLmludGVyZmFjZS5kZXBsb3k7XHJcbiAgICAgICAgaWYgKGZyYWdtZW50LmlucHV0cy5sZW5ndGggKyAxID09PSBhcmdzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBvdmVycmlkZXMgPSBhd2FpdCBjb3B5T3ZlcnJpZGVzKGFyZ3MucG9wKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZnJhZ21lbnQuaW5wdXRzLmxlbmd0aCAhPT0gYXJncy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW5jb3JyZWN0IG51bWJlciBvZiBhcmd1bWVudHMgdG8gY29uc3RydWN0b3JcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHJlc29sdmVkQXJncyA9IGF3YWl0IHJlc29sdmVBcmdzKHRoaXMucnVubmVyLCBmcmFnbWVudC5pbnB1dHMsIGFyZ3MpO1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSBjb25jYXQoW3RoaXMuYnl0ZWNvZGUsIHRoaXMuaW50ZXJmYWNlLmVuY29kZURlcGxveShyZXNvbHZlZEFyZ3MpXSk7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIG92ZXJyaWRlcywgeyBkYXRhIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgUmVzb2x2ZXMgdG8gdGhlIENvbnRyYWN0IGRlcGxveWVkIGJ5IHBhc3NpbmcgJSVhcmdzJSUgaW50byB0aGVcclxuICAgICAqICBjb25zdHJ1Y3Rvci5cclxuICAgICAqXHJcbiAgICAgKiAgVGhpcyB3aWxsIHJlc29sdmUgdG8gdGhlIENvbnRyYWN0IGJlZm9yZSBpdCBoYXMgYmVlbiBkZXBsb3llZCB0byB0aGVcclxuICAgICAqICBuZXR3b3JrLCBzbyB0aGUgW1tCYXNlQ29udHJhY3Qtd2FpdEZvckRlcGxveW1lbnRdXSBzaG91bGQgYmUgdXNlZCBiZWZvcmVcclxuICAgICAqICBzZW5kaW5nIGFueSB0cmFuc2FjdGlvbnMgdG8gaXQuXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIGRlcGxveSguLi5hcmdzKSB7XHJcbiAgICAgICAgY29uc3QgdHggPSBhd2FpdCB0aGlzLmdldERlcGxveVRyYW5zYWN0aW9uKC4uLmFyZ3MpO1xyXG4gICAgICAgIGFzc2VydCh0aGlzLnJ1bm5lciAmJiB0eXBlb2YgKHRoaXMucnVubmVyLnNlbmRUcmFuc2FjdGlvbikgPT09IFwiZnVuY3Rpb25cIiwgXCJmYWN0b3J5IHJ1bm5lciBkb2VzIG5vdCBzdXBwb3J0IHNlbmRpbmcgdHJhbnNhY3Rpb25zXCIsIFwiVU5TVVBQT1JURURfT1BFUkFUSU9OXCIsIHtcclxuICAgICAgICAgICAgb3BlcmF0aW9uOiBcInNlbmRUcmFuc2FjdGlvblwiXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29uc3Qgc2VudFR4ID0gYXdhaXQgdGhpcy5ydW5uZXIuc2VuZFRyYW5zYWN0aW9uKHR4KTtcclxuICAgICAgICBjb25zdCBhZGRyZXNzID0gZ2V0Q3JlYXRlQWRkcmVzcyhzZW50VHgpO1xyXG4gICAgICAgIHJldHVybiBuZXcgQmFzZUNvbnRyYWN0KGFkZHJlc3MsIHRoaXMuaW50ZXJmYWNlLCB0aGlzLnJ1bm5lciwgc2VudFR4KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiBhIG5ldyAqKkNvbnRyYWN0RmFjdG9yeSoqIHdpdGggdGhlIHNhbWUgQUJJIGFuZCBieXRlY29kZSxcclxuICAgICAqICBidXQgY29ubmVjdGVkIHRvICUlcnVubmVyJSUuXHJcbiAgICAgKi9cclxuICAgIGNvbm5lY3QocnVubmVyKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDb250cmFjdEZhY3RvcnkodGhpcy5pbnRlcmZhY2UsIHRoaXMuYnl0ZWNvZGUsIHJ1bm5lcik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqICBDcmVhdGUgYSBuZXcgKipDb250cmFjdEZhY3RvcnkqKiBmcm9tIHRoZSBzdGFuZGFyZCBTb2xpZGl0eSBKU09OIG91dHB1dC5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGZyb21Tb2xpZGl0eShvdXRwdXQsIHJ1bm5lcikge1xyXG4gICAgICAgIGFzc2VydEFyZ3VtZW50KG91dHB1dCAhPSBudWxsLCBcImJhZCBjb21waWxlciBvdXRwdXRcIiwgXCJvdXRwdXRcIiwgb3V0cHV0KTtcclxuICAgICAgICBpZiAodHlwZW9mIChvdXRwdXQpID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIG91dHB1dCA9IEpTT04ucGFyc2Uob3V0cHV0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgYWJpID0gb3V0cHV0LmFiaTtcclxuICAgICAgICBsZXQgYnl0ZWNvZGUgPSBcIlwiO1xyXG4gICAgICAgIGlmIChvdXRwdXQuYnl0ZWNvZGUpIHtcclxuICAgICAgICAgICAgYnl0ZWNvZGUgPSBvdXRwdXQuYnl0ZWNvZGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKG91dHB1dC5ldm0gJiYgb3V0cHV0LmV2bS5ieXRlY29kZSkge1xyXG4gICAgICAgICAgICBieXRlY29kZSA9IG91dHB1dC5ldm0uYnl0ZWNvZGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXcgdGhpcyhhYmksIGJ5dGVjb2RlLCBydW5uZXIpO1xyXG4gICAgfVxyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZhY3RvcnkuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/contract/factory.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/contract/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/ethers/lib.esm/contract/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseContract: () => (/* reexport safe */ _contract_js__WEBPACK_IMPORTED_MODULE_0__.BaseContract),\n/* harmony export */   Contract: () => (/* reexport safe */ _contract_js__WEBPACK_IMPORTED_MODULE_0__.Contract),\n/* harmony export */   ContractEventPayload: () => (/* reexport safe */ _wrappers_js__WEBPACK_IMPORTED_MODULE_2__.ContractEventPayload),\n/* harmony export */   ContractFactory: () => (/* reexport safe */ _factory_js__WEBPACK_IMPORTED_MODULE_1__.ContractFactory),\n/* harmony export */   ContractTransactionReceipt: () => (/* reexport safe */ _wrappers_js__WEBPACK_IMPORTED_MODULE_2__.ContractTransactionReceipt),\n/* harmony export */   ContractTransactionResponse: () => (/* reexport safe */ _wrappers_js__WEBPACK_IMPORTED_MODULE_2__.ContractTransactionResponse),\n/* harmony export */   ContractUnknownEventPayload: () => (/* reexport safe */ _wrappers_js__WEBPACK_IMPORTED_MODULE_2__.ContractUnknownEventPayload),\n/* harmony export */   EventLog: () => (/* reexport safe */ _wrappers_js__WEBPACK_IMPORTED_MODULE_2__.EventLog),\n/* harmony export */   UndecodedEventLog: () => (/* reexport safe */ _wrappers_js__WEBPACK_IMPORTED_MODULE_2__.UndecodedEventLog)\n/* harmony export */ });\n/* harmony import */ var _contract_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./contract.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/contract/contract.js\");\n/* harmony import */ var _factory_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./factory.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/contract/factory.js\");\n/* harmony import */ var _wrappers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./wrappers.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/contract/wrappers.js\");\n/**\r\n *  A **Contract** object is a meta-class (a class whose definition is\r\n *  defined at runtime), which communicates with a deployed smart contract\r\n *  on the blockchain and provides a simple JavaScript interface to call\r\n *  methods, send transaction, query historic logs and listen for its events.\r\n *\r\n *  @_section: api/contract:Contracts  [about-contracts]\r\n */\r\n\r\n\r\n\r\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9jb250cmFjdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3VEO0FBQ1I7QUFDeUg7QUFDeEsiLCJzb3VyY2VzIjpbIkQ6XFxEb19hbjJcXGxlbmRodWJfdjJcXGxlbmRodWItZnJvbnRlbmQtbmV4dGpzXFxub2RlX21vZHVsZXNcXGV0aGVyc1xcbGliLmVzbVxcY29udHJhY3RcXGluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiAgQSAqKkNvbnRyYWN0Kiogb2JqZWN0IGlzIGEgbWV0YS1jbGFzcyAoYSBjbGFzcyB3aG9zZSBkZWZpbml0aW9uIGlzXHJcbiAqICBkZWZpbmVkIGF0IHJ1bnRpbWUpLCB3aGljaCBjb21tdW5pY2F0ZXMgd2l0aCBhIGRlcGxveWVkIHNtYXJ0IGNvbnRyYWN0XHJcbiAqICBvbiB0aGUgYmxvY2tjaGFpbiBhbmQgcHJvdmlkZXMgYSBzaW1wbGUgSmF2YVNjcmlwdCBpbnRlcmZhY2UgdG8gY2FsbFxyXG4gKiAgbWV0aG9kcywgc2VuZCB0cmFuc2FjdGlvbiwgcXVlcnkgaGlzdG9yaWMgbG9ncyBhbmQgbGlzdGVuIGZvciBpdHMgZXZlbnRzLlxyXG4gKlxyXG4gKiAgQF9zZWN0aW9uOiBhcGkvY29udHJhY3Q6Q29udHJhY3RzICBbYWJvdXQtY29udHJhY3RzXVxyXG4gKi9cclxuZXhwb3J0IHsgQmFzZUNvbnRyYWN0LCBDb250cmFjdCB9IGZyb20gXCIuL2NvbnRyYWN0LmpzXCI7XHJcbmV4cG9ydCB7IENvbnRyYWN0RmFjdG9yeSB9IGZyb20gXCIuL2ZhY3RvcnkuanNcIjtcclxuZXhwb3J0IHsgQ29udHJhY3RFdmVudFBheWxvYWQsIENvbnRyYWN0VW5rbm93bkV2ZW50UGF5bG9hZCwgQ29udHJhY3RUcmFuc2FjdGlvblJlY2VpcHQsIENvbnRyYWN0VHJhbnNhY3Rpb25SZXNwb25zZSwgRXZlbnRMb2csIFVuZGVjb2RlZEV2ZW50TG9nIH0gZnJvbSBcIi4vd3JhcHBlcnMuanNcIjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/contract/index.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/contract/wrappers.js":
/*!**********************************************************!*\
  !*** ./node_modules/ethers/lib.esm/contract/wrappers.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContractEventPayload: () => (/* binding */ ContractEventPayload),\n/* harmony export */   ContractTransactionReceipt: () => (/* binding */ ContractTransactionReceipt),\n/* harmony export */   ContractTransactionResponse: () => (/* binding */ ContractTransactionResponse),\n/* harmony export */   ContractUnknownEventPayload: () => (/* binding */ ContractUnknownEventPayload),\n/* harmony export */   EventLog: () => (/* binding */ EventLog),\n/* harmony export */   UndecodedEventLog: () => (/* binding */ UndecodedEventLog)\n/* harmony export */ });\n/* harmony import */ var _providers_provider_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../providers/provider.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n// import from provider.ts instead of index.ts to prevent circular dep\r\n// from EtherscanProvider\r\n\r\n\r\n/**\r\n *  An **EventLog** contains additional properties parsed from the [[Log]].\r\n */\r\nclass EventLog extends _providers_provider_js__WEBPACK_IMPORTED_MODULE_0__.Log {\r\n    /**\r\n     *  The Contract Interface.\r\n     */\r\n    interface;\r\n    /**\r\n     *  The matching event.\r\n     */\r\n    fragment;\r\n    /**\r\n     *  The parsed arguments passed to the event by ``emit``.\r\n     */\r\n    args;\r\n    /**\r\n     * @_ignore:\r\n     */\r\n    constructor(log, iface, fragment) {\r\n        super(log, log.provider);\r\n        const args = iface.decodeEventLog(fragment, log.data, log.topics);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.defineProperties)(this, { args, fragment, interface: iface });\r\n    }\r\n    /**\r\n     *  The name of the event.\r\n     */\r\n    get eventName() { return this.fragment.name; }\r\n    /**\r\n     *  The signature of the event.\r\n     */\r\n    get eventSignature() { return this.fragment.format(); }\r\n}\r\n/**\r\n *  An **EventLog** contains additional properties parsed from the [[Log]].\r\n */\r\nclass UndecodedEventLog extends _providers_provider_js__WEBPACK_IMPORTED_MODULE_0__.Log {\r\n    /**\r\n     *  The error encounted when trying to decode the log.\r\n     */\r\n    error;\r\n    /**\r\n     * @_ignore:\r\n     */\r\n    constructor(log, error) {\r\n        super(log, log.provider);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.defineProperties)(this, { error });\r\n    }\r\n}\r\n/**\r\n *  A **ContractTransactionReceipt** includes the parsed logs from a\r\n *  [[TransactionReceipt]].\r\n */\r\nclass ContractTransactionReceipt extends _providers_provider_js__WEBPACK_IMPORTED_MODULE_0__.TransactionReceipt {\r\n    #iface;\r\n    /**\r\n     *  @_ignore:\r\n     */\r\n    constructor(iface, provider, tx) {\r\n        super(tx, provider);\r\n        this.#iface = iface;\r\n    }\r\n    /**\r\n     *  The parsed logs for any [[Log]] which has a matching event in the\r\n     *  Contract ABI.\r\n     */\r\n    get logs() {\r\n        return super.logs.map((log) => {\r\n            const fragment = log.topics.length ? this.#iface.getEvent(log.topics[0]) : null;\r\n            if (fragment) {\r\n                try {\r\n                    return new EventLog(log, this.#iface, fragment);\r\n                }\r\n                catch (error) {\r\n                    return new UndecodedEventLog(log, error);\r\n                }\r\n            }\r\n            return log;\r\n        });\r\n    }\r\n}\r\n/**\r\n *  A **ContractTransactionResponse** will return a\r\n *  [[ContractTransactionReceipt]] when waited on.\r\n */\r\nclass ContractTransactionResponse extends _providers_provider_js__WEBPACK_IMPORTED_MODULE_0__.TransactionResponse {\r\n    #iface;\r\n    /**\r\n     *  @_ignore:\r\n     */\r\n    constructor(iface, provider, tx) {\r\n        super(tx, provider);\r\n        this.#iface = iface;\r\n    }\r\n    /**\r\n     *  Resolves once this transaction has been mined and has\r\n     *  %%confirms%% blocks including it (default: ``1``) with an\r\n     *  optional %%timeout%%.\r\n     *\r\n     *  This can resolve to ``null`` only if %%confirms%% is ``0``\r\n     *  and the transaction has not been mined, otherwise this will\r\n     *  wait until enough confirmations have completed.\r\n     */\r\n    async wait(confirms, timeout) {\r\n        const receipt = await super.wait(confirms, timeout);\r\n        if (receipt == null) {\r\n            return null;\r\n        }\r\n        return new ContractTransactionReceipt(this.#iface, this.provider, receipt);\r\n    }\r\n}\r\n/**\r\n *  A **ContractUnknownEventPayload** is included as the last parameter to\r\n *  Contract Events when the event does not match any events in the ABI.\r\n */\r\nclass ContractUnknownEventPayload extends _utils_index_js__WEBPACK_IMPORTED_MODULE_1__.EventPayload {\r\n    /**\r\n     *  The log with no matching events.\r\n     */\r\n    log;\r\n    /**\r\n     *  @_event:\r\n     */\r\n    constructor(contract, listener, filter, log) {\r\n        super(contract, listener, filter);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.defineProperties)(this, { log });\r\n    }\r\n    /**\r\n     *  Resolves to the block the event occured in.\r\n     */\r\n    async getBlock() {\r\n        return await this.log.getBlock();\r\n    }\r\n    /**\r\n     *  Resolves to the transaction the event occured in.\r\n     */\r\n    async getTransaction() {\r\n        return await this.log.getTransaction();\r\n    }\r\n    /**\r\n     *  Resolves to the transaction receipt the event occured in.\r\n     */\r\n    async getTransactionReceipt() {\r\n        return await this.log.getTransactionReceipt();\r\n    }\r\n}\r\n/**\r\n *  A **ContractEventPayload** is included as the last parameter to\r\n *  Contract Events when the event is known.\r\n */\r\nclass ContractEventPayload extends ContractUnknownEventPayload {\r\n    /**\r\n     *  @_ignore:\r\n     */\r\n    constructor(contract, listener, filter, fragment, _log) {\r\n        super(contract, listener, filter, new EventLog(_log, contract.interface, fragment));\r\n        const args = contract.interface.decodeEventLog(fragment, this.log.data, this.log.topics);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.defineProperties)(this, { args, fragment });\r\n    }\r\n    /**\r\n     *  The event name.\r\n     */\r\n    get eventName() {\r\n        return this.fragment.name;\r\n    }\r\n    /**\r\n     *  The event signature.\r\n     */\r\n    get eventSignature() {\r\n        return this.fragment.format();\r\n    }\r\n}\r\n//# sourceMappingURL=wrappers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/contract/wrappers.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/crypto-browser.js":
/*!**************************************************************!*\
  !*** ./node_modules/ethers/lib.esm/crypto/crypto-browser.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createHash: () => (/* binding */ createHash),\n/* harmony export */   createHmac: () => (/* binding */ createHmac),\n/* harmony export */   pbkdf2Sync: () => (/* binding */ pbkdf2Sync),\n/* harmony export */   randomBytes: () => (/* binding */ randomBytes)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_hmac__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @noble/hashes/hmac */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/hmac.js\");\n/* harmony import */ var _noble_hashes_pbkdf2__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @noble/hashes/pbkdf2 */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/pbkdf2.js\");\n/* harmony import */ var _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/sha256 */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/sha256.js\");\n/* harmony import */ var _noble_hashes_sha512__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/hashes/sha512 */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/sha512.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/* Browser Crypto Shims */\r\n\r\n\r\n\r\n\r\n\r\nfunction getGlobal() {\r\n    if (typeof self !== 'undefined') {\r\n        return self;\r\n    }\r\n    if (typeof window !== 'undefined') {\r\n        return window;\r\n    }\r\n    if (typeof global !== 'undefined') {\r\n        return global;\r\n    }\r\n    throw new Error('unable to locate global object');\r\n}\r\n;\r\nconst anyGlobal = getGlobal();\r\nconst crypto = anyGlobal.crypto || anyGlobal.msCrypto;\r\nfunction createHash(algo) {\r\n    switch (algo) {\r\n        case \"sha256\": return _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_0__.sha256.create();\r\n        case \"sha512\": return _noble_hashes_sha512__WEBPACK_IMPORTED_MODULE_1__.sha512.create();\r\n    }\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(false, \"invalid hashing algorithm name\", \"algorithm\", algo);\r\n}\r\nfunction createHmac(_algo, key) {\r\n    const algo = ({ sha256: _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_0__.sha256, sha512: _noble_hashes_sha512__WEBPACK_IMPORTED_MODULE_1__.sha512 }[_algo]);\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(algo != null, \"invalid hmac algorithm\", \"algorithm\", _algo);\r\n    return _noble_hashes_hmac__WEBPACK_IMPORTED_MODULE_3__.hmac.create(algo, key);\r\n}\r\nfunction pbkdf2Sync(password, salt, iterations, keylen, _algo) {\r\n    const algo = ({ sha256: _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_0__.sha256, sha512: _noble_hashes_sha512__WEBPACK_IMPORTED_MODULE_1__.sha512 }[_algo]);\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(algo != null, \"invalid pbkdf2 algorithm\", \"algorithm\", _algo);\r\n    return (0,_noble_hashes_pbkdf2__WEBPACK_IMPORTED_MODULE_4__.pbkdf2)(algo, password, salt, { c: iterations, dkLen: keylen });\r\n}\r\nfunction randomBytes(length) {\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assert)(crypto != null, \"platform does not support secure random numbers\", \"UNSUPPORTED_OPERATION\", {\r\n        operation: \"randomBytes\"\r\n    });\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(Number.isInteger(length) && length > 0 && length <= 1024, \"invalid length\", \"length\", length);\r\n    const result = new Uint8Array(length);\r\n    crypto.getRandomValues(result);\r\n    return result;\r\n}\r\n//# sourceMappingURL=crypto-browser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9jcnlwdG8vY3J5cHRvLWJyb3dzZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7QUFDMEM7QUFDSTtBQUNBO0FBQ0E7QUFDYTtBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsOEJBQThCLHdEQUFNO0FBQ3BDLDhCQUE4Qix3REFBTTtBQUNwQztBQUNBLElBQUksK0RBQWM7QUFDbEI7QUFDTztBQUNQLG9CQUFvQixNQUFNLGtFQUFRLDREQUFFO0FBQ3BDLElBQUksK0RBQWM7QUFDbEIsV0FBVyxvREFBSTtBQUNmO0FBQ087QUFDUCxvQkFBb0IsTUFBTSxrRUFBUSw0REFBRTtBQUNwQyxJQUFJLCtEQUFjO0FBQ2xCLFdBQVcsNERBQU0seUJBQXlCLDhCQUE4QjtBQUN4RTtBQUNPO0FBQ1AsSUFBSSx1REFBTTtBQUNWO0FBQ0EsS0FBSztBQUNMLElBQUksK0RBQWM7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiRDpcXERvX2FuMlxcbGVuZGh1Yl92MlxcbGVuZGh1Yi1mcm9udGVuZC1uZXh0anNcXG5vZGVfbW9kdWxlc1xcZXRoZXJzXFxsaWIuZXNtXFxjcnlwdG9cXGNyeXB0by1icm93c2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIEJyb3dzZXIgQ3J5cHRvIFNoaW1zICovXHJcbmltcG9ydCB7IGhtYWMgfSBmcm9tIFwiQG5vYmxlL2hhc2hlcy9obWFjXCI7XHJcbmltcG9ydCB7IHBia2RmMiB9IGZyb20gXCJAbm9ibGUvaGFzaGVzL3Bia2RmMlwiO1xyXG5pbXBvcnQgeyBzaGEyNTYgfSBmcm9tIFwiQG5vYmxlL2hhc2hlcy9zaGEyNTZcIjtcclxuaW1wb3J0IHsgc2hhNTEyIH0gZnJvbSBcIkBub2JsZS9oYXNoZXMvc2hhNTEyXCI7XHJcbmltcG9ydCB7IGFzc2VydCwgYXNzZXJ0QXJndW1lbnQgfSBmcm9tIFwiLi4vdXRpbHMvaW5kZXguanNcIjtcclxuZnVuY3Rpb24gZ2V0R2xvYmFsKCkge1xyXG4gICAgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIHJldHVybiBzZWxmO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgcmV0dXJuIHdpbmRvdztcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIHJldHVybiBnbG9iYWw7XHJcbiAgICB9XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3VuYWJsZSB0byBsb2NhdGUgZ2xvYmFsIG9iamVjdCcpO1xyXG59XHJcbjtcclxuY29uc3QgYW55R2xvYmFsID0gZ2V0R2xvYmFsKCk7XHJcbmNvbnN0IGNyeXB0byA9IGFueUdsb2JhbC5jcnlwdG8gfHwgYW55R2xvYmFsLm1zQ3J5cHRvO1xyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlSGFzaChhbGdvKSB7XHJcbiAgICBzd2l0Y2ggKGFsZ28pIHtcclxuICAgICAgICBjYXNlIFwic2hhMjU2XCI6IHJldHVybiBzaGEyNTYuY3JlYXRlKCk7XHJcbiAgICAgICAgY2FzZSBcInNoYTUxMlwiOiByZXR1cm4gc2hhNTEyLmNyZWF0ZSgpO1xyXG4gICAgfVxyXG4gICAgYXNzZXJ0QXJndW1lbnQoZmFsc2UsIFwiaW52YWxpZCBoYXNoaW5nIGFsZ29yaXRobSBuYW1lXCIsIFwiYWxnb3JpdGhtXCIsIGFsZ28pO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVIbWFjKF9hbGdvLCBrZXkpIHtcclxuICAgIGNvbnN0IGFsZ28gPSAoeyBzaGEyNTYsIHNoYTUxMiB9W19hbGdvXSk7XHJcbiAgICBhc3NlcnRBcmd1bWVudChhbGdvICE9IG51bGwsIFwiaW52YWxpZCBobWFjIGFsZ29yaXRobVwiLCBcImFsZ29yaXRobVwiLCBfYWxnbyk7XHJcbiAgICByZXR1cm4gaG1hYy5jcmVhdGUoYWxnbywga2V5KTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gcGJrZGYyU3luYyhwYXNzd29yZCwgc2FsdCwgaXRlcmF0aW9ucywga2V5bGVuLCBfYWxnbykge1xyXG4gICAgY29uc3QgYWxnbyA9ICh7IHNoYTI1Niwgc2hhNTEyIH1bX2FsZ29dKTtcclxuICAgIGFzc2VydEFyZ3VtZW50KGFsZ28gIT0gbnVsbCwgXCJpbnZhbGlkIHBia2RmMiBhbGdvcml0aG1cIiwgXCJhbGdvcml0aG1cIiwgX2FsZ28pO1xyXG4gICAgcmV0dXJuIHBia2RmMihhbGdvLCBwYXNzd29yZCwgc2FsdCwgeyBjOiBpdGVyYXRpb25zLCBka0xlbjoga2V5bGVuIH0pO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiByYW5kb21CeXRlcyhsZW5ndGgpIHtcclxuICAgIGFzc2VydChjcnlwdG8gIT0gbnVsbCwgXCJwbGF0Zm9ybSBkb2VzIG5vdCBzdXBwb3J0IHNlY3VyZSByYW5kb20gbnVtYmVyc1wiLCBcIlVOU1VQUE9SVEVEX09QRVJBVElPTlwiLCB7XHJcbiAgICAgICAgb3BlcmF0aW9uOiBcInJhbmRvbUJ5dGVzXCJcclxuICAgIH0pO1xyXG4gICAgYXNzZXJ0QXJndW1lbnQoTnVtYmVyLmlzSW50ZWdlcihsZW5ndGgpICYmIGxlbmd0aCA+IDAgJiYgbGVuZ3RoIDw9IDEwMjQsIFwiaW52YWxpZCBsZW5ndGhcIiwgXCJsZW5ndGhcIiwgbGVuZ3RoKTtcclxuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7XHJcbiAgICBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKHJlc3VsdCk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyeXB0by1icm93c2VyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/crypto-browser.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/hmac.js":
/*!****************************************************!*\
  !*** ./node_modules/ethers/lib.esm/crypto/hmac.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   computeHmac: () => (/* binding */ computeHmac)\n/* harmony export */ });\n/* harmony import */ var _crypto_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./crypto.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/crypto-browser.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/**\r\n *  An **HMAC** enables verification that a given key was used\r\n *  to authenticate a payload.\r\n *\r\n *  See: [[link-wiki-hmac]]\r\n *\r\n *  @_subsection: api/crypto:HMAC  [about-hmac]\r\n */\r\n\r\n\r\nlet locked = false;\r\nconst _computeHmac = function (algorithm, key, data) {\r\n    return (0,_crypto_js__WEBPACK_IMPORTED_MODULE_0__.createHmac)(algorithm, key).update(data).digest();\r\n};\r\nlet __computeHmac = _computeHmac;\r\n/**\r\n *  Return the HMAC for %%data%% using the %%key%% key with the underlying\r\n *  %%algo%% used for compression.\r\n *\r\n *  @example:\r\n *    key = id(\"some-secret\")\r\n *\r\n *    // Compute the HMAC\r\n *    computeHmac(\"sha256\", key, \"0x1337\")\r\n *    //_result:\r\n *\r\n *    // To compute the HMAC of UTF-8 data, the data must be\r\n *    // converted to UTF-8 bytes\r\n *    computeHmac(\"sha256\", key, toUtf8Bytes(\"Hello World\"))\r\n *    //_result:\r\n *\r\n */\r\nfunction computeHmac(algorithm, _key, _data) {\r\n    const key = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBytes)(_key, \"key\");\r\n    const data = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBytes)(_data, \"data\");\r\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.hexlify)(__computeHmac(algorithm, key, data));\r\n}\r\ncomputeHmac._ = _computeHmac;\r\ncomputeHmac.lock = function () { locked = true; };\r\ncomputeHmac.register = function (func) {\r\n    if (locked) {\r\n        throw new Error(\"computeHmac is locked\");\r\n    }\r\n    __computeHmac = func;\r\n};\r\nObject.freeze(computeHmac);\r\n//# sourceMappingURL=hmac.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9jcnlwdG8vaG1hYy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3lDO0FBQ2E7QUFDdEQ7QUFDQTtBQUNBLFdBQVcsc0RBQVU7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLGdCQUFnQix5REFBUTtBQUN4QixpQkFBaUIseURBQVE7QUFDekIsV0FBVyx3REFBTztBQUNsQjtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkQ6XFxEb19hbjJcXGxlbmRodWJfdjJcXGxlbmRodWItZnJvbnRlbmQtbmV4dGpzXFxub2RlX21vZHVsZXNcXGV0aGVyc1xcbGliLmVzbVxcY3J5cHRvXFxobWFjLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiAgQW4gKipITUFDKiogZW5hYmxlcyB2ZXJpZmljYXRpb24gdGhhdCBhIGdpdmVuIGtleSB3YXMgdXNlZFxyXG4gKiAgdG8gYXV0aGVudGljYXRlIGEgcGF5bG9hZC5cclxuICpcclxuICogIFNlZTogW1tsaW5rLXdpa2ktaG1hY11dXHJcbiAqXHJcbiAqICBAX3N1YnNlY3Rpb246IGFwaS9jcnlwdG86SE1BQyAgW2Fib3V0LWhtYWNdXHJcbiAqL1xyXG5pbXBvcnQgeyBjcmVhdGVIbWFjIH0gZnJvbSBcIi4vY3J5cHRvLmpzXCI7XHJcbmltcG9ydCB7IGdldEJ5dGVzLCBoZXhsaWZ5IH0gZnJvbSBcIi4uL3V0aWxzL2luZGV4LmpzXCI7XHJcbmxldCBsb2NrZWQgPSBmYWxzZTtcclxuY29uc3QgX2NvbXB1dGVIbWFjID0gZnVuY3Rpb24gKGFsZ29yaXRobSwga2V5LCBkYXRhKSB7XHJcbiAgICByZXR1cm4gY3JlYXRlSG1hYyhhbGdvcml0aG0sIGtleSkudXBkYXRlKGRhdGEpLmRpZ2VzdCgpO1xyXG59O1xyXG5sZXQgX19jb21wdXRlSG1hYyA9IF9jb21wdXRlSG1hYztcclxuLyoqXHJcbiAqICBSZXR1cm4gdGhlIEhNQUMgZm9yICUlZGF0YSUlIHVzaW5nIHRoZSAlJWtleSUlIGtleSB3aXRoIHRoZSB1bmRlcmx5aW5nXHJcbiAqICAlJWFsZ28lJSB1c2VkIGZvciBjb21wcmVzc2lvbi5cclxuICpcclxuICogIEBleGFtcGxlOlxyXG4gKiAgICBrZXkgPSBpZChcInNvbWUtc2VjcmV0XCIpXHJcbiAqXHJcbiAqICAgIC8vIENvbXB1dGUgdGhlIEhNQUNcclxuICogICAgY29tcHV0ZUhtYWMoXCJzaGEyNTZcIiwga2V5LCBcIjB4MTMzN1wiKVxyXG4gKiAgICAvL19yZXN1bHQ6XHJcbiAqXHJcbiAqICAgIC8vIFRvIGNvbXB1dGUgdGhlIEhNQUMgb2YgVVRGLTggZGF0YSwgdGhlIGRhdGEgbXVzdCBiZVxyXG4gKiAgICAvLyBjb252ZXJ0ZWQgdG8gVVRGLTggYnl0ZXNcclxuICogICAgY29tcHV0ZUhtYWMoXCJzaGEyNTZcIiwga2V5LCB0b1V0ZjhCeXRlcyhcIkhlbGxvIFdvcmxkXCIpKVxyXG4gKiAgICAvL19yZXN1bHQ6XHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZUhtYWMoYWxnb3JpdGhtLCBfa2V5LCBfZGF0YSkge1xyXG4gICAgY29uc3Qga2V5ID0gZ2V0Qnl0ZXMoX2tleSwgXCJrZXlcIik7XHJcbiAgICBjb25zdCBkYXRhID0gZ2V0Qnl0ZXMoX2RhdGEsIFwiZGF0YVwiKTtcclxuICAgIHJldHVybiBoZXhsaWZ5KF9fY29tcHV0ZUhtYWMoYWxnb3JpdGhtLCBrZXksIGRhdGEpKTtcclxufVxyXG5jb21wdXRlSG1hYy5fID0gX2NvbXB1dGVIbWFjO1xyXG5jb21wdXRlSG1hYy5sb2NrID0gZnVuY3Rpb24gKCkgeyBsb2NrZWQgPSB0cnVlOyB9O1xyXG5jb21wdXRlSG1hYy5yZWdpc3RlciA9IGZ1bmN0aW9uIChmdW5jKSB7XHJcbiAgICBpZiAobG9ja2VkKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY29tcHV0ZUhtYWMgaXMgbG9ja2VkXCIpO1xyXG4gICAgfVxyXG4gICAgX19jb21wdXRlSG1hYyA9IGZ1bmM7XHJcbn07XHJcbk9iamVjdC5mcmVlemUoY29tcHV0ZUhtYWMpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1obWFjLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/hmac.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/ethers/lib.esm/crypto/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Signature: () => (/* reexport safe */ _signature_js__WEBPACK_IMPORTED_MODULE_8__.Signature),\n/* harmony export */   SigningKey: () => (/* reexport safe */ _signing_key_js__WEBPACK_IMPORTED_MODULE_7__.SigningKey),\n/* harmony export */   computeHmac: () => (/* reexport safe */ _hmac_js__WEBPACK_IMPORTED_MODULE_0__.computeHmac),\n/* harmony export */   keccak256: () => (/* reexport safe */ _keccak_js__WEBPACK_IMPORTED_MODULE_2__.keccak256),\n/* harmony export */   lock: () => (/* binding */ lock),\n/* harmony export */   pbkdf2: () => (/* reexport safe */ _pbkdf2_js__WEBPACK_IMPORTED_MODULE_5__.pbkdf2),\n/* harmony export */   randomBytes: () => (/* reexport safe */ _random_js__WEBPACK_IMPORTED_MODULE_1__.randomBytes),\n/* harmony export */   ripemd160: () => (/* reexport safe */ _ripemd160_js__WEBPACK_IMPORTED_MODULE_3__.ripemd160),\n/* harmony export */   scrypt: () => (/* reexport safe */ _scrypt_js__WEBPACK_IMPORTED_MODULE_6__.scrypt),\n/* harmony export */   scryptSync: () => (/* reexport safe */ _scrypt_js__WEBPACK_IMPORTED_MODULE_6__.scryptSync),\n/* harmony export */   sha256: () => (/* reexport safe */ _sha2_js__WEBPACK_IMPORTED_MODULE_4__.sha256),\n/* harmony export */   sha512: () => (/* reexport safe */ _sha2_js__WEBPACK_IMPORTED_MODULE_4__.sha512)\n/* harmony export */ });\n/* harmony import */ var _hmac_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./hmac.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/hmac.js\");\n/* harmony import */ var _keccak_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./keccak.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/keccak.js\");\n/* harmony import */ var _ripemd160_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ripemd160.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/ripemd160.js\");\n/* harmony import */ var _pbkdf2_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./pbkdf2.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/pbkdf2.js\");\n/* harmony import */ var _random_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./random.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/random.js\");\n/* harmony import */ var _scrypt_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./scrypt.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/scrypt.js\");\n/* harmony import */ var _sha2_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sha2.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/sha2.js\");\n/* harmony import */ var _signing_key_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./signing-key.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/signing-key.js\");\n/* harmony import */ var _signature_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./signature.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/signature.js\");\n/**\r\n *  A fundamental building block of Ethereum is the underlying\r\n *  cryptographic primitives.\r\n *\r\n *  @_section: api/crypto:Cryptographic Functions   [about-crypto]\r\n */\r\nnull;\r\n// We import all these so we can export lock()\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n *  Once called, prevents any future change to the underlying cryptographic\r\n *  primitives using the ``.register`` feature for hooks.\r\n */\r\nfunction lock() {\r\n    _hmac_js__WEBPACK_IMPORTED_MODULE_0__.computeHmac.lock();\r\n    _keccak_js__WEBPACK_IMPORTED_MODULE_2__.keccak256.lock();\r\n    _pbkdf2_js__WEBPACK_IMPORTED_MODULE_5__.pbkdf2.lock();\r\n    _random_js__WEBPACK_IMPORTED_MODULE_1__.randomBytes.lock();\r\n    _ripemd160_js__WEBPACK_IMPORTED_MODULE_3__.ripemd160.lock();\r\n    _scrypt_js__WEBPACK_IMPORTED_MODULE_6__.scrypt.lock();\r\n    _scrypt_js__WEBPACK_IMPORTED_MODULE_6__.scryptSync.lock();\r\n    _sha2_js__WEBPACK_IMPORTED_MODULE_4__.sha256.lock();\r\n    _sha2_js__WEBPACK_IMPORTED_MODULE_4__.sha512.lock();\r\n    _random_js__WEBPACK_IMPORTED_MODULE_1__.randomBytes.lock();\r\n}\r\n\r\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9jcnlwdG8vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN3QztBQUNBO0FBQ0c7QUFDTjtBQUNLO0FBQ087QUFDTjtBQUMyRDtBQUN4RDtBQUNIO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLGlEQUFXO0FBQ2YsSUFBSSxpREFBUztBQUNiLElBQUksOENBQU07QUFDVixJQUFJLG1EQUFXO0FBQ2YsSUFBSSxvREFBUztBQUNiLElBQUksOENBQU07QUFDVixJQUFJLGtEQUFVO0FBQ2QsSUFBSSw0Q0FBTTtBQUNWLElBQUksNENBQU07QUFDVixJQUFJLG1EQUFXO0FBQ2Y7QUFDZ0I7QUFDaEIiLCJzb3VyY2VzIjpbIkQ6XFxEb19hbjJcXGxlbmRodWJfdjJcXGxlbmRodWItZnJvbnRlbmQtbmV4dGpzXFxub2RlX21vZHVsZXNcXGV0aGVyc1xcbGliLmVzbVxcY3J5cHRvXFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogIEEgZnVuZGFtZW50YWwgYnVpbGRpbmcgYmxvY2sgb2YgRXRoZXJldW0gaXMgdGhlIHVuZGVybHlpbmdcclxuICogIGNyeXB0b2dyYXBoaWMgcHJpbWl0aXZlcy5cclxuICpcclxuICogIEBfc2VjdGlvbjogYXBpL2NyeXB0bzpDcnlwdG9ncmFwaGljIEZ1bmN0aW9ucyAgIFthYm91dC1jcnlwdG9dXHJcbiAqL1xyXG5udWxsO1xyXG4vLyBXZSBpbXBvcnQgYWxsIHRoZXNlIHNvIHdlIGNhbiBleHBvcnQgbG9jaygpXHJcbmltcG9ydCB7IGNvbXB1dGVIbWFjIH0gZnJvbSBcIi4vaG1hYy5qc1wiO1xyXG5pbXBvcnQgeyBrZWNjYWsyNTYgfSBmcm9tIFwiLi9rZWNjYWsuanNcIjtcclxuaW1wb3J0IHsgcmlwZW1kMTYwIH0gZnJvbSBcIi4vcmlwZW1kMTYwLmpzXCI7XHJcbmltcG9ydCB7IHBia2RmMiB9IGZyb20gXCIuL3Bia2RmMi5qc1wiO1xyXG5pbXBvcnQgeyByYW5kb21CeXRlcyB9IGZyb20gXCIuL3JhbmRvbS5qc1wiO1xyXG5pbXBvcnQgeyBzY3J5cHQsIHNjcnlwdFN5bmMgfSBmcm9tIFwiLi9zY3J5cHQuanNcIjtcclxuaW1wb3J0IHsgc2hhMjU2LCBzaGE1MTIgfSBmcm9tIFwiLi9zaGEyLmpzXCI7XHJcbmV4cG9ydCB7IGNvbXB1dGVIbWFjLCByYW5kb21CeXRlcywga2VjY2FrMjU2LCByaXBlbWQxNjAsIHNoYTI1Niwgc2hhNTEyLCBwYmtkZjIsIHNjcnlwdCwgc2NyeXB0U3luYyB9O1xyXG5leHBvcnQgeyBTaWduaW5nS2V5IH0gZnJvbSBcIi4vc2lnbmluZy1rZXkuanNcIjtcclxuZXhwb3J0IHsgU2lnbmF0dXJlIH0gZnJvbSBcIi4vc2lnbmF0dXJlLmpzXCI7XHJcbi8qKlxyXG4gKiAgT25jZSBjYWxsZWQsIHByZXZlbnRzIGFueSBmdXR1cmUgY2hhbmdlIHRvIHRoZSB1bmRlcmx5aW5nIGNyeXB0b2dyYXBoaWNcclxuICogIHByaW1pdGl2ZXMgdXNpbmcgdGhlIGBgLnJlZ2lzdGVyYGAgZmVhdHVyZSBmb3IgaG9va3MuXHJcbiAqL1xyXG5mdW5jdGlvbiBsb2NrKCkge1xyXG4gICAgY29tcHV0ZUhtYWMubG9jaygpO1xyXG4gICAga2VjY2FrMjU2LmxvY2soKTtcclxuICAgIHBia2RmMi5sb2NrKCk7XHJcbiAgICByYW5kb21CeXRlcy5sb2NrKCk7XHJcbiAgICByaXBlbWQxNjAubG9jaygpO1xyXG4gICAgc2NyeXB0LmxvY2soKTtcclxuICAgIHNjcnlwdFN5bmMubG9jaygpO1xyXG4gICAgc2hhMjU2LmxvY2soKTtcclxuICAgIHNoYTUxMi5sb2NrKCk7XHJcbiAgICByYW5kb21CeXRlcy5sb2NrKCk7XHJcbn1cclxuZXhwb3J0IHsgbG9jayB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/index.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/keccak.js":
/*!******************************************************!*\
  !*** ./node_modules/ethers/lib.esm/crypto/keccak.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   keccak256: () => (/* binding */ keccak256)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/sha3 */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/sha3.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/**\r\n *  Cryptographic hashing functions\r\n *\r\n *  @_subsection: api/crypto:Hash Functions [about-crypto-hashing]\r\n */\r\n\r\n\r\nlet locked = false;\r\nconst _keccak256 = function (data) {\r\n    return (0,_noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_0__.keccak_256)(data);\r\n};\r\nlet __keccak256 = _keccak256;\r\n/**\r\n *  Compute the cryptographic KECCAK256 hash of %%data%%.\r\n *\r\n *  The %%data%% **must** be a data representation, to compute the\r\n *  hash of UTF-8 data use the [[id]] function.\r\n *\r\n *  @returns DataHexstring\r\n *  @example:\r\n *    keccak256(\"0x\")\r\n *    //_result:\r\n *\r\n *    keccak256(\"0x1337\")\r\n *    //_result:\r\n *\r\n *    keccak256(new Uint8Array([ 0x13, 0x37 ]))\r\n *    //_result:\r\n *\r\n *    // Strings are assumed to be DataHexString, otherwise it will\r\n *    // throw. To hash UTF-8 data, see the note above.\r\n *    keccak256(\"Hello World\")\r\n *    //_error:\r\n */\r\nfunction keccak256(_data) {\r\n    const data = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBytes)(_data, \"data\");\r\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.hexlify)(__keccak256(data));\r\n}\r\nkeccak256._ = _keccak256;\r\nkeccak256.lock = function () { locked = true; };\r\nkeccak256.register = function (func) {\r\n    if (locked) {\r\n        throw new TypeError(\"keccak256 is locked\");\r\n    }\r\n    __keccak256 = func;\r\n};\r\nObject.freeze(keccak256);\r\n//# sourceMappingURL=keccak.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9jcnlwdG8va2VjY2FrLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDZ0Q7QUFDTTtBQUN0RDtBQUNBO0FBQ0EsV0FBVyw4REFBVTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLGlCQUFpQix5REFBUTtBQUN6QixXQUFXLHdEQUFPO0FBQ2xCO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiRDpcXERvX2FuMlxcbGVuZGh1Yl92MlxcbGVuZGh1Yi1mcm9udGVuZC1uZXh0anNcXG5vZGVfbW9kdWxlc1xcZXRoZXJzXFxsaWIuZXNtXFxjcnlwdG9cXGtlY2Nhay5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogIENyeXB0b2dyYXBoaWMgaGFzaGluZyBmdW5jdGlvbnNcclxuICpcclxuICogIEBfc3Vic2VjdGlvbjogYXBpL2NyeXB0bzpIYXNoIEZ1bmN0aW9ucyBbYWJvdXQtY3J5cHRvLWhhc2hpbmddXHJcbiAqL1xyXG5pbXBvcnQgeyBrZWNjYWtfMjU2IH0gZnJvbSBcIkBub2JsZS9oYXNoZXMvc2hhM1wiO1xyXG5pbXBvcnQgeyBnZXRCeXRlcywgaGV4bGlmeSB9IGZyb20gXCIuLi91dGlscy9pbmRleC5qc1wiO1xyXG5sZXQgbG9ja2VkID0gZmFsc2U7XHJcbmNvbnN0IF9rZWNjYWsyNTYgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgcmV0dXJuIGtlY2Nha18yNTYoZGF0YSk7XHJcbn07XHJcbmxldCBfX2tlY2NhazI1NiA9IF9rZWNjYWsyNTY7XHJcbi8qKlxyXG4gKiAgQ29tcHV0ZSB0aGUgY3J5cHRvZ3JhcGhpYyBLRUNDQUsyNTYgaGFzaCBvZiAlJWRhdGElJS5cclxuICpcclxuICogIFRoZSAlJWRhdGElJSAqKm11c3QqKiBiZSBhIGRhdGEgcmVwcmVzZW50YXRpb24sIHRvIGNvbXB1dGUgdGhlXHJcbiAqICBoYXNoIG9mIFVURi04IGRhdGEgdXNlIHRoZSBbW2lkXV0gZnVuY3Rpb24uXHJcbiAqXHJcbiAqICBAcmV0dXJucyBEYXRhSGV4c3RyaW5nXHJcbiAqICBAZXhhbXBsZTpcclxuICogICAga2VjY2FrMjU2KFwiMHhcIilcclxuICogICAgLy9fcmVzdWx0OlxyXG4gKlxyXG4gKiAgICBrZWNjYWsyNTYoXCIweDEzMzdcIilcclxuICogICAgLy9fcmVzdWx0OlxyXG4gKlxyXG4gKiAgICBrZWNjYWsyNTYobmV3IFVpbnQ4QXJyYXkoWyAweDEzLCAweDM3IF0pKVxyXG4gKiAgICAvL19yZXN1bHQ6XHJcbiAqXHJcbiAqICAgIC8vIFN0cmluZ3MgYXJlIGFzc3VtZWQgdG8gYmUgRGF0YUhleFN0cmluZywgb3RoZXJ3aXNlIGl0IHdpbGxcclxuICogICAgLy8gdGhyb3cuIFRvIGhhc2ggVVRGLTggZGF0YSwgc2VlIHRoZSBub3RlIGFib3ZlLlxyXG4gKiAgICBrZWNjYWsyNTYoXCJIZWxsbyBXb3JsZFwiKVxyXG4gKiAgICAvL19lcnJvcjpcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBrZWNjYWsyNTYoX2RhdGEpIHtcclxuICAgIGNvbnN0IGRhdGEgPSBnZXRCeXRlcyhfZGF0YSwgXCJkYXRhXCIpO1xyXG4gICAgcmV0dXJuIGhleGxpZnkoX19rZWNjYWsyNTYoZGF0YSkpO1xyXG59XHJcbmtlY2NhazI1Ni5fID0gX2tlY2NhazI1Njtcclxua2VjY2FrMjU2LmxvY2sgPSBmdW5jdGlvbiAoKSB7IGxvY2tlZCA9IHRydWU7IH07XHJcbmtlY2NhazI1Ni5yZWdpc3RlciA9IGZ1bmN0aW9uIChmdW5jKSB7XHJcbiAgICBpZiAobG9ja2VkKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImtlY2NhazI1NiBpcyBsb2NrZWRcIik7XHJcbiAgICB9XHJcbiAgICBfX2tlY2NhazI1NiA9IGZ1bmM7XHJcbn07XHJcbk9iamVjdC5mcmVlemUoa2VjY2FrMjU2KTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9a2VjY2FrLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/keccak.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/pbkdf2.js":
/*!******************************************************!*\
  !*** ./node_modules/ethers/lib.esm/crypto/pbkdf2.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pbkdf2: () => (/* binding */ pbkdf2)\n/* harmony export */ });\n/* harmony import */ var _crypto_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./crypto.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/crypto-browser.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/**\r\n *  A **Password-Based Key-Derivation Function** is designed to create\r\n *  a sequence of bytes suitible as a **key** from a human-rememberable\r\n *  password.\r\n *\r\n *  @_subsection: api/crypto:Passwords  [about-pbkdf]\r\n */\r\n\r\n\r\nlet locked = false;\r\nconst _pbkdf2 = function (password, salt, iterations, keylen, algo) {\r\n    return (0,_crypto_js__WEBPACK_IMPORTED_MODULE_0__.pbkdf2Sync)(password, salt, iterations, keylen, algo);\r\n};\r\nlet __pbkdf2 = _pbkdf2;\r\n/**\r\n *  Return the [[link-pbkdf2]] for %%keylen%% bytes for %%password%% using\r\n *  the %%salt%% and using %%iterations%% of %%algo%%.\r\n *\r\n *  This PBKDF is outdated and should not be used in new projects, but is\r\n *  required to decrypt older files.\r\n *\r\n *  @example:\r\n *    // The password must be converted to bytes, and it is generally\r\n *    // best practices to ensure the string has been normalized. Many\r\n *    // formats explicitly indicate the normalization form to use.\r\n *    password = \"hello\"\r\n *    passwordBytes = toUtf8Bytes(password, \"NFKC\")\r\n *\r\n *    salt = id(\"some-salt\")\r\n *\r\n *    // Compute the PBKDF2\r\n *    pbkdf2(passwordBytes, salt, 1024, 16, \"sha256\")\r\n *    //_result:\r\n */\r\nfunction pbkdf2(_password, _salt, iterations, keylen, algo) {\r\n    const password = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBytes)(_password, \"password\");\r\n    const salt = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBytes)(_salt, \"salt\");\r\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.hexlify)(__pbkdf2(password, salt, iterations, keylen, algo));\r\n}\r\npbkdf2._ = _pbkdf2;\r\npbkdf2.lock = function () { locked = true; };\r\npbkdf2.register = function (func) {\r\n    if (locked) {\r\n        throw new Error(\"pbkdf2 is locked\");\r\n    }\r\n    __pbkdf2 = func;\r\n};\r\nObject.freeze(pbkdf2);\r\n//# sourceMappingURL=pbkdf2.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9jcnlwdG8vcGJrZGYyLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3lDO0FBQ2E7QUFDdEQ7QUFDQTtBQUNBLFdBQVcsc0RBQVU7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLHFCQUFxQix5REFBUTtBQUM3QixpQkFBaUIseURBQVE7QUFDekIsV0FBVyx3REFBTztBQUNsQjtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkQ6XFxEb19hbjJcXGxlbmRodWJfdjJcXGxlbmRodWItZnJvbnRlbmQtbmV4dGpzXFxub2RlX21vZHVsZXNcXGV0aGVyc1xcbGliLmVzbVxcY3J5cHRvXFxwYmtkZjIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqICBBICoqUGFzc3dvcmQtQmFzZWQgS2V5LURlcml2YXRpb24gRnVuY3Rpb24qKiBpcyBkZXNpZ25lZCB0byBjcmVhdGVcclxuICogIGEgc2VxdWVuY2Ugb2YgYnl0ZXMgc3VpdGlibGUgYXMgYSAqKmtleSoqIGZyb20gYSBodW1hbi1yZW1lbWJlcmFibGVcclxuICogIHBhc3N3b3JkLlxyXG4gKlxyXG4gKiAgQF9zdWJzZWN0aW9uOiBhcGkvY3J5cHRvOlBhc3N3b3JkcyAgW2Fib3V0LXBia2RmXVxyXG4gKi9cclxuaW1wb3J0IHsgcGJrZGYyU3luYyB9IGZyb20gXCIuL2NyeXB0by5qc1wiO1xyXG5pbXBvcnQgeyBnZXRCeXRlcywgaGV4bGlmeSB9IGZyb20gXCIuLi91dGlscy9pbmRleC5qc1wiO1xyXG5sZXQgbG9ja2VkID0gZmFsc2U7XHJcbmNvbnN0IF9wYmtkZjIgPSBmdW5jdGlvbiAocGFzc3dvcmQsIHNhbHQsIGl0ZXJhdGlvbnMsIGtleWxlbiwgYWxnbykge1xyXG4gICAgcmV0dXJuIHBia2RmMlN5bmMocGFzc3dvcmQsIHNhbHQsIGl0ZXJhdGlvbnMsIGtleWxlbiwgYWxnbyk7XHJcbn07XHJcbmxldCBfX3Bia2RmMiA9IF9wYmtkZjI7XHJcbi8qKlxyXG4gKiAgUmV0dXJuIHRoZSBbW2xpbmstcGJrZGYyXV0gZm9yICUla2V5bGVuJSUgYnl0ZXMgZm9yICUlcGFzc3dvcmQlJSB1c2luZ1xyXG4gKiAgdGhlICUlc2FsdCUlIGFuZCB1c2luZyAlJWl0ZXJhdGlvbnMlJSBvZiAlJWFsZ28lJS5cclxuICpcclxuICogIFRoaXMgUEJLREYgaXMgb3V0ZGF0ZWQgYW5kIHNob3VsZCBub3QgYmUgdXNlZCBpbiBuZXcgcHJvamVjdHMsIGJ1dCBpc1xyXG4gKiAgcmVxdWlyZWQgdG8gZGVjcnlwdCBvbGRlciBmaWxlcy5cclxuICpcclxuICogIEBleGFtcGxlOlxyXG4gKiAgICAvLyBUaGUgcGFzc3dvcmQgbXVzdCBiZSBjb252ZXJ0ZWQgdG8gYnl0ZXMsIGFuZCBpdCBpcyBnZW5lcmFsbHlcclxuICogICAgLy8gYmVzdCBwcmFjdGljZXMgdG8gZW5zdXJlIHRoZSBzdHJpbmcgaGFzIGJlZW4gbm9ybWFsaXplZC4gTWFueVxyXG4gKiAgICAvLyBmb3JtYXRzIGV4cGxpY2l0bHkgaW5kaWNhdGUgdGhlIG5vcm1hbGl6YXRpb24gZm9ybSB0byB1c2UuXHJcbiAqICAgIHBhc3N3b3JkID0gXCJoZWxsb1wiXHJcbiAqICAgIHBhc3N3b3JkQnl0ZXMgPSB0b1V0ZjhCeXRlcyhwYXNzd29yZCwgXCJORktDXCIpXHJcbiAqXHJcbiAqICAgIHNhbHQgPSBpZChcInNvbWUtc2FsdFwiKVxyXG4gKlxyXG4gKiAgICAvLyBDb21wdXRlIHRoZSBQQktERjJcclxuICogICAgcGJrZGYyKHBhc3N3b3JkQnl0ZXMsIHNhbHQsIDEwMjQsIDE2LCBcInNoYTI1NlwiKVxyXG4gKiAgICAvL19yZXN1bHQ6XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcGJrZGYyKF9wYXNzd29yZCwgX3NhbHQsIGl0ZXJhdGlvbnMsIGtleWxlbiwgYWxnbykge1xyXG4gICAgY29uc3QgcGFzc3dvcmQgPSBnZXRCeXRlcyhfcGFzc3dvcmQsIFwicGFzc3dvcmRcIik7XHJcbiAgICBjb25zdCBzYWx0ID0gZ2V0Qnl0ZXMoX3NhbHQsIFwic2FsdFwiKTtcclxuICAgIHJldHVybiBoZXhsaWZ5KF9fcGJrZGYyKHBhc3N3b3JkLCBzYWx0LCBpdGVyYXRpb25zLCBrZXlsZW4sIGFsZ28pKTtcclxufVxyXG5wYmtkZjIuXyA9IF9wYmtkZjI7XHJcbnBia2RmMi5sb2NrID0gZnVuY3Rpb24gKCkgeyBsb2NrZWQgPSB0cnVlOyB9O1xyXG5wYmtkZjIucmVnaXN0ZXIgPSBmdW5jdGlvbiAoZnVuYykge1xyXG4gICAgaWYgKGxvY2tlZCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcInBia2RmMiBpcyBsb2NrZWRcIik7XHJcbiAgICB9XHJcbiAgICBfX3Bia2RmMiA9IGZ1bmM7XHJcbn07XHJcbk9iamVjdC5mcmVlemUocGJrZGYyKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGJrZGYyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/pbkdf2.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/random.js":
/*!******************************************************!*\
  !*** ./node_modules/ethers/lib.esm/crypto/random.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   randomBytes: () => (/* binding */ randomBytes)\n/* harmony export */ });\n/* harmony import */ var _crypto_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./crypto.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/crypto-browser.js\");\n/**\r\n *  A **Cryptographically Secure Random Value** is one that has been\r\n *  generated with additional care take to prevent side-channels\r\n *  from allowing others to detect it and prevent others from through\r\n *  coincidence generate the same values.\r\n *\r\n *  @_subsection: api/crypto:Random Values  [about-crypto-random]\r\n */\r\n\r\nlet locked = false;\r\nconst _randomBytes = function (length) {\r\n    return new Uint8Array((0,_crypto_js__WEBPACK_IMPORTED_MODULE_0__.randomBytes)(length));\r\n};\r\nlet __randomBytes = _randomBytes;\r\n/**\r\n *  Return %%length%% bytes of cryptographically secure random data.\r\n *\r\n *  @example:\r\n *    randomBytes(8)\r\n *    //_result:\r\n */\r\nfunction randomBytes(length) {\r\n    return __randomBytes(length);\r\n}\r\nrandomBytes._ = _randomBytes;\r\nrandomBytes.lock = function () { locked = true; };\r\nrandomBytes.register = function (func) {\r\n    if (locked) {\r\n        throw new Error(\"randomBytes is locked\");\r\n    }\r\n    __randomBytes = func;\r\n};\r\nObject.freeze(randomBytes);\r\n//# sourceMappingURL=random.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9jcnlwdG8vcmFuZG9tLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUMyRDtBQUMzRDtBQUNBO0FBQ0EsMEJBQTBCLHVEQUFhO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkQ6XFxEb19hbjJcXGxlbmRodWJfdjJcXGxlbmRodWItZnJvbnRlbmQtbmV4dGpzXFxub2RlX21vZHVsZXNcXGV0aGVyc1xcbGliLmVzbVxcY3J5cHRvXFxyYW5kb20uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqICBBICoqQ3J5cHRvZ3JhcGhpY2FsbHkgU2VjdXJlIFJhbmRvbSBWYWx1ZSoqIGlzIG9uZSB0aGF0IGhhcyBiZWVuXHJcbiAqICBnZW5lcmF0ZWQgd2l0aCBhZGRpdGlvbmFsIGNhcmUgdGFrZSB0byBwcmV2ZW50IHNpZGUtY2hhbm5lbHNcclxuICogIGZyb20gYWxsb3dpbmcgb3RoZXJzIHRvIGRldGVjdCBpdCBhbmQgcHJldmVudCBvdGhlcnMgZnJvbSB0aHJvdWdoXHJcbiAqICBjb2luY2lkZW5jZSBnZW5lcmF0ZSB0aGUgc2FtZSB2YWx1ZXMuXHJcbiAqXHJcbiAqICBAX3N1YnNlY3Rpb246IGFwaS9jcnlwdG86UmFuZG9tIFZhbHVlcyAgW2Fib3V0LWNyeXB0by1yYW5kb21dXHJcbiAqL1xyXG5pbXBvcnQgeyByYW5kb21CeXRlcyBhcyBjcnlwdG9fcmFuZG9tIH0gZnJvbSBcIi4vY3J5cHRvLmpzXCI7XHJcbmxldCBsb2NrZWQgPSBmYWxzZTtcclxuY29uc3QgX3JhbmRvbUJ5dGVzID0gZnVuY3Rpb24gKGxlbmd0aCkge1xyXG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGNyeXB0b19yYW5kb20obGVuZ3RoKSk7XHJcbn07XHJcbmxldCBfX3JhbmRvbUJ5dGVzID0gX3JhbmRvbUJ5dGVzO1xyXG4vKipcclxuICogIFJldHVybiAlJWxlbmd0aCUlIGJ5dGVzIG9mIGNyeXB0b2dyYXBoaWNhbGx5IHNlY3VyZSByYW5kb20gZGF0YS5cclxuICpcclxuICogIEBleGFtcGxlOlxyXG4gKiAgICByYW5kb21CeXRlcyg4KVxyXG4gKiAgICAvL19yZXN1bHQ6XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcmFuZG9tQnl0ZXMobGVuZ3RoKSB7XHJcbiAgICByZXR1cm4gX19yYW5kb21CeXRlcyhsZW5ndGgpO1xyXG59XHJcbnJhbmRvbUJ5dGVzLl8gPSBfcmFuZG9tQnl0ZXM7XHJcbnJhbmRvbUJ5dGVzLmxvY2sgPSBmdW5jdGlvbiAoKSB7IGxvY2tlZCA9IHRydWU7IH07XHJcbnJhbmRvbUJ5dGVzLnJlZ2lzdGVyID0gZnVuY3Rpb24gKGZ1bmMpIHtcclxuICAgIGlmIChsb2NrZWQpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJyYW5kb21CeXRlcyBpcyBsb2NrZWRcIik7XHJcbiAgICB9XHJcbiAgICBfX3JhbmRvbUJ5dGVzID0gZnVuYztcclxufTtcclxuT2JqZWN0LmZyZWV6ZShyYW5kb21CeXRlcyk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJhbmRvbS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/random.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/ripemd160.js":
/*!*********************************************************!*\
  !*** ./node_modules/ethers/lib.esm/crypto/ripemd160.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ripemd160: () => (/* binding */ ripemd160)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_ripemd160__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/ripemd160 */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/ripemd160.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n\r\n\r\nlet locked = false;\r\nconst _ripemd160 = function (data) {\r\n    return (0,_noble_hashes_ripemd160__WEBPACK_IMPORTED_MODULE_0__.ripemd160)(data);\r\n};\r\nlet __ripemd160 = _ripemd160;\r\n/**\r\n *  Compute the cryptographic RIPEMD-160 hash of %%data%%.\r\n *\r\n *  @_docloc: api/crypto:Hash Functions\r\n *  @returns DataHexstring\r\n *\r\n *  @example:\r\n *    ripemd160(\"0x\")\r\n *    //_result:\r\n *\r\n *    ripemd160(\"0x1337\")\r\n *    //_result:\r\n *\r\n *    ripemd160(new Uint8Array([ 0x13, 0x37 ]))\r\n *    //_result:\r\n *\r\n */\r\nfunction ripemd160(_data) {\r\n    const data = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBytes)(_data, \"data\");\r\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.hexlify)(__ripemd160(data));\r\n}\r\nripemd160._ = _ripemd160;\r\nripemd160.lock = function () { locked = true; };\r\nripemd160.register = function (func) {\r\n    if (locked) {\r\n        throw new TypeError(\"ripemd160 is locked\");\r\n    }\r\n    __ripemd160 = func;\r\n};\r\nObject.freeze(ripemd160);\r\n//# sourceMappingURL=ripemd160.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9jcnlwdG8vcmlwZW1kMTYwLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF1RTtBQUNqQjtBQUN0RDtBQUNBO0FBQ0EsV0FBVyxrRUFBZTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsaUJBQWlCLHlEQUFRO0FBQ3pCLFdBQVcsd0RBQU87QUFDbEI7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJEOlxcRG9fYW4yXFxsZW5kaHViX3YyXFxsZW5kaHViLWZyb250ZW5kLW5leHRqc1xcbm9kZV9tb2R1bGVzXFxldGhlcnNcXGxpYi5lc21cXGNyeXB0b1xccmlwZW1kMTYwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJpcGVtZDE2MCBhcyBub2JsZV9yaXBlbWQxNjAgfSBmcm9tIFwiQG5vYmxlL2hhc2hlcy9yaXBlbWQxNjBcIjtcclxuaW1wb3J0IHsgZ2V0Qnl0ZXMsIGhleGxpZnkgfSBmcm9tIFwiLi4vdXRpbHMvaW5kZXguanNcIjtcclxubGV0IGxvY2tlZCA9IGZhbHNlO1xyXG5jb25zdCBfcmlwZW1kMTYwID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgIHJldHVybiBub2JsZV9yaXBlbWQxNjAoZGF0YSk7XHJcbn07XHJcbmxldCBfX3JpcGVtZDE2MCA9IF9yaXBlbWQxNjA7XHJcbi8qKlxyXG4gKiAgQ29tcHV0ZSB0aGUgY3J5cHRvZ3JhcGhpYyBSSVBFTUQtMTYwIGhhc2ggb2YgJSVkYXRhJSUuXHJcbiAqXHJcbiAqICBAX2RvY2xvYzogYXBpL2NyeXB0bzpIYXNoIEZ1bmN0aW9uc1xyXG4gKiAgQHJldHVybnMgRGF0YUhleHN0cmluZ1xyXG4gKlxyXG4gKiAgQGV4YW1wbGU6XHJcbiAqICAgIHJpcGVtZDE2MChcIjB4XCIpXHJcbiAqICAgIC8vX3Jlc3VsdDpcclxuICpcclxuICogICAgcmlwZW1kMTYwKFwiMHgxMzM3XCIpXHJcbiAqICAgIC8vX3Jlc3VsdDpcclxuICpcclxuICogICAgcmlwZW1kMTYwKG5ldyBVaW50OEFycmF5KFsgMHgxMywgMHgzNyBdKSlcclxuICogICAgLy9fcmVzdWx0OlxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJpcGVtZDE2MChfZGF0YSkge1xyXG4gICAgY29uc3QgZGF0YSA9IGdldEJ5dGVzKF9kYXRhLCBcImRhdGFcIik7XHJcbiAgICByZXR1cm4gaGV4bGlmeShfX3JpcGVtZDE2MChkYXRhKSk7XHJcbn1cclxucmlwZW1kMTYwLl8gPSBfcmlwZW1kMTYwO1xyXG5yaXBlbWQxNjAubG9jayA9IGZ1bmN0aW9uICgpIHsgbG9ja2VkID0gdHJ1ZTsgfTtcclxucmlwZW1kMTYwLnJlZ2lzdGVyID0gZnVuY3Rpb24gKGZ1bmMpIHtcclxuICAgIGlmIChsb2NrZWQpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwicmlwZW1kMTYwIGlzIGxvY2tlZFwiKTtcclxuICAgIH1cclxuICAgIF9fcmlwZW1kMTYwID0gZnVuYztcclxufTtcclxuT2JqZWN0LmZyZWV6ZShyaXBlbWQxNjApO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yaXBlbWQxNjAuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/ripemd160.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/scrypt.js":
/*!******************************************************!*\
  !*** ./node_modules/ethers/lib.esm/crypto/scrypt.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   scrypt: () => (/* binding */ scrypt),\n/* harmony export */   scryptSync: () => (/* binding */ scryptSync)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_scrypt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/scrypt */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/scrypt.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n\r\n\r\nlet lockedSync = false, lockedAsync = false;\r\nconst _scryptAsync = async function (passwd, salt, N, r, p, dkLen, onProgress) {\r\n    return await (0,_noble_hashes_scrypt__WEBPACK_IMPORTED_MODULE_0__.scryptAsync)(passwd, salt, { N, r, p, dkLen, onProgress });\r\n};\r\nconst _scryptSync = function (passwd, salt, N, r, p, dkLen) {\r\n    return (0,_noble_hashes_scrypt__WEBPACK_IMPORTED_MODULE_0__.scrypt)(passwd, salt, { N, r, p, dkLen });\r\n};\r\nlet __scryptAsync = _scryptAsync;\r\nlet __scryptSync = _scryptSync;\r\n/**\r\n *  The [[link-wiki-scrypt]] uses a memory and cpu hard method of\r\n *  derivation to increase the resource cost to brute-force a password\r\n *  for a given key.\r\n *\r\n *  This means this algorithm is intentionally slow, and can be tuned to\r\n *  become slower. As computation and memory speed improve over time,\r\n *  increasing the difficulty maintains the cost of an attacker.\r\n *\r\n *  For example, if a target time of 5 seconds is used, a legitimate user\r\n *  which knows their password requires only 5 seconds to unlock their\r\n *  account. A 6 character password has 68 billion possibilities, which\r\n *  would require an attacker to invest over 10,000 years of CPU time. This\r\n *  is of course a crude example (as password generally aren't random),\r\n *  but demonstrates to value of imposing large costs to decryption.\r\n *\r\n *  For this reason, if building a UI which involved decrypting or\r\n *  encrypting datsa using scrypt, it is recommended to use a\r\n *  [[ProgressCallback]] (as event short periods can seem lik an eternity\r\n *  if the UI freezes). Including the phrase //\"decrypting\"// in the UI\r\n *  can also help, assuring the user their waiting is for a good reason.\r\n *\r\n *  @_docloc: api/crypto:Passwords\r\n *\r\n *  @example:\r\n *    // The password must be converted to bytes, and it is generally\r\n *    // best practices to ensure the string has been normalized. Many\r\n *    // formats explicitly indicate the normalization form to use.\r\n *    password = \"hello\"\r\n *    passwordBytes = toUtf8Bytes(password, \"NFKC\")\r\n *\r\n *    salt = id(\"some-salt\")\r\n *\r\n *    // Compute the scrypt\r\n *    scrypt(passwordBytes, salt, 1024, 8, 1, 16)\r\n *    //_result:\r\n */\r\nasync function scrypt(_passwd, _salt, N, r, p, dkLen, progress) {\r\n    const passwd = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBytes)(_passwd, \"passwd\");\r\n    const salt = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBytes)(_salt, \"salt\");\r\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.hexlify)(await __scryptAsync(passwd, salt, N, r, p, dkLen, progress));\r\n}\r\nscrypt._ = _scryptAsync;\r\nscrypt.lock = function () { lockedAsync = true; };\r\nscrypt.register = function (func) {\r\n    if (lockedAsync) {\r\n        throw new Error(\"scrypt is locked\");\r\n    }\r\n    __scryptAsync = func;\r\n};\r\nObject.freeze(scrypt);\r\n/**\r\n *  Provides a synchronous variant of [[scrypt]].\r\n *\r\n *  This will completely lock up and freeze the UI in a browser and will\r\n *  prevent any event loop from progressing. For this reason, it is\r\n *  preferred to use the [async variant](scrypt).\r\n *\r\n *  @_docloc: api/crypto:Passwords\r\n *\r\n *  @example:\r\n *    // The password must be converted to bytes, and it is generally\r\n *    // best practices to ensure the string has been normalized. Many\r\n *    // formats explicitly indicate the normalization form to use.\r\n *    password = \"hello\"\r\n *    passwordBytes = toUtf8Bytes(password, \"NFKC\")\r\n *\r\n *    salt = id(\"some-salt\")\r\n *\r\n *    // Compute the scrypt\r\n *    scryptSync(passwordBytes, salt, 1024, 8, 1, 16)\r\n *    //_result:\r\n */\r\nfunction scryptSync(_passwd, _salt, N, r, p, dkLen) {\r\n    const passwd = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBytes)(_passwd, \"passwd\");\r\n    const salt = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBytes)(_salt, \"salt\");\r\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.hexlify)(__scryptSync(passwd, salt, N, r, p, dkLen));\r\n}\r\nscryptSync._ = _scryptSync;\r\nscryptSync.lock = function () { lockedSync = true; };\r\nscryptSync.register = function (func) {\r\n    if (lockedSync) {\r\n        throw new Error(\"scryptSync is locked\");\r\n    }\r\n    __scryptSync = func;\r\n};\r\nObject.freeze(scryptSync);\r\n//# sourceMappingURL=scrypt.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9jcnlwdG8vc2NyeXB0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBd0Y7QUFDN0I7QUFDM0Q7QUFDQTtBQUNBLGlCQUFpQixpRUFBVyxpQkFBaUIsNEJBQTRCO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDREQUFVLGlCQUFpQixnQkFBZ0I7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLG1CQUFtQix5REFBUTtBQUMzQixpQkFBaUIseURBQVE7QUFDekIsV0FBVyx3REFBQztBQUNaO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsbUJBQW1CLHlEQUFRO0FBQzNCLGlCQUFpQix5REFBUTtBQUN6QixXQUFXLHdEQUFDO0FBQ1o7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJEOlxcRG9fYW4yXFxsZW5kaHViX3YyXFxsZW5kaHViLWZyb250ZW5kLW5leHRqc1xcbm9kZV9tb2R1bGVzXFxldGhlcnNcXGxpYi5lc21cXGNyeXB0b1xcc2NyeXB0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNjcnlwdCBhcyBfbm9ibGVTeW5jLCBzY3J5cHRBc3luYyBhcyBfbm9ibGVBc3luYyB9IGZyb20gXCJAbm9ibGUvaGFzaGVzL3NjcnlwdFwiO1xyXG5pbXBvcnQgeyBnZXRCeXRlcywgaGV4bGlmeSBhcyBIIH0gZnJvbSBcIi4uL3V0aWxzL2luZGV4LmpzXCI7XHJcbmxldCBsb2NrZWRTeW5jID0gZmFsc2UsIGxvY2tlZEFzeW5jID0gZmFsc2U7XHJcbmNvbnN0IF9zY3J5cHRBc3luYyA9IGFzeW5jIGZ1bmN0aW9uIChwYXNzd2QsIHNhbHQsIE4sIHIsIHAsIGRrTGVuLCBvblByb2dyZXNzKSB7XHJcbiAgICByZXR1cm4gYXdhaXQgX25vYmxlQXN5bmMocGFzc3dkLCBzYWx0LCB7IE4sIHIsIHAsIGRrTGVuLCBvblByb2dyZXNzIH0pO1xyXG59O1xyXG5jb25zdCBfc2NyeXB0U3luYyA9IGZ1bmN0aW9uIChwYXNzd2QsIHNhbHQsIE4sIHIsIHAsIGRrTGVuKSB7XHJcbiAgICByZXR1cm4gX25vYmxlU3luYyhwYXNzd2QsIHNhbHQsIHsgTiwgciwgcCwgZGtMZW4gfSk7XHJcbn07XHJcbmxldCBfX3NjcnlwdEFzeW5jID0gX3NjcnlwdEFzeW5jO1xyXG5sZXQgX19zY3J5cHRTeW5jID0gX3NjcnlwdFN5bmM7XHJcbi8qKlxyXG4gKiAgVGhlIFtbbGluay13aWtpLXNjcnlwdF1dIHVzZXMgYSBtZW1vcnkgYW5kIGNwdSBoYXJkIG1ldGhvZCBvZlxyXG4gKiAgZGVyaXZhdGlvbiB0byBpbmNyZWFzZSB0aGUgcmVzb3VyY2UgY29zdCB0byBicnV0ZS1mb3JjZSBhIHBhc3N3b3JkXHJcbiAqICBmb3IgYSBnaXZlbiBrZXkuXHJcbiAqXHJcbiAqICBUaGlzIG1lYW5zIHRoaXMgYWxnb3JpdGhtIGlzIGludGVudGlvbmFsbHkgc2xvdywgYW5kIGNhbiBiZSB0dW5lZCB0b1xyXG4gKiAgYmVjb21lIHNsb3dlci4gQXMgY29tcHV0YXRpb24gYW5kIG1lbW9yeSBzcGVlZCBpbXByb3ZlIG92ZXIgdGltZSxcclxuICogIGluY3JlYXNpbmcgdGhlIGRpZmZpY3VsdHkgbWFpbnRhaW5zIHRoZSBjb3N0IG9mIGFuIGF0dGFja2VyLlxyXG4gKlxyXG4gKiAgRm9yIGV4YW1wbGUsIGlmIGEgdGFyZ2V0IHRpbWUgb2YgNSBzZWNvbmRzIGlzIHVzZWQsIGEgbGVnaXRpbWF0ZSB1c2VyXHJcbiAqICB3aGljaCBrbm93cyB0aGVpciBwYXNzd29yZCByZXF1aXJlcyBvbmx5IDUgc2Vjb25kcyB0byB1bmxvY2sgdGhlaXJcclxuICogIGFjY291bnQuIEEgNiBjaGFyYWN0ZXIgcGFzc3dvcmQgaGFzIDY4IGJpbGxpb24gcG9zc2liaWxpdGllcywgd2hpY2hcclxuICogIHdvdWxkIHJlcXVpcmUgYW4gYXR0YWNrZXIgdG8gaW52ZXN0IG92ZXIgMTAsMDAwIHllYXJzIG9mIENQVSB0aW1lLiBUaGlzXHJcbiAqICBpcyBvZiBjb3Vyc2UgYSBjcnVkZSBleGFtcGxlIChhcyBwYXNzd29yZCBnZW5lcmFsbHkgYXJlbid0IHJhbmRvbSksXHJcbiAqICBidXQgZGVtb25zdHJhdGVzIHRvIHZhbHVlIG9mIGltcG9zaW5nIGxhcmdlIGNvc3RzIHRvIGRlY3J5cHRpb24uXHJcbiAqXHJcbiAqICBGb3IgdGhpcyByZWFzb24sIGlmIGJ1aWxkaW5nIGEgVUkgd2hpY2ggaW52b2x2ZWQgZGVjcnlwdGluZyBvclxyXG4gKiAgZW5jcnlwdGluZyBkYXRzYSB1c2luZyBzY3J5cHQsIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSBhXHJcbiAqICBbW1Byb2dyZXNzQ2FsbGJhY2tdXSAoYXMgZXZlbnQgc2hvcnQgcGVyaW9kcyBjYW4gc2VlbSBsaWsgYW4gZXRlcm5pdHlcclxuICogIGlmIHRoZSBVSSBmcmVlemVzKS4gSW5jbHVkaW5nIHRoZSBwaHJhc2UgLy9cImRlY3J5cHRpbmdcIi8vIGluIHRoZSBVSVxyXG4gKiAgY2FuIGFsc28gaGVscCwgYXNzdXJpbmcgdGhlIHVzZXIgdGhlaXIgd2FpdGluZyBpcyBmb3IgYSBnb29kIHJlYXNvbi5cclxuICpcclxuICogIEBfZG9jbG9jOiBhcGkvY3J5cHRvOlBhc3N3b3Jkc1xyXG4gKlxyXG4gKiAgQGV4YW1wbGU6XHJcbiAqICAgIC8vIFRoZSBwYXNzd29yZCBtdXN0IGJlIGNvbnZlcnRlZCB0byBieXRlcywgYW5kIGl0IGlzIGdlbmVyYWxseVxyXG4gKiAgICAvLyBiZXN0IHByYWN0aWNlcyB0byBlbnN1cmUgdGhlIHN0cmluZyBoYXMgYmVlbiBub3JtYWxpemVkLiBNYW55XHJcbiAqICAgIC8vIGZvcm1hdHMgZXhwbGljaXRseSBpbmRpY2F0ZSB0aGUgbm9ybWFsaXphdGlvbiBmb3JtIHRvIHVzZS5cclxuICogICAgcGFzc3dvcmQgPSBcImhlbGxvXCJcclxuICogICAgcGFzc3dvcmRCeXRlcyA9IHRvVXRmOEJ5dGVzKHBhc3N3b3JkLCBcIk5GS0NcIilcclxuICpcclxuICogICAgc2FsdCA9IGlkKFwic29tZS1zYWx0XCIpXHJcbiAqXHJcbiAqICAgIC8vIENvbXB1dGUgdGhlIHNjcnlwdFxyXG4gKiAgICBzY3J5cHQocGFzc3dvcmRCeXRlcywgc2FsdCwgMTAyNCwgOCwgMSwgMTYpXHJcbiAqICAgIC8vX3Jlc3VsdDpcclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzY3J5cHQoX3Bhc3N3ZCwgX3NhbHQsIE4sIHIsIHAsIGRrTGVuLCBwcm9ncmVzcykge1xyXG4gICAgY29uc3QgcGFzc3dkID0gZ2V0Qnl0ZXMoX3Bhc3N3ZCwgXCJwYXNzd2RcIik7XHJcbiAgICBjb25zdCBzYWx0ID0gZ2V0Qnl0ZXMoX3NhbHQsIFwic2FsdFwiKTtcclxuICAgIHJldHVybiBIKGF3YWl0IF9fc2NyeXB0QXN5bmMocGFzc3dkLCBzYWx0LCBOLCByLCBwLCBka0xlbiwgcHJvZ3Jlc3MpKTtcclxufVxyXG5zY3J5cHQuXyA9IF9zY3J5cHRBc3luYztcclxuc2NyeXB0LmxvY2sgPSBmdW5jdGlvbiAoKSB7IGxvY2tlZEFzeW5jID0gdHJ1ZTsgfTtcclxuc2NyeXB0LnJlZ2lzdGVyID0gZnVuY3Rpb24gKGZ1bmMpIHtcclxuICAgIGlmIChsb2NrZWRBc3luYykge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcInNjcnlwdCBpcyBsb2NrZWRcIik7XHJcbiAgICB9XHJcbiAgICBfX3NjcnlwdEFzeW5jID0gZnVuYztcclxufTtcclxuT2JqZWN0LmZyZWV6ZShzY3J5cHQpO1xyXG4vKipcclxuICogIFByb3ZpZGVzIGEgc3luY2hyb25vdXMgdmFyaWFudCBvZiBbW3NjcnlwdF1dLlxyXG4gKlxyXG4gKiAgVGhpcyB3aWxsIGNvbXBsZXRlbHkgbG9jayB1cCBhbmQgZnJlZXplIHRoZSBVSSBpbiBhIGJyb3dzZXIgYW5kIHdpbGxcclxuICogIHByZXZlbnQgYW55IGV2ZW50IGxvb3AgZnJvbSBwcm9ncmVzc2luZy4gRm9yIHRoaXMgcmVhc29uLCBpdCBpc1xyXG4gKiAgcHJlZmVycmVkIHRvIHVzZSB0aGUgW2FzeW5jIHZhcmlhbnRdKHNjcnlwdCkuXHJcbiAqXHJcbiAqICBAX2RvY2xvYzogYXBpL2NyeXB0bzpQYXNzd29yZHNcclxuICpcclxuICogIEBleGFtcGxlOlxyXG4gKiAgICAvLyBUaGUgcGFzc3dvcmQgbXVzdCBiZSBjb252ZXJ0ZWQgdG8gYnl0ZXMsIGFuZCBpdCBpcyBnZW5lcmFsbHlcclxuICogICAgLy8gYmVzdCBwcmFjdGljZXMgdG8gZW5zdXJlIHRoZSBzdHJpbmcgaGFzIGJlZW4gbm9ybWFsaXplZC4gTWFueVxyXG4gKiAgICAvLyBmb3JtYXRzIGV4cGxpY2l0bHkgaW5kaWNhdGUgdGhlIG5vcm1hbGl6YXRpb24gZm9ybSB0byB1c2UuXHJcbiAqICAgIHBhc3N3b3JkID0gXCJoZWxsb1wiXHJcbiAqICAgIHBhc3N3b3JkQnl0ZXMgPSB0b1V0ZjhCeXRlcyhwYXNzd29yZCwgXCJORktDXCIpXHJcbiAqXHJcbiAqICAgIHNhbHQgPSBpZChcInNvbWUtc2FsdFwiKVxyXG4gKlxyXG4gKiAgICAvLyBDb21wdXRlIHRoZSBzY3J5cHRcclxuICogICAgc2NyeXB0U3luYyhwYXNzd29yZEJ5dGVzLCBzYWx0LCAxMDI0LCA4LCAxLCAxNilcclxuICogICAgLy9fcmVzdWx0OlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNjcnlwdFN5bmMoX3Bhc3N3ZCwgX3NhbHQsIE4sIHIsIHAsIGRrTGVuKSB7XHJcbiAgICBjb25zdCBwYXNzd2QgPSBnZXRCeXRlcyhfcGFzc3dkLCBcInBhc3N3ZFwiKTtcclxuICAgIGNvbnN0IHNhbHQgPSBnZXRCeXRlcyhfc2FsdCwgXCJzYWx0XCIpO1xyXG4gICAgcmV0dXJuIEgoX19zY3J5cHRTeW5jKHBhc3N3ZCwgc2FsdCwgTiwgciwgcCwgZGtMZW4pKTtcclxufVxyXG5zY3J5cHRTeW5jLl8gPSBfc2NyeXB0U3luYztcclxuc2NyeXB0U3luYy5sb2NrID0gZnVuY3Rpb24gKCkgeyBsb2NrZWRTeW5jID0gdHJ1ZTsgfTtcclxuc2NyeXB0U3luYy5yZWdpc3RlciA9IGZ1bmN0aW9uIChmdW5jKSB7XHJcbiAgICBpZiAobG9ja2VkU3luYykge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcInNjcnlwdFN5bmMgaXMgbG9ja2VkXCIpO1xyXG4gICAgfVxyXG4gICAgX19zY3J5cHRTeW5jID0gZnVuYztcclxufTtcclxuT2JqZWN0LmZyZWV6ZShzY3J5cHRTeW5jKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NyeXB0LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/scrypt.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/sha2.js":
/*!****************************************************!*\
  !*** ./node_modules/ethers/lib.esm/crypto/sha2.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sha256: () => (/* binding */ sha256),\n/* harmony export */   sha512: () => (/* binding */ sha512)\n/* harmony export */ });\n/* harmony import */ var _crypto_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./crypto.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/crypto-browser.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n\r\n\r\nconst _sha256 = function (data) {\r\n    return (0,_crypto_js__WEBPACK_IMPORTED_MODULE_0__.createHash)(\"sha256\").update(data).digest();\r\n};\r\nconst _sha512 = function (data) {\r\n    return (0,_crypto_js__WEBPACK_IMPORTED_MODULE_0__.createHash)(\"sha512\").update(data).digest();\r\n};\r\nlet __sha256 = _sha256;\r\nlet __sha512 = _sha512;\r\nlet locked256 = false, locked512 = false;\r\n/**\r\n *  Compute the cryptographic SHA2-256 hash of %%data%%.\r\n *\r\n *  @_docloc: api/crypto:Hash Functions\r\n *  @returns DataHexstring\r\n *\r\n *  @example:\r\n *    sha256(\"0x\")\r\n *    //_result:\r\n *\r\n *    sha256(\"0x1337\")\r\n *    //_result:\r\n *\r\n *    sha256(new Uint8Array([ 0x13, 0x37 ]))\r\n *    //_result:\r\n *\r\n */\r\nfunction sha256(_data) {\r\n    const data = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBytes)(_data, \"data\");\r\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.hexlify)(__sha256(data));\r\n}\r\nsha256._ = _sha256;\r\nsha256.lock = function () { locked256 = true; };\r\nsha256.register = function (func) {\r\n    if (locked256) {\r\n        throw new Error(\"sha256 is locked\");\r\n    }\r\n    __sha256 = func;\r\n};\r\nObject.freeze(sha256);\r\n/**\r\n *  Compute the cryptographic SHA2-512 hash of %%data%%.\r\n *\r\n *  @_docloc: api/crypto:Hash Functions\r\n *  @returns DataHexstring\r\n *\r\n *  @example:\r\n *    sha512(\"0x\")\r\n *    //_result:\r\n *\r\n *    sha512(\"0x1337\")\r\n *    //_result:\r\n *\r\n *    sha512(new Uint8Array([ 0x13, 0x37 ]))\r\n *    //_result:\r\n */\r\nfunction sha512(_data) {\r\n    const data = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBytes)(_data, \"data\");\r\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.hexlify)(__sha512(data));\r\n}\r\nsha512._ = _sha512;\r\nsha512.lock = function () { locked512 = true; };\r\nsha512.register = function (func) {\r\n    if (locked512) {\r\n        throw new Error(\"sha512 is locked\");\r\n    }\r\n    __sha512 = func;\r\n};\r\nObject.freeze(sha256);\r\n//# sourceMappingURL=sha2.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9jcnlwdG8vc2hhMi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXlDO0FBQ2E7QUFDdEQ7QUFDQSxXQUFXLHNEQUFVO0FBQ3JCO0FBQ0E7QUFDQSxXQUFXLHNEQUFVO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsaUJBQWlCLHlEQUFRO0FBQ3pCLFdBQVcsd0RBQU87QUFDbEI7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxpQkFBaUIseURBQVE7QUFDekIsV0FBVyx3REFBTztBQUNsQjtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkQ6XFxEb19hbjJcXGxlbmRodWJfdjJcXGxlbmRodWItZnJvbnRlbmQtbmV4dGpzXFxub2RlX21vZHVsZXNcXGV0aGVyc1xcbGliLmVzbVxcY3J5cHRvXFxzaGEyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUhhc2ggfSBmcm9tIFwiLi9jcnlwdG8uanNcIjtcclxuaW1wb3J0IHsgZ2V0Qnl0ZXMsIGhleGxpZnkgfSBmcm9tIFwiLi4vdXRpbHMvaW5kZXguanNcIjtcclxuY29uc3QgX3NoYTI1NiA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICByZXR1cm4gY3JlYXRlSGFzaChcInNoYTI1NlwiKS51cGRhdGUoZGF0YSkuZGlnZXN0KCk7XHJcbn07XHJcbmNvbnN0IF9zaGE1MTIgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgcmV0dXJuIGNyZWF0ZUhhc2goXCJzaGE1MTJcIikudXBkYXRlKGRhdGEpLmRpZ2VzdCgpO1xyXG59O1xyXG5sZXQgX19zaGEyNTYgPSBfc2hhMjU2O1xyXG5sZXQgX19zaGE1MTIgPSBfc2hhNTEyO1xyXG5sZXQgbG9ja2VkMjU2ID0gZmFsc2UsIGxvY2tlZDUxMiA9IGZhbHNlO1xyXG4vKipcclxuICogIENvbXB1dGUgdGhlIGNyeXB0b2dyYXBoaWMgU0hBMi0yNTYgaGFzaCBvZiAlJWRhdGElJS5cclxuICpcclxuICogIEBfZG9jbG9jOiBhcGkvY3J5cHRvOkhhc2ggRnVuY3Rpb25zXHJcbiAqICBAcmV0dXJucyBEYXRhSGV4c3RyaW5nXHJcbiAqXHJcbiAqICBAZXhhbXBsZTpcclxuICogICAgc2hhMjU2KFwiMHhcIilcclxuICogICAgLy9fcmVzdWx0OlxyXG4gKlxyXG4gKiAgICBzaGEyNTYoXCIweDEzMzdcIilcclxuICogICAgLy9fcmVzdWx0OlxyXG4gKlxyXG4gKiAgICBzaGEyNTYobmV3IFVpbnQ4QXJyYXkoWyAweDEzLCAweDM3IF0pKVxyXG4gKiAgICAvL19yZXN1bHQ6XHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2hhMjU2KF9kYXRhKSB7XHJcbiAgICBjb25zdCBkYXRhID0gZ2V0Qnl0ZXMoX2RhdGEsIFwiZGF0YVwiKTtcclxuICAgIHJldHVybiBoZXhsaWZ5KF9fc2hhMjU2KGRhdGEpKTtcclxufVxyXG5zaGEyNTYuXyA9IF9zaGEyNTY7XHJcbnNoYTI1Ni5sb2NrID0gZnVuY3Rpb24gKCkgeyBsb2NrZWQyNTYgPSB0cnVlOyB9O1xyXG5zaGEyNTYucmVnaXN0ZXIgPSBmdW5jdGlvbiAoZnVuYykge1xyXG4gICAgaWYgKGxvY2tlZDI1Nikge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcInNoYTI1NiBpcyBsb2NrZWRcIik7XHJcbiAgICB9XHJcbiAgICBfX3NoYTI1NiA9IGZ1bmM7XHJcbn07XHJcbk9iamVjdC5mcmVlemUoc2hhMjU2KTtcclxuLyoqXHJcbiAqICBDb21wdXRlIHRoZSBjcnlwdG9ncmFwaGljIFNIQTItNTEyIGhhc2ggb2YgJSVkYXRhJSUuXHJcbiAqXHJcbiAqICBAX2RvY2xvYzogYXBpL2NyeXB0bzpIYXNoIEZ1bmN0aW9uc1xyXG4gKiAgQHJldHVybnMgRGF0YUhleHN0cmluZ1xyXG4gKlxyXG4gKiAgQGV4YW1wbGU6XHJcbiAqICAgIHNoYTUxMihcIjB4XCIpXHJcbiAqICAgIC8vX3Jlc3VsdDpcclxuICpcclxuICogICAgc2hhNTEyKFwiMHgxMzM3XCIpXHJcbiAqICAgIC8vX3Jlc3VsdDpcclxuICpcclxuICogICAgc2hhNTEyKG5ldyBVaW50OEFycmF5KFsgMHgxMywgMHgzNyBdKSlcclxuICogICAgLy9fcmVzdWx0OlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNoYTUxMihfZGF0YSkge1xyXG4gICAgY29uc3QgZGF0YSA9IGdldEJ5dGVzKF9kYXRhLCBcImRhdGFcIik7XHJcbiAgICByZXR1cm4gaGV4bGlmeShfX3NoYTUxMihkYXRhKSk7XHJcbn1cclxuc2hhNTEyLl8gPSBfc2hhNTEyO1xyXG5zaGE1MTIubG9jayA9IGZ1bmN0aW9uICgpIHsgbG9ja2VkNTEyID0gdHJ1ZTsgfTtcclxuc2hhNTEyLnJlZ2lzdGVyID0gZnVuY3Rpb24gKGZ1bmMpIHtcclxuICAgIGlmIChsb2NrZWQ1MTIpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJzaGE1MTIgaXMgbG9ja2VkXCIpO1xyXG4gICAgfVxyXG4gICAgX19zaGE1MTIgPSBmdW5jO1xyXG59O1xyXG5PYmplY3QuZnJlZXplKHNoYTI1Nik7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNoYTIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/sha2.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/signature.js":
/*!*********************************************************!*\
  !*** ./node_modules/ethers/lib.esm/crypto/signature.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Signature: () => (/* binding */ Signature)\n/* harmony export */ });\n/* harmony import */ var _constants_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/constants/index.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n\r\n\r\n// Constants\r\nconst BN_0 = BigInt(0);\r\nconst BN_1 = BigInt(1);\r\nconst BN_2 = BigInt(2);\r\nconst BN_27 = BigInt(27);\r\nconst BN_28 = BigInt(28);\r\nconst BN_35 = BigInt(35);\r\nconst _guard = {};\r\nfunction toUint256(value) {\r\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.zeroPadValue)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toBeArray)(value), 32);\r\n}\r\n/**\r\n *  A Signature  @TODO\r\n *\r\n *\r\n *  @_docloc: api/crypto:Signing\r\n */\r\nclass Signature {\r\n    #r;\r\n    #s;\r\n    #v;\r\n    #networkV;\r\n    /**\r\n     *  The ``r`` value for a signature.\r\n     *\r\n     *  This represents the ``x`` coordinate of a \"reference\" or\r\n     *  challenge point, from which the ``y`` can be computed.\r\n     */\r\n    get r() { return this.#r; }\r\n    set r(value) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.dataLength)(value) === 32, \"invalid r\", \"value\", value);\r\n        this.#r = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(value);\r\n    }\r\n    /**\r\n     *  The ``s`` value for a signature.\r\n     */\r\n    get s() {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(parseInt(this.#s.substring(0, 3)) < 8, \"non-canonical s; use ._s\", \"s\", this.#s);\r\n        return this.#s;\r\n    }\r\n    set s(_value) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.dataLength)(_value) === 32, \"invalid s\", \"value\", _value);\r\n        this.#s = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(_value);\r\n    }\r\n    /**\r\n     *  Return the s value, unchecked for EIP-2 compliance.\r\n     *\r\n     *  This should generally not be used and is for situations where\r\n     *  a non-canonical S value might be relevant, such as Frontier blocks\r\n     *  that were mined prior to EIP-2 or invalid Authorization List\r\n     *  signatures.\r\n     */\r\n    get _s() { return this.#s; }\r\n    /**\r\n     *  Returns true if the Signature is valid for [[link-eip-2]] signatures.\r\n     */\r\n    isValid() {\r\n        return (parseInt(this.#s.substring(0, 3)) < 8);\r\n    }\r\n    /**\r\n     *  The ``v`` value for a signature.\r\n     *\r\n     *  Since a given ``x`` value for ``r`` has two possible values for\r\n     *  its correspondin ``y``, the ``v`` indicates which of the two ``y``\r\n     *  values to use.\r\n     *\r\n     *  It is normalized to the values ``27`` or ``28`` for legacy\r\n     *  purposes.\r\n     */\r\n    get v() { return this.#v; }\r\n    set v(value) {\r\n        const v = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getNumber)(value, \"value\");\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(v === 27 || v === 28, \"invalid v\", \"v\", value);\r\n        this.#v = v;\r\n    }\r\n    /**\r\n     *  The EIP-155 ``v`` for legacy transactions. For non-legacy\r\n     *  transactions, this value is ``null``.\r\n     */\r\n    get networkV() { return this.#networkV; }\r\n    /**\r\n     *  The chain ID for EIP-155 legacy transactions. For non-legacy\r\n     *  transactions, this value is ``null``.\r\n     */\r\n    get legacyChainId() {\r\n        const v = this.networkV;\r\n        if (v == null) {\r\n            return null;\r\n        }\r\n        return Signature.getChainId(v);\r\n    }\r\n    /**\r\n     *  The ``yParity`` for the signature.\r\n     *\r\n     *  See ``v`` for more details on how this value is used.\r\n     */\r\n    get yParity() {\r\n        return (this.v === 27) ? 0 : 1;\r\n    }\r\n    /**\r\n     *  The [[link-eip-2098]] compact representation of the ``yParity``\r\n     *  and ``s`` compacted into a single ``bytes32``.\r\n     */\r\n    get yParityAndS() {\r\n        // The EIP-2098 compact representation\r\n        const yParityAndS = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(this.s);\r\n        if (this.yParity) {\r\n            yParityAndS[0] |= 0x80;\r\n        }\r\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(yParityAndS);\r\n    }\r\n    /**\r\n     *  The [[link-eip-2098]] compact representation.\r\n     */\r\n    get compactSerialized() {\r\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.concat)([this.r, this.yParityAndS]);\r\n    }\r\n    /**\r\n     *  The serialized representation.\r\n     */\r\n    get serialized() {\r\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.concat)([this.r, this.s, (this.yParity ? \"0x1c\" : \"0x1b\")]);\r\n    }\r\n    /**\r\n     *  @private\r\n     */\r\n    constructor(guard, r, s, v) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertPrivate)(guard, _guard, \"Signature\");\r\n        this.#r = r;\r\n        this.#s = s;\r\n        this.#v = v;\r\n        this.#networkV = null;\r\n    }\r\n    [Symbol.for('nodejs.util.inspect.custom')]() {\r\n        return `Signature { r: \"${this.r}\", s: \"${this._s}\"${this.isValid() ? \"\" : ', valid: \"false\"'}, yParity: ${this.yParity}, networkV: ${this.networkV} }`;\r\n    }\r\n    /**\r\n     *  Returns a new identical [[Signature]].\r\n     */\r\n    clone() {\r\n        const clone = new Signature(_guard, this.r, this._s, this.v);\r\n        if (this.networkV) {\r\n            clone.#networkV = this.networkV;\r\n        }\r\n        return clone;\r\n    }\r\n    /**\r\n     *  Returns a representation that is compatible with ``JSON.stringify``.\r\n     */\r\n    toJSON() {\r\n        const networkV = this.networkV;\r\n        return {\r\n            _type: \"signature\",\r\n            networkV: ((networkV != null) ? networkV.toString() : null),\r\n            r: this.r, s: this._s, v: this.v,\r\n        };\r\n    }\r\n    /**\r\n     *  Compute the chain ID from the ``v`` in a legacy EIP-155 transactions.\r\n     *\r\n     *  @example:\r\n     *    Signature.getChainId(45)\r\n     *    //_result:\r\n     *\r\n     *    Signature.getChainId(46)\r\n     *    //_result:\r\n     */\r\n    static getChainId(v) {\r\n        const bv = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt)(v, \"v\");\r\n        // The v is not an EIP-155 v, so it is the unspecified chain ID\r\n        if ((bv == BN_27) || (bv == BN_28)) {\r\n            return BN_0;\r\n        }\r\n        // Bad value for an EIP-155 v\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(bv >= BN_35, \"invalid EIP-155 v\", \"v\", v);\r\n        return (bv - BN_35) / BN_2;\r\n    }\r\n    /**\r\n     *  Compute the ``v`` for a chain ID for a legacy EIP-155 transactions.\r\n     *\r\n     *  Legacy transactions which use [[link-eip-155]] hijack the ``v``\r\n     *  property to include the chain ID.\r\n     *\r\n     *  @example:\r\n     *    Signature.getChainIdV(5, 27)\r\n     *    //_result:\r\n     *\r\n     *    Signature.getChainIdV(5, 28)\r\n     *    //_result:\r\n     *\r\n     */\r\n    static getChainIdV(chainId, v) {\r\n        return ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt)(chainId) * BN_2) + BigInt(35 + v - 27);\r\n    }\r\n    /**\r\n     *  Compute the normalized legacy transaction ``v`` from a ``yParirty``,\r\n     *  a legacy transaction ``v`` or a legacy [[link-eip-155]] transaction.\r\n     *\r\n     *  @example:\r\n     *    // The values 0 and 1 imply v is actually yParity\r\n     *    Signature.getNormalizedV(0)\r\n     *    //_result:\r\n     *\r\n     *    // Legacy non-EIP-1559 transaction (i.e. 27 or 28)\r\n     *    Signature.getNormalizedV(27)\r\n     *    //_result:\r\n     *\r\n     *    // Legacy EIP-155 transaction (i.e. >= 35)\r\n     *    Signature.getNormalizedV(46)\r\n     *    //_result:\r\n     *\r\n     *    // Invalid values throw\r\n     *    Signature.getNormalizedV(5)\r\n     *    //_error:\r\n     */\r\n    static getNormalizedV(v) {\r\n        const bv = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt)(v);\r\n        if (bv === BN_0 || bv === BN_27) {\r\n            return 27;\r\n        }\r\n        if (bv === BN_1 || bv === BN_28) {\r\n            return 28;\r\n        }\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(bv >= BN_35, \"invalid v\", \"v\", v);\r\n        // Otherwise, EIP-155 v means odd is 27 and even is 28\r\n        return (bv & BN_1) ? 27 : 28;\r\n    }\r\n    /**\r\n     *  Creates a new [[Signature]].\r\n     *\r\n     *  If no %%sig%% is provided, a new [[Signature]] is created\r\n     *  with default values.\r\n     *\r\n     *  If %%sig%% is a string, it is parsed.\r\n     */\r\n    static from(sig) {\r\n        function assertError(check, message) {\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(check, message, \"signature\", sig);\r\n        }\r\n        ;\r\n        if (sig == null) {\r\n            return new Signature(_guard, _constants_index_js__WEBPACK_IMPORTED_MODULE_1__.ZeroHash, _constants_index_js__WEBPACK_IMPORTED_MODULE_1__.ZeroHash, 27);\r\n        }\r\n        if (typeof (sig) === \"string\") {\r\n            const bytes = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(sig, \"signature\");\r\n            if (bytes.length === 64) {\r\n                const r = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(bytes.slice(0, 32));\r\n                const s = bytes.slice(32, 64);\r\n                const v = (s[0] & 0x80) ? 28 : 27;\r\n                s[0] &= 0x7f;\r\n                return new Signature(_guard, r, (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(s), v);\r\n            }\r\n            if (bytes.length === 65) {\r\n                const r = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(bytes.slice(0, 32));\r\n                const s = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(bytes.slice(32, 64));\r\n                const v = Signature.getNormalizedV(bytes[64]);\r\n                return new Signature(_guard, r, s, v);\r\n            }\r\n            assertError(false, \"invalid raw signature length\");\r\n        }\r\n        if (sig instanceof Signature) {\r\n            return sig.clone();\r\n        }\r\n        // Get r\r\n        const _r = sig.r;\r\n        assertError(_r != null, \"missing r\");\r\n        const r = toUint256(_r);\r\n        // Get s; by any means necessary (we check consistency below)\r\n        const s = (function (s, yParityAndS) {\r\n            if (s != null) {\r\n                return toUint256(s);\r\n            }\r\n            if (yParityAndS != null) {\r\n                assertError((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isHexString)(yParityAndS, 32), \"invalid yParityAndS\");\r\n                const bytes = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(yParityAndS);\r\n                bytes[0] &= 0x7f;\r\n                return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(bytes);\r\n            }\r\n            assertError(false, \"missing s\");\r\n        })(sig.s, sig.yParityAndS);\r\n        // Get v; by any means necessary (we check consistency below)\r\n        const { networkV, v } = (function (_v, yParityAndS, yParity) {\r\n            if (_v != null) {\r\n                const v = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt)(_v);\r\n                return {\r\n                    networkV: ((v >= BN_35) ? v : undefined),\r\n                    v: Signature.getNormalizedV(v)\r\n                };\r\n            }\r\n            if (yParityAndS != null) {\r\n                assertError((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isHexString)(yParityAndS, 32), \"invalid yParityAndS\");\r\n                return { v: (((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(yParityAndS)[0] & 0x80) ? 28 : 27) };\r\n            }\r\n            if (yParity != null) {\r\n                switch ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getNumber)(yParity, \"sig.yParity\")) {\r\n                    case 0: return { v: 27 };\r\n                    case 1: return { v: 28 };\r\n                }\r\n                assertError(false, \"invalid yParity\");\r\n            }\r\n            assertError(false, \"missing v\");\r\n        })(sig.v, sig.yParityAndS, sig.yParity);\r\n        const result = new Signature(_guard, r, s, v);\r\n        if (networkV) {\r\n            result.#networkV = networkV;\r\n        }\r\n        // If multiple of v, yParity, yParityAndS we given, check they match\r\n        assertError(sig.yParity == null || (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getNumber)(sig.yParity, \"sig.yParity\") === result.yParity, \"yParity mismatch\");\r\n        assertError(sig.yParityAndS == null || sig.yParityAndS === result.yParityAndS, \"yParityAndS mismatch\");\r\n        return result;\r\n    }\r\n}\r\n//# sourceMappingURL=signature.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/signature.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/signing-key.js":
/*!***********************************************************!*\
  !*** ./node_modules/ethers/lib.esm/crypto/signing-key.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SigningKey: () => (/* binding */ SigningKey)\n/* harmony export */ });\n/* harmony import */ var _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/curves/secp256k1 */ \"(pages-dir-browser)/./node_modules/@noble/curves/esm/secp256k1.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/* harmony import */ var _signature_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./signature.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/signature.js\");\n/**\r\n *  Add details about signing here.\r\n *\r\n *  @_subsection: api/crypto:Signing  [about-signing]\r\n */\r\n\r\n\r\n\r\n/**\r\n *  A **SigningKey** provides high-level access to the elliptic curve\r\n *  cryptography (ECC) operations and key management.\r\n */\r\nclass SigningKey {\r\n    #privateKey;\r\n    /**\r\n     *  Creates a new **SigningKey** for %%privateKey%%.\r\n     */\r\n    constructor(privateKey) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.dataLength)(privateKey) === 32, \"invalid private key\", \"privateKey\", \"[REDACTED]\");\r\n        this.#privateKey = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(privateKey);\r\n    }\r\n    /**\r\n     *  The private key.\r\n     */\r\n    get privateKey() { return this.#privateKey; }\r\n    /**\r\n     *  The uncompressed public key.\r\n     *\r\n     * This will always begin with the prefix ``0x04`` and be 132\r\n     * characters long (the ``0x`` prefix and 130 hexadecimal nibbles).\r\n     */\r\n    get publicKey() { return SigningKey.computePublicKey(this.#privateKey); }\r\n    /**\r\n     *  The compressed public key.\r\n     *\r\n     *  This will always begin with either the prefix ``0x02`` or ``0x03``\r\n     *  and be 68 characters long (the ``0x`` prefix and 33 hexadecimal\r\n     *  nibbles)\r\n     */\r\n    get compressedPublicKey() { return SigningKey.computePublicKey(this.#privateKey, true); }\r\n    /**\r\n     *  Return the signature of the signed %%digest%%.\r\n     */\r\n    sign(digest) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.dataLength)(digest) === 32, \"invalid digest length\", \"digest\", digest);\r\n        const sig = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_1__.secp256k1.sign((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytesCopy)(digest), (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytesCopy)(this.#privateKey), {\r\n            lowS: true\r\n        });\r\n        return _signature_js__WEBPACK_IMPORTED_MODULE_2__.Signature.from({\r\n            r: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toBeHex)(sig.r, 32),\r\n            s: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toBeHex)(sig.s, 32),\r\n            v: (sig.recovery ? 0x1c : 0x1b)\r\n        });\r\n    }\r\n    /**\r\n     *  Returns the [[link-wiki-ecdh]] shared secret between this\r\n     *  private key and the %%other%% key.\r\n     *\r\n     *  The %%other%% key may be any type of key, a raw public key,\r\n     *  a compressed/uncompressed pubic key or aprivate key.\r\n     *\r\n     *  Best practice is usually to use a cryptographic hash on the\r\n     *  returned value before using it as a symetric secret.\r\n     *\r\n     *  @example:\r\n     *    sign1 = new SigningKey(id(\"some-secret-1\"))\r\n     *    sign2 = new SigningKey(id(\"some-secret-2\"))\r\n     *\r\n     *    // Notice that privA.computeSharedSecret(pubB)...\r\n     *    sign1.computeSharedSecret(sign2.publicKey)\r\n     *    //_result:\r\n     *\r\n     *    // ...is equal to privB.computeSharedSecret(pubA).\r\n     *    sign2.computeSharedSecret(sign1.publicKey)\r\n     *    //_result:\r\n     */\r\n    computeSharedSecret(other) {\r\n        const pubKey = SigningKey.computePublicKey(other);\r\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(_noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_1__.secp256k1.getSharedSecret((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytesCopy)(this.#privateKey), (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(pubKey), false));\r\n    }\r\n    /**\r\n     *  Compute the public key for %%key%%, optionally %%compressed%%.\r\n     *\r\n     *  The %%key%% may be any type of key, a raw public key, a\r\n     *  compressed/uncompressed public key or private key.\r\n     *\r\n     *  @example:\r\n     *    sign = new SigningKey(id(\"some-secret\"));\r\n     *\r\n     *    // Compute the uncompressed public key for a private key\r\n     *    SigningKey.computePublicKey(sign.privateKey)\r\n     *    //_result:\r\n     *\r\n     *    // Compute the compressed public key for a private key\r\n     *    SigningKey.computePublicKey(sign.privateKey, true)\r\n     *    //_result:\r\n     *\r\n     *    // Compute the uncompressed public key\r\n     *    SigningKey.computePublicKey(sign.publicKey, false);\r\n     *    //_result:\r\n     *\r\n     *    // Compute the Compressed a public key\r\n     *    SigningKey.computePublicKey(sign.publicKey, true);\r\n     *    //_result:\r\n     */\r\n    static computePublicKey(key, compressed) {\r\n        let bytes = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(key, \"key\");\r\n        // private key\r\n        if (bytes.length === 32) {\r\n            const pubKey = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_1__.secp256k1.getPublicKey(bytes, !!compressed);\r\n            return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(pubKey);\r\n        }\r\n        // raw public key; use uncompressed key with 0x04 prefix\r\n        if (bytes.length === 64) {\r\n            const pub = new Uint8Array(65);\r\n            pub[0] = 0x04;\r\n            pub.set(bytes, 1);\r\n            bytes = pub;\r\n        }\r\n        const point = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_1__.secp256k1.ProjectivePoint.fromHex(bytes);\r\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(point.toRawBytes(compressed));\r\n    }\r\n    /**\r\n     *  Returns the public key for the private key which produced the\r\n     *  %%signature%% for the given %%digest%%.\r\n     *\r\n     *  @example:\r\n     *    key = new SigningKey(id(\"some-secret\"))\r\n     *    digest = id(\"hello world\")\r\n     *    sig = key.sign(digest)\r\n     *\r\n     *    // Notice the signer public key...\r\n     *    key.publicKey\r\n     *    //_result:\r\n     *\r\n     *    // ...is equal to the recovered public key\r\n     *    SigningKey.recoverPublicKey(digest, sig)\r\n     *    //_result:\r\n     *\r\n     */\r\n    static recoverPublicKey(digest, signature) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.dataLength)(digest) === 32, \"invalid digest length\", \"digest\", digest);\r\n        const sig = _signature_js__WEBPACK_IMPORTED_MODULE_2__.Signature.from(signature);\r\n        let secpSig = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_1__.secp256k1.Signature.fromCompact((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytesCopy)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.concat)([sig.r, sig.s])));\r\n        secpSig = secpSig.addRecoveryBit(sig.yParity);\r\n        const pubKey = secpSig.recoverPublicKey((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytesCopy)(digest));\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(pubKey != null, \"invalid signature for digest\", \"signature\", signature);\r\n        return \"0x\" + pubKey.toHex(false);\r\n    }\r\n    /**\r\n     *  Returns the point resulting from adding the ellipic curve points\r\n     *  %%p0%% and %%p1%%.\r\n     *\r\n     *  This is not a common function most developers should require, but\r\n     *  can be useful for certain privacy-specific techniques.\r\n     *\r\n     *  For example, it is used by [[HDNodeWallet]] to compute child\r\n     *  addresses from parent public keys and chain codes.\r\n     */\r\n    static addPoints(p0, p1, compressed) {\r\n        const pub0 = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_1__.secp256k1.ProjectivePoint.fromHex(SigningKey.computePublicKey(p0).substring(2));\r\n        const pub1 = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_1__.secp256k1.ProjectivePoint.fromHex(SigningKey.computePublicKey(p1).substring(2));\r\n        return \"0x\" + pub0.add(pub1).toHex(!!compressed);\r\n    }\r\n}\r\n//# sourceMappingURL=signing-key.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/signing-key.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/ethers.js":
/*!***********************************************!*\
  !*** ./node_modules/ethers/lib.esm/ethers.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbiCoder: () => (/* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_1__.AbiCoder),\n/* harmony export */   AbstractProvider: () => (/* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_7__.AbstractProvider),\n/* harmony export */   AbstractSigner: () => (/* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_7__.AbstractSigner),\n/* harmony export */   AlchemyProvider: () => (/* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_7__.AlchemyProvider),\n/* harmony export */   AnkrProvider: () => (/* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_7__.AnkrProvider),\n/* harmony export */   BaseContract: () => (/* reexport safe */ _contract_index_js__WEBPACK_IMPORTED_MODULE_4__.BaseContract),\n/* harmony export */   BaseWallet: () => (/* reexport safe */ _wallet_index_js__WEBPACK_IMPORTED_MODULE_10__.BaseWallet),\n/* harmony export */   Block: () => (/* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_7__.Block),\n/* harmony export */   BlockscoutProvider: () => (/* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_7__.BlockscoutProvider),\n/* harmony export */   BrowserProvider: () => (/* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_7__.BrowserProvider),\n/* harmony export */   ChainstackProvider: () => (/* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_7__.ChainstackProvider),\n/* harmony export */   CloudflareProvider: () => (/* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_7__.CloudflareProvider),\n/* harmony export */   ConstructorFragment: () => (/* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_1__.ConstructorFragment),\n/* harmony export */   Contract: () => (/* reexport safe */ _contract_index_js__WEBPACK_IMPORTED_MODULE_4__.Contract),\n/* harmony export */   ContractEventPayload: () => (/* reexport safe */ _contract_index_js__WEBPACK_IMPORTED_MODULE_4__.ContractEventPayload),\n/* harmony export */   ContractFactory: () => (/* reexport safe */ _contract_index_js__WEBPACK_IMPORTED_MODULE_4__.ContractFactory),\n/* harmony export */   ContractTransactionReceipt: () => (/* reexport safe */ _contract_index_js__WEBPACK_IMPORTED_MODULE_4__.ContractTransactionReceipt),\n/* harmony export */   ContractTransactionResponse: () => (/* reexport safe */ _contract_index_js__WEBPACK_IMPORTED_MODULE_4__.ContractTransactionResponse),\n/* harmony export */   ContractUnknownEventPayload: () => (/* reexport safe */ _contract_index_js__WEBPACK_IMPORTED_MODULE_4__.ContractUnknownEventPayload),\n/* harmony export */   EnsPlugin: () => (/* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_7__.EnsPlugin),\n/* harmony export */   EnsResolver: () => (/* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_7__.EnsResolver),\n/* harmony export */   ErrorDescription: () => (/* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_1__.ErrorDescription),\n/* harmony export */   ErrorFragment: () => (/* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_1__.ErrorFragment),\n/* harmony export */   EtherSymbol: () => (/* reexport safe */ _constants_index_js__WEBPACK_IMPORTED_MODULE_3__.EtherSymbol),\n/* harmony export */   EtherscanPlugin: () => (/* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_7__.EtherscanPlugin),\n/* harmony export */   EtherscanProvider: () => (/* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_7__.EtherscanProvider),\n/* harmony export */   EventFragment: () => (/* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_1__.EventFragment),\n/* harmony export */   EventLog: () => (/* reexport safe */ _contract_index_js__WEBPACK_IMPORTED_MODULE_4__.EventLog),\n/* harmony export */   EventPayload: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.EventPayload),\n/* harmony export */   FallbackFragment: () => (/* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_1__.FallbackFragment),\n/* harmony export */   FallbackProvider: () => (/* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_7__.FallbackProvider),\n/* harmony export */   FeeData: () => (/* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_7__.FeeData),\n/* harmony export */   FeeDataNetworkPlugin: () => (/* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_7__.FeeDataNetworkPlugin),\n/* harmony export */   FetchCancelSignal: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.FetchCancelSignal),\n/* harmony export */   FetchRequest: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.FetchRequest),\n/* harmony export */   FetchResponse: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.FetchResponse),\n/* harmony export */   FetchUrlFeeDataNetworkPlugin: () => (/* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_7__.FetchUrlFeeDataNetworkPlugin),\n/* harmony export */   FixedNumber: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.FixedNumber),\n/* harmony export */   Fragment: () => (/* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_1__.Fragment),\n/* harmony export */   FunctionFragment: () => (/* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_1__.FunctionFragment),\n/* harmony export */   GasCostPlugin: () => (/* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_7__.GasCostPlugin),\n/* harmony export */   HDNodeVoidWallet: () => (/* reexport safe */ _wallet_index_js__WEBPACK_IMPORTED_MODULE_10__.HDNodeVoidWallet),\n/* harmony export */   HDNodeWallet: () => (/* reexport safe */ _wallet_index_js__WEBPACK_IMPORTED_MODULE_10__.HDNodeWallet),\n/* harmony export */   Indexed: () => (/* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_1__.Indexed),\n/* harmony export */   InfuraProvider: () => (/* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_7__.InfuraProvider),\n/* harmony export */   InfuraWebSocketProvider: () => (/* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_7__.InfuraWebSocketProvider),\n/* harmony export */   Interface: () => (/* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_1__.Interface),\n/* harmony export */   IpcSocketProvider: () => (/* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_7__.IpcSocketProvider),\n/* harmony export */   JsonRpcApiProvider: () => (/* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_7__.JsonRpcApiProvider),\n/* harmony export */   JsonRpcProvider: () => (/* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_7__.JsonRpcProvider),\n/* harmony export */   JsonRpcSigner: () => (/* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_7__.JsonRpcSigner),\n/* harmony export */   LangEn: () => (/* reexport safe */ _wordlists_index_js__WEBPACK_IMPORTED_MODULE_11__.LangEn),\n/* harmony export */   Log: () => (/* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_7__.Log),\n/* harmony export */   LogDescription: () => (/* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_1__.LogDescription),\n/* harmony export */   MaxInt256: () => (/* reexport safe */ _constants_index_js__WEBPACK_IMPORTED_MODULE_3__.MaxInt256),\n/* harmony export */   MaxUint256: () => (/* reexport safe */ _constants_index_js__WEBPACK_IMPORTED_MODULE_3__.MaxUint256),\n/* harmony export */   MessagePrefix: () => (/* reexport safe */ _constants_index_js__WEBPACK_IMPORTED_MODULE_3__.MessagePrefix),\n/* harmony export */   MinInt256: () => (/* reexport safe */ _constants_index_js__WEBPACK_IMPORTED_MODULE_3__.MinInt256),\n/* harmony export */   Mnemonic: () => (/* reexport safe */ _wallet_index_js__WEBPACK_IMPORTED_MODULE_10__.Mnemonic),\n/* harmony export */   MulticoinProviderPlugin: () => (/* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_7__.MulticoinProviderPlugin),\n/* harmony export */   N: () => (/* reexport safe */ _constants_index_js__WEBPACK_IMPORTED_MODULE_3__.N),\n/* harmony export */   NamedFragment: () => (/* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedFragment),\n/* harmony export */   Network: () => (/* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_7__.Network),\n/* harmony export */   NetworkPlugin: () => (/* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_7__.NetworkPlugin),\n/* harmony export */   NonceManager: () => (/* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_7__.NonceManager),\n/* harmony export */   ParamType: () => (/* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_1__.ParamType),\n/* harmony export */   PocketProvider: () => (/* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_7__.PocketProvider),\n/* harmony export */   QuickNodeProvider: () => (/* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_7__.QuickNodeProvider),\n/* harmony export */   Result: () => (/* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_1__.Result),\n/* harmony export */   Signature: () => (/* reexport safe */ _crypto_index_js__WEBPACK_IMPORTED_MODULE_5__.Signature),\n/* harmony export */   SigningKey: () => (/* reexport safe */ _crypto_index_js__WEBPACK_IMPORTED_MODULE_5__.SigningKey),\n/* harmony export */   SocketBlockSubscriber: () => (/* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_7__.SocketBlockSubscriber),\n/* harmony export */   SocketEventSubscriber: () => (/* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_7__.SocketEventSubscriber),\n/* harmony export */   SocketPendingSubscriber: () => (/* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_7__.SocketPendingSubscriber),\n/* harmony export */   SocketProvider: () => (/* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_7__.SocketProvider),\n/* harmony export */   SocketSubscriber: () => (/* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_7__.SocketSubscriber),\n/* harmony export */   StructFragment: () => (/* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_1__.StructFragment),\n/* harmony export */   Transaction: () => (/* reexport safe */ _transaction_index_js__WEBPACK_IMPORTED_MODULE_8__.Transaction),\n/* harmony export */   TransactionDescription: () => (/* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_1__.TransactionDescription),\n/* harmony export */   TransactionReceipt: () => (/* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_7__.TransactionReceipt),\n/* harmony export */   TransactionResponse: () => (/* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_7__.TransactionResponse),\n/* harmony export */   Typed: () => (/* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_1__.Typed),\n/* harmony export */   TypedDataEncoder: () => (/* reexport safe */ _hash_index_js__WEBPACK_IMPORTED_MODULE_6__.TypedDataEncoder),\n/* harmony export */   UndecodedEventLog: () => (/* reexport safe */ _contract_index_js__WEBPACK_IMPORTED_MODULE_4__.UndecodedEventLog),\n/* harmony export */   UnmanagedSubscriber: () => (/* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_7__.UnmanagedSubscriber),\n/* harmony export */   Utf8ErrorFuncs: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.Utf8ErrorFuncs),\n/* harmony export */   VoidSigner: () => (/* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_7__.VoidSigner),\n/* harmony export */   Wallet: () => (/* reexport safe */ _wallet_index_js__WEBPACK_IMPORTED_MODULE_10__.Wallet),\n/* harmony export */   WebSocketProvider: () => (/* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_7__.WebSocketProvider),\n/* harmony export */   WeiPerEther: () => (/* reexport safe */ _constants_index_js__WEBPACK_IMPORTED_MODULE_3__.WeiPerEther),\n/* harmony export */   Wordlist: () => (/* reexport safe */ _wordlists_index_js__WEBPACK_IMPORTED_MODULE_11__.Wordlist),\n/* harmony export */   WordlistOwl: () => (/* reexport safe */ _wordlists_index_js__WEBPACK_IMPORTED_MODULE_11__.WordlistOwl),\n/* harmony export */   WordlistOwlA: () => (/* reexport safe */ _wordlists_index_js__WEBPACK_IMPORTED_MODULE_11__.WordlistOwlA),\n/* harmony export */   ZeroAddress: () => (/* reexport safe */ _constants_index_js__WEBPACK_IMPORTED_MODULE_3__.ZeroAddress),\n/* harmony export */   ZeroHash: () => (/* reexport safe */ _constants_index_js__WEBPACK_IMPORTED_MODULE_3__.ZeroHash),\n/* harmony export */   accessListify: () => (/* reexport safe */ _transaction_index_js__WEBPACK_IMPORTED_MODULE_8__.accessListify),\n/* harmony export */   assert: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.assert),\n/* harmony export */   assertArgument: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.assertArgument),\n/* harmony export */   assertArgumentCount: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.assertArgumentCount),\n/* harmony export */   assertNormalize: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.assertNormalize),\n/* harmony export */   assertPrivate: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.assertPrivate),\n/* harmony export */   authorizationify: () => (/* reexport safe */ _transaction_index_js__WEBPACK_IMPORTED_MODULE_8__.authorizationify),\n/* harmony export */   checkResultErrors: () => (/* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_1__.checkResultErrors),\n/* harmony export */   computeAddress: () => (/* reexport safe */ _transaction_index_js__WEBPACK_IMPORTED_MODULE_8__.computeAddress),\n/* harmony export */   computeHmac: () => (/* reexport safe */ _crypto_index_js__WEBPACK_IMPORTED_MODULE_5__.computeHmac),\n/* harmony export */   concat: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.concat),\n/* harmony export */   copyRequest: () => (/* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_7__.copyRequest),\n/* harmony export */   dataLength: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.dataLength),\n/* harmony export */   dataSlice: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.dataSlice),\n/* harmony export */   decodeBase58: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.decodeBase58),\n/* harmony export */   decodeBase64: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.decodeBase64),\n/* harmony export */   decodeBytes32String: () => (/* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_1__.decodeBytes32String),\n/* harmony export */   decodeRlp: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.decodeRlp),\n/* harmony export */   decryptCrowdsaleJson: () => (/* reexport safe */ _wallet_index_js__WEBPACK_IMPORTED_MODULE_10__.decryptCrowdsaleJson),\n/* harmony export */   decryptKeystoreJson: () => (/* reexport safe */ _wallet_index_js__WEBPACK_IMPORTED_MODULE_10__.decryptKeystoreJson),\n/* harmony export */   decryptKeystoreJsonSync: () => (/* reexport safe */ _wallet_index_js__WEBPACK_IMPORTED_MODULE_10__.decryptKeystoreJsonSync),\n/* harmony export */   defaultPath: () => (/* reexport safe */ _wallet_index_js__WEBPACK_IMPORTED_MODULE_10__.defaultPath),\n/* harmony export */   defineProperties: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.defineProperties),\n/* harmony export */   dnsEncode: () => (/* reexport safe */ _hash_index_js__WEBPACK_IMPORTED_MODULE_6__.dnsEncode),\n/* harmony export */   encodeBase58: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.encodeBase58),\n/* harmony export */   encodeBase64: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.encodeBase64),\n/* harmony export */   encodeBytes32String: () => (/* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_1__.encodeBytes32String),\n/* harmony export */   encodeRlp: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.encodeRlp),\n/* harmony export */   encryptKeystoreJson: () => (/* reexport safe */ _wallet_index_js__WEBPACK_IMPORTED_MODULE_10__.encryptKeystoreJson),\n/* harmony export */   encryptKeystoreJsonSync: () => (/* reexport safe */ _wallet_index_js__WEBPACK_IMPORTED_MODULE_10__.encryptKeystoreJsonSync),\n/* harmony export */   ensNormalize: () => (/* reexport safe */ _hash_index_js__WEBPACK_IMPORTED_MODULE_6__.ensNormalize),\n/* harmony export */   formatEther: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.formatEther),\n/* harmony export */   formatUnits: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.formatUnits),\n/* harmony export */   fromTwos: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.fromTwos),\n/* harmony export */   getAccountPath: () => (/* reexport safe */ _wallet_index_js__WEBPACK_IMPORTED_MODULE_10__.getAccountPath),\n/* harmony export */   getAddress: () => (/* reexport safe */ _address_index_js__WEBPACK_IMPORTED_MODULE_2__.getAddress),\n/* harmony export */   getBigInt: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.getBigInt),\n/* harmony export */   getBytes: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.getBytes),\n/* harmony export */   getBytesCopy: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.getBytesCopy),\n/* harmony export */   getCreate2Address: () => (/* reexport safe */ _address_index_js__WEBPACK_IMPORTED_MODULE_2__.getCreate2Address),\n/* harmony export */   getCreateAddress: () => (/* reexport safe */ _address_index_js__WEBPACK_IMPORTED_MODULE_2__.getCreateAddress),\n/* harmony export */   getDefaultProvider: () => (/* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_7__.getDefaultProvider),\n/* harmony export */   getIcapAddress: () => (/* reexport safe */ _address_index_js__WEBPACK_IMPORTED_MODULE_2__.getIcapAddress),\n/* harmony export */   getIndexedAccountPath: () => (/* reexport safe */ _wallet_index_js__WEBPACK_IMPORTED_MODULE_10__.getIndexedAccountPath),\n/* harmony export */   getNumber: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.getNumber),\n/* harmony export */   getUint: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.getUint),\n/* harmony export */   hashAuthorization: () => (/* reexport safe */ _hash_index_js__WEBPACK_IMPORTED_MODULE_6__.hashAuthorization),\n/* harmony export */   hashMessage: () => (/* reexport safe */ _hash_index_js__WEBPACK_IMPORTED_MODULE_6__.hashMessage),\n/* harmony export */   hexlify: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.hexlify),\n/* harmony export */   id: () => (/* reexport safe */ _hash_index_js__WEBPACK_IMPORTED_MODULE_6__.id),\n/* harmony export */   isAddress: () => (/* reexport safe */ _address_index_js__WEBPACK_IMPORTED_MODULE_2__.isAddress),\n/* harmony export */   isAddressable: () => (/* reexport safe */ _address_index_js__WEBPACK_IMPORTED_MODULE_2__.isAddressable),\n/* harmony export */   isBytesLike: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.isBytesLike),\n/* harmony export */   isCallException: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.isCallException),\n/* harmony export */   isCrowdsaleJson: () => (/* reexport safe */ _wallet_index_js__WEBPACK_IMPORTED_MODULE_10__.isCrowdsaleJson),\n/* harmony export */   isError: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.isError),\n/* harmony export */   isHexString: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.isHexString),\n/* harmony export */   isKeystoreJson: () => (/* reexport safe */ _wallet_index_js__WEBPACK_IMPORTED_MODULE_10__.isKeystoreJson),\n/* harmony export */   isValidName: () => (/* reexport safe */ _hash_index_js__WEBPACK_IMPORTED_MODULE_6__.isValidName),\n/* harmony export */   keccak256: () => (/* reexport safe */ _crypto_index_js__WEBPACK_IMPORTED_MODULE_5__.keccak256),\n/* harmony export */   lock: () => (/* reexport safe */ _crypto_index_js__WEBPACK_IMPORTED_MODULE_5__.lock),\n/* harmony export */   makeError: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.makeError),\n/* harmony export */   mask: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.mask),\n/* harmony export */   namehash: () => (/* reexport safe */ _hash_index_js__WEBPACK_IMPORTED_MODULE_6__.namehash),\n/* harmony export */   parseEther: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.parseEther),\n/* harmony export */   parseUnits: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.parseUnits),\n/* harmony export */   pbkdf2: () => (/* reexport safe */ _crypto_index_js__WEBPACK_IMPORTED_MODULE_5__.pbkdf2),\n/* harmony export */   randomBytes: () => (/* reexport safe */ _crypto_index_js__WEBPACK_IMPORTED_MODULE_5__.randomBytes),\n/* harmony export */   recoverAddress: () => (/* reexport safe */ _transaction_index_js__WEBPACK_IMPORTED_MODULE_8__.recoverAddress),\n/* harmony export */   resolveAddress: () => (/* reexport safe */ _address_index_js__WEBPACK_IMPORTED_MODULE_2__.resolveAddress),\n/* harmony export */   resolveProperties: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.resolveProperties),\n/* harmony export */   ripemd160: () => (/* reexport safe */ _crypto_index_js__WEBPACK_IMPORTED_MODULE_5__.ripemd160),\n/* harmony export */   scrypt: () => (/* reexport safe */ _crypto_index_js__WEBPACK_IMPORTED_MODULE_5__.scrypt),\n/* harmony export */   scryptSync: () => (/* reexport safe */ _crypto_index_js__WEBPACK_IMPORTED_MODULE_5__.scryptSync),\n/* harmony export */   sha256: () => (/* reexport safe */ _crypto_index_js__WEBPACK_IMPORTED_MODULE_5__.sha256),\n/* harmony export */   sha512: () => (/* reexport safe */ _crypto_index_js__WEBPACK_IMPORTED_MODULE_5__.sha512),\n/* harmony export */   showThrottleMessage: () => (/* reexport safe */ _providers_index_js__WEBPACK_IMPORTED_MODULE_7__.showThrottleMessage),\n/* harmony export */   solidityPacked: () => (/* reexport safe */ _hash_index_js__WEBPACK_IMPORTED_MODULE_6__.solidityPacked),\n/* harmony export */   solidityPackedKeccak256: () => (/* reexport safe */ _hash_index_js__WEBPACK_IMPORTED_MODULE_6__.solidityPackedKeccak256),\n/* harmony export */   solidityPackedSha256: () => (/* reexport safe */ _hash_index_js__WEBPACK_IMPORTED_MODULE_6__.solidityPackedSha256),\n/* harmony export */   stripZerosLeft: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.stripZerosLeft),\n/* harmony export */   toBeArray: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.toBeArray),\n/* harmony export */   toBeHex: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.toBeHex),\n/* harmony export */   toBigInt: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.toBigInt),\n/* harmony export */   toNumber: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.toNumber),\n/* harmony export */   toQuantity: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.toQuantity),\n/* harmony export */   toTwos: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.toTwos),\n/* harmony export */   toUtf8Bytes: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.toUtf8Bytes),\n/* harmony export */   toUtf8CodePoints: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.toUtf8CodePoints),\n/* harmony export */   toUtf8String: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.toUtf8String),\n/* harmony export */   uuidV4: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.uuidV4),\n/* harmony export */   verifyAuthorization: () => (/* reexport safe */ _hash_index_js__WEBPACK_IMPORTED_MODULE_6__.verifyAuthorization),\n/* harmony export */   verifyMessage: () => (/* reexport safe */ _hash_index_js__WEBPACK_IMPORTED_MODULE_6__.verifyMessage),\n/* harmony export */   verifyTypedData: () => (/* reexport safe */ _hash_index_js__WEBPACK_IMPORTED_MODULE_6__.verifyTypedData),\n/* harmony export */   version: () => (/* reexport safe */ _version_js__WEBPACK_IMPORTED_MODULE_0__.version),\n/* harmony export */   wordlists: () => (/* reexport safe */ _wordlists_index_js__WEBPACK_IMPORTED_MODULE_11__.wordlists),\n/* harmony export */   zeroPadBytes: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.zeroPadBytes),\n/* harmony export */   zeroPadValue: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_9__.zeroPadValue)\n/* harmony export */ });\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_version.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/_version.js\");\n/* harmony import */ var _abi_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./abi/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/index.js\");\n/* harmony import */ var _address_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./address/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/address/index.js\");\n/* harmony import */ var _constants_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/constants/index.js\");\n/* harmony import */ var _contract_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./contract/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/contract/index.js\");\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./crypto/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/index.js\");\n/* harmony import */ var _hash_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./hash/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/hash/index.js\");\n/* harmony import */ var _providers_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./providers/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/index.js\");\n/* harmony import */ var _transaction_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./transaction/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/transaction/index.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/* harmony import */ var _wallet_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./wallet/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/wallet/index.js\");\n/* harmony import */ var _wordlists_index_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./wordlists/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/wordlists/index.js\");\n/////////////////////////////\r\n//\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// dummy change; to pick-up ws security issue changes\r\n//# sourceMappingURL=ethers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9ldGhlcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDd0M7QUFDd1M7QUFDak07QUFDSjtBQUM0RTtBQUMzRDtBQUMrRjtBQUM2aUI7QUFDbHJCO0FBQ3FrQjtBQUNsWjtBQUMzTTtBQUM5RixpQkFBaUI7QUFDakIiLCJzb3VyY2VzIjpbIkQ6XFxEb19hbjJcXGxlbmRodWJfdjJcXGxlbmRodWItZnJvbnRlbmQtbmV4dGpzXFxub2RlX21vZHVsZXNcXGV0aGVyc1xcbGliLmVzbVxcZXRoZXJzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbi8vXHJcbmV4cG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi9fdmVyc2lvbi5qc1wiO1xyXG5leHBvcnQgeyBkZWNvZGVCeXRlczMyU3RyaW5nLCBlbmNvZGVCeXRlczMyU3RyaW5nLCBBYmlDb2RlciwgQ29uc3RydWN0b3JGcmFnbWVudCwgRXJyb3JGcmFnbWVudCwgRXZlbnRGcmFnbWVudCwgRnJhZ21lbnQsIEZhbGxiYWNrRnJhZ21lbnQsIEZ1bmN0aW9uRnJhZ21lbnQsIE5hbWVkRnJhZ21lbnQsIFBhcmFtVHlwZSwgU3RydWN0RnJhZ21lbnQsIGNoZWNrUmVzdWx0RXJyb3JzLCBFcnJvckRlc2NyaXB0aW9uLCBJbmRleGVkLCBJbnRlcmZhY2UsIExvZ0Rlc2NyaXB0aW9uLCBSZXN1bHQsIFRyYW5zYWN0aW9uRGVzY3JpcHRpb24sIFR5cGVkLCB9IGZyb20gXCIuL2FiaS9pbmRleC5qc1wiO1xyXG5leHBvcnQgeyBnZXRBZGRyZXNzLCBnZXRJY2FwQWRkcmVzcywgZ2V0Q3JlYXRlQWRkcmVzcywgZ2V0Q3JlYXRlMkFkZHJlc3MsIGlzQWRkcmVzc2FibGUsIGlzQWRkcmVzcywgcmVzb2x2ZUFkZHJlc3MgfSBmcm9tIFwiLi9hZGRyZXNzL2luZGV4LmpzXCI7XHJcbmV4cG9ydCB7IFplcm9BZGRyZXNzLCBXZWlQZXJFdGhlciwgTWF4VWludDI1NiwgTWluSW50MjU2LCBNYXhJbnQyNTYsIE4sIFplcm9IYXNoLCBFdGhlclN5bWJvbCwgTWVzc2FnZVByZWZpeCB9IGZyb20gXCIuL2NvbnN0YW50cy9pbmRleC5qc1wiO1xyXG5leHBvcnQgeyBCYXNlQ29udHJhY3QsIENvbnRyYWN0LCBDb250cmFjdEZhY3RvcnksIENvbnRyYWN0RXZlbnRQYXlsb2FkLCBDb250cmFjdFRyYW5zYWN0aW9uUmVjZWlwdCwgQ29udHJhY3RUcmFuc2FjdGlvblJlc3BvbnNlLCBDb250cmFjdFVua25vd25FdmVudFBheWxvYWQsIEV2ZW50TG9nLCBVbmRlY29kZWRFdmVudExvZyB9IGZyb20gXCIuL2NvbnRyYWN0L2luZGV4LmpzXCI7XHJcbmV4cG9ydCB7IGNvbXB1dGVIbWFjLCByYW5kb21CeXRlcywga2VjY2FrMjU2LCByaXBlbWQxNjAsIHNoYTI1Niwgc2hhNTEyLCBwYmtkZjIsIHNjcnlwdCwgc2NyeXB0U3luYywgbG9jaywgU2lnbmF0dXJlLCBTaWduaW5nS2V5IH0gZnJvbSBcIi4vY3J5cHRvL2luZGV4LmpzXCI7XHJcbmV4cG9ydCB7IGlkLCBlbnNOb3JtYWxpemUsIGlzVmFsaWROYW1lLCBuYW1laGFzaCwgZG5zRW5jb2RlLCBoYXNoQXV0aG9yaXphdGlvbiwgdmVyaWZ5QXV0aG9yaXphdGlvbiwgaGFzaE1lc3NhZ2UsIHZlcmlmeU1lc3NhZ2UsIHNvbGlkaXR5UGFja2VkLCBzb2xpZGl0eVBhY2tlZEtlY2NhazI1Niwgc29saWRpdHlQYWNrZWRTaGEyNTYsIFR5cGVkRGF0YUVuY29kZXIsIHZlcmlmeVR5cGVkRGF0YSB9IGZyb20gXCIuL2hhc2gvaW5kZXguanNcIjtcclxuZXhwb3J0IHsgZ2V0RGVmYXVsdFByb3ZpZGVyLCBCbG9jaywgRmVlRGF0YSwgTG9nLCBUcmFuc2FjdGlvblJlY2VpcHQsIFRyYW5zYWN0aW9uUmVzcG9uc2UsIEFic3RyYWN0U2lnbmVyLCBOb25jZU1hbmFnZXIsIFZvaWRTaWduZXIsIEFic3RyYWN0UHJvdmlkZXIsIEZhbGxiYWNrUHJvdmlkZXIsIEpzb25ScGNBcGlQcm92aWRlciwgSnNvblJwY1Byb3ZpZGVyLCBKc29uUnBjU2lnbmVyLCBCcm93c2VyUHJvdmlkZXIsIEFsY2hlbXlQcm92aWRlciwgQW5rclByb3ZpZGVyLCBCbG9ja3Njb3V0UHJvdmlkZXIsIENoYWluc3RhY2tQcm92aWRlciwgQ2xvdWRmbGFyZVByb3ZpZGVyLCBFdGhlcnNjYW5Qcm92aWRlciwgSW5mdXJhUHJvdmlkZXIsIEluZnVyYVdlYlNvY2tldFByb3ZpZGVyLCBQb2NrZXRQcm92aWRlciwgUXVpY2tOb2RlUHJvdmlkZXIsIElwY1NvY2tldFByb3ZpZGVyLCBTb2NrZXRQcm92aWRlciwgV2ViU29ja2V0UHJvdmlkZXIsIEVuc1Jlc29sdmVyLCBOZXR3b3JrLCBFbnNQbHVnaW4sIEV0aGVyc2NhblBsdWdpbiwgRmVlRGF0YU5ldHdvcmtQbHVnaW4sIEZldGNoVXJsRmVlRGF0YU5ldHdvcmtQbHVnaW4sIEdhc0Nvc3RQbHVnaW4sIE5ldHdvcmtQbHVnaW4sIE11bHRpY29pblByb3ZpZGVyUGx1Z2luLCBTb2NrZXRCbG9ja1N1YnNjcmliZXIsIFNvY2tldEV2ZW50U3Vic2NyaWJlciwgU29ja2V0UGVuZGluZ1N1YnNjcmliZXIsIFNvY2tldFN1YnNjcmliZXIsIFVubWFuYWdlZFN1YnNjcmliZXIsIGNvcHlSZXF1ZXN0LCBzaG93VGhyb3R0bGVNZXNzYWdlIH0gZnJvbSBcIi4vcHJvdmlkZXJzL2luZGV4LmpzXCI7XHJcbmV4cG9ydCB7IGFjY2Vzc0xpc3RpZnksIGF1dGhvcml6YXRpb25pZnksIGNvbXB1dGVBZGRyZXNzLCByZWNvdmVyQWRkcmVzcywgVHJhbnNhY3Rpb24gfSBmcm9tIFwiLi90cmFuc2FjdGlvbi9pbmRleC5qc1wiO1xyXG5leHBvcnQgeyBkZWNvZGVCYXNlNTgsIGVuY29kZUJhc2U1OCwgZGVjb2RlQmFzZTY0LCBlbmNvZGVCYXNlNjQsIGNvbmNhdCwgZGF0YUxlbmd0aCwgZGF0YVNsaWNlLCBnZXRCeXRlcywgZ2V0Qnl0ZXNDb3B5LCBoZXhsaWZ5LCBpc0hleFN0cmluZywgaXNCeXRlc0xpa2UsIHN0cmlwWmVyb3NMZWZ0LCB6ZXJvUGFkQnl0ZXMsIHplcm9QYWRWYWx1ZSwgZGVmaW5lUHJvcGVydGllcywgcmVzb2x2ZVByb3BlcnRpZXMsIGFzc2VydCwgYXNzZXJ0QXJndW1lbnQsIGFzc2VydEFyZ3VtZW50Q291bnQsIGFzc2VydE5vcm1hbGl6ZSwgYXNzZXJ0UHJpdmF0ZSwgbWFrZUVycm9yLCBpc0NhbGxFeGNlcHRpb24sIGlzRXJyb3IsIEV2ZW50UGF5bG9hZCwgRmV0Y2hSZXF1ZXN0LCBGZXRjaFJlc3BvbnNlLCBGZXRjaENhbmNlbFNpZ25hbCwgRml4ZWROdW1iZXIsIGdldEJpZ0ludCwgZ2V0TnVtYmVyLCBnZXRVaW50LCB0b0JlQXJyYXksIHRvQmlnSW50LCB0b0JlSGV4LCB0b051bWJlciwgdG9RdWFudGl0eSwgZnJvbVR3b3MsIHRvVHdvcywgbWFzaywgZm9ybWF0RXRoZXIsIHBhcnNlRXRoZXIsIGZvcm1hdFVuaXRzLCBwYXJzZVVuaXRzLCB0b1V0ZjhCeXRlcywgdG9VdGY4Q29kZVBvaW50cywgdG9VdGY4U3RyaW5nLCBVdGY4RXJyb3JGdW5jcywgZGVjb2RlUmxwLCBlbmNvZGVSbHAsIHV1aWRWNCwgfSBmcm9tIFwiLi91dGlscy9pbmRleC5qc1wiO1xyXG5leHBvcnQgeyBNbmVtb25pYywgQmFzZVdhbGxldCwgSEROb2RlV2FsbGV0LCBIRE5vZGVWb2lkV2FsbGV0LCBXYWxsZXQsIGRlZmF1bHRQYXRoLCBnZXRBY2NvdW50UGF0aCwgZ2V0SW5kZXhlZEFjY291bnRQYXRoLCBpc0Nyb3dkc2FsZUpzb24sIGlzS2V5c3RvcmVKc29uLCBkZWNyeXB0Q3Jvd2RzYWxlSnNvbiwgZGVjcnlwdEtleXN0b3JlSnNvblN5bmMsIGRlY3J5cHRLZXlzdG9yZUpzb24sIGVuY3J5cHRLZXlzdG9yZUpzb24sIGVuY3J5cHRLZXlzdG9yZUpzb25TeW5jLCB9IGZyb20gXCIuL3dhbGxldC9pbmRleC5qc1wiO1xyXG5leHBvcnQgeyBXb3JkbGlzdCwgTGFuZ0VuLCBXb3JkbGlzdE93bCwgV29yZGxpc3RPd2xBLCB3b3JkbGlzdHMgfSBmcm9tIFwiLi93b3JkbGlzdHMvaW5kZXguanNcIjtcclxuLy8gZHVtbXkgY2hhbmdlOyB0byBwaWNrLXVwIHdzIHNlY3VyaXR5IGlzc3VlIGNoYW5nZXNcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXRoZXJzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/ethers.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/hash/authorization.js":
/*!***********************************************************!*\
  !*** ./node_modules/ethers/lib.esm/hash/authorization.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hashAuthorization: () => (/* binding */ hashAuthorization),\n/* harmony export */   verifyAuthorization: () => (/* binding */ verifyAuthorization)\n/* harmony export */ });\n/* harmony import */ var _address_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../address/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/address/index.js\");\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../crypto/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/index.js\");\n/* harmony import */ var _transaction_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../transaction/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/transaction/index.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n\r\n\r\n\r\n\r\n/**\r\n *  Computes the [[link-eip-7702]] authorization digest to sign.\r\n */\r\nfunction hashAuthorization(auth) {\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(typeof (auth.address) === \"string\", \"invalid address for hashAuthorization\", \"auth.address\", auth);\r\n    return (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.concat)([\r\n        \"0x05\", (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.encodeRlp)([\r\n            (auth.chainId != null) ? (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toBeArray)(auth.chainId) : \"0x\",\r\n            (0,_address_index_js__WEBPACK_IMPORTED_MODULE_2__.getAddress)(auth.address),\r\n            (auth.nonce != null) ? (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toBeArray)(auth.nonce) : \"0x\",\r\n        ])\r\n    ]));\r\n}\r\n/**\r\n *  Return the address of the private key that produced\r\n *  the signature %%sig%% during signing for %%message%%.\r\n */\r\nfunction verifyAuthorization(auth, sig) {\r\n    return (0,_transaction_index_js__WEBPACK_IMPORTED_MODULE_3__.recoverAddress)(hashAuthorization(auth), sig);\r\n}\r\n//# sourceMappingURL=authorization.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9oYXNoL2F1dGhvcml6YXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQWlEO0FBQ0Y7QUFDVTtBQUN3QjtBQUNqRjtBQUNBO0FBQ0E7QUFDTztBQUNQLElBQUksK0RBQWM7QUFDbEIsV0FBVywyREFBUyxDQUFDLHVEQUFNO0FBQzNCLGdCQUFnQiwwREFBUztBQUN6QixxQ0FBcUMsMERBQVM7QUFDOUMsWUFBWSw2REFBVTtBQUN0QixtQ0FBbUMsMERBQVM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLFdBQVcscUVBQWM7QUFDekI7QUFDQSIsInNvdXJjZXMiOlsiRDpcXERvX2FuMlxcbGVuZGh1Yl92MlxcbGVuZGh1Yi1mcm9udGVuZC1uZXh0anNcXG5vZGVfbW9kdWxlc1xcZXRoZXJzXFxsaWIuZXNtXFxoYXNoXFxhdXRob3JpemF0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldEFkZHJlc3MgfSBmcm9tIFwiLi4vYWRkcmVzcy9pbmRleC5qc1wiO1xyXG5pbXBvcnQgeyBrZWNjYWsyNTYgfSBmcm9tIFwiLi4vY3J5cHRvL2luZGV4LmpzXCI7XHJcbmltcG9ydCB7IHJlY292ZXJBZGRyZXNzIH0gZnJvbSBcIi4uL3RyYW5zYWN0aW9uL2luZGV4LmpzXCI7XHJcbmltcG9ydCB7IGFzc2VydEFyZ3VtZW50LCBjb25jYXQsIGVuY29kZVJscCwgdG9CZUFycmF5IH0gZnJvbSBcIi4uL3V0aWxzL2luZGV4LmpzXCI7XHJcbi8qKlxyXG4gKiAgQ29tcHV0ZXMgdGhlIFtbbGluay1laXAtNzcwMl1dIGF1dGhvcml6YXRpb24gZGlnZXN0IHRvIHNpZ24uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaGFzaEF1dGhvcml6YXRpb24oYXV0aCkge1xyXG4gICAgYXNzZXJ0QXJndW1lbnQodHlwZW9mIChhdXRoLmFkZHJlc3MpID09PSBcInN0cmluZ1wiLCBcImludmFsaWQgYWRkcmVzcyBmb3IgaGFzaEF1dGhvcml6YXRpb25cIiwgXCJhdXRoLmFkZHJlc3NcIiwgYXV0aCk7XHJcbiAgICByZXR1cm4ga2VjY2FrMjU2KGNvbmNhdChbXHJcbiAgICAgICAgXCIweDA1XCIsIGVuY29kZVJscChbXHJcbiAgICAgICAgICAgIChhdXRoLmNoYWluSWQgIT0gbnVsbCkgPyB0b0JlQXJyYXkoYXV0aC5jaGFpbklkKSA6IFwiMHhcIixcclxuICAgICAgICAgICAgZ2V0QWRkcmVzcyhhdXRoLmFkZHJlc3MpLFxyXG4gICAgICAgICAgICAoYXV0aC5ub25jZSAhPSBudWxsKSA/IHRvQmVBcnJheShhdXRoLm5vbmNlKSA6IFwiMHhcIixcclxuICAgICAgICBdKVxyXG4gICAgXSkpO1xyXG59XHJcbi8qKlxyXG4gKiAgUmV0dXJuIHRoZSBhZGRyZXNzIG9mIHRoZSBwcml2YXRlIGtleSB0aGF0IHByb2R1Y2VkXHJcbiAqICB0aGUgc2lnbmF0dXJlICUlc2lnJSUgZHVyaW5nIHNpZ25pbmcgZm9yICUlbWVzc2FnZSUlLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHZlcmlmeUF1dGhvcml6YXRpb24oYXV0aCwgc2lnKSB7XHJcbiAgICByZXR1cm4gcmVjb3ZlckFkZHJlc3MoaGFzaEF1dGhvcml6YXRpb24oYXV0aCksIHNpZyk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXV0aG9yaXphdGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/hash/authorization.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/hash/id.js":
/*!************************************************!*\
  !*** ./node_modules/ethers/lib.esm/hash/id.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   id: () => (/* binding */ id)\n/* harmony export */ });\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../crypto/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/index.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n\r\n\r\n/**\r\n *  A simple hashing function which operates on UTF-8 strings to\r\n *  compute an 32-byte identifier.\r\n *\r\n *  This simply computes the [UTF-8 bytes](toUtf8Bytes) and computes\r\n *  the [[keccak256]].\r\n *\r\n *  @example:\r\n *    id(\"hello world\")\r\n *    //_result:\r\n */\r\nfunction id(value) {\r\n    return (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_0__.keccak256)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.toUtf8Bytes)(value));\r\n}\r\n//# sourceMappingURL=id.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9oYXNoL2lkLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUErQztBQUNDO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLFdBQVcsMkRBQVMsQ0FBQyw0REFBVztBQUNoQztBQUNBIiwic291cmNlcyI6WyJEOlxcRG9fYW4yXFxsZW5kaHViX3YyXFxsZW5kaHViLWZyb250ZW5kLW5leHRqc1xcbm9kZV9tb2R1bGVzXFxldGhlcnNcXGxpYi5lc21cXGhhc2hcXGlkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGtlY2NhazI1NiB9IGZyb20gXCIuLi9jcnlwdG8vaW5kZXguanNcIjtcclxuaW1wb3J0IHsgdG9VdGY4Qnl0ZXMgfSBmcm9tIFwiLi4vdXRpbHMvaW5kZXguanNcIjtcclxuLyoqXHJcbiAqICBBIHNpbXBsZSBoYXNoaW5nIGZ1bmN0aW9uIHdoaWNoIG9wZXJhdGVzIG9uIFVURi04IHN0cmluZ3MgdG9cclxuICogIGNvbXB1dGUgYW4gMzItYnl0ZSBpZGVudGlmaWVyLlxyXG4gKlxyXG4gKiAgVGhpcyBzaW1wbHkgY29tcHV0ZXMgdGhlIFtVVEYtOCBieXRlc10odG9VdGY4Qnl0ZXMpIGFuZCBjb21wdXRlc1xyXG4gKiAgdGhlIFtba2VjY2FrMjU2XV0uXHJcbiAqXHJcbiAqICBAZXhhbXBsZTpcclxuICogICAgaWQoXCJoZWxsbyB3b3JsZFwiKVxyXG4gKiAgICAvL19yZXN1bHQ6XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaWQodmFsdWUpIHtcclxuICAgIHJldHVybiBrZWNjYWsyNTYodG9VdGY4Qnl0ZXModmFsdWUpKTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pZC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/hash/id.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/hash/index.js":
/*!***************************************************!*\
  !*** ./node_modules/ethers/lib.esm/hash/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TypedDataEncoder: () => (/* reexport safe */ _typed_data_js__WEBPACK_IMPORTED_MODULE_5__.TypedDataEncoder),\n/* harmony export */   dnsEncode: () => (/* reexport safe */ _namehash_js__WEBPACK_IMPORTED_MODULE_2__.dnsEncode),\n/* harmony export */   ensNormalize: () => (/* reexport safe */ _namehash_js__WEBPACK_IMPORTED_MODULE_2__.ensNormalize),\n/* harmony export */   hashAuthorization: () => (/* reexport safe */ _authorization_js__WEBPACK_IMPORTED_MODULE_0__.hashAuthorization),\n/* harmony export */   hashMessage: () => (/* reexport safe */ _message_js__WEBPACK_IMPORTED_MODULE_3__.hashMessage),\n/* harmony export */   id: () => (/* reexport safe */ _id_js__WEBPACK_IMPORTED_MODULE_1__.id),\n/* harmony export */   isValidName: () => (/* reexport safe */ _namehash_js__WEBPACK_IMPORTED_MODULE_2__.isValidName),\n/* harmony export */   namehash: () => (/* reexport safe */ _namehash_js__WEBPACK_IMPORTED_MODULE_2__.namehash),\n/* harmony export */   solidityPacked: () => (/* reexport safe */ _solidity_js__WEBPACK_IMPORTED_MODULE_4__.solidityPacked),\n/* harmony export */   solidityPackedKeccak256: () => (/* reexport safe */ _solidity_js__WEBPACK_IMPORTED_MODULE_4__.solidityPackedKeccak256),\n/* harmony export */   solidityPackedSha256: () => (/* reexport safe */ _solidity_js__WEBPACK_IMPORTED_MODULE_4__.solidityPackedSha256),\n/* harmony export */   verifyAuthorization: () => (/* reexport safe */ _authorization_js__WEBPACK_IMPORTED_MODULE_0__.verifyAuthorization),\n/* harmony export */   verifyMessage: () => (/* reexport safe */ _message_js__WEBPACK_IMPORTED_MODULE_3__.verifyMessage),\n/* harmony export */   verifyTypedData: () => (/* reexport safe */ _typed_data_js__WEBPACK_IMPORTED_MODULE_5__.verifyTypedData)\n/* harmony export */ });\n/* harmony import */ var _authorization_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./authorization.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/hash/authorization.js\");\n/* harmony import */ var _id_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./id.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/hash/id.js\");\n/* harmony import */ var _namehash_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./namehash.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/hash/namehash.js\");\n/* harmony import */ var _message_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./message.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/hash/message.js\");\n/* harmony import */ var _solidity_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./solidity.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/hash/solidity.js\");\n/* harmony import */ var _typed_data_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./typed-data.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/hash/typed-data.js\");\n/**\r\n *  Utilities for common tasks involving hashing. Also see\r\n *  [cryptographic hashing](about-crypto-hashing).\r\n *\r\n *  @_section: api/hashing:Hashing Utilities  [about-hashing]\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9oYXNoL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQzRFO0FBQy9DO0FBQ2tEO0FBQ3JCO0FBQ29DO0FBQzFCO0FBQ3BFIiwic291cmNlcyI6WyJEOlxcRG9fYW4yXFxsZW5kaHViX3YyXFxsZW5kaHViLWZyb250ZW5kLW5leHRqc1xcbm9kZV9tb2R1bGVzXFxldGhlcnNcXGxpYi5lc21cXGhhc2hcXGluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiAgVXRpbGl0aWVzIGZvciBjb21tb24gdGFza3MgaW52b2x2aW5nIGhhc2hpbmcuIEFsc28gc2VlXHJcbiAqICBbY3J5cHRvZ3JhcGhpYyBoYXNoaW5nXShhYm91dC1jcnlwdG8taGFzaGluZykuXHJcbiAqXHJcbiAqICBAX3NlY3Rpb246IGFwaS9oYXNoaW5nOkhhc2hpbmcgVXRpbGl0aWVzICBbYWJvdXQtaGFzaGluZ11cclxuICovXHJcbmV4cG9ydCB7IGhhc2hBdXRob3JpemF0aW9uLCB2ZXJpZnlBdXRob3JpemF0aW9uIH0gZnJvbSBcIi4vYXV0aG9yaXphdGlvbi5qc1wiO1xyXG5leHBvcnQgeyBpZCB9IGZyb20gXCIuL2lkLmpzXCI7XHJcbmV4cG9ydCB7IGVuc05vcm1hbGl6ZSwgaXNWYWxpZE5hbWUsIG5hbWVoYXNoLCBkbnNFbmNvZGUgfSBmcm9tIFwiLi9uYW1laGFzaC5qc1wiO1xyXG5leHBvcnQgeyBoYXNoTWVzc2FnZSwgdmVyaWZ5TWVzc2FnZSB9IGZyb20gXCIuL21lc3NhZ2UuanNcIjtcclxuZXhwb3J0IHsgc29saWRpdHlQYWNrZWQsIHNvbGlkaXR5UGFja2VkS2VjY2FrMjU2LCBzb2xpZGl0eVBhY2tlZFNoYTI1NiB9IGZyb20gXCIuL3NvbGlkaXR5LmpzXCI7XHJcbmV4cG9ydCB7IFR5cGVkRGF0YUVuY29kZXIsIHZlcmlmeVR5cGVkRGF0YSB9IGZyb20gXCIuL3R5cGVkLWRhdGEuanNcIjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/hash/index.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/hash/message.js":
/*!*****************************************************!*\
  !*** ./node_modules/ethers/lib.esm/hash/message.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hashMessage: () => (/* binding */ hashMessage),\n/* harmony export */   verifyMessage: () => (/* binding */ verifyMessage)\n/* harmony export */ });\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../crypto/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/index.js\");\n/* harmony import */ var _constants_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/constants/index.js\");\n/* harmony import */ var _transaction_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../transaction/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/transaction/index.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n\r\n\r\n\r\n\r\n/**\r\n *  Computes the [[link-eip-191]] personal-sign message digest to sign.\r\n *\r\n *  This prefixes the message with [[MessagePrefix]] and the decimal length\r\n *  of %%message%% and computes the [[keccak256]] digest.\r\n *\r\n *  If %%message%% is a string, it is converted to its UTF-8 bytes\r\n *  first. To compute the digest of a [[DataHexString]], it must be converted\r\n *  to [bytes](getBytes).\r\n *\r\n *  @example:\r\n *    hashMessage(\"Hello World\")\r\n *    //_result:\r\n *\r\n *    // Hashes the SIX (6) string characters, i.e.\r\n *    // [ \"0\", \"x\", \"4\", \"2\", \"4\", \"3\" ]\r\n *    hashMessage(\"0x4243\")\r\n *    //_result:\r\n *\r\n *    // Hashes the TWO (2) bytes [ 0x42, 0x43 ]...\r\n *    hashMessage(getBytes(\"0x4243\"))\r\n *    //_result:\r\n *\r\n *    // ...which is equal to using data\r\n *    hashMessage(new Uint8Array([ 0x42, 0x43 ]))\r\n *    //_result:\r\n *\r\n */\r\nfunction hashMessage(message) {\r\n    if (typeof (message) === \"string\") {\r\n        message = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toUtf8Bytes)(message);\r\n    }\r\n    return (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.concat)([\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toUtf8Bytes)(_constants_index_js__WEBPACK_IMPORTED_MODULE_2__.MessagePrefix),\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toUtf8Bytes)(String(message.length)),\r\n        message\r\n    ]));\r\n}\r\n/**\r\n *  Return the address of the private key that produced\r\n *  the signature %%sig%% during signing for %%message%%.\r\n */\r\nfunction verifyMessage(message, sig) {\r\n    const digest = hashMessage(message);\r\n    return (0,_transaction_index_js__WEBPACK_IMPORTED_MODULE_3__.recoverAddress)(digest, sig);\r\n}\r\n//# sourceMappingURL=message.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9oYXNoL21lc3NhZ2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQStDO0FBQ087QUFDRztBQUNEO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLGtCQUFrQiw0REFBVztBQUM3QjtBQUNBLFdBQVcsMkRBQVMsQ0FBQyx1REFBTTtBQUMzQixRQUFRLDREQUFXLENBQUMsOERBQWE7QUFDakMsUUFBUSw0REFBVztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSxXQUFXLHFFQUFjO0FBQ3pCO0FBQ0EiLCJzb3VyY2VzIjpbIkQ6XFxEb19hbjJcXGxlbmRodWJfdjJcXGxlbmRodWItZnJvbnRlbmQtbmV4dGpzXFxub2RlX21vZHVsZXNcXGV0aGVyc1xcbGliLmVzbVxcaGFzaFxcbWVzc2FnZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBrZWNjYWsyNTYgfSBmcm9tIFwiLi4vY3J5cHRvL2luZGV4LmpzXCI7XHJcbmltcG9ydCB7IE1lc3NhZ2VQcmVmaXggfSBmcm9tIFwiLi4vY29uc3RhbnRzL2luZGV4LmpzXCI7XHJcbmltcG9ydCB7IHJlY292ZXJBZGRyZXNzIH0gZnJvbSBcIi4uL3RyYW5zYWN0aW9uL2luZGV4LmpzXCI7XHJcbmltcG9ydCB7IGNvbmNhdCwgdG9VdGY4Qnl0ZXMgfSBmcm9tIFwiLi4vdXRpbHMvaW5kZXguanNcIjtcclxuLyoqXHJcbiAqICBDb21wdXRlcyB0aGUgW1tsaW5rLWVpcC0xOTFdXSBwZXJzb25hbC1zaWduIG1lc3NhZ2UgZGlnZXN0IHRvIHNpZ24uXHJcbiAqXHJcbiAqICBUaGlzIHByZWZpeGVzIHRoZSBtZXNzYWdlIHdpdGggW1tNZXNzYWdlUHJlZml4XV0gYW5kIHRoZSBkZWNpbWFsIGxlbmd0aFxyXG4gKiAgb2YgJSVtZXNzYWdlJSUgYW5kIGNvbXB1dGVzIHRoZSBbW2tlY2NhazI1Nl1dIGRpZ2VzdC5cclxuICpcclxuICogIElmICUlbWVzc2FnZSUlIGlzIGEgc3RyaW5nLCBpdCBpcyBjb252ZXJ0ZWQgdG8gaXRzIFVURi04IGJ5dGVzXHJcbiAqICBmaXJzdC4gVG8gY29tcHV0ZSB0aGUgZGlnZXN0IG9mIGEgW1tEYXRhSGV4U3RyaW5nXV0sIGl0IG11c3QgYmUgY29udmVydGVkXHJcbiAqICB0byBbYnl0ZXNdKGdldEJ5dGVzKS5cclxuICpcclxuICogIEBleGFtcGxlOlxyXG4gKiAgICBoYXNoTWVzc2FnZShcIkhlbGxvIFdvcmxkXCIpXHJcbiAqICAgIC8vX3Jlc3VsdDpcclxuICpcclxuICogICAgLy8gSGFzaGVzIHRoZSBTSVggKDYpIHN0cmluZyBjaGFyYWN0ZXJzLCBpLmUuXHJcbiAqICAgIC8vIFsgXCIwXCIsIFwieFwiLCBcIjRcIiwgXCIyXCIsIFwiNFwiLCBcIjNcIiBdXHJcbiAqICAgIGhhc2hNZXNzYWdlKFwiMHg0MjQzXCIpXHJcbiAqICAgIC8vX3Jlc3VsdDpcclxuICpcclxuICogICAgLy8gSGFzaGVzIHRoZSBUV08gKDIpIGJ5dGVzIFsgMHg0MiwgMHg0MyBdLi4uXHJcbiAqICAgIGhhc2hNZXNzYWdlKGdldEJ5dGVzKFwiMHg0MjQzXCIpKVxyXG4gKiAgICAvL19yZXN1bHQ6XHJcbiAqXHJcbiAqICAgIC8vIC4uLndoaWNoIGlzIGVxdWFsIHRvIHVzaW5nIGRhdGFcclxuICogICAgaGFzaE1lc3NhZ2UobmV3IFVpbnQ4QXJyYXkoWyAweDQyLCAweDQzIF0pKVxyXG4gKiAgICAvL19yZXN1bHQ6XHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaGFzaE1lc3NhZ2UobWVzc2FnZSkge1xyXG4gICAgaWYgKHR5cGVvZiAobWVzc2FnZSkgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICBtZXNzYWdlID0gdG9VdGY4Qnl0ZXMobWVzc2FnZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4ga2VjY2FrMjU2KGNvbmNhdChbXHJcbiAgICAgICAgdG9VdGY4Qnl0ZXMoTWVzc2FnZVByZWZpeCksXHJcbiAgICAgICAgdG9VdGY4Qnl0ZXMoU3RyaW5nKG1lc3NhZ2UubGVuZ3RoKSksXHJcbiAgICAgICAgbWVzc2FnZVxyXG4gICAgXSkpO1xyXG59XHJcbi8qKlxyXG4gKiAgUmV0dXJuIHRoZSBhZGRyZXNzIG9mIHRoZSBwcml2YXRlIGtleSB0aGF0IHByb2R1Y2VkXHJcbiAqICB0aGUgc2lnbmF0dXJlICUlc2lnJSUgZHVyaW5nIHNpZ25pbmcgZm9yICUlbWVzc2FnZSUlLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHZlcmlmeU1lc3NhZ2UobWVzc2FnZSwgc2lnKSB7XHJcbiAgICBjb25zdCBkaWdlc3QgPSBoYXNoTWVzc2FnZShtZXNzYWdlKTtcclxuICAgIHJldHVybiByZWNvdmVyQWRkcmVzcyhkaWdlc3QsIHNpZyk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVzc2FnZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/hash/message.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/hash/namehash.js":
/*!******************************************************!*\
  !*** ./node_modules/ethers/lib.esm/hash/namehash.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dnsEncode: () => (/* binding */ dnsEncode),\n/* harmony export */   ensNormalize: () => (/* binding */ ensNormalize),\n/* harmony export */   isValidName: () => (/* binding */ isValidName),\n/* harmony export */   namehash: () => (/* binding */ namehash)\n/* harmony export */ });\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../crypto/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/index.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/* harmony import */ var _adraffy_ens_normalize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @adraffy/ens-normalize */ \"(pages-dir-browser)/./node_modules/@adraffy/ens-normalize/dist/index.mjs\");\n\r\n\r\n\r\nconst Zeros = new Uint8Array(32);\r\nZeros.fill(0);\r\nfunction checkComponent(comp) {\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(comp.length !== 0, \"invalid ENS name; empty component\", \"comp\", comp);\r\n    return comp;\r\n}\r\nfunction ensNameSplit(name) {\r\n    const bytes = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.toUtf8Bytes)(ensNormalize(name));\r\n    const comps = [];\r\n    if (name.length === 0) {\r\n        return comps;\r\n    }\r\n    let last = 0;\r\n    for (let i = 0; i < bytes.length; i++) {\r\n        const d = bytes[i];\r\n        // A separator (i.e. \".\"); copy this component\r\n        if (d === 0x2e) {\r\n            comps.push(checkComponent(bytes.slice(last, i)));\r\n            last = i + 1;\r\n        }\r\n    }\r\n    // There was a stray separator at the end of the name\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(last < bytes.length, \"invalid ENS name; empty component\", \"name\", name);\r\n    comps.push(checkComponent(bytes.slice(last)));\r\n    return comps;\r\n}\r\n/**\r\n *  Returns the ENS %%name%% normalized.\r\n */\r\nfunction ensNormalize(name) {\r\n    try {\r\n        if (name.length === 0) {\r\n            throw new Error(\"empty label\");\r\n        }\r\n        return (0,_adraffy_ens_normalize__WEBPACK_IMPORTED_MODULE_0__.ens_normalize)(name);\r\n    }\r\n    catch (error) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(false, `invalid ENS name (${error.message})`, \"name\", name);\r\n    }\r\n}\r\n/**\r\n *  Returns ``true`` if %%name%% is a valid ENS name.\r\n */\r\nfunction isValidName(name) {\r\n    try {\r\n        return (ensNameSplit(name).length !== 0);\r\n    }\r\n    catch (error) { }\r\n    return false;\r\n}\r\n/**\r\n *  Returns the [[link-namehash]] for %%name%%.\r\n */\r\nfunction namehash(name) {\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(typeof (name) === \"string\", \"invalid ENS name; not a string\", \"name\", name);\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(name.length, `invalid ENS name (empty label)`, \"name\", name);\r\n    let result = Zeros;\r\n    const comps = ensNameSplit(name);\r\n    while (comps.length) {\r\n        result = (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_2__.keccak256)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.concat)([result, (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_2__.keccak256)((comps.pop()))]));\r\n    }\r\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.hexlify)(result);\r\n}\r\n/**\r\n *  Returns the DNS encoded %%name%%.\r\n *\r\n *  This is used for various parts of ENS name resolution, such\r\n *  as the wildcard resolution.\r\n */\r\nfunction dnsEncode(name, _maxLength) {\r\n    const length = (_maxLength != null) ? _maxLength : 63;\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(length <= 255, \"DNS encoded label cannot exceed 255\", \"length\", length);\r\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.hexlify)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.concat)(ensNameSplit(name).map((comp) => {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(comp.length <= length, `label ${JSON.stringify(name)} exceeds ${length} bytes`, \"name\", name);\r\n        const bytes = new Uint8Array(comp.length + 1);\r\n        bytes.set(comp, 1);\r\n        bytes[0] = bytes.length - 1;\r\n        return bytes;\r\n    }))) + \"00\";\r\n}\r\n//# sourceMappingURL=namehash.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9oYXNoL25hbWVoYXNoLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBK0M7QUFDa0M7QUFDMUI7QUFDdkQ7QUFDQTtBQUNBO0FBQ0EsSUFBSSwrREFBYyx1Q0FBdUM7QUFDekQ7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLDREQUFXO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isa0JBQWtCO0FBQ3RDO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksK0RBQWMseUNBQXlDO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHFFQUFhO0FBQzVCO0FBQ0E7QUFDQSxRQUFRLCtEQUFjLDZCQUE2QixjQUFjO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsSUFBSSwrREFBYyxnREFBZ0Q7QUFDbEUsSUFBSSwrREFBYztBQUNsQjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsMkRBQVMsQ0FBQyx1REFBTSxVQUFVLDJEQUFTO0FBQ3BEO0FBQ0EsV0FBVyx3REFBTztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSxJQUFJLCtEQUFjO0FBQ2xCLFdBQVcsd0RBQU8sQ0FBQyx1REFBTTtBQUN6QixRQUFRLCtEQUFjLGlDQUFpQyxzQkFBc0IsVUFBVSxRQUFRO0FBQy9GO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EiLCJzb3VyY2VzIjpbIkQ6XFxEb19hbjJcXGxlbmRodWJfdjJcXGxlbmRodWItZnJvbnRlbmQtbmV4dGpzXFxub2RlX21vZHVsZXNcXGV0aGVyc1xcbGliLmVzbVxcaGFzaFxcbmFtZWhhc2guanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsga2VjY2FrMjU2IH0gZnJvbSBcIi4uL2NyeXB0by9pbmRleC5qc1wiO1xyXG5pbXBvcnQgeyBjb25jYXQsIGhleGxpZnksIGFzc2VydEFyZ3VtZW50LCB0b1V0ZjhCeXRlcyB9IGZyb20gXCIuLi91dGlscy9pbmRleC5qc1wiO1xyXG5pbXBvcnQgeyBlbnNfbm9ybWFsaXplIH0gZnJvbSBcIkBhZHJhZmZ5L2Vucy1ub3JtYWxpemVcIjtcclxuY29uc3QgWmVyb3MgPSBuZXcgVWludDhBcnJheSgzMik7XHJcblplcm9zLmZpbGwoMCk7XHJcbmZ1bmN0aW9uIGNoZWNrQ29tcG9uZW50KGNvbXApIHtcclxuICAgIGFzc2VydEFyZ3VtZW50KGNvbXAubGVuZ3RoICE9PSAwLCBcImludmFsaWQgRU5TIG5hbWU7IGVtcHR5IGNvbXBvbmVudFwiLCBcImNvbXBcIiwgY29tcCk7XHJcbiAgICByZXR1cm4gY29tcDtcclxufVxyXG5mdW5jdGlvbiBlbnNOYW1lU3BsaXQobmFtZSkge1xyXG4gICAgY29uc3QgYnl0ZXMgPSB0b1V0ZjhCeXRlcyhlbnNOb3JtYWxpemUobmFtZSkpO1xyXG4gICAgY29uc3QgY29tcHMgPSBbXTtcclxuICAgIGlmIChuYW1lLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybiBjb21wcztcclxuICAgIH1cclxuICAgIGxldCBsYXN0ID0gMDtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBkID0gYnl0ZXNbaV07XHJcbiAgICAgICAgLy8gQSBzZXBhcmF0b3IgKGkuZS4gXCIuXCIpOyBjb3B5IHRoaXMgY29tcG9uZW50XHJcbiAgICAgICAgaWYgKGQgPT09IDB4MmUpIHtcclxuICAgICAgICAgICAgY29tcHMucHVzaChjaGVja0NvbXBvbmVudChieXRlcy5zbGljZShsYXN0LCBpKSkpO1xyXG4gICAgICAgICAgICBsYXN0ID0gaSArIDE7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gVGhlcmUgd2FzIGEgc3RyYXkgc2VwYXJhdG9yIGF0IHRoZSBlbmQgb2YgdGhlIG5hbWVcclxuICAgIGFzc2VydEFyZ3VtZW50KGxhc3QgPCBieXRlcy5sZW5ndGgsIFwiaW52YWxpZCBFTlMgbmFtZTsgZW1wdHkgY29tcG9uZW50XCIsIFwibmFtZVwiLCBuYW1lKTtcclxuICAgIGNvbXBzLnB1c2goY2hlY2tDb21wb25lbnQoYnl0ZXMuc2xpY2UobGFzdCkpKTtcclxuICAgIHJldHVybiBjb21wcztcclxufVxyXG4vKipcclxuICogIFJldHVybnMgdGhlIEVOUyAlJW5hbWUlJSBub3JtYWxpemVkLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGVuc05vcm1hbGl6ZShuYW1lKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGlmIChuYW1lLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJlbXB0eSBsYWJlbFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGVuc19ub3JtYWxpemUobmFtZSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBhc3NlcnRBcmd1bWVudChmYWxzZSwgYGludmFsaWQgRU5TIG5hbWUgKCR7ZXJyb3IubWVzc2FnZX0pYCwgXCJuYW1lXCIsIG5hbWUpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiAgUmV0dXJucyBgYHRydWVgYCBpZiAlJW5hbWUlJSBpcyBhIHZhbGlkIEVOUyBuYW1lLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWROYW1lKG5hbWUpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgcmV0dXJuIChlbnNOYW1lU3BsaXQobmFtZSkubGVuZ3RoICE9PSAwKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvcikgeyB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cclxuLyoqXHJcbiAqICBSZXR1cm5zIHRoZSBbW2xpbmstbmFtZWhhc2hdXSBmb3IgJSVuYW1lJSUuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbmFtZWhhc2gobmFtZSkge1xyXG4gICAgYXNzZXJ0QXJndW1lbnQodHlwZW9mIChuYW1lKSA9PT0gXCJzdHJpbmdcIiwgXCJpbnZhbGlkIEVOUyBuYW1lOyBub3QgYSBzdHJpbmdcIiwgXCJuYW1lXCIsIG5hbWUpO1xyXG4gICAgYXNzZXJ0QXJndW1lbnQobmFtZS5sZW5ndGgsIGBpbnZhbGlkIEVOUyBuYW1lIChlbXB0eSBsYWJlbClgLCBcIm5hbWVcIiwgbmFtZSk7XHJcbiAgICBsZXQgcmVzdWx0ID0gWmVyb3M7XHJcbiAgICBjb25zdCBjb21wcyA9IGVuc05hbWVTcGxpdChuYW1lKTtcclxuICAgIHdoaWxlIChjb21wcy5sZW5ndGgpIHtcclxuICAgICAgICByZXN1bHQgPSBrZWNjYWsyNTYoY29uY2F0KFtyZXN1bHQsIGtlY2NhazI1NigoY29tcHMucG9wKCkpKV0pKTtcclxuICAgIH1cclxuICAgIHJldHVybiBoZXhsaWZ5KHJlc3VsdCk7XHJcbn1cclxuLyoqXHJcbiAqICBSZXR1cm5zIHRoZSBETlMgZW5jb2RlZCAlJW5hbWUlJS5cclxuICpcclxuICogIFRoaXMgaXMgdXNlZCBmb3IgdmFyaW91cyBwYXJ0cyBvZiBFTlMgbmFtZSByZXNvbHV0aW9uLCBzdWNoXHJcbiAqICBhcyB0aGUgd2lsZGNhcmQgcmVzb2x1dGlvbi5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBkbnNFbmNvZGUobmFtZSwgX21heExlbmd0aCkge1xyXG4gICAgY29uc3QgbGVuZ3RoID0gKF9tYXhMZW5ndGggIT0gbnVsbCkgPyBfbWF4TGVuZ3RoIDogNjM7XHJcbiAgICBhc3NlcnRBcmd1bWVudChsZW5ndGggPD0gMjU1LCBcIkROUyBlbmNvZGVkIGxhYmVsIGNhbm5vdCBleGNlZWQgMjU1XCIsIFwibGVuZ3RoXCIsIGxlbmd0aCk7XHJcbiAgICByZXR1cm4gaGV4bGlmeShjb25jYXQoZW5zTmFtZVNwbGl0KG5hbWUpLm1hcCgoY29tcCkgPT4ge1xyXG4gICAgICAgIGFzc2VydEFyZ3VtZW50KGNvbXAubGVuZ3RoIDw9IGxlbmd0aCwgYGxhYmVsICR7SlNPTi5zdHJpbmdpZnkobmFtZSl9IGV4Y2VlZHMgJHtsZW5ndGh9IGJ5dGVzYCwgXCJuYW1lXCIsIG5hbWUpO1xyXG4gICAgICAgIGNvbnN0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoY29tcC5sZW5ndGggKyAxKTtcclxuICAgICAgICBieXRlcy5zZXQoY29tcCwgMSk7XHJcbiAgICAgICAgYnl0ZXNbMF0gPSBieXRlcy5sZW5ndGggLSAxO1xyXG4gICAgICAgIHJldHVybiBieXRlcztcclxuICAgIH0pKSkgKyBcIjAwXCI7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmFtZWhhc2guanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/hash/namehash.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/hash/solidity.js":
/*!******************************************************!*\
  !*** ./node_modules/ethers/lib.esm/hash/solidity.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   solidityPacked: () => (/* binding */ solidityPacked),\n/* harmony export */   solidityPackedKeccak256: () => (/* binding */ solidityPackedKeccak256),\n/* harmony export */   solidityPackedSha256: () => (/* binding */ solidityPackedSha256)\n/* harmony export */ });\n/* harmony import */ var _address_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../address/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/address/index.js\");\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../crypto/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/index.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n\r\n\r\n\r\nconst regexBytes = new RegExp(\"^bytes([0-9]+)$\");\r\nconst regexNumber = new RegExp(\"^(u?int)([0-9]*)$\");\r\nconst regexArray = new RegExp(\"^(.*)\\\\[([0-9]*)\\\\]$\");\r\nfunction _pack(type, value, isArray) {\r\n    switch (type) {\r\n        case \"address\":\r\n            if (isArray) {\r\n                return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.zeroPadValue)(value, 32));\r\n            }\r\n            return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)((0,_address_index_js__WEBPACK_IMPORTED_MODULE_1__.getAddress)(value));\r\n        case \"string\":\r\n            return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toUtf8Bytes)(value);\r\n        case \"bytes\":\r\n            return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(value);\r\n        case \"bool\":\r\n            value = (!!value ? \"0x01\" : \"0x00\");\r\n            if (isArray) {\r\n                return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.zeroPadValue)(value, 32));\r\n            }\r\n            return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(value);\r\n    }\r\n    let match = type.match(regexNumber);\r\n    if (match) {\r\n        let signed = (match[1] === \"int\");\r\n        let size = parseInt(match[2] || \"256\");\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)((!match[2] || match[2] === String(size)) && (size % 8 === 0) && size !== 0 && size <= 256, \"invalid number type\", \"type\", type);\r\n        if (isArray) {\r\n            size = 256;\r\n        }\r\n        if (signed) {\r\n            value = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toTwos)(value, size);\r\n        }\r\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.zeroPadValue)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toBeArray)(value), size / 8));\r\n    }\r\n    match = type.match(regexBytes);\r\n    if (match) {\r\n        const size = parseInt(match[1]);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(String(size) === match[1] && size !== 0 && size <= 32, \"invalid bytes type\", \"type\", type);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.dataLength)(value) === size, `invalid value for ${type}`, \"value\", value);\r\n        if (isArray) {\r\n            return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.zeroPadBytes)(value, 32));\r\n        }\r\n        return value;\r\n    }\r\n    match = type.match(regexArray);\r\n    if (match && Array.isArray(value)) {\r\n        const baseType = match[1];\r\n        const count = parseInt(match[2] || String(value.length));\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(count === value.length, `invalid array length for ${type}`, \"value\", value);\r\n        const result = [];\r\n        value.forEach(function (value) {\r\n            result.push(_pack(baseType, value, true));\r\n        });\r\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.concat)(result));\r\n    }\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"invalid type\", \"type\", type);\r\n}\r\n// @TODO: Array Enum\r\n/**\r\n *   Computes the [[link-solc-packed]] representation of %%values%%\r\n *   respectively to their %%types%%.\r\n *\r\n *   @example:\r\n *       addr = \"0x8ba1f109551bd432803012645ac136ddd64dba72\"\r\n *       solidityPacked([ \"address\", \"uint\" ], [ addr, 45 ]);\r\n *       //_result:\r\n */\r\nfunction solidityPacked(types, values) {\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(types.length === values.length, \"wrong number of values; expected ${ types.length }\", \"values\", values);\r\n    const tight = [];\r\n    types.forEach(function (type, index) {\r\n        tight.push(_pack(type, values[index]));\r\n    });\r\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.concat)(tight));\r\n}\r\n/**\r\n *   Computes the [[link-solc-packed]] [[keccak256]] hash of %%values%%\r\n *   respectively to their %%types%%.\r\n *\r\n *   @example:\r\n *       addr = \"0x8ba1f109551bd432803012645ac136ddd64dba72\"\r\n *       solidityPackedKeccak256([ \"address\", \"uint\" ], [ addr, 45 ]);\r\n *       //_result:\r\n */\r\nfunction solidityPackedKeccak256(types, values) {\r\n    return (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_2__.keccak256)(solidityPacked(types, values));\r\n}\r\n/**\r\n *   Computes the [[link-solc-packed]] [[sha256]] hash of %%values%%\r\n *   respectively to their %%types%%.\r\n *\r\n *   @example:\r\n *       addr = \"0x8ba1f109551bd432803012645ac136ddd64dba72\"\r\n *       solidityPackedSha256([ \"address\", \"uint\" ], [ addr, 45 ]);\r\n *       //_result:\r\n */\r\nfunction solidityPackedSha256(types, values) {\r\n    return (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_2__.sha256)(solidityPacked(types, values));\r\n}\r\n//# sourceMappingURL=solidity.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9oYXNoL3NvbGlkaXR5LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFpRDtBQUMrQjtBQUNzRTtBQUN0SjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qix5REFBUSxDQUFDLDZEQUFZO0FBQzVDO0FBQ0EsbUJBQW1CLHlEQUFRLENBQUMsNkRBQVU7QUFDdEM7QUFDQSxtQkFBbUIsNERBQVc7QUFDOUI7QUFDQSxtQkFBbUIseURBQVE7QUFDM0I7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLHlEQUFRLENBQUMsNkRBQVk7QUFDNUM7QUFDQSxtQkFBbUIseURBQVE7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsK0RBQWM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsdURBQU07QUFDMUI7QUFDQSxlQUFlLHlEQUFRLENBQUMsNkRBQVksQ0FBQywwREFBUztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsK0RBQWM7QUFDdEIsUUFBUSwrREFBYyxDQUFDLDJEQUFVLHVDQUF1QyxLQUFLO0FBQzdFO0FBQ0EsbUJBQW1CLHlEQUFRLENBQUMsNkRBQVk7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLCtEQUFjLHFEQUFxRCxLQUFLO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxlQUFlLHlEQUFRLENBQUMsdURBQU07QUFDOUI7QUFDQSxJQUFJLCtEQUFjO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLElBQUksK0RBQWMsMERBQTBELFlBQVksY0FBYztBQUN0RztBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsV0FBVyx3REFBTyxDQUFDLHVEQUFNO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxXQUFXLDJEQUFVO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxXQUFXLHdEQUFPO0FBQ2xCO0FBQ0EiLCJzb3VyY2VzIjpbIkQ6XFxEb19hbjJcXGxlbmRodWJfdjJcXGxlbmRodWItZnJvbnRlbmQtbmV4dGpzXFxub2RlX21vZHVsZXNcXGV0aGVyc1xcbGliLmVzbVxcaGFzaFxcc29saWRpdHkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0QWRkcmVzcyB9IGZyb20gXCIuLi9hZGRyZXNzL2luZGV4LmpzXCI7XHJcbmltcG9ydCB7IGtlY2NhazI1NiBhcyBfa2VjY2FrMjU2LCBzaGEyNTYgYXMgX3NoYTI1NiB9IGZyb20gXCIuLi9jcnlwdG8vaW5kZXguanNcIjtcclxuaW1wb3J0IHsgY29uY2F0LCBkYXRhTGVuZ3RoLCBnZXRCeXRlcywgaGV4bGlmeSwgdG9CZUFycmF5LCB0b1R3b3MsIHRvVXRmOEJ5dGVzLCB6ZXJvUGFkQnl0ZXMsIHplcm9QYWRWYWx1ZSwgYXNzZXJ0QXJndW1lbnQgfSBmcm9tIFwiLi4vdXRpbHMvaW5kZXguanNcIjtcclxuY29uc3QgcmVnZXhCeXRlcyA9IG5ldyBSZWdFeHAoXCJeYnl0ZXMoWzAtOV0rKSRcIik7XHJcbmNvbnN0IHJlZ2V4TnVtYmVyID0gbmV3IFJlZ0V4cChcIl4odT9pbnQpKFswLTldKikkXCIpO1xyXG5jb25zdCByZWdleEFycmF5ID0gbmV3IFJlZ0V4cChcIl4oLiopXFxcXFsoWzAtOV0qKVxcXFxdJFwiKTtcclxuZnVuY3Rpb24gX3BhY2sodHlwZSwgdmFsdWUsIGlzQXJyYXkpIHtcclxuICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgIGNhc2UgXCJhZGRyZXNzXCI6XHJcbiAgICAgICAgICAgIGlmIChpc0FycmF5KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0Qnl0ZXMoemVyb1BhZFZhbHVlKHZhbHVlLCAzMikpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBnZXRCeXRlcyhnZXRBZGRyZXNzKHZhbHVlKSk7XHJcbiAgICAgICAgY2FzZSBcInN0cmluZ1wiOlxyXG4gICAgICAgICAgICByZXR1cm4gdG9VdGY4Qnl0ZXModmFsdWUpO1xyXG4gICAgICAgIGNhc2UgXCJieXRlc1wiOlxyXG4gICAgICAgICAgICByZXR1cm4gZ2V0Qnl0ZXModmFsdWUpO1xyXG4gICAgICAgIGNhc2UgXCJib29sXCI6XHJcbiAgICAgICAgICAgIHZhbHVlID0gKCEhdmFsdWUgPyBcIjB4MDFcIiA6IFwiMHgwMFwiKTtcclxuICAgICAgICAgICAgaWYgKGlzQXJyYXkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBnZXRCeXRlcyh6ZXJvUGFkVmFsdWUodmFsdWUsIDMyKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGdldEJ5dGVzKHZhbHVlKTtcclxuICAgIH1cclxuICAgIGxldCBtYXRjaCA9IHR5cGUubWF0Y2gocmVnZXhOdW1iZXIpO1xyXG4gICAgaWYgKG1hdGNoKSB7XHJcbiAgICAgICAgbGV0IHNpZ25lZCA9IChtYXRjaFsxXSA9PT0gXCJpbnRcIik7XHJcbiAgICAgICAgbGV0IHNpemUgPSBwYXJzZUludChtYXRjaFsyXSB8fCBcIjI1NlwiKTtcclxuICAgICAgICBhc3NlcnRBcmd1bWVudCgoIW1hdGNoWzJdIHx8IG1hdGNoWzJdID09PSBTdHJpbmcoc2l6ZSkpICYmIChzaXplICUgOCA9PT0gMCkgJiYgc2l6ZSAhPT0gMCAmJiBzaXplIDw9IDI1NiwgXCJpbnZhbGlkIG51bWJlciB0eXBlXCIsIFwidHlwZVwiLCB0eXBlKTtcclxuICAgICAgICBpZiAoaXNBcnJheSkge1xyXG4gICAgICAgICAgICBzaXplID0gMjU2O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc2lnbmVkKSB7XHJcbiAgICAgICAgICAgIHZhbHVlID0gdG9Ud29zKHZhbHVlLCBzaXplKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGdldEJ5dGVzKHplcm9QYWRWYWx1ZSh0b0JlQXJyYXkodmFsdWUpLCBzaXplIC8gOCkpO1xyXG4gICAgfVxyXG4gICAgbWF0Y2ggPSB0eXBlLm1hdGNoKHJlZ2V4Qnl0ZXMpO1xyXG4gICAgaWYgKG1hdGNoKSB7XHJcbiAgICAgICAgY29uc3Qgc2l6ZSA9IHBhcnNlSW50KG1hdGNoWzFdKTtcclxuICAgICAgICBhc3NlcnRBcmd1bWVudChTdHJpbmcoc2l6ZSkgPT09IG1hdGNoWzFdICYmIHNpemUgIT09IDAgJiYgc2l6ZSA8PSAzMiwgXCJpbnZhbGlkIGJ5dGVzIHR5cGVcIiwgXCJ0eXBlXCIsIHR5cGUpO1xyXG4gICAgICAgIGFzc2VydEFyZ3VtZW50KGRhdGFMZW5ndGgodmFsdWUpID09PSBzaXplLCBgaW52YWxpZCB2YWx1ZSBmb3IgJHt0eXBlfWAsIFwidmFsdWVcIiwgdmFsdWUpO1xyXG4gICAgICAgIGlmIChpc0FycmF5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBnZXRCeXRlcyh6ZXJvUGFkQnl0ZXModmFsdWUsIDMyKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH1cclxuICAgIG1hdGNoID0gdHlwZS5tYXRjaChyZWdleEFycmF5KTtcclxuICAgIGlmIChtYXRjaCAmJiBBcnJheS5pc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgIGNvbnN0IGJhc2VUeXBlID0gbWF0Y2hbMV07XHJcbiAgICAgICAgY29uc3QgY291bnQgPSBwYXJzZUludChtYXRjaFsyXSB8fCBTdHJpbmcodmFsdWUubGVuZ3RoKSk7XHJcbiAgICAgICAgYXNzZXJ0QXJndW1lbnQoY291bnQgPT09IHZhbHVlLmxlbmd0aCwgYGludmFsaWQgYXJyYXkgbGVuZ3RoIGZvciAke3R5cGV9YCwgXCJ2YWx1ZVwiLCB2YWx1ZSk7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XHJcbiAgICAgICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgcmVzdWx0LnB1c2goX3BhY2soYmFzZVR5cGUsIHZhbHVlLCB0cnVlKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIGdldEJ5dGVzKGNvbmNhdChyZXN1bHQpKTtcclxuICAgIH1cclxuICAgIGFzc2VydEFyZ3VtZW50KGZhbHNlLCBcImludmFsaWQgdHlwZVwiLCBcInR5cGVcIiwgdHlwZSk7XHJcbn1cclxuLy8gQFRPRE86IEFycmF5IEVudW1cclxuLyoqXHJcbiAqICAgQ29tcHV0ZXMgdGhlIFtbbGluay1zb2xjLXBhY2tlZF1dIHJlcHJlc2VudGF0aW9uIG9mICUldmFsdWVzJSVcclxuICogICByZXNwZWN0aXZlbHkgdG8gdGhlaXIgJSV0eXBlcyUlLlxyXG4gKlxyXG4gKiAgIEBleGFtcGxlOlxyXG4gKiAgICAgICBhZGRyID0gXCIweDhiYTFmMTA5NTUxYmQ0MzI4MDMwMTI2NDVhYzEzNmRkZDY0ZGJhNzJcIlxyXG4gKiAgICAgICBzb2xpZGl0eVBhY2tlZChbIFwiYWRkcmVzc1wiLCBcInVpbnRcIiBdLCBbIGFkZHIsIDQ1IF0pO1xyXG4gKiAgICAgICAvL19yZXN1bHQ6XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc29saWRpdHlQYWNrZWQodHlwZXMsIHZhbHVlcykge1xyXG4gICAgYXNzZXJ0QXJndW1lbnQodHlwZXMubGVuZ3RoID09PSB2YWx1ZXMubGVuZ3RoLCBcIndyb25nIG51bWJlciBvZiB2YWx1ZXM7IGV4cGVjdGVkICR7IHR5cGVzLmxlbmd0aCB9XCIsIFwidmFsdWVzXCIsIHZhbHVlcyk7XHJcbiAgICBjb25zdCB0aWdodCA9IFtdO1xyXG4gICAgdHlwZXMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSwgaW5kZXgpIHtcclxuICAgICAgICB0aWdodC5wdXNoKF9wYWNrKHR5cGUsIHZhbHVlc1tpbmRleF0pKTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGhleGxpZnkoY29uY2F0KHRpZ2h0KSk7XHJcbn1cclxuLyoqXHJcbiAqICAgQ29tcHV0ZXMgdGhlIFtbbGluay1zb2xjLXBhY2tlZF1dIFtba2VjY2FrMjU2XV0gaGFzaCBvZiAlJXZhbHVlcyUlXHJcbiAqICAgcmVzcGVjdGl2ZWx5IHRvIHRoZWlyICUldHlwZXMlJS5cclxuICpcclxuICogICBAZXhhbXBsZTpcclxuICogICAgICAgYWRkciA9IFwiMHg4YmExZjEwOTU1MWJkNDMyODAzMDEyNjQ1YWMxMzZkZGQ2NGRiYTcyXCJcclxuICogICAgICAgc29saWRpdHlQYWNrZWRLZWNjYWsyNTYoWyBcImFkZHJlc3NcIiwgXCJ1aW50XCIgXSwgWyBhZGRyLCA0NSBdKTtcclxuICogICAgICAgLy9fcmVzdWx0OlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNvbGlkaXR5UGFja2VkS2VjY2FrMjU2KHR5cGVzLCB2YWx1ZXMpIHtcclxuICAgIHJldHVybiBfa2VjY2FrMjU2KHNvbGlkaXR5UGFja2VkKHR5cGVzLCB2YWx1ZXMpKTtcclxufVxyXG4vKipcclxuICogICBDb21wdXRlcyB0aGUgW1tsaW5rLXNvbGMtcGFja2VkXV0gW1tzaGEyNTZdXSBoYXNoIG9mICUldmFsdWVzJSVcclxuICogICByZXNwZWN0aXZlbHkgdG8gdGhlaXIgJSV0eXBlcyUlLlxyXG4gKlxyXG4gKiAgIEBleGFtcGxlOlxyXG4gKiAgICAgICBhZGRyID0gXCIweDhiYTFmMTA5NTUxYmQ0MzI4MDMwMTI2NDVhYzEzNmRkZDY0ZGJhNzJcIlxyXG4gKiAgICAgICBzb2xpZGl0eVBhY2tlZFNoYTI1NihbIFwiYWRkcmVzc1wiLCBcInVpbnRcIiBdLCBbIGFkZHIsIDQ1IF0pO1xyXG4gKiAgICAgICAvL19yZXN1bHQ6XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc29saWRpdHlQYWNrZWRTaGEyNTYodHlwZXMsIHZhbHVlcykge1xyXG4gICAgcmV0dXJuIF9zaGEyNTYoc29saWRpdHlQYWNrZWQodHlwZXMsIHZhbHVlcykpO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNvbGlkaXR5LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/hash/solidity.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/hash/typed-data.js":
/*!********************************************************!*\
  !*** ./node_modules/ethers/lib.esm/hash/typed-data.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TypedDataEncoder: () => (/* binding */ TypedDataEncoder),\n/* harmony export */   verifyTypedData: () => (/* binding */ verifyTypedData)\n/* harmony export */ });\n/* harmony import */ var _address_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../address/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/address/index.js\");\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../crypto/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/index.js\");\n/* harmony import */ var _transaction_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../transaction/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/transaction/index.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/* harmony import */ var _id_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./id.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/hash/id.js\");\n//import { TypedDataDomain, TypedDataField } from \"@ethersproject/providerabstract-signer\";\r\n\r\n\r\n\r\n\r\n\r\nconst padding = new Uint8Array(32);\r\npadding.fill(0);\r\nconst BN__1 = BigInt(-1);\r\nconst BN_0 = BigInt(0);\r\nconst BN_1 = BigInt(1);\r\nconst BN_MAX_UINT256 = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\r\n;\r\n;\r\nfunction hexPadRight(value) {\r\n    const bytes = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(value);\r\n    const padOffset = bytes.length % 32;\r\n    if (padOffset) {\r\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.concat)([bytes, padding.slice(padOffset)]);\r\n    }\r\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(bytes);\r\n}\r\nconst hexTrue = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toBeHex)(BN_1, 32);\r\nconst hexFalse = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toBeHex)(BN_0, 32);\r\nconst domainFieldTypes = {\r\n    name: \"string\",\r\n    version: \"string\",\r\n    chainId: \"uint256\",\r\n    verifyingContract: \"address\",\r\n    salt: \"bytes32\"\r\n};\r\nconst domainFieldNames = [\r\n    \"name\", \"version\", \"chainId\", \"verifyingContract\", \"salt\"\r\n];\r\nfunction checkString(key) {\r\n    return function (value) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(typeof (value) === \"string\", `invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);\r\n        return value;\r\n    };\r\n}\r\nconst domainChecks = {\r\n    name: checkString(\"name\"),\r\n    version: checkString(\"version\"),\r\n    chainId: function (_value) {\r\n        const value = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt)(_value, \"domain.chainId\");\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(value >= 0, \"invalid chain ID\", \"domain.chainId\", _value);\r\n        if (Number.isSafeInteger(value)) {\r\n            return Number(value);\r\n        }\r\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toQuantity)(value);\r\n    },\r\n    verifyingContract: function (value) {\r\n        try {\r\n            return (0,_address_index_js__WEBPACK_IMPORTED_MODULE_1__.getAddress)(value).toLowerCase();\r\n        }\r\n        catch (error) { }\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, `invalid domain value \"verifyingContract\"`, \"domain.verifyingContract\", value);\r\n    },\r\n    salt: function (value) {\r\n        const bytes = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(value, \"domain.salt\");\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(bytes.length === 32, `invalid domain value \"salt\"`, \"domain.salt\", value);\r\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(bytes);\r\n    }\r\n};\r\nfunction getBaseEncoder(type) {\r\n    // intXX and uintXX\r\n    {\r\n        const match = type.match(/^(u?)int(\\d+)$/);\r\n        if (match) {\r\n            const signed = (match[1] === \"\");\r\n            const width = parseInt(match[2]);\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(width % 8 === 0 && width !== 0 && width <= 256 && match[2] === String(width), \"invalid numeric width\", \"type\", type);\r\n            const boundsUpper = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.mask)(BN_MAX_UINT256, signed ? (width - 1) : width);\r\n            const boundsLower = signed ? ((boundsUpper + BN_1) * BN__1) : BN_0;\r\n            return function (_value) {\r\n                const value = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt)(_value, \"value\");\r\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(value >= boundsLower && value <= boundsUpper, `value out-of-bounds for ${type}`, \"value\", value);\r\n                return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toBeHex)(signed ? (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toTwos)(value, 256) : value, 32);\r\n            };\r\n        }\r\n    }\r\n    // bytesXX\r\n    {\r\n        const match = type.match(/^bytes(\\d+)$/);\r\n        if (match) {\r\n            const width = parseInt(match[1]);\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(width !== 0 && width <= 32 && match[1] === String(width), \"invalid bytes width\", \"type\", type);\r\n            return function (value) {\r\n                const bytes = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(value);\r\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(bytes.length === width, `invalid length for ${type}`, \"value\", value);\r\n                return hexPadRight(value);\r\n            };\r\n        }\r\n    }\r\n    switch (type) {\r\n        case \"address\": return function (value) {\r\n            return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.zeroPadValue)((0,_address_index_js__WEBPACK_IMPORTED_MODULE_1__.getAddress)(value), 32);\r\n        };\r\n        case \"bool\": return function (value) {\r\n            return ((!value) ? hexFalse : hexTrue);\r\n        };\r\n        case \"bytes\": return function (value) {\r\n            return (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_2__.keccak256)(value);\r\n        };\r\n        case \"string\": return function (value) {\r\n            return (0,_id_js__WEBPACK_IMPORTED_MODULE_3__.id)(value);\r\n        };\r\n    }\r\n    return null;\r\n}\r\nfunction encodeType(name, fields) {\r\n    return `${name}(${fields.map(({ name, type }) => (type + \" \" + name)).join(\",\")})`;\r\n}\r\n// foo[][3] => { base: \"foo\", index: \"[][3]\", array: {\r\n//     base: \"foo\", prefix: \"foo[]\", count: 3 } }\r\nfunction splitArray(type) {\r\n    const match = type.match(/^([^\\x5b]*)((\\x5b\\d*\\x5d)*)(\\x5b(\\d*)\\x5d)$/);\r\n    if (match) {\r\n        return {\r\n            base: match[1],\r\n            index: (match[2] + match[4]),\r\n            array: {\r\n                base: match[1],\r\n                prefix: (match[1] + match[2]),\r\n                count: (match[5] ? parseInt(match[5]) : -1),\r\n            }\r\n        };\r\n    }\r\n    return { base: type };\r\n}\r\n/**\r\n *  A **TypedDataEncode** prepares and encodes [[link-eip-712]] payloads\r\n *  for signed typed data.\r\n *\r\n *  This is useful for those that wish to compute various components of a\r\n *  typed data hash, primary types, or sub-components, but generally the\r\n *  higher level [[Signer-signTypedData]] is more useful.\r\n */\r\nclass TypedDataEncoder {\r\n    /**\r\n     *  The primary type for the structured [[types]].\r\n     *\r\n     *  This is derived automatically from the [[types]], since no\r\n     *  recursion is possible, once the DAG for the types is consturcted\r\n     *  internally, the primary type must be the only remaining type with\r\n     *  no parent nodes.\r\n     */\r\n    primaryType;\r\n    #types;\r\n    /**\r\n     *  The types.\r\n     */\r\n    get types() {\r\n        return JSON.parse(this.#types);\r\n    }\r\n    #fullTypes;\r\n    #encoderCache;\r\n    /**\r\n     *  Create a new **TypedDataEncoder** for %%types%%.\r\n     *\r\n     *  This performs all necessary checking that types are valid and\r\n     *  do not violate the [[link-eip-712]] structural constraints as\r\n     *  well as computes the [[primaryType]].\r\n     */\r\n    constructor(_types) {\r\n        this.#fullTypes = new Map();\r\n        this.#encoderCache = new Map();\r\n        // Link struct types to their direct child structs\r\n        const links = new Map();\r\n        // Link structs to structs which contain them as a child\r\n        const parents = new Map();\r\n        // Link all subtypes within a given struct\r\n        const subtypes = new Map();\r\n        const types = {};\r\n        Object.keys(_types).forEach((type) => {\r\n            types[type] = _types[type].map(({ name, type }) => {\r\n                // Normalize the base type (unless name conflict)\r\n                let { base, index } = splitArray(type);\r\n                if (base === \"int\" && !_types[\"int\"]) {\r\n                    base = \"int256\";\r\n                }\r\n                if (base === \"uint\" && !_types[\"uint\"]) {\r\n                    base = \"uint256\";\r\n                }\r\n                return { name, type: (base + (index || \"\")) };\r\n            });\r\n            links.set(type, new Set());\r\n            parents.set(type, []);\r\n            subtypes.set(type, new Set());\r\n        });\r\n        this.#types = JSON.stringify(types);\r\n        for (const name in types) {\r\n            const uniqueNames = new Set();\r\n            for (const field of types[name]) {\r\n                // Check each field has a unique name\r\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(!uniqueNames.has(field.name), `duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`, \"types\", _types);\r\n                uniqueNames.add(field.name);\r\n                // Get the base type (drop any array specifiers)\r\n                const baseType = splitArray(field.type).base;\r\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(baseType !== name, `circular type reference to ${JSON.stringify(baseType)}`, \"types\", _types);\r\n                // Is this a base encoding type?\r\n                const encoder = getBaseEncoder(baseType);\r\n                if (encoder) {\r\n                    continue;\r\n                }\r\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(parents.has(baseType), `unknown type ${JSON.stringify(baseType)}`, \"types\", _types);\r\n                // Add linkage\r\n                parents.get(baseType).push(name);\r\n                links.get(name).add(baseType);\r\n            }\r\n        }\r\n        // Deduce the primary type\r\n        const primaryTypes = Array.from(parents.keys()).filter((n) => (parents.get(n).length === 0));\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(primaryTypes.length !== 0, \"missing primary type\", \"types\", _types);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(primaryTypes.length === 1, `ambiguous primary types or unused types: ${primaryTypes.map((t) => (JSON.stringify(t))).join(\", \")}`, \"types\", _types);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, { primaryType: primaryTypes[0] });\r\n        // Check for circular type references\r\n        function checkCircular(type, found) {\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(!found.has(type), `circular type reference to ${JSON.stringify(type)}`, \"types\", _types);\r\n            found.add(type);\r\n            for (const child of links.get(type)) {\r\n                if (!parents.has(child)) {\r\n                    continue;\r\n                }\r\n                // Recursively check children\r\n                checkCircular(child, found);\r\n                // Mark all ancestors as having this decendant\r\n                for (const subtype of found) {\r\n                    subtypes.get(subtype).add(child);\r\n                }\r\n            }\r\n            found.delete(type);\r\n        }\r\n        checkCircular(this.primaryType, new Set());\r\n        // Compute each fully describe type\r\n        for (const [name, set] of subtypes) {\r\n            const st = Array.from(set);\r\n            st.sort();\r\n            this.#fullTypes.set(name, encodeType(name, types[name]) + st.map((t) => encodeType(t, types[t])).join(\"\"));\r\n        }\r\n    }\r\n    /**\r\n     *  Returnthe encoder for the specific %%type%%.\r\n     */\r\n    getEncoder(type) {\r\n        let encoder = this.#encoderCache.get(type);\r\n        if (!encoder) {\r\n            encoder = this.#getEncoder(type);\r\n            this.#encoderCache.set(type, encoder);\r\n        }\r\n        return encoder;\r\n    }\r\n    #getEncoder(type) {\r\n        // Basic encoder type (address, bool, uint256, etc)\r\n        {\r\n            const encoder = getBaseEncoder(type);\r\n            if (encoder) {\r\n                return encoder;\r\n            }\r\n        }\r\n        // Array\r\n        const array = splitArray(type).array;\r\n        if (array) {\r\n            const subtype = array.prefix;\r\n            const subEncoder = this.getEncoder(subtype);\r\n            return (value) => {\r\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(array.count === -1 || array.count === value.length, `array length mismatch; expected length ${array.count}`, \"value\", value);\r\n                let result = value.map(subEncoder);\r\n                if (this.#fullTypes.has(subtype)) {\r\n                    result = result.map(_crypto_index_js__WEBPACK_IMPORTED_MODULE_2__.keccak256);\r\n                }\r\n                return (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_2__.keccak256)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.concat)(result));\r\n            };\r\n        }\r\n        // Struct\r\n        const fields = this.types[type];\r\n        if (fields) {\r\n            const encodedType = (0,_id_js__WEBPACK_IMPORTED_MODULE_3__.id)(this.#fullTypes.get(type));\r\n            return (value) => {\r\n                const values = fields.map(({ name, type }) => {\r\n                    const result = this.getEncoder(type)(value[name]);\r\n                    if (this.#fullTypes.has(type)) {\r\n                        return (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_2__.keccak256)(result);\r\n                    }\r\n                    return result;\r\n                });\r\n                values.unshift(encodedType);\r\n                return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.concat)(values);\r\n            };\r\n        }\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, `unknown type: ${type}`, \"type\", type);\r\n    }\r\n    /**\r\n     *  Return the full type for %%name%%.\r\n     */\r\n    encodeType(name) {\r\n        const result = this.#fullTypes.get(name);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(result, `unknown type: ${JSON.stringify(name)}`, \"name\", name);\r\n        return result;\r\n    }\r\n    /**\r\n     *  Return the encoded %%value%% for the %%type%%.\r\n     */\r\n    encodeData(type, value) {\r\n        return this.getEncoder(type)(value);\r\n    }\r\n    /**\r\n     *  Returns the hash of %%value%% for the type of %%name%%.\r\n     */\r\n    hashStruct(name, value) {\r\n        return (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_2__.keccak256)(this.encodeData(name, value));\r\n    }\r\n    /**\r\n     *  Return the fulled encoded %%value%% for the [[types]].\r\n     */\r\n    encode(value) {\r\n        return this.encodeData(this.primaryType, value);\r\n    }\r\n    /**\r\n     *  Return the hash of the fully encoded %%value%% for the [[types]].\r\n     */\r\n    hash(value) {\r\n        return this.hashStruct(this.primaryType, value);\r\n    }\r\n    /**\r\n     *  @_ignore:\r\n     */\r\n    _visit(type, value, callback) {\r\n        // Basic encoder type (address, bool, uint256, etc)\r\n        {\r\n            const encoder = getBaseEncoder(type);\r\n            if (encoder) {\r\n                return callback(type, value);\r\n            }\r\n        }\r\n        // Array\r\n        const array = splitArray(type).array;\r\n        if (array) {\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(array.count === -1 || array.count === value.length, `array length mismatch; expected length ${array.count}`, \"value\", value);\r\n            return value.map((v) => this._visit(array.prefix, v, callback));\r\n        }\r\n        // Struct\r\n        const fields = this.types[type];\r\n        if (fields) {\r\n            return fields.reduce((accum, { name, type }) => {\r\n                accum[name] = this._visit(type, value[name], callback);\r\n                return accum;\r\n            }, {});\r\n        }\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, `unknown type: ${type}`, \"type\", type);\r\n    }\r\n    /**\r\n     *  Call %%calback%% for each value in %%value%%, passing the type and\r\n     *  component within %%value%%.\r\n     *\r\n     *  This is useful for replacing addresses or other transformation that\r\n     *  may be desired on each component, based on its type.\r\n     */\r\n    visit(value, callback) {\r\n        return this._visit(this.primaryType, value, callback);\r\n    }\r\n    /**\r\n     *  Create a new **TypedDataEncoder** for %%types%%.\r\n     */\r\n    static from(types) {\r\n        return new TypedDataEncoder(types);\r\n    }\r\n    /**\r\n     *  Return the primary type for %%types%%.\r\n     */\r\n    static getPrimaryType(types) {\r\n        return TypedDataEncoder.from(types).primaryType;\r\n    }\r\n    /**\r\n     *  Return the hashed struct for %%value%% using %%types%% and %%name%%.\r\n     */\r\n    static hashStruct(name, types, value) {\r\n        return TypedDataEncoder.from(types).hashStruct(name, value);\r\n    }\r\n    /**\r\n     *  Return the domain hash for %%domain%%.\r\n     */\r\n    static hashDomain(domain) {\r\n        const domainFields = [];\r\n        for (const name in domain) {\r\n            if (domain[name] == null) {\r\n                continue;\r\n            }\r\n            const type = domainFieldTypes[name];\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(type, `invalid typed-data domain key: ${JSON.stringify(name)}`, \"domain\", domain);\r\n            domainFields.push({ name, type });\r\n        }\r\n        domainFields.sort((a, b) => {\r\n            return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);\r\n        });\r\n        return TypedDataEncoder.hashStruct(\"EIP712Domain\", { EIP712Domain: domainFields }, domain);\r\n    }\r\n    /**\r\n     *  Return the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.\r\n     */\r\n    static encode(domain, types, value) {\r\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.concat)([\r\n            \"0x1901\",\r\n            TypedDataEncoder.hashDomain(domain),\r\n            TypedDataEncoder.from(types).hash(value)\r\n        ]);\r\n    }\r\n    /**\r\n     *  Return the hash of the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.\r\n     */\r\n    static hash(domain, types, value) {\r\n        return (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_2__.keccak256)(TypedDataEncoder.encode(domain, types, value));\r\n    }\r\n    // Replaces all address types with ENS names with their looked up address\r\n    /**\r\n     * Resolves to the value from resolving all addresses in %%value%% for\r\n     * %%types%% and the %%domain%%.\r\n     */\r\n    static async resolveNames(domain, types, value, resolveName) {\r\n        // Make a copy to isolate it from the object passed in\r\n        domain = Object.assign({}, domain);\r\n        // Allow passing null to ignore value\r\n        for (const key in domain) {\r\n            if (domain[key] == null) {\r\n                delete domain[key];\r\n            }\r\n        }\r\n        // Look up all ENS names\r\n        const ensCache = {};\r\n        // Do we need to look up the domain's verifyingContract?\r\n        if (domain.verifyingContract && !(0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isHexString)(domain.verifyingContract, 20)) {\r\n            ensCache[domain.verifyingContract] = \"0x\";\r\n        }\r\n        // We are going to use the encoder to visit all the base values\r\n        const encoder = TypedDataEncoder.from(types);\r\n        // Get a list of all the addresses\r\n        encoder.visit(value, (type, value) => {\r\n            if (type === \"address\" && !(0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isHexString)(value, 20)) {\r\n                ensCache[value] = \"0x\";\r\n            }\r\n            return value;\r\n        });\r\n        // Lookup each name\r\n        for (const name in ensCache) {\r\n            ensCache[name] = await resolveName(name);\r\n        }\r\n        // Replace the domain verifyingContract if needed\r\n        if (domain.verifyingContract && ensCache[domain.verifyingContract]) {\r\n            domain.verifyingContract = ensCache[domain.verifyingContract];\r\n        }\r\n        // Replace all ENS names with their address\r\n        value = encoder.visit(value, (type, value) => {\r\n            if (type === \"address\" && ensCache[value]) {\r\n                return ensCache[value];\r\n            }\r\n            return value;\r\n        });\r\n        return { domain, value };\r\n    }\r\n    /**\r\n     *  Returns the JSON-encoded payload expected by nodes which implement\r\n     *  the JSON-RPC [[link-eip-712]] method.\r\n     */\r\n    static getPayload(domain, types, value) {\r\n        // Validate the domain fields\r\n        TypedDataEncoder.hashDomain(domain);\r\n        // Derive the EIP712Domain Struct reference type\r\n        const domainValues = {};\r\n        const domainTypes = [];\r\n        domainFieldNames.forEach((name) => {\r\n            const value = domain[name];\r\n            if (value == null) {\r\n                return;\r\n            }\r\n            domainValues[name] = domainChecks[name](value);\r\n            domainTypes.push({ name, type: domainFieldTypes[name] });\r\n        });\r\n        const encoder = TypedDataEncoder.from(types);\r\n        // Get the normalized types\r\n        types = encoder.types;\r\n        const typesWithDomain = Object.assign({}, types);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(typesWithDomain.EIP712Domain == null, \"types must not contain EIP712Domain type\", \"types.EIP712Domain\", types);\r\n        typesWithDomain.EIP712Domain = domainTypes;\r\n        // Validate the data structures and types\r\n        encoder.encode(value);\r\n        return {\r\n            types: typesWithDomain,\r\n            domain: domainValues,\r\n            primaryType: encoder.primaryType,\r\n            message: encoder.visit(value, (type, value) => {\r\n                // bytes\r\n                if (type.match(/^bytes(\\d*)/)) {\r\n                    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(value));\r\n                }\r\n                // uint or int\r\n                if (type.match(/^u?int/)) {\r\n                    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt)(value).toString();\r\n                }\r\n                switch (type) {\r\n                    case \"address\":\r\n                        return value.toLowerCase();\r\n                    case \"bool\":\r\n                        return !!value;\r\n                    case \"string\":\r\n                        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(typeof (value) === \"string\", \"invalid string\", \"value\", value);\r\n                        return value;\r\n                }\r\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"unsupported type\", \"type\", type);\r\n            })\r\n        };\r\n    }\r\n}\r\n/**\r\n *  Compute the address used to sign the typed data for the %%signature%%.\r\n */\r\nfunction verifyTypedData(domain, types, value, signature) {\r\n    return (0,_transaction_index_js__WEBPACK_IMPORTED_MODULE_4__.recoverAddress)(TypedDataEncoder.hash(domain, types, value), signature);\r\n}\r\n//# sourceMappingURL=typed-data.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9oYXNoL3R5cGVkLWRhdGEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLFdBQVcsa0NBQWtDO0FBQ0k7QUFDRjtBQUNVO0FBQ2dIO0FBQzVJO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQix5REFBUTtBQUMxQjtBQUNBO0FBQ0EsZUFBZSx1REFBTTtBQUNyQjtBQUNBLFdBQVcsd0RBQU87QUFDbEI7QUFDQSxnQkFBZ0Isd0RBQU87QUFDdkIsaUJBQWlCLHdEQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsK0RBQWMsMERBQTBELG9CQUFvQixhQUFhLElBQUk7QUFDckg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsMERBQVM7QUFDL0IsUUFBUSwrREFBYztBQUN0QjtBQUNBO0FBQ0E7QUFDQSxlQUFlLDJEQUFVO0FBQ3pCLEtBQUs7QUFDTDtBQUNBO0FBQ0EsbUJBQW1CLDZEQUFVO0FBQzdCO0FBQ0E7QUFDQSxRQUFRLCtEQUFjO0FBQ3RCLEtBQUs7QUFDTDtBQUNBLHNCQUFzQix5REFBUTtBQUM5QixRQUFRLCtEQUFjO0FBQ3RCLGVBQWUsd0RBQU87QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSwrREFBYztBQUMxQixnQ0FBZ0MscURBQUk7QUFDcEM7QUFDQTtBQUNBLDhCQUE4QiwwREFBUztBQUN2QyxnQkFBZ0IsK0RBQWMsMEVBQTBFLEtBQUs7QUFDN0csdUJBQXVCLHdEQUFPLFVBQVUsdURBQU07QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksK0RBQWM7QUFDMUI7QUFDQSw4QkFBOEIseURBQVE7QUFDdEMsZ0JBQWdCLCtEQUFjLCtDQUErQyxLQUFLO0FBQ2xGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQiw2REFBWSxDQUFDLDZEQUFVO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsMkRBQVM7QUFDNUI7QUFDQTtBQUNBLG1CQUFtQiwwQ0FBRTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxLQUFLLEdBQUcsY0FBYyxZQUFZLG9DQUFvQztBQUNwRjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLFlBQVk7QUFDMUQ7QUFDQSxzQkFBc0IsY0FBYztBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLCtEQUFjLDBEQUEwRCw0QkFBNEIsS0FBSyxxQkFBcUI7QUFDOUk7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLCtEQUFjLGtEQUFrRCx5QkFBeUI7QUFDekc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiwrREFBYyx3Q0FBd0MseUJBQXlCO0FBQy9GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSwrREFBYztBQUN0QixRQUFRLCtEQUFjLHdFQUF3RSx3REFBd0Q7QUFDdEosUUFBUSxpRUFBZ0IsU0FBUyw4QkFBOEI7QUFDL0Q7QUFDQTtBQUNBLFlBQVksK0RBQWMsaURBQWlELHFCQUFxQjtBQUNoRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLCtEQUFjLDZFQUE2RSxrQkFBa0IsWUFBWTtBQUN6STtBQUNBO0FBQ0Esd0NBQXdDLHVEQUFTO0FBQ2pEO0FBQ0EsdUJBQXVCLDJEQUFTLENBQUMsdURBQU07QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQywwQ0FBRTtBQUNsQztBQUNBLDZDQUE2QyxZQUFZO0FBQ3pEO0FBQ0E7QUFDQSwrQkFBK0IsMkRBQVM7QUFDeEM7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLHVCQUF1Qix1REFBTTtBQUM3QjtBQUNBO0FBQ0EsUUFBUSwrREFBYyx5QkFBeUIsS0FBSztBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLCtEQUFjLDBCQUEwQixxQkFBcUI7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSwyREFBUztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLCtEQUFjLDZFQUE2RSxrQkFBa0IsWUFBWTtBQUNySTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLFlBQVk7QUFDdkQ7QUFDQTtBQUNBLGFBQWEsSUFBSTtBQUNqQjtBQUNBLFFBQVEsK0RBQWMseUJBQXlCLEtBQUs7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSwrREFBYyx5Q0FBeUMscUJBQXFCO0FBQ3hGLGdDQUFnQyxZQUFZO0FBQzVDO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCw2REFBNkQsNEJBQTRCO0FBQ3pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHVEQUFNO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsMkRBQVM7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsNERBQVc7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLDREQUFXO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLG9DQUFvQztBQUNuRSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdEO0FBQ2hELFFBQVEsK0RBQWM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsd0RBQU8sQ0FBQyx5REFBUTtBQUMzQztBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsMERBQVM7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsK0RBQWM7QUFDdEM7QUFDQTtBQUNBLGdCQUFnQiwrREFBYztBQUM5QixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxXQUFXLHFFQUFjO0FBQ3pCO0FBQ0EiLCJzb3VyY2VzIjpbIkQ6XFxEb19hbjJcXGxlbmRodWJfdjJcXGxlbmRodWItZnJvbnRlbmQtbmV4dGpzXFxub2RlX21vZHVsZXNcXGV0aGVyc1xcbGliLmVzbVxcaGFzaFxcdHlwZWQtZGF0YS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvL2ltcG9ydCB7IFR5cGVkRGF0YURvbWFpbiwgVHlwZWREYXRhRmllbGQgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvcHJvdmlkZXJhYnN0cmFjdC1zaWduZXJcIjtcclxuaW1wb3J0IHsgZ2V0QWRkcmVzcyB9IGZyb20gXCIuLi9hZGRyZXNzL2luZGV4LmpzXCI7XHJcbmltcG9ydCB7IGtlY2NhazI1NiB9IGZyb20gXCIuLi9jcnlwdG8vaW5kZXguanNcIjtcclxuaW1wb3J0IHsgcmVjb3ZlckFkZHJlc3MgfSBmcm9tIFwiLi4vdHJhbnNhY3Rpb24vaW5kZXguanNcIjtcclxuaW1wb3J0IHsgY29uY2F0LCBkZWZpbmVQcm9wZXJ0aWVzLCBnZXRCaWdJbnQsIGdldEJ5dGVzLCBoZXhsaWZ5LCBpc0hleFN0cmluZywgbWFzaywgdG9CZUhleCwgdG9RdWFudGl0eSwgdG9Ud29zLCB6ZXJvUGFkVmFsdWUsIGFzc2VydEFyZ3VtZW50IH0gZnJvbSBcIi4uL3V0aWxzL2luZGV4LmpzXCI7XHJcbmltcG9ydCB7IGlkIH0gZnJvbSBcIi4vaWQuanNcIjtcclxuY29uc3QgcGFkZGluZyA9IG5ldyBVaW50OEFycmF5KDMyKTtcclxucGFkZGluZy5maWxsKDApO1xyXG5jb25zdCBCTl9fMSA9IEJpZ0ludCgtMSk7XHJcbmNvbnN0IEJOXzAgPSBCaWdJbnQoMCk7XHJcbmNvbnN0IEJOXzEgPSBCaWdJbnQoMSk7XHJcbmNvbnN0IEJOX01BWF9VSU5UMjU2ID0gQmlnSW50KFwiMHhmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmXCIpO1xyXG47XHJcbjtcclxuZnVuY3Rpb24gaGV4UGFkUmlnaHQodmFsdWUpIHtcclxuICAgIGNvbnN0IGJ5dGVzID0gZ2V0Qnl0ZXModmFsdWUpO1xyXG4gICAgY29uc3QgcGFkT2Zmc2V0ID0gYnl0ZXMubGVuZ3RoICUgMzI7XHJcbiAgICBpZiAocGFkT2Zmc2V0KSB7XHJcbiAgICAgICAgcmV0dXJuIGNvbmNhdChbYnl0ZXMsIHBhZGRpbmcuc2xpY2UocGFkT2Zmc2V0KV0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGhleGxpZnkoYnl0ZXMpO1xyXG59XHJcbmNvbnN0IGhleFRydWUgPSB0b0JlSGV4KEJOXzEsIDMyKTtcclxuY29uc3QgaGV4RmFsc2UgPSB0b0JlSGV4KEJOXzAsIDMyKTtcclxuY29uc3QgZG9tYWluRmllbGRUeXBlcyA9IHtcclxuICAgIG5hbWU6IFwic3RyaW5nXCIsXHJcbiAgICB2ZXJzaW9uOiBcInN0cmluZ1wiLFxyXG4gICAgY2hhaW5JZDogXCJ1aW50MjU2XCIsXHJcbiAgICB2ZXJpZnlpbmdDb250cmFjdDogXCJhZGRyZXNzXCIsXHJcbiAgICBzYWx0OiBcImJ5dGVzMzJcIlxyXG59O1xyXG5jb25zdCBkb21haW5GaWVsZE5hbWVzID0gW1xyXG4gICAgXCJuYW1lXCIsIFwidmVyc2lvblwiLCBcImNoYWluSWRcIiwgXCJ2ZXJpZnlpbmdDb250cmFjdFwiLCBcInNhbHRcIlxyXG5dO1xyXG5mdW5jdGlvbiBjaGVja1N0cmluZyhrZXkpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICBhc3NlcnRBcmd1bWVudCh0eXBlb2YgKHZhbHVlKSA9PT0gXCJzdHJpbmdcIiwgYGludmFsaWQgZG9tYWluIHZhbHVlIGZvciAke0pTT04uc3RyaW5naWZ5KGtleSl9YCwgYGRvbWFpbi4ke2tleX1gLCB2YWx1ZSk7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfTtcclxufVxyXG5jb25zdCBkb21haW5DaGVja3MgPSB7XHJcbiAgICBuYW1lOiBjaGVja1N0cmluZyhcIm5hbWVcIiksXHJcbiAgICB2ZXJzaW9uOiBjaGVja1N0cmluZyhcInZlcnNpb25cIiksXHJcbiAgICBjaGFpbklkOiBmdW5jdGlvbiAoX3ZhbHVlKSB7XHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSBnZXRCaWdJbnQoX3ZhbHVlLCBcImRvbWFpbi5jaGFpbklkXCIpO1xyXG4gICAgICAgIGFzc2VydEFyZ3VtZW50KHZhbHVlID49IDAsIFwiaW52YWxpZCBjaGFpbiBJRFwiLCBcImRvbWFpbi5jaGFpbklkXCIsIF92YWx1ZSk7XHJcbiAgICAgICAgaWYgKE51bWJlci5pc1NhZmVJbnRlZ2VyKHZhbHVlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gTnVtYmVyKHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRvUXVhbnRpdHkodmFsdWUpO1xyXG4gICAgfSxcclxuICAgIHZlcmlmeWluZ0NvbnRyYWN0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICByZXR1cm4gZ2V0QWRkcmVzcyh2YWx1ZSkudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7IH1cclxuICAgICAgICBhc3NlcnRBcmd1bWVudChmYWxzZSwgYGludmFsaWQgZG9tYWluIHZhbHVlIFwidmVyaWZ5aW5nQ29udHJhY3RcImAsIFwiZG9tYWluLnZlcmlmeWluZ0NvbnRyYWN0XCIsIHZhbHVlKTtcclxuICAgIH0sXHJcbiAgICBzYWx0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICBjb25zdCBieXRlcyA9IGdldEJ5dGVzKHZhbHVlLCBcImRvbWFpbi5zYWx0XCIpO1xyXG4gICAgICAgIGFzc2VydEFyZ3VtZW50KGJ5dGVzLmxlbmd0aCA9PT0gMzIsIGBpbnZhbGlkIGRvbWFpbiB2YWx1ZSBcInNhbHRcImAsIFwiZG9tYWluLnNhbHRcIiwgdmFsdWUpO1xyXG4gICAgICAgIHJldHVybiBoZXhsaWZ5KGJ5dGVzKTtcclxuICAgIH1cclxufTtcclxuZnVuY3Rpb24gZ2V0QmFzZUVuY29kZXIodHlwZSkge1xyXG4gICAgLy8gaW50WFggYW5kIHVpbnRYWFxyXG4gICAge1xyXG4gICAgICAgIGNvbnN0IG1hdGNoID0gdHlwZS5tYXRjaCgvXih1PylpbnQoXFxkKykkLyk7XHJcbiAgICAgICAgaWYgKG1hdGNoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNpZ25lZCA9IChtYXRjaFsxXSA9PT0gXCJcIik7XHJcbiAgICAgICAgICAgIGNvbnN0IHdpZHRoID0gcGFyc2VJbnQobWF0Y2hbMl0pO1xyXG4gICAgICAgICAgICBhc3NlcnRBcmd1bWVudCh3aWR0aCAlIDggPT09IDAgJiYgd2lkdGggIT09IDAgJiYgd2lkdGggPD0gMjU2ICYmIG1hdGNoWzJdID09PSBTdHJpbmcod2lkdGgpLCBcImludmFsaWQgbnVtZXJpYyB3aWR0aFwiLCBcInR5cGVcIiwgdHlwZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGJvdW5kc1VwcGVyID0gbWFzayhCTl9NQVhfVUlOVDI1Niwgc2lnbmVkID8gKHdpZHRoIC0gMSkgOiB3aWR0aCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGJvdW5kc0xvd2VyID0gc2lnbmVkID8gKChib3VuZHNVcHBlciArIEJOXzEpICogQk5fXzEpIDogQk5fMDtcclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChfdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gZ2V0QmlnSW50KF92YWx1ZSwgXCJ2YWx1ZVwiKTtcclxuICAgICAgICAgICAgICAgIGFzc2VydEFyZ3VtZW50KHZhbHVlID49IGJvdW5kc0xvd2VyICYmIHZhbHVlIDw9IGJvdW5kc1VwcGVyLCBgdmFsdWUgb3V0LW9mLWJvdW5kcyBmb3IgJHt0eXBlfWAsIFwidmFsdWVcIiwgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRvQmVIZXgoc2lnbmVkID8gdG9Ud29zKHZhbHVlLCAyNTYpIDogdmFsdWUsIDMyKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBieXRlc1hYXHJcbiAgICB7XHJcbiAgICAgICAgY29uc3QgbWF0Y2ggPSB0eXBlLm1hdGNoKC9eYnl0ZXMoXFxkKykkLyk7XHJcbiAgICAgICAgaWYgKG1hdGNoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHdpZHRoID0gcGFyc2VJbnQobWF0Y2hbMV0pO1xyXG4gICAgICAgICAgICBhc3NlcnRBcmd1bWVudCh3aWR0aCAhPT0gMCAmJiB3aWR0aCA8PSAzMiAmJiBtYXRjaFsxXSA9PT0gU3RyaW5nKHdpZHRoKSwgXCJpbnZhbGlkIGJ5dGVzIHdpZHRoXCIsIFwidHlwZVwiLCB0eXBlKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYnl0ZXMgPSBnZXRCeXRlcyh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBhc3NlcnRBcmd1bWVudChieXRlcy5sZW5ndGggPT09IHdpZHRoLCBgaW52YWxpZCBsZW5ndGggZm9yICR7dHlwZX1gLCBcInZhbHVlXCIsIHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBoZXhQYWRSaWdodCh2YWx1ZSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgY2FzZSBcImFkZHJlc3NcIjogcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gemVyb1BhZFZhbHVlKGdldEFkZHJlc3ModmFsdWUpLCAzMik7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBjYXNlIFwiYm9vbFwiOiByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoKCF2YWx1ZSkgPyBoZXhGYWxzZSA6IGhleFRydWUpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgY2FzZSBcImJ5dGVzXCI6IHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGtlY2NhazI1Nih2YWx1ZSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBjYXNlIFwic3RyaW5nXCI6IHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGlkKHZhbHVlKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn1cclxuZnVuY3Rpb24gZW5jb2RlVHlwZShuYW1lLCBmaWVsZHMpIHtcclxuICAgIHJldHVybiBgJHtuYW1lfSgke2ZpZWxkcy5tYXAoKHsgbmFtZSwgdHlwZSB9KSA9PiAodHlwZSArIFwiIFwiICsgbmFtZSkpLmpvaW4oXCIsXCIpfSlgO1xyXG59XHJcbi8vIGZvb1tdWzNdID0+IHsgYmFzZTogXCJmb29cIiwgaW5kZXg6IFwiW11bM11cIiwgYXJyYXk6IHtcclxuLy8gICAgIGJhc2U6IFwiZm9vXCIsIHByZWZpeDogXCJmb29bXVwiLCBjb3VudDogMyB9IH1cclxuZnVuY3Rpb24gc3BsaXRBcnJheSh0eXBlKSB7XHJcbiAgICBjb25zdCBtYXRjaCA9IHR5cGUubWF0Y2goL14oW15cXHg1Yl0qKSgoXFx4NWJcXGQqXFx4NWQpKikoXFx4NWIoXFxkKilcXHg1ZCkkLyk7XHJcbiAgICBpZiAobWF0Y2gpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBiYXNlOiBtYXRjaFsxXSxcclxuICAgICAgICAgICAgaW5kZXg6IChtYXRjaFsyXSArIG1hdGNoWzRdKSxcclxuICAgICAgICAgICAgYXJyYXk6IHtcclxuICAgICAgICAgICAgICAgIGJhc2U6IG1hdGNoWzFdLFxyXG4gICAgICAgICAgICAgICAgcHJlZml4OiAobWF0Y2hbMV0gKyBtYXRjaFsyXSksXHJcbiAgICAgICAgICAgICAgICBjb3VudDogKG1hdGNoWzVdID8gcGFyc2VJbnQobWF0Y2hbNV0pIDogLTEpLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIHJldHVybiB7IGJhc2U6IHR5cGUgfTtcclxufVxyXG4vKipcclxuICogIEEgKipUeXBlZERhdGFFbmNvZGUqKiBwcmVwYXJlcyBhbmQgZW5jb2RlcyBbW2xpbmstZWlwLTcxMl1dIHBheWxvYWRzXHJcbiAqICBmb3Igc2lnbmVkIHR5cGVkIGRhdGEuXHJcbiAqXHJcbiAqICBUaGlzIGlzIHVzZWZ1bCBmb3IgdGhvc2UgdGhhdCB3aXNoIHRvIGNvbXB1dGUgdmFyaW91cyBjb21wb25lbnRzIG9mIGFcclxuICogIHR5cGVkIGRhdGEgaGFzaCwgcHJpbWFyeSB0eXBlcywgb3Igc3ViLWNvbXBvbmVudHMsIGJ1dCBnZW5lcmFsbHkgdGhlXHJcbiAqICBoaWdoZXIgbGV2ZWwgW1tTaWduZXItc2lnblR5cGVkRGF0YV1dIGlzIG1vcmUgdXNlZnVsLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFR5cGVkRGF0YUVuY29kZXIge1xyXG4gICAgLyoqXHJcbiAgICAgKiAgVGhlIHByaW1hcnkgdHlwZSBmb3IgdGhlIHN0cnVjdHVyZWQgW1t0eXBlc11dLlxyXG4gICAgICpcclxuICAgICAqICBUaGlzIGlzIGRlcml2ZWQgYXV0b21hdGljYWxseSBmcm9tIHRoZSBbW3R5cGVzXV0sIHNpbmNlIG5vXHJcbiAgICAgKiAgcmVjdXJzaW9uIGlzIHBvc3NpYmxlLCBvbmNlIHRoZSBEQUcgZm9yIHRoZSB0eXBlcyBpcyBjb25zdHVyY3RlZFxyXG4gICAgICogIGludGVybmFsbHksIHRoZSBwcmltYXJ5IHR5cGUgbXVzdCBiZSB0aGUgb25seSByZW1haW5pbmcgdHlwZSB3aXRoXHJcbiAgICAgKiAgbm8gcGFyZW50IG5vZGVzLlxyXG4gICAgICovXHJcbiAgICBwcmltYXJ5VHlwZTtcclxuICAgICN0eXBlcztcclxuICAgIC8qKlxyXG4gICAgICogIFRoZSB0eXBlcy5cclxuICAgICAqL1xyXG4gICAgZ2V0IHR5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKHRoaXMuI3R5cGVzKTtcclxuICAgIH1cclxuICAgICNmdWxsVHlwZXM7XHJcbiAgICAjZW5jb2RlckNhY2hlO1xyXG4gICAgLyoqXHJcbiAgICAgKiAgQ3JlYXRlIGEgbmV3ICoqVHlwZWREYXRhRW5jb2RlcioqIGZvciAlJXR5cGVzJSUuXHJcbiAgICAgKlxyXG4gICAgICogIFRoaXMgcGVyZm9ybXMgYWxsIG5lY2Vzc2FyeSBjaGVja2luZyB0aGF0IHR5cGVzIGFyZSB2YWxpZCBhbmRcclxuICAgICAqICBkbyBub3QgdmlvbGF0ZSB0aGUgW1tsaW5rLWVpcC03MTJdXSBzdHJ1Y3R1cmFsIGNvbnN0cmFpbnRzIGFzXHJcbiAgICAgKiAgd2VsbCBhcyBjb21wdXRlcyB0aGUgW1twcmltYXJ5VHlwZV1dLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihfdHlwZXMpIHtcclxuICAgICAgICB0aGlzLiNmdWxsVHlwZXMgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgdGhpcy4jZW5jb2RlckNhY2hlID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIC8vIExpbmsgc3RydWN0IHR5cGVzIHRvIHRoZWlyIGRpcmVjdCBjaGlsZCBzdHJ1Y3RzXHJcbiAgICAgICAgY29uc3QgbGlua3MgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgLy8gTGluayBzdHJ1Y3RzIHRvIHN0cnVjdHMgd2hpY2ggY29udGFpbiB0aGVtIGFzIGEgY2hpbGRcclxuICAgICAgICBjb25zdCBwYXJlbnRzID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIC8vIExpbmsgYWxsIHN1YnR5cGVzIHdpdGhpbiBhIGdpdmVuIHN0cnVjdFxyXG4gICAgICAgIGNvbnN0IHN1YnR5cGVzID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIGNvbnN0IHR5cGVzID0ge307XHJcbiAgICAgICAgT2JqZWN0LmtleXMoX3R5cGVzKS5mb3JFYWNoKCh0eXBlKSA9PiB7XHJcbiAgICAgICAgICAgIHR5cGVzW3R5cGVdID0gX3R5cGVzW3R5cGVdLm1hcCgoeyBuYW1lLCB0eXBlIH0pID0+IHtcclxuICAgICAgICAgICAgICAgIC8vIE5vcm1hbGl6ZSB0aGUgYmFzZSB0eXBlICh1bmxlc3MgbmFtZSBjb25mbGljdClcclxuICAgICAgICAgICAgICAgIGxldCB7IGJhc2UsIGluZGV4IH0gPSBzcGxpdEFycmF5KHR5cGUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGJhc2UgPT09IFwiaW50XCIgJiYgIV90eXBlc1tcImludFwiXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJhc2UgPSBcImludDI1NlwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGJhc2UgPT09IFwidWludFwiICYmICFfdHlwZXNbXCJ1aW50XCJdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYmFzZSA9IFwidWludDI1NlwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgbmFtZSwgdHlwZTogKGJhc2UgKyAoaW5kZXggfHwgXCJcIikpIH07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBsaW5rcy5zZXQodHlwZSwgbmV3IFNldCgpKTtcclxuICAgICAgICAgICAgcGFyZW50cy5zZXQodHlwZSwgW10pO1xyXG4gICAgICAgICAgICBzdWJ0eXBlcy5zZXQodHlwZSwgbmV3IFNldCgpKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLiN0eXBlcyA9IEpTT04uc3RyaW5naWZ5KHR5cGVzKTtcclxuICAgICAgICBmb3IgKGNvbnN0IG5hbWUgaW4gdHlwZXMpIHtcclxuICAgICAgICAgICAgY29uc3QgdW5pcXVlTmFtZXMgPSBuZXcgU2V0KCk7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgZmllbGQgb2YgdHlwZXNbbmFtZV0pIHtcclxuICAgICAgICAgICAgICAgIC8vIENoZWNrIGVhY2ggZmllbGQgaGFzIGEgdW5pcXVlIG5hbWVcclxuICAgICAgICAgICAgICAgIGFzc2VydEFyZ3VtZW50KCF1bmlxdWVOYW1lcy5oYXMoZmllbGQubmFtZSksIGBkdXBsaWNhdGUgdmFyaWFibGUgbmFtZSAke0pTT04uc3RyaW5naWZ5KGZpZWxkLm5hbWUpfSBpbiAke0pTT04uc3RyaW5naWZ5KG5hbWUpfWAsIFwidHlwZXNcIiwgX3R5cGVzKTtcclxuICAgICAgICAgICAgICAgIHVuaXF1ZU5hbWVzLmFkZChmaWVsZC5uYW1lKTtcclxuICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgYmFzZSB0eXBlIChkcm9wIGFueSBhcnJheSBzcGVjaWZpZXJzKVxyXG4gICAgICAgICAgICAgICAgY29uc3QgYmFzZVR5cGUgPSBzcGxpdEFycmF5KGZpZWxkLnR5cGUpLmJhc2U7XHJcbiAgICAgICAgICAgICAgICBhc3NlcnRBcmd1bWVudChiYXNlVHlwZSAhPT0gbmFtZSwgYGNpcmN1bGFyIHR5cGUgcmVmZXJlbmNlIHRvICR7SlNPTi5zdHJpbmdpZnkoYmFzZVR5cGUpfWAsIFwidHlwZXNcIiwgX3R5cGVzKTtcclxuICAgICAgICAgICAgICAgIC8vIElzIHRoaXMgYSBiYXNlIGVuY29kaW5nIHR5cGU/XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlbmNvZGVyID0gZ2V0QmFzZUVuY29kZXIoYmFzZVR5cGUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGVuY29kZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGFzc2VydEFyZ3VtZW50KHBhcmVudHMuaGFzKGJhc2VUeXBlKSwgYHVua25vd24gdHlwZSAke0pTT04uc3RyaW5naWZ5KGJhc2VUeXBlKX1gLCBcInR5cGVzXCIsIF90eXBlcyk7XHJcbiAgICAgICAgICAgICAgICAvLyBBZGQgbGlua2FnZVxyXG4gICAgICAgICAgICAgICAgcGFyZW50cy5nZXQoYmFzZVR5cGUpLnB1c2gobmFtZSk7XHJcbiAgICAgICAgICAgICAgICBsaW5rcy5nZXQobmFtZSkuYWRkKGJhc2VUeXBlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBEZWR1Y2UgdGhlIHByaW1hcnkgdHlwZVxyXG4gICAgICAgIGNvbnN0IHByaW1hcnlUeXBlcyA9IEFycmF5LmZyb20ocGFyZW50cy5rZXlzKCkpLmZpbHRlcigobikgPT4gKHBhcmVudHMuZ2V0KG4pLmxlbmd0aCA9PT0gMCkpO1xyXG4gICAgICAgIGFzc2VydEFyZ3VtZW50KHByaW1hcnlUeXBlcy5sZW5ndGggIT09IDAsIFwibWlzc2luZyBwcmltYXJ5IHR5cGVcIiwgXCJ0eXBlc1wiLCBfdHlwZXMpO1xyXG4gICAgICAgIGFzc2VydEFyZ3VtZW50KHByaW1hcnlUeXBlcy5sZW5ndGggPT09IDEsIGBhbWJpZ3VvdXMgcHJpbWFyeSB0eXBlcyBvciB1bnVzZWQgdHlwZXM6ICR7cHJpbWFyeVR5cGVzLm1hcCgodCkgPT4gKEpTT04uc3RyaW5naWZ5KHQpKSkuam9pbihcIiwgXCIpfWAsIFwidHlwZXNcIiwgX3R5cGVzKTtcclxuICAgICAgICBkZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHsgcHJpbWFyeVR5cGU6IHByaW1hcnlUeXBlc1swXSB9KTtcclxuICAgICAgICAvLyBDaGVjayBmb3IgY2lyY3VsYXIgdHlwZSByZWZlcmVuY2VzXHJcbiAgICAgICAgZnVuY3Rpb24gY2hlY2tDaXJjdWxhcih0eXBlLCBmb3VuZCkge1xyXG4gICAgICAgICAgICBhc3NlcnRBcmd1bWVudCghZm91bmQuaGFzKHR5cGUpLCBgY2lyY3VsYXIgdHlwZSByZWZlcmVuY2UgdG8gJHtKU09OLnN0cmluZ2lmeSh0eXBlKX1gLCBcInR5cGVzXCIsIF90eXBlcyk7XHJcbiAgICAgICAgICAgIGZvdW5kLmFkZCh0eXBlKTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiBsaW5rcy5nZXQodHlwZSkpIHtcclxuICAgICAgICAgICAgICAgIGlmICghcGFyZW50cy5oYXMoY2hpbGQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBSZWN1cnNpdmVseSBjaGVjayBjaGlsZHJlblxyXG4gICAgICAgICAgICAgICAgY2hlY2tDaXJjdWxhcihjaGlsZCwgZm91bmQpO1xyXG4gICAgICAgICAgICAgICAgLy8gTWFyayBhbGwgYW5jZXN0b3JzIGFzIGhhdmluZyB0aGlzIGRlY2VuZGFudFxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBzdWJ0eXBlIG9mIGZvdW5kKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3VidHlwZXMuZ2V0KHN1YnR5cGUpLmFkZChjaGlsZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm91bmQuZGVsZXRlKHR5cGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjaGVja0NpcmN1bGFyKHRoaXMucHJpbWFyeVR5cGUsIG5ldyBTZXQoKSk7XHJcbiAgICAgICAgLy8gQ29tcHV0ZSBlYWNoIGZ1bGx5IGRlc2NyaWJlIHR5cGVcclxuICAgICAgICBmb3IgKGNvbnN0IFtuYW1lLCBzZXRdIG9mIHN1YnR5cGVzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0ID0gQXJyYXkuZnJvbShzZXQpO1xyXG4gICAgICAgICAgICBzdC5zb3J0KCk7XHJcbiAgICAgICAgICAgIHRoaXMuI2Z1bGxUeXBlcy5zZXQobmFtZSwgZW5jb2RlVHlwZShuYW1lLCB0eXBlc1tuYW1lXSkgKyBzdC5tYXAoKHQpID0+IGVuY29kZVR5cGUodCwgdHlwZXNbdF0pKS5qb2luKFwiXCIpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqICBSZXR1cm50aGUgZW5jb2RlciBmb3IgdGhlIHNwZWNpZmljICUldHlwZSUlLlxyXG4gICAgICovXHJcbiAgICBnZXRFbmNvZGVyKHR5cGUpIHtcclxuICAgICAgICBsZXQgZW5jb2RlciA9IHRoaXMuI2VuY29kZXJDYWNoZS5nZXQodHlwZSk7XHJcbiAgICAgICAgaWYgKCFlbmNvZGVyKSB7XHJcbiAgICAgICAgICAgIGVuY29kZXIgPSB0aGlzLiNnZXRFbmNvZGVyKHR5cGUpO1xyXG4gICAgICAgICAgICB0aGlzLiNlbmNvZGVyQ2FjaGUuc2V0KHR5cGUsIGVuY29kZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZW5jb2RlcjtcclxuICAgIH1cclxuICAgICNnZXRFbmNvZGVyKHR5cGUpIHtcclxuICAgICAgICAvLyBCYXNpYyBlbmNvZGVyIHR5cGUgKGFkZHJlc3MsIGJvb2wsIHVpbnQyNTYsIGV0YylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVuY29kZXIgPSBnZXRCYXNlRW5jb2Rlcih0eXBlKTtcclxuICAgICAgICAgICAgaWYgKGVuY29kZXIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlbmNvZGVyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEFycmF5XHJcbiAgICAgICAgY29uc3QgYXJyYXkgPSBzcGxpdEFycmF5KHR5cGUpLmFycmF5O1xyXG4gICAgICAgIGlmIChhcnJheSkge1xyXG4gICAgICAgICAgICBjb25zdCBzdWJ0eXBlID0gYXJyYXkucHJlZml4O1xyXG4gICAgICAgICAgICBjb25zdCBzdWJFbmNvZGVyID0gdGhpcy5nZXRFbmNvZGVyKHN1YnR5cGUpO1xyXG4gICAgICAgICAgICByZXR1cm4gKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBhc3NlcnRBcmd1bWVudChhcnJheS5jb3VudCA9PT0gLTEgfHwgYXJyYXkuY291bnQgPT09IHZhbHVlLmxlbmd0aCwgYGFycmF5IGxlbmd0aCBtaXNtYXRjaDsgZXhwZWN0ZWQgbGVuZ3RoICR7YXJyYXkuY291bnR9YCwgXCJ2YWx1ZVwiLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gdmFsdWUubWFwKHN1YkVuY29kZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuI2Z1bGxUeXBlcy5oYXMoc3VidHlwZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHQubWFwKGtlY2NhazI1Nik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ga2VjY2FrMjU2KGNvbmNhdChyZXN1bHQpKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gU3RydWN0XHJcbiAgICAgICAgY29uc3QgZmllbGRzID0gdGhpcy50eXBlc1t0eXBlXTtcclxuICAgICAgICBpZiAoZmllbGRzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVuY29kZWRUeXBlID0gaWQodGhpcy4jZnVsbFR5cGVzLmdldCh0eXBlKSk7XHJcbiAgICAgICAgICAgIHJldHVybiAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlcyA9IGZpZWxkcy5tYXAoKHsgbmFtZSwgdHlwZSB9KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5nZXRFbmNvZGVyKHR5cGUpKHZhbHVlW25hbWVdKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy4jZnVsbFR5cGVzLmhhcyh0eXBlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ga2VjY2FrMjU2KHJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHZhbHVlcy51bnNoaWZ0KGVuY29kZWRUeXBlKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb25jYXQodmFsdWVzKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYXNzZXJ0QXJndW1lbnQoZmFsc2UsIGB1bmtub3duIHR5cGU6ICR7dHlwZX1gLCBcInR5cGVcIiwgdHlwZSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqICBSZXR1cm4gdGhlIGZ1bGwgdHlwZSBmb3IgJSVuYW1lJSUuXHJcbiAgICAgKi9cclxuICAgIGVuY29kZVR5cGUobmFtZSkge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuI2Z1bGxUeXBlcy5nZXQobmFtZSk7XHJcbiAgICAgICAgYXNzZXJ0QXJndW1lbnQocmVzdWx0LCBgdW5rbm93biB0eXBlOiAke0pTT04uc3RyaW5naWZ5KG5hbWUpfWAsIFwibmFtZVwiLCBuYW1lKTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgUmV0dXJuIHRoZSBlbmNvZGVkICUldmFsdWUlJSBmb3IgdGhlICUldHlwZSUlLlxyXG4gICAgICovXHJcbiAgICBlbmNvZGVEYXRhKHR5cGUsIHZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RW5jb2Rlcih0eXBlKSh2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqICBSZXR1cm5zIHRoZSBoYXNoIG9mICUldmFsdWUlJSBmb3IgdGhlIHR5cGUgb2YgJSVuYW1lJSUuXHJcbiAgICAgKi9cclxuICAgIGhhc2hTdHJ1Y3QobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICByZXR1cm4ga2VjY2FrMjU2KHRoaXMuZW5jb2RlRGF0YShuYW1lLCB2YWx1ZSkpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgUmV0dXJuIHRoZSBmdWxsZWQgZW5jb2RlZCAlJXZhbHVlJSUgZm9yIHRoZSBbW3R5cGVzXV0uXHJcbiAgICAgKi9cclxuICAgIGVuY29kZSh2YWx1ZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVuY29kZURhdGEodGhpcy5wcmltYXJ5VHlwZSwgdmFsdWUpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgUmV0dXJuIHRoZSBoYXNoIG9mIHRoZSBmdWxseSBlbmNvZGVkICUldmFsdWUlJSBmb3IgdGhlIFtbdHlwZXNdXS5cclxuICAgICAqL1xyXG4gICAgaGFzaCh2YWx1ZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmhhc2hTdHJ1Y3QodGhpcy5wcmltYXJ5VHlwZSwgdmFsdWUpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgQF9pZ25vcmU6XHJcbiAgICAgKi9cclxuICAgIF92aXNpdCh0eXBlLCB2YWx1ZSwgY2FsbGJhY2spIHtcclxuICAgICAgICAvLyBCYXNpYyBlbmNvZGVyIHR5cGUgKGFkZHJlc3MsIGJvb2wsIHVpbnQyNTYsIGV0YylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVuY29kZXIgPSBnZXRCYXNlRW5jb2Rlcih0eXBlKTtcclxuICAgICAgICAgICAgaWYgKGVuY29kZXIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayh0eXBlLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQXJyYXlcclxuICAgICAgICBjb25zdCBhcnJheSA9IHNwbGl0QXJyYXkodHlwZSkuYXJyYXk7XHJcbiAgICAgICAgaWYgKGFycmF5KSB7XHJcbiAgICAgICAgICAgIGFzc2VydEFyZ3VtZW50KGFycmF5LmNvdW50ID09PSAtMSB8fCBhcnJheS5jb3VudCA9PT0gdmFsdWUubGVuZ3RoLCBgYXJyYXkgbGVuZ3RoIG1pc21hdGNoOyBleHBlY3RlZCBsZW5ndGggJHthcnJheS5jb3VudH1gLCBcInZhbHVlXCIsIHZhbHVlKTtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLm1hcCgodikgPT4gdGhpcy5fdmlzaXQoYXJyYXkucHJlZml4LCB2LCBjYWxsYmFjaykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBTdHJ1Y3RcclxuICAgICAgICBjb25zdCBmaWVsZHMgPSB0aGlzLnR5cGVzW3R5cGVdO1xyXG4gICAgICAgIGlmIChmaWVsZHMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZpZWxkcy5yZWR1Y2UoKGFjY3VtLCB7IG5hbWUsIHR5cGUgfSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgYWNjdW1bbmFtZV0gPSB0aGlzLl92aXNpdCh0eXBlLCB2YWx1ZVtuYW1lXSwgY2FsbGJhY2spO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjY3VtO1xyXG4gICAgICAgICAgICB9LCB7fSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFzc2VydEFyZ3VtZW50KGZhbHNlLCBgdW5rbm93biB0eXBlOiAke3R5cGV9YCwgXCJ0eXBlXCIsIHR5cGUpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgQ2FsbCAlJWNhbGJhY2slJSBmb3IgZWFjaCB2YWx1ZSBpbiAlJXZhbHVlJSUsIHBhc3NpbmcgdGhlIHR5cGUgYW5kXHJcbiAgICAgKiAgY29tcG9uZW50IHdpdGhpbiAlJXZhbHVlJSUuXHJcbiAgICAgKlxyXG4gICAgICogIFRoaXMgaXMgdXNlZnVsIGZvciByZXBsYWNpbmcgYWRkcmVzc2VzIG9yIG90aGVyIHRyYW5zZm9ybWF0aW9uIHRoYXRcclxuICAgICAqICBtYXkgYmUgZGVzaXJlZCBvbiBlYWNoIGNvbXBvbmVudCwgYmFzZWQgb24gaXRzIHR5cGUuXHJcbiAgICAgKi9cclxuICAgIHZpc2l0KHZhbHVlLCBjYWxsYmFjaykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl92aXNpdCh0aGlzLnByaW1hcnlUeXBlLCB2YWx1ZSwgY2FsbGJhY2spO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgQ3JlYXRlIGEgbmV3ICoqVHlwZWREYXRhRW5jb2RlcioqIGZvciAlJXR5cGVzJSUuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBmcm9tKHR5cGVzKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBUeXBlZERhdGFFbmNvZGVyKHR5cGVzKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybiB0aGUgcHJpbWFyeSB0eXBlIGZvciAlJXR5cGVzJSUuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBnZXRQcmltYXJ5VHlwZSh0eXBlcykge1xyXG4gICAgICAgIHJldHVybiBUeXBlZERhdGFFbmNvZGVyLmZyb20odHlwZXMpLnByaW1hcnlUeXBlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgUmV0dXJuIHRoZSBoYXNoZWQgc3RydWN0IGZvciAlJXZhbHVlJSUgdXNpbmcgJSV0eXBlcyUlIGFuZCAlJW5hbWUlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGhhc2hTdHJ1Y3QobmFtZSwgdHlwZXMsIHZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuIFR5cGVkRGF0YUVuY29kZXIuZnJvbSh0eXBlcykuaGFzaFN0cnVjdChuYW1lLCB2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqICBSZXR1cm4gdGhlIGRvbWFpbiBoYXNoIGZvciAlJWRvbWFpbiUlLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgaGFzaERvbWFpbihkb21haW4pIHtcclxuICAgICAgICBjb25zdCBkb21haW5GaWVsZHMgPSBbXTtcclxuICAgICAgICBmb3IgKGNvbnN0IG5hbWUgaW4gZG9tYWluKSB7XHJcbiAgICAgICAgICAgIGlmIChkb21haW5bbmFtZV0gPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgdHlwZSA9IGRvbWFpbkZpZWxkVHlwZXNbbmFtZV07XHJcbiAgICAgICAgICAgIGFzc2VydEFyZ3VtZW50KHR5cGUsIGBpbnZhbGlkIHR5cGVkLWRhdGEgZG9tYWluIGtleTogJHtKU09OLnN0cmluZ2lmeShuYW1lKX1gLCBcImRvbWFpblwiLCBkb21haW4pO1xyXG4gICAgICAgICAgICBkb21haW5GaWVsZHMucHVzaCh7IG5hbWUsIHR5cGUgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRvbWFpbkZpZWxkcy5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBkb21haW5GaWVsZE5hbWVzLmluZGV4T2YoYS5uYW1lKSAtIGRvbWFpbkZpZWxkTmFtZXMuaW5kZXhPZihiLm5hbWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBUeXBlZERhdGFFbmNvZGVyLmhhc2hTdHJ1Y3QoXCJFSVA3MTJEb21haW5cIiwgeyBFSVA3MTJEb21haW46IGRvbWFpbkZpZWxkcyB9LCBkb21haW4pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgUmV0dXJuIHRoZSBmdWxseSBlbmNvZGVkIFtbbGluay1laXAtNzEyXV0gJSV2YWx1ZSUlIGZvciAlJXR5cGVzJSUgd2l0aCAlJWRvbWFpbiUlLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZW5jb2RlKGRvbWFpbiwgdHlwZXMsIHZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuIGNvbmNhdChbXHJcbiAgICAgICAgICAgIFwiMHgxOTAxXCIsXHJcbiAgICAgICAgICAgIFR5cGVkRGF0YUVuY29kZXIuaGFzaERvbWFpbihkb21haW4pLFxyXG4gICAgICAgICAgICBUeXBlZERhdGFFbmNvZGVyLmZyb20odHlwZXMpLmhhc2godmFsdWUpXHJcbiAgICAgICAgXSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqICBSZXR1cm4gdGhlIGhhc2ggb2YgdGhlIGZ1bGx5IGVuY29kZWQgW1tsaW5rLWVpcC03MTJdXSAlJXZhbHVlJSUgZm9yICUldHlwZXMlJSB3aXRoICUlZG9tYWluJSUuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBoYXNoKGRvbWFpbiwgdHlwZXMsIHZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuIGtlY2NhazI1NihUeXBlZERhdGFFbmNvZGVyLmVuY29kZShkb21haW4sIHR5cGVzLCB2YWx1ZSkpO1xyXG4gICAgfVxyXG4gICAgLy8gUmVwbGFjZXMgYWxsIGFkZHJlc3MgdHlwZXMgd2l0aCBFTlMgbmFtZXMgd2l0aCB0aGVpciBsb29rZWQgdXAgYWRkcmVzc1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXNvbHZlcyB0byB0aGUgdmFsdWUgZnJvbSByZXNvbHZpbmcgYWxsIGFkZHJlc3NlcyBpbiAlJXZhbHVlJSUgZm9yXHJcbiAgICAgKiAlJXR5cGVzJSUgYW5kIHRoZSAlJWRvbWFpbiUlLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgYXN5bmMgcmVzb2x2ZU5hbWVzKGRvbWFpbiwgdHlwZXMsIHZhbHVlLCByZXNvbHZlTmFtZSkge1xyXG4gICAgICAgIC8vIE1ha2UgYSBjb3B5IHRvIGlzb2xhdGUgaXQgZnJvbSB0aGUgb2JqZWN0IHBhc3NlZCBpblxyXG4gICAgICAgIGRvbWFpbiA9IE9iamVjdC5hc3NpZ24oe30sIGRvbWFpbik7XHJcbiAgICAgICAgLy8gQWxsb3cgcGFzc2luZyBudWxsIHRvIGlnbm9yZSB2YWx1ZVxyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGRvbWFpbikge1xyXG4gICAgICAgICAgICBpZiAoZG9tYWluW2tleV0gPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIGRvbWFpbltrZXldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIExvb2sgdXAgYWxsIEVOUyBuYW1lc1xyXG4gICAgICAgIGNvbnN0IGVuc0NhY2hlID0ge307XHJcbiAgICAgICAgLy8gRG8gd2UgbmVlZCB0byBsb29rIHVwIHRoZSBkb21haW4ncyB2ZXJpZnlpbmdDb250cmFjdD9cclxuICAgICAgICBpZiAoZG9tYWluLnZlcmlmeWluZ0NvbnRyYWN0ICYmICFpc0hleFN0cmluZyhkb21haW4udmVyaWZ5aW5nQ29udHJhY3QsIDIwKSkge1xyXG4gICAgICAgICAgICBlbnNDYWNoZVtkb21haW4udmVyaWZ5aW5nQ29udHJhY3RdID0gXCIweFwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBXZSBhcmUgZ29pbmcgdG8gdXNlIHRoZSBlbmNvZGVyIHRvIHZpc2l0IGFsbCB0aGUgYmFzZSB2YWx1ZXNcclxuICAgICAgICBjb25zdCBlbmNvZGVyID0gVHlwZWREYXRhRW5jb2Rlci5mcm9tKHR5cGVzKTtcclxuICAgICAgICAvLyBHZXQgYSBsaXN0IG9mIGFsbCB0aGUgYWRkcmVzc2VzXHJcbiAgICAgICAgZW5jb2Rlci52aXNpdCh2YWx1ZSwgKHR5cGUsIHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlID09PSBcImFkZHJlc3NcIiAmJiAhaXNIZXhTdHJpbmcodmFsdWUsIDIwKSkge1xyXG4gICAgICAgICAgICAgICAgZW5zQ2FjaGVbdmFsdWVdID0gXCIweFwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBMb29rdXAgZWFjaCBuYW1lXHJcbiAgICAgICAgZm9yIChjb25zdCBuYW1lIGluIGVuc0NhY2hlKSB7XHJcbiAgICAgICAgICAgIGVuc0NhY2hlW25hbWVdID0gYXdhaXQgcmVzb2x2ZU5hbWUobmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFJlcGxhY2UgdGhlIGRvbWFpbiB2ZXJpZnlpbmdDb250cmFjdCBpZiBuZWVkZWRcclxuICAgICAgICBpZiAoZG9tYWluLnZlcmlmeWluZ0NvbnRyYWN0ICYmIGVuc0NhY2hlW2RvbWFpbi52ZXJpZnlpbmdDb250cmFjdF0pIHtcclxuICAgICAgICAgICAgZG9tYWluLnZlcmlmeWluZ0NvbnRyYWN0ID0gZW5zQ2FjaGVbZG9tYWluLnZlcmlmeWluZ0NvbnRyYWN0XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gUmVwbGFjZSBhbGwgRU5TIG5hbWVzIHdpdGggdGhlaXIgYWRkcmVzc1xyXG4gICAgICAgIHZhbHVlID0gZW5jb2Rlci52aXNpdCh2YWx1ZSwgKHR5cGUsIHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlID09PSBcImFkZHJlc3NcIiAmJiBlbnNDYWNoZVt2YWx1ZV0pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlbnNDYWNoZVt2YWx1ZV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB7IGRvbWFpbiwgdmFsdWUgfTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybnMgdGhlIEpTT04tZW5jb2RlZCBwYXlsb2FkIGV4cGVjdGVkIGJ5IG5vZGVzIHdoaWNoIGltcGxlbWVudFxyXG4gICAgICogIHRoZSBKU09OLVJQQyBbW2xpbmstZWlwLTcxMl1dIG1ldGhvZC5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGdldFBheWxvYWQoZG9tYWluLCB0eXBlcywgdmFsdWUpIHtcclxuICAgICAgICAvLyBWYWxpZGF0ZSB0aGUgZG9tYWluIGZpZWxkc1xyXG4gICAgICAgIFR5cGVkRGF0YUVuY29kZXIuaGFzaERvbWFpbihkb21haW4pO1xyXG4gICAgICAgIC8vIERlcml2ZSB0aGUgRUlQNzEyRG9tYWluIFN0cnVjdCByZWZlcmVuY2UgdHlwZVxyXG4gICAgICAgIGNvbnN0IGRvbWFpblZhbHVlcyA9IHt9O1xyXG4gICAgICAgIGNvbnN0IGRvbWFpblR5cGVzID0gW107XHJcbiAgICAgICAgZG9tYWluRmllbGROYW1lcy5mb3JFYWNoKChuYW1lKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gZG9tYWluW25hbWVdO1xyXG4gICAgICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRvbWFpblZhbHVlc1tuYW1lXSA9IGRvbWFpbkNoZWNrc1tuYW1lXSh2YWx1ZSk7XHJcbiAgICAgICAgICAgIGRvbWFpblR5cGVzLnB1c2goeyBuYW1lLCB0eXBlOiBkb21haW5GaWVsZFR5cGVzW25hbWVdIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnN0IGVuY29kZXIgPSBUeXBlZERhdGFFbmNvZGVyLmZyb20odHlwZXMpO1xyXG4gICAgICAgIC8vIEdldCB0aGUgbm9ybWFsaXplZCB0eXBlc1xyXG4gICAgICAgIHR5cGVzID0gZW5jb2Rlci50eXBlcztcclxuICAgICAgICBjb25zdCB0eXBlc1dpdGhEb21haW4gPSBPYmplY3QuYXNzaWduKHt9LCB0eXBlcyk7XHJcbiAgICAgICAgYXNzZXJ0QXJndW1lbnQodHlwZXNXaXRoRG9tYWluLkVJUDcxMkRvbWFpbiA9PSBudWxsLCBcInR5cGVzIG11c3Qgbm90IGNvbnRhaW4gRUlQNzEyRG9tYWluIHR5cGVcIiwgXCJ0eXBlcy5FSVA3MTJEb21haW5cIiwgdHlwZXMpO1xyXG4gICAgICAgIHR5cGVzV2l0aERvbWFpbi5FSVA3MTJEb21haW4gPSBkb21haW5UeXBlcztcclxuICAgICAgICAvLyBWYWxpZGF0ZSB0aGUgZGF0YSBzdHJ1Y3R1cmVzIGFuZCB0eXBlc1xyXG4gICAgICAgIGVuY29kZXIuZW5jb2RlKHZhbHVlKTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB0eXBlczogdHlwZXNXaXRoRG9tYWluLFxyXG4gICAgICAgICAgICBkb21haW46IGRvbWFpblZhbHVlcyxcclxuICAgICAgICAgICAgcHJpbWFyeVR5cGU6IGVuY29kZXIucHJpbWFyeVR5cGUsXHJcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVuY29kZXIudmlzaXQodmFsdWUsICh0eXBlLCB2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gYnl0ZXNcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlLm1hdGNoKC9eYnl0ZXMoXFxkKikvKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBoZXhsaWZ5KGdldEJ5dGVzKHZhbHVlKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyB1aW50IG9yIGludFxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGUubWF0Y2goL151P2ludC8pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldEJpZ0ludCh2YWx1ZSkudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJhZGRyZXNzXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJib29sXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhIXZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzdHJpbmdcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXNzZXJ0QXJndW1lbnQodHlwZW9mICh2YWx1ZSkgPT09IFwic3RyaW5nXCIsIFwiaW52YWxpZCBzdHJpbmdcIiwgXCJ2YWx1ZVwiLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGFzc2VydEFyZ3VtZW50KGZhbHNlLCBcInVuc3VwcG9ydGVkIHR5cGVcIiwgXCJ0eXBlXCIsIHR5cGUpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqICBDb21wdXRlIHRoZSBhZGRyZXNzIHVzZWQgdG8gc2lnbiB0aGUgdHlwZWQgZGF0YSBmb3IgdGhlICUlc2lnbmF0dXJlJSUuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdmVyaWZ5VHlwZWREYXRhKGRvbWFpbiwgdHlwZXMsIHZhbHVlLCBzaWduYXR1cmUpIHtcclxuICAgIHJldHVybiByZWNvdmVyQWRkcmVzcyhUeXBlZERhdGFFbmNvZGVyLmhhc2goZG9tYWluLCB0eXBlcywgdmFsdWUpLCBzaWduYXR1cmUpO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVkLWRhdGEuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/hash/typed-data.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/index.js":
/*!**********************************************!*\
  !*** ./node_modules/ethers/lib.esm/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ethers: () => (/* reexport module object */ _ethers_js__WEBPACK_IMPORTED_MODULE_0__)\n/* harmony export */ });\n/* harmony import */ var _ethers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ethers.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/ethers.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _ethers_js__WEBPACK_IMPORTED_MODULE_0__) if([\"default\",\"ethers\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _ethers_js__WEBPACK_IMPORTED_MODULE_0__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/**\r\n *  The Application Programming Interface (API) is the collection of\r\n *  functions, classes and types offered by the Ethers library.\r\n *\r\n *  @_section: api:Application Programming Interface  [about-api]\r\n *  @_navTitle: API\r\n */\r\n\r\n\r\n\r\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3NDO0FBQ3BCO0FBQ1U7QUFDNUIiLCJzb3VyY2VzIjpbIkQ6XFxEb19hbjJcXGxlbmRodWJfdjJcXGxlbmRodWItZnJvbnRlbmQtbmV4dGpzXFxub2RlX21vZHVsZXNcXGV0aGVyc1xcbGliLmVzbVxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqICBUaGUgQXBwbGljYXRpb24gUHJvZ3JhbW1pbmcgSW50ZXJmYWNlIChBUEkpIGlzIHRoZSBjb2xsZWN0aW9uIG9mXHJcbiAqICBmdW5jdGlvbnMsIGNsYXNzZXMgYW5kIHR5cGVzIG9mZmVyZWQgYnkgdGhlIEV0aGVycyBsaWJyYXJ5LlxyXG4gKlxyXG4gKiAgQF9zZWN0aW9uOiBhcGk6QXBwbGljYXRpb24gUHJvZ3JhbW1pbmcgSW50ZXJmYWNlICBbYWJvdXQtYXBpXVxyXG4gKiAgQF9uYXZUaXRsZTogQVBJXHJcbiAqL1xyXG5pbXBvcnQgKiBhcyBldGhlcnMgZnJvbSBcIi4vZXRoZXJzLmpzXCI7XHJcbmV4cG9ydCB7IGV0aGVycyB9O1xyXG5leHBvcnQgKiBmcm9tIFwiLi9ldGhlcnMuanNcIjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/index.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/abstract-provider.js":
/*!********************************************************************!*\
  !*** ./node_modules/ethers/lib.esm/providers/abstract-provider.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractProvider: () => (/* binding */ AbstractProvider),\n/* harmony export */   UnmanagedSubscriber: () => (/* binding */ UnmanagedSubscriber)\n/* harmony export */ });\n/* harmony import */ var _address_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../address/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/address/index.js\");\n/* harmony import */ var _constants_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../constants/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/constants/index.js\");\n/* harmony import */ var _contract_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../contract/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/contract/index.js\");\n/* harmony import */ var _hash_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../hash/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/hash/index.js\");\n/* harmony import */ var _transaction_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../transaction/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/transaction/index.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/* harmony import */ var _ens_resolver_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ens-resolver.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/ens-resolver.js\");\n/* harmony import */ var _format_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./format.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/format.js\");\n/* harmony import */ var _network_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./network.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/network.js\");\n/* harmony import */ var _provider_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./provider.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider.js\");\n/* harmony import */ var _subscriber_polling_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./subscriber-polling.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/subscriber-polling.js\");\n/**\r\n *  The available providers should suffice for most developers purposes,\r\n *  but the [[AbstractProvider]] class has many features which enable\r\n *  sub-classing it for specific purposes.\r\n *\r\n *  @_section: api/providers/abstract-provider: Subclassing Provider  [abstract-provider]\r\n */\r\n// @TODO\r\n// Event coalescence\r\n//   When we register an event with an async value (e.g. address is a Signer\r\n//   or ENS name), we need to add it immeidately for the Event API, but also\r\n//   need time to resolve the address. Upon resolving the address, we need to\r\n//   migrate the listener to the static event. We also need to maintain a map\r\n//   of Signer/ENS name to address so we can sync respond to listenerCount.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Constants\r\nconst BN_2 = BigInt(2);\r\nconst MAX_CCIP_REDIRECTS = 10;\r\nfunction isPromise(value) {\r\n    return (value && typeof (value.then) === \"function\");\r\n}\r\nfunction getTag(prefix, value) {\r\n    return prefix + \":\" + JSON.stringify(value, (k, v) => {\r\n        if (v == null) {\r\n            return \"null\";\r\n        }\r\n        if (typeof (v) === \"bigint\") {\r\n            return `bigint:${v.toString()}`;\r\n        }\r\n        if (typeof (v) === \"string\") {\r\n            return v.toLowerCase();\r\n        }\r\n        // Sort object keys\r\n        if (typeof (v) === \"object\" && !Array.isArray(v)) {\r\n            const keys = Object.keys(v);\r\n            keys.sort();\r\n            return keys.reduce((accum, key) => {\r\n                accum[key] = v[key];\r\n                return accum;\r\n            }, {});\r\n        }\r\n        return v;\r\n    });\r\n}\r\n/**\r\n *  An **UnmanagedSubscriber** is useful for events which do not require\r\n *  any additional management, such as ``\"debug\"`` which only requires\r\n *  emit in synchronous event loop triggered calls.\r\n */\r\nclass UnmanagedSubscriber {\r\n    /**\r\n     *  The name fof the event.\r\n     */\r\n    name;\r\n    /**\r\n     *  Create a new UnmanagedSubscriber with %%name%%.\r\n     */\r\n    constructor(name) { (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, { name }); }\r\n    start() { }\r\n    stop() { }\r\n    pause(dropWhilePaused) { }\r\n    resume() { }\r\n}\r\nfunction copy(value) {\r\n    return JSON.parse(JSON.stringify(value));\r\n}\r\nfunction concisify(items) {\r\n    items = Array.from((new Set(items)).values());\r\n    items.sort();\r\n    return items;\r\n}\r\nasync function getSubscription(_event, provider) {\r\n    if (_event == null) {\r\n        throw new Error(\"invalid event\");\r\n    }\r\n    // Normalize topic array info an EventFilter\r\n    if (Array.isArray(_event)) {\r\n        _event = { topics: _event };\r\n    }\r\n    if (typeof (_event) === \"string\") {\r\n        switch (_event) {\r\n            case \"block\":\r\n            case \"debug\":\r\n            case \"error\":\r\n            case \"finalized\":\r\n            case \"network\":\r\n            case \"pending\":\r\n            case \"safe\": {\r\n                return { type: _event, tag: _event };\r\n            }\r\n        }\r\n    }\r\n    if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isHexString)(_event, 32)) {\r\n        const hash = _event.toLowerCase();\r\n        return { type: \"transaction\", tag: getTag(\"tx\", { hash }), hash };\r\n    }\r\n    if (_event.orphan) {\r\n        const event = _event;\r\n        // @TODO: Should lowercase and whatnot things here instead of copy...\r\n        return { type: \"orphan\", tag: getTag(\"orphan\", event), filter: copy(event) };\r\n    }\r\n    if ((_event.address || _event.topics)) {\r\n        const event = _event;\r\n        const filter = {\r\n            topics: ((event.topics || []).map((t) => {\r\n                if (t == null) {\r\n                    return null;\r\n                }\r\n                if (Array.isArray(t)) {\r\n                    return concisify(t.map((t) => t.toLowerCase()));\r\n                }\r\n                return t.toLowerCase();\r\n            }))\r\n        };\r\n        if (event.address) {\r\n            const addresses = [];\r\n            const promises = [];\r\n            const addAddress = (addr) => {\r\n                if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isHexString)(addr)) {\r\n                    addresses.push(addr);\r\n                }\r\n                else {\r\n                    promises.push((async () => {\r\n                        addresses.push(await (0,_address_index_js__WEBPACK_IMPORTED_MODULE_1__.resolveAddress)(addr, provider));\r\n                    })());\r\n                }\r\n            };\r\n            if (Array.isArray(event.address)) {\r\n                event.address.forEach(addAddress);\r\n            }\r\n            else {\r\n                addAddress(event.address);\r\n            }\r\n            if (promises.length) {\r\n                await Promise.all(promises);\r\n            }\r\n            filter.address = concisify(addresses.map((a) => a.toLowerCase()));\r\n        }\r\n        return { filter, tag: getTag(\"event\", filter), type: \"event\" };\r\n    }\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"unknown ProviderEvent\", \"event\", _event);\r\n}\r\nfunction getTime() { return (new Date()).getTime(); }\r\nconst defaultOptions = {\r\n    cacheTimeout: 250,\r\n    pollingInterval: 4000\r\n};\r\n/**\r\n *  An **AbstractProvider** provides a base class for other sub-classes to\r\n *  implement the [[Provider]] API by normalizing input arguments and\r\n *  formatting output results as well as tracking events for consistent\r\n *  behaviour on an eventually-consistent network.\r\n */\r\nclass AbstractProvider {\r\n    #subs;\r\n    #plugins;\r\n    // null=unpaused, true=paused+dropWhilePaused, false=paused\r\n    #pausedState;\r\n    #destroyed;\r\n    #networkPromise;\r\n    #anyNetwork;\r\n    #performCache;\r\n    // The most recent block number if running an event or -1 if no \"block\" event\r\n    #lastBlockNumber;\r\n    #nextTimer;\r\n    #timers;\r\n    #disableCcipRead;\r\n    #options;\r\n    /**\r\n     *  Create a new **AbstractProvider** connected to %%network%%, or\r\n     *  use the various network detection capabilities to discover the\r\n     *  [[Network]] if necessary.\r\n     */\r\n    constructor(_network, options) {\r\n        this.#options = Object.assign({}, defaultOptions, options || {});\r\n        if (_network === \"any\") {\r\n            this.#anyNetwork = true;\r\n            this.#networkPromise = null;\r\n        }\r\n        else if (_network) {\r\n            const network = _network_js__WEBPACK_IMPORTED_MODULE_2__.Network.from(_network);\r\n            this.#anyNetwork = false;\r\n            this.#networkPromise = Promise.resolve(network);\r\n            setTimeout(() => { this.emit(\"network\", network, null); }, 0);\r\n        }\r\n        else {\r\n            this.#anyNetwork = false;\r\n            this.#networkPromise = null;\r\n        }\r\n        this.#lastBlockNumber = -1;\r\n        this.#performCache = new Map();\r\n        this.#subs = new Map();\r\n        this.#plugins = new Map();\r\n        this.#pausedState = null;\r\n        this.#destroyed = false;\r\n        this.#nextTimer = 1;\r\n        this.#timers = new Map();\r\n        this.#disableCcipRead = false;\r\n    }\r\n    get pollingInterval() { return this.#options.pollingInterval; }\r\n    /**\r\n     *  Returns ``this``, to allow an **AbstractProvider** to implement\r\n     *  the [[ContractRunner]] interface.\r\n     */\r\n    get provider() { return this; }\r\n    /**\r\n     *  Returns all the registered plug-ins.\r\n     */\r\n    get plugins() {\r\n        return Array.from(this.#plugins.values());\r\n    }\r\n    /**\r\n     *  Attach a new plug-in.\r\n     */\r\n    attachPlugin(plugin) {\r\n        if (this.#plugins.get(plugin.name)) {\r\n            throw new Error(`cannot replace existing plugin: ${plugin.name} `);\r\n        }\r\n        this.#plugins.set(plugin.name, plugin.connect(this));\r\n        return this;\r\n    }\r\n    /**\r\n     *  Get a plugin by name.\r\n     */\r\n    getPlugin(name) {\r\n        return (this.#plugins.get(name)) || null;\r\n    }\r\n    /**\r\n     *  Prevent any CCIP-read operation, regardless of whether requested\r\n     *  in a [[call]] using ``enableCcipRead``.\r\n     */\r\n    get disableCcipRead() { return this.#disableCcipRead; }\r\n    set disableCcipRead(value) { this.#disableCcipRead = !!value; }\r\n    // Shares multiple identical requests made during the same 250ms\r\n    async #perform(req) {\r\n        const timeout = this.#options.cacheTimeout;\r\n        // Caching disabled\r\n        if (timeout < 0) {\r\n            return await this._perform(req);\r\n        }\r\n        // Create a tag\r\n        const tag = getTag(req.method, req);\r\n        let perform = this.#performCache.get(tag);\r\n        if (!perform) {\r\n            perform = this._perform(req);\r\n            this.#performCache.set(tag, perform);\r\n            setTimeout(() => {\r\n                if (this.#performCache.get(tag) === perform) {\r\n                    this.#performCache.delete(tag);\r\n                }\r\n            }, timeout);\r\n        }\r\n        return await perform;\r\n    }\r\n    /**\r\n     *  Resolves to the data for executing the CCIP-read operations.\r\n     */\r\n    async ccipReadFetch(tx, calldata, urls) {\r\n        if (this.disableCcipRead || urls.length === 0 || tx.to == null) {\r\n            return null;\r\n        }\r\n        const sender = tx.to.toLowerCase();\r\n        const data = calldata.toLowerCase();\r\n        const errorMessages = [];\r\n        for (let i = 0; i < urls.length; i++) {\r\n            const url = urls[i];\r\n            // URL expansion\r\n            const href = url.replace(\"{sender}\", sender).replace(\"{data}\", data);\r\n            // If no {data} is present, use POST; otherwise GET\r\n            //const json: string | null = (url.indexOf(\"{data}\") >= 0) ? null: JSON.stringify({ data, sender });\r\n            //const result = await fetchJson({ url: href, errorPassThrough: true }, json, (value, response) => {\r\n            //    value.status = response.statusCode;\r\n            //    return value;\r\n            //});\r\n            const request = new _utils_index_js__WEBPACK_IMPORTED_MODULE_0__.FetchRequest(href);\r\n            if (url.indexOf(\"{data}\") === -1) {\r\n                request.body = { data, sender };\r\n            }\r\n            this.emit(\"debug\", { action: \"sendCcipReadFetchRequest\", request, index: i, urls });\r\n            let errorMessage = \"unknown error\";\r\n            // Fetch the resource...\r\n            let resp;\r\n            try {\r\n                resp = await request.send();\r\n            }\r\n            catch (error) {\r\n                // ...low-level fetch error (missing host, bad SSL, etc.),\r\n                // so try next URL\r\n                errorMessages.push(error.message);\r\n                this.emit(\"debug\", { action: \"receiveCcipReadFetchError\", request, result: { error } });\r\n                continue;\r\n            }\r\n            try {\r\n                const result = resp.bodyJson;\r\n                if (result.data) {\r\n                    this.emit(\"debug\", { action: \"receiveCcipReadFetchResult\", request, result });\r\n                    return result.data;\r\n                }\r\n                if (result.message) {\r\n                    errorMessage = result.message;\r\n                }\r\n                this.emit(\"debug\", { action: \"receiveCcipReadFetchError\", request, result });\r\n            }\r\n            catch (error) { }\r\n            // 4xx indicates the result is not present; stop\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(resp.statusCode < 400 || resp.statusCode >= 500, `response not found during CCIP fetch: ${errorMessage}`, \"OFFCHAIN_FAULT\", { reason: \"404_MISSING_RESOURCE\", transaction: tx, info: { url, errorMessage } });\r\n            // 5xx indicates server issue; try the next url\r\n            errorMessages.push(errorMessage);\r\n        }\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(false, `error encountered during CCIP fetch: ${errorMessages.map((m) => JSON.stringify(m)).join(\", \")}`, \"OFFCHAIN_FAULT\", {\r\n            reason: \"500_SERVER_ERROR\",\r\n            transaction: tx, info: { urls, errorMessages }\r\n        });\r\n    }\r\n    /**\r\n     *  Provides the opportunity for a sub-class to wrap a block before\r\n     *  returning it, to add additional properties or an alternate\r\n     *  sub-class of [[Block]].\r\n     */\r\n    _wrapBlock(value, network) {\r\n        return new _provider_js__WEBPACK_IMPORTED_MODULE_3__.Block((0,_format_js__WEBPACK_IMPORTED_MODULE_4__.formatBlock)(value), this);\r\n    }\r\n    /**\r\n     *  Provides the opportunity for a sub-class to wrap a log before\r\n     *  returning it, to add additional properties or an alternate\r\n     *  sub-class of [[Log]].\r\n     */\r\n    _wrapLog(value, network) {\r\n        return new _provider_js__WEBPACK_IMPORTED_MODULE_3__.Log((0,_format_js__WEBPACK_IMPORTED_MODULE_4__.formatLog)(value), this);\r\n    }\r\n    /**\r\n     *  Provides the opportunity for a sub-class to wrap a transaction\r\n     *  receipt before returning it, to add additional properties or an\r\n     *  alternate sub-class of [[TransactionReceipt]].\r\n     */\r\n    _wrapTransactionReceipt(value, network) {\r\n        return new _provider_js__WEBPACK_IMPORTED_MODULE_3__.TransactionReceipt((0,_format_js__WEBPACK_IMPORTED_MODULE_4__.formatTransactionReceipt)(value), this);\r\n    }\r\n    /**\r\n     *  Provides the opportunity for a sub-class to wrap a transaction\r\n     *  response before returning it, to add additional properties or an\r\n     *  alternate sub-class of [[TransactionResponse]].\r\n     */\r\n    _wrapTransactionResponse(tx, network) {\r\n        return new _provider_js__WEBPACK_IMPORTED_MODULE_3__.TransactionResponse((0,_format_js__WEBPACK_IMPORTED_MODULE_4__.formatTransactionResponse)(tx), this);\r\n    }\r\n    /**\r\n     *  Resolves to the Network, forcing a network detection using whatever\r\n     *  technique the sub-class requires.\r\n     *\r\n     *  Sub-classes **must** override this.\r\n     */\r\n    _detectNetwork() {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(false, \"sub-classes must implement this\", \"UNSUPPORTED_OPERATION\", {\r\n            operation: \"_detectNetwork\"\r\n        });\r\n    }\r\n    /**\r\n     *  Sub-classes should use this to perform all built-in operations. All\r\n     *  methods sanitizes and normalizes the values passed into this.\r\n     *\r\n     *  Sub-classes **must** override this.\r\n     */\r\n    async _perform(req) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(false, `unsupported method: ${req.method}`, \"UNSUPPORTED_OPERATION\", {\r\n            operation: req.method,\r\n            info: req\r\n        });\r\n    }\r\n    // State\r\n    async getBlockNumber() {\r\n        const blockNumber = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getNumber)(await this.#perform({ method: \"getBlockNumber\" }), \"%response\");\r\n        if (this.#lastBlockNumber >= 0) {\r\n            this.#lastBlockNumber = blockNumber;\r\n        }\r\n        return blockNumber;\r\n    }\r\n    /**\r\n     *  Returns or resolves to the address for %%address%%, resolving ENS\r\n     *  names and [[Addressable]] objects and returning if already an\r\n     *  address.\r\n     */\r\n    _getAddress(address) {\r\n        return (0,_address_index_js__WEBPACK_IMPORTED_MODULE_1__.resolveAddress)(address, this);\r\n    }\r\n    /**\r\n     *  Returns or resolves to a valid block tag for %%blockTag%%, resolving\r\n     *  negative values and returning if already a valid block tag.\r\n     */\r\n    _getBlockTag(blockTag) {\r\n        if (blockTag == null) {\r\n            return \"latest\";\r\n        }\r\n        switch (blockTag) {\r\n            case \"earliest\":\r\n                return \"0x0\";\r\n            case \"finalized\":\r\n            case \"latest\":\r\n            case \"pending\":\r\n            case \"safe\":\r\n                return blockTag;\r\n        }\r\n        if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isHexString)(blockTag)) {\r\n            if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isHexString)(blockTag, 32)) {\r\n                return blockTag;\r\n            }\r\n            return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toQuantity)(blockTag);\r\n        }\r\n        if (typeof (blockTag) === \"bigint\") {\r\n            blockTag = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getNumber)(blockTag, \"blockTag\");\r\n        }\r\n        if (typeof (blockTag) === \"number\") {\r\n            if (blockTag >= 0) {\r\n                return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toQuantity)(blockTag);\r\n            }\r\n            if (this.#lastBlockNumber >= 0) {\r\n                return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toQuantity)(this.#lastBlockNumber + blockTag);\r\n            }\r\n            return this.getBlockNumber().then((b) => (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toQuantity)(b + blockTag));\r\n        }\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"invalid blockTag\", \"blockTag\", blockTag);\r\n    }\r\n    /**\r\n     *  Returns or resolves to a filter for %%filter%%, resolving any ENS\r\n     *  names or [[Addressable]] object and returning if already a valid\r\n     *  filter.\r\n     */\r\n    _getFilter(filter) {\r\n        // Create a canonical representation of the topics\r\n        const topics = (filter.topics || []).map((t) => {\r\n            if (t == null) {\r\n                return null;\r\n            }\r\n            if (Array.isArray(t)) {\r\n                return concisify(t.map((t) => t.toLowerCase()));\r\n            }\r\n            return t.toLowerCase();\r\n        });\r\n        const blockHash = (\"blockHash\" in filter) ? filter.blockHash : undefined;\r\n        const resolve = (_address, fromBlock, toBlock) => {\r\n            let address = undefined;\r\n            switch (_address.length) {\r\n                case 0: break;\r\n                case 1:\r\n                    address = _address[0];\r\n                    break;\r\n                default:\r\n                    _address.sort();\r\n                    address = _address;\r\n            }\r\n            if (blockHash) {\r\n                if (fromBlock != null || toBlock != null) {\r\n                    throw new Error(\"invalid filter\");\r\n                }\r\n            }\r\n            const filter = {};\r\n            if (address) {\r\n                filter.address = address;\r\n            }\r\n            if (topics.length) {\r\n                filter.topics = topics;\r\n            }\r\n            if (fromBlock) {\r\n                filter.fromBlock = fromBlock;\r\n            }\r\n            if (toBlock) {\r\n                filter.toBlock = toBlock;\r\n            }\r\n            if (blockHash) {\r\n                filter.blockHash = blockHash;\r\n            }\r\n            return filter;\r\n        };\r\n        // Addresses could be async (ENS names or Addressables)\r\n        let address = [];\r\n        if (filter.address) {\r\n            if (Array.isArray(filter.address)) {\r\n                for (const addr of filter.address) {\r\n                    address.push(this._getAddress(addr));\r\n                }\r\n            }\r\n            else {\r\n                address.push(this._getAddress(filter.address));\r\n            }\r\n        }\r\n        let fromBlock = undefined;\r\n        if (\"fromBlock\" in filter) {\r\n            fromBlock = this._getBlockTag(filter.fromBlock);\r\n        }\r\n        let toBlock = undefined;\r\n        if (\"toBlock\" in filter) {\r\n            toBlock = this._getBlockTag(filter.toBlock);\r\n        }\r\n        if (address.filter((a) => (typeof (a) !== \"string\")).length ||\r\n            (fromBlock != null && typeof (fromBlock) !== \"string\") ||\r\n            (toBlock != null && typeof (toBlock) !== \"string\")) {\r\n            return Promise.all([Promise.all(address), fromBlock, toBlock]).then((result) => {\r\n                return resolve(result[0], result[1], result[2]);\r\n            });\r\n        }\r\n        return resolve(address, fromBlock, toBlock);\r\n    }\r\n    /**\r\n     *  Returns or resolves to a transaction for %%request%%, resolving\r\n     *  any ENS names or [[Addressable]] and returning if already a valid\r\n     *  transaction.\r\n     */\r\n    _getTransactionRequest(_request) {\r\n        const request = (0,_provider_js__WEBPACK_IMPORTED_MODULE_3__.copyRequest)(_request);\r\n        const promises = [];\r\n        [\"to\", \"from\"].forEach((key) => {\r\n            if (request[key] == null) {\r\n                return;\r\n            }\r\n            const addr = (0,_address_index_js__WEBPACK_IMPORTED_MODULE_1__.resolveAddress)(request[key], this);\r\n            if (isPromise(addr)) {\r\n                promises.push((async function () { request[key] = await addr; })());\r\n            }\r\n            else {\r\n                request[key] = addr;\r\n            }\r\n        });\r\n        if (request.blockTag != null) {\r\n            const blockTag = this._getBlockTag(request.blockTag);\r\n            if (isPromise(blockTag)) {\r\n                promises.push((async function () { request.blockTag = await blockTag; })());\r\n            }\r\n            else {\r\n                request.blockTag = blockTag;\r\n            }\r\n        }\r\n        if (promises.length) {\r\n            return (async function () {\r\n                await Promise.all(promises);\r\n                return request;\r\n            })();\r\n        }\r\n        return request;\r\n    }\r\n    async getNetwork() {\r\n        // No explicit network was set and this is our first time\r\n        if (this.#networkPromise == null) {\r\n            // Detect the current network (shared with all calls)\r\n            const detectNetwork = (async () => {\r\n                try {\r\n                    const network = await this._detectNetwork();\r\n                    this.emit(\"network\", network, null);\r\n                    return network;\r\n                }\r\n                catch (error) {\r\n                    if (this.#networkPromise === detectNetwork) {\r\n                        this.#networkPromise = null;\r\n                    }\r\n                    throw error;\r\n                }\r\n            })();\r\n            this.#networkPromise = detectNetwork;\r\n            return (await detectNetwork).clone();\r\n        }\r\n        const networkPromise = this.#networkPromise;\r\n        const [expected, actual] = await Promise.all([\r\n            networkPromise,\r\n            this._detectNetwork() // The actual connected network\r\n        ]);\r\n        if (expected.chainId !== actual.chainId) {\r\n            if (this.#anyNetwork) {\r\n                // The \"any\" network can change, so notify listeners\r\n                this.emit(\"network\", actual, expected);\r\n                // Update the network if something else hasn't already changed it\r\n                if (this.#networkPromise === networkPromise) {\r\n                    this.#networkPromise = Promise.resolve(actual);\r\n                }\r\n            }\r\n            else {\r\n                // Otherwise, we do not allow changes to the underlying network\r\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(false, `network changed: ${expected.chainId} => ${actual.chainId} `, \"NETWORK_ERROR\", {\r\n                    event: \"changed\"\r\n                });\r\n            }\r\n        }\r\n        return expected.clone();\r\n    }\r\n    async getFeeData() {\r\n        const network = await this.getNetwork();\r\n        const getFeeDataFunc = async () => {\r\n            const { _block, gasPrice, priorityFee } = await (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.resolveProperties)({\r\n                _block: this.#getBlock(\"latest\", false),\r\n                gasPrice: ((async () => {\r\n                    try {\r\n                        const value = await this.#perform({ method: \"getGasPrice\" });\r\n                        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt)(value, \"%response\");\r\n                    }\r\n                    catch (error) { }\r\n                    return null;\r\n                })()),\r\n                priorityFee: ((async () => {\r\n                    try {\r\n                        const value = await this.#perform({ method: \"getPriorityFee\" });\r\n                        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt)(value, \"%response\");\r\n                    }\r\n                    catch (error) { }\r\n                    return null;\r\n                })())\r\n            });\r\n            let maxFeePerGas = null;\r\n            let maxPriorityFeePerGas = null;\r\n            // These are the recommended EIP-1559 heuristics for fee data\r\n            const block = this._wrapBlock(_block, network);\r\n            if (block && block.baseFeePerGas) {\r\n                maxPriorityFeePerGas = (priorityFee != null) ? priorityFee : BigInt(\"1000000000\");\r\n                maxFeePerGas = (block.baseFeePerGas * BN_2) + maxPriorityFeePerGas;\r\n            }\r\n            return new _provider_js__WEBPACK_IMPORTED_MODULE_3__.FeeData(gasPrice, maxFeePerGas, maxPriorityFeePerGas);\r\n        };\r\n        // Check for a FeeDataNetWorkPlugin\r\n        const plugin = network.getPlugin(\"org.ethers.plugins.network.FetchUrlFeeDataPlugin\");\r\n        if (plugin) {\r\n            const req = new _utils_index_js__WEBPACK_IMPORTED_MODULE_0__.FetchRequest(plugin.url);\r\n            const feeData = await plugin.processFunc(getFeeDataFunc, this, req);\r\n            return new _provider_js__WEBPACK_IMPORTED_MODULE_3__.FeeData(feeData.gasPrice, feeData.maxFeePerGas, feeData.maxPriorityFeePerGas);\r\n        }\r\n        return await getFeeDataFunc();\r\n    }\r\n    async estimateGas(_tx) {\r\n        let tx = this._getTransactionRequest(_tx);\r\n        if (isPromise(tx)) {\r\n            tx = await tx;\r\n        }\r\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt)(await this.#perform({\r\n            method: \"estimateGas\", transaction: tx\r\n        }), \"%response\");\r\n    }\r\n    async #call(tx, blockTag, attempt) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(attempt < MAX_CCIP_REDIRECTS, \"CCIP read exceeded maximum redirections\", \"OFFCHAIN_FAULT\", {\r\n            reason: \"TOO_MANY_REDIRECTS\",\r\n            transaction: Object.assign({}, tx, { blockTag, enableCcipRead: true })\r\n        });\r\n        // This came in as a PerformActionTransaction, so to/from are safe; we can cast\r\n        const transaction = (0,_provider_js__WEBPACK_IMPORTED_MODULE_3__.copyRequest)(tx);\r\n        try {\r\n            return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(await this._perform({ method: \"call\", transaction, blockTag }));\r\n        }\r\n        catch (error) {\r\n            // CCIP Read OffchainLookup\r\n            if (!this.disableCcipRead && (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isCallException)(error) && error.data && attempt >= 0 && blockTag === \"latest\" && transaction.to != null && (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.dataSlice)(error.data, 0, 4) === \"0x556f1830\") {\r\n                const data = error.data;\r\n                const txSender = await (0,_address_index_js__WEBPACK_IMPORTED_MODULE_1__.resolveAddress)(transaction.to, this);\r\n                // Parse the CCIP Read Arguments\r\n                let ccipArgs;\r\n                try {\r\n                    ccipArgs = parseOffchainLookup((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.dataSlice)(error.data, 4));\r\n                }\r\n                catch (error) {\r\n                    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(false, error.message, \"OFFCHAIN_FAULT\", {\r\n                        reason: \"BAD_DATA\", transaction, info: { data }\r\n                    });\r\n                }\r\n                // Check the sender of the OffchainLookup matches the transaction\r\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(ccipArgs.sender.toLowerCase() === txSender.toLowerCase(), \"CCIP Read sender mismatch\", \"CALL_EXCEPTION\", {\r\n                    action: \"call\",\r\n                    data,\r\n                    reason: \"OffchainLookup\",\r\n                    transaction: transaction,\r\n                    invocation: null,\r\n                    revert: {\r\n                        signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\r\n                        name: \"OffchainLookup\",\r\n                        args: ccipArgs.errorArgs\r\n                    }\r\n                });\r\n                const ccipResult = await this.ccipReadFetch(transaction, ccipArgs.calldata, ccipArgs.urls);\r\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(ccipResult != null, \"CCIP Read failed to fetch data\", \"OFFCHAIN_FAULT\", {\r\n                    reason: \"FETCH_FAILED\", transaction, info: { data: error.data, errorArgs: ccipArgs.errorArgs }\r\n                });\r\n                const tx = {\r\n                    to: txSender,\r\n                    data: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.concat)([ccipArgs.selector, encodeBytes([ccipResult, ccipArgs.extraData])])\r\n                };\r\n                this.emit(\"debug\", { action: \"sendCcipReadCall\", transaction: tx });\r\n                try {\r\n                    const result = await this.#call(tx, blockTag, attempt + 1);\r\n                    this.emit(\"debug\", { action: \"receiveCcipReadCallResult\", transaction: Object.assign({}, tx), result });\r\n                    return result;\r\n                }\r\n                catch (error) {\r\n                    this.emit(\"debug\", { action: \"receiveCcipReadCallError\", transaction: Object.assign({}, tx), error });\r\n                    throw error;\r\n                }\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n    async #checkNetwork(promise) {\r\n        const { value } = await (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.resolveProperties)({\r\n            network: this.getNetwork(),\r\n            value: promise\r\n        });\r\n        return value;\r\n    }\r\n    async call(_tx) {\r\n        const { tx, blockTag } = await (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.resolveProperties)({\r\n            tx: this._getTransactionRequest(_tx),\r\n            blockTag: this._getBlockTag(_tx.blockTag)\r\n        });\r\n        return await this.#checkNetwork(this.#call(tx, blockTag, _tx.enableCcipRead ? 0 : -1));\r\n    }\r\n    // Account\r\n    async #getAccountValue(request, _address, _blockTag) {\r\n        let address = this._getAddress(_address);\r\n        let blockTag = this._getBlockTag(_blockTag);\r\n        if (typeof (address) !== \"string\" || typeof (blockTag) !== \"string\") {\r\n            [address, blockTag] = await Promise.all([address, blockTag]);\r\n        }\r\n        return await this.#checkNetwork(this.#perform(Object.assign(request, { address, blockTag })));\r\n    }\r\n    async getBalance(address, blockTag) {\r\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt)(await this.#getAccountValue({ method: \"getBalance\" }, address, blockTag), \"%response\");\r\n    }\r\n    async getTransactionCount(address, blockTag) {\r\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getNumber)(await this.#getAccountValue({ method: \"getTransactionCount\" }, address, blockTag), \"%response\");\r\n    }\r\n    async getCode(address, blockTag) {\r\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(await this.#getAccountValue({ method: \"getCode\" }, address, blockTag));\r\n    }\r\n    async getStorage(address, _position, blockTag) {\r\n        const position = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt)(_position, \"position\");\r\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(await this.#getAccountValue({ method: \"getStorage\", position }, address, blockTag));\r\n    }\r\n    // Write\r\n    async broadcastTransaction(signedTx) {\r\n        const { blockNumber, hash, network } = await (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.resolveProperties)({\r\n            blockNumber: this.getBlockNumber(),\r\n            hash: this._perform({\r\n                method: \"broadcastTransaction\",\r\n                signedTransaction: signedTx\r\n            }),\r\n            network: this.getNetwork()\r\n        });\r\n        const tx = _transaction_index_js__WEBPACK_IMPORTED_MODULE_5__.Transaction.from(signedTx);\r\n        if (tx.hash !== hash) {\r\n            throw new Error(\"@TODO: the returned hash did not match\");\r\n        }\r\n        return this._wrapTransactionResponse(tx, network).replaceableTransaction(blockNumber);\r\n    }\r\n    async #getBlock(block, includeTransactions) {\r\n        // @TODO: Add CustomBlockPlugin check\r\n        if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isHexString)(block, 32)) {\r\n            return await this.#perform({\r\n                method: \"getBlock\", blockHash: block, includeTransactions\r\n            });\r\n        }\r\n        let blockTag = this._getBlockTag(block);\r\n        if (typeof (blockTag) !== \"string\") {\r\n            blockTag = await blockTag;\r\n        }\r\n        return await this.#perform({\r\n            method: \"getBlock\", blockTag, includeTransactions\r\n        });\r\n    }\r\n    // Queries\r\n    async getBlock(block, prefetchTxs) {\r\n        const { network, params } = await (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.resolveProperties)({\r\n            network: this.getNetwork(),\r\n            params: this.#getBlock(block, !!prefetchTxs)\r\n        });\r\n        if (params == null) {\r\n            return null;\r\n        }\r\n        return this._wrapBlock(params, network);\r\n    }\r\n    async getTransaction(hash) {\r\n        const { network, params } = await (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.resolveProperties)({\r\n            network: this.getNetwork(),\r\n            params: this.#perform({ method: \"getTransaction\", hash })\r\n        });\r\n        if (params == null) {\r\n            return null;\r\n        }\r\n        return this._wrapTransactionResponse(params, network);\r\n    }\r\n    async getTransactionReceipt(hash) {\r\n        const { network, params } = await (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.resolveProperties)({\r\n            network: this.getNetwork(),\r\n            params: this.#perform({ method: \"getTransactionReceipt\", hash })\r\n        });\r\n        if (params == null) {\r\n            return null;\r\n        }\r\n        // Some backends did not backfill the effectiveGasPrice into old transactions\r\n        // in the receipt, so we look it up manually and inject it.\r\n        if (params.gasPrice == null && params.effectiveGasPrice == null) {\r\n            const tx = await this.#perform({ method: \"getTransaction\", hash });\r\n            if (tx == null) {\r\n                throw new Error(\"report this; could not find tx or effectiveGasPrice\");\r\n            }\r\n            params.effectiveGasPrice = tx.gasPrice;\r\n        }\r\n        return this._wrapTransactionReceipt(params, network);\r\n    }\r\n    async getTransactionResult(hash) {\r\n        const { result } = await (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.resolveProperties)({\r\n            network: this.getNetwork(),\r\n            result: this.#perform({ method: \"getTransactionResult\", hash })\r\n        });\r\n        if (result == null) {\r\n            return null;\r\n        }\r\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(result);\r\n    }\r\n    // Bloom-filter Queries\r\n    async getLogs(_filter) {\r\n        let filter = this._getFilter(_filter);\r\n        if (isPromise(filter)) {\r\n            filter = await filter;\r\n        }\r\n        const { network, params } = await (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.resolveProperties)({\r\n            network: this.getNetwork(),\r\n            params: this.#perform({ method: \"getLogs\", filter })\r\n        });\r\n        return params.map((p) => this._wrapLog(p, network));\r\n    }\r\n    // ENS\r\n    _getProvider(chainId) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(false, \"provider cannot connect to target network\", \"UNSUPPORTED_OPERATION\", {\r\n            operation: \"_getProvider()\"\r\n        });\r\n    }\r\n    async getResolver(name) {\r\n        return await _ens_resolver_js__WEBPACK_IMPORTED_MODULE_6__.EnsResolver.fromName(this, name);\r\n    }\r\n    async getAvatar(name) {\r\n        const resolver = await this.getResolver(name);\r\n        if (resolver) {\r\n            return await resolver.getAvatar();\r\n        }\r\n        return null;\r\n    }\r\n    async resolveName(name) {\r\n        const resolver = await this.getResolver(name);\r\n        if (resolver) {\r\n            return await resolver.getAddress();\r\n        }\r\n        return null;\r\n    }\r\n    async lookupAddress(address) {\r\n        address = (0,_address_index_js__WEBPACK_IMPORTED_MODULE_1__.getAddress)(address);\r\n        const node = (0,_hash_index_js__WEBPACK_IMPORTED_MODULE_7__.namehash)(address.substring(2).toLowerCase() + \".addr.reverse\");\r\n        try {\r\n            const ensAddr = await _ens_resolver_js__WEBPACK_IMPORTED_MODULE_6__.EnsResolver.getEnsAddress(this);\r\n            const ensContract = new _contract_index_js__WEBPACK_IMPORTED_MODULE_8__.Contract(ensAddr, [\r\n                \"function resolver(bytes32) view returns (address)\"\r\n            ], this);\r\n            const resolver = await ensContract.resolver(node);\r\n            if (resolver == null || resolver === _constants_index_js__WEBPACK_IMPORTED_MODULE_9__.ZeroAddress) {\r\n                return null;\r\n            }\r\n            const resolverContract = new _contract_index_js__WEBPACK_IMPORTED_MODULE_8__.Contract(resolver, [\r\n                \"function name(bytes32) view returns (string)\"\r\n            ], this);\r\n            const name = await resolverContract.name(node);\r\n            // Failed forward resolution\r\n            const check = await this.resolveName(name);\r\n            if (check !== address) {\r\n                return null;\r\n            }\r\n            return name;\r\n        }\r\n        catch (error) {\r\n            // No data was returned from the resolver\r\n            if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isError)(error, \"BAD_DATA\") && error.value === \"0x\") {\r\n                return null;\r\n            }\r\n            // Something reerted\r\n            if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isError)(error, \"CALL_EXCEPTION\")) {\r\n                return null;\r\n            }\r\n            throw error;\r\n        }\r\n        return null;\r\n    }\r\n    async waitForTransaction(hash, _confirms, timeout) {\r\n        const confirms = (_confirms != null) ? _confirms : 1;\r\n        if (confirms === 0) {\r\n            return this.getTransactionReceipt(hash);\r\n        }\r\n        return new Promise(async (resolve, reject) => {\r\n            let timer = null;\r\n            const listener = (async (blockNumber) => {\r\n                try {\r\n                    const receipt = await this.getTransactionReceipt(hash);\r\n                    if (receipt != null) {\r\n                        if (blockNumber - receipt.blockNumber + 1 >= confirms) {\r\n                            resolve(receipt);\r\n                            //this.off(\"block\", listener);\r\n                            if (timer) {\r\n                                clearTimeout(timer);\r\n                                timer = null;\r\n                            }\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n                catch (error) {\r\n                    console.log(\"EEE\", error);\r\n                }\r\n                this.once(\"block\", listener);\r\n            });\r\n            if (timeout != null) {\r\n                timer = setTimeout(() => {\r\n                    if (timer == null) {\r\n                        return;\r\n                    }\r\n                    timer = null;\r\n                    this.off(\"block\", listener);\r\n                    reject((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.makeError)(\"timeout\", \"TIMEOUT\", { reason: \"timeout\" }));\r\n                }, timeout);\r\n            }\r\n            listener(await this.getBlockNumber());\r\n        });\r\n    }\r\n    async waitForBlock(blockTag) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(false, \"not implemented yet\", \"NOT_IMPLEMENTED\", {\r\n            operation: \"waitForBlock\"\r\n        });\r\n    }\r\n    /**\r\n     *  Clear a timer created using the [[_setTimeout]] method.\r\n     */\r\n    _clearTimeout(timerId) {\r\n        const timer = this.#timers.get(timerId);\r\n        if (!timer) {\r\n            return;\r\n        }\r\n        if (timer.timer) {\r\n            clearTimeout(timer.timer);\r\n        }\r\n        this.#timers.delete(timerId);\r\n    }\r\n    /**\r\n     *  Create a timer that will execute %%func%% after at least %%timeout%%\r\n     *  (in ms). If %%timeout%% is unspecified, then %%func%% will execute\r\n     *  in the next event loop.\r\n     *\r\n     *  [Pausing](AbstractProvider-paused) the provider will pause any\r\n     *  associated timers.\r\n     */\r\n    _setTimeout(_func, timeout) {\r\n        if (timeout == null) {\r\n            timeout = 0;\r\n        }\r\n        const timerId = this.#nextTimer++;\r\n        const func = () => {\r\n            this.#timers.delete(timerId);\r\n            _func();\r\n        };\r\n        if (this.paused) {\r\n            this.#timers.set(timerId, { timer: null, func, time: timeout });\r\n        }\r\n        else {\r\n            const timer = setTimeout(func, timeout);\r\n            this.#timers.set(timerId, { timer, func, time: getTime() });\r\n        }\r\n        return timerId;\r\n    }\r\n    /**\r\n     *  Perform %%func%% on each subscriber.\r\n     */\r\n    _forEachSubscriber(func) {\r\n        for (const sub of this.#subs.values()) {\r\n            func(sub.subscriber);\r\n        }\r\n    }\r\n    /**\r\n     *  Sub-classes may override this to customize subscription\r\n     *  implementations.\r\n     */\r\n    _getSubscriber(sub) {\r\n        switch (sub.type) {\r\n            case \"debug\":\r\n            case \"error\":\r\n            case \"network\":\r\n                return new UnmanagedSubscriber(sub.type);\r\n            case \"block\": {\r\n                const subscriber = new _subscriber_polling_js__WEBPACK_IMPORTED_MODULE_10__.PollingBlockSubscriber(this);\r\n                subscriber.pollingInterval = this.pollingInterval;\r\n                return subscriber;\r\n            }\r\n            case \"safe\":\r\n            case \"finalized\":\r\n                return new _subscriber_polling_js__WEBPACK_IMPORTED_MODULE_10__.PollingBlockTagSubscriber(this, sub.type);\r\n            case \"event\":\r\n                return new _subscriber_polling_js__WEBPACK_IMPORTED_MODULE_10__.PollingEventSubscriber(this, sub.filter);\r\n            case \"transaction\":\r\n                return new _subscriber_polling_js__WEBPACK_IMPORTED_MODULE_10__.PollingTransactionSubscriber(this, sub.hash);\r\n            case \"orphan\":\r\n                return new _subscriber_polling_js__WEBPACK_IMPORTED_MODULE_10__.PollingOrphanSubscriber(this, sub.filter);\r\n        }\r\n        throw new Error(`unsupported event: ${sub.type}`);\r\n    }\r\n    /**\r\n     *  If a [[Subscriber]] fails and needs to replace itself, this\r\n     *  method may be used.\r\n     *\r\n     *  For example, this is used for providers when using the\r\n     *  ``eth_getFilterChanges`` method, which can return null if state\r\n     *  filters are not supported by the backend, allowing the Subscriber\r\n     *  to swap in a [[PollingEventSubscriber]].\r\n     */\r\n    _recoverSubscriber(oldSub, newSub) {\r\n        for (const sub of this.#subs.values()) {\r\n            if (sub.subscriber === oldSub) {\r\n                if (sub.started) {\r\n                    sub.subscriber.stop();\r\n                }\r\n                sub.subscriber = newSub;\r\n                if (sub.started) {\r\n                    newSub.start();\r\n                }\r\n                if (this.#pausedState != null) {\r\n                    newSub.pause(this.#pausedState);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    async #hasSub(event, emitArgs) {\r\n        let sub = await getSubscription(event, this);\r\n        // This is a log that is removing an existing log; we actually want\r\n        // to emit an orphan event for the removed log\r\n        if (sub.type === \"event\" && emitArgs && emitArgs.length > 0 && emitArgs[0].removed === true) {\r\n            sub = await getSubscription({ orphan: \"drop-log\", log: emitArgs[0] }, this);\r\n        }\r\n        return this.#subs.get(sub.tag) || null;\r\n    }\r\n    async #getSub(event) {\r\n        const subscription = await getSubscription(event, this);\r\n        // Prevent tampering with our tag in any subclass' _getSubscriber\r\n        const tag = subscription.tag;\r\n        let sub = this.#subs.get(tag);\r\n        if (!sub) {\r\n            const subscriber = this._getSubscriber(subscription);\r\n            const addressableMap = new WeakMap();\r\n            const nameMap = new Map();\r\n            sub = { subscriber, tag, addressableMap, nameMap, started: false, listeners: [] };\r\n            this.#subs.set(tag, sub);\r\n        }\r\n        return sub;\r\n    }\r\n    async on(event, listener) {\r\n        const sub = await this.#getSub(event);\r\n        sub.listeners.push({ listener, once: false });\r\n        if (!sub.started) {\r\n            sub.subscriber.start();\r\n            sub.started = true;\r\n            if (this.#pausedState != null) {\r\n                sub.subscriber.pause(this.#pausedState);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    async once(event, listener) {\r\n        const sub = await this.#getSub(event);\r\n        sub.listeners.push({ listener, once: true });\r\n        if (!sub.started) {\r\n            sub.subscriber.start();\r\n            sub.started = true;\r\n            if (this.#pausedState != null) {\r\n                sub.subscriber.pause(this.#pausedState);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    async emit(event, ...args) {\r\n        const sub = await this.#hasSub(event, args);\r\n        // If there is not subscription or if a recent emit removed\r\n        // the last of them (which also deleted the sub) do nothing\r\n        if (!sub || sub.listeners.length === 0) {\r\n            return false;\r\n        }\r\n        ;\r\n        const count = sub.listeners.length;\r\n        sub.listeners = sub.listeners.filter(({ listener, once }) => {\r\n            const payload = new _utils_index_js__WEBPACK_IMPORTED_MODULE_0__.EventPayload(this, (once ? null : listener), event);\r\n            try {\r\n                listener.call(this, ...args, payload);\r\n            }\r\n            catch (error) { }\r\n            return !once;\r\n        });\r\n        if (sub.listeners.length === 0) {\r\n            if (sub.started) {\r\n                sub.subscriber.stop();\r\n            }\r\n            this.#subs.delete(sub.tag);\r\n        }\r\n        return (count > 0);\r\n    }\r\n    async listenerCount(event) {\r\n        if (event) {\r\n            const sub = await this.#hasSub(event);\r\n            if (!sub) {\r\n                return 0;\r\n            }\r\n            return sub.listeners.length;\r\n        }\r\n        let total = 0;\r\n        for (const { listeners } of this.#subs.values()) {\r\n            total += listeners.length;\r\n        }\r\n        return total;\r\n    }\r\n    async listeners(event) {\r\n        if (event) {\r\n            const sub = await this.#hasSub(event);\r\n            if (!sub) {\r\n                return [];\r\n            }\r\n            return sub.listeners.map(({ listener }) => listener);\r\n        }\r\n        let result = [];\r\n        for (const { listeners } of this.#subs.values()) {\r\n            result = result.concat(listeners.map(({ listener }) => listener));\r\n        }\r\n        return result;\r\n    }\r\n    async off(event, listener) {\r\n        const sub = await this.#hasSub(event);\r\n        if (!sub) {\r\n            return this;\r\n        }\r\n        if (listener) {\r\n            const index = sub.listeners.map(({ listener }) => listener).indexOf(listener);\r\n            if (index >= 0) {\r\n                sub.listeners.splice(index, 1);\r\n            }\r\n        }\r\n        if (!listener || sub.listeners.length === 0) {\r\n            if (sub.started) {\r\n                sub.subscriber.stop();\r\n            }\r\n            this.#subs.delete(sub.tag);\r\n        }\r\n        return this;\r\n    }\r\n    async removeAllListeners(event) {\r\n        if (event) {\r\n            const { tag, started, subscriber } = await this.#getSub(event);\r\n            if (started) {\r\n                subscriber.stop();\r\n            }\r\n            this.#subs.delete(tag);\r\n        }\r\n        else {\r\n            for (const [tag, { started, subscriber }] of this.#subs) {\r\n                if (started) {\r\n                    subscriber.stop();\r\n                }\r\n                this.#subs.delete(tag);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    // Alias for \"on\"\r\n    async addListener(event, listener) {\r\n        return await this.on(event, listener);\r\n    }\r\n    // Alias for \"off\"\r\n    async removeListener(event, listener) {\r\n        return this.off(event, listener);\r\n    }\r\n    /**\r\n     *  If this provider has been destroyed using the [[destroy]] method.\r\n     *\r\n     *  Once destroyed, all resources are reclaimed, internal event loops\r\n     *  and timers are cleaned up and no further requests may be sent to\r\n     *  the provider.\r\n     */\r\n    get destroyed() {\r\n        return this.#destroyed;\r\n    }\r\n    /**\r\n     *  Sub-classes may use this to shutdown any sockets or release their\r\n     *  resources and reject any pending requests.\r\n     *\r\n     *  Sub-classes **must** call ``super.destroy()``.\r\n     */\r\n    destroy() {\r\n        // Stop all listeners\r\n        this.removeAllListeners();\r\n        // Shut down all tiemrs\r\n        for (const timerId of this.#timers.keys()) {\r\n            this._clearTimeout(timerId);\r\n        }\r\n        this.#destroyed = true;\r\n    }\r\n    /**\r\n     *  Whether the provider is currently paused.\r\n     *\r\n     *  A paused provider will not emit any events, and generally should\r\n     *  not make any requests to the network, but that is up to sub-classes\r\n     *  to manage.\r\n     *\r\n     *  Setting ``paused = true`` is identical to calling ``.pause(false)``,\r\n     *  which will buffer any events that occur while paused until the\r\n     *  provider is unpaused.\r\n     */\r\n    get paused() { return (this.#pausedState != null); }\r\n    set paused(pause) {\r\n        if (!!pause === this.paused) {\r\n            return;\r\n        }\r\n        if (this.paused) {\r\n            this.resume();\r\n        }\r\n        else {\r\n            this.pause(false);\r\n        }\r\n    }\r\n    /**\r\n     *  Pause the provider. If %%dropWhilePaused%%, any events that occur\r\n     *  while paused are dropped, otherwise all events will be emitted once\r\n     *  the provider is unpaused.\r\n     */\r\n    pause(dropWhilePaused) {\r\n        this.#lastBlockNumber = -1;\r\n        if (this.#pausedState != null) {\r\n            if (this.#pausedState == !!dropWhilePaused) {\r\n                return;\r\n            }\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(false, \"cannot change pause type; resume first\", \"UNSUPPORTED_OPERATION\", {\r\n                operation: \"pause\"\r\n            });\r\n        }\r\n        this._forEachSubscriber((s) => s.pause(dropWhilePaused));\r\n        this.#pausedState = !!dropWhilePaused;\r\n        for (const timer of this.#timers.values()) {\r\n            // Clear the timer\r\n            if (timer.timer) {\r\n                clearTimeout(timer.timer);\r\n            }\r\n            // Remaining time needed for when we become unpaused\r\n            timer.time = getTime() - timer.time;\r\n        }\r\n    }\r\n    /**\r\n     *  Resume the provider.\r\n     */\r\n    resume() {\r\n        if (this.#pausedState == null) {\r\n            return;\r\n        }\r\n        this._forEachSubscriber((s) => s.resume());\r\n        this.#pausedState = null;\r\n        for (const timer of this.#timers.values()) {\r\n            // Remaining time when we were paused\r\n            let timeout = timer.time;\r\n            if (timeout < 0) {\r\n                timeout = 0;\r\n            }\r\n            // Start time (in cause paused, so we con compute remaininf time)\r\n            timer.time = getTime();\r\n            // Start the timer\r\n            setTimeout(timer.func, timeout);\r\n        }\r\n    }\r\n}\r\nfunction _parseString(result, start) {\r\n    try {\r\n        const bytes = _parseBytes(result, start);\r\n        if (bytes) {\r\n            return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toUtf8String)(bytes);\r\n        }\r\n    }\r\n    catch (error) { }\r\n    return null;\r\n}\r\nfunction _parseBytes(result, start) {\r\n    if (result === \"0x\") {\r\n        return null;\r\n    }\r\n    try {\r\n        const offset = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getNumber)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.dataSlice)(result, start, start + 32));\r\n        const length = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getNumber)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.dataSlice)(result, offset, offset + 32));\r\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.dataSlice)(result, offset + 32, offset + 32 + length);\r\n    }\r\n    catch (error) { }\r\n    return null;\r\n}\r\nfunction numPad(value) {\r\n    const result = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toBeArray)(value);\r\n    if (result.length > 32) {\r\n        throw new Error(\"internal; should not happen\");\r\n    }\r\n    const padded = new Uint8Array(32);\r\n    padded.set(result, 32 - result.length);\r\n    return padded;\r\n}\r\nfunction bytesPad(value) {\r\n    if ((value.length % 32) === 0) {\r\n        return value;\r\n    }\r\n    const result = new Uint8Array(Math.ceil(value.length / 32) * 32);\r\n    result.set(value);\r\n    return result;\r\n}\r\nconst empty = new Uint8Array([]);\r\n// ABI Encodes a series of (bytes, bytes, ...)\r\nfunction encodeBytes(datas) {\r\n    const result = [];\r\n    let byteCount = 0;\r\n    // Add place-holders for pointers as we add items\r\n    for (let i = 0; i < datas.length; i++) {\r\n        result.push(empty);\r\n        byteCount += 32;\r\n    }\r\n    for (let i = 0; i < datas.length; i++) {\r\n        const data = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(datas[i]);\r\n        // Update the bytes offset\r\n        result[i] = numPad(byteCount);\r\n        // The length and padded value of data\r\n        result.push(numPad(data.length));\r\n        result.push(bytesPad(data));\r\n        byteCount += 32 + Math.ceil(data.length / 32) * 32;\r\n    }\r\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.concat)(result);\r\n}\r\nconst zeros = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\r\nfunction parseOffchainLookup(data) {\r\n    const result = {\r\n        sender: \"\", urls: [], calldata: \"\", selector: \"\", extraData: \"\", errorArgs: []\r\n    };\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.dataLength)(data) >= 5 * 32, \"insufficient OffchainLookup data\", \"OFFCHAIN_FAULT\", {\r\n        reason: \"insufficient OffchainLookup data\"\r\n    });\r\n    const sender = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.dataSlice)(data, 0, 32);\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.dataSlice)(sender, 0, 12) === (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.dataSlice)(zeros, 0, 12), \"corrupt OffchainLookup sender\", \"OFFCHAIN_FAULT\", {\r\n        reason: \"corrupt OffchainLookup sender\"\r\n    });\r\n    result.sender = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.dataSlice)(sender, 12);\r\n    // Read the URLs from the response\r\n    try {\r\n        const urls = [];\r\n        const urlsOffset = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getNumber)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.dataSlice)(data, 32, 64));\r\n        const urlsLength = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getNumber)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.dataSlice)(data, urlsOffset, urlsOffset + 32));\r\n        const urlsData = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.dataSlice)(data, urlsOffset + 32);\r\n        for (let u = 0; u < urlsLength; u++) {\r\n            const url = _parseString(urlsData, u * 32);\r\n            if (url == null) {\r\n                throw new Error(\"abort\");\r\n            }\r\n            urls.push(url);\r\n        }\r\n        result.urls = urls;\r\n    }\r\n    catch (error) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(false, \"corrupt OffchainLookup urls\", \"OFFCHAIN_FAULT\", {\r\n            reason: \"corrupt OffchainLookup urls\"\r\n        });\r\n    }\r\n    // Get the CCIP calldata to forward\r\n    try {\r\n        const calldata = _parseBytes(data, 64);\r\n        if (calldata == null) {\r\n            throw new Error(\"abort\");\r\n        }\r\n        result.calldata = calldata;\r\n    }\r\n    catch (error) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(false, \"corrupt OffchainLookup calldata\", \"OFFCHAIN_FAULT\", {\r\n            reason: \"corrupt OffchainLookup calldata\"\r\n        });\r\n    }\r\n    // Get the callbackSelector (bytes4)\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.dataSlice)(data, 100, 128) === (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.dataSlice)(zeros, 0, 28), \"corrupt OffchainLookup callbaackSelector\", \"OFFCHAIN_FAULT\", {\r\n        reason: \"corrupt OffchainLookup callbaackSelector\"\r\n    });\r\n    result.selector = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.dataSlice)(data, 96, 100);\r\n    // Get the extra data to send back to the contract as context\r\n    try {\r\n        const extraData = _parseBytes(data, 128);\r\n        if (extraData == null) {\r\n            throw new Error(\"abort\");\r\n        }\r\n        result.extraData = extraData;\r\n    }\r\n    catch (error) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(false, \"corrupt OffchainLookup extraData\", \"OFFCHAIN_FAULT\", {\r\n            reason: \"corrupt OffchainLookup extraData\"\r\n        });\r\n    }\r\n    result.errorArgs = \"sender,urls,calldata,selector,extraData\".split(/,/).map((k) => result[k]);\r\n    return result;\r\n}\r\n//# sourceMappingURL=abstract-provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/abstract-provider.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/abstract-signer.js":
/*!******************************************************************!*\
  !*** ./node_modules/ethers/lib.esm/providers/abstract-signer.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractSigner: () => (/* binding */ AbstractSigner),\n/* harmony export */   VoidSigner: () => (/* binding */ VoidSigner)\n/* harmony export */ });\n/* harmony import */ var _address_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../address/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/address/index.js\");\n/* harmony import */ var _transaction_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../transaction/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/transaction/index.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/* harmony import */ var _provider_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./provider.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider.js\");\n/**\r\n *  Generally the [[Wallet]] and [[JsonRpcSigner]] and their sub-classes\r\n *  are sufficent for most developers, but this is provided to\r\n *  fascilitate more complex Signers.\r\n *\r\n *  @_section: api/providers/abstract-signer: Subclassing Signer [abstract-signer]\r\n */\r\n\r\n\r\n\r\n\r\nfunction checkProvider(signer, operation) {\r\n    if (signer.provider) {\r\n        return signer.provider;\r\n    }\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(false, \"missing provider\", \"UNSUPPORTED_OPERATION\", { operation });\r\n}\r\nasync function populate(signer, tx) {\r\n    let pop = (0,_provider_js__WEBPACK_IMPORTED_MODULE_1__.copyRequest)(tx);\r\n    if (pop.to != null) {\r\n        pop.to = (0,_address_index_js__WEBPACK_IMPORTED_MODULE_2__.resolveAddress)(pop.to, signer);\r\n    }\r\n    if (pop.from != null) {\r\n        const from = pop.from;\r\n        pop.from = Promise.all([\r\n            signer.getAddress(),\r\n            (0,_address_index_js__WEBPACK_IMPORTED_MODULE_2__.resolveAddress)(from, signer)\r\n        ]).then(([address, from]) => {\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(address.toLowerCase() === from.toLowerCase(), \"transaction from mismatch\", \"tx.from\", from);\r\n            return address;\r\n        });\r\n    }\r\n    else {\r\n        pop.from = signer.getAddress();\r\n    }\r\n    return await (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.resolveProperties)(pop);\r\n}\r\n/**\r\n *  An **AbstractSigner** includes most of teh functionality required\r\n *  to get a [[Signer]] working as expected, but requires a few\r\n *  Signer-specific methods be overridden.\r\n *\r\n */\r\nclass AbstractSigner {\r\n    /**\r\n     *  The provider this signer is connected to.\r\n     */\r\n    provider;\r\n    /**\r\n     *  Creates a new Signer connected to %%provider%%.\r\n     */\r\n    constructor(provider) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, { provider: (provider || null) });\r\n    }\r\n    async getNonce(blockTag) {\r\n        return checkProvider(this, \"getTransactionCount\").getTransactionCount(await this.getAddress(), blockTag);\r\n    }\r\n    async populateCall(tx) {\r\n        const pop = await populate(this, tx);\r\n        return pop;\r\n    }\r\n    async populateTransaction(tx) {\r\n        const provider = checkProvider(this, \"populateTransaction\");\r\n        const pop = await populate(this, tx);\r\n        if (pop.nonce == null) {\r\n            pop.nonce = await this.getNonce(\"pending\");\r\n        }\r\n        if (pop.gasLimit == null) {\r\n            pop.gasLimit = await this.estimateGas(pop);\r\n        }\r\n        // Populate the chain ID\r\n        const network = await (this.provider).getNetwork();\r\n        if (pop.chainId != null) {\r\n            const chainId = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt)(pop.chainId);\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(chainId === network.chainId, \"transaction chainId mismatch\", \"tx.chainId\", tx.chainId);\r\n        }\r\n        else {\r\n            pop.chainId = network.chainId;\r\n        }\r\n        // Do not allow mixing pre-eip-1559 and eip-1559 properties\r\n        const hasEip1559 = (pop.maxFeePerGas != null || pop.maxPriorityFeePerGas != null);\r\n        if (pop.gasPrice != null && (pop.type === 2 || hasEip1559)) {\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"eip-1559 transaction do not support gasPrice\", \"tx\", tx);\r\n        }\r\n        else if ((pop.type === 0 || pop.type === 1) && hasEip1559) {\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas\", \"tx\", tx);\r\n        }\r\n        if ((pop.type === 2 || pop.type == null) && (pop.maxFeePerGas != null && pop.maxPriorityFeePerGas != null)) {\r\n            // Fully-formed EIP-1559 transaction (skip getFeeData)\r\n            pop.type = 2;\r\n        }\r\n        else if (pop.type === 0 || pop.type === 1) {\r\n            // Explicit Legacy or EIP-2930 transaction\r\n            // We need to get fee data to determine things\r\n            const feeData = await provider.getFeeData();\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(feeData.gasPrice != null, \"network does not support gasPrice\", \"UNSUPPORTED_OPERATION\", {\r\n                operation: \"getGasPrice\"\r\n            });\r\n            // Populate missing gasPrice\r\n            if (pop.gasPrice == null) {\r\n                pop.gasPrice = feeData.gasPrice;\r\n            }\r\n        }\r\n        else {\r\n            // We need to get fee data to determine things\r\n            const feeData = await provider.getFeeData();\r\n            if (pop.type == null) {\r\n                // We need to auto-detect the intended type of this transaction...\r\n                if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {\r\n                    // The network supports EIP-1559!\r\n                    // Upgrade transaction from null to eip-1559\r\n                    if (pop.authorizationList && pop.authorizationList.length) {\r\n                        pop.type = 4;\r\n                    }\r\n                    else {\r\n                        pop.type = 2;\r\n                    }\r\n                    if (pop.gasPrice != null) {\r\n                        // Using legacy gasPrice property on an eip-1559 network,\r\n                        // so use gasPrice as both fee properties\r\n                        const gasPrice = pop.gasPrice;\r\n                        delete pop.gasPrice;\r\n                        pop.maxFeePerGas = gasPrice;\r\n                        pop.maxPriorityFeePerGas = gasPrice;\r\n                    }\r\n                    else {\r\n                        // Populate missing fee data\r\n                        if (pop.maxFeePerGas == null) {\r\n                            pop.maxFeePerGas = feeData.maxFeePerGas;\r\n                        }\r\n                        if (pop.maxPriorityFeePerGas == null) {\r\n                            pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\r\n                        }\r\n                    }\r\n                }\r\n                else if (feeData.gasPrice != null) {\r\n                    // Network doesn't support EIP-1559...\r\n                    // ...but they are trying to use EIP-1559 properties\r\n                    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(!hasEip1559, \"network does not support EIP-1559\", \"UNSUPPORTED_OPERATION\", {\r\n                        operation: \"populateTransaction\"\r\n                    });\r\n                    // Populate missing fee data\r\n                    if (pop.gasPrice == null) {\r\n                        pop.gasPrice = feeData.gasPrice;\r\n                    }\r\n                    // Explicitly set untyped transaction to legacy\r\n                    // @TODO: Maybe this shold allow type 1?\r\n                    pop.type = 0;\r\n                }\r\n                else {\r\n                    // getFeeData has failed us.\r\n                    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(false, \"failed to get consistent fee data\", \"UNSUPPORTED_OPERATION\", {\r\n                        operation: \"signer.getFeeData\"\r\n                    });\r\n                }\r\n            }\r\n            else if (pop.type === 2 || pop.type === 3 || pop.type === 4) {\r\n                // Explicitly using EIP-1559 or EIP-4844\r\n                // Populate missing fee data\r\n                if (pop.maxFeePerGas == null) {\r\n                    pop.maxFeePerGas = feeData.maxFeePerGas;\r\n                }\r\n                if (pop.maxPriorityFeePerGas == null) {\r\n                    pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\r\n                }\r\n            }\r\n        }\r\n        //@TOOD: Don't await all over the place; save them up for\r\n        // the end for better batching\r\n        return await (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.resolveProperties)(pop);\r\n    }\r\n    async populateAuthorization(_auth) {\r\n        const auth = Object.assign({}, _auth);\r\n        // Add a chain ID if not explicitly set to 0\r\n        if (auth.chainId == null) {\r\n            auth.chainId = (await checkProvider(this, \"getNetwork\").getNetwork()).chainId;\r\n        }\r\n        // @TODO: Take chain ID into account when populating noce?\r\n        if (auth.nonce == null) {\r\n            auth.nonce = await this.getNonce();\r\n        }\r\n        return auth;\r\n    }\r\n    async estimateGas(tx) {\r\n        return checkProvider(this, \"estimateGas\").estimateGas(await this.populateCall(tx));\r\n    }\r\n    async call(tx) {\r\n        return checkProvider(this, \"call\").call(await this.populateCall(tx));\r\n    }\r\n    async resolveName(name) {\r\n        const provider = checkProvider(this, \"resolveName\");\r\n        return await provider.resolveName(name);\r\n    }\r\n    async sendTransaction(tx) {\r\n        const provider = checkProvider(this, \"sendTransaction\");\r\n        const pop = await this.populateTransaction(tx);\r\n        delete pop.from;\r\n        const txObj = _transaction_index_js__WEBPACK_IMPORTED_MODULE_3__.Transaction.from(pop);\r\n        return await provider.broadcastTransaction(await this.signTransaction(txObj));\r\n    }\r\n    // @TODO: in v7 move this to be abstract\r\n    authorize(authorization) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(false, \"authorization not implemented for this signer\", \"UNSUPPORTED_OPERATION\", { operation: \"authorize\" });\r\n    }\r\n}\r\n/**\r\n *  A **VoidSigner** is a class deisgned to allow an address to be used\r\n *  in any API which accepts a Signer, but for which there are no\r\n *  credentials available to perform any actual signing.\r\n *\r\n *  This for example allow impersonating an account for the purpose of\r\n *  static calls or estimating gas, but does not allow sending transactions.\r\n */\r\nclass VoidSigner extends AbstractSigner {\r\n    /**\r\n     *  The signer address.\r\n     */\r\n    address;\r\n    /**\r\n     *  Creates a new **VoidSigner** with %%address%% attached to\r\n     *  %%provider%%.\r\n     */\r\n    constructor(address, provider) {\r\n        super(provider);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, { address });\r\n    }\r\n    async getAddress() { return this.address; }\r\n    connect(provider) {\r\n        return new VoidSigner(this.address, provider);\r\n    }\r\n    #throwUnsupported(suffix, operation) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(false, `VoidSigner cannot sign ${suffix}`, \"UNSUPPORTED_OPERATION\", { operation });\r\n    }\r\n    async signTransaction(tx) {\r\n        this.#throwUnsupported(\"transactions\", \"signTransaction\");\r\n    }\r\n    async signMessage(message) {\r\n        this.#throwUnsupported(\"messages\", \"signMessage\");\r\n    }\r\n    async signTypedData(domain, types, value) {\r\n        this.#throwUnsupported(\"typed-data\", \"signTypedData\");\r\n    }\r\n}\r\n//# sourceMappingURL=abstract-signer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/abstract-signer.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/community.js":
/*!************************************************************!*\
  !*** ./node_modules/ethers/lib.esm/providers/community.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   showThrottleMessage: () => (/* binding */ showThrottleMessage)\n/* harmony export */ });\n/**\r\n *  There are many awesome community services that provide Ethereum\r\n *  nodes both for developers just starting out and for large-scale\r\n *  communities.\r\n *\r\n *  @_section: api/providers/thirdparty: Community Providers  [thirdparty]\r\n */\r\n// Show the throttle message only once per service\r\nconst shown = new Set();\r\n/**\r\n *  Displays a warning in the console when the community resource is\r\n *  being used too heavily by the app, recommending the developer\r\n *  acquire their own credentials instead of using the community\r\n *  credentials.\r\n *\r\n *  The notification will only occur once per service.\r\n */\r\nfunction showThrottleMessage(service) {\r\n    if (shown.has(service)) {\r\n        return;\r\n    }\r\n    shown.add(service);\r\n    console.log(\"========= NOTICE =========\");\r\n    console.log(`Request-Rate Exceeded for ${service} (this message will not be repeated)`);\r\n    console.log(\"\");\r\n    console.log(\"The default API keys for each service are provided as a highly-throttled,\");\r\n    console.log(\"community resource for low-traffic projects and early prototyping.\");\r\n    console.log(\"\");\r\n    console.log(\"While your application will continue to function, we highly recommended\");\r\n    console.log(\"signing up for your own API keys to improve performance, increase your\");\r\n    console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\r\n    console.log(\"\");\r\n    console.log(\"For more details: https:/\\/docs.ethers.org/api-keys/\");\r\n    console.log(\"==========================\");\r\n}\r\n//# sourceMappingURL=community.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9wcm92aWRlcnMvY29tbXVuaXR5LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLFNBQVM7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJEOlxcRG9fYW4yXFxsZW5kaHViX3YyXFxsZW5kaHViLWZyb250ZW5kLW5leHRqc1xcbm9kZV9tb2R1bGVzXFxldGhlcnNcXGxpYi5lc21cXHByb3ZpZGVyc1xcY29tbXVuaXR5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiAgVGhlcmUgYXJlIG1hbnkgYXdlc29tZSBjb21tdW5pdHkgc2VydmljZXMgdGhhdCBwcm92aWRlIEV0aGVyZXVtXHJcbiAqICBub2RlcyBib3RoIGZvciBkZXZlbG9wZXJzIGp1c3Qgc3RhcnRpbmcgb3V0IGFuZCBmb3IgbGFyZ2Utc2NhbGVcclxuICogIGNvbW11bml0aWVzLlxyXG4gKlxyXG4gKiAgQF9zZWN0aW9uOiBhcGkvcHJvdmlkZXJzL3RoaXJkcGFydHk6IENvbW11bml0eSBQcm92aWRlcnMgIFt0aGlyZHBhcnR5XVxyXG4gKi9cclxuLy8gU2hvdyB0aGUgdGhyb3R0bGUgbWVzc2FnZSBvbmx5IG9uY2UgcGVyIHNlcnZpY2VcclxuY29uc3Qgc2hvd24gPSBuZXcgU2V0KCk7XHJcbi8qKlxyXG4gKiAgRGlzcGxheXMgYSB3YXJuaW5nIGluIHRoZSBjb25zb2xlIHdoZW4gdGhlIGNvbW11bml0eSByZXNvdXJjZSBpc1xyXG4gKiAgYmVpbmcgdXNlZCB0b28gaGVhdmlseSBieSB0aGUgYXBwLCByZWNvbW1lbmRpbmcgdGhlIGRldmVsb3BlclxyXG4gKiAgYWNxdWlyZSB0aGVpciBvd24gY3JlZGVudGlhbHMgaW5zdGVhZCBvZiB1c2luZyB0aGUgY29tbXVuaXR5XHJcbiAqICBjcmVkZW50aWFscy5cclxuICpcclxuICogIFRoZSBub3RpZmljYXRpb24gd2lsbCBvbmx5IG9jY3VyIG9uY2UgcGVyIHNlcnZpY2UuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2hvd1Rocm90dGxlTWVzc2FnZShzZXJ2aWNlKSB7XHJcbiAgICBpZiAoc2hvd24uaGFzKHNlcnZpY2UpKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgc2hvd24uYWRkKHNlcnZpY2UpO1xyXG4gICAgY29uc29sZS5sb2coXCI9PT09PT09PT0gTk9USUNFID09PT09PT09PVwiKTtcclxuICAgIGNvbnNvbGUubG9nKGBSZXF1ZXN0LVJhdGUgRXhjZWVkZWQgZm9yICR7c2VydmljZX0gKHRoaXMgbWVzc2FnZSB3aWxsIG5vdCBiZSByZXBlYXRlZClgKTtcclxuICAgIGNvbnNvbGUubG9nKFwiXCIpO1xyXG4gICAgY29uc29sZS5sb2coXCJUaGUgZGVmYXVsdCBBUEkga2V5cyBmb3IgZWFjaCBzZXJ2aWNlIGFyZSBwcm92aWRlZCBhcyBhIGhpZ2hseS10aHJvdHRsZWQsXCIpO1xyXG4gICAgY29uc29sZS5sb2coXCJjb21tdW5pdHkgcmVzb3VyY2UgZm9yIGxvdy10cmFmZmljIHByb2plY3RzIGFuZCBlYXJseSBwcm90b3R5cGluZy5cIik7XHJcbiAgICBjb25zb2xlLmxvZyhcIlwiKTtcclxuICAgIGNvbnNvbGUubG9nKFwiV2hpbGUgeW91ciBhcHBsaWNhdGlvbiB3aWxsIGNvbnRpbnVlIHRvIGZ1bmN0aW9uLCB3ZSBoaWdobHkgcmVjb21tZW5kZWRcIik7XHJcbiAgICBjb25zb2xlLmxvZyhcInNpZ25pbmcgdXAgZm9yIHlvdXIgb3duIEFQSSBrZXlzIHRvIGltcHJvdmUgcGVyZm9ybWFuY2UsIGluY3JlYXNlIHlvdXJcIik7XHJcbiAgICBjb25zb2xlLmxvZyhcInJlcXVlc3QgcmF0ZS9saW1pdCBhbmQgZW5hYmxlIG90aGVyIHBlcmtzLCBzdWNoIGFzIG1ldHJpY3MgYW5kIGFkdmFuY2VkIEFQSXMuXCIpO1xyXG4gICAgY29uc29sZS5sb2coXCJcIik7XHJcbiAgICBjb25zb2xlLmxvZyhcIkZvciBtb3JlIGRldGFpbHM6IGh0dHBzOi9cXC9kb2NzLmV0aGVycy5vcmcvYXBpLWtleXMvXCIpO1xyXG4gICAgY29uc29sZS5sb2coXCI9PT09PT09PT09PT09PT09PT09PT09PT09PVwiKTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21tdW5pdHkuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/community.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/default-provider.js":
/*!*******************************************************************!*\
  !*** ./node_modules/ethers/lib.esm/providers/default-provider.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDefaultProvider: () => (/* binding */ getDefaultProvider)\n/* harmony export */ });\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/* harmony import */ var _provider_ankr_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./provider-ankr.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-ankr.js\");\n/* harmony import */ var _provider_alchemy_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./provider-alchemy.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-alchemy.js\");\n/* harmony import */ var _provider_chainstack_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./provider-chainstack.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-chainstack.js\");\n/* harmony import */ var _provider_cloudflare_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./provider-cloudflare.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-cloudflare.js\");\n/* harmony import */ var _provider_etherscan_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./provider-etherscan.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-etherscan.js\");\n/* harmony import */ var _provider_infura_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./provider-infura.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-infura.js\");\n/* harmony import */ var _provider_quicknode_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./provider-quicknode.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-quicknode.js\");\n/* harmony import */ var _provider_fallback_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./provider-fallback.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-fallback.js\");\n/* harmony import */ var _provider_jsonrpc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./provider-jsonrpc.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-jsonrpc.js\");\n/* harmony import */ var _network_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./network.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/network.js\");\n/* harmony import */ var _provider_websocket_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./provider-websocket.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-websocket.js\");\n\r\n\r\n\r\n//import { BlockscoutProvider } from \"./provider-blockscout.js\";\r\n\r\n\r\n\r\n\r\n//import { PocketProvider } from \"./provider-pocket.js\";\r\n\r\n\r\n\r\n\r\n\r\nfunction isWebSocketLike(value) {\r\n    return (value && typeof (value.send) === \"function\" &&\r\n        typeof (value.close) === \"function\");\r\n}\r\nconst Testnets = \"goerli kovan sepolia classicKotti optimism-goerli arbitrum-goerli matic-mumbai bnbt\".split(\" \");\r\n/**\r\n *  Returns a default provider for %%network%%.\r\n *\r\n *  If %%network%% is a [[WebSocketLike]] or string that begins with\r\n *  ``\"ws:\"`` or ``\"wss:\"``, a [[WebSocketProvider]] is returned backed\r\n *  by that WebSocket or URL.\r\n *\r\n *  If %%network%% is a string that begins with ``\"HTTP:\"`` or ``\"HTTPS:\"``,\r\n *  a [[JsonRpcProvider]] is returned connected to that URL.\r\n *\r\n *  Otherwise, a default provider is created backed by well-known public\r\n *  Web3 backends (such as [[link-infura]]) using community-provided API\r\n *  keys.\r\n *\r\n *  The %%options%% allows specifying custom API keys per backend (setting\r\n *  an API key to ``\"-\"`` will omit that provider) and ``options.exclusive``\r\n *  can be set to either a backend name or and array of backend names, which\r\n *  will whitelist **only** those backends.\r\n *\r\n *  Current backend strings supported are:\r\n *  - ``\"alchemy\"``\r\n *  - ``\"ankr\"``\r\n *  - ``\"cloudflare\"``\r\n *  - ``\"chainstack\"``\r\n *  - ``\"etherscan\"``\r\n *  - ``\"infura\"``\r\n *  - ``\"publicPolygon\"``\r\n *  - ``\"quicknode\"``\r\n *\r\n *  @example:\r\n *    // Connect to a local Geth node\r\n *    provider = getDefaultProvider(\"http://localhost:8545/\");\r\n *\r\n *    // Connect to Ethereum mainnet with any current and future\r\n *    // third-party services available\r\n *    provider = getDefaultProvider(\"mainnet\");\r\n *\r\n *    // Connect to Polygon, but only allow Etherscan and\r\n *    // INFURA and use \"MY_API_KEY\" in calls to Etherscan.\r\n *    provider = getDefaultProvider(\"matic\", {\r\n *      etherscan: \"MY_API_KEY\",\r\n *      exclusive: [ \"etherscan\", \"infura\" ]\r\n *    });\r\n */\r\nfunction getDefaultProvider(network, options) {\r\n    if (options == null) {\r\n        options = {};\r\n    }\r\n    const allowService = (name) => {\r\n        if (options[name] === \"-\") {\r\n            return false;\r\n        }\r\n        if (typeof (options.exclusive) === \"string\") {\r\n            return (name === options.exclusive);\r\n        }\r\n        if (Array.isArray(options.exclusive)) {\r\n            return (options.exclusive.indexOf(name) !== -1);\r\n        }\r\n        return true;\r\n    };\r\n    if (typeof (network) === \"string\" && network.match(/^https?:/)) {\r\n        return new _provider_jsonrpc_js__WEBPACK_IMPORTED_MODULE_0__.JsonRpcProvider(network);\r\n    }\r\n    if (typeof (network) === \"string\" && network.match(/^wss?:/) || isWebSocketLike(network)) {\r\n        return new _provider_websocket_js__WEBPACK_IMPORTED_MODULE_1__.WebSocketProvider(network);\r\n    }\r\n    // Get the network and name, if possible\r\n    let staticNetwork = null;\r\n    try {\r\n        staticNetwork = _network_js__WEBPACK_IMPORTED_MODULE_2__.Network.from(network);\r\n    }\r\n    catch (error) { }\r\n    const providers = [];\r\n    if (allowService(\"publicPolygon\") && staticNetwork) {\r\n        if (staticNetwork.name === \"matic\") {\r\n            providers.push(new _provider_jsonrpc_js__WEBPACK_IMPORTED_MODULE_0__.JsonRpcProvider(\"https:/\\/polygon-rpc.com/\", staticNetwork, { staticNetwork }));\r\n        }\r\n        else if (staticNetwork.name === \"matic-amoy\") {\r\n            providers.push(new _provider_jsonrpc_js__WEBPACK_IMPORTED_MODULE_0__.JsonRpcProvider(\"https:/\\/rpc-amoy.polygon.technology/\", staticNetwork, { staticNetwork }));\r\n        }\r\n    }\r\n    if (allowService(\"alchemy\")) {\r\n        try {\r\n            providers.push(new _provider_alchemy_js__WEBPACK_IMPORTED_MODULE_3__.AlchemyProvider(network, options.alchemy));\r\n        }\r\n        catch (error) { }\r\n    }\r\n    if (allowService(\"ankr\") && options.ankr != null) {\r\n        try {\r\n            providers.push(new _provider_ankr_js__WEBPACK_IMPORTED_MODULE_4__.AnkrProvider(network, options.ankr));\r\n        }\r\n        catch (error) { }\r\n    }\r\n    /* Temporarily remove until custom error issue is fixed\r\n        if (allowService(\"blockscout\")) {\r\n            try {\r\n                providers.push(new BlockscoutProvider(network, options.blockscout));\r\n            } catch (error) { }\r\n        }\r\n    */\r\n    if (allowService(\"chainstack\")) {\r\n        try {\r\n            providers.push(new _provider_chainstack_js__WEBPACK_IMPORTED_MODULE_5__.ChainstackProvider(network, options.chainstack));\r\n        }\r\n        catch (error) { }\r\n    }\r\n    if (allowService(\"cloudflare\")) {\r\n        try {\r\n            providers.push(new _provider_cloudflare_js__WEBPACK_IMPORTED_MODULE_6__.CloudflareProvider(network));\r\n        }\r\n        catch (error) { }\r\n    }\r\n    if (allowService(\"etherscan\")) {\r\n        try {\r\n            providers.push(new _provider_etherscan_js__WEBPACK_IMPORTED_MODULE_7__.EtherscanProvider(network, options.etherscan));\r\n        }\r\n        catch (error) { }\r\n    }\r\n    if (allowService(\"infura\")) {\r\n        try {\r\n            let projectId = options.infura;\r\n            let projectSecret = undefined;\r\n            if (typeof (projectId) === \"object\") {\r\n                projectSecret = projectId.projectSecret;\r\n                projectId = projectId.projectId;\r\n            }\r\n            providers.push(new _provider_infura_js__WEBPACK_IMPORTED_MODULE_8__.InfuraProvider(network, projectId, projectSecret));\r\n        }\r\n        catch (error) { }\r\n    }\r\n    /*\r\n        if (options.pocket !== \"-\") {\r\n            try {\r\n                let appId = options.pocket;\r\n                let secretKey: undefined | string = undefined;\r\n                let loadBalancer: undefined | boolean = undefined;\r\n                if (typeof(appId) === \"object\") {\r\n                    loadBalancer = !!appId.loadBalancer;\r\n                    secretKey = appId.secretKey;\r\n                    appId = appId.appId;\r\n                }\r\n                providers.push(new PocketProvider(network, appId, secretKey, loadBalancer));\r\n            } catch (error) { console.log(error); }\r\n        }\r\n    */\r\n    if (allowService(\"quicknode\")) {\r\n        try {\r\n            let token = options.quicknode;\r\n            providers.push(new _provider_quicknode_js__WEBPACK_IMPORTED_MODULE_9__.QuickNodeProvider(network, token));\r\n        }\r\n        catch (error) { }\r\n    }\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_10__.assert)(providers.length, \"unsupported default network\", \"UNSUPPORTED_OPERATION\", {\r\n        operation: \"getDefaultProvider\"\r\n    });\r\n    // No need for a FallbackProvider\r\n    if (providers.length === 1) {\r\n        return providers[0];\r\n    }\r\n    // We use the floor because public third-party providers can be unreliable,\r\n    // so a low number of providers with a large quorum will fail too often\r\n    let quorum = Math.floor(providers.length / 2);\r\n    if (quorum > 2) {\r\n        quorum = 2;\r\n    }\r\n    // Testnets don't need as strong a security gaurantee and speed is\r\n    // more useful during testing\r\n    if (staticNetwork && Testnets.indexOf(staticNetwork.name) !== -1) {\r\n        quorum = 1;\r\n    }\r\n    // Provided override qorum takes priority\r\n    if (options && options.quorum) {\r\n        quorum = options.quorum;\r\n    }\r\n    return new _provider_fallback_js__WEBPACK_IMPORTED_MODULE_11__.FallbackProvider(providers, undefined, { quorum });\r\n}\r\n//# sourceMappingURL=default-provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/default-provider.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/ens-resolver.js":
/*!***************************************************************!*\
  !*** ./node_modules/ethers/lib.esm/providers/ens-resolver.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BasicMulticoinProviderPlugin: () => (/* binding */ BasicMulticoinProviderPlugin),\n/* harmony export */   EnsResolver: () => (/* binding */ EnsResolver),\n/* harmony export */   MulticoinProviderPlugin: () => (/* binding */ MulticoinProviderPlugin)\n/* harmony export */ });\n/* harmony import */ var _address_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../address/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/address/index.js\");\n/* harmony import */ var _constants_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../constants/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/constants/index.js\");\n/* harmony import */ var _contract_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../contract/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/contract/index.js\");\n/* harmony import */ var _hash_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../hash/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/hash/index.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/**\r\n *  ENS is a service which allows easy-to-remember names to map to\r\n *  network addresses.\r\n *\r\n *  @_section: api/providers/ens-resolver:ENS Resolver  [about-ens-rsolver]\r\n */\r\n\r\n\r\n\r\n\r\n\r\n// @TODO: This should use the fetch-data:ipfs gateway\r\n// Trim off the ipfs:// prefix and return the default gateway URL\r\nfunction getIpfsLink(link) {\r\n    if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\r\n        link = link.substring(12);\r\n    }\r\n    else if (link.match(/^ipfs:\\/\\//i)) {\r\n        link = link.substring(7);\r\n    }\r\n    else {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"unsupported IPFS format\", \"link\", link);\r\n    }\r\n    return `https:/\\/gateway.ipfs.io/ipfs/${link}`;\r\n}\r\n;\r\n;\r\n/**\r\n *  A provider plugin super-class for processing multicoin address types.\r\n */\r\nclass MulticoinProviderPlugin {\r\n    /**\r\n     *  The name.\r\n     */\r\n    name;\r\n    /**\r\n     *  Creates a new **MulticoinProviderPluing** for %%name%%.\r\n     */\r\n    constructor(name) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, { name });\r\n    }\r\n    connect(proivder) {\r\n        return this;\r\n    }\r\n    /**\r\n     *  Returns ``true`` if %%coinType%% is supported by this plugin.\r\n     */\r\n    supportsCoinType(coinType) {\r\n        return false;\r\n    }\r\n    /**\r\n     *  Resolves to the encoded %%address%% for %%coinType%%.\r\n     */\r\n    async encodeAddress(coinType, address) {\r\n        throw new Error(\"unsupported coin\");\r\n    }\r\n    /**\r\n     *  Resolves to the decoded %%data%% for %%coinType%%.\r\n     */\r\n    async decodeAddress(coinType, data) {\r\n        throw new Error(\"unsupported coin\");\r\n    }\r\n}\r\nconst BasicMulticoinPluginId = \"org.ethers.plugins.provider.BasicMulticoin\";\r\n/**\r\n *  A **BasicMulticoinProviderPlugin** provides service for common\r\n *  coin types, which do not require additional libraries to encode or\r\n *  decode.\r\n */\r\nclass BasicMulticoinProviderPlugin extends MulticoinProviderPlugin {\r\n    /**\r\n     *  Creates a new **BasicMulticoinProviderPlugin**.\r\n     */\r\n    constructor() {\r\n        super(BasicMulticoinPluginId);\r\n    }\r\n}\r\nconst matcherIpfs = new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\");\r\nconst matchers = [\r\n    new RegExp(\"^(https):/\\/(.*)$\", \"i\"),\r\n    new RegExp(\"^(data):(.*)$\", \"i\"),\r\n    matcherIpfs,\r\n    new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\"),\r\n];\r\n/**\r\n *  A connected object to a resolved ENS name resolver, which can be\r\n *  used to query additional details.\r\n */\r\nclass EnsResolver {\r\n    /**\r\n     *  The connected provider.\r\n     */\r\n    provider;\r\n    /**\r\n     *  The address of the resolver.\r\n     */\r\n    address;\r\n    /**\r\n     *  The name this resolver was resolved against.\r\n     */\r\n    name;\r\n    // For EIP-2544 names, the ancestor that provided the resolver\r\n    #supports2544;\r\n    #resolver;\r\n    constructor(provider, address, name) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, { provider, address, name });\r\n        this.#supports2544 = null;\r\n        this.#resolver = new _contract_index_js__WEBPACK_IMPORTED_MODULE_1__.Contract(address, [\r\n            \"function supportsInterface(bytes4) view returns (bool)\",\r\n            \"function resolve(bytes, bytes) view returns (bytes)\",\r\n            \"function addr(bytes32) view returns (address)\",\r\n            \"function addr(bytes32, uint) view returns (bytes)\",\r\n            \"function text(bytes32, string) view returns (string)\",\r\n            \"function contenthash(bytes32) view returns (bytes)\",\r\n        ], provider);\r\n    }\r\n    /**\r\n     *  Resolves to true if the resolver supports wildcard resolution.\r\n     */\r\n    async supportsWildcard() {\r\n        if (this.#supports2544 == null) {\r\n            this.#supports2544 = (async () => {\r\n                try {\r\n                    return await this.#resolver.supportsInterface(\"0x9061b923\");\r\n                }\r\n                catch (error) {\r\n                    // Wildcard resolvers must understand supportsInterface\r\n                    // and return true.\r\n                    if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isError)(error, \"CALL_EXCEPTION\")) {\r\n                        return false;\r\n                    }\r\n                    // Let future attempts try again...\r\n                    this.#supports2544 = null;\r\n                    throw error;\r\n                }\r\n            })();\r\n        }\r\n        return await this.#supports2544;\r\n    }\r\n    async #fetch(funcName, params) {\r\n        params = (params || []).slice();\r\n        const iface = this.#resolver.interface;\r\n        // The first parameters is always the nodehash\r\n        params.unshift((0,_hash_index_js__WEBPACK_IMPORTED_MODULE_2__.namehash)(this.name));\r\n        let fragment = null;\r\n        if (await this.supportsWildcard()) {\r\n            fragment = iface.getFunction(funcName);\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(fragment, \"missing fragment\", \"UNKNOWN_ERROR\", {\r\n                info: { funcName }\r\n            });\r\n            params = [\r\n                (0,_hash_index_js__WEBPACK_IMPORTED_MODULE_2__.dnsEncode)(this.name, 255),\r\n                iface.encodeFunctionData(fragment, params)\r\n            ];\r\n            funcName = \"resolve(bytes,bytes)\";\r\n        }\r\n        params.push({\r\n            enableCcipRead: true\r\n        });\r\n        try {\r\n            const result = await this.#resolver[funcName](...params);\r\n            if (fragment) {\r\n                return iface.decodeFunctionResult(fragment, result)[0];\r\n            }\r\n            return result;\r\n        }\r\n        catch (error) {\r\n            if (!(0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isError)(error, \"CALL_EXCEPTION\")) {\r\n                throw error;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     *  Resolves to the address for %%coinType%% or null if the\r\n     *  provided %%coinType%% has not been configured.\r\n     */\r\n    async getAddress(coinType) {\r\n        if (coinType == null) {\r\n            coinType = 60;\r\n        }\r\n        if (coinType === 60) {\r\n            try {\r\n                const result = await this.#fetch(\"addr(bytes32)\");\r\n                // No address\r\n                if (result == null || result === _constants_index_js__WEBPACK_IMPORTED_MODULE_3__.ZeroAddress) {\r\n                    return null;\r\n                }\r\n                return result;\r\n            }\r\n            catch (error) {\r\n                if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isError)(error, \"CALL_EXCEPTION\")) {\r\n                    return null;\r\n                }\r\n                throw error;\r\n            }\r\n        }\r\n        // Try decoding its EVM canonical chain as an EVM chain address first\r\n        if (coinType >= 0 && coinType < 0x80000000) {\r\n            let ethCoinType = coinType + 0x80000000;\r\n            const data = await this.#fetch(\"addr(bytes32,uint)\", [ethCoinType]);\r\n            if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isHexString)(data, 20)) {\r\n                return (0,_address_index_js__WEBPACK_IMPORTED_MODULE_4__.getAddress)(data);\r\n            }\r\n        }\r\n        let coinPlugin = null;\r\n        for (const plugin of this.provider.plugins) {\r\n            if (!(plugin instanceof MulticoinProviderPlugin)) {\r\n                continue;\r\n            }\r\n            if (plugin.supportsCoinType(coinType)) {\r\n                coinPlugin = plugin;\r\n                break;\r\n            }\r\n        }\r\n        if (coinPlugin == null) {\r\n            return null;\r\n        }\r\n        // keccak256(\"addr(bytes32,uint256\")\r\n        const data = await this.#fetch(\"addr(bytes32,uint)\", [coinType]);\r\n        // No address\r\n        if (data == null || data === \"0x\") {\r\n            return null;\r\n        }\r\n        // Compute the address\r\n        const address = await coinPlugin.decodeAddress(coinType, data);\r\n        if (address != null) {\r\n            return address;\r\n        }\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(false, `invalid coin data`, \"UNSUPPORTED_OPERATION\", {\r\n            operation: `getAddress(${coinType})`,\r\n            info: { coinType, data }\r\n        });\r\n    }\r\n    /**\r\n     *  Resolves to the EIP-634 text record for %%key%%, or ``null``\r\n     *  if unconfigured.\r\n     */\r\n    async getText(key) {\r\n        const data = await this.#fetch(\"text(bytes32,string)\", [key]);\r\n        if (data == null || data === \"0x\") {\r\n            return null;\r\n        }\r\n        return data;\r\n    }\r\n    /**\r\n     *  Rsolves to the content-hash or ``null`` if unconfigured.\r\n     */\r\n    async getContentHash() {\r\n        // keccak256(\"contenthash()\")\r\n        const data = await this.#fetch(\"contenthash(bytes32)\");\r\n        // No contenthash\r\n        if (data == null || data === \"0x\") {\r\n            return null;\r\n        }\r\n        // IPFS (CID: 1, Type: 70=DAG-PB, 72=libp2p-key)\r\n        const ipfs = data.match(/^0x(e3010170|e5010172)(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\r\n        if (ipfs) {\r\n            const scheme = (ipfs[1] === \"e3010170\") ? \"ipfs\" : \"ipns\";\r\n            const length = parseInt(ipfs[4], 16);\r\n            if (ipfs[5].length === length * 2) {\r\n                return `${scheme}:/\\/${(0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.encodeBase58)(\"0x\" + ipfs[2])}`;\r\n            }\r\n        }\r\n        // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\r\n        const swarm = data.match(/^0xe40101fa011b20([0-9a-f]*)$/);\r\n        if (swarm && swarm[1].length === 64) {\r\n            return `bzz:/\\/${swarm[1]}`;\r\n        }\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(false, `invalid or unsupported content hash data`, \"UNSUPPORTED_OPERATION\", {\r\n            operation: \"getContentHash()\",\r\n            info: { data }\r\n        });\r\n    }\r\n    /**\r\n     *  Resolves to the avatar url or ``null`` if the avatar is either\r\n     *  unconfigured or incorrectly configured (e.g. references an NFT\r\n     *  not owned by the address).\r\n     *\r\n     *  If diagnosing issues with configurations, the [[_getAvatar]]\r\n     *  method may be useful.\r\n     */\r\n    async getAvatar() {\r\n        const avatar = await this._getAvatar();\r\n        return avatar.url;\r\n    }\r\n    /**\r\n     *  When resolving an avatar, there are many steps involved, such\r\n     *  fetching metadata and possibly validating ownership of an\r\n     *  NFT.\r\n     *\r\n     *  This method can be used to examine each step and the value it\r\n     *  was working from.\r\n     */\r\n    async _getAvatar() {\r\n        const linkage = [{ type: \"name\", value: this.name }];\r\n        try {\r\n            // test data for ricmoo.eth\r\n            //const avatar = \"eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233\";\r\n            const avatar = await this.getText(\"avatar\");\r\n            if (avatar == null) {\r\n                linkage.push({ type: \"!avatar\", value: \"\" });\r\n                return { url: null, linkage };\r\n            }\r\n            linkage.push({ type: \"avatar\", value: avatar });\r\n            for (let i = 0; i < matchers.length; i++) {\r\n                const match = avatar.match(matchers[i]);\r\n                if (match == null) {\r\n                    continue;\r\n                }\r\n                const scheme = match[1].toLowerCase();\r\n                switch (scheme) {\r\n                    case \"https\":\r\n                    case \"data\":\r\n                        linkage.push({ type: \"url\", value: avatar });\r\n                        return { linkage, url: avatar };\r\n                    case \"ipfs\": {\r\n                        const url = getIpfsLink(avatar);\r\n                        linkage.push({ type: \"ipfs\", value: avatar });\r\n                        linkage.push({ type: \"url\", value: url });\r\n                        return { linkage, url };\r\n                    }\r\n                    case \"erc721\":\r\n                    case \"erc1155\": {\r\n                        // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\r\n                        const selector = (scheme === \"erc721\") ? \"tokenURI(uint256)\" : \"uri(uint256)\";\r\n                        linkage.push({ type: scheme, value: avatar });\r\n                        // The owner of this name\r\n                        const owner = await this.getAddress();\r\n                        if (owner == null) {\r\n                            linkage.push({ type: \"!owner\", value: \"\" });\r\n                            return { url: null, linkage };\r\n                        }\r\n                        const comps = (match[2] || \"\").split(\"/\");\r\n                        if (comps.length !== 2) {\r\n                            linkage.push({ type: `!${scheme}caip`, value: (match[2] || \"\") });\r\n                            return { url: null, linkage };\r\n                        }\r\n                        const tokenId = comps[1];\r\n                        const contract = new _contract_index_js__WEBPACK_IMPORTED_MODULE_1__.Contract(comps[0], [\r\n                            // ERC-721\r\n                            \"function tokenURI(uint) view returns (string)\",\r\n                            \"function ownerOf(uint) view returns (address)\",\r\n                            // ERC-1155\r\n                            \"function uri(uint) view returns (string)\",\r\n                            \"function balanceOf(address, uint256) view returns (uint)\"\r\n                        ], this.provider);\r\n                        // Check that this account owns the token\r\n                        if (scheme === \"erc721\") {\r\n                            const tokenOwner = await contract.ownerOf(tokenId);\r\n                            if (owner !== tokenOwner) {\r\n                                linkage.push({ type: \"!owner\", value: tokenOwner });\r\n                                return { url: null, linkage };\r\n                            }\r\n                            linkage.push({ type: \"owner\", value: tokenOwner });\r\n                        }\r\n                        else if (scheme === \"erc1155\") {\r\n                            const balance = await contract.balanceOf(owner, tokenId);\r\n                            if (!balance) {\r\n                                linkage.push({ type: \"!balance\", value: \"0\" });\r\n                                return { url: null, linkage };\r\n                            }\r\n                            linkage.push({ type: \"balance\", value: balance.toString() });\r\n                        }\r\n                        // Call the token contract for the metadata URL\r\n                        let metadataUrl = await contract[selector](tokenId);\r\n                        if (metadataUrl == null || metadataUrl === \"0x\") {\r\n                            linkage.push({ type: \"!metadata-url\", value: \"\" });\r\n                            return { url: null, linkage };\r\n                        }\r\n                        linkage.push({ type: \"metadata-url-base\", value: metadataUrl });\r\n                        // ERC-1155 allows a generic {id} in the URL\r\n                        if (scheme === \"erc1155\") {\r\n                            metadataUrl = metadataUrl.replace(\"{id}\", (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toBeHex)(tokenId, 32).substring(2));\r\n                            linkage.push({ type: \"metadata-url-expanded\", value: metadataUrl });\r\n                        }\r\n                        // Transform IPFS metadata links\r\n                        if (metadataUrl.match(/^ipfs:/i)) {\r\n                            metadataUrl = getIpfsLink(metadataUrl);\r\n                        }\r\n                        linkage.push({ type: \"metadata-url\", value: metadataUrl });\r\n                        // Get the token metadata\r\n                        let metadata = {};\r\n                        const response = await (new _utils_index_js__WEBPACK_IMPORTED_MODULE_0__.FetchRequest(metadataUrl)).send();\r\n                        response.assertOk();\r\n                        try {\r\n                            metadata = response.bodyJson;\r\n                        }\r\n                        catch (error) {\r\n                            try {\r\n                                linkage.push({ type: \"!metadata\", value: response.bodyText });\r\n                            }\r\n                            catch (error) {\r\n                                const bytes = response.body;\r\n                                if (bytes) {\r\n                                    linkage.push({ type: \"!metadata\", value: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(bytes) });\r\n                                }\r\n                                return { url: null, linkage };\r\n                            }\r\n                            return { url: null, linkage };\r\n                        }\r\n                        if (!metadata) {\r\n                            linkage.push({ type: \"!metadata\", value: \"\" });\r\n                            return { url: null, linkage };\r\n                        }\r\n                        linkage.push({ type: \"metadata\", value: JSON.stringify(metadata) });\r\n                        // Pull the image URL out\r\n                        let imageUrl = metadata.image;\r\n                        if (typeof (imageUrl) !== \"string\") {\r\n                            linkage.push({ type: \"!imageUrl\", value: \"\" });\r\n                            return { url: null, linkage };\r\n                        }\r\n                        if (imageUrl.match(/^(https:\\/\\/|data:)/i)) {\r\n                            // Allow\r\n                        }\r\n                        else {\r\n                            // Transform IPFS link to gateway\r\n                            const ipfs = imageUrl.match(matcherIpfs);\r\n                            if (ipfs == null) {\r\n                                linkage.push({ type: \"!imageUrl-ipfs\", value: imageUrl });\r\n                                return { url: null, linkage };\r\n                            }\r\n                            linkage.push({ type: \"imageUrl-ipfs\", value: imageUrl });\r\n                            imageUrl = getIpfsLink(imageUrl);\r\n                        }\r\n                        linkage.push({ type: \"url\", value: imageUrl });\r\n                        return { linkage, url: imageUrl };\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        catch (error) { }\r\n        return { linkage, url: null };\r\n    }\r\n    static async getEnsAddress(provider) {\r\n        const network = await provider.getNetwork();\r\n        const ensPlugin = network.getPlugin(\"org.ethers.plugins.network.Ens\");\r\n        // No ENS...\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(ensPlugin, \"network does not support ENS\", \"UNSUPPORTED_OPERATION\", {\r\n            operation: \"getEnsAddress\", info: { network }\r\n        });\r\n        return ensPlugin.address;\r\n    }\r\n    static async #getResolver(provider, name) {\r\n        const ensAddr = await EnsResolver.getEnsAddress(provider);\r\n        try {\r\n            const contract = new _contract_index_js__WEBPACK_IMPORTED_MODULE_1__.Contract(ensAddr, [\r\n                \"function resolver(bytes32) view returns (address)\"\r\n            ], provider);\r\n            const addr = await contract.resolver((0,_hash_index_js__WEBPACK_IMPORTED_MODULE_2__.namehash)(name), {\r\n                enableCcipRead: true\r\n            });\r\n            if (addr === _constants_index_js__WEBPACK_IMPORTED_MODULE_3__.ZeroAddress) {\r\n                return null;\r\n            }\r\n            return addr;\r\n        }\r\n        catch (error) {\r\n            // ENS registry cannot throw errors on resolver(bytes32),\r\n            // so probably a link error\r\n            throw error;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     *  Resolve to the ENS resolver for %%name%% using %%provider%% or\r\n     *  ``null`` if unconfigured.\r\n     */\r\n    static async fromName(provider, name) {\r\n        let currentName = name;\r\n        while (true) {\r\n            if (currentName === \"\" || currentName === \".\") {\r\n                return null;\r\n            }\r\n            // Optimization since the eth node cannot change and does\r\n            // not have a wildcard resolver\r\n            if (name !== \"eth\" && currentName === \"eth\") {\r\n                return null;\r\n            }\r\n            // Check the current node for a resolver\r\n            const addr = await EnsResolver.#getResolver(provider, currentName);\r\n            // Found a resolver!\r\n            if (addr != null) {\r\n                const resolver = new EnsResolver(provider, addr, name);\r\n                // Legacy resolver found, using EIP-2544 so it isn't safe to use\r\n                if (currentName !== name && !(await resolver.supportsWildcard())) {\r\n                    return null;\r\n                }\r\n                return resolver;\r\n            }\r\n            // Get the parent node\r\n            currentName = currentName.split(\".\").slice(1).join(\".\");\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=ens-resolver.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/ens-resolver.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/format.js":
/*!*********************************************************!*\
  !*** ./node_modules/ethers/lib.esm/providers/format.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   allowNull: () => (/* binding */ allowNull),\n/* harmony export */   arrayOf: () => (/* binding */ arrayOf),\n/* harmony export */   formatBlock: () => (/* binding */ formatBlock),\n/* harmony export */   formatBoolean: () => (/* binding */ formatBoolean),\n/* harmony export */   formatData: () => (/* binding */ formatData),\n/* harmony export */   formatHash: () => (/* binding */ formatHash),\n/* harmony export */   formatLog: () => (/* binding */ formatLog),\n/* harmony export */   formatReceiptLog: () => (/* binding */ formatReceiptLog),\n/* harmony export */   formatTransactionReceipt: () => (/* binding */ formatTransactionReceipt),\n/* harmony export */   formatTransactionResponse: () => (/* binding */ formatTransactionResponse),\n/* harmony export */   formatUint256: () => (/* binding */ formatUint256),\n/* harmony export */   object: () => (/* binding */ object)\n/* harmony export */ });\n/* harmony import */ var _address_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../address/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/address/index.js\");\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../crypto/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/index.js\");\n/* harmony import */ var _transaction_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../transaction/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/transaction/index.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/**\r\n *  @_ignore\r\n */\r\n\r\n\r\n\r\n\r\nconst BN_0 = BigInt(0);\r\nfunction allowNull(format, nullValue) {\r\n    return (function (value) {\r\n        if (value == null) {\r\n            return nullValue;\r\n        }\r\n        return format(value);\r\n    });\r\n}\r\nfunction arrayOf(format, allowNull) {\r\n    return ((array) => {\r\n        if (allowNull && array == null) {\r\n            return null;\r\n        }\r\n        if (!Array.isArray(array)) {\r\n            throw new Error(\"not an array\");\r\n        }\r\n        return array.map((i) => format(i));\r\n    });\r\n}\r\n// Requires an object which matches a fleet of other formatters\r\n// Any FormatFunc may return `undefined` to have the value omitted\r\n// from the result object. Calls preserve `this`.\r\nfunction object(format, altNames) {\r\n    return ((value) => {\r\n        const result = {};\r\n        for (const key in format) {\r\n            let srcKey = key;\r\n            if (altNames && key in altNames && !(srcKey in value)) {\r\n                for (const altKey of altNames[key]) {\r\n                    if (altKey in value) {\r\n                        srcKey = altKey;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            try {\r\n                const nv = format[key](value[srcKey]);\r\n                if (nv !== undefined) {\r\n                    result[key] = nv;\r\n                }\r\n            }\r\n            catch (error) {\r\n                const message = (error instanceof Error) ? error.message : \"not-an-error\";\r\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(false, `invalid value for value.${key} (${message})`, \"BAD_DATA\", { value });\r\n            }\r\n        }\r\n        return result;\r\n    });\r\n}\r\nfunction formatBoolean(value) {\r\n    switch (value) {\r\n        case true:\r\n        case \"true\":\r\n            return true;\r\n        case false:\r\n        case \"false\":\r\n            return false;\r\n    }\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, `invalid boolean; ${JSON.stringify(value)}`, \"value\", value);\r\n}\r\nfunction formatData(value) {\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isHexString)(value, true), \"invalid data\", \"value\", value);\r\n    return value;\r\n}\r\nfunction formatHash(value) {\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isHexString)(value, 32), \"invalid hash\", \"value\", value);\r\n    return value;\r\n}\r\nfunction formatUint256(value) {\r\n    if (!(0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isHexString)(value)) {\r\n        throw new Error(\"invalid uint256\");\r\n    }\r\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.zeroPadValue)(value, 32);\r\n}\r\nconst _formatLog = object({\r\n    address: _address_index_js__WEBPACK_IMPORTED_MODULE_1__.getAddress,\r\n    blockHash: formatHash,\r\n    blockNumber: _utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getNumber,\r\n    data: formatData,\r\n    index: _utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getNumber,\r\n    removed: allowNull(formatBoolean, false),\r\n    topics: arrayOf(formatHash),\r\n    transactionHash: formatHash,\r\n    transactionIndex: _utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getNumber,\r\n}, {\r\n    index: [\"logIndex\"]\r\n});\r\nfunction formatLog(value) {\r\n    return _formatLog(value);\r\n}\r\nconst _formatBlock = object({\r\n    hash: allowNull(formatHash),\r\n    parentHash: formatHash,\r\n    parentBeaconBlockRoot: allowNull(formatHash, null),\r\n    number: _utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getNumber,\r\n    timestamp: _utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getNumber,\r\n    nonce: allowNull(formatData),\r\n    difficulty: _utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt,\r\n    gasLimit: _utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt,\r\n    gasUsed: _utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt,\r\n    stateRoot: allowNull(formatHash, null),\r\n    receiptsRoot: allowNull(formatHash, null),\r\n    blobGasUsed: allowNull(_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt, null),\r\n    excessBlobGas: allowNull(_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt, null),\r\n    miner: allowNull(_address_index_js__WEBPACK_IMPORTED_MODULE_1__.getAddress),\r\n    prevRandao: allowNull(formatHash, null),\r\n    extraData: formatData,\r\n    baseFeePerGas: allowNull(_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt)\r\n}, {\r\n    prevRandao: [\"mixHash\"]\r\n});\r\nfunction formatBlock(value) {\r\n    const result = _formatBlock(value);\r\n    result.transactions = value.transactions.map((tx) => {\r\n        if (typeof (tx) === \"string\") {\r\n            return tx;\r\n        }\r\n        return formatTransactionResponse(tx);\r\n    });\r\n    return result;\r\n}\r\nconst _formatReceiptLog = object({\r\n    transactionIndex: _utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getNumber,\r\n    blockNumber: _utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getNumber,\r\n    transactionHash: formatHash,\r\n    address: _address_index_js__WEBPACK_IMPORTED_MODULE_1__.getAddress,\r\n    topics: arrayOf(formatHash),\r\n    data: formatData,\r\n    index: _utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getNumber,\r\n    blockHash: formatHash,\r\n}, {\r\n    index: [\"logIndex\"]\r\n});\r\nfunction formatReceiptLog(value) {\r\n    return _formatReceiptLog(value);\r\n}\r\nconst _formatTransactionReceipt = object({\r\n    to: allowNull(_address_index_js__WEBPACK_IMPORTED_MODULE_1__.getAddress, null),\r\n    from: allowNull(_address_index_js__WEBPACK_IMPORTED_MODULE_1__.getAddress, null),\r\n    contractAddress: allowNull(_address_index_js__WEBPACK_IMPORTED_MODULE_1__.getAddress, null),\r\n    // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\r\n    index: _utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getNumber,\r\n    root: allowNull(_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify),\r\n    gasUsed: _utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt,\r\n    blobGasUsed: allowNull(_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt, null),\r\n    logsBloom: allowNull(formatData),\r\n    blockHash: formatHash,\r\n    hash: formatHash,\r\n    logs: arrayOf(formatReceiptLog),\r\n    blockNumber: _utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getNumber,\r\n    //confirmations: allowNull(getNumber, null),\r\n    cumulativeGasUsed: _utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt,\r\n    effectiveGasPrice: allowNull(_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt),\r\n    blobGasPrice: allowNull(_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt, null),\r\n    status: allowNull(_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getNumber),\r\n    type: allowNull(_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getNumber, 0)\r\n}, {\r\n    effectiveGasPrice: [\"gasPrice\"],\r\n    hash: [\"transactionHash\"],\r\n    index: [\"transactionIndex\"],\r\n});\r\nfunction formatTransactionReceipt(value) {\r\n    return _formatTransactionReceipt(value);\r\n}\r\nfunction formatTransactionResponse(value) {\r\n    // Some clients (TestRPC) do strange things like return 0x0 for the\r\n    // 0 address; correct this to be a real address\r\n    if (value.to && (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt)(value.to) === BN_0) {\r\n        value.to = \"0x0000000000000000000000000000000000000000\";\r\n    }\r\n    const result = object({\r\n        hash: formatHash,\r\n        // Some nodes do not return this, usually test nodes (like Ganache)\r\n        index: allowNull(_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getNumber, undefined),\r\n        type: (value) => {\r\n            if (value === \"0x\" || value == null) {\r\n                return 0;\r\n            }\r\n            return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getNumber)(value);\r\n        },\r\n        accessList: allowNull(_transaction_index_js__WEBPACK_IMPORTED_MODULE_2__.accessListify, null),\r\n        blobVersionedHashes: allowNull(arrayOf(formatHash, true), null),\r\n        authorizationList: allowNull(arrayOf((v) => {\r\n            let sig;\r\n            if (v.signature) {\r\n                sig = v.signature;\r\n            }\r\n            else {\r\n                let yParity = v.yParity;\r\n                if (yParity === \"0x1b\") {\r\n                    yParity = 0;\r\n                }\r\n                else if (yParity === \"0x1c\") {\r\n                    yParity = 1;\r\n                }\r\n                sig = Object.assign({}, v, { yParity });\r\n            }\r\n            return {\r\n                address: (0,_address_index_js__WEBPACK_IMPORTED_MODULE_1__.getAddress)(v.address),\r\n                chainId: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt)(v.chainId),\r\n                nonce: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt)(v.nonce),\r\n                signature: _crypto_index_js__WEBPACK_IMPORTED_MODULE_3__.Signature.from(sig)\r\n            };\r\n        }, false), null),\r\n        blockHash: allowNull(formatHash, null),\r\n        blockNumber: allowNull(_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getNumber, null),\r\n        transactionIndex: allowNull(_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getNumber, null),\r\n        from: _address_index_js__WEBPACK_IMPORTED_MODULE_1__.getAddress,\r\n        // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas) must be set\r\n        gasPrice: allowNull(_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt),\r\n        maxPriorityFeePerGas: allowNull(_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt),\r\n        maxFeePerGas: allowNull(_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt),\r\n        maxFeePerBlobGas: allowNull(_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt, null),\r\n        gasLimit: _utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt,\r\n        to: allowNull(_address_index_js__WEBPACK_IMPORTED_MODULE_1__.getAddress, null),\r\n        value: _utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt,\r\n        nonce: _utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getNumber,\r\n        data: formatData,\r\n        creates: allowNull(_address_index_js__WEBPACK_IMPORTED_MODULE_1__.getAddress, null),\r\n        chainId: allowNull(_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt, null)\r\n    }, {\r\n        data: [\"input\"],\r\n        gasLimit: [\"gas\"],\r\n        index: [\"transactionIndex\"]\r\n    })(value);\r\n    // If to and creates are empty, populate the creates from the value\r\n    if (result.to == null && result.creates == null) {\r\n        result.creates = (0,_address_index_js__WEBPACK_IMPORTED_MODULE_1__.getCreateAddress)(result);\r\n    }\r\n    // @TODO: Check fee data\r\n    // Add an access list to supported transaction types\r\n    if ((value.type === 1 || value.type === 2) && value.accessList == null) {\r\n        result.accessList = [];\r\n    }\r\n    // Compute the signature\r\n    if (value.signature) {\r\n        result.signature = _crypto_index_js__WEBPACK_IMPORTED_MODULE_3__.Signature.from(value.signature);\r\n    }\r\n    else {\r\n        result.signature = _crypto_index_js__WEBPACK_IMPORTED_MODULE_3__.Signature.from(value);\r\n    }\r\n    // Some backends omit ChainId on legacy transactions, but we can compute it\r\n    if (result.chainId == null) {\r\n        const chainId = result.signature.legacyChainId;\r\n        if (chainId != null) {\r\n            result.chainId = chainId;\r\n        }\r\n    }\r\n    // @TODO: check chainID\r\n    /*\r\n    if (value.chainId != null) {\r\n        let chainId = value.chainId;\r\n\r\n        if (isHexString(chainId)) {\r\n            chainId = BigNumber.from(chainId).toNumber();\r\n        }\r\n\r\n        result.chainId = chainId;\r\n\r\n    } else {\r\n        let chainId = value.networkId;\r\n\r\n        // geth-etc returns chainId\r\n        if (chainId == null && result.v == null) {\r\n            chainId = value.chainId;\r\n        }\r\n\r\n        if (isHexString(chainId)) {\r\n            chainId = BigNumber.from(chainId).toNumber();\r\n        }\r\n\r\n        if (typeof(chainId) !== \"number\" && result.v != null) {\r\n            chainId = (result.v - 35) / 2;\r\n            if (chainId < 0) { chainId = 0; }\r\n            chainId = parseInt(chainId);\r\n        }\r\n\r\n        if (typeof(chainId) !== \"number\") { chainId = 0; }\r\n\r\n        result.chainId = chainId;\r\n    }\r\n    */\r\n    // 0x0000... should actually be null\r\n    if (result.blockHash && (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt)(result.blockHash) === BN_0) {\r\n        result.blockHash = null;\r\n    }\r\n    return result;\r\n}\r\n//# sourceMappingURL=format.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/format.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/index.js":
/*!********************************************************!*\
  !*** ./node_modules/ethers/lib.esm/providers/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractProvider: () => (/* reexport safe */ _abstract_provider_js__WEBPACK_IMPORTED_MODULE_0__.AbstractProvider),\n/* harmony export */   AbstractSigner: () => (/* reexport safe */ _abstract_signer_js__WEBPACK_IMPORTED_MODULE_1__.AbstractSigner),\n/* harmony export */   AlchemyProvider: () => (/* reexport safe */ _provider_alchemy_js__WEBPACK_IMPORTED_MODULE_12__.AlchemyProvider),\n/* harmony export */   AnkrProvider: () => (/* reexport safe */ _provider_ankr_js__WEBPACK_IMPORTED_MODULE_14__.AnkrProvider),\n/* harmony export */   Block: () => (/* reexport safe */ _provider_js__WEBPACK_IMPORTED_MODULE_8__.Block),\n/* harmony export */   BlockscoutProvider: () => (/* reexport safe */ _provider_blockscout_js__WEBPACK_IMPORTED_MODULE_13__.BlockscoutProvider),\n/* harmony export */   BrowserProvider: () => (/* reexport safe */ _provider_browser_js__WEBPACK_IMPORTED_MODULE_11__.BrowserProvider),\n/* harmony export */   ChainstackProvider: () => (/* reexport safe */ _provider_chainstack_js__WEBPACK_IMPORTED_MODULE_16__.ChainstackProvider),\n/* harmony export */   CloudflareProvider: () => (/* reexport safe */ _provider_cloudflare_js__WEBPACK_IMPORTED_MODULE_15__.CloudflareProvider),\n/* harmony export */   EnsPlugin: () => (/* reexport safe */ _plugins_network_js__WEBPACK_IMPORTED_MODULE_7__.EnsPlugin),\n/* harmony export */   EnsResolver: () => (/* reexport safe */ _ens_resolver_js__WEBPACK_IMPORTED_MODULE_4__.EnsResolver),\n/* harmony export */   EtherscanPlugin: () => (/* reexport safe */ _provider_etherscan_js__WEBPACK_IMPORTED_MODULE_17__.EtherscanPlugin),\n/* harmony export */   EtherscanProvider: () => (/* reexport safe */ _provider_etherscan_js__WEBPACK_IMPORTED_MODULE_17__.EtherscanProvider),\n/* harmony export */   FallbackProvider: () => (/* reexport safe */ _provider_fallback_js__WEBPACK_IMPORTED_MODULE_9__.FallbackProvider),\n/* harmony export */   FeeData: () => (/* reexport safe */ _provider_js__WEBPACK_IMPORTED_MODULE_8__.FeeData),\n/* harmony export */   FeeDataNetworkPlugin: () => (/* reexport safe */ _plugins_network_js__WEBPACK_IMPORTED_MODULE_7__.FeeDataNetworkPlugin),\n/* harmony export */   FetchUrlFeeDataNetworkPlugin: () => (/* reexport safe */ _plugins_network_js__WEBPACK_IMPORTED_MODULE_7__.FetchUrlFeeDataNetworkPlugin),\n/* harmony export */   GasCostPlugin: () => (/* reexport safe */ _plugins_network_js__WEBPACK_IMPORTED_MODULE_7__.GasCostPlugin),\n/* harmony export */   InfuraProvider: () => (/* reexport safe */ _provider_infura_js__WEBPACK_IMPORTED_MODULE_18__.InfuraProvider),\n/* harmony export */   InfuraWebSocketProvider: () => (/* reexport safe */ _provider_infura_js__WEBPACK_IMPORTED_MODULE_18__.InfuraWebSocketProvider),\n/* harmony export */   IpcSocketProvider: () => (/* reexport safe */ _provider_ipcsocket_js__WEBPACK_IMPORTED_MODULE_21__.IpcSocketProvider),\n/* harmony export */   JsonRpcApiProvider: () => (/* reexport safe */ _provider_jsonrpc_js__WEBPACK_IMPORTED_MODULE_10__.JsonRpcApiProvider),\n/* harmony export */   JsonRpcProvider: () => (/* reexport safe */ _provider_jsonrpc_js__WEBPACK_IMPORTED_MODULE_10__.JsonRpcProvider),\n/* harmony export */   JsonRpcSigner: () => (/* reexport safe */ _provider_jsonrpc_js__WEBPACK_IMPORTED_MODULE_10__.JsonRpcSigner),\n/* harmony export */   Log: () => (/* reexport safe */ _provider_js__WEBPACK_IMPORTED_MODULE_8__.Log),\n/* harmony export */   MulticoinProviderPlugin: () => (/* reexport safe */ _ens_resolver_js__WEBPACK_IMPORTED_MODULE_4__.MulticoinProviderPlugin),\n/* harmony export */   Network: () => (/* reexport safe */ _network_js__WEBPACK_IMPORTED_MODULE_5__.Network),\n/* harmony export */   NetworkPlugin: () => (/* reexport safe */ _plugins_network_js__WEBPACK_IMPORTED_MODULE_7__.NetworkPlugin),\n/* harmony export */   NonceManager: () => (/* reexport safe */ _signer_noncemanager_js__WEBPACK_IMPORTED_MODULE_6__.NonceManager),\n/* harmony export */   PocketProvider: () => (/* reexport safe */ _provider_pocket_js__WEBPACK_IMPORTED_MODULE_19__.PocketProvider),\n/* harmony export */   QuickNodeProvider: () => (/* reexport safe */ _provider_quicknode_js__WEBPACK_IMPORTED_MODULE_20__.QuickNodeProvider),\n/* harmony export */   SocketBlockSubscriber: () => (/* reexport safe */ _provider_socket_js__WEBPACK_IMPORTED_MODULE_22__.SocketBlockSubscriber),\n/* harmony export */   SocketEventSubscriber: () => (/* reexport safe */ _provider_socket_js__WEBPACK_IMPORTED_MODULE_22__.SocketEventSubscriber),\n/* harmony export */   SocketPendingSubscriber: () => (/* reexport safe */ _provider_socket_js__WEBPACK_IMPORTED_MODULE_22__.SocketPendingSubscriber),\n/* harmony export */   SocketProvider: () => (/* reexport safe */ _provider_socket_js__WEBPACK_IMPORTED_MODULE_22__.SocketProvider),\n/* harmony export */   SocketSubscriber: () => (/* reexport safe */ _provider_socket_js__WEBPACK_IMPORTED_MODULE_22__.SocketSubscriber),\n/* harmony export */   TransactionReceipt: () => (/* reexport safe */ _provider_js__WEBPACK_IMPORTED_MODULE_8__.TransactionReceipt),\n/* harmony export */   TransactionResponse: () => (/* reexport safe */ _provider_js__WEBPACK_IMPORTED_MODULE_8__.TransactionResponse),\n/* harmony export */   UnmanagedSubscriber: () => (/* reexport safe */ _abstract_provider_js__WEBPACK_IMPORTED_MODULE_0__.UnmanagedSubscriber),\n/* harmony export */   VoidSigner: () => (/* reexport safe */ _abstract_signer_js__WEBPACK_IMPORTED_MODULE_1__.VoidSigner),\n/* harmony export */   WebSocketProvider: () => (/* reexport safe */ _provider_websocket_js__WEBPACK_IMPORTED_MODULE_23__.WebSocketProvider),\n/* harmony export */   copyRequest: () => (/* reexport safe */ _provider_js__WEBPACK_IMPORTED_MODULE_8__.copyRequest),\n/* harmony export */   getDefaultProvider: () => (/* reexport safe */ _default_provider_js__WEBPACK_IMPORTED_MODULE_3__.getDefaultProvider),\n/* harmony export */   showThrottleMessage: () => (/* reexport safe */ _community_js__WEBPACK_IMPORTED_MODULE_2__.showThrottleMessage)\n/* harmony export */ });\n/* harmony import */ var _abstract_provider_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract-provider.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/abstract-provider.js\");\n/* harmony import */ var _abstract_signer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./abstract-signer.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/abstract-signer.js\");\n/* harmony import */ var _community_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./community.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/community.js\");\n/* harmony import */ var _default_provider_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./default-provider.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/default-provider.js\");\n/* harmony import */ var _ens_resolver_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ens-resolver.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/ens-resolver.js\");\n/* harmony import */ var _network_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./network.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/network.js\");\n/* harmony import */ var _signer_noncemanager_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./signer-noncemanager.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/signer-noncemanager.js\");\n/* harmony import */ var _plugins_network_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./plugins-network.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/plugins-network.js\");\n/* harmony import */ var _provider_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./provider.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider.js\");\n/* harmony import */ var _provider_fallback_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./provider-fallback.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-fallback.js\");\n/* harmony import */ var _provider_jsonrpc_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./provider-jsonrpc.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-jsonrpc.js\");\n/* harmony import */ var _provider_browser_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./provider-browser.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-browser.js\");\n/* harmony import */ var _provider_alchemy_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./provider-alchemy.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-alchemy.js\");\n/* harmony import */ var _provider_blockscout_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./provider-blockscout.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-blockscout.js\");\n/* harmony import */ var _provider_ankr_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./provider-ankr.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-ankr.js\");\n/* harmony import */ var _provider_cloudflare_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./provider-cloudflare.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-cloudflare.js\");\n/* harmony import */ var _provider_chainstack_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./provider-chainstack.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-chainstack.js\");\n/* harmony import */ var _provider_etherscan_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./provider-etherscan.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-etherscan.js\");\n/* harmony import */ var _provider_infura_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./provider-infura.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-infura.js\");\n/* harmony import */ var _provider_pocket_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./provider-pocket.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-pocket.js\");\n/* harmony import */ var _provider_quicknode_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./provider-quicknode.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-quicknode.js\");\n/* harmony import */ var _provider_ipcsocket_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./provider-ipcsocket.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-ipcsocket-browser.js\");\n/* harmony import */ var _provider_socket_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./provider-socket.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-socket.js\");\n/* harmony import */ var _provider_websocket_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./provider-websocket.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-websocket.js\");\n/**\r\n *  A **Provider** provides a connection to the blockchain, whch can be\r\n *  used to query its current state, simulate execution and send transactions\r\n *  to update the state.\r\n *\r\n *  It is one of the most fundamental components of interacting with a\r\n *  blockchain application, and there are many ways to connect, such as over\r\n *  HTTP, WebSockets or injected providers such as [MetaMask](link-metamask).\r\n *\r\n *  @_section: api/providers:Providers  [about-providers]\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n /*-browser*/\r\n\r\n\r\n\r\n\r\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9wcm92aWRlcnMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQytFO0FBQ1o7QUFDZDtBQUNNO0FBQ2M7QUFDbEM7QUFDaUI7QUFDNEU7QUFHNUc7QUFDa0M7QUFDaUM7QUFDbkM7QUFDQTtBQUNNO0FBQ1o7QUFDWTtBQUNBO0FBQ2U7QUFDRTtBQUN6QjtBQUNNO0FBQ0EsQ0FBQztBQUNoQztBQUN5QjtBQUNNO0FBQ21FO0FBQy9IIiwic291cmNlcyI6WyJEOlxcRG9fYW4yXFxsZW5kaHViX3YyXFxsZW5kaHViLWZyb250ZW5kLW5leHRqc1xcbm9kZV9tb2R1bGVzXFxldGhlcnNcXGxpYi5lc21cXHByb3ZpZGVyc1xcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqICBBICoqUHJvdmlkZXIqKiBwcm92aWRlcyBhIGNvbm5lY3Rpb24gdG8gdGhlIGJsb2NrY2hhaW4sIHdoY2ggY2FuIGJlXHJcbiAqICB1c2VkIHRvIHF1ZXJ5IGl0cyBjdXJyZW50IHN0YXRlLCBzaW11bGF0ZSBleGVjdXRpb24gYW5kIHNlbmQgdHJhbnNhY3Rpb25zXHJcbiAqICB0byB1cGRhdGUgdGhlIHN0YXRlLlxyXG4gKlxyXG4gKiAgSXQgaXMgb25lIG9mIHRoZSBtb3N0IGZ1bmRhbWVudGFsIGNvbXBvbmVudHMgb2YgaW50ZXJhY3Rpbmcgd2l0aCBhXHJcbiAqICBibG9ja2NoYWluIGFwcGxpY2F0aW9uLCBhbmQgdGhlcmUgYXJlIG1hbnkgd2F5cyB0byBjb25uZWN0LCBzdWNoIGFzIG92ZXJcclxuICogIEhUVFAsIFdlYlNvY2tldHMgb3IgaW5qZWN0ZWQgcHJvdmlkZXJzIHN1Y2ggYXMgW01ldGFNYXNrXShsaW5rLW1ldGFtYXNrKS5cclxuICpcclxuICogIEBfc2VjdGlvbjogYXBpL3Byb3ZpZGVyczpQcm92aWRlcnMgIFthYm91dC1wcm92aWRlcnNdXHJcbiAqL1xyXG5leHBvcnQgeyBBYnN0cmFjdFByb3ZpZGVyLCBVbm1hbmFnZWRTdWJzY3JpYmVyIH0gZnJvbSBcIi4vYWJzdHJhY3QtcHJvdmlkZXIuanNcIjtcclxuZXhwb3J0IHsgQWJzdHJhY3RTaWduZXIsIFZvaWRTaWduZXIsIH0gZnJvbSBcIi4vYWJzdHJhY3Qtc2lnbmVyLmpzXCI7XHJcbmV4cG9ydCB7IHNob3dUaHJvdHRsZU1lc3NhZ2UgfSBmcm9tIFwiLi9jb21tdW5pdHkuanNcIjtcclxuZXhwb3J0IHsgZ2V0RGVmYXVsdFByb3ZpZGVyIH0gZnJvbSBcIi4vZGVmYXVsdC1wcm92aWRlci5qc1wiO1xyXG5leHBvcnQgeyBFbnNSZXNvbHZlciwgTXVsdGljb2luUHJvdmlkZXJQbHVnaW4gfSBmcm9tIFwiLi9lbnMtcmVzb2x2ZXIuanNcIjtcclxuZXhwb3J0IHsgTmV0d29yayB9IGZyb20gXCIuL25ldHdvcmsuanNcIjtcclxuZXhwb3J0IHsgTm9uY2VNYW5hZ2VyIH0gZnJvbSBcIi4vc2lnbmVyLW5vbmNlbWFuYWdlci5qc1wiO1xyXG5leHBvcnQgeyBOZXR3b3JrUGx1Z2luLCBHYXNDb3N0UGx1Z2luLCBFbnNQbHVnaW4sIEZlZURhdGFOZXR3b3JrUGx1Z2luLCBGZXRjaFVybEZlZURhdGFOZXR3b3JrUGx1Z2luLCB9IGZyb20gXCIuL3BsdWdpbnMtbmV0d29yay5qc1wiO1xyXG5leHBvcnQgeyBCbG9jaywgRmVlRGF0YSwgTG9nLCBUcmFuc2FjdGlvblJlY2VpcHQsIFRyYW5zYWN0aW9uUmVzcG9uc2UsIGNvcHlSZXF1ZXN0LFxyXG4vL3Jlc29sdmVUcmFuc2FjdGlvblJlcXVlc3QsXHJcbiB9IGZyb20gXCIuL3Byb3ZpZGVyLmpzXCI7XHJcbmV4cG9ydCB7IEZhbGxiYWNrUHJvdmlkZXIgfSBmcm9tIFwiLi9wcm92aWRlci1mYWxsYmFjay5qc1wiO1xyXG5leHBvcnQgeyBKc29uUnBjQXBpUHJvdmlkZXIsIEpzb25ScGNQcm92aWRlciwgSnNvblJwY1NpZ25lciB9IGZyb20gXCIuL3Byb3ZpZGVyLWpzb25ycGMuanNcIjtcclxuZXhwb3J0IHsgQnJvd3NlclByb3ZpZGVyIH0gZnJvbSBcIi4vcHJvdmlkZXItYnJvd3Nlci5qc1wiO1xyXG5leHBvcnQgeyBBbGNoZW15UHJvdmlkZXIgfSBmcm9tIFwiLi9wcm92aWRlci1hbGNoZW15LmpzXCI7XHJcbmV4cG9ydCB7IEJsb2Nrc2NvdXRQcm92aWRlciB9IGZyb20gXCIuL3Byb3ZpZGVyLWJsb2Nrc2NvdXQuanNcIjtcclxuZXhwb3J0IHsgQW5rclByb3ZpZGVyIH0gZnJvbSBcIi4vcHJvdmlkZXItYW5rci5qc1wiO1xyXG5leHBvcnQgeyBDbG91ZGZsYXJlUHJvdmlkZXIgfSBmcm9tIFwiLi9wcm92aWRlci1jbG91ZGZsYXJlLmpzXCI7XHJcbmV4cG9ydCB7IENoYWluc3RhY2tQcm92aWRlciB9IGZyb20gXCIuL3Byb3ZpZGVyLWNoYWluc3RhY2suanNcIjtcclxuZXhwb3J0IHsgRXRoZXJzY2FuUHJvdmlkZXIsIEV0aGVyc2NhblBsdWdpbiB9IGZyb20gXCIuL3Byb3ZpZGVyLWV0aGVyc2Nhbi5qc1wiO1xyXG5leHBvcnQgeyBJbmZ1cmFQcm92aWRlciwgSW5mdXJhV2ViU29ja2V0UHJvdmlkZXIgfSBmcm9tIFwiLi9wcm92aWRlci1pbmZ1cmEuanNcIjtcclxuZXhwb3J0IHsgUG9ja2V0UHJvdmlkZXIgfSBmcm9tIFwiLi9wcm92aWRlci1wb2NrZXQuanNcIjtcclxuZXhwb3J0IHsgUXVpY2tOb2RlUHJvdmlkZXIgfSBmcm9tIFwiLi9wcm92aWRlci1xdWlja25vZGUuanNcIjtcclxuaW1wb3J0IHsgSXBjU29ja2V0UHJvdmlkZXIgfSBmcm9tIFwiLi9wcm92aWRlci1pcGNzb2NrZXQuanNcIjsgLyotYnJvd3NlciovXHJcbmV4cG9ydCB7IElwY1NvY2tldFByb3ZpZGVyIH07XHJcbmV4cG9ydCB7IFNvY2tldFByb3ZpZGVyIH0gZnJvbSBcIi4vcHJvdmlkZXItc29ja2V0LmpzXCI7XHJcbmV4cG9ydCB7IFdlYlNvY2tldFByb3ZpZGVyIH0gZnJvbSBcIi4vcHJvdmlkZXItd2Vic29ja2V0LmpzXCI7XHJcbmV4cG9ydCB7IFNvY2tldFN1YnNjcmliZXIsIFNvY2tldEJsb2NrU3Vic2NyaWJlciwgU29ja2V0UGVuZGluZ1N1YnNjcmliZXIsIFNvY2tldEV2ZW50U3Vic2NyaWJlciB9IGZyb20gXCIuL3Byb3ZpZGVyLXNvY2tldC5qc1wiO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/index.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/network.js":
/*!**********************************************************!*\
  !*** ./node_modules/ethers/lib.esm/providers/network.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Network: () => (/* binding */ Network)\n/* harmony export */ });\n/* harmony import */ var _transaction_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../transaction/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/transaction/index.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/* harmony import */ var _plugins_network_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./plugins-network.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/plugins-network.js\");\n/**\r\n *  A **Network** encapsulates the various properties required to\r\n *  interact with a specific chain.\r\n *\r\n *  @_subsection: api/providers:Networks  [networks]\r\n */\r\n\r\n\r\n\r\n/* * * *\r\n// Networks which operation against an L2 can use this plugin to\r\n// specify how to access L1, for the purpose of resolving ENS,\r\n// for example.\r\nexport class LayerOneConnectionPlugin extends NetworkPlugin {\r\n    readonly provider!: Provider;\r\n// @TODO: Rename to ChainAccess and allow for connecting to any chain\r\n    constructor(provider: Provider) {\r\n        super(\"org.ethers.plugins.layer-one-connection\");\r\n        defineProperties<LayerOneConnectionPlugin>(this, { provider });\r\n    }\r\n\r\n    clone(): LayerOneConnectionPlugin {\r\n        return new LayerOneConnectionPlugin(this.provider);\r\n    }\r\n}\r\n*/\r\nconst Networks = new Map();\r\n/**\r\n *  A **Network** provides access to a chain's properties and allows\r\n *  for plug-ins to extend functionality.\r\n */\r\nclass Network {\r\n    #name;\r\n    #chainId;\r\n    #plugins;\r\n    /**\r\n     *  Creates a new **Network** for %%name%% and %%chainId%%.\r\n     */\r\n    constructor(name, chainId) {\r\n        this.#name = name;\r\n        this.#chainId = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt)(chainId);\r\n        this.#plugins = new Map();\r\n    }\r\n    /**\r\n     *  Returns a JSON-compatible representation of a Network.\r\n     */\r\n    toJSON() {\r\n        return { name: this.name, chainId: String(this.chainId) };\r\n    }\r\n    /**\r\n     *  The network common name.\r\n     *\r\n     *  This is the canonical name, as networks migh have multiple\r\n     *  names.\r\n     */\r\n    get name() { return this.#name; }\r\n    set name(value) { this.#name = value; }\r\n    /**\r\n     *  The network chain ID.\r\n     */\r\n    get chainId() { return this.#chainId; }\r\n    set chainId(value) { this.#chainId = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt)(value, \"chainId\"); }\r\n    /**\r\n     *  Returns true if %%other%% matches this network. Any chain ID\r\n     *  must match, and if no chain ID is present, the name must match.\r\n     *\r\n     *  This method does not currently check for additional properties,\r\n     *  such as ENS address or plug-in compatibility.\r\n     */\r\n    matches(other) {\r\n        if (other == null) {\r\n            return false;\r\n        }\r\n        if (typeof (other) === \"string\") {\r\n            try {\r\n                return (this.chainId === (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt)(other));\r\n            }\r\n            catch (error) { }\r\n            return (this.name === other);\r\n        }\r\n        if (typeof (other) === \"number\" || typeof (other) === \"bigint\") {\r\n            try {\r\n                return (this.chainId === (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt)(other));\r\n            }\r\n            catch (error) { }\r\n            return false;\r\n        }\r\n        if (typeof (other) === \"object\") {\r\n            if (other.chainId != null) {\r\n                try {\r\n                    return (this.chainId === (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt)(other.chainId));\r\n                }\r\n                catch (error) { }\r\n                return false;\r\n            }\r\n            if (other.name != null) {\r\n                return (this.name === other.name);\r\n            }\r\n            return false;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     *  Returns the list of plugins currently attached to this Network.\r\n     */\r\n    get plugins() {\r\n        return Array.from(this.#plugins.values());\r\n    }\r\n    /**\r\n     *  Attach a new %%plugin%% to this Network. The network name\r\n     *  must be unique, excluding any fragment.\r\n     */\r\n    attachPlugin(plugin) {\r\n        if (this.#plugins.get(plugin.name)) {\r\n            throw new Error(`cannot replace existing plugin: ${plugin.name} `);\r\n        }\r\n        this.#plugins.set(plugin.name, plugin.clone());\r\n        return this;\r\n    }\r\n    /**\r\n     *  Return the plugin, if any, matching %%name%% exactly. Plugins\r\n     *  with fragments will not be returned unless %%name%% includes\r\n     *  a fragment.\r\n     */\r\n    getPlugin(name) {\r\n        return (this.#plugins.get(name)) || null;\r\n    }\r\n    /**\r\n     *  Gets a list of all plugins that match %%name%%, with otr without\r\n     *  a fragment.\r\n     */\r\n    getPlugins(basename) {\r\n        return (this.plugins.filter((p) => (p.name.split(\"#\")[0] === basename)));\r\n    }\r\n    /**\r\n     *  Create a copy of this Network.\r\n     */\r\n    clone() {\r\n        const clone = new Network(this.name, this.chainId);\r\n        this.plugins.forEach((plugin) => {\r\n            clone.attachPlugin(plugin.clone());\r\n        });\r\n        return clone;\r\n    }\r\n    /**\r\n     *  Compute the intrinsic gas required for a transaction.\r\n     *\r\n     *  A GasCostPlugin can be attached to override the default\r\n     *  values.\r\n     */\r\n    computeIntrinsicGas(tx) {\r\n        const costs = this.getPlugin(\"org.ethers.plugins.network.GasCost\") || (new _plugins_network_js__WEBPACK_IMPORTED_MODULE_1__.GasCostPlugin());\r\n        let gas = costs.txBase;\r\n        if (tx.to == null) {\r\n            gas += costs.txCreate;\r\n        }\r\n        if (tx.data) {\r\n            for (let i = 2; i < tx.data.length; i += 2) {\r\n                if (tx.data.substring(i, i + 2) === \"00\") {\r\n                    gas += costs.txDataZero;\r\n                }\r\n                else {\r\n                    gas += costs.txDataNonzero;\r\n                }\r\n            }\r\n        }\r\n        if (tx.accessList) {\r\n            const accessList = (0,_transaction_index_js__WEBPACK_IMPORTED_MODULE_2__.accessListify)(tx.accessList);\r\n            for (const addr in accessList) {\r\n                gas += costs.txAccessListAddress + costs.txAccessListStorageKey * accessList[addr].storageKeys.length;\r\n            }\r\n        }\r\n        return gas;\r\n    }\r\n    /**\r\n     *  Returns a new Network for the %%network%% name or chainId.\r\n     */\r\n    static from(network) {\r\n        injectCommonNetworks();\r\n        // Default network\r\n        if (network == null) {\r\n            return Network.from(\"mainnet\");\r\n        }\r\n        // Canonical name or chain ID\r\n        if (typeof (network) === \"number\") {\r\n            network = BigInt(network);\r\n        }\r\n        if (typeof (network) === \"string\" || typeof (network) === \"bigint\") {\r\n            const networkFunc = Networks.get(network);\r\n            if (networkFunc) {\r\n                return networkFunc();\r\n            }\r\n            if (typeof (network) === \"bigint\") {\r\n                return new Network(\"unknown\", network);\r\n            }\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"unknown network\", \"network\", network);\r\n        }\r\n        // Clonable with network-like abilities\r\n        if (typeof (network.clone) === \"function\") {\r\n            const clone = network.clone();\r\n            //if (typeof(network.name) !== \"string\" || typeof(network.chainId) !== \"number\") {\r\n            //}\r\n            return clone;\r\n        }\r\n        // Networkish\r\n        if (typeof (network) === \"object\") {\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(typeof (network.name) === \"string\" && typeof (network.chainId) === \"number\", \"invalid network object name or chainId\", \"network\", network);\r\n            const custom = new Network((network.name), (network.chainId));\r\n            if (network.ensAddress || network.ensNetwork != null) {\r\n                custom.attachPlugin(new _plugins_network_js__WEBPACK_IMPORTED_MODULE_1__.EnsPlugin(network.ensAddress, network.ensNetwork));\r\n            }\r\n            //if ((<any>network).layerOneConnection) {\r\n            //    custom.attachPlugin(new LayerOneConnectionPlugin((<any>network).layerOneConnection));\r\n            //}\r\n            return custom;\r\n        }\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"invalid network\", \"network\", network);\r\n    }\r\n    /**\r\n     *  Register %%nameOrChainId%% with a function which returns\r\n     *  an instance of a Network representing that chain.\r\n     */\r\n    static register(nameOrChainId, networkFunc) {\r\n        if (typeof (nameOrChainId) === \"number\") {\r\n            nameOrChainId = BigInt(nameOrChainId);\r\n        }\r\n        const existing = Networks.get(nameOrChainId);\r\n        if (existing) {\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, `conflicting network for ${JSON.stringify(existing.name)}`, \"nameOrChainId\", nameOrChainId);\r\n        }\r\n        Networks.set(nameOrChainId, networkFunc);\r\n    }\r\n}\r\n// We don't want to bring in formatUnits because it is backed by\r\n// FixedNumber and we want to keep Networks tiny. The values\r\n// included by the Gas Stations are also IEEE 754 with lots of\r\n// rounding issues and exceed the strict checks formatUnits has.\r\nfunction parseUnits(_value, decimals) {\r\n    const value = String(_value);\r\n    if (!value.match(/^[0-9.]+$/)) {\r\n        throw new Error(`invalid gwei value: ${_value}`);\r\n    }\r\n    // Break into [ whole, fraction ]\r\n    const comps = value.split(\".\");\r\n    if (comps.length === 1) {\r\n        comps.push(\"\");\r\n    }\r\n    // More than 1 decimal point or too many fractional positions\r\n    if (comps.length !== 2) {\r\n        throw new Error(`invalid gwei value: ${_value}`);\r\n    }\r\n    // Pad the fraction to 9 decimalplaces\r\n    while (comps[1].length < decimals) {\r\n        comps[1] += \"0\";\r\n    }\r\n    // Too many decimals and some non-zero ending, take the ceiling\r\n    if (comps[1].length > 9) {\r\n        let frac = BigInt(comps[1].substring(0, 9));\r\n        if (!comps[1].substring(9).match(/^0+$/)) {\r\n            frac++;\r\n        }\r\n        comps[1] = frac.toString();\r\n    }\r\n    return BigInt(comps[0] + comps[1]);\r\n}\r\n// Used by Polygon to use a gas station for fee data\r\nfunction getGasStationPlugin(url) {\r\n    return new _plugins_network_js__WEBPACK_IMPORTED_MODULE_1__.FetchUrlFeeDataNetworkPlugin(url, async (fetchFeeData, provider, request) => {\r\n        // Prevent Cloudflare from blocking our request in node.js\r\n        request.setHeader(\"User-Agent\", \"ethers\");\r\n        let response;\r\n        try {\r\n            const [_response, _feeData] = await Promise.all([\r\n                request.send(), fetchFeeData()\r\n            ]);\r\n            response = _response;\r\n            const payload = response.bodyJson.standard;\r\n            const feeData = {\r\n                gasPrice: _feeData.gasPrice,\r\n                maxFeePerGas: parseUnits(payload.maxFee, 9),\r\n                maxPriorityFeePerGas: parseUnits(payload.maxPriorityFee, 9),\r\n            };\r\n            return feeData;\r\n        }\r\n        catch (error) {\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(false, `error encountered with polygon gas station (${JSON.stringify(request.url)})`, \"SERVER_ERROR\", { request, response, error });\r\n        }\r\n    });\r\n}\r\n// See: https://chainlist.org\r\nlet injected = false;\r\nfunction injectCommonNetworks() {\r\n    if (injected) {\r\n        return;\r\n    }\r\n    injected = true;\r\n    /// Register popular Ethereum networks\r\n    function registerEth(name, chainId, options) {\r\n        const func = function () {\r\n            const network = new Network(name, chainId);\r\n            // We use 0 to disable ENS\r\n            if (options.ensNetwork != null) {\r\n                network.attachPlugin(new _plugins_network_js__WEBPACK_IMPORTED_MODULE_1__.EnsPlugin(null, options.ensNetwork));\r\n            }\r\n            network.attachPlugin(new _plugins_network_js__WEBPACK_IMPORTED_MODULE_1__.GasCostPlugin());\r\n            (options.plugins || []).forEach((plugin) => {\r\n                network.attachPlugin(plugin);\r\n            });\r\n            return network;\r\n        };\r\n        // Register the network by name and chain ID\r\n        Network.register(name, func);\r\n        Network.register(chainId, func);\r\n        if (options.altNames) {\r\n            options.altNames.forEach((name) => {\r\n                Network.register(name, func);\r\n            });\r\n        }\r\n    }\r\n    registerEth(\"mainnet\", 1, { ensNetwork: 1, altNames: [\"homestead\"] });\r\n    registerEth(\"ropsten\", 3, { ensNetwork: 3 });\r\n    registerEth(\"rinkeby\", 4, { ensNetwork: 4 });\r\n    registerEth(\"goerli\", 5, { ensNetwork: 5 });\r\n    registerEth(\"kovan\", 42, { ensNetwork: 42 });\r\n    registerEth(\"sepolia\", 11155111, { ensNetwork: 11155111 });\r\n    registerEth(\"holesky\", 17000, { ensNetwork: 17000 });\r\n    registerEth(\"classic\", 61, {});\r\n    registerEth(\"classicKotti\", 6, {});\r\n    registerEth(\"arbitrum\", 42161, {\r\n        ensNetwork: 1,\r\n    });\r\n    registerEth(\"arbitrum-goerli\", 421613, {});\r\n    registerEth(\"arbitrum-sepolia\", 421614, {});\r\n    registerEth(\"base\", 8453, { ensNetwork: 1 });\r\n    registerEth(\"base-goerli\", 84531, {});\r\n    registerEth(\"base-sepolia\", 84532, {});\r\n    registerEth(\"bnb\", 56, { ensNetwork: 1 });\r\n    registerEth(\"bnbt\", 97, {});\r\n    registerEth(\"linea\", 59144, { ensNetwork: 1 });\r\n    registerEth(\"linea-goerli\", 59140, {});\r\n    registerEth(\"linea-sepolia\", 59141, {});\r\n    registerEth(\"matic\", 137, {\r\n        ensNetwork: 1,\r\n        plugins: [\r\n            getGasStationPlugin(\"https:/\\/gasstation.polygon.technology/v2\")\r\n        ]\r\n    });\r\n    registerEth(\"matic-amoy\", 80002, {});\r\n    registerEth(\"matic-mumbai\", 80001, {\r\n        altNames: [\"maticMumbai\", \"maticmum\"],\r\n        plugins: [\r\n            getGasStationPlugin(\"https:/\\/gasstation-testnet.polygon.technology/v2\")\r\n        ]\r\n    });\r\n    registerEth(\"optimism\", 10, {\r\n        ensNetwork: 1,\r\n        plugins: []\r\n    });\r\n    registerEth(\"optimism-goerli\", 420, {});\r\n    registerEth(\"optimism-sepolia\", 11155420, {});\r\n    registerEth(\"xdai\", 100, { ensNetwork: 1 });\r\n}\r\n//# sourceMappingURL=network.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/network.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/plugins-network.js":
/*!******************************************************************!*\
  !*** ./node_modules/ethers/lib.esm/providers/plugins-network.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EnsPlugin: () => (/* binding */ EnsPlugin),\n/* harmony export */   FeeDataNetworkPlugin: () => (/* binding */ FeeDataNetworkPlugin),\n/* harmony export */   FetchUrlFeeDataNetworkPlugin: () => (/* binding */ FetchUrlFeeDataNetworkPlugin),\n/* harmony export */   GasCostPlugin: () => (/* binding */ GasCostPlugin),\n/* harmony export */   NetworkPlugin: () => (/* binding */ NetworkPlugin)\n/* harmony export */ });\n/* harmony import */ var _utils_properties_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/properties.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/properties.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n\r\n\r\nconst EnsAddress = \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\";\r\n/**\r\n *  A **NetworkPlugin** provides additional functionality on a [[Network]].\r\n */\r\nclass NetworkPlugin {\r\n    /**\r\n     *  The name of the plugin.\r\n     *\r\n     *  It is recommended to use reverse-domain-notation, which permits\r\n     *  unique names with a known authority as well as hierarchal entries.\r\n     */\r\n    name;\r\n    /**\r\n     *  Creates a new **NetworkPlugin**.\r\n     */\r\n    constructor(name) {\r\n        (0,_utils_properties_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, { name });\r\n    }\r\n    /**\r\n     *  Creates a copy of this plugin.\r\n     */\r\n    clone() {\r\n        return new NetworkPlugin(this.name);\r\n    }\r\n}\r\n/**\r\n *  A **GasCostPlugin** allows a network to provide alternative values when\r\n *  computing the intrinsic gas required for a transaction.\r\n */\r\nclass GasCostPlugin extends NetworkPlugin {\r\n    /**\r\n     *  The block number to treat these values as valid from.\r\n     *\r\n     *  This allows a hardfork to have updated values included as well as\r\n     *  mulutiple hardforks to be supported.\r\n     */\r\n    effectiveBlock;\r\n    /**\r\n     *  The transactions base fee.\r\n     */\r\n    txBase;\r\n    /**\r\n     *  The fee for creating a new account.\r\n     */\r\n    txCreate;\r\n    /**\r\n     *  The fee per zero-byte in the data.\r\n     */\r\n    txDataZero;\r\n    /**\r\n     *  The fee per non-zero-byte in the data.\r\n     */\r\n    txDataNonzero;\r\n    /**\r\n     *  The fee per storage key in the [[link-eip-2930]] access list.\r\n     */\r\n    txAccessListStorageKey;\r\n    /**\r\n     *  The fee per address in the [[link-eip-2930]] access list.\r\n     */\r\n    txAccessListAddress;\r\n    /**\r\n     *  Creates a new GasCostPlugin from %%effectiveBlock%% until the\r\n     *  latest block or another GasCostPlugin supercedes that block number,\r\n     *  with the associated %%costs%%.\r\n     */\r\n    constructor(effectiveBlock, costs) {\r\n        if (effectiveBlock == null) {\r\n            effectiveBlock = 0;\r\n        }\r\n        super(`org.ethers.network.plugins.GasCost#${(effectiveBlock || 0)}`);\r\n        const props = { effectiveBlock };\r\n        function set(name, nullish) {\r\n            let value = (costs || {})[name];\r\n            if (value == null) {\r\n                value = nullish;\r\n            }\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(typeof (value) === \"number\", `invalud value for ${name}`, \"costs\", costs);\r\n            props[name] = value;\r\n        }\r\n        set(\"txBase\", 21000);\r\n        set(\"txCreate\", 32000);\r\n        set(\"txDataZero\", 4);\r\n        set(\"txDataNonzero\", 16);\r\n        set(\"txAccessListStorageKey\", 1900);\r\n        set(\"txAccessListAddress\", 2400);\r\n        (0,_utils_properties_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, props);\r\n    }\r\n    clone() {\r\n        return new GasCostPlugin(this.effectiveBlock, this);\r\n    }\r\n}\r\n/**\r\n *  An **EnsPlugin** allows a [[Network]] to specify the ENS Registry\r\n *  Contract address and the target network to use when using that\r\n *  contract.\r\n *\r\n *  Various testnets have their own instance of the contract to use, but\r\n *  in general, the mainnet instance supports multi-chain addresses and\r\n *  should be used.\r\n */\r\nclass EnsPlugin extends NetworkPlugin {\r\n    /**\r\n     *  The ENS Registrty Contract address.\r\n     */\r\n    address;\r\n    /**\r\n     *  The chain ID that the ENS contract lives on.\r\n     */\r\n    targetNetwork;\r\n    /**\r\n     *  Creates a new **EnsPlugin** connected to %%address%% on the\r\n     *  %%targetNetwork%%. The default ENS address and mainnet is used\r\n     *  if unspecified.\r\n     */\r\n    constructor(address, targetNetwork) {\r\n        super(\"org.ethers.plugins.network.Ens\");\r\n        (0,_utils_properties_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, {\r\n            address: (address || EnsAddress),\r\n            targetNetwork: ((targetNetwork == null) ? 1 : targetNetwork)\r\n        });\r\n    }\r\n    clone() {\r\n        return new EnsPlugin(this.address, this.targetNetwork);\r\n    }\r\n}\r\n/**\r\n *  A **FeeDataNetworkPlugin** allows a network to provide and alternate\r\n *  means to specify its fee data.\r\n *\r\n *  For example, a network which does not support [[link-eip-1559]] may\r\n *  choose to use a Gas Station site to approximate the gas price.\r\n */\r\nclass FeeDataNetworkPlugin extends NetworkPlugin {\r\n    #feeDataFunc;\r\n    /**\r\n     *  The fee data function provided to the constructor.\r\n     */\r\n    get feeDataFunc() {\r\n        return this.#feeDataFunc;\r\n    }\r\n    /**\r\n     *  Creates a new **FeeDataNetworkPlugin**.\r\n     */\r\n    constructor(feeDataFunc) {\r\n        super(\"org.ethers.plugins.network.FeeData\");\r\n        this.#feeDataFunc = feeDataFunc;\r\n    }\r\n    /**\r\n     *  Resolves to the fee data.\r\n     */\r\n    async getFeeData(provider) {\r\n        return await this.#feeDataFunc(provider);\r\n    }\r\n    clone() {\r\n        return new FeeDataNetworkPlugin(this.#feeDataFunc);\r\n    }\r\n}\r\nclass FetchUrlFeeDataNetworkPlugin extends NetworkPlugin {\r\n    #url;\r\n    #processFunc;\r\n    /**\r\n     *  The URL to initialize the FetchRequest with in %%processFunc%%.\r\n     */\r\n    get url() { return this.#url; }\r\n    /**\r\n     *  The callback to use when computing the FeeData.\r\n     */\r\n    get processFunc() { return this.#processFunc; }\r\n    /**\r\n     *  Creates a new **FetchUrlFeeDataNetworkPlugin** which will\r\n     *  be used when computing the fee data for the network.\r\n     */\r\n    constructor(url, processFunc) {\r\n        super(\"org.ethers.plugins.network.FetchUrlFeeDataPlugin\");\r\n        this.#url = url;\r\n        this.#processFunc = processFunc;\r\n    }\r\n    // We are immutable, so we can serve as our own clone\r\n    clone() { return this; }\r\n}\r\n/*\r\nexport class CustomBlockNetworkPlugin extends NetworkPlugin {\r\n    readonly #blockFunc: (provider: Provider, block: BlockParams<string>) => Block<string>;\r\n    readonly #blockWithTxsFunc: (provider: Provider, block: BlockParams<TransactionResponseParams>) => Block<TransactionResponse>;\r\n\r\n    constructor(blockFunc: (provider: Provider, block: BlockParams<string>) => Block<string>, blockWithTxsFunc: (provider: Provider, block: BlockParams<TransactionResponseParams>) => Block<TransactionResponse>) {\r\n        super(\"org.ethers.network-plugins.custom-block\");\r\n        this.#blockFunc = blockFunc;\r\n        this.#blockWithTxsFunc = blockWithTxsFunc;\r\n    }\r\n\r\n    async getBlock(provider: Provider, block: BlockParams<string>): Promise<Block<string>> {\r\n        return await this.#blockFunc(provider, block);\r\n    }\r\n\r\n    async getBlockions(provider: Provider, block: BlockParams<TransactionResponseParams>): Promise<Block<TransactionResponse>> {\r\n        return await this.#blockWithTxsFunc(provider, block);\r\n    }\r\n\r\n    clone(): CustomBlockNetworkPlugin {\r\n        return new CustomBlockNetworkPlugin(this.#blockFunc, this.#blockWithTxsFunc);\r\n    }\r\n}\r\n*/\r\n//# sourceMappingURL=plugins-network.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/plugins-network.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-alchemy.js":
/*!*******************************************************************!*\
  !*** ./node_modules/ethers/lib.esm/providers/provider-alchemy.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AlchemyProvider: () => (/* binding */ AlchemyProvider)\n/* harmony export */ });\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/* harmony import */ var _community_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./community.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/community.js\");\n/* harmony import */ var _network_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./network.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/network.js\");\n/* harmony import */ var _provider_jsonrpc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./provider-jsonrpc.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-jsonrpc.js\");\n/**\r\n *  [[link-alchemy]] provides a third-party service for connecting to\r\n *  various blockchains over JSON-RPC.\r\n *\r\n *  **Supported Networks**\r\n *\r\n *  - Ethereum Mainnet (``mainnet``)\r\n *  - Goerli Testnet (``goerli``)\r\n *  - Sepolia Testnet (``sepolia``)\r\n *  - Arbitrum (``arbitrum``)\r\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\r\n *  - Arbitrum Sepolia Testnet (``arbitrum-sepolia``)\r\n *  - Base (``base``)\r\n *  - Base Goerlia Testnet (``base-goerli``)\r\n *  - Base Sepolia Testnet (``base-sepolia``)\r\n *  - Optimism (``optimism``)\r\n *  - Optimism Goerli Testnet (``optimism-goerli``)\r\n *  - Optimism Sepolia Testnet (``optimism-sepolia``)\r\n *  - Polygon (``matic``)\r\n *  - Polygon Amoy Testnet (``matic-amoy``)\r\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\r\n *\r\n *  @_subsection: api/providers/thirdparty:Alchemy  [providers-alchemy]\r\n */\r\n\r\n\r\n\r\n\r\nconst defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\";\r\nfunction getHost(name) {\r\n    switch (name) {\r\n        case \"mainnet\":\r\n            return \"eth-mainnet.alchemyapi.io\";\r\n        case \"goerli\":\r\n            return \"eth-goerli.g.alchemy.com\";\r\n        case \"sepolia\":\r\n            return \"eth-sepolia.g.alchemy.com\";\r\n        case \"arbitrum\":\r\n            return \"arb-mainnet.g.alchemy.com\";\r\n        case \"arbitrum-goerli\":\r\n            return \"arb-goerli.g.alchemy.com\";\r\n        case \"arbitrum-sepolia\":\r\n            return \"arb-sepolia.g.alchemy.com\";\r\n        case \"base\":\r\n            return \"base-mainnet.g.alchemy.com\";\r\n        case \"base-goerli\":\r\n            return \"base-goerli.g.alchemy.com\";\r\n        case \"base-sepolia\":\r\n            return \"base-sepolia.g.alchemy.com\";\r\n        case \"matic\":\r\n            return \"polygon-mainnet.g.alchemy.com\";\r\n        case \"matic-amoy\":\r\n            return \"polygon-amoy.g.alchemy.com\";\r\n        case \"matic-mumbai\":\r\n            return \"polygon-mumbai.g.alchemy.com\";\r\n        case \"optimism\":\r\n            return \"opt-mainnet.g.alchemy.com\";\r\n        case \"optimism-goerli\":\r\n            return \"opt-goerli.g.alchemy.com\";\r\n        case \"optimism-sepolia\":\r\n            return \"opt-sepolia.g.alchemy.com\";\r\n    }\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"unsupported network\", \"network\", name);\r\n}\r\n/**\r\n *  The **AlchemyProvider** connects to the [[link-alchemy]]\r\n *  JSON-RPC end-points.\r\n *\r\n *  By default, a highly-throttled API key is used, which is\r\n *  appropriate for quick prototypes and simple scripts. To\r\n *  gain access to an increased rate-limit, it is highly\r\n *  recommended to [sign up here](link-alchemy-signup).\r\n *\r\n *  @_docloc: api/providers/thirdparty\r\n */\r\nclass AlchemyProvider extends _provider_jsonrpc_js__WEBPACK_IMPORTED_MODULE_1__.JsonRpcProvider {\r\n    apiKey;\r\n    constructor(_network, apiKey) {\r\n        if (_network == null) {\r\n            _network = \"mainnet\";\r\n        }\r\n        const network = _network_js__WEBPACK_IMPORTED_MODULE_2__.Network.from(_network);\r\n        if (apiKey == null) {\r\n            apiKey = defaultApiKey;\r\n        }\r\n        const request = AlchemyProvider.getRequest(network, apiKey);\r\n        super(request, network, { staticNetwork: network });\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, { apiKey });\r\n    }\r\n    _getProvider(chainId) {\r\n        try {\r\n            return new AlchemyProvider(chainId, this.apiKey);\r\n        }\r\n        catch (error) { }\r\n        return super._getProvider(chainId);\r\n    }\r\n    async _perform(req) {\r\n        // https://docs.alchemy.com/reference/trace-transaction\r\n        if (req.method === \"getTransactionResult\") {\r\n            const { trace, tx } = await (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.resolveProperties)({\r\n                trace: this.send(\"trace_transaction\", [req.hash]),\r\n                tx: this.getTransaction(req.hash)\r\n            });\r\n            if (trace == null || tx == null) {\r\n                return null;\r\n            }\r\n            let data;\r\n            let error = false;\r\n            try {\r\n                data = trace[0].result.output;\r\n                error = (trace[0].error === \"Reverted\");\r\n            }\r\n            catch (error) { }\r\n            if (data) {\r\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(!error, \"an error occurred during transaction executions\", \"CALL_EXCEPTION\", {\r\n                    action: \"getTransactionResult\",\r\n                    data,\r\n                    reason: null,\r\n                    transaction: tx,\r\n                    invocation: null,\r\n                    revert: null // @TODO\r\n                });\r\n                return data;\r\n            }\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(false, \"could not parse trace result\", \"BAD_DATA\", { value: trace });\r\n        }\r\n        return await super._perform(req);\r\n    }\r\n    isCommunityResource() {\r\n        return (this.apiKey === defaultApiKey);\r\n    }\r\n    static getRequest(network, apiKey) {\r\n        if (apiKey == null) {\r\n            apiKey = defaultApiKey;\r\n        }\r\n        const request = new _utils_index_js__WEBPACK_IMPORTED_MODULE_0__.FetchRequest(`https:/\\/${getHost(network.name)}/v2/${apiKey}`);\r\n        request.allowGzip = true;\r\n        if (apiKey === defaultApiKey) {\r\n            request.retryFunc = async (request, response, attempt) => {\r\n                (0,_community_js__WEBPACK_IMPORTED_MODULE_3__.showThrottleMessage)(\"alchemy\");\r\n                return true;\r\n            };\r\n        }\r\n        return request;\r\n    }\r\n}\r\n//# sourceMappingURL=provider-alchemy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-alchemy.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-ankr.js":
/*!****************************************************************!*\
  !*** ./node_modules/ethers/lib.esm/providers/provider-ankr.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnkrProvider: () => (/* binding */ AnkrProvider)\n/* harmony export */ });\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/* harmony import */ var _community_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./community.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/community.js\");\n/* harmony import */ var _network_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./network.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/network.js\");\n/* harmony import */ var _provider_jsonrpc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./provider-jsonrpc.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-jsonrpc.js\");\n/**\r\n *  [[link-ankr]] provides a third-party service for connecting to\r\n *  various blockchains over JSON-RPC.\r\n *\r\n *  **Supported Networks**\r\n *\r\n *  - Ethereum Mainnet (``mainnet``)\r\n *  - Goerli Testnet (``goerli``)\r\n *  - Sepolia Testnet (``sepolia``)\r\n *  - Arbitrum (``arbitrum``)\r\n *  - Base (``base``)\r\n *  - Base Goerlia Testnet (``base-goerli``)\r\n *  - Base Sepolia Testnet (``base-sepolia``)\r\n *  - BNB (``bnb``)\r\n *  - BNB Testnet (``bnbt``)\r\n *  - Optimism (``optimism``)\r\n *  - Optimism Goerli Testnet (``optimism-goerli``)\r\n *  - Optimism Sepolia Testnet (``optimism-sepolia``)\r\n *  - Polygon (``matic``)\r\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\r\n *\r\n *  @_subsection: api/providers/thirdparty:Ankr  [providers-ankr]\r\n */\r\n\r\n\r\n\r\n\r\nconst defaultApiKey = \"9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972\";\r\nfunction getHost(name) {\r\n    switch (name) {\r\n        case \"mainnet\":\r\n            return \"rpc.ankr.com/eth\";\r\n        case \"goerli\":\r\n            return \"rpc.ankr.com/eth_goerli\";\r\n        case \"sepolia\":\r\n            return \"rpc.ankr.com/eth_sepolia\";\r\n        case \"arbitrum\":\r\n            return \"rpc.ankr.com/arbitrum\";\r\n        case \"base\":\r\n            return \"rpc.ankr.com/base\";\r\n        case \"base-goerli\":\r\n            return \"rpc.ankr.com/base_goerli\";\r\n        case \"base-sepolia\":\r\n            return \"rpc.ankr.com/base_sepolia\";\r\n        case \"bnb\":\r\n            return \"rpc.ankr.com/bsc\";\r\n        case \"bnbt\":\r\n            return \"rpc.ankr.com/bsc_testnet_chapel\";\r\n        case \"matic\":\r\n            return \"rpc.ankr.com/polygon\";\r\n        case \"matic-mumbai\":\r\n            return \"rpc.ankr.com/polygon_mumbai\";\r\n        case \"optimism\":\r\n            return \"rpc.ankr.com/optimism\";\r\n        case \"optimism-goerli\":\r\n            return \"rpc.ankr.com/optimism_testnet\";\r\n        case \"optimism-sepolia\":\r\n            return \"rpc.ankr.com/optimism_sepolia\";\r\n    }\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"unsupported network\", \"network\", name);\r\n}\r\n/**\r\n *  The **AnkrProvider** connects to the [[link-ankr]]\r\n *  JSON-RPC end-points.\r\n *\r\n *  By default, a highly-throttled API key is used, which is\r\n *  appropriate for quick prototypes and simple scripts. To\r\n *  gain access to an increased rate-limit, it is highly\r\n *  recommended to [sign up here](link-ankr-signup).\r\n */\r\nclass AnkrProvider extends _provider_jsonrpc_js__WEBPACK_IMPORTED_MODULE_1__.JsonRpcProvider {\r\n    /**\r\n     *  The API key for the Ankr connection.\r\n     */\r\n    apiKey;\r\n    /**\r\n     *  Create a new **AnkrProvider**.\r\n     *\r\n     *  By default connecting to ``mainnet`` with a highly throttled\r\n     *  API key.\r\n     */\r\n    constructor(_network, apiKey) {\r\n        if (_network == null) {\r\n            _network = \"mainnet\";\r\n        }\r\n        const network = _network_js__WEBPACK_IMPORTED_MODULE_2__.Network.from(_network);\r\n        if (apiKey == null) {\r\n            apiKey = defaultApiKey;\r\n        }\r\n        // Ankr does not support filterId, so we force polling\r\n        const options = { polling: true, staticNetwork: network };\r\n        const request = AnkrProvider.getRequest(network, apiKey);\r\n        super(request, network, options);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, { apiKey });\r\n    }\r\n    _getProvider(chainId) {\r\n        try {\r\n            return new AnkrProvider(chainId, this.apiKey);\r\n        }\r\n        catch (error) { }\r\n        return super._getProvider(chainId);\r\n    }\r\n    /**\r\n     *  Returns a prepared request for connecting to %%network%% with\r\n     *  %%apiKey%%.\r\n     */\r\n    static getRequest(network, apiKey) {\r\n        if (apiKey == null) {\r\n            apiKey = defaultApiKey;\r\n        }\r\n        const request = new _utils_index_js__WEBPACK_IMPORTED_MODULE_0__.FetchRequest(`https:/\\/${getHost(network.name)}/${apiKey}`);\r\n        request.allowGzip = true;\r\n        if (apiKey === defaultApiKey) {\r\n            request.retryFunc = async (request, response, attempt) => {\r\n                (0,_community_js__WEBPACK_IMPORTED_MODULE_3__.showThrottleMessage)(\"AnkrProvider\");\r\n                return true;\r\n            };\r\n        }\r\n        return request;\r\n    }\r\n    getRpcError(payload, error) {\r\n        if (payload.method === \"eth_sendRawTransaction\") {\r\n            if (error && error.error && error.error.message === \"INTERNAL_ERROR: could not replace existing tx\") {\r\n                error.error.message = \"replacement transaction underpriced\";\r\n            }\r\n        }\r\n        return super.getRpcError(payload, error);\r\n    }\r\n    isCommunityResource() {\r\n        return (this.apiKey === defaultApiKey);\r\n    }\r\n}\r\n//# sourceMappingURL=provider-ankr.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9wcm92aWRlcnMvcHJvdmlkZXItYW5rci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDbUY7QUFDOUI7QUFDZDtBQUNpQjtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSwrREFBYztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLDJCQUEyQixpRUFBZTtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdEQUFPO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQSxRQUFRLGlFQUFnQixTQUFTLFFBQVE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIseURBQVksYUFBYSxzQkFBc0IsR0FBRyxPQUFPO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixrRUFBbUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJEOlxcRG9fYW4yXFxsZW5kaHViX3YyXFxsZW5kaHViLWZyb250ZW5kLW5leHRqc1xcbm9kZV9tb2R1bGVzXFxldGhlcnNcXGxpYi5lc21cXHByb3ZpZGVyc1xccHJvdmlkZXItYW5rci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogIFtbbGluay1hbmtyXV0gcHJvdmlkZXMgYSB0aGlyZC1wYXJ0eSBzZXJ2aWNlIGZvciBjb25uZWN0aW5nIHRvXHJcbiAqICB2YXJpb3VzIGJsb2NrY2hhaW5zIG92ZXIgSlNPTi1SUEMuXHJcbiAqXHJcbiAqICAqKlN1cHBvcnRlZCBOZXR3b3JrcyoqXHJcbiAqXHJcbiAqICAtIEV0aGVyZXVtIE1haW5uZXQgKGBgbWFpbm5ldGBgKVxyXG4gKiAgLSBHb2VybGkgVGVzdG5ldCAoYGBnb2VybGlgYClcclxuICogIC0gU2Vwb2xpYSBUZXN0bmV0IChgYHNlcG9saWFgYClcclxuICogIC0gQXJiaXRydW0gKGBgYXJiaXRydW1gYClcclxuICogIC0gQmFzZSAoYGBiYXNlYGApXHJcbiAqICAtIEJhc2UgR29lcmxpYSBUZXN0bmV0IChgYGJhc2UtZ29lcmxpYGApXHJcbiAqICAtIEJhc2UgU2Vwb2xpYSBUZXN0bmV0IChgYGJhc2Utc2Vwb2xpYWBgKVxyXG4gKiAgLSBCTkIgKGBgYm5iYGApXHJcbiAqICAtIEJOQiBUZXN0bmV0IChgYGJuYnRgYClcclxuICogIC0gT3B0aW1pc20gKGBgb3B0aW1pc21gYClcclxuICogIC0gT3B0aW1pc20gR29lcmxpIFRlc3RuZXQgKGBgb3B0aW1pc20tZ29lcmxpYGApXHJcbiAqICAtIE9wdGltaXNtIFNlcG9saWEgVGVzdG5ldCAoYGBvcHRpbWlzbS1zZXBvbGlhYGApXHJcbiAqICAtIFBvbHlnb24gKGBgbWF0aWNgYClcclxuICogIC0gUG9seWdvbiBNdW1iYWkgVGVzdG5ldCAoYGBtYXRpYy1tdW1iYWlgYClcclxuICpcclxuICogIEBfc3Vic2VjdGlvbjogYXBpL3Byb3ZpZGVycy90aGlyZHBhcnR5OkFua3IgIFtwcm92aWRlcnMtYW5rcl1cclxuICovXHJcbmltcG9ydCB7IGRlZmluZVByb3BlcnRpZXMsIEZldGNoUmVxdWVzdCwgYXNzZXJ0QXJndW1lbnQgfSBmcm9tIFwiLi4vdXRpbHMvaW5kZXguanNcIjtcclxuaW1wb3J0IHsgc2hvd1Rocm90dGxlTWVzc2FnZSB9IGZyb20gXCIuL2NvbW11bml0eS5qc1wiO1xyXG5pbXBvcnQgeyBOZXR3b3JrIH0gZnJvbSBcIi4vbmV0d29yay5qc1wiO1xyXG5pbXBvcnQgeyBKc29uUnBjUHJvdmlkZXIgfSBmcm9tIFwiLi9wcm92aWRlci1qc29ucnBjLmpzXCI7XHJcbmNvbnN0IGRlZmF1bHRBcGlLZXkgPSBcIjlmN2Q5MjliMDE4Y2RmZmIzMzg1MTdlZmEwNmY1ODM1OWU4NmZmMWZmZDM1MGJjODg5NzM4NTIzNjU5ZTc5NzJcIjtcclxuZnVuY3Rpb24gZ2V0SG9zdChuYW1lKSB7XHJcbiAgICBzd2l0Y2ggKG5hbWUpIHtcclxuICAgICAgICBjYXNlIFwibWFpbm5ldFwiOlxyXG4gICAgICAgICAgICByZXR1cm4gXCJycGMuYW5rci5jb20vZXRoXCI7XHJcbiAgICAgICAgY2FzZSBcImdvZXJsaVwiOlxyXG4gICAgICAgICAgICByZXR1cm4gXCJycGMuYW5rci5jb20vZXRoX2dvZXJsaVwiO1xyXG4gICAgICAgIGNhc2UgXCJzZXBvbGlhXCI6XHJcbiAgICAgICAgICAgIHJldHVybiBcInJwYy5hbmtyLmNvbS9ldGhfc2Vwb2xpYVwiO1xyXG4gICAgICAgIGNhc2UgXCJhcmJpdHJ1bVwiOlxyXG4gICAgICAgICAgICByZXR1cm4gXCJycGMuYW5rci5jb20vYXJiaXRydW1cIjtcclxuICAgICAgICBjYXNlIFwiYmFzZVwiOlxyXG4gICAgICAgICAgICByZXR1cm4gXCJycGMuYW5rci5jb20vYmFzZVwiO1xyXG4gICAgICAgIGNhc2UgXCJiYXNlLWdvZXJsaVwiOlxyXG4gICAgICAgICAgICByZXR1cm4gXCJycGMuYW5rci5jb20vYmFzZV9nb2VybGlcIjtcclxuICAgICAgICBjYXNlIFwiYmFzZS1zZXBvbGlhXCI6XHJcbiAgICAgICAgICAgIHJldHVybiBcInJwYy5hbmtyLmNvbS9iYXNlX3NlcG9saWFcIjtcclxuICAgICAgICBjYXNlIFwiYm5iXCI6XHJcbiAgICAgICAgICAgIHJldHVybiBcInJwYy5hbmtyLmNvbS9ic2NcIjtcclxuICAgICAgICBjYXNlIFwiYm5idFwiOlxyXG4gICAgICAgICAgICByZXR1cm4gXCJycGMuYW5rci5jb20vYnNjX3Rlc3RuZXRfY2hhcGVsXCI7XHJcbiAgICAgICAgY2FzZSBcIm1hdGljXCI6XHJcbiAgICAgICAgICAgIHJldHVybiBcInJwYy5hbmtyLmNvbS9wb2x5Z29uXCI7XHJcbiAgICAgICAgY2FzZSBcIm1hdGljLW11bWJhaVwiOlxyXG4gICAgICAgICAgICByZXR1cm4gXCJycGMuYW5rci5jb20vcG9seWdvbl9tdW1iYWlcIjtcclxuICAgICAgICBjYXNlIFwib3B0aW1pc21cIjpcclxuICAgICAgICAgICAgcmV0dXJuIFwicnBjLmFua3IuY29tL29wdGltaXNtXCI7XHJcbiAgICAgICAgY2FzZSBcIm9wdGltaXNtLWdvZXJsaVwiOlxyXG4gICAgICAgICAgICByZXR1cm4gXCJycGMuYW5rci5jb20vb3B0aW1pc21fdGVzdG5ldFwiO1xyXG4gICAgICAgIGNhc2UgXCJvcHRpbWlzbS1zZXBvbGlhXCI6XHJcbiAgICAgICAgICAgIHJldHVybiBcInJwYy5hbmtyLmNvbS9vcHRpbWlzbV9zZXBvbGlhXCI7XHJcbiAgICB9XHJcbiAgICBhc3NlcnRBcmd1bWVudChmYWxzZSwgXCJ1bnN1cHBvcnRlZCBuZXR3b3JrXCIsIFwibmV0d29ya1wiLCBuYW1lKTtcclxufVxyXG4vKipcclxuICogIFRoZSAqKkFua3JQcm92aWRlcioqIGNvbm5lY3RzIHRvIHRoZSBbW2xpbmstYW5rcl1dXHJcbiAqICBKU09OLVJQQyBlbmQtcG9pbnRzLlxyXG4gKlxyXG4gKiAgQnkgZGVmYXVsdCwgYSBoaWdobHktdGhyb3R0bGVkIEFQSSBrZXkgaXMgdXNlZCwgd2hpY2ggaXNcclxuICogIGFwcHJvcHJpYXRlIGZvciBxdWljayBwcm90b3R5cGVzIGFuZCBzaW1wbGUgc2NyaXB0cy4gVG9cclxuICogIGdhaW4gYWNjZXNzIHRvIGFuIGluY3JlYXNlZCByYXRlLWxpbWl0LCBpdCBpcyBoaWdobHlcclxuICogIHJlY29tbWVuZGVkIHRvIFtzaWduIHVwIGhlcmVdKGxpbmstYW5rci1zaWdudXApLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEFua3JQcm92aWRlciBleHRlbmRzIEpzb25ScGNQcm92aWRlciB7XHJcbiAgICAvKipcclxuICAgICAqICBUaGUgQVBJIGtleSBmb3IgdGhlIEFua3IgY29ubmVjdGlvbi5cclxuICAgICAqL1xyXG4gICAgYXBpS2V5O1xyXG4gICAgLyoqXHJcbiAgICAgKiAgQ3JlYXRlIGEgbmV3ICoqQW5rclByb3ZpZGVyKiouXHJcbiAgICAgKlxyXG4gICAgICogIEJ5IGRlZmF1bHQgY29ubmVjdGluZyB0byBgYG1haW5uZXRgYCB3aXRoIGEgaGlnaGx5IHRocm90dGxlZFxyXG4gICAgICogIEFQSSBrZXkuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKF9uZXR3b3JrLCBhcGlLZXkpIHtcclxuICAgICAgICBpZiAoX25ldHdvcmsgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBfbmV0d29yayA9IFwibWFpbm5ldFwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBuZXR3b3JrID0gTmV0d29yay5mcm9tKF9uZXR3b3JrKTtcclxuICAgICAgICBpZiAoYXBpS2V5ID09IG51bGwpIHtcclxuICAgICAgICAgICAgYXBpS2V5ID0gZGVmYXVsdEFwaUtleTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQW5rciBkb2VzIG5vdCBzdXBwb3J0IGZpbHRlcklkLCBzbyB3ZSBmb3JjZSBwb2xsaW5nXHJcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHsgcG9sbGluZzogdHJ1ZSwgc3RhdGljTmV0d29yazogbmV0d29yayB9O1xyXG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSBBbmtyUHJvdmlkZXIuZ2V0UmVxdWVzdChuZXR3b3JrLCBhcGlLZXkpO1xyXG4gICAgICAgIHN1cGVyKHJlcXVlc3QsIG5ldHdvcmssIG9wdGlvbnMpO1xyXG4gICAgICAgIGRlZmluZVByb3BlcnRpZXModGhpcywgeyBhcGlLZXkgfSk7XHJcbiAgICB9XHJcbiAgICBfZ2V0UHJvdmlkZXIoY2hhaW5JZCkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQW5rclByb3ZpZGVyKGNoYWluSWQsIHRoaXMuYXBpS2V5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7IH1cclxuICAgICAgICByZXR1cm4gc3VwZXIuX2dldFByb3ZpZGVyKGNoYWluSWQpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgUmV0dXJucyBhIHByZXBhcmVkIHJlcXVlc3QgZm9yIGNvbm5lY3RpbmcgdG8gJSVuZXR3b3JrJSUgd2l0aFxyXG4gICAgICogICUlYXBpS2V5JSUuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBnZXRSZXF1ZXN0KG5ldHdvcmssIGFwaUtleSkge1xyXG4gICAgICAgIGlmIChhcGlLZXkgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBhcGlLZXkgPSBkZWZhdWx0QXBpS2V5O1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCByZXF1ZXN0ID0gbmV3IEZldGNoUmVxdWVzdChgaHR0cHM6L1xcLyR7Z2V0SG9zdChuZXR3b3JrLm5hbWUpfS8ke2FwaUtleX1gKTtcclxuICAgICAgICByZXF1ZXN0LmFsbG93R3ppcCA9IHRydWU7XHJcbiAgICAgICAgaWYgKGFwaUtleSA9PT0gZGVmYXVsdEFwaUtleSkge1xyXG4gICAgICAgICAgICByZXF1ZXN0LnJldHJ5RnVuYyA9IGFzeW5jIChyZXF1ZXN0LCByZXNwb25zZSwgYXR0ZW1wdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgc2hvd1Rocm90dGxlTWVzc2FnZShcIkFua3JQcm92aWRlclwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVxdWVzdDtcclxuICAgIH1cclxuICAgIGdldFJwY0Vycm9yKHBheWxvYWQsIGVycm9yKSB7XHJcbiAgICAgICAgaWYgKHBheWxvYWQubWV0aG9kID09PSBcImV0aF9zZW5kUmF3VHJhbnNhY3Rpb25cIikge1xyXG4gICAgICAgICAgICBpZiAoZXJyb3IgJiYgZXJyb3IuZXJyb3IgJiYgZXJyb3IuZXJyb3IubWVzc2FnZSA9PT0gXCJJTlRFUk5BTF9FUlJPUjogY291bGQgbm90IHJlcGxhY2UgZXhpc3RpbmcgdHhcIikge1xyXG4gICAgICAgICAgICAgICAgZXJyb3IuZXJyb3IubWVzc2FnZSA9IFwicmVwbGFjZW1lbnQgdHJhbnNhY3Rpb24gdW5kZXJwcmljZWRcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc3VwZXIuZ2V0UnBjRXJyb3IocGF5bG9hZCwgZXJyb3IpO1xyXG4gICAgfVxyXG4gICAgaXNDb21tdW5pdHlSZXNvdXJjZSgpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMuYXBpS2V5ID09PSBkZWZhdWx0QXBpS2V5KTtcclxuICAgIH1cclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm92aWRlci1hbmtyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-ankr.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-blockscout.js":
/*!**********************************************************************!*\
  !*** ./node_modules/ethers/lib.esm/providers/provider-blockscout.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlockscoutProvider: () => (/* binding */ BlockscoutProvider)\n/* harmony export */ });\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/* harmony import */ var _network_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./network.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/network.js\");\n/* harmony import */ var _provider_jsonrpc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./provider-jsonrpc.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-jsonrpc.js\");\n/**\r\n *  [[link-blockscout]] provides a third-party service for connecting to\r\n *  various blockchains over JSON-RPC.\r\n *\r\n *  **Supported Networks**\r\n *\r\n *  - Ethereum Mainnet (``mainnet``)\r\n *  - Sepolia Testnet (``sepolia``)\r\n *  - Holesky Testnet (``holesky``)\r\n *  - Ethereum Classic (``classic``)\r\n *  - Arbitrum (``arbitrum``)\r\n *  - Base (``base``)\r\n *  - Base Sepolia Testnet (``base-sepolia``)\r\n *  - Gnosis (``xdai``)\r\n *  - Optimism (``optimism``)\r\n *  - Optimism Sepolia Testnet (``optimism-sepolia``)\r\n *  - Polygon (``matic``)\r\n *\r\n *  @_subsection: api/providers/thirdparty:Blockscout  [providers-blockscout]\r\n */\r\n\r\n\r\n\r\nfunction getUrl(name) {\r\n    switch (name) {\r\n        case \"mainnet\":\r\n            return \"https:/\\/eth.blockscout.com/api/eth-rpc\";\r\n        case \"sepolia\":\r\n            return \"https:/\\/eth-sepolia.blockscout.com/api/eth-rpc\";\r\n        case \"holesky\":\r\n            return \"https:/\\/eth-holesky.blockscout.com/api/eth-rpc\";\r\n        case \"classic\":\r\n            return \"https:/\\/etc.blockscout.com/api/eth-rpc\";\r\n        case \"arbitrum\":\r\n            return \"https:/\\/arbitrum.blockscout.com/api/eth-rpc\";\r\n        case \"base\":\r\n            return \"https:/\\/base.blockscout.com/api/eth-rpc\";\r\n        case \"base-sepolia\":\r\n            return \"https:/\\/base-sepolia.blockscout.com/api/eth-rpc\";\r\n        case \"matic\":\r\n            return \"https:/\\/polygon.blockscout.com/api/eth-rpc\";\r\n        case \"optimism\":\r\n            return \"https:/\\/optimism.blockscout.com/api/eth-rpc\";\r\n        case \"optimism-sepolia\":\r\n            return \"https:/\\/optimism-sepolia.blockscout.com/api/eth-rpc\";\r\n        case \"xdai\":\r\n            return \"https:/\\/gnosis.blockscout.com/api/eth-rpc\";\r\n    }\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"unsupported network\", \"network\", name);\r\n}\r\n/**\r\n *  The **BlockscoutProvider** connects to the [[link-blockscout]]\r\n *  JSON-RPC end-points.\r\n *\r\n *  By default, a highly-throttled API key is used, which is\r\n *  appropriate for quick prototypes and simple scripts. To\r\n *  gain access to an increased rate-limit, it is highly\r\n *  recommended to [sign up here](link-blockscout).\r\n */\r\nclass BlockscoutProvider extends _provider_jsonrpc_js__WEBPACK_IMPORTED_MODULE_1__.JsonRpcProvider {\r\n    /**\r\n     *  The API key.\r\n     */\r\n    apiKey;\r\n    /**\r\n     *  Creates a new **BlockscoutProvider**.\r\n     */\r\n    constructor(_network, apiKey) {\r\n        if (_network == null) {\r\n            _network = \"mainnet\";\r\n        }\r\n        const network = _network_js__WEBPACK_IMPORTED_MODULE_2__.Network.from(_network);\r\n        if (apiKey == null) {\r\n            apiKey = null;\r\n        }\r\n        const request = BlockscoutProvider.getRequest(network);\r\n        super(request, network, { staticNetwork: network });\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, { apiKey });\r\n    }\r\n    _getProvider(chainId) {\r\n        try {\r\n            return new BlockscoutProvider(chainId, this.apiKey);\r\n        }\r\n        catch (error) { }\r\n        return super._getProvider(chainId);\r\n    }\r\n    isCommunityResource() {\r\n        return (this.apiKey === null);\r\n    }\r\n    getRpcRequest(req) {\r\n        // Blockscout enforces the TAG argument for estimateGas\r\n        const resp = super.getRpcRequest(req);\r\n        if (resp && resp.method === \"eth_estimateGas\" && resp.args.length == 1) {\r\n            resp.args = resp.args.slice();\r\n            resp.args.push(\"latest\");\r\n        }\r\n        return resp;\r\n    }\r\n    getRpcError(payload, _error) {\r\n        const error = _error ? _error.error : null;\r\n        // Blockscout currently drops the VM result and replaces it with a\r\n        // human-readable string, so we need to make it machine-readable.\r\n        if (error && error.code === -32015 && !(0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isHexString)(error.data || \"\", true)) {\r\n            const panicCodes = {\r\n                \"assert(false)\": \"01\",\r\n                \"arithmetic underflow or overflow\": \"11\",\r\n                \"division or modulo by zero\": \"12\",\r\n                \"out-of-bounds array access; popping on an empty array\": \"31\",\r\n                \"out-of-bounds access of an array or bytesN\": \"32\"\r\n            };\r\n            let panicCode = \"\";\r\n            if (error.message === \"VM execution error.\") {\r\n                // eth_call passes this message\r\n                panicCode = panicCodes[error.data] || \"\";\r\n            }\r\n            else if (panicCodes[error.message || \"\"]) {\r\n                panicCode = panicCodes[error.message || \"\"];\r\n            }\r\n            if (panicCode) {\r\n                error.message += ` (reverted: ${error.data})`;\r\n                error.data = \"0x4e487b7100000000000000000000000000000000000000000000000000000000000000\" + panicCode;\r\n            }\r\n        }\r\n        else if (error && error.code === -32000) {\r\n            if (error.message === \"wrong transaction nonce\") {\r\n                error.message += \" (nonce too low)\";\r\n            }\r\n        }\r\n        return super.getRpcError(payload, _error);\r\n    }\r\n    /**\r\n     *  Returns a prepared request for connecting to %%network%%\r\n     *  with %%apiKey%%.\r\n     */\r\n    static getRequest(network) {\r\n        const request = new _utils_index_js__WEBPACK_IMPORTED_MODULE_0__.FetchRequest(getUrl(network.name));\r\n        request.allowGzip = true;\r\n        return request;\r\n    }\r\n}\r\n//# sourceMappingURL=provider-blockscout.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9wcm92aWRlcnMvcHJvdmlkZXItYmxvY2tzY291dC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNnRztBQUN6RDtBQUNpQjtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksK0RBQWM7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxpQ0FBaUMsaUVBQWU7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnREFBTztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyx3QkFBd0I7QUFDMUQsUUFBUSxpRUFBZ0IsU0FBUyxRQUFRO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyw0REFBVztBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELFdBQVc7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLHlEQUFZO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkQ6XFxEb19hbjJcXGxlbmRodWJfdjJcXGxlbmRodWItZnJvbnRlbmQtbmV4dGpzXFxub2RlX21vZHVsZXNcXGV0aGVyc1xcbGliLmVzbVxccHJvdmlkZXJzXFxwcm92aWRlci1ibG9ja3Njb3V0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiAgW1tsaW5rLWJsb2Nrc2NvdXRdXSBwcm92aWRlcyBhIHRoaXJkLXBhcnR5IHNlcnZpY2UgZm9yIGNvbm5lY3RpbmcgdG9cclxuICogIHZhcmlvdXMgYmxvY2tjaGFpbnMgb3ZlciBKU09OLVJQQy5cclxuICpcclxuICogICoqU3VwcG9ydGVkIE5ldHdvcmtzKipcclxuICpcclxuICogIC0gRXRoZXJldW0gTWFpbm5ldCAoYGBtYWlubmV0YGApXHJcbiAqICAtIFNlcG9saWEgVGVzdG5ldCAoYGBzZXBvbGlhYGApXHJcbiAqICAtIEhvbGVza3kgVGVzdG5ldCAoYGBob2xlc2t5YGApXHJcbiAqICAtIEV0aGVyZXVtIENsYXNzaWMgKGBgY2xhc3NpY2BgKVxyXG4gKiAgLSBBcmJpdHJ1bSAoYGBhcmJpdHJ1bWBgKVxyXG4gKiAgLSBCYXNlIChgYGJhc2VgYClcclxuICogIC0gQmFzZSBTZXBvbGlhIFRlc3RuZXQgKGBgYmFzZS1zZXBvbGlhYGApXHJcbiAqICAtIEdub3NpcyAoYGB4ZGFpYGApXHJcbiAqICAtIE9wdGltaXNtIChgYG9wdGltaXNtYGApXHJcbiAqICAtIE9wdGltaXNtIFNlcG9saWEgVGVzdG5ldCAoYGBvcHRpbWlzbS1zZXBvbGlhYGApXHJcbiAqICAtIFBvbHlnb24gKGBgbWF0aWNgYClcclxuICpcclxuICogIEBfc3Vic2VjdGlvbjogYXBpL3Byb3ZpZGVycy90aGlyZHBhcnR5OkJsb2Nrc2NvdXQgIFtwcm92aWRlcnMtYmxvY2tzY291dF1cclxuICovXHJcbmltcG9ydCB7IGFzc2VydEFyZ3VtZW50LCBkZWZpbmVQcm9wZXJ0aWVzLCBGZXRjaFJlcXVlc3QsIGlzSGV4U3RyaW5nIH0gZnJvbSBcIi4uL3V0aWxzL2luZGV4LmpzXCI7XHJcbmltcG9ydCB7IE5ldHdvcmsgfSBmcm9tIFwiLi9uZXR3b3JrLmpzXCI7XHJcbmltcG9ydCB7IEpzb25ScGNQcm92aWRlciB9IGZyb20gXCIuL3Byb3ZpZGVyLWpzb25ycGMuanNcIjtcclxuZnVuY3Rpb24gZ2V0VXJsKG5hbWUpIHtcclxuICAgIHN3aXRjaCAobmFtZSkge1xyXG4gICAgICAgIGNhc2UgXCJtYWlubmV0XCI6XHJcbiAgICAgICAgICAgIHJldHVybiBcImh0dHBzOi9cXC9ldGguYmxvY2tzY291dC5jb20vYXBpL2V0aC1ycGNcIjtcclxuICAgICAgICBjYXNlIFwic2Vwb2xpYVwiOlxyXG4gICAgICAgICAgICByZXR1cm4gXCJodHRwczovXFwvZXRoLXNlcG9saWEuYmxvY2tzY291dC5jb20vYXBpL2V0aC1ycGNcIjtcclxuICAgICAgICBjYXNlIFwiaG9sZXNreVwiOlxyXG4gICAgICAgICAgICByZXR1cm4gXCJodHRwczovXFwvZXRoLWhvbGVza3kuYmxvY2tzY291dC5jb20vYXBpL2V0aC1ycGNcIjtcclxuICAgICAgICBjYXNlIFwiY2xhc3NpY1wiOlxyXG4gICAgICAgICAgICByZXR1cm4gXCJodHRwczovXFwvZXRjLmJsb2Nrc2NvdXQuY29tL2FwaS9ldGgtcnBjXCI7XHJcbiAgICAgICAgY2FzZSBcImFyYml0cnVtXCI6XHJcbiAgICAgICAgICAgIHJldHVybiBcImh0dHBzOi9cXC9hcmJpdHJ1bS5ibG9ja3Njb3V0LmNvbS9hcGkvZXRoLXJwY1wiO1xyXG4gICAgICAgIGNhc2UgXCJiYXNlXCI6XHJcbiAgICAgICAgICAgIHJldHVybiBcImh0dHBzOi9cXC9iYXNlLmJsb2Nrc2NvdXQuY29tL2FwaS9ldGgtcnBjXCI7XHJcbiAgICAgICAgY2FzZSBcImJhc2Utc2Vwb2xpYVwiOlxyXG4gICAgICAgICAgICByZXR1cm4gXCJodHRwczovXFwvYmFzZS1zZXBvbGlhLmJsb2Nrc2NvdXQuY29tL2FwaS9ldGgtcnBjXCI7XHJcbiAgICAgICAgY2FzZSBcIm1hdGljXCI6XHJcbiAgICAgICAgICAgIHJldHVybiBcImh0dHBzOi9cXC9wb2x5Z29uLmJsb2Nrc2NvdXQuY29tL2FwaS9ldGgtcnBjXCI7XHJcbiAgICAgICAgY2FzZSBcIm9wdGltaXNtXCI6XHJcbiAgICAgICAgICAgIHJldHVybiBcImh0dHBzOi9cXC9vcHRpbWlzbS5ibG9ja3Njb3V0LmNvbS9hcGkvZXRoLXJwY1wiO1xyXG4gICAgICAgIGNhc2UgXCJvcHRpbWlzbS1zZXBvbGlhXCI6XHJcbiAgICAgICAgICAgIHJldHVybiBcImh0dHBzOi9cXC9vcHRpbWlzbS1zZXBvbGlhLmJsb2Nrc2NvdXQuY29tL2FwaS9ldGgtcnBjXCI7XHJcbiAgICAgICAgY2FzZSBcInhkYWlcIjpcclxuICAgICAgICAgICAgcmV0dXJuIFwiaHR0cHM6L1xcL2dub3Npcy5ibG9ja3Njb3V0LmNvbS9hcGkvZXRoLXJwY1wiO1xyXG4gICAgfVxyXG4gICAgYXNzZXJ0QXJndW1lbnQoZmFsc2UsIFwidW5zdXBwb3J0ZWQgbmV0d29ya1wiLCBcIm5ldHdvcmtcIiwgbmFtZSk7XHJcbn1cclxuLyoqXHJcbiAqICBUaGUgKipCbG9ja3Njb3V0UHJvdmlkZXIqKiBjb25uZWN0cyB0byB0aGUgW1tsaW5rLWJsb2Nrc2NvdXRdXVxyXG4gKiAgSlNPTi1SUEMgZW5kLXBvaW50cy5cclxuICpcclxuICogIEJ5IGRlZmF1bHQsIGEgaGlnaGx5LXRocm90dGxlZCBBUEkga2V5IGlzIHVzZWQsIHdoaWNoIGlzXHJcbiAqICBhcHByb3ByaWF0ZSBmb3IgcXVpY2sgcHJvdG90eXBlcyBhbmQgc2ltcGxlIHNjcmlwdHMuIFRvXHJcbiAqICBnYWluIGFjY2VzcyB0byBhbiBpbmNyZWFzZWQgcmF0ZS1saW1pdCwgaXQgaXMgaGlnaGx5XHJcbiAqICByZWNvbW1lbmRlZCB0byBbc2lnbiB1cCBoZXJlXShsaW5rLWJsb2Nrc2NvdXQpLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEJsb2Nrc2NvdXRQcm92aWRlciBleHRlbmRzIEpzb25ScGNQcm92aWRlciB7XHJcbiAgICAvKipcclxuICAgICAqICBUaGUgQVBJIGtleS5cclxuICAgICAqL1xyXG4gICAgYXBpS2V5O1xyXG4gICAgLyoqXHJcbiAgICAgKiAgQ3JlYXRlcyBhIG5ldyAqKkJsb2Nrc2NvdXRQcm92aWRlcioqLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihfbmV0d29yaywgYXBpS2V5KSB7XHJcbiAgICAgICAgaWYgKF9uZXR3b3JrID09IG51bGwpIHtcclxuICAgICAgICAgICAgX25ldHdvcmsgPSBcIm1haW5uZXRcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgbmV0d29yayA9IE5ldHdvcmsuZnJvbShfbmV0d29yayk7XHJcbiAgICAgICAgaWYgKGFwaUtleSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGFwaUtleSA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSBCbG9ja3Njb3V0UHJvdmlkZXIuZ2V0UmVxdWVzdChuZXR3b3JrKTtcclxuICAgICAgICBzdXBlcihyZXF1ZXN0LCBuZXR3b3JrLCB7IHN0YXRpY05ldHdvcms6IG5ldHdvcmsgfSk7XHJcbiAgICAgICAgZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7IGFwaUtleSB9KTtcclxuICAgIH1cclxuICAgIF9nZXRQcm92aWRlcihjaGFpbklkKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBCbG9ja3Njb3V0UHJvdmlkZXIoY2hhaW5JZCwgdGhpcy5hcGlLZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZXJyb3IpIHsgfVxyXG4gICAgICAgIHJldHVybiBzdXBlci5fZ2V0UHJvdmlkZXIoY2hhaW5JZCk7XHJcbiAgICB9XHJcbiAgICBpc0NvbW11bml0eVJlc291cmNlKCkge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5hcGlLZXkgPT09IG51bGwpO1xyXG4gICAgfVxyXG4gICAgZ2V0UnBjUmVxdWVzdChyZXEpIHtcclxuICAgICAgICAvLyBCbG9ja3Njb3V0IGVuZm9yY2VzIHRoZSBUQUcgYXJndW1lbnQgZm9yIGVzdGltYXRlR2FzXHJcbiAgICAgICAgY29uc3QgcmVzcCA9IHN1cGVyLmdldFJwY1JlcXVlc3QocmVxKTtcclxuICAgICAgICBpZiAocmVzcCAmJiByZXNwLm1ldGhvZCA9PT0gXCJldGhfZXN0aW1hdGVHYXNcIiAmJiByZXNwLmFyZ3MubGVuZ3RoID09IDEpIHtcclxuICAgICAgICAgICAgcmVzcC5hcmdzID0gcmVzcC5hcmdzLnNsaWNlKCk7XHJcbiAgICAgICAgICAgIHJlc3AuYXJncy5wdXNoKFwibGF0ZXN0XCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzcDtcclxuICAgIH1cclxuICAgIGdldFJwY0Vycm9yKHBheWxvYWQsIF9lcnJvcikge1xyXG4gICAgICAgIGNvbnN0IGVycm9yID0gX2Vycm9yID8gX2Vycm9yLmVycm9yIDogbnVsbDtcclxuICAgICAgICAvLyBCbG9ja3Njb3V0IGN1cnJlbnRseSBkcm9wcyB0aGUgVk0gcmVzdWx0IGFuZCByZXBsYWNlcyBpdCB3aXRoIGFcclxuICAgICAgICAvLyBodW1hbi1yZWFkYWJsZSBzdHJpbmcsIHNvIHdlIG5lZWQgdG8gbWFrZSBpdCBtYWNoaW5lLXJlYWRhYmxlLlxyXG4gICAgICAgIGlmIChlcnJvciAmJiBlcnJvci5jb2RlID09PSAtMzIwMTUgJiYgIWlzSGV4U3RyaW5nKGVycm9yLmRhdGEgfHwgXCJcIiwgdHJ1ZSkpIHtcclxuICAgICAgICAgICAgY29uc3QgcGFuaWNDb2RlcyA9IHtcclxuICAgICAgICAgICAgICAgIFwiYXNzZXJ0KGZhbHNlKVwiOiBcIjAxXCIsXHJcbiAgICAgICAgICAgICAgICBcImFyaXRobWV0aWMgdW5kZXJmbG93IG9yIG92ZXJmbG93XCI6IFwiMTFcIixcclxuICAgICAgICAgICAgICAgIFwiZGl2aXNpb24gb3IgbW9kdWxvIGJ5IHplcm9cIjogXCIxMlwiLFxyXG4gICAgICAgICAgICAgICAgXCJvdXQtb2YtYm91bmRzIGFycmF5IGFjY2VzczsgcG9wcGluZyBvbiBhbiBlbXB0eSBhcnJheVwiOiBcIjMxXCIsXHJcbiAgICAgICAgICAgICAgICBcIm91dC1vZi1ib3VuZHMgYWNjZXNzIG9mIGFuIGFycmF5IG9yIGJ5dGVzTlwiOiBcIjMyXCJcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgbGV0IHBhbmljQ29kZSA9IFwiXCI7XHJcbiAgICAgICAgICAgIGlmIChlcnJvci5tZXNzYWdlID09PSBcIlZNIGV4ZWN1dGlvbiBlcnJvci5cIikge1xyXG4gICAgICAgICAgICAgICAgLy8gZXRoX2NhbGwgcGFzc2VzIHRoaXMgbWVzc2FnZVxyXG4gICAgICAgICAgICAgICAgcGFuaWNDb2RlID0gcGFuaWNDb2Rlc1tlcnJvci5kYXRhXSB8fCBcIlwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHBhbmljQ29kZXNbZXJyb3IubWVzc2FnZSB8fCBcIlwiXSkge1xyXG4gICAgICAgICAgICAgICAgcGFuaWNDb2RlID0gcGFuaWNDb2Rlc1tlcnJvci5tZXNzYWdlIHx8IFwiXCJdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChwYW5pY0NvZGUpIHtcclxuICAgICAgICAgICAgICAgIGVycm9yLm1lc3NhZ2UgKz0gYCAocmV2ZXJ0ZWQ6ICR7ZXJyb3IuZGF0YX0pYDtcclxuICAgICAgICAgICAgICAgIGVycm9yLmRhdGEgPSBcIjB4NGU0ODdiNzEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiICsgcGFuaWNDb2RlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGVycm9yICYmIGVycm9yLmNvZGUgPT09IC0zMjAwMCkge1xyXG4gICAgICAgICAgICBpZiAoZXJyb3IubWVzc2FnZSA9PT0gXCJ3cm9uZyB0cmFuc2FjdGlvbiBub25jZVwiKSB7XHJcbiAgICAgICAgICAgICAgICBlcnJvci5tZXNzYWdlICs9IFwiIChub25jZSB0b28gbG93KVwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzdXBlci5nZXRScGNFcnJvcihwYXlsb2FkLCBfZXJyb3IpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgUmV0dXJucyBhIHByZXBhcmVkIHJlcXVlc3QgZm9yIGNvbm5lY3RpbmcgdG8gJSVuZXR3b3JrJSVcclxuICAgICAqICB3aXRoICUlYXBpS2V5JSUuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBnZXRSZXF1ZXN0KG5ldHdvcmspIHtcclxuICAgICAgICBjb25zdCByZXF1ZXN0ID0gbmV3IEZldGNoUmVxdWVzdChnZXRVcmwobmV0d29yay5uYW1lKSk7XHJcbiAgICAgICAgcmVxdWVzdC5hbGxvd0d6aXAgPSB0cnVlO1xyXG4gICAgICAgIHJldHVybiByZXF1ZXN0O1xyXG4gICAgfVxyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3ZpZGVyLWJsb2Nrc2NvdXQuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-blockscout.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-browser.js":
/*!*******************************************************************!*\
  !*** ./node_modules/ethers/lib.esm/providers/provider-browser.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BrowserProvider: () => (/* binding */ BrowserProvider)\n/* harmony export */ });\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/* harmony import */ var _provider_jsonrpc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./provider-jsonrpc.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-jsonrpc.js\");\n\r\n\r\n;\r\n/**\r\n *  A **BrowserProvider** is intended to wrap an injected provider which\r\n *  adheres to the [[link-eip-1193]] standard, which most (if not all)\r\n *  currently do.\r\n */\r\nclass BrowserProvider extends _provider_jsonrpc_js__WEBPACK_IMPORTED_MODULE_0__.JsonRpcApiPollingProvider {\r\n    #request;\r\n    #providerInfo;\r\n    /**\r\n     *  Connect to the %%ethereum%% provider, optionally forcing the\r\n     *  %%network%%.\r\n     */\r\n    constructor(ethereum, network, _options) {\r\n        // Copy the options\r\n        const options = Object.assign({}, ((_options != null) ? _options : {}), { batchMaxCount: 1 });\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(ethereum && ethereum.request, \"invalid EIP-1193 provider\", \"ethereum\", ethereum);\r\n        super(network, options);\r\n        this.#providerInfo = null;\r\n        if (_options && _options.providerInfo) {\r\n            this.#providerInfo = _options.providerInfo;\r\n        }\r\n        this.#request = async (method, params) => {\r\n            const payload = { method, params };\r\n            this.emit(\"debug\", { action: \"sendEip1193Request\", payload });\r\n            try {\r\n                const result = await ethereum.request(payload);\r\n                this.emit(\"debug\", { action: \"receiveEip1193Result\", result });\r\n                return result;\r\n            }\r\n            catch (e) {\r\n                const error = new Error(e.message);\r\n                error.code = e.code;\r\n                error.data = e.data;\r\n                error.payload = payload;\r\n                this.emit(\"debug\", { action: \"receiveEip1193Error\", error });\r\n                throw error;\r\n            }\r\n        };\r\n    }\r\n    get providerInfo() {\r\n        return this.#providerInfo;\r\n    }\r\n    async send(method, params) {\r\n        await this._start();\r\n        return await super.send(method, params);\r\n    }\r\n    async _send(payload) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(!Array.isArray(payload), \"EIP-1193 does not support batch request\", \"payload\", payload);\r\n        try {\r\n            const result = await this.#request(payload.method, payload.params || []);\r\n            return [{ id: payload.id, result }];\r\n        }\r\n        catch (e) {\r\n            return [{\r\n                    id: payload.id,\r\n                    error: { code: e.code, data: e.data, message: e.message }\r\n                }];\r\n        }\r\n    }\r\n    getRpcError(payload, error) {\r\n        error = JSON.parse(JSON.stringify(error));\r\n        // EIP-1193 gives us some machine-readable error codes, so rewrite\r\n        // them into Ethers standard errors.\r\n        switch (error.error.code || -1) {\r\n            case 4001:\r\n                error.error.message = `ethers-user-denied: ${error.error.message}`;\r\n                break;\r\n            case 4200:\r\n                error.error.message = `ethers-unsupported: ${error.error.message}`;\r\n                break;\r\n        }\r\n        return super.getRpcError(payload, error);\r\n    }\r\n    /**\r\n     *  Resolves to ``true`` if the provider manages the %%address%%.\r\n     */\r\n    async hasSigner(address) {\r\n        if (address == null) {\r\n            address = 0;\r\n        }\r\n        const accounts = await this.send(\"eth_accounts\", []);\r\n        if (typeof (address) === \"number\") {\r\n            return (accounts.length > address);\r\n        }\r\n        address = address.toLowerCase();\r\n        return accounts.filter((a) => (a.toLowerCase() === address)).length !== 0;\r\n    }\r\n    async getSigner(address) {\r\n        if (address == null) {\r\n            address = 0;\r\n        }\r\n        if (!(await this.hasSigner(address))) {\r\n            try {\r\n                await this.#request(\"eth_requestAccounts\", []);\r\n            }\r\n            catch (error) {\r\n                const payload = error.payload;\r\n                throw this.getRpcError(payload, { id: payload.id, error });\r\n            }\r\n        }\r\n        return await super.getSigner(address);\r\n    }\r\n    /**\r\n     *  Discover and connect to a Provider in the Browser using the\r\n     *  [[link-eip-6963]] discovery mechanism. If no providers are\r\n     *  present, ``null`` is resolved.\r\n     */\r\n    static async discover(options) {\r\n        if (options == null) {\r\n            options = {};\r\n        }\r\n        if (options.provider) {\r\n            return new BrowserProvider(options.provider);\r\n        }\r\n        const context = options.window ? options.window :\r\n            (typeof (window) !== \"undefined\") ? window : null;\r\n        if (context == null) {\r\n            return null;\r\n        }\r\n        const anyProvider = options.anyProvider;\r\n        if (anyProvider && context.ethereum) {\r\n            return new BrowserProvider(context.ethereum);\r\n        }\r\n        if (!(\"addEventListener\" in context && \"dispatchEvent\" in context\r\n            && \"removeEventListener\" in context)) {\r\n            return null;\r\n        }\r\n        const timeout = options.timeout ? options.timeout : 300;\r\n        if (timeout === 0) {\r\n            return null;\r\n        }\r\n        return await (new Promise((resolve, reject) => {\r\n            let found = [];\r\n            const addProvider = (event) => {\r\n                found.push(event.detail);\r\n                if (anyProvider) {\r\n                    finalize();\r\n                }\r\n            };\r\n            const finalize = () => {\r\n                clearTimeout(timer);\r\n                if (found.length) {\r\n                    // If filtering is provided:\r\n                    if (options && options.filter) {\r\n                        // Call filter, with a copies of found provider infos\r\n                        const filtered = options.filter(found.map(i => Object.assign({}, (i.info))));\r\n                        if (filtered == null) {\r\n                            // No provider selected\r\n                            resolve(null);\r\n                        }\r\n                        else if (filtered instanceof BrowserProvider) {\r\n                            // Custom provider created\r\n                            resolve(filtered);\r\n                        }\r\n                        else {\r\n                            // Find the matching provider\r\n                            let match = null;\r\n                            if (filtered.uuid) {\r\n                                const matches = found.filter(f => (filtered.uuid === f.info.uuid));\r\n                                // @TODO: What should happen if multiple values\r\n                                //        for the same UUID?\r\n                                match = matches[0];\r\n                            }\r\n                            if (match) {\r\n                                const { provider, info } = match;\r\n                                resolve(new BrowserProvider(provider, undefined, {\r\n                                    providerInfo: info\r\n                                }));\r\n                            }\r\n                            else {\r\n                                reject((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.makeError)(\"filter returned unknown info\", \"UNSUPPORTED_OPERATION\", {\r\n                                    value: filtered\r\n                                }));\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        // Pick the first found provider\r\n                        const { provider, info } = found[0];\r\n                        resolve(new BrowserProvider(provider, undefined, {\r\n                            providerInfo: info\r\n                        }));\r\n                    }\r\n                }\r\n                else {\r\n                    // Nothing found\r\n                    resolve(null);\r\n                }\r\n                context.removeEventListener(\"eip6963:announceProvider\", addProvider);\r\n            };\r\n            const timer = setTimeout(() => { finalize(); }, timeout);\r\n            context.addEventListener(\"eip6963:announceProvider\", addProvider);\r\n            context.dispatchEvent(new Event(\"eip6963:requestProvider\"));\r\n        }));\r\n    }\r\n}\r\n//# sourceMappingURL=provider-browser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-browser.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-chainstack.js":
/*!**********************************************************************!*\
  !*** ./node_modules/ethers/lib.esm/providers/provider-chainstack.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChainstackProvider: () => (/* binding */ ChainstackProvider)\n/* harmony export */ });\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/* harmony import */ var _community_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./community.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/community.js\");\n/* harmony import */ var _network_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./network.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/network.js\");\n/* harmony import */ var _provider_jsonrpc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./provider-jsonrpc.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-jsonrpc.js\");\n/**\r\n *  [[link-chainstack]] provides a third-party service for connecting to\r\n *  various blockchains over JSON-RPC.\r\n *\r\n *  **Supported Networks**\r\n *\r\n *  - Ethereum Mainnet (``mainnet``)\r\n *  - Arbitrum (``arbitrum``)\r\n *  - BNB Smart Chain Mainnet (``bnb``)\r\n *  - Polygon (``matic``)\r\n *\r\n *  @_subsection: api/providers/thirdparty:Chainstack  [providers-chainstack]\r\n */\r\n\r\n\r\n\r\n\r\nfunction getApiKey(name) {\r\n    switch (name) {\r\n        case \"mainnet\": return \"39f1d67cedf8b7831010a665328c9197\";\r\n        case \"arbitrum\": return \"0550c209db33c3abf4cc927e1e18cea1\";\r\n        case \"bnb\": return \"98b5a77e531614387366f6fc5da097f8\";\r\n        case \"matic\": return \"cd9d4d70377471aa7c142ec4a4205249\";\r\n    }\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"unsupported network\", \"network\", name);\r\n}\r\nfunction getHost(name) {\r\n    switch (name) {\r\n        case \"mainnet\":\r\n            return \"ethereum-mainnet.core.chainstack.com\";\r\n        case \"arbitrum\":\r\n            return \"arbitrum-mainnet.core.chainstack.com\";\r\n        case \"bnb\":\r\n            return \"bsc-mainnet.core.chainstack.com\";\r\n        case \"matic\":\r\n            return \"polygon-mainnet.core.chainstack.com\";\r\n    }\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"unsupported network\", \"network\", name);\r\n}\r\n/**\r\n *  The **ChainstackProvider** connects to the [[link-chainstack]]\r\n *  JSON-RPC end-points.\r\n *\r\n *  By default, a highly-throttled API key is used, which is\r\n *  appropriate for quick prototypes and simple scripts. To\r\n *  gain access to an increased rate-limit, it is highly\r\n *  recommended to [sign up here](link-chainstack).\r\n */\r\nclass ChainstackProvider extends _provider_jsonrpc_js__WEBPACK_IMPORTED_MODULE_1__.JsonRpcProvider {\r\n    /**\r\n     *  The API key for the Chainstack connection.\r\n     */\r\n    apiKey;\r\n    /**\r\n     *  Creates a new **ChainstackProvider**.\r\n     */\r\n    constructor(_network, apiKey) {\r\n        if (_network == null) {\r\n            _network = \"mainnet\";\r\n        }\r\n        const network = _network_js__WEBPACK_IMPORTED_MODULE_2__.Network.from(_network);\r\n        if (apiKey == null) {\r\n            apiKey = getApiKey(network.name);\r\n        }\r\n        const request = ChainstackProvider.getRequest(network, apiKey);\r\n        super(request, network, { staticNetwork: network });\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, { apiKey });\r\n    }\r\n    _getProvider(chainId) {\r\n        try {\r\n            return new ChainstackProvider(chainId, this.apiKey);\r\n        }\r\n        catch (error) { }\r\n        return super._getProvider(chainId);\r\n    }\r\n    isCommunityResource() {\r\n        return (this.apiKey === getApiKey(this._network.name));\r\n    }\r\n    /**\r\n     *  Returns a prepared request for connecting to %%network%%\r\n     *  with %%apiKey%% and %%projectSecret%%.\r\n     */\r\n    static getRequest(network, apiKey) {\r\n        if (apiKey == null) {\r\n            apiKey = getApiKey(network.name);\r\n        }\r\n        const request = new _utils_index_js__WEBPACK_IMPORTED_MODULE_0__.FetchRequest(`https:/\\/${getHost(network.name)}/${apiKey}`);\r\n        request.allowGzip = true;\r\n        if (apiKey === getApiKey(network.name)) {\r\n            request.retryFunc = async (request, response, attempt) => {\r\n                (0,_community_js__WEBPACK_IMPORTED_MODULE_3__.showThrottleMessage)(\"ChainstackProvider\");\r\n                return true;\r\n            };\r\n        }\r\n        return request;\r\n    }\r\n}\r\n//# sourceMappingURL=provider-chainstack.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9wcm92aWRlcnMvcHJvdmlkZXItY2hhaW5zdGFjay5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ21GO0FBQzlCO0FBQ2Q7QUFDaUI7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLCtEQUFjO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksK0RBQWM7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxpQ0FBaUMsaUVBQWU7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnREFBTztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyx3QkFBd0I7QUFDMUQsUUFBUSxpRUFBZ0IsU0FBUyxRQUFRO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLHlEQUFZLGFBQWEsc0JBQXNCLEdBQUcsT0FBTztBQUNyRjtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isa0VBQW1CO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJEOlxcRG9fYW4yXFxsZW5kaHViX3YyXFxsZW5kaHViLWZyb250ZW5kLW5leHRqc1xcbm9kZV9tb2R1bGVzXFxldGhlcnNcXGxpYi5lc21cXHByb3ZpZGVyc1xccHJvdmlkZXItY2hhaW5zdGFjay5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogIFtbbGluay1jaGFpbnN0YWNrXV0gcHJvdmlkZXMgYSB0aGlyZC1wYXJ0eSBzZXJ2aWNlIGZvciBjb25uZWN0aW5nIHRvXHJcbiAqICB2YXJpb3VzIGJsb2NrY2hhaW5zIG92ZXIgSlNPTi1SUEMuXHJcbiAqXHJcbiAqICAqKlN1cHBvcnRlZCBOZXR3b3JrcyoqXHJcbiAqXHJcbiAqICAtIEV0aGVyZXVtIE1haW5uZXQgKGBgbWFpbm5ldGBgKVxyXG4gKiAgLSBBcmJpdHJ1bSAoYGBhcmJpdHJ1bWBgKVxyXG4gKiAgLSBCTkIgU21hcnQgQ2hhaW4gTWFpbm5ldCAoYGBibmJgYClcclxuICogIC0gUG9seWdvbiAoYGBtYXRpY2BgKVxyXG4gKlxyXG4gKiAgQF9zdWJzZWN0aW9uOiBhcGkvcHJvdmlkZXJzL3RoaXJkcGFydHk6Q2hhaW5zdGFjayAgW3Byb3ZpZGVycy1jaGFpbnN0YWNrXVxyXG4gKi9cclxuaW1wb3J0IHsgZGVmaW5lUHJvcGVydGllcywgRmV0Y2hSZXF1ZXN0LCBhc3NlcnRBcmd1bWVudCB9IGZyb20gXCIuLi91dGlscy9pbmRleC5qc1wiO1xyXG5pbXBvcnQgeyBzaG93VGhyb3R0bGVNZXNzYWdlIH0gZnJvbSBcIi4vY29tbXVuaXR5LmpzXCI7XHJcbmltcG9ydCB7IE5ldHdvcmsgfSBmcm9tIFwiLi9uZXR3b3JrLmpzXCI7XHJcbmltcG9ydCB7IEpzb25ScGNQcm92aWRlciB9IGZyb20gXCIuL3Byb3ZpZGVyLWpzb25ycGMuanNcIjtcclxuZnVuY3Rpb24gZ2V0QXBpS2V5KG5hbWUpIHtcclxuICAgIHN3aXRjaCAobmFtZSkge1xyXG4gICAgICAgIGNhc2UgXCJtYWlubmV0XCI6IHJldHVybiBcIjM5ZjFkNjdjZWRmOGI3ODMxMDEwYTY2NTMyOGM5MTk3XCI7XHJcbiAgICAgICAgY2FzZSBcImFyYml0cnVtXCI6IHJldHVybiBcIjA1NTBjMjA5ZGIzM2MzYWJmNGNjOTI3ZTFlMThjZWExXCI7XHJcbiAgICAgICAgY2FzZSBcImJuYlwiOiByZXR1cm4gXCI5OGI1YTc3ZTUzMTYxNDM4NzM2NmY2ZmM1ZGEwOTdmOFwiO1xyXG4gICAgICAgIGNhc2UgXCJtYXRpY1wiOiByZXR1cm4gXCJjZDlkNGQ3MDM3NzQ3MWFhN2MxNDJlYzRhNDIwNTI0OVwiO1xyXG4gICAgfVxyXG4gICAgYXNzZXJ0QXJndW1lbnQoZmFsc2UsIFwidW5zdXBwb3J0ZWQgbmV0d29ya1wiLCBcIm5ldHdvcmtcIiwgbmFtZSk7XHJcbn1cclxuZnVuY3Rpb24gZ2V0SG9zdChuYW1lKSB7XHJcbiAgICBzd2l0Y2ggKG5hbWUpIHtcclxuICAgICAgICBjYXNlIFwibWFpbm5ldFwiOlxyXG4gICAgICAgICAgICByZXR1cm4gXCJldGhlcmV1bS1tYWlubmV0LmNvcmUuY2hhaW5zdGFjay5jb21cIjtcclxuICAgICAgICBjYXNlIFwiYXJiaXRydW1cIjpcclxuICAgICAgICAgICAgcmV0dXJuIFwiYXJiaXRydW0tbWFpbm5ldC5jb3JlLmNoYWluc3RhY2suY29tXCI7XHJcbiAgICAgICAgY2FzZSBcImJuYlwiOlxyXG4gICAgICAgICAgICByZXR1cm4gXCJic2MtbWFpbm5ldC5jb3JlLmNoYWluc3RhY2suY29tXCI7XHJcbiAgICAgICAgY2FzZSBcIm1hdGljXCI6XHJcbiAgICAgICAgICAgIHJldHVybiBcInBvbHlnb24tbWFpbm5ldC5jb3JlLmNoYWluc3RhY2suY29tXCI7XHJcbiAgICB9XHJcbiAgICBhc3NlcnRBcmd1bWVudChmYWxzZSwgXCJ1bnN1cHBvcnRlZCBuZXR3b3JrXCIsIFwibmV0d29ya1wiLCBuYW1lKTtcclxufVxyXG4vKipcclxuICogIFRoZSAqKkNoYWluc3RhY2tQcm92aWRlcioqIGNvbm5lY3RzIHRvIHRoZSBbW2xpbmstY2hhaW5zdGFja11dXHJcbiAqICBKU09OLVJQQyBlbmQtcG9pbnRzLlxyXG4gKlxyXG4gKiAgQnkgZGVmYXVsdCwgYSBoaWdobHktdGhyb3R0bGVkIEFQSSBrZXkgaXMgdXNlZCwgd2hpY2ggaXNcclxuICogIGFwcHJvcHJpYXRlIGZvciBxdWljayBwcm90b3R5cGVzIGFuZCBzaW1wbGUgc2NyaXB0cy4gVG9cclxuICogIGdhaW4gYWNjZXNzIHRvIGFuIGluY3JlYXNlZCByYXRlLWxpbWl0LCBpdCBpcyBoaWdobHlcclxuICogIHJlY29tbWVuZGVkIHRvIFtzaWduIHVwIGhlcmVdKGxpbmstY2hhaW5zdGFjaykuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ2hhaW5zdGFja1Byb3ZpZGVyIGV4dGVuZHMgSnNvblJwY1Byb3ZpZGVyIHtcclxuICAgIC8qKlxyXG4gICAgICogIFRoZSBBUEkga2V5IGZvciB0aGUgQ2hhaW5zdGFjayBjb25uZWN0aW9uLlxyXG4gICAgICovXHJcbiAgICBhcGlLZXk7XHJcbiAgICAvKipcclxuICAgICAqICBDcmVhdGVzIGEgbmV3ICoqQ2hhaW5zdGFja1Byb3ZpZGVyKiouXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKF9uZXR3b3JrLCBhcGlLZXkpIHtcclxuICAgICAgICBpZiAoX25ldHdvcmsgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBfbmV0d29yayA9IFwibWFpbm5ldFwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBuZXR3b3JrID0gTmV0d29yay5mcm9tKF9uZXR3b3JrKTtcclxuICAgICAgICBpZiAoYXBpS2V5ID09IG51bGwpIHtcclxuICAgICAgICAgICAgYXBpS2V5ID0gZ2V0QXBpS2V5KG5ldHdvcmsubmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSBDaGFpbnN0YWNrUHJvdmlkZXIuZ2V0UmVxdWVzdChuZXR3b3JrLCBhcGlLZXkpO1xyXG4gICAgICAgIHN1cGVyKHJlcXVlc3QsIG5ldHdvcmssIHsgc3RhdGljTmV0d29yazogbmV0d29yayB9KTtcclxuICAgICAgICBkZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHsgYXBpS2V5IH0pO1xyXG4gICAgfVxyXG4gICAgX2dldFByb3ZpZGVyKGNoYWluSWQpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IENoYWluc3RhY2tQcm92aWRlcihjaGFpbklkLCB0aGlzLmFwaUtleSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlcnJvcikgeyB9XHJcbiAgICAgICAgcmV0dXJuIHN1cGVyLl9nZXRQcm92aWRlcihjaGFpbklkKTtcclxuICAgIH1cclxuICAgIGlzQ29tbXVuaXR5UmVzb3VyY2UoKSB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLmFwaUtleSA9PT0gZ2V0QXBpS2V5KHRoaXMuX25ldHdvcmsubmFtZSkpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgUmV0dXJucyBhIHByZXBhcmVkIHJlcXVlc3QgZm9yIGNvbm5lY3RpbmcgdG8gJSVuZXR3b3JrJSVcclxuICAgICAqICB3aXRoICUlYXBpS2V5JSUgYW5kICUlcHJvamVjdFNlY3JldCUlLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZ2V0UmVxdWVzdChuZXR3b3JrLCBhcGlLZXkpIHtcclxuICAgICAgICBpZiAoYXBpS2V5ID09IG51bGwpIHtcclxuICAgICAgICAgICAgYXBpS2V5ID0gZ2V0QXBpS2V5KG5ldHdvcmsubmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgRmV0Y2hSZXF1ZXN0KGBodHRwczovXFwvJHtnZXRIb3N0KG5ldHdvcmsubmFtZSl9LyR7YXBpS2V5fWApO1xyXG4gICAgICAgIHJlcXVlc3QuYWxsb3dHemlwID0gdHJ1ZTtcclxuICAgICAgICBpZiAoYXBpS2V5ID09PSBnZXRBcGlLZXkobmV0d29yay5uYW1lKSkge1xyXG4gICAgICAgICAgICByZXF1ZXN0LnJldHJ5RnVuYyA9IGFzeW5jIChyZXF1ZXN0LCByZXNwb25zZSwgYXR0ZW1wdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgc2hvd1Rocm90dGxlTWVzc2FnZShcIkNoYWluc3RhY2tQcm92aWRlclwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVxdWVzdDtcclxuICAgIH1cclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm92aWRlci1jaGFpbnN0YWNrLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-chainstack.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-cloudflare.js":
/*!**********************************************************************!*\
  !*** ./node_modules/ethers/lib.esm/providers/provider-cloudflare.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CloudflareProvider: () => (/* binding */ CloudflareProvider)\n/* harmony export */ });\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/* harmony import */ var _network_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./network.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/network.js\");\n/* harmony import */ var _provider_jsonrpc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./provider-jsonrpc.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-jsonrpc.js\");\n/**\r\n *  About Cloudflare\r\n *\r\n *  @_subsection: api/providers/thirdparty:Cloudflare  [providers-cloudflare]\r\n */\r\n\r\n\r\n\r\n/**\r\n *  About Cloudflare...\r\n */\r\nclass CloudflareProvider extends _provider_jsonrpc_js__WEBPACK_IMPORTED_MODULE_0__.JsonRpcProvider {\r\n    constructor(_network) {\r\n        if (_network == null) {\r\n            _network = \"mainnet\";\r\n        }\r\n        const network = _network_js__WEBPACK_IMPORTED_MODULE_1__.Network.from(_network);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(network.name === \"mainnet\", \"unsupported network\", \"network\", _network);\r\n        super(\"https:/\\/cloudflare-eth.com/\", network, { staticNetwork: network });\r\n    }\r\n}\r\n//# sourceMappingURL=provider-cloudflare.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9wcm92aWRlcnMvcHJvdmlkZXItY2xvdWRmbGFyZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNtRDtBQUNaO0FBQ2lCO0FBQ3hEO0FBQ0E7QUFDQTtBQUNPLGlDQUFpQyxpRUFBZTtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnREFBTztBQUMvQixRQUFRLCtEQUFjO0FBQ3RCLHlEQUF5RCx3QkFBd0I7QUFDakY7QUFDQTtBQUNBIiwic291cmNlcyI6WyJEOlxcRG9fYW4yXFxsZW5kaHViX3YyXFxsZW5kaHViLWZyb250ZW5kLW5leHRqc1xcbm9kZV9tb2R1bGVzXFxldGhlcnNcXGxpYi5lc21cXHByb3ZpZGVyc1xccHJvdmlkZXItY2xvdWRmbGFyZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogIEFib3V0IENsb3VkZmxhcmVcclxuICpcclxuICogIEBfc3Vic2VjdGlvbjogYXBpL3Byb3ZpZGVycy90aGlyZHBhcnR5OkNsb3VkZmxhcmUgIFtwcm92aWRlcnMtY2xvdWRmbGFyZV1cclxuICovXHJcbmltcG9ydCB7IGFzc2VydEFyZ3VtZW50IH0gZnJvbSBcIi4uL3V0aWxzL2luZGV4LmpzXCI7XHJcbmltcG9ydCB7IE5ldHdvcmsgfSBmcm9tIFwiLi9uZXR3b3JrLmpzXCI7XHJcbmltcG9ydCB7IEpzb25ScGNQcm92aWRlciB9IGZyb20gXCIuL3Byb3ZpZGVyLWpzb25ycGMuanNcIjtcclxuLyoqXHJcbiAqICBBYm91dCBDbG91ZGZsYXJlLi4uXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ2xvdWRmbGFyZVByb3ZpZGVyIGV4dGVuZHMgSnNvblJwY1Byb3ZpZGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKF9uZXR3b3JrKSB7XHJcbiAgICAgICAgaWYgKF9uZXR3b3JrID09IG51bGwpIHtcclxuICAgICAgICAgICAgX25ldHdvcmsgPSBcIm1haW5uZXRcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgbmV0d29yayA9IE5ldHdvcmsuZnJvbShfbmV0d29yayk7XHJcbiAgICAgICAgYXNzZXJ0QXJndW1lbnQobmV0d29yay5uYW1lID09PSBcIm1haW5uZXRcIiwgXCJ1bnN1cHBvcnRlZCBuZXR3b3JrXCIsIFwibmV0d29ya1wiLCBfbmV0d29yayk7XHJcbiAgICAgICAgc3VwZXIoXCJodHRwczovXFwvY2xvdWRmbGFyZS1ldGguY29tL1wiLCBuZXR3b3JrLCB7IHN0YXRpY05ldHdvcms6IG5ldHdvcmsgfSk7XHJcbiAgICB9XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvdmlkZXItY2xvdWRmbGFyZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-cloudflare.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-etherscan.js":
/*!*********************************************************************!*\
  !*** ./node_modules/ethers/lib.esm/providers/provider-etherscan.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EtherscanPlugin: () => (/* binding */ EtherscanPlugin),\n/* harmony export */   EtherscanProvider: () => (/* binding */ EtherscanProvider)\n/* harmony export */ });\n/* harmony import */ var _abi_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../abi/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/index.js\");\n/* harmony import */ var _contract_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../contract/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/contract/index.js\");\n/* harmony import */ var _transaction_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../transaction/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/transaction/index.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/* harmony import */ var _abstract_provider_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./abstract-provider.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/abstract-provider.js\");\n/* harmony import */ var _network_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./network.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/network.js\");\n/* harmony import */ var _plugins_network_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./plugins-network.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/plugins-network.js\");\n/* harmony import */ var _community_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./community.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/community.js\");\n/**\r\n *  [[link-etherscan]] provides a third-party service for connecting to\r\n *  various blockchains over a combination of JSON-RPC and custom API\r\n *  endpoints.\r\n *\r\n *  **Supported Networks**\r\n *\r\n *  - Ethereum Mainnet (``mainnet``)\r\n *  - Goerli Testnet (``goerli``)\r\n *  - Sepolia Testnet (``sepolia``)\r\n *  - Holesky Testnet (``holesky``)\r\n *  - Arbitrum (``arbitrum``)\r\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\r\n *  - Base (``base``)\r\n *  - Base Sepolia Testnet (``base-sepolia``)\r\n *  - BNB Smart Chain Mainnet (``bnb``)\r\n *  - BNB Smart Chain Testnet (``bnbt``)\r\n *  - Optimism (``optimism``)\r\n *  - Optimism Goerli Testnet (``optimism-goerli``)\r\n *  - Polygon (``matic``)\r\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\r\n *  - Polygon Amoy Testnet (``matic-amoy``)\r\n *\r\n *  @_subsection api/providers/thirdparty:Etherscan  [providers-etherscan]\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst THROTTLE = 2000;\r\nfunction isPromise(value) {\r\n    return (value && typeof (value.then) === \"function\");\r\n}\r\nconst EtherscanPluginId = \"org.ethers.plugins.provider.Etherscan\";\r\n/**\r\n *  A Network can include an **EtherscanPlugin** to provide\r\n *  a custom base URL.\r\n *\r\n *  @_docloc: api/providers/thirdparty:Etherscan\r\n */\r\nclass EtherscanPlugin extends _plugins_network_js__WEBPACK_IMPORTED_MODULE_0__.NetworkPlugin {\r\n    /**\r\n     *  The Etherscan API base URL.\r\n     */\r\n    baseUrl;\r\n    /**\r\n     *  Creates a new **EtherscanProvider** which will use\r\n     *  %%baseUrl%%.\r\n     */\r\n    constructor(baseUrl) {\r\n        super(EtherscanPluginId);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.defineProperties)(this, { baseUrl });\r\n    }\r\n    clone() {\r\n        return new EtherscanPlugin(this.baseUrl);\r\n    }\r\n}\r\nconst skipKeys = [\"enableCcipRead\"];\r\nlet nextId = 1;\r\n/**\r\n *  The **EtherscanBaseProvider** is the super-class of\r\n *  [[EtherscanProvider]], which should generally be used instead.\r\n *\r\n *  Since the **EtherscanProvider** includes additional code for\r\n *  [[Contract]] access, in //rare cases// that contracts are not\r\n *  used, this class can reduce code size.\r\n *\r\n *  @_docloc: api/providers/thirdparty:Etherscan\r\n */\r\nclass EtherscanProvider extends _abstract_provider_js__WEBPACK_IMPORTED_MODULE_2__.AbstractProvider {\r\n    /**\r\n     *  The connected network.\r\n     */\r\n    network;\r\n    /**\r\n     *  The API key or null if using the community provided bandwidth.\r\n     */\r\n    apiKey;\r\n    #plugin;\r\n    /**\r\n     *  Creates a new **EtherscanBaseProvider**.\r\n     */\r\n    constructor(_network, _apiKey) {\r\n        const apiKey = (_apiKey != null) ? _apiKey : null;\r\n        super();\r\n        const network = _network_js__WEBPACK_IMPORTED_MODULE_3__.Network.from(_network);\r\n        this.#plugin = network.getPlugin(EtherscanPluginId);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.defineProperties)(this, { apiKey, network });\r\n    }\r\n    /**\r\n     *  Returns the base URL.\r\n     *\r\n     *  If an [[EtherscanPlugin]] is configured on the\r\n     *  [[EtherscanBaseProvider_network]], returns the plugin's\r\n     *  baseUrl.\r\n     *\r\n     *  Deprecated; for Etherscan v2 the base is no longer a simply\r\n     *  host, but instead a URL including a chainId parameter. Changing\r\n     *  this to return a URL prefix could break some libraries, so it\r\n     *  is left intact but will be removed in the future as it is unused.\r\n     */\r\n    getBaseUrl() {\r\n        if (this.#plugin) {\r\n            return this.#plugin.baseUrl;\r\n        }\r\n        switch (this.network.name) {\r\n            case \"mainnet\":\r\n                return \"https:/\\/api.etherscan.io\";\r\n            case \"goerli\":\r\n                return \"https:/\\/api-goerli.etherscan.io\";\r\n            case \"sepolia\":\r\n                return \"https:/\\/api-sepolia.etherscan.io\";\r\n            case \"holesky\":\r\n                return \"https:/\\/api-holesky.etherscan.io\";\r\n            case \"arbitrum\":\r\n                return \"https:/\\/api.arbiscan.io\";\r\n            case \"arbitrum-goerli\":\r\n                return \"https:/\\/api-goerli.arbiscan.io\";\r\n            case \"base\":\r\n                return \"https:/\\/api.basescan.org\";\r\n            case \"base-sepolia\":\r\n                return \"https:/\\/api-sepolia.basescan.org\";\r\n            case \"bnb\":\r\n                return \"https:/\\/api.bscscan.com\";\r\n            case \"bnbt\":\r\n                return \"https:/\\/api-testnet.bscscan.com\";\r\n            case \"matic\":\r\n                return \"https:/\\/api.polygonscan.com\";\r\n            case \"matic-amoy\":\r\n                return \"https:/\\/api-amoy.polygonscan.com\";\r\n            case \"matic-mumbai\":\r\n                return \"https:/\\/api-testnet.polygonscan.com\";\r\n            case \"optimism\":\r\n                return \"https:/\\/api-optimistic.etherscan.io\";\r\n            case \"optimism-goerli\":\r\n                return \"https:/\\/api-goerli-optimistic.etherscan.io\";\r\n            default:\r\n        }\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(false, \"unsupported network\", \"network\", this.network);\r\n    }\r\n    /**\r\n     *  Returns the URL for the %%module%% and %%params%%.\r\n     */\r\n    getUrl(module, params) {\r\n        let query = Object.keys(params).reduce((accum, key) => {\r\n            const value = params[key];\r\n            if (value != null) {\r\n                accum += `&${key}=${value}`;\r\n            }\r\n            return accum;\r\n        }, \"\");\r\n        if (this.apiKey) {\r\n            query += `&apikey=${this.apiKey}`;\r\n        }\r\n        return `https:/\\/api.etherscan.io/v2/api?chainid=${this.network.chainId}&module=${module}${query}`;\r\n    }\r\n    /**\r\n     *  Returns the URL for using POST requests.\r\n     */\r\n    getPostUrl() {\r\n        return `https:/\\/api.etherscan.io/v2/api?chainid=${this.network.chainId}`;\r\n    }\r\n    /**\r\n     *  Returns the parameters for using POST requests.\r\n     */\r\n    getPostData(module, params) {\r\n        params.module = module;\r\n        params.apikey = this.apiKey;\r\n        params.chainid = this.network.chainId;\r\n        return params;\r\n    }\r\n    async detectNetwork() {\r\n        return this.network;\r\n    }\r\n    /**\r\n     *  Resolves to the result of calling %%module%% with %%params%%.\r\n     *\r\n     *  If %%post%%, the request is made as a POST request.\r\n     */\r\n    async fetch(module, params, post) {\r\n        const id = nextId++;\r\n        const url = (post ? this.getPostUrl() : this.getUrl(module, params));\r\n        const payload = (post ? this.getPostData(module, params) : null);\r\n        this.emit(\"debug\", { action: \"sendRequest\", id, url, payload: payload });\r\n        const request = new _utils_index_js__WEBPACK_IMPORTED_MODULE_1__.FetchRequest(url);\r\n        request.setThrottleParams({ slotInterval: 1000 });\r\n        request.retryFunc = (req, resp, attempt) => {\r\n            if (this.isCommunityResource()) {\r\n                (0,_community_js__WEBPACK_IMPORTED_MODULE_4__.showThrottleMessage)(\"Etherscan\");\r\n            }\r\n            return Promise.resolve(true);\r\n        };\r\n        request.processFunc = async (request, response) => {\r\n            const result = response.hasBody() ? JSON.parse((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.toUtf8String)(response.body)) : {};\r\n            const throttle = ((typeof (result.result) === \"string\") ? result.result : \"\").toLowerCase().indexOf(\"rate limit\") >= 0;\r\n            if (module === \"proxy\") {\r\n                // This JSON response indicates we are being throttled\r\n                if (result && result.status == 0 && result.message == \"NOTOK\" && throttle) {\r\n                    this.emit(\"debug\", { action: \"receiveError\", id, reason: \"proxy-NOTOK\", error: result });\r\n                    response.throwThrottleError(result.result, THROTTLE);\r\n                }\r\n            }\r\n            else {\r\n                if (throttle) {\r\n                    this.emit(\"debug\", { action: \"receiveError\", id, reason: \"null result\", error: result.result });\r\n                    response.throwThrottleError(result.result, THROTTLE);\r\n                }\r\n            }\r\n            return response;\r\n        };\r\n        if (payload) {\r\n            request.setHeader(\"content-type\", \"application/x-www-form-urlencoded; charset=UTF-8\");\r\n            request.body = Object.keys(payload).map((k) => `${k}=${payload[k]}`).join(\"&\");\r\n        }\r\n        const response = await request.send();\r\n        try {\r\n            response.assertOk();\r\n        }\r\n        catch (error) {\r\n            this.emit(\"debug\", { action: \"receiveError\", id, error, reason: \"assertOk\" });\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assert)(false, \"response error\", \"SERVER_ERROR\", { request, response });\r\n        }\r\n        if (!response.hasBody()) {\r\n            this.emit(\"debug\", { action: \"receiveError\", id, error: \"missing body\", reason: \"null body\" });\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assert)(false, \"missing response\", \"SERVER_ERROR\", { request, response });\r\n        }\r\n        const result = JSON.parse((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.toUtf8String)(response.body));\r\n        if (module === \"proxy\") {\r\n            if (result.jsonrpc != \"2.0\") {\r\n                this.emit(\"debug\", { action: \"receiveError\", id, result, reason: \"invalid JSON-RPC\" });\r\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assert)(false, \"invalid JSON-RPC response (missing jsonrpc='2.0')\", \"SERVER_ERROR\", { request, response, info: { result } });\r\n            }\r\n            if (result.error) {\r\n                this.emit(\"debug\", { action: \"receiveError\", id, result, reason: \"JSON-RPC error\" });\r\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assert)(false, \"error response\", \"SERVER_ERROR\", { request, response, info: { result } });\r\n            }\r\n            this.emit(\"debug\", { action: \"receiveRequest\", id, result });\r\n            return result.result;\r\n        }\r\n        else {\r\n            // getLogs, getHistory have weird success responses\r\n            if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\r\n                this.emit(\"debug\", { action: \"receiveRequest\", id, result });\r\n                return result.result;\r\n            }\r\n            if (result.status != 1 || (typeof (result.message) === \"string\" && !result.message.match(/^OK/))) {\r\n                this.emit(\"debug\", { action: \"receiveError\", id, result });\r\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assert)(false, \"error response\", \"SERVER_ERROR\", { request, response, info: { result } });\r\n            }\r\n            this.emit(\"debug\", { action: \"receiveRequest\", id, result });\r\n            return result.result;\r\n        }\r\n    }\r\n    /**\r\n     *  Returns %%transaction%% normalized for the Etherscan API.\r\n     */\r\n    _getTransactionPostData(transaction) {\r\n        const result = {};\r\n        for (let key in transaction) {\r\n            if (skipKeys.indexOf(key) >= 0) {\r\n                continue;\r\n            }\r\n            if (transaction[key] == null) {\r\n                continue;\r\n            }\r\n            let value = transaction[key];\r\n            if (key === \"type\" && value === 0) {\r\n                continue;\r\n            }\r\n            if (key === \"blockTag\" && value === \"latest\") {\r\n                continue;\r\n            }\r\n            // Quantity-types require no leading zero, unless 0\r\n            if ({ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true }[key]) {\r\n                value = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.toQuantity)(value);\r\n            }\r\n            else if (key === \"accessList\") {\r\n                value = \"[\" + (0,_transaction_index_js__WEBPACK_IMPORTED_MODULE_5__.accessListify)(value).map((set) => {\r\n                    return `{address:\"${set.address}\",storageKeys:[\"${set.storageKeys.join('\",\"')}\"]}`;\r\n                }).join(\",\") + \"]\";\r\n            }\r\n            else if (key === \"blobVersionedHashes\") {\r\n                if (value.length === 0) {\r\n                    continue;\r\n                }\r\n                // @TODO: update this once the API supports blobs\r\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assert)(false, \"Etherscan API does not support blobVersionedHashes\", \"UNSUPPORTED_OPERATION\", {\r\n                    operation: \"_getTransactionPostData\",\r\n                    info: { transaction }\r\n                });\r\n            }\r\n            else {\r\n                value = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.hexlify)(value);\r\n            }\r\n            result[key] = value;\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     *  Throws the normalized Etherscan error.\r\n     */\r\n    _checkError(req, error, transaction) {\r\n        // Pull any message out if, possible\r\n        let message = \"\";\r\n        if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.isError)(error, \"SERVER_ERROR\")) {\r\n            // Check for an error emitted by a proxy call\r\n            try {\r\n                message = error.info.result.error.message;\r\n            }\r\n            catch (e) { }\r\n            if (!message) {\r\n                try {\r\n                    message = error.info.message;\r\n                }\r\n                catch (e) { }\r\n            }\r\n        }\r\n        if (req.method === \"estimateGas\") {\r\n            if (!message.match(/revert/i) && message.match(/insufficient funds/i)) {\r\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assert)(false, \"insufficient funds\", \"INSUFFICIENT_FUNDS\", {\r\n                    transaction: req.transaction\r\n                });\r\n            }\r\n        }\r\n        if (req.method === \"call\" || req.method === \"estimateGas\") {\r\n            if (message.match(/execution reverted/i)) {\r\n                let data = \"\";\r\n                try {\r\n                    data = error.info.result.error.data;\r\n                }\r\n                catch (error) { }\r\n                const e = _abi_index_js__WEBPACK_IMPORTED_MODULE_6__.AbiCoder.getBuiltinCallException(req.method, req.transaction, data);\r\n                e.info = { request: req, error };\r\n                throw e;\r\n            }\r\n        }\r\n        if (message) {\r\n            if (req.method === \"broadcastTransaction\") {\r\n                const transaction = _transaction_index_js__WEBPACK_IMPORTED_MODULE_5__.Transaction.from(req.signedTransaction);\r\n                if (message.match(/replacement/i) && message.match(/underpriced/i)) {\r\n                    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assert)(false, \"replacement fee too low\", \"REPLACEMENT_UNDERPRICED\", {\r\n                        transaction\r\n                    });\r\n                }\r\n                if (message.match(/insufficient funds/)) {\r\n                    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assert)(false, \"insufficient funds for intrinsic transaction cost\", \"INSUFFICIENT_FUNDS\", {\r\n                        transaction\r\n                    });\r\n                }\r\n                if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {\r\n                    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assert)(false, \"nonce has already been used\", \"NONCE_EXPIRED\", {\r\n                        transaction\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        // Something we could not process\r\n        throw error;\r\n    }\r\n    async _detectNetwork() {\r\n        return this.network;\r\n    }\r\n    async _perform(req) {\r\n        switch (req.method) {\r\n            case \"chainId\":\r\n                return this.network.chainId;\r\n            case \"getBlockNumber\":\r\n                return this.fetch(\"proxy\", { action: \"eth_blockNumber\" });\r\n            case \"getGasPrice\":\r\n                return this.fetch(\"proxy\", { action: \"eth_gasPrice\" });\r\n            case \"getPriorityFee\":\r\n                // This is temporary until Etherscan completes support\r\n                if (this.network.name === \"mainnet\") {\r\n                    return \"1000000000\";\r\n                }\r\n                else if (this.network.name === \"optimism\") {\r\n                    return \"1000000\";\r\n                }\r\n                else {\r\n                    throw new Error(\"fallback onto the AbstractProvider default\");\r\n                }\r\n            /* Working with Etherscan to get this added:\r\n            try {\r\n                const test = await this.fetch(\"proxy\", {\r\n                    action: \"eth_maxPriorityFeePerGas\"\r\n                });\r\n                console.log(test);\r\n                return test;\r\n            } catch (e) {\r\n                console.log(\"DEBUG\", e);\r\n                throw e;\r\n            }\r\n            */\r\n            /* This might be safe; but due to rounding neither myself\r\n               or Etherscan are necessarily comfortable with this. :)\r\n            try {\r\n                const result = await this.fetch(\"gastracker\", { action: \"gasoracle\" });\r\n                console.log(result);\r\n                const gasPrice = parseUnits(result.SafeGasPrice, \"gwei\");\r\n                const baseFee = parseUnits(result.suggestBaseFee, \"gwei\");\r\n                const priorityFee = gasPrice - baseFee;\r\n                if (priorityFee < 0) { throw new Error(\"negative priority fee; defer to abstract provider default\"); }\r\n                return priorityFee;\r\n            } catch (error) {\r\n                console.log(\"DEBUG\", error);\r\n                throw error;\r\n            }\r\n            */\r\n            case \"getBalance\":\r\n                // Returns base-10 result\r\n                return this.fetch(\"account\", {\r\n                    action: \"balance\",\r\n                    address: req.address,\r\n                    tag: req.blockTag\r\n                });\r\n            case \"getTransactionCount\":\r\n                return this.fetch(\"proxy\", {\r\n                    action: \"eth_getTransactionCount\",\r\n                    address: req.address,\r\n                    tag: req.blockTag\r\n                });\r\n            case \"getCode\":\r\n                return this.fetch(\"proxy\", {\r\n                    action: \"eth_getCode\",\r\n                    address: req.address,\r\n                    tag: req.blockTag\r\n                });\r\n            case \"getStorage\":\r\n                return this.fetch(\"proxy\", {\r\n                    action: \"eth_getStorageAt\",\r\n                    address: req.address,\r\n                    position: req.position,\r\n                    tag: req.blockTag\r\n                });\r\n            case \"broadcastTransaction\":\r\n                return this.fetch(\"proxy\", {\r\n                    action: \"eth_sendRawTransaction\",\r\n                    hex: req.signedTransaction\r\n                }, true).catch((error) => {\r\n                    return this._checkError(req, error, req.signedTransaction);\r\n                });\r\n            case \"getBlock\":\r\n                if (\"blockTag\" in req) {\r\n                    return this.fetch(\"proxy\", {\r\n                        action: \"eth_getBlockByNumber\",\r\n                        tag: req.blockTag,\r\n                        boolean: (req.includeTransactions ? \"true\" : \"false\")\r\n                    });\r\n                }\r\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assert)(false, \"getBlock by blockHash not supported by Etherscan\", \"UNSUPPORTED_OPERATION\", {\r\n                    operation: \"getBlock(blockHash)\"\r\n                });\r\n            case \"getTransaction\":\r\n                return this.fetch(\"proxy\", {\r\n                    action: \"eth_getTransactionByHash\",\r\n                    txhash: req.hash\r\n                });\r\n            case \"getTransactionReceipt\":\r\n                return this.fetch(\"proxy\", {\r\n                    action: \"eth_getTransactionReceipt\",\r\n                    txhash: req.hash\r\n                });\r\n            case \"call\": {\r\n                if (req.blockTag !== \"latest\") {\r\n                    throw new Error(\"EtherscanProvider does not support blockTag for call\");\r\n                }\r\n                const postData = this._getTransactionPostData(req.transaction);\r\n                postData.module = \"proxy\";\r\n                postData.action = \"eth_call\";\r\n                try {\r\n                    return await this.fetch(\"proxy\", postData, true);\r\n                }\r\n                catch (error) {\r\n                    return this._checkError(req, error, req.transaction);\r\n                }\r\n            }\r\n            case \"estimateGas\": {\r\n                const postData = this._getTransactionPostData(req.transaction);\r\n                postData.module = \"proxy\";\r\n                postData.action = \"eth_estimateGas\";\r\n                try {\r\n                    return await this.fetch(\"proxy\", postData, true);\r\n                }\r\n                catch (error) {\r\n                    return this._checkError(req, error, req.transaction);\r\n                }\r\n            }\r\n            /*\r\n                        case \"getLogs\": {\r\n                            // Needs to complain if more than one address is passed in\r\n                            const args: Record<string, any> = { action: \"getLogs\" }\r\n            \r\n                            if (params.filter.fromBlock) {\r\n                                args.fromBlock = checkLogTag(params.filter.fromBlock);\r\n                            }\r\n            \r\n                            if (params.filter.toBlock) {\r\n                                args.toBlock = checkLogTag(params.filter.toBlock);\r\n                            }\r\n            \r\n                            if (params.filter.address) {\r\n                                args.address = params.filter.address;\r\n                            }\r\n            \r\n                            // @TODO: We can handle slightly more complicated logs using the logs API\r\n                            if (params.filter.topics && params.filter.topics.length > 0) {\r\n                                if (params.filter.topics.length > 1) {\r\n                                    logger.throwError(\"unsupported topic count\", Logger.Errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });\r\n                                }\r\n                                if (params.filter.topics.length === 1) {\r\n                                    const topic0 = params.filter.topics[0];\r\n                                    if (typeof(topic0) !== \"string\" || topic0.length !== 66) {\r\n                                        logger.throwError(\"unsupported topic format\", Logger.Errors.UNSUPPORTED_OPERATION, { topic0: topic0 });\r\n                                    }\r\n                                    args.topic0 = topic0;\r\n                                }\r\n                            }\r\n            \r\n                            const logs: Array<any> = await this.fetch(\"logs\", args);\r\n            \r\n                            // Cache txHash => blockHash\r\n                            let blocks: { [tag: string]: string } = {};\r\n            \r\n                            // Add any missing blockHash to the logs\r\n                            for (let i = 0; i < logs.length; i++) {\r\n                                const log = logs[i];\r\n                                if (log.blockHash != null) { continue; }\r\n                                if (blocks[log.blockNumber] == null) {\r\n                                    const block = await this.getBlock(log.blockNumber);\r\n                                    if (block) {\r\n                                        blocks[log.blockNumber] = block.hash;\r\n                                    }\r\n                                }\r\n            \r\n                                log.blockHash = blocks[log.blockNumber];\r\n                            }\r\n            \r\n                            return logs;\r\n                        }\r\n            */\r\n            default:\r\n                break;\r\n        }\r\n        return super._perform(req);\r\n    }\r\n    async getNetwork() {\r\n        return this.network;\r\n    }\r\n    /**\r\n     *  Resolves to the current price of ether.\r\n     *\r\n     *  This returns ``0`` on any network other than ``mainnet``.\r\n     */\r\n    async getEtherPrice() {\r\n        if (this.network.name !== \"mainnet\") {\r\n            return 0.0;\r\n        }\r\n        return parseFloat((await this.fetch(\"stats\", { action: \"ethprice\" })).ethusd);\r\n    }\r\n    /**\r\n     *  Resolves to a [Contract]] for %%address%%, using the\r\n     *  Etherscan API to retreive the Contract ABI.\r\n     */\r\n    async getContract(_address) {\r\n        let address = this._getAddress(_address);\r\n        if (isPromise(address)) {\r\n            address = await address;\r\n        }\r\n        try {\r\n            const resp = await this.fetch(\"contract\", {\r\n                action: \"getabi\", address\r\n            });\r\n            const abi = JSON.parse(resp);\r\n            return new _contract_index_js__WEBPACK_IMPORTED_MODULE_7__.Contract(address, abi, this);\r\n        }\r\n        catch (error) {\r\n            return null;\r\n        }\r\n    }\r\n    isCommunityResource() {\r\n        return (this.apiKey == null);\r\n    }\r\n}\r\n//# sourceMappingURL=provider-etherscan.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-etherscan.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-fallback.js":
/*!********************************************************************!*\
  !*** ./node_modules/ethers/lib.esm/providers/provider-fallback.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FallbackProvider: () => (/* binding */ FallbackProvider)\n/* harmony export */ });\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/* harmony import */ var _abstract_provider_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./abstract-provider.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/abstract-provider.js\");\n/* harmony import */ var _network_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./network.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/network.js\");\n/**\r\n *  A **FallbackProvider** provides resilience, security and performance\r\n *  in a way that is customizable and configurable.\r\n *\r\n *  @_section: api/providers/fallback-provider:Fallback Provider [about-fallback-provider]\r\n */\r\n\r\n\r\n\r\nconst BN_1 = BigInt(\"1\");\r\nconst BN_2 = BigInt(\"2\");\r\nfunction shuffle(array) {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        const tmp = array[i];\r\n        array[i] = array[j];\r\n        array[j] = tmp;\r\n    }\r\n}\r\nfunction stall(duration) {\r\n    return new Promise((resolve) => { setTimeout(resolve, duration); });\r\n}\r\nfunction getTime() { return (new Date()).getTime(); }\r\nfunction stringify(value) {\r\n    return JSON.stringify(value, (key, value) => {\r\n        if (typeof (value) === \"bigint\") {\r\n            return { type: \"bigint\", value: value.toString() };\r\n        }\r\n        return value;\r\n    });\r\n}\r\n;\r\nconst defaultConfig = { stallTimeout: 400, priority: 1, weight: 1 };\r\nconst defaultState = {\r\n    blockNumber: -2, requests: 0, lateResponses: 0, errorResponses: 0,\r\n    outOfSync: -1, unsupportedEvents: 0, rollingDuration: 0, score: 0,\r\n    _network: null, _updateNumber: null, _totalTime: 0,\r\n    _lastFatalError: null, _lastFatalErrorTimestamp: 0\r\n};\r\nasync function waitForSync(config, blockNumber) {\r\n    while (config.blockNumber < 0 || config.blockNumber < blockNumber) {\r\n        if (!config._updateNumber) {\r\n            config._updateNumber = (async () => {\r\n                try {\r\n                    const blockNumber = await config.provider.getBlockNumber();\r\n                    if (blockNumber > config.blockNumber) {\r\n                        config.blockNumber = blockNumber;\r\n                    }\r\n                }\r\n                catch (error) {\r\n                    config.blockNumber = -2;\r\n                    config._lastFatalError = error;\r\n                    config._lastFatalErrorTimestamp = getTime();\r\n                }\r\n                config._updateNumber = null;\r\n            })();\r\n        }\r\n        await config._updateNumber;\r\n        config.outOfSync++;\r\n        if (config._lastFatalError) {\r\n            break;\r\n        }\r\n    }\r\n}\r\nfunction _normalize(value) {\r\n    if (value == null) {\r\n        return \"null\";\r\n    }\r\n    if (Array.isArray(value)) {\r\n        return \"[\" + (value.map(_normalize)).join(\",\") + \"]\";\r\n    }\r\n    if (typeof (value) === \"object\" && typeof (value.toJSON) === \"function\") {\r\n        return _normalize(value.toJSON());\r\n    }\r\n    switch (typeof (value)) {\r\n        case \"boolean\":\r\n        case \"symbol\":\r\n            return value.toString();\r\n        case \"bigint\":\r\n        case \"number\":\r\n            return BigInt(value).toString();\r\n        case \"string\":\r\n            return JSON.stringify(value);\r\n        case \"object\": {\r\n            const keys = Object.keys(value);\r\n            keys.sort();\r\n            return \"{\" + keys.map((k) => `${JSON.stringify(k)}:${_normalize(value[k])}`).join(\",\") + \"}\";\r\n        }\r\n    }\r\n    console.log(\"Could not serialize\", value);\r\n    throw new Error(\"Hmm...\");\r\n}\r\nfunction normalizeResult(method, value) {\r\n    if (\"error\" in value) {\r\n        const error = value.error;\r\n        let tag;\r\n        if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isError)(error, \"CALL_EXCEPTION\")) {\r\n            tag = _normalize(Object.assign({}, error, {\r\n                shortMessage: undefined, reason: undefined, info: undefined\r\n            }));\r\n        }\r\n        else {\r\n            tag = _normalize(error);\r\n        }\r\n        return { tag, value: error };\r\n    }\r\n    const result = value.result;\r\n    return { tag: _normalize(result), value: result };\r\n}\r\n// This strategy picks the highest weight result, as long as the weight is\r\n// equal to or greater than quorum\r\nfunction checkQuorum(quorum, results) {\r\n    const tally = new Map();\r\n    for (const { value, tag, weight } of results) {\r\n        const t = tally.get(tag) || { value, weight: 0 };\r\n        t.weight += weight;\r\n        tally.set(tag, t);\r\n    }\r\n    let best = null;\r\n    for (const r of tally.values()) {\r\n        if (r.weight >= quorum && (!best || r.weight > best.weight)) {\r\n            best = r;\r\n        }\r\n    }\r\n    if (best) {\r\n        return best.value;\r\n    }\r\n    return undefined;\r\n}\r\nfunction getMedian(quorum, results) {\r\n    let resultWeight = 0;\r\n    const errorMap = new Map();\r\n    let bestError = null;\r\n    const values = [];\r\n    for (const { value, tag, weight } of results) {\r\n        if (value instanceof Error) {\r\n            const e = errorMap.get(tag) || { value, weight: 0 };\r\n            e.weight += weight;\r\n            errorMap.set(tag, e);\r\n            if (bestError == null || e.weight > bestError.weight) {\r\n                bestError = e;\r\n            }\r\n        }\r\n        else {\r\n            values.push(BigInt(value));\r\n            resultWeight += weight;\r\n        }\r\n    }\r\n    if (resultWeight < quorum) {\r\n        // We have quorum for an error\r\n        if (bestError && bestError.weight >= quorum) {\r\n            return bestError.value;\r\n        }\r\n        // We do not have quorum for a result\r\n        return undefined;\r\n    }\r\n    // Get the sorted values\r\n    values.sort((a, b) => ((a < b) ? -1 : (b > a) ? 1 : 0));\r\n    const mid = Math.floor(values.length / 2);\r\n    // Odd-length; take the middle value\r\n    if (values.length % 2) {\r\n        return values[mid];\r\n    }\r\n    // Even length; take the ceiling of the mean of the center two values\r\n    return (values[mid - 1] + values[mid] + BN_1) / BN_2;\r\n}\r\nfunction getAnyResult(quorum, results) {\r\n    // If any value or error meets quorum, that is our preferred result\r\n    const result = checkQuorum(quorum, results);\r\n    if (result !== undefined) {\r\n        return result;\r\n    }\r\n    // Otherwise, do we have any result?\r\n    for (const r of results) {\r\n        if (r.value) {\r\n            return r.value;\r\n        }\r\n    }\r\n    // Nope!\r\n    return undefined;\r\n}\r\nfunction getFuzzyMode(quorum, results) {\r\n    if (quorum === 1) {\r\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getNumber)(getMedian(quorum, results), \"%internal\");\r\n    }\r\n    const tally = new Map();\r\n    const add = (result, weight) => {\r\n        const t = tally.get(result) || { result, weight: 0 };\r\n        t.weight += weight;\r\n        tally.set(result, t);\r\n    };\r\n    for (const { weight, value } of results) {\r\n        const r = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getNumber)(value);\r\n        add(r - 1, weight);\r\n        add(r, weight);\r\n        add(r + 1, weight);\r\n    }\r\n    let bestWeight = 0;\r\n    let bestResult = undefined;\r\n    for (const { weight, result } of tally.values()) {\r\n        // Use this result, if this result meets quorum and has either:\r\n        // - a better weight\r\n        // - or equal weight, but the result is larger\r\n        if (weight >= quorum && (weight > bestWeight || (bestResult != null && weight === bestWeight && result > bestResult))) {\r\n            bestWeight = weight;\r\n            bestResult = result;\r\n        }\r\n    }\r\n    return bestResult;\r\n}\r\n/**\r\n *  A **FallbackProvider** manages several [[Providers]] providing\r\n *  resilience by switching between slow or misbehaving nodes, security\r\n *  by requiring multiple backends to aggree and performance by allowing\r\n *  faster backends to respond earlier.\r\n *\r\n */\r\nclass FallbackProvider extends _abstract_provider_js__WEBPACK_IMPORTED_MODULE_1__.AbstractProvider {\r\n    /**\r\n     *  The number of backends that must agree on a value before it is\r\n     *  accpeted.\r\n     */\r\n    quorum;\r\n    /**\r\n     *  @_ignore:\r\n     */\r\n    eventQuorum;\r\n    /**\r\n     *  @_ignore:\r\n     */\r\n    eventWorkers;\r\n    #configs;\r\n    #height;\r\n    #initialSyncPromise;\r\n    /**\r\n     *  Creates a new **FallbackProvider** with %%providers%% connected to\r\n     *  %%network%%.\r\n     *\r\n     *  If a [[Provider]] is included in %%providers%%, defaults are used\r\n     *  for the configuration.\r\n     */\r\n    constructor(providers, network, options) {\r\n        super(network, options);\r\n        this.#configs = providers.map((p) => {\r\n            if (p instanceof _abstract_provider_js__WEBPACK_IMPORTED_MODULE_1__.AbstractProvider) {\r\n                return Object.assign({ provider: p }, defaultConfig, defaultState);\r\n            }\r\n            else {\r\n                return Object.assign({}, defaultConfig, p, defaultState);\r\n            }\r\n        });\r\n        this.#height = -2;\r\n        this.#initialSyncPromise = null;\r\n        if (options && options.quorum != null) {\r\n            this.quorum = options.quorum;\r\n        }\r\n        else {\r\n            this.quorum = Math.ceil(this.#configs.reduce((accum, config) => {\r\n                accum += config.weight;\r\n                return accum;\r\n            }, 0) / 2);\r\n        }\r\n        this.eventQuorum = 1;\r\n        this.eventWorkers = 1;\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(this.quorum <= this.#configs.reduce((a, c) => (a + c.weight), 0), \"quorum exceed provider weight\", \"quorum\", this.quorum);\r\n    }\r\n    get providerConfigs() {\r\n        return this.#configs.map((c) => {\r\n            const result = Object.assign({}, c);\r\n            for (const key in result) {\r\n                if (key[0] === \"_\") {\r\n                    delete result[key];\r\n                }\r\n            }\r\n            return result;\r\n        });\r\n    }\r\n    async _detectNetwork() {\r\n        return _network_js__WEBPACK_IMPORTED_MODULE_2__.Network.from((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt)(await this._perform({ method: \"chainId\" })));\r\n    }\r\n    // @TODO: Add support to select providers to be the event subscriber\r\n    //_getSubscriber(sub: Subscription): Subscriber {\r\n    //    throw new Error(\"@TODO\");\r\n    //}\r\n    /**\r\n     *  Transforms a %%req%% into the correct method call on %%provider%%.\r\n     */\r\n    async _translatePerform(provider, req) {\r\n        switch (req.method) {\r\n            case \"broadcastTransaction\":\r\n                return await provider.broadcastTransaction(req.signedTransaction);\r\n            case \"call\":\r\n                return await provider.call(Object.assign({}, req.transaction, { blockTag: req.blockTag }));\r\n            case \"chainId\":\r\n                return (await provider.getNetwork()).chainId;\r\n            case \"estimateGas\":\r\n                return await provider.estimateGas(req.transaction);\r\n            case \"getBalance\":\r\n                return await provider.getBalance(req.address, req.blockTag);\r\n            case \"getBlock\": {\r\n                const block = (\"blockHash\" in req) ? req.blockHash : req.blockTag;\r\n                return await provider.getBlock(block, req.includeTransactions);\r\n            }\r\n            case \"getBlockNumber\":\r\n                return await provider.getBlockNumber();\r\n            case \"getCode\":\r\n                return await provider.getCode(req.address, req.blockTag);\r\n            case \"getGasPrice\":\r\n                return (await provider.getFeeData()).gasPrice;\r\n            case \"getPriorityFee\":\r\n                return (await provider.getFeeData()).maxPriorityFeePerGas;\r\n            case \"getLogs\":\r\n                return await provider.getLogs(req.filter);\r\n            case \"getStorage\":\r\n                return await provider.getStorage(req.address, req.position, req.blockTag);\r\n            case \"getTransaction\":\r\n                return await provider.getTransaction(req.hash);\r\n            case \"getTransactionCount\":\r\n                return await provider.getTransactionCount(req.address, req.blockTag);\r\n            case \"getTransactionReceipt\":\r\n                return await provider.getTransactionReceipt(req.hash);\r\n            case \"getTransactionResult\":\r\n                return await provider.getTransactionResult(req.hash);\r\n        }\r\n    }\r\n    // Grab the next (random) config that is not already part of\r\n    // the running set\r\n    #getNextConfig(running) {\r\n        // @TODO: Maybe do a check here to favour (heavily) providers that\r\n        //        do not require waitForSync and disfavour providers that\r\n        //        seem down-ish or are behaving slowly\r\n        const configs = Array.from(running).map((r) => r.config);\r\n        // Shuffle the states, sorted by priority\r\n        const allConfigs = this.#configs.slice();\r\n        shuffle(allConfigs);\r\n        allConfigs.sort((a, b) => (a.priority - b.priority));\r\n        for (const config of allConfigs) {\r\n            if (config._lastFatalError) {\r\n                continue;\r\n            }\r\n            if (configs.indexOf(config) === -1) {\r\n                return config;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    // Adds a new runner (if available) to running.\r\n    #addRunner(running, req) {\r\n        const config = this.#getNextConfig(running);\r\n        // No runners available\r\n        if (config == null) {\r\n            return null;\r\n        }\r\n        // Create a new runner\r\n        const runner = {\r\n            config, result: null, didBump: false,\r\n            perform: null, staller: null\r\n        };\r\n        const now = getTime();\r\n        // Start performing this operation\r\n        runner.perform = (async () => {\r\n            try {\r\n                config.requests++;\r\n                const result = await this._translatePerform(config.provider, req);\r\n                runner.result = { result };\r\n            }\r\n            catch (error) {\r\n                config.errorResponses++;\r\n                runner.result = { error };\r\n            }\r\n            const dt = (getTime() - now);\r\n            config._totalTime += dt;\r\n            config.rollingDuration = 0.95 * config.rollingDuration + 0.05 * dt;\r\n            runner.perform = null;\r\n        })();\r\n        // Start a staller; when this times out, it's time to force\r\n        // kicking off another runner because we are taking too long\r\n        runner.staller = (async () => {\r\n            await stall(config.stallTimeout);\r\n            runner.staller = null;\r\n        })();\r\n        running.add(runner);\r\n        return runner;\r\n    }\r\n    // Initializes the blockNumber and network for each runner and\r\n    // blocks until initialized\r\n    async #initialSync() {\r\n        let initialSync = this.#initialSyncPromise;\r\n        if (!initialSync) {\r\n            const promises = [];\r\n            this.#configs.forEach((config) => {\r\n                promises.push((async () => {\r\n                    await waitForSync(config, 0);\r\n                    if (!config._lastFatalError) {\r\n                        config._network = await config.provider.getNetwork();\r\n                    }\r\n                })());\r\n            });\r\n            this.#initialSyncPromise = initialSync = (async () => {\r\n                // Wait for all providers to have a block number and network\r\n                await Promise.all(promises);\r\n                // Check all the networks match\r\n                let chainId = null;\r\n                for (const config of this.#configs) {\r\n                    if (config._lastFatalError) {\r\n                        continue;\r\n                    }\r\n                    const network = (config._network);\r\n                    if (chainId == null) {\r\n                        chainId = network.chainId;\r\n                    }\r\n                    else if (network.chainId !== chainId) {\r\n                        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(false, \"cannot mix providers on different networks\", \"UNSUPPORTED_OPERATION\", {\r\n                            operation: \"new FallbackProvider\"\r\n                        });\r\n                    }\r\n                }\r\n            })();\r\n        }\r\n        await initialSync;\r\n    }\r\n    async #checkQuorum(running, req) {\r\n        // Get all the result objects\r\n        const results = [];\r\n        for (const runner of running) {\r\n            if (runner.result != null) {\r\n                const { tag, value } = normalizeResult(req.method, runner.result);\r\n                results.push({ tag, value, weight: runner.config.weight });\r\n            }\r\n        }\r\n        // Are there enough results to event meet quorum?\r\n        if (results.reduce((a, r) => (a + r.weight), 0) < this.quorum) {\r\n            return undefined;\r\n        }\r\n        switch (req.method) {\r\n            case \"getBlockNumber\": {\r\n                // We need to get the bootstrap block height\r\n                if (this.#height === -2) {\r\n                    this.#height = Math.ceil((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getNumber)(getMedian(this.quorum, this.#configs.filter((c) => (!c._lastFatalError)).map((c) => ({\r\n                        value: c.blockNumber,\r\n                        tag: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getNumber)(c.blockNumber).toString(),\r\n                        weight: c.weight\r\n                    })))));\r\n                }\r\n                // Find the mode across all the providers, allowing for\r\n                // a little drift between block heights\r\n                const mode = getFuzzyMode(this.quorum, results);\r\n                if (mode === undefined) {\r\n                    return undefined;\r\n                }\r\n                if (mode > this.#height) {\r\n                    this.#height = mode;\r\n                }\r\n                return this.#height;\r\n            }\r\n            case \"getGasPrice\":\r\n            case \"getPriorityFee\":\r\n            case \"estimateGas\":\r\n                return getMedian(this.quorum, results);\r\n            case \"getBlock\":\r\n                // Pending blocks are in the mempool and already\r\n                // quite untrustworthy; just grab anything\r\n                if (\"blockTag\" in req && req.blockTag === \"pending\") {\r\n                    return getAnyResult(this.quorum, results);\r\n                }\r\n                return checkQuorum(this.quorum, results);\r\n            case \"call\":\r\n            case \"chainId\":\r\n            case \"getBalance\":\r\n            case \"getTransactionCount\":\r\n            case \"getCode\":\r\n            case \"getStorage\":\r\n            case \"getTransaction\":\r\n            case \"getTransactionReceipt\":\r\n            case \"getLogs\":\r\n                return checkQuorum(this.quorum, results);\r\n            case \"broadcastTransaction\":\r\n                return getAnyResult(this.quorum, results);\r\n        }\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(false, \"unsupported method\", \"UNSUPPORTED_OPERATION\", {\r\n            operation: `_perform(${stringify(req.method)})`\r\n        });\r\n    }\r\n    async #waitForQuorum(running, req) {\r\n        if (running.size === 0) {\r\n            throw new Error(\"no runners?!\");\r\n        }\r\n        // Any promises that are interesting to watch for; an expired stall\r\n        // or a successful perform\r\n        const interesting = [];\r\n        let newRunners = 0;\r\n        for (const runner of running) {\r\n            // No responses, yet; keep an eye on it\r\n            if (runner.perform) {\r\n                interesting.push(runner.perform);\r\n            }\r\n            // Still stalling...\r\n            if (runner.staller) {\r\n                interesting.push(runner.staller);\r\n                continue;\r\n            }\r\n            // This runner has already triggered another runner\r\n            if (runner.didBump) {\r\n                continue;\r\n            }\r\n            // Got a response (result or error) or stalled; kick off another runner\r\n            runner.didBump = true;\r\n            newRunners++;\r\n        }\r\n        // Check if we have reached quorum on a result (or error)\r\n        const value = await this.#checkQuorum(running, req);\r\n        if (value !== undefined) {\r\n            if (value instanceof Error) {\r\n                throw value;\r\n            }\r\n            return value;\r\n        }\r\n        // Add any new runners, because a staller timed out or a result\r\n        // or error response came in.\r\n        for (let i = 0; i < newRunners; i++) {\r\n            this.#addRunner(running, req);\r\n        }\r\n        // All providers have returned, and we have no result\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(interesting.length > 0, \"quorum not met\", \"SERVER_ERROR\", {\r\n            request: \"%sub-requests\",\r\n            info: { request: req, results: Array.from(running).map((r) => stringify(r.result)) }\r\n        });\r\n        // Wait for someone to either complete its perform or stall out\r\n        await Promise.race(interesting);\r\n        // This is recursive, but at worst case the depth is 2x the\r\n        // number of providers (each has a perform and a staller)\r\n        return await this.#waitForQuorum(running, req);\r\n    }\r\n    async _perform(req) {\r\n        // Broadcasting a transaction is rare (ish) and already incurs\r\n        // a cost on the user, so spamming is safe-ish. Just send it to\r\n        // every backend.\r\n        if (req.method === \"broadcastTransaction\") {\r\n            // Once any broadcast provides a positive result, use it. No\r\n            // need to wait for anyone else\r\n            const results = this.#configs.map((c) => null);\r\n            const broadcasts = this.#configs.map(async ({ provider, weight }, index) => {\r\n                try {\r\n                    const result = await provider._perform(req);\r\n                    results[index] = Object.assign(normalizeResult(req.method, { result }), { weight });\r\n                }\r\n                catch (error) {\r\n                    results[index] = Object.assign(normalizeResult(req.method, { error }), { weight });\r\n                }\r\n            });\r\n            // As each promise finishes...\r\n            while (true) {\r\n                // Check for a valid broadcast result\r\n                const done = results.filter((r) => (r != null));\r\n                for (const { value } of done) {\r\n                    if (!(value instanceof Error)) {\r\n                        return value;\r\n                    }\r\n                }\r\n                // Check for a legit broadcast error (one which we cannot\r\n                // recover from; some nodes may return the following red\r\n                // herring events:\r\n                // - alredy seend (UNKNOWN_ERROR)\r\n                // - NONCE_EXPIRED\r\n                // - REPLACEMENT_UNDERPRICED\r\n                const result = checkQuorum(this.quorum, results.filter((r) => (r != null)));\r\n                if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isError)(result, \"INSUFFICIENT_FUNDS\")) {\r\n                    throw result;\r\n                }\r\n                // Kick off the next provider (if any)\r\n                const waiting = broadcasts.filter((b, i) => (results[i] == null));\r\n                if (waiting.length === 0) {\r\n                    break;\r\n                }\r\n                await Promise.race(waiting);\r\n            }\r\n            // Use standard quorum results; any result was returned above,\r\n            // so this will find any error that met quorum if any\r\n            const result = getAnyResult(this.quorum, results);\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(result !== undefined, \"problem multi-broadcasting\", \"SERVER_ERROR\", {\r\n                request: \"%sub-requests\",\r\n                info: { request: req, results: results.map(stringify) }\r\n            });\r\n            if (result instanceof Error) {\r\n                throw result;\r\n            }\r\n            return result;\r\n        }\r\n        await this.#initialSync();\r\n        // Bootstrap enough runners to meet quorum\r\n        const running = new Set();\r\n        let inflightQuorum = 0;\r\n        while (true) {\r\n            const runner = this.#addRunner(running, req);\r\n            if (runner == null) {\r\n                break;\r\n            }\r\n            inflightQuorum += runner.config.weight;\r\n            if (inflightQuorum >= this.quorum) {\r\n                break;\r\n            }\r\n        }\r\n        const result = await this.#waitForQuorum(running, req);\r\n        // Track requests sent to a provider that are still\r\n        // outstanding after quorum has been otherwise found\r\n        for (const runner of running) {\r\n            if (runner.perform && runner.result == null) {\r\n                runner.config.lateResponses++;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    async destroy() {\r\n        for (const { provider } of this.#configs) {\r\n            provider.destroy();\r\n        }\r\n        super.destroy();\r\n    }\r\n}\r\n//# sourceMappingURL=provider-fallback.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-fallback.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-infura.js":
/*!******************************************************************!*\
  !*** ./node_modules/ethers/lib.esm/providers/provider-infura.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InfuraProvider: () => (/* binding */ InfuraProvider),\n/* harmony export */   InfuraWebSocketProvider: () => (/* binding */ InfuraWebSocketProvider)\n/* harmony export */ });\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/* harmony import */ var _community_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./community.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/community.js\");\n/* harmony import */ var _network_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./network.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/network.js\");\n/* harmony import */ var _provider_jsonrpc_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./provider-jsonrpc.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-jsonrpc.js\");\n/* harmony import */ var _provider_websocket_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./provider-websocket.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-websocket.js\");\n/**\r\n *  [[link-infura]] provides a third-party service for connecting to\r\n *  various blockchains over JSON-RPC.\r\n *\r\n *  **Supported Networks**\r\n *\r\n *  - Ethereum Mainnet (``mainnet``)\r\n *  - Goerli Testnet (``goerli``)\r\n *  - Sepolia Testnet (``sepolia``)\r\n *  - Arbitrum (``arbitrum``)\r\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\r\n *  - Arbitrum Sepolia Testnet (``arbitrum-sepolia``)\r\n *  - Base (``base``)\r\n *  - Base Goerlia Testnet (``base-goerli``)\r\n *  - Base Sepolia Testnet (``base-sepolia``)\r\n *  - BNB Smart Chain Mainnet (``bnb``)\r\n *  - BNB Smart Chain Testnet (``bnbt``)\r\n *  - Linea (``linea``)\r\n *  - Linea Goerli Testnet (``linea-goerli``)\r\n *  - Linea Sepolia Testnet (``linea-sepolia``)\r\n *  - Optimism (``optimism``)\r\n *  - Optimism Goerli Testnet (``optimism-goerli``)\r\n *  - Optimism Sepolia Testnet (``optimism-sepolia``)\r\n *  - Polygon (``matic``)\r\n *  - Polygon Amoy Testnet (``matic-amoy``)\r\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\r\n *\r\n *  @_subsection: api/providers/thirdparty:INFURA  [providers-infura]\r\n */\r\n\r\n\r\n\r\n\r\n\r\nconst defaultProjectId = \"84842078b09946638c03157f83405213\";\r\nfunction getHost(name) {\r\n    switch (name) {\r\n        case \"mainnet\":\r\n            return \"mainnet.infura.io\";\r\n        case \"goerli\":\r\n            return \"goerli.infura.io\";\r\n        case \"sepolia\":\r\n            return \"sepolia.infura.io\";\r\n        case \"arbitrum\":\r\n            return \"arbitrum-mainnet.infura.io\";\r\n        case \"arbitrum-goerli\":\r\n            return \"arbitrum-goerli.infura.io\";\r\n        case \"arbitrum-sepolia\":\r\n            return \"arbitrum-sepolia.infura.io\";\r\n        case \"base\":\r\n            return \"base-mainnet.infura.io\";\r\n        case \"base-goerlia\": // @TODO: Remove this typo in the future!\r\n        case \"base-goerli\":\r\n            return \"base-goerli.infura.io\";\r\n        case \"base-sepolia\":\r\n            return \"base-sepolia.infura.io\";\r\n        case \"bnb\":\r\n            return \"bsc-mainnet.infura.io\";\r\n        case \"bnbt\":\r\n            return \"bsc-testnet.infura.io\";\r\n        case \"linea\":\r\n            return \"linea-mainnet.infura.io\";\r\n        case \"linea-goerli\":\r\n            return \"linea-goerli.infura.io\";\r\n        case \"linea-sepolia\":\r\n            return \"linea-sepolia.infura.io\";\r\n        case \"matic\":\r\n            return \"polygon-mainnet.infura.io\";\r\n        case \"matic-amoy\":\r\n            return \"polygon-amoy.infura.io\";\r\n        case \"matic-mumbai\":\r\n            return \"polygon-mumbai.infura.io\";\r\n        case \"optimism\":\r\n            return \"optimism-mainnet.infura.io\";\r\n        case \"optimism-goerli\":\r\n            return \"optimism-goerli.infura.io\";\r\n        case \"optimism-sepolia\":\r\n            return \"optimism-sepolia.infura.io\";\r\n    }\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"unsupported network\", \"network\", name);\r\n}\r\n/**\r\n *  The **InfuraWebSocketProvider** connects to the [[link-infura]]\r\n *  WebSocket end-points.\r\n *\r\n *  By default, a highly-throttled API key is used, which is\r\n *  appropriate for quick prototypes and simple scripts. To\r\n *  gain access to an increased rate-limit, it is highly\r\n *  recommended to [sign up here](link-infura-signup).\r\n */\r\nclass InfuraWebSocketProvider extends _provider_websocket_js__WEBPACK_IMPORTED_MODULE_1__.WebSocketProvider {\r\n    /**\r\n     *  The Project ID for the INFURA connection.\r\n     */\r\n    projectId;\r\n    /**\r\n     *  The Project Secret.\r\n     *\r\n     *  If null, no authenticated requests are made. This should not\r\n     *  be used outside of private contexts.\r\n     */\r\n    projectSecret;\r\n    /**\r\n     *  Creates a new **InfuraWebSocketProvider**.\r\n     */\r\n    constructor(network, projectId) {\r\n        const provider = new InfuraProvider(network, projectId);\r\n        const req = provider._getConnection();\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(!req.credentials, \"INFURA WebSocket project secrets unsupported\", \"UNSUPPORTED_OPERATION\", { operation: \"InfuraProvider.getWebSocketProvider()\" });\r\n        const url = req.url.replace(/^http/i, \"ws\").replace(\"/v3/\", \"/ws/v3/\");\r\n        super(url, provider._network);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, {\r\n            projectId: provider.projectId,\r\n            projectSecret: provider.projectSecret\r\n        });\r\n    }\r\n    isCommunityResource() {\r\n        return (this.projectId === defaultProjectId);\r\n    }\r\n}\r\n/**\r\n *  The **InfuraProvider** connects to the [[link-infura]]\r\n *  JSON-RPC end-points.\r\n *\r\n *  By default, a highly-throttled API key is used, which is\r\n *  appropriate for quick prototypes and simple scripts. To\r\n *  gain access to an increased rate-limit, it is highly\r\n *  recommended to [sign up here](link-infura-signup).\r\n */\r\nclass InfuraProvider extends _provider_jsonrpc_js__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider {\r\n    /**\r\n     *  The Project ID for the INFURA connection.\r\n     */\r\n    projectId;\r\n    /**\r\n     *  The Project Secret.\r\n     *\r\n     *  If null, no authenticated requests are made. This should not\r\n     *  be used outside of private contexts.\r\n     */\r\n    projectSecret;\r\n    /**\r\n     *  Creates a new **InfuraProvider**.\r\n     */\r\n    constructor(_network, projectId, projectSecret) {\r\n        if (_network == null) {\r\n            _network = \"mainnet\";\r\n        }\r\n        const network = _network_js__WEBPACK_IMPORTED_MODULE_3__.Network.from(_network);\r\n        if (projectId == null) {\r\n            projectId = defaultProjectId;\r\n        }\r\n        if (projectSecret == null) {\r\n            projectSecret = null;\r\n        }\r\n        const request = InfuraProvider.getRequest(network, projectId, projectSecret);\r\n        super(request, network, { staticNetwork: network });\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, { projectId, projectSecret });\r\n    }\r\n    _getProvider(chainId) {\r\n        try {\r\n            return new InfuraProvider(chainId, this.projectId, this.projectSecret);\r\n        }\r\n        catch (error) { }\r\n        return super._getProvider(chainId);\r\n    }\r\n    isCommunityResource() {\r\n        return (this.projectId === defaultProjectId);\r\n    }\r\n    /**\r\n     *  Creates a new **InfuraWebSocketProvider**.\r\n     */\r\n    static getWebSocketProvider(network, projectId) {\r\n        return new InfuraWebSocketProvider(network, projectId);\r\n    }\r\n    /**\r\n     *  Returns a prepared request for connecting to %%network%%\r\n     *  with %%projectId%% and %%projectSecret%%.\r\n     */\r\n    static getRequest(network, projectId, projectSecret) {\r\n        if (projectId == null) {\r\n            projectId = defaultProjectId;\r\n        }\r\n        if (projectSecret == null) {\r\n            projectSecret = null;\r\n        }\r\n        const request = new _utils_index_js__WEBPACK_IMPORTED_MODULE_0__.FetchRequest(`https:/\\/${getHost(network.name)}/v3/${projectId}`);\r\n        request.allowGzip = true;\r\n        if (projectSecret) {\r\n            request.setCredentials(\"\", projectSecret);\r\n        }\r\n        if (projectId === defaultProjectId) {\r\n            request.retryFunc = async (request, response, attempt) => {\r\n                (0,_community_js__WEBPACK_IMPORTED_MODULE_4__.showThrottleMessage)(\"InfuraProvider\");\r\n                return true;\r\n            };\r\n        }\r\n        return request;\r\n    }\r\n}\r\n//# sourceMappingURL=provider-infura.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9wcm92aWRlcnMvcHJvdmlkZXItaW5mdXJhLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQzJGO0FBQ3RDO0FBQ2Q7QUFDaUI7QUFDSTtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLCtEQUFjO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sc0NBQXNDLHFFQUFpQjtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSx1REFBTSw4RkFBOEYsb0RBQW9EO0FBQ2hLO0FBQ0E7QUFDQSxRQUFRLGlFQUFnQjtBQUN4QjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyw2QkFBNkIsaUVBQWU7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdEQUFPO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLHdCQUF3QjtBQUMxRCxRQUFRLGlFQUFnQixTQUFTLDBCQUEwQjtBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qix5REFBWSxhQUFhLHNCQUFzQixNQUFNLFVBQVU7QUFDM0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGtFQUFtQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiRDpcXERvX2FuMlxcbGVuZGh1Yl92MlxcbGVuZGh1Yi1mcm9udGVuZC1uZXh0anNcXG5vZGVfbW9kdWxlc1xcZXRoZXJzXFxsaWIuZXNtXFxwcm92aWRlcnNcXHByb3ZpZGVyLWluZnVyYS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogIFtbbGluay1pbmZ1cmFdXSBwcm92aWRlcyBhIHRoaXJkLXBhcnR5IHNlcnZpY2UgZm9yIGNvbm5lY3RpbmcgdG9cclxuICogIHZhcmlvdXMgYmxvY2tjaGFpbnMgb3ZlciBKU09OLVJQQy5cclxuICpcclxuICogICoqU3VwcG9ydGVkIE5ldHdvcmtzKipcclxuICpcclxuICogIC0gRXRoZXJldW0gTWFpbm5ldCAoYGBtYWlubmV0YGApXHJcbiAqICAtIEdvZXJsaSBUZXN0bmV0IChgYGdvZXJsaWBgKVxyXG4gKiAgLSBTZXBvbGlhIFRlc3RuZXQgKGBgc2Vwb2xpYWBgKVxyXG4gKiAgLSBBcmJpdHJ1bSAoYGBhcmJpdHJ1bWBgKVxyXG4gKiAgLSBBcmJpdHJ1bSBHb2VybGkgVGVzdG5ldCAoYGBhcmJpdHJ1bS1nb2VybGlgYClcclxuICogIC0gQXJiaXRydW0gU2Vwb2xpYSBUZXN0bmV0IChgYGFyYml0cnVtLXNlcG9saWFgYClcclxuICogIC0gQmFzZSAoYGBiYXNlYGApXHJcbiAqICAtIEJhc2UgR29lcmxpYSBUZXN0bmV0IChgYGJhc2UtZ29lcmxpYGApXHJcbiAqICAtIEJhc2UgU2Vwb2xpYSBUZXN0bmV0IChgYGJhc2Utc2Vwb2xpYWBgKVxyXG4gKiAgLSBCTkIgU21hcnQgQ2hhaW4gTWFpbm5ldCAoYGBibmJgYClcclxuICogIC0gQk5CIFNtYXJ0IENoYWluIFRlc3RuZXQgKGBgYm5idGBgKVxyXG4gKiAgLSBMaW5lYSAoYGBsaW5lYWBgKVxyXG4gKiAgLSBMaW5lYSBHb2VybGkgVGVzdG5ldCAoYGBsaW5lYS1nb2VybGlgYClcclxuICogIC0gTGluZWEgU2Vwb2xpYSBUZXN0bmV0IChgYGxpbmVhLXNlcG9saWFgYClcclxuICogIC0gT3B0aW1pc20gKGBgb3B0aW1pc21gYClcclxuICogIC0gT3B0aW1pc20gR29lcmxpIFRlc3RuZXQgKGBgb3B0aW1pc20tZ29lcmxpYGApXHJcbiAqICAtIE9wdGltaXNtIFNlcG9saWEgVGVzdG5ldCAoYGBvcHRpbWlzbS1zZXBvbGlhYGApXHJcbiAqICAtIFBvbHlnb24gKGBgbWF0aWNgYClcclxuICogIC0gUG9seWdvbiBBbW95IFRlc3RuZXQgKGBgbWF0aWMtYW1veWBgKVxyXG4gKiAgLSBQb2x5Z29uIE11bWJhaSBUZXN0bmV0IChgYG1hdGljLW11bWJhaWBgKVxyXG4gKlxyXG4gKiAgQF9zdWJzZWN0aW9uOiBhcGkvcHJvdmlkZXJzL3RoaXJkcGFydHk6SU5GVVJBICBbcHJvdmlkZXJzLWluZnVyYV1cclxuICovXHJcbmltcG9ydCB7IGRlZmluZVByb3BlcnRpZXMsIEZldGNoUmVxdWVzdCwgYXNzZXJ0LCBhc3NlcnRBcmd1bWVudCB9IGZyb20gXCIuLi91dGlscy9pbmRleC5qc1wiO1xyXG5pbXBvcnQgeyBzaG93VGhyb3R0bGVNZXNzYWdlIH0gZnJvbSBcIi4vY29tbXVuaXR5LmpzXCI7XHJcbmltcG9ydCB7IE5ldHdvcmsgfSBmcm9tIFwiLi9uZXR3b3JrLmpzXCI7XHJcbmltcG9ydCB7IEpzb25ScGNQcm92aWRlciB9IGZyb20gXCIuL3Byb3ZpZGVyLWpzb25ycGMuanNcIjtcclxuaW1wb3J0IHsgV2ViU29ja2V0UHJvdmlkZXIgfSBmcm9tIFwiLi9wcm92aWRlci13ZWJzb2NrZXQuanNcIjtcclxuY29uc3QgZGVmYXVsdFByb2plY3RJZCA9IFwiODQ4NDIwNzhiMDk5NDY2MzhjMDMxNTdmODM0MDUyMTNcIjtcclxuZnVuY3Rpb24gZ2V0SG9zdChuYW1lKSB7XHJcbiAgICBzd2l0Y2ggKG5hbWUpIHtcclxuICAgICAgICBjYXNlIFwibWFpbm5ldFwiOlxyXG4gICAgICAgICAgICByZXR1cm4gXCJtYWlubmV0LmluZnVyYS5pb1wiO1xyXG4gICAgICAgIGNhc2UgXCJnb2VybGlcIjpcclxuICAgICAgICAgICAgcmV0dXJuIFwiZ29lcmxpLmluZnVyYS5pb1wiO1xyXG4gICAgICAgIGNhc2UgXCJzZXBvbGlhXCI6XHJcbiAgICAgICAgICAgIHJldHVybiBcInNlcG9saWEuaW5mdXJhLmlvXCI7XHJcbiAgICAgICAgY2FzZSBcImFyYml0cnVtXCI6XHJcbiAgICAgICAgICAgIHJldHVybiBcImFyYml0cnVtLW1haW5uZXQuaW5mdXJhLmlvXCI7XHJcbiAgICAgICAgY2FzZSBcImFyYml0cnVtLWdvZXJsaVwiOlxyXG4gICAgICAgICAgICByZXR1cm4gXCJhcmJpdHJ1bS1nb2VybGkuaW5mdXJhLmlvXCI7XHJcbiAgICAgICAgY2FzZSBcImFyYml0cnVtLXNlcG9saWFcIjpcclxuICAgICAgICAgICAgcmV0dXJuIFwiYXJiaXRydW0tc2Vwb2xpYS5pbmZ1cmEuaW9cIjtcclxuICAgICAgICBjYXNlIFwiYmFzZVwiOlxyXG4gICAgICAgICAgICByZXR1cm4gXCJiYXNlLW1haW5uZXQuaW5mdXJhLmlvXCI7XHJcbiAgICAgICAgY2FzZSBcImJhc2UtZ29lcmxpYVwiOiAvLyBAVE9ETzogUmVtb3ZlIHRoaXMgdHlwbyBpbiB0aGUgZnV0dXJlIVxyXG4gICAgICAgIGNhc2UgXCJiYXNlLWdvZXJsaVwiOlxyXG4gICAgICAgICAgICByZXR1cm4gXCJiYXNlLWdvZXJsaS5pbmZ1cmEuaW9cIjtcclxuICAgICAgICBjYXNlIFwiYmFzZS1zZXBvbGlhXCI6XHJcbiAgICAgICAgICAgIHJldHVybiBcImJhc2Utc2Vwb2xpYS5pbmZ1cmEuaW9cIjtcclxuICAgICAgICBjYXNlIFwiYm5iXCI6XHJcbiAgICAgICAgICAgIHJldHVybiBcImJzYy1tYWlubmV0LmluZnVyYS5pb1wiO1xyXG4gICAgICAgIGNhc2UgXCJibmJ0XCI6XHJcbiAgICAgICAgICAgIHJldHVybiBcImJzYy10ZXN0bmV0LmluZnVyYS5pb1wiO1xyXG4gICAgICAgIGNhc2UgXCJsaW5lYVwiOlxyXG4gICAgICAgICAgICByZXR1cm4gXCJsaW5lYS1tYWlubmV0LmluZnVyYS5pb1wiO1xyXG4gICAgICAgIGNhc2UgXCJsaW5lYS1nb2VybGlcIjpcclxuICAgICAgICAgICAgcmV0dXJuIFwibGluZWEtZ29lcmxpLmluZnVyYS5pb1wiO1xyXG4gICAgICAgIGNhc2UgXCJsaW5lYS1zZXBvbGlhXCI6XHJcbiAgICAgICAgICAgIHJldHVybiBcImxpbmVhLXNlcG9saWEuaW5mdXJhLmlvXCI7XHJcbiAgICAgICAgY2FzZSBcIm1hdGljXCI6XHJcbiAgICAgICAgICAgIHJldHVybiBcInBvbHlnb24tbWFpbm5ldC5pbmZ1cmEuaW9cIjtcclxuICAgICAgICBjYXNlIFwibWF0aWMtYW1veVwiOlxyXG4gICAgICAgICAgICByZXR1cm4gXCJwb2x5Z29uLWFtb3kuaW5mdXJhLmlvXCI7XHJcbiAgICAgICAgY2FzZSBcIm1hdGljLW11bWJhaVwiOlxyXG4gICAgICAgICAgICByZXR1cm4gXCJwb2x5Z29uLW11bWJhaS5pbmZ1cmEuaW9cIjtcclxuICAgICAgICBjYXNlIFwib3B0aW1pc21cIjpcclxuICAgICAgICAgICAgcmV0dXJuIFwib3B0aW1pc20tbWFpbm5ldC5pbmZ1cmEuaW9cIjtcclxuICAgICAgICBjYXNlIFwib3B0aW1pc20tZ29lcmxpXCI6XHJcbiAgICAgICAgICAgIHJldHVybiBcIm9wdGltaXNtLWdvZXJsaS5pbmZ1cmEuaW9cIjtcclxuICAgICAgICBjYXNlIFwib3B0aW1pc20tc2Vwb2xpYVwiOlxyXG4gICAgICAgICAgICByZXR1cm4gXCJvcHRpbWlzbS1zZXBvbGlhLmluZnVyYS5pb1wiO1xyXG4gICAgfVxyXG4gICAgYXNzZXJ0QXJndW1lbnQoZmFsc2UsIFwidW5zdXBwb3J0ZWQgbmV0d29ya1wiLCBcIm5ldHdvcmtcIiwgbmFtZSk7XHJcbn1cclxuLyoqXHJcbiAqICBUaGUgKipJbmZ1cmFXZWJTb2NrZXRQcm92aWRlcioqIGNvbm5lY3RzIHRvIHRoZSBbW2xpbmstaW5mdXJhXV1cclxuICogIFdlYlNvY2tldCBlbmQtcG9pbnRzLlxyXG4gKlxyXG4gKiAgQnkgZGVmYXVsdCwgYSBoaWdobHktdGhyb3R0bGVkIEFQSSBrZXkgaXMgdXNlZCwgd2hpY2ggaXNcclxuICogIGFwcHJvcHJpYXRlIGZvciBxdWljayBwcm90b3R5cGVzIGFuZCBzaW1wbGUgc2NyaXB0cy4gVG9cclxuICogIGdhaW4gYWNjZXNzIHRvIGFuIGluY3JlYXNlZCByYXRlLWxpbWl0LCBpdCBpcyBoaWdobHlcclxuICogIHJlY29tbWVuZGVkIHRvIFtzaWduIHVwIGhlcmVdKGxpbmstaW5mdXJhLXNpZ251cCkuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgSW5mdXJhV2ViU29ja2V0UHJvdmlkZXIgZXh0ZW5kcyBXZWJTb2NrZXRQcm92aWRlciB7XHJcbiAgICAvKipcclxuICAgICAqICBUaGUgUHJvamVjdCBJRCBmb3IgdGhlIElORlVSQSBjb25uZWN0aW9uLlxyXG4gICAgICovXHJcbiAgICBwcm9qZWN0SWQ7XHJcbiAgICAvKipcclxuICAgICAqICBUaGUgUHJvamVjdCBTZWNyZXQuXHJcbiAgICAgKlxyXG4gICAgICogIElmIG51bGwsIG5vIGF1dGhlbnRpY2F0ZWQgcmVxdWVzdHMgYXJlIG1hZGUuIFRoaXMgc2hvdWxkIG5vdFxyXG4gICAgICogIGJlIHVzZWQgb3V0c2lkZSBvZiBwcml2YXRlIGNvbnRleHRzLlxyXG4gICAgICovXHJcbiAgICBwcm9qZWN0U2VjcmV0O1xyXG4gICAgLyoqXHJcbiAgICAgKiAgQ3JlYXRlcyBhIG5ldyAqKkluZnVyYVdlYlNvY2tldFByb3ZpZGVyKiouXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKG5ldHdvcmssIHByb2plY3RJZCkge1xyXG4gICAgICAgIGNvbnN0IHByb3ZpZGVyID0gbmV3IEluZnVyYVByb3ZpZGVyKG5ldHdvcmssIHByb2plY3RJZCk7XHJcbiAgICAgICAgY29uc3QgcmVxID0gcHJvdmlkZXIuX2dldENvbm5lY3Rpb24oKTtcclxuICAgICAgICBhc3NlcnQoIXJlcS5jcmVkZW50aWFscywgXCJJTkZVUkEgV2ViU29ja2V0IHByb2plY3Qgc2VjcmV0cyB1bnN1cHBvcnRlZFwiLCBcIlVOU1VQUE9SVEVEX09QRVJBVElPTlwiLCB7IG9wZXJhdGlvbjogXCJJbmZ1cmFQcm92aWRlci5nZXRXZWJTb2NrZXRQcm92aWRlcigpXCIgfSk7XHJcbiAgICAgICAgY29uc3QgdXJsID0gcmVxLnVybC5yZXBsYWNlKC9eaHR0cC9pLCBcIndzXCIpLnJlcGxhY2UoXCIvdjMvXCIsIFwiL3dzL3YzL1wiKTtcclxuICAgICAgICBzdXBlcih1cmwsIHByb3ZpZGVyLl9uZXR3b3JrKTtcclxuICAgICAgICBkZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcclxuICAgICAgICAgICAgcHJvamVjdElkOiBwcm92aWRlci5wcm9qZWN0SWQsXHJcbiAgICAgICAgICAgIHByb2plY3RTZWNyZXQ6IHByb3ZpZGVyLnByb2plY3RTZWNyZXRcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGlzQ29tbXVuaXR5UmVzb3VyY2UoKSB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLnByb2plY3RJZCA9PT0gZGVmYXVsdFByb2plY3RJZCk7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqICBUaGUgKipJbmZ1cmFQcm92aWRlcioqIGNvbm5lY3RzIHRvIHRoZSBbW2xpbmstaW5mdXJhXV1cclxuICogIEpTT04tUlBDIGVuZC1wb2ludHMuXHJcbiAqXHJcbiAqICBCeSBkZWZhdWx0LCBhIGhpZ2hseS10aHJvdHRsZWQgQVBJIGtleSBpcyB1c2VkLCB3aGljaCBpc1xyXG4gKiAgYXBwcm9wcmlhdGUgZm9yIHF1aWNrIHByb3RvdHlwZXMgYW5kIHNpbXBsZSBzY3JpcHRzLiBUb1xyXG4gKiAgZ2FpbiBhY2Nlc3MgdG8gYW4gaW5jcmVhc2VkIHJhdGUtbGltaXQsIGl0IGlzIGhpZ2hseVxyXG4gKiAgcmVjb21tZW5kZWQgdG8gW3NpZ24gdXAgaGVyZV0obGluay1pbmZ1cmEtc2lnbnVwKS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBJbmZ1cmFQcm92aWRlciBleHRlbmRzIEpzb25ScGNQcm92aWRlciB7XHJcbiAgICAvKipcclxuICAgICAqICBUaGUgUHJvamVjdCBJRCBmb3IgdGhlIElORlVSQSBjb25uZWN0aW9uLlxyXG4gICAgICovXHJcbiAgICBwcm9qZWN0SWQ7XHJcbiAgICAvKipcclxuICAgICAqICBUaGUgUHJvamVjdCBTZWNyZXQuXHJcbiAgICAgKlxyXG4gICAgICogIElmIG51bGwsIG5vIGF1dGhlbnRpY2F0ZWQgcmVxdWVzdHMgYXJlIG1hZGUuIFRoaXMgc2hvdWxkIG5vdFxyXG4gICAgICogIGJlIHVzZWQgb3V0c2lkZSBvZiBwcml2YXRlIGNvbnRleHRzLlxyXG4gICAgICovXHJcbiAgICBwcm9qZWN0U2VjcmV0O1xyXG4gICAgLyoqXHJcbiAgICAgKiAgQ3JlYXRlcyBhIG5ldyAqKkluZnVyYVByb3ZpZGVyKiouXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKF9uZXR3b3JrLCBwcm9qZWN0SWQsIHByb2plY3RTZWNyZXQpIHtcclxuICAgICAgICBpZiAoX25ldHdvcmsgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBfbmV0d29yayA9IFwibWFpbm5ldFwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBuZXR3b3JrID0gTmV0d29yay5mcm9tKF9uZXR3b3JrKTtcclxuICAgICAgICBpZiAocHJvamVjdElkID09IG51bGwpIHtcclxuICAgICAgICAgICAgcHJvamVjdElkID0gZGVmYXVsdFByb2plY3RJZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHByb2plY3RTZWNyZXQgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBwcm9qZWN0U2VjcmV0ID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IEluZnVyYVByb3ZpZGVyLmdldFJlcXVlc3QobmV0d29yaywgcHJvamVjdElkLCBwcm9qZWN0U2VjcmV0KTtcclxuICAgICAgICBzdXBlcihyZXF1ZXN0LCBuZXR3b3JrLCB7IHN0YXRpY05ldHdvcms6IG5ldHdvcmsgfSk7XHJcbiAgICAgICAgZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7IHByb2plY3RJZCwgcHJvamVjdFNlY3JldCB9KTtcclxuICAgIH1cclxuICAgIF9nZXRQcm92aWRlcihjaGFpbklkKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBJbmZ1cmFQcm92aWRlcihjaGFpbklkLCB0aGlzLnByb2plY3RJZCwgdGhpcy5wcm9qZWN0U2VjcmV0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7IH1cclxuICAgICAgICByZXR1cm4gc3VwZXIuX2dldFByb3ZpZGVyKGNoYWluSWQpO1xyXG4gICAgfVxyXG4gICAgaXNDb21tdW5pdHlSZXNvdXJjZSgpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMucHJvamVjdElkID09PSBkZWZhdWx0UHJvamVjdElkKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogIENyZWF0ZXMgYSBuZXcgKipJbmZ1cmFXZWJTb2NrZXRQcm92aWRlcioqLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZ2V0V2ViU29ja2V0UHJvdmlkZXIobmV0d29yaywgcHJvamVjdElkKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBJbmZ1cmFXZWJTb2NrZXRQcm92aWRlcihuZXR3b3JrLCBwcm9qZWN0SWQpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgUmV0dXJucyBhIHByZXBhcmVkIHJlcXVlc3QgZm9yIGNvbm5lY3RpbmcgdG8gJSVuZXR3b3JrJSVcclxuICAgICAqICB3aXRoICUlcHJvamVjdElkJSUgYW5kICUlcHJvamVjdFNlY3JldCUlLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZ2V0UmVxdWVzdChuZXR3b3JrLCBwcm9qZWN0SWQsIHByb2plY3RTZWNyZXQpIHtcclxuICAgICAgICBpZiAocHJvamVjdElkID09IG51bGwpIHtcclxuICAgICAgICAgICAgcHJvamVjdElkID0gZGVmYXVsdFByb2plY3RJZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHByb2plY3RTZWNyZXQgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBwcm9qZWN0U2VjcmV0ID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IG5ldyBGZXRjaFJlcXVlc3QoYGh0dHBzOi9cXC8ke2dldEhvc3QobmV0d29yay5uYW1lKX0vdjMvJHtwcm9qZWN0SWR9YCk7XHJcbiAgICAgICAgcmVxdWVzdC5hbGxvd0d6aXAgPSB0cnVlO1xyXG4gICAgICAgIGlmIChwcm9qZWN0U2VjcmV0KSB7XHJcbiAgICAgICAgICAgIHJlcXVlc3Quc2V0Q3JlZGVudGlhbHMoXCJcIiwgcHJvamVjdFNlY3JldCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwcm9qZWN0SWQgPT09IGRlZmF1bHRQcm9qZWN0SWQpIHtcclxuICAgICAgICAgICAgcmVxdWVzdC5yZXRyeUZ1bmMgPSBhc3luYyAocmVxdWVzdCwgcmVzcG9uc2UsIGF0dGVtcHQpID0+IHtcclxuICAgICAgICAgICAgICAgIHNob3dUaHJvdHRsZU1lc3NhZ2UoXCJJbmZ1cmFQcm92aWRlclwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVxdWVzdDtcclxuICAgIH1cclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm92aWRlci1pbmZ1cmEuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-infura.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-ipcsocket-browser.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/ethers/lib.esm/providers/provider-ipcsocket-browser.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IpcSocketProvider: () => (/* binding */ IpcSocketProvider)\n/* harmony export */ });\nconst IpcSocketProvider = undefined;\r\n\r\n//# sourceMappingURL=provider-ipcsocket-browser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9wcm92aWRlcnMvcHJvdmlkZXItaXBjc29ja2V0LWJyb3dzZXIuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQzZCO0FBQzdCIiwic291cmNlcyI6WyJEOlxcRG9fYW4yXFxsZW5kaHViX3YyXFxsZW5kaHViLWZyb250ZW5kLW5leHRqc1xcbm9kZV9tb2R1bGVzXFxldGhlcnNcXGxpYi5lc21cXHByb3ZpZGVyc1xccHJvdmlkZXItaXBjc29ja2V0LWJyb3dzZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgSXBjU29ja2V0UHJvdmlkZXIgPSB1bmRlZmluZWQ7XHJcbmV4cG9ydCB7IElwY1NvY2tldFByb3ZpZGVyIH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3ZpZGVyLWlwY3NvY2tldC1icm93c2VyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-ipcsocket-browser.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-jsonrpc.js":
/*!*******************************************************************!*\
  !*** ./node_modules/ethers/lib.esm/providers/provider-jsonrpc.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsonRpcApiPollingProvider: () => (/* binding */ JsonRpcApiPollingProvider),\n/* harmony export */   JsonRpcApiProvider: () => (/* binding */ JsonRpcApiProvider),\n/* harmony export */   JsonRpcProvider: () => (/* binding */ JsonRpcProvider),\n/* harmony export */   JsonRpcSigner: () => (/* binding */ JsonRpcSigner)\n/* harmony export */ });\n/* harmony import */ var _abi_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../abi/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/abi/index.js\");\n/* harmony import */ var _address_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../address/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/address/index.js\");\n/* harmony import */ var _hash_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../hash/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/hash/index.js\");\n/* harmony import */ var _transaction_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../transaction/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/transaction/index.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/* harmony import */ var _abstract_provider_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./abstract-provider.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/abstract-provider.js\");\n/* harmony import */ var _abstract_signer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract-signer.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/abstract-signer.js\");\n/* harmony import */ var _network_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./network.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/network.js\");\n/* harmony import */ var _subscriber_filterid_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./subscriber-filterid.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/subscriber-filterid.js\");\n/* harmony import */ var _subscriber_polling_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./subscriber-polling.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/subscriber-polling.js\");\n/**\r\n *  One of the most common ways to interact with the blockchain is\r\n *  by a node running a JSON-RPC interface which can be connected to,\r\n *  based on the transport, using:\r\n *\r\n *  - HTTP or HTTPS - [[JsonRpcProvider]]\r\n *  - WebSocket - [[WebSocketProvider]]\r\n *  - IPC - [[IpcSocketProvider]]\r\n *\r\n * @_section: api/providers/jsonrpc:JSON-RPC Provider  [about-jsonrpcProvider]\r\n */\r\n// @TODO:\r\n// - Add the batching API\r\n// https://playground.open-rpc.org/?schemaUrl=https://raw.githubusercontent.com/ethereum/eth1.0-apis/assembled-spec/openrpc.json&uiSchema%5BappBar%5D%5Bui:splitView%5D=true&uiSchema%5BappBar%5D%5Bui:input%5D=false&uiSchema%5BappBar%5D%5Bui:examplesDropdown%5D=false\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Primitive = \"bigint,boolean,function,number,string,symbol\".split(/,/g);\r\n//const Methods = \"getAddress,then\".split(/,/g);\r\nfunction deepCopy(value) {\r\n    if (value == null || Primitive.indexOf(typeof (value)) >= 0) {\r\n        return value;\r\n    }\r\n    // Keep any Addressable\r\n    if (typeof (value.getAddress) === \"function\") {\r\n        return value;\r\n    }\r\n    if (Array.isArray(value)) {\r\n        return (value.map(deepCopy));\r\n    }\r\n    if (typeof (value) === \"object\") {\r\n        return Object.keys(value).reduce((accum, key) => {\r\n            accum[key] = value[key];\r\n            return accum;\r\n        }, {});\r\n    }\r\n    throw new Error(`should not happen: ${value} (${typeof (value)})`);\r\n}\r\nfunction stall(duration) {\r\n    return new Promise((resolve) => { setTimeout(resolve, duration); });\r\n}\r\nfunction getLowerCase(value) {\r\n    if (value) {\r\n        return value.toLowerCase();\r\n    }\r\n    return value;\r\n}\r\nfunction isPollable(value) {\r\n    return (value && typeof (value.pollingInterval) === \"number\");\r\n}\r\nconst defaultOptions = {\r\n    polling: false,\r\n    staticNetwork: null,\r\n    batchStallTime: 10,\r\n    batchMaxSize: (1 << 20),\r\n    batchMaxCount: 100,\r\n    cacheTimeout: 250,\r\n    pollingInterval: 4000\r\n};\r\n// @TODO: Unchecked Signers\r\nclass JsonRpcSigner extends _abstract_signer_js__WEBPACK_IMPORTED_MODULE_0__.AbstractSigner {\r\n    address;\r\n    constructor(provider, address) {\r\n        super(provider);\r\n        address = (0,_address_index_js__WEBPACK_IMPORTED_MODULE_1__.getAddress)(address);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.defineProperties)(this, { address });\r\n    }\r\n    connect(provider) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assert)(false, \"cannot reconnect JsonRpcSigner\", \"UNSUPPORTED_OPERATION\", {\r\n            operation: \"signer.connect\"\r\n        });\r\n    }\r\n    async getAddress() {\r\n        return this.address;\r\n    }\r\n    // JSON-RPC will automatially fill in nonce, etc. so we just check from\r\n    async populateTransaction(tx) {\r\n        return await this.populateCall(tx);\r\n    }\r\n    // Returns just the hash of the transaction after sent, which is what\r\n    // the bare JSON-RPC API does;\r\n    async sendUncheckedTransaction(_tx) {\r\n        const tx = deepCopy(_tx);\r\n        const promises = [];\r\n        // Make sure the from matches the sender\r\n        if (tx.from) {\r\n            const _from = tx.from;\r\n            promises.push((async () => {\r\n                const from = await (0,_address_index_js__WEBPACK_IMPORTED_MODULE_1__.resolveAddress)(_from, this.provider);\r\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(from != null && from.toLowerCase() === this.address.toLowerCase(), \"from address mismatch\", \"transaction\", _tx);\r\n                tx.from = from;\r\n            })());\r\n        }\r\n        else {\r\n            tx.from = this.address;\r\n        }\r\n        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\r\n        // wishes to use this, it is easy to specify explicitly, otherwise\r\n        // we look it up for them.\r\n        if (tx.gasLimit == null) {\r\n            promises.push((async () => {\r\n                tx.gasLimit = await this.provider.estimateGas({ ...tx, from: this.address });\r\n            })());\r\n        }\r\n        // The address may be an ENS name or Addressable\r\n        if (tx.to != null) {\r\n            const _to = tx.to;\r\n            promises.push((async () => {\r\n                tx.to = await (0,_address_index_js__WEBPACK_IMPORTED_MODULE_1__.resolveAddress)(_to, this.provider);\r\n            })());\r\n        }\r\n        // Wait until all of our properties are filled in\r\n        if (promises.length) {\r\n            await Promise.all(promises);\r\n        }\r\n        const hexTx = this.provider.getRpcTransaction(tx);\r\n        return this.provider.send(\"eth_sendTransaction\", [hexTx]);\r\n    }\r\n    async sendTransaction(tx) {\r\n        // This cannot be mined any earlier than any recent block\r\n        const blockNumber = await this.provider.getBlockNumber();\r\n        // Send the transaction\r\n        const hash = await this.sendUncheckedTransaction(tx);\r\n        // Unfortunately, JSON-RPC only provides and opaque transaction hash\r\n        // for a response, and we need the actual transaction, so we poll\r\n        // for it; it should show up very quickly\r\n        return await (new Promise((resolve, reject) => {\r\n            const timeouts = [1000, 100];\r\n            let invalids = 0;\r\n            const checkTx = async () => {\r\n                try {\r\n                    // Try getting the transaction\r\n                    const tx = await this.provider.getTransaction(hash);\r\n                    if (tx != null) {\r\n                        resolve(tx.replaceableTransaction(blockNumber));\r\n                        return;\r\n                    }\r\n                }\r\n                catch (error) {\r\n                    // If we were cancelled: stop polling.\r\n                    // If the data is bad: the node returns bad transactions\r\n                    // If the network changed: calling again will also fail\r\n                    // If unsupported: likely destroyed\r\n                    if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.isError)(error, \"CANCELLED\") || (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.isError)(error, \"BAD_DATA\") ||\r\n                        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.isError)(error, \"NETWORK_ERROR\") || (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.isError)(error, \"UNSUPPORTED_OPERATION\")) {\r\n                        if (error.info == null) {\r\n                            error.info = {};\r\n                        }\r\n                        error.info.sendTransactionHash = hash;\r\n                        reject(error);\r\n                        return;\r\n                    }\r\n                    // Stop-gap for misbehaving backends; see #4513\r\n                    if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.isError)(error, \"INVALID_ARGUMENT\")) {\r\n                        invalids++;\r\n                        if (error.info == null) {\r\n                            error.info = {};\r\n                        }\r\n                        error.info.sendTransactionHash = hash;\r\n                        if (invalids > 10) {\r\n                            reject(error);\r\n                            return;\r\n                        }\r\n                    }\r\n                    // Notify anyone that cares; but we will try again, since\r\n                    // it is likely an intermittent service error\r\n                    this.provider.emit(\"error\", (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.makeError)(\"failed to fetch transation after sending (will try again)\", \"UNKNOWN_ERROR\", { error }));\r\n                }\r\n                // Wait another 4 seconds\r\n                this.provider._setTimeout(() => { checkTx(); }, timeouts.pop() || 4000);\r\n            };\r\n            checkTx();\r\n        }));\r\n    }\r\n    async signTransaction(_tx) {\r\n        const tx = deepCopy(_tx);\r\n        // Make sure the from matches the sender\r\n        if (tx.from) {\r\n            const from = await (0,_address_index_js__WEBPACK_IMPORTED_MODULE_1__.resolveAddress)(tx.from, this.provider);\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(from != null && from.toLowerCase() === this.address.toLowerCase(), \"from address mismatch\", \"transaction\", _tx);\r\n            tx.from = from;\r\n        }\r\n        else {\r\n            tx.from = this.address;\r\n        }\r\n        const hexTx = this.provider.getRpcTransaction(tx);\r\n        return await this.provider.send(\"eth_signTransaction\", [hexTx]);\r\n    }\r\n    async signMessage(_message) {\r\n        const message = ((typeof (_message) === \"string\") ? (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.toUtf8Bytes)(_message) : _message);\r\n        return await this.provider.send(\"personal_sign\", [\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.hexlify)(message), this.address.toLowerCase()\r\n        ]);\r\n    }\r\n    async signTypedData(domain, types, _value) {\r\n        const value = deepCopy(_value);\r\n        // Populate any ENS names (in-place)\r\n        const populated = await _hash_index_js__WEBPACK_IMPORTED_MODULE_3__.TypedDataEncoder.resolveNames(domain, types, value, async (value) => {\r\n            const address = await (0,_address_index_js__WEBPACK_IMPORTED_MODULE_1__.resolveAddress)(value);\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(address != null, \"TypedData does not support null address\", \"value\", value);\r\n            return address;\r\n        });\r\n        return await this.provider.send(\"eth_signTypedData_v4\", [\r\n            this.address.toLowerCase(),\r\n            JSON.stringify(_hash_index_js__WEBPACK_IMPORTED_MODULE_3__.TypedDataEncoder.getPayload(populated.domain, types, populated.value))\r\n        ]);\r\n    }\r\n    async unlock(password) {\r\n        return this.provider.send(\"personal_unlockAccount\", [\r\n            this.address.toLowerCase(), password, null\r\n        ]);\r\n    }\r\n    // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\r\n    async _legacySignMessage(_message) {\r\n        const message = ((typeof (_message) === \"string\") ? (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.toUtf8Bytes)(_message) : _message);\r\n        return await this.provider.send(\"eth_sign\", [\r\n            this.address.toLowerCase(), (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.hexlify)(message)\r\n        ]);\r\n    }\r\n}\r\n/**\r\n *  The JsonRpcApiProvider is an abstract class and **MUST** be\r\n *  sub-classed.\r\n *\r\n *  It provides the base for all JSON-RPC-based Provider interaction.\r\n *\r\n *  Sub-classing Notes:\r\n *  - a sub-class MUST override _send\r\n *  - a sub-class MUST call the `_start()` method once connected\r\n */\r\nclass JsonRpcApiProvider extends _abstract_provider_js__WEBPACK_IMPORTED_MODULE_4__.AbstractProvider {\r\n    #options;\r\n    // The next ID to use for the JSON-RPC ID field\r\n    #nextId;\r\n    // Payloads are queued and triggered in batches using the drainTimer\r\n    #payloads;\r\n    #drainTimer;\r\n    #notReady;\r\n    #network;\r\n    #pendingDetectNetwork;\r\n    #scheduleDrain() {\r\n        if (this.#drainTimer) {\r\n            return;\r\n        }\r\n        // If we aren't using batching, no harm in sending it immediately\r\n        const stallTime = (this._getOption(\"batchMaxCount\") === 1) ? 0 : this._getOption(\"batchStallTime\");\r\n        this.#drainTimer = setTimeout(() => {\r\n            this.#drainTimer = null;\r\n            const payloads = this.#payloads;\r\n            this.#payloads = [];\r\n            while (payloads.length) {\r\n                // Create payload batches that satisfy our batch constraints\r\n                const batch = [(payloads.shift())];\r\n                while (payloads.length) {\r\n                    if (batch.length === this.#options.batchMaxCount) {\r\n                        break;\r\n                    }\r\n                    batch.push((payloads.shift()));\r\n                    const bytes = JSON.stringify(batch.map((p) => p.payload));\r\n                    if (bytes.length > this.#options.batchMaxSize) {\r\n                        payloads.unshift((batch.pop()));\r\n                        break;\r\n                    }\r\n                }\r\n                // Process the result to each payload\r\n                (async () => {\r\n                    const payload = ((batch.length === 1) ? batch[0].payload : batch.map((p) => p.payload));\r\n                    this.emit(\"debug\", { action: \"sendRpcPayload\", payload });\r\n                    try {\r\n                        const result = await this._send(payload);\r\n                        this.emit(\"debug\", { action: \"receiveRpcResult\", result });\r\n                        // Process results in batch order\r\n                        for (const { resolve, reject, payload } of batch) {\r\n                            if (this.destroyed) {\r\n                                reject((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.makeError)(\"provider destroyed; cancelled request\", \"UNSUPPORTED_OPERATION\", { operation: payload.method }));\r\n                                continue;\r\n                            }\r\n                            // Find the matching result\r\n                            const resp = result.filter((r) => (r.id === payload.id))[0];\r\n                            // No result; the node failed us in unexpected ways\r\n                            if (resp == null) {\r\n                                const error = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.makeError)(\"missing response for request\", \"BAD_DATA\", {\r\n                                    value: result, info: { payload }\r\n                                });\r\n                                this.emit(\"error\", error);\r\n                                reject(error);\r\n                                continue;\r\n                            }\r\n                            // The response is an error\r\n                            if (\"error\" in resp) {\r\n                                reject(this.getRpcError(payload, resp));\r\n                                continue;\r\n                            }\r\n                            // All good; send the result\r\n                            resolve(resp.result);\r\n                        }\r\n                    }\r\n                    catch (error) {\r\n                        this.emit(\"debug\", { action: \"receiveRpcError\", error });\r\n                        for (const { reject } of batch) {\r\n                            // @TODO: augment the error with the payload\r\n                            reject(error);\r\n                        }\r\n                    }\r\n                })();\r\n            }\r\n        }, stallTime);\r\n    }\r\n    constructor(network, options) {\r\n        super(network, options);\r\n        this.#nextId = 1;\r\n        this.#options = Object.assign({}, defaultOptions, options || {});\r\n        this.#payloads = [];\r\n        this.#drainTimer = null;\r\n        this.#network = null;\r\n        this.#pendingDetectNetwork = null;\r\n        {\r\n            let resolve = null;\r\n            const promise = new Promise((_resolve) => {\r\n                resolve = _resolve;\r\n            });\r\n            this.#notReady = { promise, resolve };\r\n        }\r\n        const staticNetwork = this._getOption(\"staticNetwork\");\r\n        if (typeof (staticNetwork) === \"boolean\") {\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(!staticNetwork || network !== \"any\", \"staticNetwork cannot be used on special network 'any'\", \"options\", options);\r\n            if (staticNetwork && network != null) {\r\n                this.#network = _network_js__WEBPACK_IMPORTED_MODULE_5__.Network.from(network);\r\n            }\r\n        }\r\n        else if (staticNetwork) {\r\n            // Make sure any static network is compatbile with the provided netwrok\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(network == null || staticNetwork.matches(network), \"staticNetwork MUST match network object\", \"options\", options);\r\n            this.#network = staticNetwork;\r\n        }\r\n    }\r\n    /**\r\n     *  Returns the value associated with the option %%key%%.\r\n     *\r\n     *  Sub-classes can use this to inquire about configuration options.\r\n     */\r\n    _getOption(key) {\r\n        return this.#options[key];\r\n    }\r\n    /**\r\n     *  Gets the [[Network]] this provider has committed to. On each call, the network\r\n     *  is detected, and if it has changed, the call will reject.\r\n     */\r\n    get _network() {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assert)(this.#network, \"network is not available yet\", \"NETWORK_ERROR\");\r\n        return this.#network;\r\n    }\r\n    /**\r\n     *  Resolves to the non-normalized value by performing %%req%%.\r\n     *\r\n     *  Sub-classes may override this to modify behavior of actions,\r\n     *  and should generally call ``super._perform`` as a fallback.\r\n     */\r\n    async _perform(req) {\r\n        // Legacy networks do not like the type field being passed along (which\r\n        // is fair), so we delete type if it is 0 and a non-EIP-1559 network\r\n        if (req.method === \"call\" || req.method === \"estimateGas\") {\r\n            let tx = req.transaction;\r\n            if (tx && tx.type != null && (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getBigInt)(tx.type)) {\r\n                // If there are no EIP-1559 or newer properties, it might be pre-EIP-1559\r\n                if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\r\n                    const feeData = await this.getFeeData();\r\n                    if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\r\n                        // Network doesn't know about EIP-1559 (and hence type)\r\n                        req = Object.assign({}, req, {\r\n                            transaction: Object.assign({}, tx, { type: undefined })\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const request = this.getRpcRequest(req);\r\n        if (request != null) {\r\n            return await this.send(request.method, request.args);\r\n        }\r\n        return super._perform(req);\r\n    }\r\n    /**\r\n     *  Sub-classes may override this; it detects the *actual* network that\r\n     *  we are **currently** connected to.\r\n     *\r\n     *  Keep in mind that [[send]] may only be used once [[ready]], otherwise the\r\n     *  _send primitive must be used instead.\r\n     */\r\n    async _detectNetwork() {\r\n        const network = this._getOption(\"staticNetwork\");\r\n        if (network) {\r\n            if (network === true) {\r\n                if (this.#network) {\r\n                    return this.#network;\r\n                }\r\n            }\r\n            else {\r\n                return network;\r\n            }\r\n        }\r\n        if (this.#pendingDetectNetwork) {\r\n            return await this.#pendingDetectNetwork;\r\n        }\r\n        // If we are ready, use ``send``, which enabled requests to be batched\r\n        if (this.ready) {\r\n            this.#pendingDetectNetwork = (async () => {\r\n                try {\r\n                    const result = _network_js__WEBPACK_IMPORTED_MODULE_5__.Network.from((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getBigInt)(await this.send(\"eth_chainId\", [])));\r\n                    this.#pendingDetectNetwork = null;\r\n                    return result;\r\n                }\r\n                catch (error) {\r\n                    this.#pendingDetectNetwork = null;\r\n                    throw error;\r\n                }\r\n            })();\r\n            return await this.#pendingDetectNetwork;\r\n        }\r\n        // We are not ready yet; use the primitive _send\r\n        this.#pendingDetectNetwork = (async () => {\r\n            const payload = {\r\n                id: this.#nextId++, method: \"eth_chainId\", params: [], jsonrpc: \"2.0\"\r\n            };\r\n            this.emit(\"debug\", { action: \"sendRpcPayload\", payload });\r\n            let result;\r\n            try {\r\n                result = (await this._send(payload))[0];\r\n                this.#pendingDetectNetwork = null;\r\n            }\r\n            catch (error) {\r\n                this.#pendingDetectNetwork = null;\r\n                this.emit(\"debug\", { action: \"receiveRpcError\", error });\r\n                throw error;\r\n            }\r\n            this.emit(\"debug\", { action: \"receiveRpcResult\", result });\r\n            if (\"result\" in result) {\r\n                return _network_js__WEBPACK_IMPORTED_MODULE_5__.Network.from((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getBigInt)(result.result));\r\n            }\r\n            throw this.getRpcError(payload, result);\r\n        })();\r\n        return await this.#pendingDetectNetwork;\r\n    }\r\n    /**\r\n     *  Sub-classes **MUST** call this. Until [[_start]] has been called, no calls\r\n     *  will be passed to [[_send]] from [[send]]. If it is overridden, then\r\n     *  ``super._start()`` **MUST** be called.\r\n     *\r\n     *  Calling it multiple times is safe and has no effect.\r\n     */\r\n    _start() {\r\n        if (this.#notReady == null || this.#notReady.resolve == null) {\r\n            return;\r\n        }\r\n        this.#notReady.resolve();\r\n        this.#notReady = null;\r\n        (async () => {\r\n            // Bootstrap the network\r\n            while (this.#network == null && !this.destroyed) {\r\n                try {\r\n                    this.#network = await this._detectNetwork();\r\n                }\r\n                catch (error) {\r\n                    if (this.destroyed) {\r\n                        break;\r\n                    }\r\n                    console.log(\"JsonRpcProvider failed to detect network and cannot start up; retry in 1s (perhaps the URL is wrong or the node is not started)\");\r\n                    this.emit(\"error\", (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.makeError)(\"failed to bootstrap network detection\", \"NETWORK_ERROR\", { event: \"initial-network-discovery\", info: { error } }));\r\n                    await stall(1000);\r\n                }\r\n            }\r\n            // Start dispatching requests\r\n            this.#scheduleDrain();\r\n        })();\r\n    }\r\n    /**\r\n     *  Resolves once the [[_start]] has been called. This can be used in\r\n     *  sub-classes to defer sending data until the connection has been\r\n     *  established.\r\n     */\r\n    async _waitUntilReady() {\r\n        if (this.#notReady == null) {\r\n            return;\r\n        }\r\n        return await this.#notReady.promise;\r\n    }\r\n    /**\r\n     *  Return a Subscriber that will manage the %%sub%%.\r\n     *\r\n     *  Sub-classes may override this to modify the behavior of\r\n     *  subscription management.\r\n     */\r\n    _getSubscriber(sub) {\r\n        // Pending Filters aren't availble via polling\r\n        if (sub.type === \"pending\") {\r\n            return new _subscriber_filterid_js__WEBPACK_IMPORTED_MODULE_6__.FilterIdPendingSubscriber(this);\r\n        }\r\n        if (sub.type === \"event\") {\r\n            if (this._getOption(\"polling\")) {\r\n                return new _subscriber_polling_js__WEBPACK_IMPORTED_MODULE_7__.PollingEventSubscriber(this, sub.filter);\r\n            }\r\n            return new _subscriber_filterid_js__WEBPACK_IMPORTED_MODULE_6__.FilterIdEventSubscriber(this, sub.filter);\r\n        }\r\n        // Orphaned Logs are handled automatically, by the filter, since\r\n        // logs with removed are emitted by it\r\n        if (sub.type === \"orphan\" && sub.filter.orphan === \"drop-log\") {\r\n            return new _abstract_provider_js__WEBPACK_IMPORTED_MODULE_4__.UnmanagedSubscriber(\"orphan\");\r\n        }\r\n        return super._getSubscriber(sub);\r\n    }\r\n    /**\r\n     *  Returns true only if the [[_start]] has been called.\r\n     */\r\n    get ready() { return this.#notReady == null; }\r\n    /**\r\n     *  Returns %%tx%% as a normalized JSON-RPC transaction request,\r\n     *  which has all values hexlified and any numeric values converted\r\n     *  to Quantity values.\r\n     */\r\n    getRpcTransaction(tx) {\r\n        const result = {};\r\n        // JSON-RPC now requires numeric values to be \"quantity\" values\r\n        [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach((key) => {\r\n            if (tx[key] == null) {\r\n                return;\r\n            }\r\n            let dstKey = key;\r\n            if (key === \"gasLimit\") {\r\n                dstKey = \"gas\";\r\n            }\r\n            result[dstKey] = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.toQuantity)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getBigInt)(tx[key], `tx.${key}`));\r\n        });\r\n        // Make sure addresses and data are lowercase\r\n        [\"from\", \"to\", \"data\"].forEach((key) => {\r\n            if (tx[key] == null) {\r\n                return;\r\n            }\r\n            result[key] = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.hexlify)(tx[key]);\r\n        });\r\n        // Normalize the access list object\r\n        if (tx.accessList) {\r\n            result[\"accessList\"] = (0,_transaction_index_js__WEBPACK_IMPORTED_MODULE_8__.accessListify)(tx.accessList);\r\n        }\r\n        if (tx.blobVersionedHashes) {\r\n            // @TODO: Remove this <any> case once EIP-4844 added to prepared tx\r\n            result[\"blobVersionedHashes\"] = tx.blobVersionedHashes.map(h => h.toLowerCase());\r\n        }\r\n        if (tx.authorizationList) {\r\n            result[\"authorizationList\"] = tx.authorizationList.map((_a) => {\r\n                const a = (0,_transaction_index_js__WEBPACK_IMPORTED_MODULE_8__.authorizationify)(_a);\r\n                return {\r\n                    address: a.address,\r\n                    nonce: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.toQuantity)(a.nonce),\r\n                    chainId: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.toQuantity)(a.chainId),\r\n                    yParity: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.toQuantity)(a.signature.yParity),\r\n                    r: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.toQuantity)(a.signature.r),\r\n                    s: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.toQuantity)(a.signature.s),\r\n                };\r\n            });\r\n        }\r\n        // @TODO: blobs should probably also be copied over, optionally\r\n        // accounting for the kzg property to backfill blobVersionedHashes\r\n        // using the commitment. Or should that be left as an exercise to\r\n        // the caller?\r\n        return result;\r\n    }\r\n    /**\r\n     *  Returns the request method and arguments required to perform\r\n     *  %%req%%.\r\n     */\r\n    getRpcRequest(req) {\r\n        switch (req.method) {\r\n            case \"chainId\":\r\n                return { method: \"eth_chainId\", args: [] };\r\n            case \"getBlockNumber\":\r\n                return { method: \"eth_blockNumber\", args: [] };\r\n            case \"getGasPrice\":\r\n                return { method: \"eth_gasPrice\", args: [] };\r\n            case \"getPriorityFee\":\r\n                return { method: \"eth_maxPriorityFeePerGas\", args: [] };\r\n            case \"getBalance\":\r\n                return {\r\n                    method: \"eth_getBalance\",\r\n                    args: [getLowerCase(req.address), req.blockTag]\r\n                };\r\n            case \"getTransactionCount\":\r\n                return {\r\n                    method: \"eth_getTransactionCount\",\r\n                    args: [getLowerCase(req.address), req.blockTag]\r\n                };\r\n            case \"getCode\":\r\n                return {\r\n                    method: \"eth_getCode\",\r\n                    args: [getLowerCase(req.address), req.blockTag]\r\n                };\r\n            case \"getStorage\":\r\n                return {\r\n                    method: \"eth_getStorageAt\",\r\n                    args: [\r\n                        getLowerCase(req.address),\r\n                        (\"0x\" + req.position.toString(16)),\r\n                        req.blockTag\r\n                    ]\r\n                };\r\n            case \"broadcastTransaction\":\r\n                return {\r\n                    method: \"eth_sendRawTransaction\",\r\n                    args: [req.signedTransaction]\r\n                };\r\n            case \"getBlock\":\r\n                if (\"blockTag\" in req) {\r\n                    return {\r\n                        method: \"eth_getBlockByNumber\",\r\n                        args: [req.blockTag, !!req.includeTransactions]\r\n                    };\r\n                }\r\n                else if (\"blockHash\" in req) {\r\n                    return {\r\n                        method: \"eth_getBlockByHash\",\r\n                        args: [req.blockHash, !!req.includeTransactions]\r\n                    };\r\n                }\r\n                break;\r\n            case \"getTransaction\":\r\n                return {\r\n                    method: \"eth_getTransactionByHash\",\r\n                    args: [req.hash]\r\n                };\r\n            case \"getTransactionReceipt\":\r\n                return {\r\n                    method: \"eth_getTransactionReceipt\",\r\n                    args: [req.hash]\r\n                };\r\n            case \"call\":\r\n                return {\r\n                    method: \"eth_call\",\r\n                    args: [this.getRpcTransaction(req.transaction), req.blockTag]\r\n                };\r\n            case \"estimateGas\": {\r\n                return {\r\n                    method: \"eth_estimateGas\",\r\n                    args: [this.getRpcTransaction(req.transaction)]\r\n                };\r\n            }\r\n            case \"getLogs\":\r\n                if (req.filter && req.filter.address != null) {\r\n                    if (Array.isArray(req.filter.address)) {\r\n                        req.filter.address = req.filter.address.map(getLowerCase);\r\n                    }\r\n                    else {\r\n                        req.filter.address = getLowerCase(req.filter.address);\r\n                    }\r\n                }\r\n                return { method: \"eth_getLogs\", args: [req.filter] };\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     *  Returns an ethers-style Error for the given JSON-RPC error\r\n     *  %%payload%%, coalescing the various strings and error shapes\r\n     *  that different nodes return, coercing them into a machine-readable\r\n     *  standardized error.\r\n     */\r\n    getRpcError(payload, _error) {\r\n        const { method } = payload;\r\n        const { error } = _error;\r\n        if (method === \"eth_estimateGas\" && error.message) {\r\n            const msg = error.message;\r\n            if (!msg.match(/revert/i) && msg.match(/insufficient funds/i)) {\r\n                return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.makeError)(\"insufficient funds\", \"INSUFFICIENT_FUNDS\", {\r\n                    transaction: (payload.params[0]),\r\n                    info: { payload, error }\r\n                });\r\n            }\r\n            else if (msg.match(/nonce/i) && msg.match(/too low/i)) {\r\n                return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.makeError)(\"nonce has already been used\", \"NONCE_EXPIRED\", {\r\n                    transaction: (payload.params[0]),\r\n                    info: { payload, error }\r\n                });\r\n            }\r\n        }\r\n        if (method === \"eth_call\" || method === \"eth_estimateGas\") {\r\n            const result = spelunkData(error);\r\n            const e = _abi_index_js__WEBPACK_IMPORTED_MODULE_9__.AbiCoder.getBuiltinCallException((method === \"eth_call\") ? \"call\" : \"estimateGas\", (payload.params[0]), (result ? result.data : null));\r\n            e.info = { error, payload };\r\n            return e;\r\n        }\r\n        // Only estimateGas and call can return arbitrary contract-defined text, so now we\r\n        // we can process text safely.\r\n        const message = JSON.stringify(spelunkMessage(error));\r\n        if (typeof (error.message) === \"string\" && error.message.match(/user denied|ethers-user-denied/i)) {\r\n            const actionMap = {\r\n                eth_sign: \"signMessage\",\r\n                personal_sign: \"signMessage\",\r\n                eth_signTypedData_v4: \"signTypedData\",\r\n                eth_signTransaction: \"signTransaction\",\r\n                eth_sendTransaction: \"sendTransaction\",\r\n                eth_requestAccounts: \"requestAccess\",\r\n                wallet_requestAccounts: \"requestAccess\",\r\n            };\r\n            return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.makeError)(`user rejected action`, \"ACTION_REJECTED\", {\r\n                action: (actionMap[method] || \"unknown\"),\r\n                reason: \"rejected\",\r\n                info: { payload, error }\r\n            });\r\n        }\r\n        if (method === \"eth_sendRawTransaction\" || method === \"eth_sendTransaction\") {\r\n            const transaction = (payload.params[0]);\r\n            if (message.match(/insufficient funds|base fee exceeds gas limit/i)) {\r\n                return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.makeError)(\"insufficient funds for intrinsic transaction cost\", \"INSUFFICIENT_FUNDS\", {\r\n                    transaction, info: { error }\r\n                });\r\n            }\r\n            if (message.match(/nonce/i) && message.match(/too low/i)) {\r\n                return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.makeError)(\"nonce has already been used\", \"NONCE_EXPIRED\", { transaction, info: { error } });\r\n            }\r\n            // \"replacement transaction underpriced\"\r\n            if (message.match(/replacement transaction/i) && message.match(/underpriced/i)) {\r\n                return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.makeError)(\"replacement fee too low\", \"REPLACEMENT_UNDERPRICED\", { transaction, info: { error } });\r\n            }\r\n            if (message.match(/only replay-protected/i)) {\r\n                return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.makeError)(\"legacy pre-eip-155 transactions not supported\", \"UNSUPPORTED_OPERATION\", {\r\n                    operation: method, info: { transaction, info: { error } }\r\n                });\r\n            }\r\n        }\r\n        let unsupported = !!message.match(/the method .* does not exist/i);\r\n        if (!unsupported) {\r\n            if (error && error.details && error.details.startsWith(\"Unauthorized method:\")) {\r\n                unsupported = true;\r\n            }\r\n        }\r\n        if (unsupported) {\r\n            return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.makeError)(\"unsupported operation\", \"UNSUPPORTED_OPERATION\", {\r\n                operation: payload.method, info: { error, payload }\r\n            });\r\n        }\r\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.makeError)(\"could not coalesce error\", \"UNKNOWN_ERROR\", { error, payload });\r\n    }\r\n    /**\r\n     *  Requests the %%method%% with %%params%% via the JSON-RPC protocol\r\n     *  over the underlying channel. This can be used to call methods\r\n     *  on the backend that do not have a high-level API within the Provider\r\n     *  API.\r\n     *\r\n     *  This method queues requests according to the batch constraints\r\n     *  in the options, assigns the request a unique ID.\r\n     *\r\n     *  **Do NOT override** this method in sub-classes; instead\r\n     *  override [[_send]] or force the options values in the\r\n     *  call to the constructor to modify this method's behavior.\r\n     */\r\n    send(method, params) {\r\n        // @TODO: cache chainId?? purge on switch_networks\r\n        // We have been destroyed; no operations are supported anymore\r\n        if (this.destroyed) {\r\n            return Promise.reject((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.makeError)(\"provider destroyed; cancelled request\", \"UNSUPPORTED_OPERATION\", { operation: method }));\r\n        }\r\n        const id = this.#nextId++;\r\n        const promise = new Promise((resolve, reject) => {\r\n            this.#payloads.push({\r\n                resolve, reject,\r\n                payload: { method, params, id, jsonrpc: \"2.0\" }\r\n            });\r\n        });\r\n        // If there is not a pending drainTimer, set one\r\n        this.#scheduleDrain();\r\n        return promise;\r\n    }\r\n    /**\r\n     *  Resolves to the [[Signer]] account for  %%address%% managed by\r\n     *  the client.\r\n     *\r\n     *  If the %%address%% is a number, it is used as an index in the\r\n     *  the accounts from [[listAccounts]].\r\n     *\r\n     *  This can only be used on clients which manage accounts (such as\r\n     *  Geth with imported account or MetaMask).\r\n     *\r\n     *  Throws if the account doesn't exist.\r\n     */\r\n    async getSigner(address) {\r\n        if (address == null) {\r\n            address = 0;\r\n        }\r\n        const accountsPromise = this.send(\"eth_accounts\", []);\r\n        // Account index\r\n        if (typeof (address) === \"number\") {\r\n            const accounts = (await accountsPromise);\r\n            if (address >= accounts.length) {\r\n                throw new Error(\"no such account\");\r\n            }\r\n            return new JsonRpcSigner(this, accounts[address]);\r\n        }\r\n        const { accounts } = await (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.resolveProperties)({\r\n            network: this.getNetwork(),\r\n            accounts: accountsPromise\r\n        });\r\n        // Account address\r\n        address = (0,_address_index_js__WEBPACK_IMPORTED_MODULE_1__.getAddress)(address);\r\n        for (const account of accounts) {\r\n            if ((0,_address_index_js__WEBPACK_IMPORTED_MODULE_1__.getAddress)(account) === address) {\r\n                return new JsonRpcSigner(this, address);\r\n            }\r\n        }\r\n        throw new Error(\"invalid account\");\r\n    }\r\n    async listAccounts() {\r\n        const accounts = await this.send(\"eth_accounts\", []);\r\n        return accounts.map((a) => new JsonRpcSigner(this, a));\r\n    }\r\n    destroy() {\r\n        // Stop processing requests\r\n        if (this.#drainTimer) {\r\n            clearTimeout(this.#drainTimer);\r\n            this.#drainTimer = null;\r\n        }\r\n        // Cancel all pending requests\r\n        for (const { payload, reject } of this.#payloads) {\r\n            reject((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.makeError)(\"provider destroyed; cancelled request\", \"UNSUPPORTED_OPERATION\", { operation: payload.method }));\r\n        }\r\n        this.#payloads = [];\r\n        // Parent clean-up\r\n        super.destroy();\r\n    }\r\n}\r\n// @TODO: remove this in v7, it is not exported because this functionality\r\n// is exposed in the JsonRpcApiProvider by setting polling to true. It should\r\n// be safe to remove regardless, because it isn't reachable, but just in case.\r\n/**\r\n *  @_ignore:\r\n */\r\nclass JsonRpcApiPollingProvider extends JsonRpcApiProvider {\r\n    #pollingInterval;\r\n    constructor(network, options) {\r\n        super(network, options);\r\n        let pollingInterval = this._getOption(\"pollingInterval\");\r\n        if (pollingInterval == null) {\r\n            pollingInterval = defaultOptions.pollingInterval;\r\n        }\r\n        this.#pollingInterval = pollingInterval;\r\n    }\r\n    _getSubscriber(sub) {\r\n        const subscriber = super._getSubscriber(sub);\r\n        if (isPollable(subscriber)) {\r\n            subscriber.pollingInterval = this.#pollingInterval;\r\n        }\r\n        return subscriber;\r\n    }\r\n    /**\r\n     *  The polling interval (default: 4000 ms)\r\n     */\r\n    get pollingInterval() { return this.#pollingInterval; }\r\n    set pollingInterval(value) {\r\n        if (!Number.isInteger(value) || value < 0) {\r\n            throw new Error(\"invalid interval\");\r\n        }\r\n        this.#pollingInterval = value;\r\n        this._forEachSubscriber((sub) => {\r\n            if (isPollable(sub)) {\r\n                sub.pollingInterval = this.#pollingInterval;\r\n            }\r\n        });\r\n    }\r\n}\r\n/**\r\n *  The JsonRpcProvider is one of the most common Providers,\r\n *  which performs all operations over HTTP (or HTTPS) requests.\r\n *\r\n *  Events are processed by polling the backend for the current block\r\n *  number; when it advances, all block-base events are then checked\r\n *  for updates.\r\n */\r\nclass JsonRpcProvider extends JsonRpcApiPollingProvider {\r\n    #connect;\r\n    constructor(url, network, options) {\r\n        if (url == null) {\r\n            url = \"http:/\\/localhost:8545\";\r\n        }\r\n        super(network, options);\r\n        if (typeof (url) === \"string\") {\r\n            this.#connect = new _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.FetchRequest(url);\r\n        }\r\n        else {\r\n            this.#connect = url.clone();\r\n        }\r\n    }\r\n    _getConnection() {\r\n        return this.#connect.clone();\r\n    }\r\n    async send(method, params) {\r\n        // All requests are over HTTP, so we can just start handling requests\r\n        // We do this here rather than the constructor so that we don't send any\r\n        // requests to the network (i.e. eth_chainId) until we absolutely have to.\r\n        await this._start();\r\n        return await super.send(method, params);\r\n    }\r\n    async _send(payload) {\r\n        // Configure a POST connection for the requested method\r\n        const request = this._getConnection();\r\n        request.body = JSON.stringify(payload);\r\n        request.setHeader(\"content-type\", \"application/json\");\r\n        const response = await request.send();\r\n        response.assertOk();\r\n        let resp = response.bodyJson;\r\n        if (!Array.isArray(resp)) {\r\n            resp = [resp];\r\n        }\r\n        return resp;\r\n    }\r\n}\r\nfunction spelunkData(value) {\r\n    if (value == null) {\r\n        return null;\r\n    }\r\n    // These *are* the droids we're looking for.\r\n    if (typeof (value.message) === \"string\" && value.message.match(/revert/i) && (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.isHexString)(value.data)) {\r\n        return { message: value.message, data: value.data };\r\n    }\r\n    // Spelunk further...\r\n    if (typeof (value) === \"object\") {\r\n        for (const key in value) {\r\n            const result = spelunkData(value[key]);\r\n            if (result) {\r\n                return result;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    // Might be a JSON string we can further descend...\r\n    if (typeof (value) === \"string\") {\r\n        try {\r\n            return spelunkData(JSON.parse(value));\r\n        }\r\n        catch (error) { }\r\n    }\r\n    return null;\r\n}\r\nfunction _spelunkMessage(value, result) {\r\n    if (value == null) {\r\n        return;\r\n    }\r\n    // These *are* the droids we're looking for.\r\n    if (typeof (value.message) === \"string\") {\r\n        result.push(value.message);\r\n    }\r\n    // Spelunk further...\r\n    if (typeof (value) === \"object\") {\r\n        for (const key in value) {\r\n            _spelunkMessage(value[key], result);\r\n        }\r\n    }\r\n    // Might be a JSON string we can further descend...\r\n    if (typeof (value) === \"string\") {\r\n        try {\r\n            return _spelunkMessage(JSON.parse(value), result);\r\n        }\r\n        catch (error) { }\r\n    }\r\n}\r\nfunction spelunkMessage(value) {\r\n    const result = [];\r\n    _spelunkMessage(value, result);\r\n    return result;\r\n}\r\n//# sourceMappingURL=provider-jsonrpc.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-jsonrpc.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-pocket.js":
/*!******************************************************************!*\
  !*** ./node_modules/ethers/lib.esm/providers/provider-pocket.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PocketProvider: () => (/* binding */ PocketProvider)\n/* harmony export */ });\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/* harmony import */ var _community_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./community.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/community.js\");\n/* harmony import */ var _network_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./network.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/network.js\");\n/* harmony import */ var _provider_jsonrpc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./provider-jsonrpc.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-jsonrpc.js\");\n/**\r\n *  [[link-pocket]] provides a third-party service for connecting to\r\n *  various blockchains over JSON-RPC.\r\n *\r\n *  **Supported Networks**\r\n *\r\n *  - Ethereum Mainnet (``mainnet``)\r\n *  - Goerli Testnet (``goerli``)\r\n *  - Polygon (``matic``)\r\n *  - Arbitrum (``arbitrum``)\r\n *\r\n *  @_subsection: api/providers/thirdparty:Pocket  [providers-pocket]\r\n */\r\n\r\n\r\n\r\n\r\nconst defaultApplicationId = \"62e1ad51b37b8e00394bda3b\";\r\nfunction getHost(name) {\r\n    switch (name) {\r\n        case \"mainnet\":\r\n            return \"eth-mainnet.gateway.pokt.network\";\r\n        case \"goerli\":\r\n            return \"eth-goerli.gateway.pokt.network\";\r\n        case \"matic\":\r\n            return \"poly-mainnet.gateway.pokt.network\";\r\n        case \"matic-mumbai\":\r\n            return \"polygon-mumbai-rpc.gateway.pokt.network\";\r\n    }\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"unsupported network\", \"network\", name);\r\n}\r\n/**\r\n *  The **PocketProvider** connects to the [[link-pocket]]\r\n *  JSON-RPC end-points.\r\n *\r\n *  By default, a highly-throttled API key is used, which is\r\n *  appropriate for quick prototypes and simple scripts. To\r\n *  gain access to an increased rate-limit, it is highly\r\n *  recommended to [sign up here](link-pocket-signup).\r\n */\r\nclass PocketProvider extends _provider_jsonrpc_js__WEBPACK_IMPORTED_MODULE_1__.JsonRpcProvider {\r\n    /**\r\n     *  The Application ID for the Pocket connection.\r\n     */\r\n    applicationId;\r\n    /**\r\n     *  The Application Secret for making authenticated requests\r\n     *  to the Pocket connection.\r\n     */\r\n    applicationSecret;\r\n    /**\r\n     *  Create a new **PocketProvider**.\r\n     *\r\n     *  By default connecting to ``mainnet`` with a highly throttled\r\n     *  API key.\r\n     */\r\n    constructor(_network, applicationId, applicationSecret) {\r\n        if (_network == null) {\r\n            _network = \"mainnet\";\r\n        }\r\n        const network = _network_js__WEBPACK_IMPORTED_MODULE_2__.Network.from(_network);\r\n        if (applicationId == null) {\r\n            applicationId = defaultApplicationId;\r\n        }\r\n        if (applicationSecret == null) {\r\n            applicationSecret = null;\r\n        }\r\n        const options = { staticNetwork: network };\r\n        const request = PocketProvider.getRequest(network, applicationId, applicationSecret);\r\n        super(request, network, options);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, { applicationId, applicationSecret });\r\n    }\r\n    _getProvider(chainId) {\r\n        try {\r\n            return new PocketProvider(chainId, this.applicationId, this.applicationSecret);\r\n        }\r\n        catch (error) { }\r\n        return super._getProvider(chainId);\r\n    }\r\n    /**\r\n     *  Returns a prepared request for connecting to %%network%% with\r\n     *  %%applicationId%%.\r\n     */\r\n    static getRequest(network, applicationId, applicationSecret) {\r\n        if (applicationId == null) {\r\n            applicationId = defaultApplicationId;\r\n        }\r\n        const request = new _utils_index_js__WEBPACK_IMPORTED_MODULE_0__.FetchRequest(`https:/\\/${getHost(network.name)}/v1/lb/${applicationId}`);\r\n        request.allowGzip = true;\r\n        if (applicationSecret) {\r\n            request.setCredentials(\"\", applicationSecret);\r\n        }\r\n        if (applicationId === defaultApplicationId) {\r\n            request.retryFunc = async (request, response, attempt) => {\r\n                (0,_community_js__WEBPACK_IMPORTED_MODULE_3__.showThrottleMessage)(\"PocketProvider\");\r\n                return true;\r\n            };\r\n        }\r\n        return request;\r\n    }\r\n    isCommunityResource() {\r\n        return (this.applicationId === defaultApplicationId);\r\n    }\r\n}\r\n//# sourceMappingURL=provider-pocket.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9wcm92aWRlcnMvcHJvdmlkZXItcG9ja2V0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDbUY7QUFDOUI7QUFDZDtBQUNpQjtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLCtEQUFjO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sNkJBQTZCLGlFQUFlO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdEQUFPO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0EsUUFBUSxpRUFBZ0IsU0FBUyxrQ0FBa0M7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIseURBQVksYUFBYSxzQkFBc0IsU0FBUyxjQUFjO0FBQ2xHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixrRUFBbUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkQ6XFxEb19hbjJcXGxlbmRodWJfdjJcXGxlbmRodWItZnJvbnRlbmQtbmV4dGpzXFxub2RlX21vZHVsZXNcXGV0aGVyc1xcbGliLmVzbVxccHJvdmlkZXJzXFxwcm92aWRlci1wb2NrZXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqICBbW2xpbmstcG9ja2V0XV0gcHJvdmlkZXMgYSB0aGlyZC1wYXJ0eSBzZXJ2aWNlIGZvciBjb25uZWN0aW5nIHRvXHJcbiAqICB2YXJpb3VzIGJsb2NrY2hhaW5zIG92ZXIgSlNPTi1SUEMuXHJcbiAqXHJcbiAqICAqKlN1cHBvcnRlZCBOZXR3b3JrcyoqXHJcbiAqXHJcbiAqICAtIEV0aGVyZXVtIE1haW5uZXQgKGBgbWFpbm5ldGBgKVxyXG4gKiAgLSBHb2VybGkgVGVzdG5ldCAoYGBnb2VybGlgYClcclxuICogIC0gUG9seWdvbiAoYGBtYXRpY2BgKVxyXG4gKiAgLSBBcmJpdHJ1bSAoYGBhcmJpdHJ1bWBgKVxyXG4gKlxyXG4gKiAgQF9zdWJzZWN0aW9uOiBhcGkvcHJvdmlkZXJzL3RoaXJkcGFydHk6UG9ja2V0ICBbcHJvdmlkZXJzLXBvY2tldF1cclxuICovXHJcbmltcG9ydCB7IGRlZmluZVByb3BlcnRpZXMsIEZldGNoUmVxdWVzdCwgYXNzZXJ0QXJndW1lbnQgfSBmcm9tIFwiLi4vdXRpbHMvaW5kZXguanNcIjtcclxuaW1wb3J0IHsgc2hvd1Rocm90dGxlTWVzc2FnZSB9IGZyb20gXCIuL2NvbW11bml0eS5qc1wiO1xyXG5pbXBvcnQgeyBOZXR3b3JrIH0gZnJvbSBcIi4vbmV0d29yay5qc1wiO1xyXG5pbXBvcnQgeyBKc29uUnBjUHJvdmlkZXIgfSBmcm9tIFwiLi9wcm92aWRlci1qc29ucnBjLmpzXCI7XHJcbmNvbnN0IGRlZmF1bHRBcHBsaWNhdGlvbklkID0gXCI2MmUxYWQ1MWIzN2I4ZTAwMzk0YmRhM2JcIjtcclxuZnVuY3Rpb24gZ2V0SG9zdChuYW1lKSB7XHJcbiAgICBzd2l0Y2ggKG5hbWUpIHtcclxuICAgICAgICBjYXNlIFwibWFpbm5ldFwiOlxyXG4gICAgICAgICAgICByZXR1cm4gXCJldGgtbWFpbm5ldC5nYXRld2F5LnBva3QubmV0d29ya1wiO1xyXG4gICAgICAgIGNhc2UgXCJnb2VybGlcIjpcclxuICAgICAgICAgICAgcmV0dXJuIFwiZXRoLWdvZXJsaS5nYXRld2F5LnBva3QubmV0d29ya1wiO1xyXG4gICAgICAgIGNhc2UgXCJtYXRpY1wiOlxyXG4gICAgICAgICAgICByZXR1cm4gXCJwb2x5LW1haW5uZXQuZ2F0ZXdheS5wb2t0Lm5ldHdvcmtcIjtcclxuICAgICAgICBjYXNlIFwibWF0aWMtbXVtYmFpXCI6XHJcbiAgICAgICAgICAgIHJldHVybiBcInBvbHlnb24tbXVtYmFpLXJwYy5nYXRld2F5LnBva3QubmV0d29ya1wiO1xyXG4gICAgfVxyXG4gICAgYXNzZXJ0QXJndW1lbnQoZmFsc2UsIFwidW5zdXBwb3J0ZWQgbmV0d29ya1wiLCBcIm5ldHdvcmtcIiwgbmFtZSk7XHJcbn1cclxuLyoqXHJcbiAqICBUaGUgKipQb2NrZXRQcm92aWRlcioqIGNvbm5lY3RzIHRvIHRoZSBbW2xpbmstcG9ja2V0XV1cclxuICogIEpTT04tUlBDIGVuZC1wb2ludHMuXHJcbiAqXHJcbiAqICBCeSBkZWZhdWx0LCBhIGhpZ2hseS10aHJvdHRsZWQgQVBJIGtleSBpcyB1c2VkLCB3aGljaCBpc1xyXG4gKiAgYXBwcm9wcmlhdGUgZm9yIHF1aWNrIHByb3RvdHlwZXMgYW5kIHNpbXBsZSBzY3JpcHRzLiBUb1xyXG4gKiAgZ2FpbiBhY2Nlc3MgdG8gYW4gaW5jcmVhc2VkIHJhdGUtbGltaXQsIGl0IGlzIGhpZ2hseVxyXG4gKiAgcmVjb21tZW5kZWQgdG8gW3NpZ24gdXAgaGVyZV0obGluay1wb2NrZXQtc2lnbnVwKS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBQb2NrZXRQcm92aWRlciBleHRlbmRzIEpzb25ScGNQcm92aWRlciB7XHJcbiAgICAvKipcclxuICAgICAqICBUaGUgQXBwbGljYXRpb24gSUQgZm9yIHRoZSBQb2NrZXQgY29ubmVjdGlvbi5cclxuICAgICAqL1xyXG4gICAgYXBwbGljYXRpb25JZDtcclxuICAgIC8qKlxyXG4gICAgICogIFRoZSBBcHBsaWNhdGlvbiBTZWNyZXQgZm9yIG1ha2luZyBhdXRoZW50aWNhdGVkIHJlcXVlc3RzXHJcbiAgICAgKiAgdG8gdGhlIFBvY2tldCBjb25uZWN0aW9uLlxyXG4gICAgICovXHJcbiAgICBhcHBsaWNhdGlvblNlY3JldDtcclxuICAgIC8qKlxyXG4gICAgICogIENyZWF0ZSBhIG5ldyAqKlBvY2tldFByb3ZpZGVyKiouXHJcbiAgICAgKlxyXG4gICAgICogIEJ5IGRlZmF1bHQgY29ubmVjdGluZyB0byBgYG1haW5uZXRgYCB3aXRoIGEgaGlnaGx5IHRocm90dGxlZFxyXG4gICAgICogIEFQSSBrZXkuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKF9uZXR3b3JrLCBhcHBsaWNhdGlvbklkLCBhcHBsaWNhdGlvblNlY3JldCkge1xyXG4gICAgICAgIGlmIChfbmV0d29yayA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIF9uZXR3b3JrID0gXCJtYWlubmV0XCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG5ldHdvcmsgPSBOZXR3b3JrLmZyb20oX25ldHdvcmspO1xyXG4gICAgICAgIGlmIChhcHBsaWNhdGlvbklkID09IG51bGwpIHtcclxuICAgICAgICAgICAgYXBwbGljYXRpb25JZCA9IGRlZmF1bHRBcHBsaWNhdGlvbklkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXBwbGljYXRpb25TZWNyZXQgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBhcHBsaWNhdGlvblNlY3JldCA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7IHN0YXRpY05ldHdvcms6IG5ldHdvcmsgfTtcclxuICAgICAgICBjb25zdCByZXF1ZXN0ID0gUG9ja2V0UHJvdmlkZXIuZ2V0UmVxdWVzdChuZXR3b3JrLCBhcHBsaWNhdGlvbklkLCBhcHBsaWNhdGlvblNlY3JldCk7XHJcbiAgICAgICAgc3VwZXIocmVxdWVzdCwgbmV0d29yaywgb3B0aW9ucyk7XHJcbiAgICAgICAgZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7IGFwcGxpY2F0aW9uSWQsIGFwcGxpY2F0aW9uU2VjcmV0IH0pO1xyXG4gICAgfVxyXG4gICAgX2dldFByb3ZpZGVyKGNoYWluSWQpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFBvY2tldFByb3ZpZGVyKGNoYWluSWQsIHRoaXMuYXBwbGljYXRpb25JZCwgdGhpcy5hcHBsaWNhdGlvblNlY3JldCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlcnJvcikgeyB9XHJcbiAgICAgICAgcmV0dXJuIHN1cGVyLl9nZXRQcm92aWRlcihjaGFpbklkKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybnMgYSBwcmVwYXJlZCByZXF1ZXN0IGZvciBjb25uZWN0aW5nIHRvICUlbmV0d29yayUlIHdpdGhcclxuICAgICAqICAlJWFwcGxpY2F0aW9uSWQlJS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGdldFJlcXVlc3QobmV0d29yaywgYXBwbGljYXRpb25JZCwgYXBwbGljYXRpb25TZWNyZXQpIHtcclxuICAgICAgICBpZiAoYXBwbGljYXRpb25JZCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGFwcGxpY2F0aW9uSWQgPSBkZWZhdWx0QXBwbGljYXRpb25JZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IG5ldyBGZXRjaFJlcXVlc3QoYGh0dHBzOi9cXC8ke2dldEhvc3QobmV0d29yay5uYW1lKX0vdjEvbGIvJHthcHBsaWNhdGlvbklkfWApO1xyXG4gICAgICAgIHJlcXVlc3QuYWxsb3dHemlwID0gdHJ1ZTtcclxuICAgICAgICBpZiAoYXBwbGljYXRpb25TZWNyZXQpIHtcclxuICAgICAgICAgICAgcmVxdWVzdC5zZXRDcmVkZW50aWFscyhcIlwiLCBhcHBsaWNhdGlvblNlY3JldCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcHBsaWNhdGlvbklkID09PSBkZWZhdWx0QXBwbGljYXRpb25JZCkge1xyXG4gICAgICAgICAgICByZXF1ZXN0LnJldHJ5RnVuYyA9IGFzeW5jIChyZXF1ZXN0LCByZXNwb25zZSwgYXR0ZW1wdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgc2hvd1Rocm90dGxlTWVzc2FnZShcIlBvY2tldFByb3ZpZGVyXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXF1ZXN0O1xyXG4gICAgfVxyXG4gICAgaXNDb21tdW5pdHlSZXNvdXJjZSgpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMuYXBwbGljYXRpb25JZCA9PT0gZGVmYXVsdEFwcGxpY2F0aW9uSWQpO1xyXG4gICAgfVxyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3ZpZGVyLXBvY2tldC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-pocket.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-quicknode.js":
/*!*********************************************************************!*\
  !*** ./node_modules/ethers/lib.esm/providers/provider-quicknode.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QuickNodeProvider: () => (/* binding */ QuickNodeProvider)\n/* harmony export */ });\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/* harmony import */ var _community_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./community.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/community.js\");\n/* harmony import */ var _network_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./network.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/network.js\");\n/* harmony import */ var _provider_jsonrpc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./provider-jsonrpc.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-jsonrpc.js\");\n/**\r\n *  [[link-quicknode]] provides a third-party service for connecting to\r\n *  various blockchains over JSON-RPC.\r\n *\r\n *  **Supported Networks**\r\n *\r\n *  - Ethereum Mainnet (``mainnet``)\r\n *  - Goerli Testnet (``goerli``)\r\n *  - Sepolia Testnet (``sepolia``)\r\n *  - Holesky Testnet (``holesky``)\r\n *  - Arbitrum (``arbitrum``)\r\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\r\n *  - Arbitrum Sepolia Testnet (``arbitrum-sepolia``)\r\n *  - Base Mainnet (``base``);\r\n *  - Base Goerli Testnet (``base-goerli``);\r\n *  - Base Sepolia Testnet (``base-sepolia``);\r\n *  - BNB Smart Chain Mainnet (``bnb``)\r\n *  - BNB Smart Chain Testnet (``bnbt``)\r\n *  - Optimism (``optimism``)\r\n *  - Optimism Goerli Testnet (``optimism-goerli``)\r\n *  - Optimism Sepolia Testnet (``optimism-sepolia``)\r\n *  - Polygon (``matic``)\r\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\r\n *\r\n *  @_subsection: api/providers/thirdparty:QuickNode  [providers-quicknode]\r\n */\r\n\r\n\r\n\r\n\r\nconst defaultToken = \"919b412a057b5e9c9b6dce193c5a60242d6efadb\";\r\nfunction getHost(name) {\r\n    switch (name) {\r\n        case \"mainnet\":\r\n            return \"ethers.quiknode.pro\";\r\n        case \"goerli\":\r\n            return \"ethers.ethereum-goerli.quiknode.pro\";\r\n        case \"sepolia\":\r\n            return \"ethers.ethereum-sepolia.quiknode.pro\";\r\n        case \"holesky\":\r\n            return \"ethers.ethereum-holesky.quiknode.pro\";\r\n        case \"arbitrum\":\r\n            return \"ethers.arbitrum-mainnet.quiknode.pro\";\r\n        case \"arbitrum-goerli\":\r\n            return \"ethers.arbitrum-goerli.quiknode.pro\";\r\n        case \"arbitrum-sepolia\":\r\n            return \"ethers.arbitrum-sepolia.quiknode.pro\";\r\n        case \"base\":\r\n            return \"ethers.base-mainnet.quiknode.pro\";\r\n        case \"base-goerli\":\r\n            return \"ethers.base-goerli.quiknode.pro\";\r\n        case \"base-spolia\":\r\n            return \"ethers.base-sepolia.quiknode.pro\";\r\n        case \"bnb\":\r\n            return \"ethers.bsc.quiknode.pro\";\r\n        case \"bnbt\":\r\n            return \"ethers.bsc-testnet.quiknode.pro\";\r\n        case \"matic\":\r\n            return \"ethers.matic.quiknode.pro\";\r\n        case \"matic-mumbai\":\r\n            return \"ethers.matic-testnet.quiknode.pro\";\r\n        case \"optimism\":\r\n            return \"ethers.optimism.quiknode.pro\";\r\n        case \"optimism-goerli\":\r\n            return \"ethers.optimism-goerli.quiknode.pro\";\r\n        case \"optimism-sepolia\":\r\n            return \"ethers.optimism-sepolia.quiknode.pro\";\r\n        case \"xdai\":\r\n            return \"ethers.xdai.quiknode.pro\";\r\n    }\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"unsupported network\", \"network\", name);\r\n}\r\n/*\r\n@TODO:\r\n  These networks are not currently present in the Network\r\n  default included networks. Research them and ensure they\r\n  are EVM compatible and work with ethers\r\n\r\n  http://ethers.matic-amoy.quiknode.pro\r\n\r\n  http://ethers.avalanche-mainnet.quiknode.pro\r\n  http://ethers.avalanche-testnet.quiknode.pro\r\n  http://ethers.blast-sepolia.quiknode.pro\r\n  http://ethers.celo-mainnet.quiknode.pro\r\n  http://ethers.fantom.quiknode.pro\r\n  http://ethers.imx-demo.quiknode.pro\r\n  http://ethers.imx-mainnet.quiknode.pro\r\n  http://ethers.imx-testnet.quiknode.pro\r\n  http://ethers.near-mainnet.quiknode.pro\r\n  http://ethers.near-testnet.quiknode.pro\r\n  http://ethers.nova-mainnet.quiknode.pro\r\n  http://ethers.scroll-mainnet.quiknode.pro\r\n  http://ethers.scroll-testnet.quiknode.pro\r\n  http://ethers.tron-mainnet.quiknode.pro\r\n  http://ethers.zkevm-mainnet.quiknode.pro\r\n  http://ethers.zkevm-testnet.quiknode.pro\r\n  http://ethers.zksync-mainnet.quiknode.pro\r\n  http://ethers.zksync-testnet.quiknode.pro\r\n*/\r\n/**\r\n *  The **QuickNodeProvider** connects to the [[link-quicknode]]\r\n *  JSON-RPC end-points.\r\n *\r\n *  By default, a highly-throttled API token is used, which is\r\n *  appropriate for quick prototypes and simple scripts. To\r\n *  gain access to an increased rate-limit, it is highly\r\n *  recommended to [sign up here](link-quicknode).\r\n */\r\nclass QuickNodeProvider extends _provider_jsonrpc_js__WEBPACK_IMPORTED_MODULE_1__.JsonRpcProvider {\r\n    /**\r\n     *  The API token.\r\n     */\r\n    token;\r\n    /**\r\n     *  Creates a new **QuickNodeProvider**.\r\n     */\r\n    constructor(_network, token) {\r\n        if (_network == null) {\r\n            _network = \"mainnet\";\r\n        }\r\n        const network = _network_js__WEBPACK_IMPORTED_MODULE_2__.Network.from(_network);\r\n        if (token == null) {\r\n            token = defaultToken;\r\n        }\r\n        const request = QuickNodeProvider.getRequest(network, token);\r\n        super(request, network, { staticNetwork: network });\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, { token });\r\n    }\r\n    _getProvider(chainId) {\r\n        try {\r\n            return new QuickNodeProvider(chainId, this.token);\r\n        }\r\n        catch (error) { }\r\n        return super._getProvider(chainId);\r\n    }\r\n    isCommunityResource() {\r\n        return (this.token === defaultToken);\r\n    }\r\n    /**\r\n     *  Returns a new request prepared for %%network%% and the\r\n     *  %%token%%.\r\n     */\r\n    static getRequest(network, token) {\r\n        if (token == null) {\r\n            token = defaultToken;\r\n        }\r\n        const request = new _utils_index_js__WEBPACK_IMPORTED_MODULE_0__.FetchRequest(`https:/\\/${getHost(network.name)}/${token}`);\r\n        request.allowGzip = true;\r\n        //if (projectSecret) { request.setCredentials(\"\", projectSecret); }\r\n        if (token === defaultToken) {\r\n            request.retryFunc = async (request, response, attempt) => {\r\n                (0,_community_js__WEBPACK_IMPORTED_MODULE_3__.showThrottleMessage)(\"QuickNodeProvider\");\r\n                return true;\r\n            };\r\n        }\r\n        return request;\r\n    }\r\n}\r\n//# sourceMappingURL=provider-quicknode.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-quicknode.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-socket.js":
/*!******************************************************************!*\
  !*** ./node_modules/ethers/lib.esm/providers/provider-socket.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SocketBlockSubscriber: () => (/* binding */ SocketBlockSubscriber),\n/* harmony export */   SocketEventSubscriber: () => (/* binding */ SocketEventSubscriber),\n/* harmony export */   SocketPendingSubscriber: () => (/* binding */ SocketPendingSubscriber),\n/* harmony export */   SocketProvider: () => (/* binding */ SocketProvider),\n/* harmony export */   SocketSubscriber: () => (/* binding */ SocketSubscriber)\n/* harmony export */ });\n/* harmony import */ var _abstract_provider_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./abstract-provider.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/abstract-provider.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/* harmony import */ var _provider_jsonrpc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./provider-jsonrpc.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-jsonrpc.js\");\n/**\r\n *  Generic long-lived socket provider.\r\n *\r\n *  Sub-classing notes\r\n *  - a sub-class MUST call the `_start()` method once connected\r\n *  - a sub-class MUST override the `_write(string)` method\r\n *  - a sub-class MUST call `_processMessage(string)` for each message\r\n *\r\n *  @_subsection: api/providers/abstract-provider:Socket Providers  [about-socketProvider]\r\n */\r\n\r\n\r\n\r\n/**\r\n *  A **SocketSubscriber** uses a socket transport to handle events and\r\n *  should use [[_emit]] to manage the events.\r\n */\r\nclass SocketSubscriber {\r\n    #provider;\r\n    #filter;\r\n    /**\r\n     *  The filter.\r\n     */\r\n    get filter() { return JSON.parse(this.#filter); }\r\n    #filterId;\r\n    #paused;\r\n    #emitPromise;\r\n    /**\r\n     *  Creates a new **SocketSubscriber** attached to %%provider%% listening\r\n     *  to %%filter%%.\r\n     */\r\n    constructor(provider, filter) {\r\n        this.#provider = provider;\r\n        this.#filter = JSON.stringify(filter);\r\n        this.#filterId = null;\r\n        this.#paused = null;\r\n        this.#emitPromise = null;\r\n    }\r\n    start() {\r\n        this.#filterId = this.#provider.send(\"eth_subscribe\", this.filter).then((filterId) => {\r\n            ;\r\n            this.#provider._register(filterId, this);\r\n            return filterId;\r\n        });\r\n    }\r\n    stop() {\r\n        (this.#filterId).then((filterId) => {\r\n            if (this.#provider.destroyed) {\r\n                return;\r\n            }\r\n            this.#provider.send(\"eth_unsubscribe\", [filterId]);\r\n        });\r\n        this.#filterId = null;\r\n    }\r\n    // @TODO: pause should trap the current blockNumber, unsub, and on resume use getLogs\r\n    //        and resume\r\n    pause(dropWhilePaused) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(dropWhilePaused, \"preserve logs while paused not supported by SocketSubscriber yet\", \"UNSUPPORTED_OPERATION\", { operation: \"pause(false)\" });\r\n        this.#paused = !!dropWhilePaused;\r\n    }\r\n    resume() {\r\n        this.#paused = null;\r\n    }\r\n    /**\r\n     *  @_ignore:\r\n     */\r\n    _handleMessage(message) {\r\n        if (this.#filterId == null) {\r\n            return;\r\n        }\r\n        if (this.#paused === null) {\r\n            let emitPromise = this.#emitPromise;\r\n            if (emitPromise == null) {\r\n                emitPromise = this._emit(this.#provider, message);\r\n            }\r\n            else {\r\n                emitPromise = emitPromise.then(async () => {\r\n                    await this._emit(this.#provider, message);\r\n                });\r\n            }\r\n            this.#emitPromise = emitPromise.then(() => {\r\n                if (this.#emitPromise === emitPromise) {\r\n                    this.#emitPromise = null;\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     *  Sub-classes **must** override this to emit the events on the\r\n     *  provider.\r\n     */\r\n    async _emit(provider, message) {\r\n        throw new Error(\"sub-classes must implemente this; _emit\");\r\n    }\r\n}\r\n/**\r\n *  A **SocketBlockSubscriber** listens for ``newHeads`` events and emits\r\n *  ``\"block\"`` events.\r\n */\r\nclass SocketBlockSubscriber extends SocketSubscriber {\r\n    /**\r\n     *  @_ignore:\r\n     */\r\n    constructor(provider) {\r\n        super(provider, [\"newHeads\"]);\r\n    }\r\n    async _emit(provider, message) {\r\n        provider.emit(\"block\", parseInt(message.number));\r\n    }\r\n}\r\n/**\r\n *  A **SocketPendingSubscriber** listens for pending transacitons and emits\r\n *  ``\"pending\"`` events.\r\n */\r\nclass SocketPendingSubscriber extends SocketSubscriber {\r\n    /**\r\n     *  @_ignore:\r\n     */\r\n    constructor(provider) {\r\n        super(provider, [\"newPendingTransactions\"]);\r\n    }\r\n    async _emit(provider, message) {\r\n        provider.emit(\"pending\", message);\r\n    }\r\n}\r\n/**\r\n *  A **SocketEventSubscriber** listens for event logs.\r\n */\r\nclass SocketEventSubscriber extends SocketSubscriber {\r\n    #logFilter;\r\n    /**\r\n     *  The filter.\r\n     */\r\n    get logFilter() { return JSON.parse(this.#logFilter); }\r\n    /**\r\n     *  @_ignore:\r\n     */\r\n    constructor(provider, filter) {\r\n        super(provider, [\"logs\", filter]);\r\n        this.#logFilter = JSON.stringify(filter);\r\n    }\r\n    async _emit(provider, message) {\r\n        provider.emit(this.logFilter, provider._wrapLog(message, provider._network));\r\n    }\r\n}\r\n/**\r\n *  A **SocketProvider** is backed by a long-lived connection over a\r\n *  socket, which can subscribe and receive real-time messages over\r\n *  its communication channel.\r\n */\r\nclass SocketProvider extends _provider_jsonrpc_js__WEBPACK_IMPORTED_MODULE_1__.JsonRpcApiProvider {\r\n    #callbacks;\r\n    // Maps each filterId to its subscriber\r\n    #subs;\r\n    // If any events come in before a subscriber has finished\r\n    // registering, queue them\r\n    #pending;\r\n    /**\r\n     *  Creates a new **SocketProvider** connected to %%network%%.\r\n     *\r\n     *  If unspecified, the network will be discovered.\r\n     */\r\n    constructor(network, _options) {\r\n        // Copy the options\r\n        const options = Object.assign({}, (_options != null) ? _options : {});\r\n        // Support for batches is generally not supported for\r\n        // connection-base providers; if this changes in the future\r\n        // the _send should be updated to reflect this\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(options.batchMaxCount == null || options.batchMaxCount === 1, \"sockets-based providers do not support batches\", \"options.batchMaxCount\", _options);\r\n        options.batchMaxCount = 1;\r\n        // Socket-based Providers (generally) cannot change their network,\r\n        // since they have a long-lived connection; but let people override\r\n        // this if they have just cause.\r\n        if (options.staticNetwork == null) {\r\n            options.staticNetwork = true;\r\n        }\r\n        super(network, options);\r\n        this.#callbacks = new Map();\r\n        this.#subs = new Map();\r\n        this.#pending = new Map();\r\n    }\r\n    // This value is only valid after _start has been called\r\n    /*\r\n    get _network(): Network {\r\n        if (this.#network == null) {\r\n            throw new Error(\"this shouldn't happen\");\r\n        }\r\n        return this.#network.clone();\r\n    }\r\n    */\r\n    _getSubscriber(sub) {\r\n        switch (sub.type) {\r\n            case \"close\":\r\n                return new _abstract_provider_js__WEBPACK_IMPORTED_MODULE_2__.UnmanagedSubscriber(\"close\");\r\n            case \"block\":\r\n                return new SocketBlockSubscriber(this);\r\n            case \"pending\":\r\n                return new SocketPendingSubscriber(this);\r\n            case \"event\":\r\n                return new SocketEventSubscriber(this, sub.filter);\r\n            case \"orphan\":\r\n                // Handled auto-matically within AbstractProvider\r\n                // when the log.removed = true\r\n                if (sub.filter.orphan === \"drop-log\") {\r\n                    return new _abstract_provider_js__WEBPACK_IMPORTED_MODULE_2__.UnmanagedSubscriber(\"drop-log\");\r\n                }\r\n        }\r\n        return super._getSubscriber(sub);\r\n    }\r\n    /**\r\n     *  Register a new subscriber. This is used internalled by Subscribers\r\n     *  and generally is unecessary unless extending capabilities.\r\n     */\r\n    _register(filterId, subscriber) {\r\n        this.#subs.set(filterId, subscriber);\r\n        const pending = this.#pending.get(filterId);\r\n        if (pending) {\r\n            for (const message of pending) {\r\n                subscriber._handleMessage(message);\r\n            }\r\n            this.#pending.delete(filterId);\r\n        }\r\n    }\r\n    async _send(payload) {\r\n        // WebSocket provider doesn't accept batches\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(!Array.isArray(payload), \"WebSocket does not support batch send\", \"payload\", payload);\r\n        // @TODO: stringify payloads here and store to prevent mutations\r\n        // Prepare a promise to respond to\r\n        const promise = new Promise((resolve, reject) => {\r\n            this.#callbacks.set(payload.id, { payload, resolve, reject });\r\n        });\r\n        // Wait until the socket is connected before writing to it\r\n        await this._waitUntilReady();\r\n        // Write the request to the socket\r\n        await this._write(JSON.stringify(payload));\r\n        return [await promise];\r\n    }\r\n    // Sub-classes must call this once they are connected\r\n    /*\r\n    async _start(): Promise<void> {\r\n        if (this.#ready) { return; }\r\n\r\n        for (const { payload } of this.#callbacks.values()) {\r\n            await this._write(JSON.stringify(payload));\r\n        }\r\n\r\n        this.#ready = (async function() {\r\n            await super._start();\r\n        })();\r\n    }\r\n    */\r\n    /**\r\n     *  Sub-classes **must** call this with messages received over their\r\n     *  transport to be processed and dispatched.\r\n     */\r\n    async _processMessage(message) {\r\n        const result = (JSON.parse(message));\r\n        if (result && typeof (result) === \"object\" && \"id\" in result) {\r\n            const callback = this.#callbacks.get(result.id);\r\n            if (callback == null) {\r\n                this.emit(\"error\", (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.makeError)(\"received result for unknown id\", \"UNKNOWN_ERROR\", {\r\n                    reasonCode: \"UNKNOWN_ID\",\r\n                    result\r\n                }));\r\n                return;\r\n            }\r\n            this.#callbacks.delete(result.id);\r\n            callback.resolve(result);\r\n        }\r\n        else if (result && result.method === \"eth_subscription\") {\r\n            const filterId = result.params.subscription;\r\n            const subscriber = this.#subs.get(filterId);\r\n            if (subscriber) {\r\n                subscriber._handleMessage(result.params.result);\r\n            }\r\n            else {\r\n                let pending = this.#pending.get(filterId);\r\n                if (pending == null) {\r\n                    pending = [];\r\n                    this.#pending.set(filterId, pending);\r\n                }\r\n                pending.push(result.params.result);\r\n            }\r\n        }\r\n        else {\r\n            this.emit(\"error\", (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.makeError)(\"received unexpected message\", \"UNKNOWN_ERROR\", {\r\n                reasonCode: \"UNEXPECTED_MESSAGE\",\r\n                result\r\n            }));\r\n            return;\r\n        }\r\n    }\r\n    /**\r\n     *  Sub-classes **must** override this to send %%message%% over their\r\n     *  transport.\r\n     */\r\n    async _write(message) {\r\n        throw new Error(\"sub-classes must override this\");\r\n    }\r\n}\r\n//# sourceMappingURL=provider-socket.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-socket.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-websocket.js":
/*!*********************************************************************!*\
  !*** ./node_modules/ethers/lib.esm/providers/provider-websocket.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebSocketProvider: () => (/* binding */ WebSocketProvider)\n/* harmony export */ });\n/* harmony import */ var _ws_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ws.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/ws-browser.js\");\n/* harmony import */ var _provider_socket_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./provider-socket.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-socket.js\");\n /*-browser*/\r\n\r\n/**\r\n *  A JSON-RPC provider which is backed by a WebSocket.\r\n *\r\n *  WebSockets are often preferred because they retain a live connection\r\n *  to a server, which permits more instant access to events.\r\n *\r\n *  However, this incurs higher server infrasturture costs, so additional\r\n *  resources may be required to host your own WebSocket nodes and many\r\n *  third-party services charge additional fees for WebSocket endpoints.\r\n */\r\nclass WebSocketProvider extends _provider_socket_js__WEBPACK_IMPORTED_MODULE_0__.SocketProvider {\r\n    #connect;\r\n    #websocket;\r\n    get websocket() {\r\n        if (this.#websocket == null) {\r\n            throw new Error(\"websocket closed\");\r\n        }\r\n        return this.#websocket;\r\n    }\r\n    constructor(url, network, options) {\r\n        super(network, options);\r\n        if (typeof (url) === \"string\") {\r\n            this.#connect = () => { return new _ws_js__WEBPACK_IMPORTED_MODULE_1__.WebSocket(url); };\r\n            this.#websocket = this.#connect();\r\n        }\r\n        else if (typeof (url) === \"function\") {\r\n            this.#connect = url;\r\n            this.#websocket = url();\r\n        }\r\n        else {\r\n            this.#connect = null;\r\n            this.#websocket = url;\r\n        }\r\n        this.websocket.onopen = async () => {\r\n            try {\r\n                await this._start();\r\n                this.resume();\r\n            }\r\n            catch (error) {\r\n                console.log(\"failed to start WebsocketProvider\", error);\r\n                // @TODO: now what? Attempt reconnect?\r\n            }\r\n        };\r\n        this.websocket.onmessage = (message) => {\r\n            this._processMessage(message.data);\r\n        };\r\n        /*\r\n                this.websocket.onclose = (event) => {\r\n                    // @TODO: What event.code should we reconnect on?\r\n                    const reconnect = false;\r\n                    if (reconnect) {\r\n                        this.pause(true);\r\n                        if (this.#connect) {\r\n                            this.#websocket = this.#connect();\r\n                            this.#websocket.onopen = ...\r\n                            // @TODO: this requires the super class to rebroadcast; move it there\r\n                        }\r\n                        this._reconnect();\r\n                    }\r\n                };\r\n        */\r\n    }\r\n    async _write(message) {\r\n        this.websocket.send(message);\r\n    }\r\n    async destroy() {\r\n        if (this.#websocket != null) {\r\n            this.#websocket.close();\r\n            this.#websocket = null;\r\n        }\r\n        super.destroy();\r\n    }\r\n}\r\n//# sourceMappingURL=provider-websocket.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9wcm92aWRlcnMvcHJvdmlkZXItd2Vic29ja2V0LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFrRCxDQUFDO0FBQ0c7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxnQ0FBZ0MsK0RBQWM7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxXQUFXLDZDQUFVO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvRkFBb0Y7QUFDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJEOlxcRG9fYW4yXFxsZW5kaHViX3YyXFxsZW5kaHViLWZyb250ZW5kLW5leHRqc1xcbm9kZV9tb2R1bGVzXFxldGhlcnNcXGxpYi5lc21cXHByb3ZpZGVyc1xccHJvdmlkZXItd2Vic29ja2V0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFdlYlNvY2tldCBhcyBfV2ViU29ja2V0IH0gZnJvbSBcIi4vd3MuanNcIjsgLyotYnJvd3NlciovXHJcbmltcG9ydCB7IFNvY2tldFByb3ZpZGVyIH0gZnJvbSBcIi4vcHJvdmlkZXItc29ja2V0LmpzXCI7XHJcbi8qKlxyXG4gKiAgQSBKU09OLVJQQyBwcm92aWRlciB3aGljaCBpcyBiYWNrZWQgYnkgYSBXZWJTb2NrZXQuXHJcbiAqXHJcbiAqICBXZWJTb2NrZXRzIGFyZSBvZnRlbiBwcmVmZXJyZWQgYmVjYXVzZSB0aGV5IHJldGFpbiBhIGxpdmUgY29ubmVjdGlvblxyXG4gKiAgdG8gYSBzZXJ2ZXIsIHdoaWNoIHBlcm1pdHMgbW9yZSBpbnN0YW50IGFjY2VzcyB0byBldmVudHMuXHJcbiAqXHJcbiAqICBIb3dldmVyLCB0aGlzIGluY3VycyBoaWdoZXIgc2VydmVyIGluZnJhc3R1cnR1cmUgY29zdHMsIHNvIGFkZGl0aW9uYWxcclxuICogIHJlc291cmNlcyBtYXkgYmUgcmVxdWlyZWQgdG8gaG9zdCB5b3VyIG93biBXZWJTb2NrZXQgbm9kZXMgYW5kIG1hbnlcclxuICogIHRoaXJkLXBhcnR5IHNlcnZpY2VzIGNoYXJnZSBhZGRpdGlvbmFsIGZlZXMgZm9yIFdlYlNvY2tldCBlbmRwb2ludHMuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgV2ViU29ja2V0UHJvdmlkZXIgZXh0ZW5kcyBTb2NrZXRQcm92aWRlciB7XHJcbiAgICAjY29ubmVjdDtcclxuICAgICN3ZWJzb2NrZXQ7XHJcbiAgICBnZXQgd2Vic29ja2V0KCkge1xyXG4gICAgICAgIGlmICh0aGlzLiN3ZWJzb2NrZXQgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ3ZWJzb2NrZXQgY2xvc2VkXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy4jd2Vic29ja2V0O1xyXG4gICAgfVxyXG4gICAgY29uc3RydWN0b3IodXJsLCBuZXR3b3JrLCBvcHRpb25zKSB7XHJcbiAgICAgICAgc3VwZXIobmV0d29yaywgb3B0aW9ucyk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiAodXJsKSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICB0aGlzLiNjb25uZWN0ID0gKCkgPT4geyByZXR1cm4gbmV3IF9XZWJTb2NrZXQodXJsKTsgfTtcclxuICAgICAgICAgICAgdGhpcy4jd2Vic29ja2V0ID0gdGhpcy4jY29ubmVjdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgKHVybCkgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICB0aGlzLiNjb25uZWN0ID0gdXJsO1xyXG4gICAgICAgICAgICB0aGlzLiN3ZWJzb2NrZXQgPSB1cmwoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuI2Nvbm5lY3QgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLiN3ZWJzb2NrZXQgPSB1cmw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMud2Vic29ja2V0Lm9ub3BlbiA9IGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX3N0YXJ0KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc3VtZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJmYWlsZWQgdG8gc3RhcnQgV2Vic29ja2V0UHJvdmlkZXJcIiwgZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgLy8gQFRPRE86IG5vdyB3aGF0PyBBdHRlbXB0IHJlY29ubmVjdD9cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy53ZWJzb2NrZXQub25tZXNzYWdlID0gKG1lc3NhZ2UpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5fcHJvY2Vzc01lc3NhZ2UobWVzc2FnZS5kYXRhKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qXHJcbiAgICAgICAgICAgICAgICB0aGlzLndlYnNvY2tldC5vbmNsb3NlID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQFRPRE86IFdoYXQgZXZlbnQuY29kZSBzaG91bGQgd2UgcmVjb25uZWN0IG9uP1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlY29ubmVjdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZWNvbm5lY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXVzZSh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuI2Nvbm5lY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuI3dlYnNvY2tldCA9IHRoaXMuI2Nvbm5lY3QoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuI3dlYnNvY2tldC5vbm9wZW4gPSAuLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEBUT0RPOiB0aGlzIHJlcXVpcmVzIHRoZSBzdXBlciBjbGFzcyB0byByZWJyb2FkY2FzdDsgbW92ZSBpdCB0aGVyZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlY29ubmVjdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgKi9cclxuICAgIH1cclxuICAgIGFzeW5jIF93cml0ZShtZXNzYWdlKSB7XHJcbiAgICAgICAgdGhpcy53ZWJzb2NrZXQuc2VuZChtZXNzYWdlKTtcclxuICAgIH1cclxuICAgIGFzeW5jIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuI3dlYnNvY2tldCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuI3dlYnNvY2tldC5jbG9zZSgpO1xyXG4gICAgICAgICAgICB0aGlzLiN3ZWJzb2NrZXQgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdXBlci5kZXN0cm95KCk7XHJcbiAgICB9XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvdmlkZXItd2Vic29ja2V0LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider-websocket.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider.js":
/*!***********************************************************!*\
  !*** ./node_modules/ethers/lib.esm/providers/provider.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Block: () => (/* binding */ Block),\n/* harmony export */   FeeData: () => (/* binding */ FeeData),\n/* harmony export */   Log: () => (/* binding */ Log),\n/* harmony export */   TransactionReceipt: () => (/* binding */ TransactionReceipt),\n/* harmony export */   TransactionResponse: () => (/* binding */ TransactionResponse),\n/* harmony export */   copyRequest: () => (/* binding */ copyRequest)\n/* harmony export */ });\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/* harmony import */ var _transaction_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../transaction/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/transaction/index.js\");\n//import { resolveAddress } from \"@ethersproject/address\";\r\n\r\n\r\nconst BN_0 = BigInt(0);\r\n// -----------------------\r\nfunction getValue(value) {\r\n    if (value == null) {\r\n        return null;\r\n    }\r\n    return value;\r\n}\r\nfunction toJson(value) {\r\n    if (value == null) {\r\n        return null;\r\n    }\r\n    return value.toString();\r\n}\r\n// @TODO? <T extends FeeData = { }> implements Required<T>\r\n/**\r\n *  A **FeeData** wraps all the fee-related values associated with\r\n *  the network.\r\n */\r\nclass FeeData {\r\n    /**\r\n     *  The gas price for legacy networks.\r\n     */\r\n    gasPrice;\r\n    /**\r\n     *  The maximum fee to pay per gas.\r\n     *\r\n     *  The base fee per gas is defined by the network and based on\r\n     *  congestion, increasing the cost during times of heavy load\r\n     *  and lowering when less busy.\r\n     *\r\n     *  The actual fee per gas will be the base fee for the block\r\n     *  and the priority fee, up to the max fee per gas.\r\n     *\r\n     *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))\r\n     */\r\n    maxFeePerGas;\r\n    /**\r\n     *  The additional amout to pay per gas to encourage a validator\r\n     *  to include the transaction.\r\n     *\r\n     *  The purpose of this is to compensate the validator for the\r\n     *  adjusted risk for including a given transaction.\r\n     *\r\n     *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))\r\n     */\r\n    maxPriorityFeePerGas;\r\n    /**\r\n     *  Creates a new FeeData for %%gasPrice%%, %%maxFeePerGas%% and\r\n     *  %%maxPriorityFeePerGas%%.\r\n     */\r\n    constructor(gasPrice, maxFeePerGas, maxPriorityFeePerGas) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, {\r\n            gasPrice: getValue(gasPrice),\r\n            maxFeePerGas: getValue(maxFeePerGas),\r\n            maxPriorityFeePerGas: getValue(maxPriorityFeePerGas)\r\n        });\r\n    }\r\n    /**\r\n     *  Returns a JSON-friendly value.\r\n     */\r\n    toJSON() {\r\n        const { gasPrice, maxFeePerGas, maxPriorityFeePerGas } = this;\r\n        return {\r\n            _type: \"FeeData\",\r\n            gasPrice: toJson(gasPrice),\r\n            maxFeePerGas: toJson(maxFeePerGas),\r\n            maxPriorityFeePerGas: toJson(maxPriorityFeePerGas),\r\n        };\r\n    }\r\n}\r\n;\r\n/**\r\n *  Returns a copy of %%req%% with all properties coerced to their strict\r\n *  types.\r\n */\r\nfunction copyRequest(req) {\r\n    const result = {};\r\n    // These could be addresses, ENS names or Addressables\r\n    if (req.to) {\r\n        result.to = req.to;\r\n    }\r\n    if (req.from) {\r\n        result.from = req.from;\r\n    }\r\n    if (req.data) {\r\n        result.data = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(req.data);\r\n    }\r\n    const bigIntKeys = \"chainId,gasLimit,gasPrice,maxFeePerBlobGas,maxFeePerGas,maxPriorityFeePerGas,value\".split(/,/);\r\n    for (const key of bigIntKeys) {\r\n        if (!(key in req) || req[key] == null) {\r\n            continue;\r\n        }\r\n        result[key] = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt)(req[key], `request.${key}`);\r\n    }\r\n    const numberKeys = \"type,nonce\".split(/,/);\r\n    for (const key of numberKeys) {\r\n        if (!(key in req) || req[key] == null) {\r\n            continue;\r\n        }\r\n        result[key] = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getNumber)(req[key], `request.${key}`);\r\n    }\r\n    if (req.accessList) {\r\n        result.accessList = (0,_transaction_index_js__WEBPACK_IMPORTED_MODULE_1__.accessListify)(req.accessList);\r\n    }\r\n    if (req.authorizationList) {\r\n        result.authorizationList = req.authorizationList.slice();\r\n    }\r\n    if (\"blockTag\" in req) {\r\n        result.blockTag = req.blockTag;\r\n    }\r\n    if (\"enableCcipRead\" in req) {\r\n        result.enableCcipRead = !!req.enableCcipRead;\r\n    }\r\n    if (\"customData\" in req) {\r\n        result.customData = req.customData;\r\n    }\r\n    if (\"blobVersionedHashes\" in req && req.blobVersionedHashes) {\r\n        result.blobVersionedHashes = req.blobVersionedHashes.slice();\r\n    }\r\n    if (\"kzg\" in req) {\r\n        result.kzg = req.kzg;\r\n    }\r\n    if (\"blobs\" in req && req.blobs) {\r\n        result.blobs = req.blobs.map((b) => {\r\n            if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isBytesLike)(b)) {\r\n                return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(b);\r\n            }\r\n            return Object.assign({}, b);\r\n        });\r\n    }\r\n    return result;\r\n}\r\n/**\r\n *  A **Block** represents the data associated with a full block on\r\n *  Ethereum.\r\n */\r\nclass Block {\r\n    /**\r\n     *  The provider connected to the block used to fetch additional details\r\n     *  if necessary.\r\n     */\r\n    provider;\r\n    /**\r\n     *  The block number, sometimes called the block height. This is a\r\n     *  sequential number that is one higher than the parent block.\r\n     */\r\n    number;\r\n    /**\r\n     *  The block hash.\r\n     *\r\n     *  This hash includes all properties, so can be safely used to identify\r\n     *  an exact set of block properties.\r\n     */\r\n    hash;\r\n    /**\r\n     *  The timestamp for this block, which is the number of seconds since\r\n     *  epoch that this block was included.\r\n     */\r\n    timestamp;\r\n    /**\r\n     *  The block hash of the parent block.\r\n     */\r\n    parentHash;\r\n    /**\r\n     *  The hash tree root of the parent beacon block for the given\r\n     *  execution block. See [[link-eip-4788]].\r\n     */\r\n    parentBeaconBlockRoot;\r\n    /**\r\n     *  The nonce.\r\n     *\r\n     *  On legacy networks, this is the random number inserted which\r\n     *  permitted the difficulty target to be reached.\r\n     */\r\n    nonce;\r\n    /**\r\n     *  The difficulty target.\r\n     *\r\n     *  On legacy networks, this is the proof-of-work target required\r\n     *  for a block to meet the protocol rules to be included.\r\n     *\r\n     *  On modern networks, this is a random number arrived at using\r\n     *  randao.  @TODO: Find links?\r\n     */\r\n    difficulty;\r\n    /**\r\n     *  The total gas limit for this block.\r\n     */\r\n    gasLimit;\r\n    /**\r\n     *  The total gas used in this block.\r\n     */\r\n    gasUsed;\r\n    /**\r\n     *  The root hash for the global state after applying changes\r\n     *  in this block.\r\n     */\r\n    stateRoot;\r\n    /**\r\n     *  The hash of the transaction receipts trie.\r\n     */\r\n    receiptsRoot;\r\n    /**\r\n     *  The total amount of blob gas consumed by the transactions\r\n     *  within the block. See [[link-eip-4844]].\r\n     */\r\n    blobGasUsed;\r\n    /**\r\n     *  The running total of blob gas consumed in excess of the\r\n     *  target, prior to the block. See [[link-eip-4844]].\r\n     */\r\n    excessBlobGas;\r\n    /**\r\n     *  The miner coinbase address, wihch receives any subsidies for\r\n     *  including this block.\r\n     */\r\n    miner;\r\n    /**\r\n     *  The latest RANDAO mix of the post beacon state of\r\n     *  the previous block.\r\n     */\r\n    prevRandao;\r\n    /**\r\n     *  Any extra data the validator wished to include.\r\n     */\r\n    extraData;\r\n    /**\r\n     *  The base fee per gas that all transactions in this block were\r\n     *  charged.\r\n     *\r\n     *  This adjusts after each block, depending on how congested the network\r\n     *  is.\r\n     */\r\n    baseFeePerGas;\r\n    #transactions;\r\n    /**\r\n     *  Create a new **Block** object.\r\n     *\r\n     *  This should generally not be necessary as the unless implementing a\r\n     *  low-level library.\r\n     */\r\n    constructor(block, provider) {\r\n        this.#transactions = block.transactions.map((tx) => {\r\n            if (typeof (tx) !== \"string\") {\r\n                return new TransactionResponse(tx, provider);\r\n            }\r\n            return tx;\r\n        });\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, {\r\n            provider,\r\n            hash: getValue(block.hash),\r\n            number: block.number,\r\n            timestamp: block.timestamp,\r\n            parentHash: block.parentHash,\r\n            parentBeaconBlockRoot: block.parentBeaconBlockRoot,\r\n            nonce: block.nonce,\r\n            difficulty: block.difficulty,\r\n            gasLimit: block.gasLimit,\r\n            gasUsed: block.gasUsed,\r\n            blobGasUsed: block.blobGasUsed,\r\n            excessBlobGas: block.excessBlobGas,\r\n            miner: block.miner,\r\n            prevRandao: getValue(block.prevRandao),\r\n            extraData: block.extraData,\r\n            baseFeePerGas: getValue(block.baseFeePerGas),\r\n            stateRoot: block.stateRoot,\r\n            receiptsRoot: block.receiptsRoot,\r\n        });\r\n    }\r\n    /**\r\n     *  Returns the list of transaction hashes, in the order\r\n     *  they were executed within the block.\r\n     */\r\n    get transactions() {\r\n        return this.#transactions.map((tx) => {\r\n            if (typeof (tx) === \"string\") {\r\n                return tx;\r\n            }\r\n            return tx.hash;\r\n        });\r\n    }\r\n    /**\r\n     *  Returns the complete transactions, in the order they\r\n     *  were executed within the block.\r\n     *\r\n     *  This is only available for blocks which prefetched\r\n     *  transactions, by passing ``true`` to %%prefetchTxs%%\r\n     *  into [[Provider-getBlock]].\r\n     */\r\n    get prefetchedTransactions() {\r\n        const txs = this.#transactions.slice();\r\n        // Doesn't matter...\r\n        if (txs.length === 0) {\r\n            return [];\r\n        }\r\n        // Make sure we prefetched the transactions\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(typeof (txs[0]) === \"object\", \"transactions were not prefetched with block request\", \"UNSUPPORTED_OPERATION\", {\r\n            operation: \"transactionResponses()\"\r\n        });\r\n        return txs;\r\n    }\r\n    /**\r\n     *  Returns a JSON-friendly value.\r\n     */\r\n    toJSON() {\r\n        const { baseFeePerGas, difficulty, extraData, gasLimit, gasUsed, hash, miner, prevRandao, nonce, number, parentHash, parentBeaconBlockRoot, stateRoot, receiptsRoot, timestamp, transactions } = this;\r\n        return {\r\n            _type: \"Block\",\r\n            baseFeePerGas: toJson(baseFeePerGas),\r\n            difficulty: toJson(difficulty),\r\n            extraData,\r\n            gasLimit: toJson(gasLimit),\r\n            gasUsed: toJson(gasUsed),\r\n            blobGasUsed: toJson(this.blobGasUsed),\r\n            excessBlobGas: toJson(this.excessBlobGas),\r\n            hash, miner, prevRandao, nonce, number, parentHash, timestamp,\r\n            parentBeaconBlockRoot, stateRoot, receiptsRoot,\r\n            transactions,\r\n        };\r\n    }\r\n    [Symbol.iterator]() {\r\n        let index = 0;\r\n        const txs = this.transactions;\r\n        return {\r\n            next: () => {\r\n                if (index < this.length) {\r\n                    return {\r\n                        value: txs[index++], done: false\r\n                    };\r\n                }\r\n                return { value: undefined, done: true };\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     *  The number of transactions in this block.\r\n     */\r\n    get length() { return this.#transactions.length; }\r\n    /**\r\n     *  The [[link-js-date]] this block was included at.\r\n     */\r\n    get date() {\r\n        if (this.timestamp == null) {\r\n            return null;\r\n        }\r\n        return new Date(this.timestamp * 1000);\r\n    }\r\n    /**\r\n     *  Get the transaction at %%indexe%% within this block.\r\n     */\r\n    async getTransaction(indexOrHash) {\r\n        // Find the internal value by its index or hash\r\n        let tx = undefined;\r\n        if (typeof (indexOrHash) === \"number\") {\r\n            tx = this.#transactions[indexOrHash];\r\n        }\r\n        else {\r\n            const hash = indexOrHash.toLowerCase();\r\n            for (const v of this.#transactions) {\r\n                if (typeof (v) === \"string\") {\r\n                    if (v !== hash) {\r\n                        continue;\r\n                    }\r\n                    tx = v;\r\n                    break;\r\n                }\r\n                else {\r\n                    if (v.hash !== hash) {\r\n                        continue;\r\n                    }\r\n                    tx = v;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (tx == null) {\r\n            throw new Error(\"no such tx\");\r\n        }\r\n        if (typeof (tx) === \"string\") {\r\n            return (await this.provider.getTransaction(tx));\r\n        }\r\n        else {\r\n            return tx;\r\n        }\r\n    }\r\n    /**\r\n     *  If a **Block** was fetched with a request to include the transactions\r\n     *  this will allow synchronous access to those transactions.\r\n     *\r\n     *  If the transactions were not prefetched, this will throw.\r\n     */\r\n    getPrefetchedTransaction(indexOrHash) {\r\n        const txs = this.prefetchedTransactions;\r\n        if (typeof (indexOrHash) === \"number\") {\r\n            return txs[indexOrHash];\r\n        }\r\n        indexOrHash = indexOrHash.toLowerCase();\r\n        for (const tx of txs) {\r\n            if (tx.hash === indexOrHash) {\r\n                return tx;\r\n            }\r\n        }\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"no matching transaction\", \"indexOrHash\", indexOrHash);\r\n    }\r\n    /**\r\n     *  Returns true if this block been mined. This provides a type guard\r\n     *  for all properties on a [[MinedBlock]].\r\n     */\r\n    isMined() { return !!this.hash; }\r\n    /**\r\n     *  Returns true if this block is an [[link-eip-2930]] block.\r\n     */\r\n    isLondon() {\r\n        return !!this.baseFeePerGas;\r\n    }\r\n    /**\r\n     *  @_ignore:\r\n     */\r\n    orphanedEvent() {\r\n        if (!this.isMined()) {\r\n            throw new Error(\"\");\r\n        }\r\n        return createOrphanedBlockFilter(this);\r\n    }\r\n}\r\n//////////////////////\r\n// Log\r\n/**\r\n *  A **Log** in Ethereum represents an event that has been included in a\r\n *  transaction using the ``LOG*`` opcodes, which are most commonly used by\r\n *  Solidity's emit for announcing events.\r\n */\r\nclass Log {\r\n    /**\r\n     *  The provider connected to the log used to fetch additional details\r\n     *  if necessary.\r\n     */\r\n    provider;\r\n    /**\r\n     *  The transaction hash of the transaction this log occurred in. Use the\r\n     *  [[Log-getTransaction]] to get the [[TransactionResponse]].\r\n     */\r\n    transactionHash;\r\n    /**\r\n     *  The block hash of the block this log occurred in. Use the\r\n     *  [[Log-getBlock]] to get the [[Block]].\r\n     */\r\n    blockHash;\r\n    /**\r\n     *  The block number of the block this log occurred in. It is preferred\r\n     *  to use the [[Block-hash]] when fetching the related [[Block]],\r\n     *  since in the case of an orphaned block, the block at that height may\r\n     *  have changed.\r\n     */\r\n    blockNumber;\r\n    /**\r\n     *  If the **Log** represents a block that was removed due to an orphaned\r\n     *  block, this will be true.\r\n     *\r\n     *  This can only happen within an orphan event listener.\r\n     */\r\n    removed;\r\n    /**\r\n     *  The address of the contract that emitted this log.\r\n     */\r\n    address;\r\n    /**\r\n     *  The data included in this log when it was emitted.\r\n     */\r\n    data;\r\n    /**\r\n     *  The indexed topics included in this log when it was emitted.\r\n     *\r\n     *  All topics are included in the bloom filters, so they can be\r\n     *  efficiently filtered using the [[Provider-getLogs]] method.\r\n     */\r\n    topics;\r\n    /**\r\n     *  The index within the block this log occurred at. This is generally\r\n     *  not useful to developers, but can be used with the various roots\r\n     *  to proof inclusion within a block.\r\n     */\r\n    index;\r\n    /**\r\n     *  The index within the transaction of this log.\r\n     */\r\n    transactionIndex;\r\n    /**\r\n     *  @_ignore:\r\n     */\r\n    constructor(log, provider) {\r\n        this.provider = provider;\r\n        const topics = Object.freeze(log.topics.slice());\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, {\r\n            transactionHash: log.transactionHash,\r\n            blockHash: log.blockHash,\r\n            blockNumber: log.blockNumber,\r\n            removed: log.removed,\r\n            address: log.address,\r\n            data: log.data,\r\n            topics,\r\n            index: log.index,\r\n            transactionIndex: log.transactionIndex,\r\n        });\r\n    }\r\n    /**\r\n     *  Returns a JSON-compatible object.\r\n     */\r\n    toJSON() {\r\n        const { address, blockHash, blockNumber, data, index, removed, topics, transactionHash, transactionIndex } = this;\r\n        return {\r\n            _type: \"log\",\r\n            address, blockHash, blockNumber, data, index,\r\n            removed, topics, transactionHash, transactionIndex\r\n        };\r\n    }\r\n    /**\r\n     *  Returns the block that this log occurred in.\r\n     */\r\n    async getBlock() {\r\n        const block = await this.provider.getBlock(this.blockHash);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(!!block, \"failed to find transaction\", \"UNKNOWN_ERROR\", {});\r\n        return block;\r\n    }\r\n    /**\r\n     *  Returns the transaction that this log occurred in.\r\n     */\r\n    async getTransaction() {\r\n        const tx = await this.provider.getTransaction(this.transactionHash);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(!!tx, \"failed to find transaction\", \"UNKNOWN_ERROR\", {});\r\n        return tx;\r\n    }\r\n    /**\r\n     *  Returns the transaction receipt fot the transaction that this\r\n     *  log occurred in.\r\n     */\r\n    async getTransactionReceipt() {\r\n        const receipt = await this.provider.getTransactionReceipt(this.transactionHash);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(!!receipt, \"failed to find transaction receipt\", \"UNKNOWN_ERROR\", {});\r\n        return receipt;\r\n    }\r\n    /**\r\n     *  @_ignore:\r\n     */\r\n    removedEvent() {\r\n        return createRemovedLogFilter(this);\r\n    }\r\n}\r\n//////////////////////\r\n// Transaction Receipt\r\n/*\r\nexport interface LegacyTransactionReceipt {\r\n    byzantium: false;\r\n    status: null;\r\n    root: string;\r\n}\r\n\r\nexport interface ByzantiumTransactionReceipt {\r\n    byzantium: true;\r\n    status: number;\r\n    root: null;\r\n}\r\n*/\r\n/**\r\n *  A **TransactionReceipt** includes additional information about a\r\n *  transaction that is only available after it has been mined.\r\n */\r\nclass TransactionReceipt {\r\n    /**\r\n     *  The provider connected to the log used to fetch additional details\r\n     *  if necessary.\r\n     */\r\n    provider;\r\n    /**\r\n     *  The address the transaction was sent to.\r\n     */\r\n    to;\r\n    /**\r\n     *  The sender of the transaction.\r\n     */\r\n    from;\r\n    /**\r\n     *  The address of the contract if the transaction was directly\r\n     *  responsible for deploying one.\r\n     *\r\n     *  This is non-null **only** if the ``to`` is empty and the ``data``\r\n     *  was successfully executed as initcode.\r\n     */\r\n    contractAddress;\r\n    /**\r\n     *  The transaction hash.\r\n     */\r\n    hash;\r\n    /**\r\n     *  The index of this transaction within the block transactions.\r\n     */\r\n    index;\r\n    /**\r\n     *  The block hash of the [[Block]] this transaction was included in.\r\n     */\r\n    blockHash;\r\n    /**\r\n     *  The block number of the [[Block]] this transaction was included in.\r\n     */\r\n    blockNumber;\r\n    /**\r\n     *  The bloom filter bytes that represent all logs that occurred within\r\n     *  this transaction. This is generally not useful for most developers,\r\n     *  but can be used to validate the included logs.\r\n     */\r\n    logsBloom;\r\n    /**\r\n     *  The actual amount of gas used by this transaction.\r\n     *\r\n     *  When creating a transaction, the amount of gas that will be used can\r\n     *  only be approximated, but the sender must pay the gas fee for the\r\n     *  entire gas limit. After the transaction, the difference is refunded.\r\n     */\r\n    gasUsed;\r\n    /**\r\n     *  The gas used for BLObs. See [[link-eip-4844]].\r\n     */\r\n    blobGasUsed;\r\n    /**\r\n     *  The amount of gas used by all transactions within the block for this\r\n     *  and all transactions with a lower ``index``.\r\n     *\r\n     *  This is generally not useful for developers but can be used to\r\n     *  validate certain aspects of execution.\r\n     */\r\n    cumulativeGasUsed;\r\n    /**\r\n     *  The actual gas price used during execution.\r\n     *\r\n     *  Due to the complexity of [[link-eip-1559]] this value can only\r\n     *  be caluclated after the transaction has been mined, snce the base\r\n     *  fee is protocol-enforced.\r\n     */\r\n    gasPrice;\r\n    /**\r\n     *  The price paid per BLOB in gas. See [[link-eip-4844]].\r\n     */\r\n    blobGasPrice;\r\n    /**\r\n     *  The [[link-eip-2718]] transaction type.\r\n     */\r\n    type;\r\n    //readonly byzantium!: boolean;\r\n    /**\r\n     *  The status of this transaction, indicating success (i.e. ``1``) or\r\n     *  a revert (i.e. ``0``).\r\n     *\r\n     *  This is available in post-byzantium blocks, but some backends may\r\n     *  backfill this value.\r\n     */\r\n    status;\r\n    /**\r\n     *  The root hash of this transaction.\r\n     *\r\n     *  This is no present and was only included in pre-byzantium blocks, but\r\n     *  could be used to validate certain parts of the receipt.\r\n     */\r\n    root;\r\n    #logs;\r\n    /**\r\n     *  @_ignore:\r\n     */\r\n    constructor(tx, provider) {\r\n        this.#logs = Object.freeze(tx.logs.map((log) => {\r\n            return new Log(log, provider);\r\n        }));\r\n        let gasPrice = BN_0;\r\n        if (tx.effectiveGasPrice != null) {\r\n            gasPrice = tx.effectiveGasPrice;\r\n        }\r\n        else if (tx.gasPrice != null) {\r\n            gasPrice = tx.gasPrice;\r\n        }\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, {\r\n            provider,\r\n            to: tx.to,\r\n            from: tx.from,\r\n            contractAddress: tx.contractAddress,\r\n            hash: tx.hash,\r\n            index: tx.index,\r\n            blockHash: tx.blockHash,\r\n            blockNumber: tx.blockNumber,\r\n            logsBloom: tx.logsBloom,\r\n            gasUsed: tx.gasUsed,\r\n            cumulativeGasUsed: tx.cumulativeGasUsed,\r\n            blobGasUsed: tx.blobGasUsed,\r\n            gasPrice,\r\n            blobGasPrice: tx.blobGasPrice,\r\n            type: tx.type,\r\n            //byzantium: tx.byzantium,\r\n            status: tx.status,\r\n            root: tx.root\r\n        });\r\n    }\r\n    /**\r\n     *  The logs for this transaction.\r\n     */\r\n    get logs() { return this.#logs; }\r\n    /**\r\n     *  Returns a JSON-compatible representation.\r\n     */\r\n    toJSON() {\r\n        const { to, from, contractAddress, hash, index, blockHash, blockNumber, logsBloom, logs, //byzantium, \r\n        status, root } = this;\r\n        return {\r\n            _type: \"TransactionReceipt\",\r\n            blockHash, blockNumber,\r\n            //byzantium, \r\n            contractAddress,\r\n            cumulativeGasUsed: toJson(this.cumulativeGasUsed),\r\n            from,\r\n            gasPrice: toJson(this.gasPrice),\r\n            blobGasUsed: toJson(this.blobGasUsed),\r\n            blobGasPrice: toJson(this.blobGasPrice),\r\n            gasUsed: toJson(this.gasUsed),\r\n            hash, index, logs, logsBloom, root, status, to\r\n        };\r\n    }\r\n    /**\r\n     *  @_ignore:\r\n     */\r\n    get length() { return this.logs.length; }\r\n    [Symbol.iterator]() {\r\n        let index = 0;\r\n        return {\r\n            next: () => {\r\n                if (index < this.length) {\r\n                    return { value: this.logs[index++], done: false };\r\n                }\r\n                return { value: undefined, done: true };\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     *  The total fee for this transaction, in wei.\r\n     */\r\n    get fee() {\r\n        return this.gasUsed * this.gasPrice;\r\n    }\r\n    /**\r\n     *  Resolves to the block this transaction occurred in.\r\n     */\r\n    async getBlock() {\r\n        const block = await this.provider.getBlock(this.blockHash);\r\n        if (block == null) {\r\n            throw new Error(\"TODO\");\r\n        }\r\n        return block;\r\n    }\r\n    /**\r\n     *  Resolves to the transaction this transaction occurred in.\r\n     */\r\n    async getTransaction() {\r\n        const tx = await this.provider.getTransaction(this.hash);\r\n        if (tx == null) {\r\n            throw new Error(\"TODO\");\r\n        }\r\n        return tx;\r\n    }\r\n    /**\r\n     *  Resolves to the return value of the execution of this transaction.\r\n     *\r\n     *  Support for this feature is limited, as it requires an archive node\r\n     *  with the ``debug_`` or ``trace_`` API enabled.\r\n     */\r\n    async getResult() {\r\n        return (await this.provider.getTransactionResult(this.hash));\r\n    }\r\n    /**\r\n     *  Resolves to the number of confirmations this transaction has.\r\n     */\r\n    async confirmations() {\r\n        return (await this.provider.getBlockNumber()) - this.blockNumber + 1;\r\n    }\r\n    /**\r\n     *  @_ignore:\r\n     */\r\n    removedEvent() {\r\n        return createRemovedTransactionFilter(this);\r\n    }\r\n    /**\r\n     *  @_ignore:\r\n     */\r\n    reorderedEvent(other) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(!other || other.isMined(), \"unmined 'other' transction cannot be orphaned\", \"UNSUPPORTED_OPERATION\", { operation: \"reorderedEvent(other)\" });\r\n        return createReorderedTransactionFilter(this, other);\r\n    }\r\n}\r\n/**\r\n *  A **TransactionResponse** includes all properties about a transaction\r\n *  that was sent to the network, which may or may not be included in a\r\n *  block.\r\n *\r\n *  The [[TransactionResponse-isMined]] can be used to check if the\r\n *  transaction has been mined as well as type guard that the otherwise\r\n *  possibly ``null`` properties are defined.\r\n */\r\nclass TransactionResponse {\r\n    /**\r\n     *  The provider this is connected to, which will influence how its\r\n     *  methods will resolve its async inspection methods.\r\n     */\r\n    provider;\r\n    /**\r\n     *  The block number of the block that this transaction was included in.\r\n     *\r\n     *  This is ``null`` for pending transactions.\r\n     */\r\n    blockNumber;\r\n    /**\r\n     *  The blockHash of the block that this transaction was included in.\r\n     *\r\n     *  This is ``null`` for pending transactions.\r\n     */\r\n    blockHash;\r\n    /**\r\n     *  The index within the block that this transaction resides at.\r\n     */\r\n    index;\r\n    /**\r\n     *  The transaction hash.\r\n     */\r\n    hash;\r\n    /**\r\n     *  The [[link-eip-2718]] transaction envelope type. This is\r\n     *  ``0`` for legacy transactions types.\r\n     */\r\n    type;\r\n    /**\r\n     *  The receiver of this transaction.\r\n     *\r\n     *  If ``null``, then the transaction is an initcode transaction.\r\n     *  This means the result of executing the [[data]] will be deployed\r\n     *  as a new contract on chain (assuming it does not revert) and the\r\n     *  address may be computed using [[getCreateAddress]].\r\n     */\r\n    to;\r\n    /**\r\n     *  The sender of this transaction. It is implicitly computed\r\n     *  from the transaction pre-image hash (as the digest) and the\r\n     *  [[signature]] using ecrecover.\r\n     */\r\n    from;\r\n    /**\r\n     *  The nonce, which is used to prevent replay attacks and offer\r\n     *  a method to ensure transactions from a given sender are explicitly\r\n     *  ordered.\r\n     *\r\n     *  When sending a transaction, this must be equal to the number of\r\n     *  transactions ever sent by [[from]].\r\n     */\r\n    nonce;\r\n    /**\r\n     *  The maximum units of gas this transaction can consume. If execution\r\n     *  exceeds this, the entries transaction is reverted and the sender\r\n     *  is charged for the full amount, despite not state changes being made.\r\n     */\r\n    gasLimit;\r\n    /**\r\n     *  The gas price can have various values, depending on the network.\r\n     *\r\n     *  In modern networks, for transactions that are included this is\r\n     *  the //effective gas price// (the fee per gas that was actually\r\n     *  charged), while for transactions that have not been included yet\r\n     *  is the [[maxFeePerGas]].\r\n     *\r\n     *  For legacy transactions, or transactions on legacy networks, this\r\n     *  is the fee that will be charged per unit of gas the transaction\r\n     *  consumes.\r\n     */\r\n    gasPrice;\r\n    /**\r\n     *  The maximum priority fee (per unit of gas) to allow a\r\n     *  validator to charge the sender. This is inclusive of the\r\n     *  [[maxFeeFeePerGas]].\r\n     */\r\n    maxPriorityFeePerGas;\r\n    /**\r\n     *  The maximum fee (per unit of gas) to allow this transaction\r\n     *  to charge the sender.\r\n     */\r\n    maxFeePerGas;\r\n    /**\r\n     *  The [[link-eip-4844]] max fee per BLOb gas.\r\n     */\r\n    maxFeePerBlobGas;\r\n    /**\r\n     *  The data.\r\n     */\r\n    data;\r\n    /**\r\n     *  The value, in wei. Use [[formatEther]] to format this value\r\n     *  as ether.\r\n     */\r\n    value;\r\n    /**\r\n     *  The chain ID.\r\n     */\r\n    chainId;\r\n    /**\r\n     *  The signature.\r\n     */\r\n    signature;\r\n    /**\r\n     *  The [[link-eip-2930]] access list for transaction types that\r\n     *  support it, otherwise ``null``.\r\n     */\r\n    accessList;\r\n    /**\r\n     *  The [[link-eip-4844]] BLOb versioned hashes.\r\n     */\r\n    blobVersionedHashes;\r\n    /**\r\n     *  The [[link-eip-7702]] authorizations (if any).\r\n     */\r\n    authorizationList;\r\n    #startBlock;\r\n    /**\r\n     *  @_ignore:\r\n     */\r\n    constructor(tx, provider) {\r\n        this.provider = provider;\r\n        this.blockNumber = (tx.blockNumber != null) ? tx.blockNumber : null;\r\n        this.blockHash = (tx.blockHash != null) ? tx.blockHash : null;\r\n        this.hash = tx.hash;\r\n        this.index = tx.index;\r\n        this.type = tx.type;\r\n        this.from = tx.from;\r\n        this.to = tx.to || null;\r\n        this.gasLimit = tx.gasLimit;\r\n        this.nonce = tx.nonce;\r\n        this.data = tx.data;\r\n        this.value = tx.value;\r\n        this.gasPrice = tx.gasPrice;\r\n        this.maxPriorityFeePerGas = (tx.maxPriorityFeePerGas != null) ? tx.maxPriorityFeePerGas : null;\r\n        this.maxFeePerGas = (tx.maxFeePerGas != null) ? tx.maxFeePerGas : null;\r\n        this.maxFeePerBlobGas = (tx.maxFeePerBlobGas != null) ? tx.maxFeePerBlobGas : null;\r\n        this.chainId = tx.chainId;\r\n        this.signature = tx.signature;\r\n        this.accessList = (tx.accessList != null) ? tx.accessList : null;\r\n        this.blobVersionedHashes = (tx.blobVersionedHashes != null) ? tx.blobVersionedHashes : null;\r\n        this.authorizationList = (tx.authorizationList != null) ? tx.authorizationList : null;\r\n        this.#startBlock = -1;\r\n    }\r\n    /**\r\n     *  Returns a JSON-compatible representation of this transaction.\r\n     */\r\n    toJSON() {\r\n        const { blockNumber, blockHash, index, hash, type, to, from, nonce, data, signature, accessList, blobVersionedHashes } = this;\r\n        return {\r\n            _type: \"TransactionResponse\",\r\n            accessList, blockNumber, blockHash,\r\n            blobVersionedHashes,\r\n            chainId: toJson(this.chainId),\r\n            data, from,\r\n            gasLimit: toJson(this.gasLimit),\r\n            gasPrice: toJson(this.gasPrice),\r\n            hash,\r\n            maxFeePerGas: toJson(this.maxFeePerGas),\r\n            maxPriorityFeePerGas: toJson(this.maxPriorityFeePerGas),\r\n            maxFeePerBlobGas: toJson(this.maxFeePerBlobGas),\r\n            nonce, signature, to, index, type,\r\n            value: toJson(this.value),\r\n        };\r\n    }\r\n    /**\r\n     *  Resolves to the Block that this transaction was included in.\r\n     *\r\n     *  This will return null if the transaction has not been included yet.\r\n     */\r\n    async getBlock() {\r\n        let blockNumber = this.blockNumber;\r\n        if (blockNumber == null) {\r\n            const tx = await this.getTransaction();\r\n            if (tx) {\r\n                blockNumber = tx.blockNumber;\r\n            }\r\n        }\r\n        if (blockNumber == null) {\r\n            return null;\r\n        }\r\n        const block = this.provider.getBlock(blockNumber);\r\n        if (block == null) {\r\n            throw new Error(\"TODO\");\r\n        }\r\n        return block;\r\n    }\r\n    /**\r\n     *  Resolves to this transaction being re-requested from the\r\n     *  provider. This can be used if you have an unmined transaction\r\n     *  and wish to get an up-to-date populated instance.\r\n     */\r\n    async getTransaction() {\r\n        return this.provider.getTransaction(this.hash);\r\n    }\r\n    /**\r\n     *  Resolve to the number of confirmations this transaction has.\r\n     */\r\n    async confirmations() {\r\n        if (this.blockNumber == null) {\r\n            const { tx, blockNumber } = await (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.resolveProperties)({\r\n                tx: this.getTransaction(),\r\n                blockNumber: this.provider.getBlockNumber()\r\n            });\r\n            // Not mined yet...\r\n            if (tx == null || tx.blockNumber == null) {\r\n                return 0;\r\n            }\r\n            return blockNumber - tx.blockNumber + 1;\r\n        }\r\n        const blockNumber = await this.provider.getBlockNumber();\r\n        return blockNumber - this.blockNumber + 1;\r\n    }\r\n    /**\r\n     *  Resolves once this transaction has been mined and has\r\n     *  %%confirms%% blocks including it (default: ``1``) with an\r\n     *  optional %%timeout%%.\r\n     *\r\n     *  This can resolve to ``null`` only if %%confirms%% is ``0``\r\n     *  and the transaction has not been mined, otherwise this will\r\n     *  wait until enough confirmations have completed.\r\n     */\r\n    async wait(_confirms, _timeout) {\r\n        const confirms = (_confirms == null) ? 1 : _confirms;\r\n        const timeout = (_timeout == null) ? 0 : _timeout;\r\n        let startBlock = this.#startBlock;\r\n        let nextScan = -1;\r\n        let stopScanning = (startBlock === -1) ? true : false;\r\n        const checkReplacement = async () => {\r\n            // Get the current transaction count for this sender\r\n            if (stopScanning) {\r\n                return null;\r\n            }\r\n            const { blockNumber, nonce } = await (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.resolveProperties)({\r\n                blockNumber: this.provider.getBlockNumber(),\r\n                nonce: this.provider.getTransactionCount(this.from)\r\n            });\r\n            // No transaction or our nonce has not been mined yet; but we\r\n            // can start scanning later when we do start\r\n            if (nonce < this.nonce) {\r\n                startBlock = blockNumber;\r\n                return;\r\n            }\r\n            // We were mined; no replacement\r\n            if (stopScanning) {\r\n                return null;\r\n            }\r\n            const mined = await this.getTransaction();\r\n            if (mined && mined.blockNumber != null) {\r\n                return;\r\n            }\r\n            // We were replaced; start scanning for that transaction\r\n            // Starting to scan; look back a few extra blocks for safety\r\n            if (nextScan === -1) {\r\n                nextScan = startBlock - 3;\r\n                if (nextScan < this.#startBlock) {\r\n                    nextScan = this.#startBlock;\r\n                }\r\n            }\r\n            while (nextScan <= blockNumber) {\r\n                // Get the next block to scan\r\n                if (stopScanning) {\r\n                    return null;\r\n                }\r\n                const block = await this.provider.getBlock(nextScan, true);\r\n                // This should not happen; but we'll try again shortly\r\n                if (block == null) {\r\n                    return;\r\n                }\r\n                // We were mined; no replacement\r\n                for (const hash of block) {\r\n                    if (hash === this.hash) {\r\n                        return;\r\n                    }\r\n                }\r\n                // Search for the transaction that replaced us\r\n                for (let i = 0; i < block.length; i++) {\r\n                    const tx = await block.getTransaction(i);\r\n                    if (tx.from === this.from && tx.nonce === this.nonce) {\r\n                        // Get the receipt\r\n                        if (stopScanning) {\r\n                            return null;\r\n                        }\r\n                        const receipt = await this.provider.getTransactionReceipt(tx.hash);\r\n                        // This should not happen; but we'll try again shortly\r\n                        if (receipt == null) {\r\n                            return;\r\n                        }\r\n                        // We will retry this on the next block (this case could be optimized)\r\n                        if ((blockNumber - receipt.blockNumber + 1) < confirms) {\r\n                            return;\r\n                        }\r\n                        // The reason we were replaced\r\n                        let reason = \"replaced\";\r\n                        if (tx.data === this.data && tx.to === this.to && tx.value === this.value) {\r\n                            reason = \"repriced\";\r\n                        }\r\n                        else if (tx.data === \"0x\" && tx.from === tx.to && tx.value === BN_0) {\r\n                            reason = \"cancelled\";\r\n                        }\r\n                        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(false, \"transaction was replaced\", \"TRANSACTION_REPLACED\", {\r\n                            cancelled: (reason === \"replaced\" || reason === \"cancelled\"),\r\n                            reason,\r\n                            replacement: tx.replaceableTransaction(startBlock),\r\n                            hash: tx.hash,\r\n                            receipt\r\n                        });\r\n                    }\r\n                }\r\n                nextScan++;\r\n            }\r\n            return;\r\n        };\r\n        const checkReceipt = (receipt) => {\r\n            if (receipt == null || receipt.status !== 0) {\r\n                return receipt;\r\n            }\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(false, \"transaction execution reverted\", \"CALL_EXCEPTION\", {\r\n                action: \"sendTransaction\",\r\n                data: null, reason: null, invocation: null, revert: null,\r\n                transaction: {\r\n                    to: receipt.to,\r\n                    from: receipt.from,\r\n                    data: \"\" // @TODO: in v7, split out sendTransaction properties\r\n                }, receipt\r\n            });\r\n        };\r\n        const receipt = await this.provider.getTransactionReceipt(this.hash);\r\n        if (confirms === 0) {\r\n            return checkReceipt(receipt);\r\n        }\r\n        if (receipt) {\r\n            if (confirms === 1 || (await receipt.confirmations()) >= confirms) {\r\n                return checkReceipt(receipt);\r\n            }\r\n        }\r\n        else {\r\n            // Check for a replacement; throws if a replacement was found\r\n            await checkReplacement();\r\n            // Allow null only when the confirms is 0\r\n            if (confirms === 0) {\r\n                return null;\r\n            }\r\n        }\r\n        const waiter = new Promise((resolve, reject) => {\r\n            // List of things to cancel when we have a result (one way or the other)\r\n            const cancellers = [];\r\n            const cancel = () => { cancellers.forEach((c) => c()); };\r\n            // On cancel, stop scanning for replacements\r\n            cancellers.push(() => { stopScanning = true; });\r\n            // Set up any timeout requested\r\n            if (timeout > 0) {\r\n                const timer = setTimeout(() => {\r\n                    cancel();\r\n                    reject((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.makeError)(\"wait for transaction timeout\", \"TIMEOUT\"));\r\n                }, timeout);\r\n                cancellers.push(() => { clearTimeout(timer); });\r\n            }\r\n            const txListener = async (receipt) => {\r\n                // Done; return it!\r\n                if ((await receipt.confirmations()) >= confirms) {\r\n                    cancel();\r\n                    try {\r\n                        resolve(checkReceipt(receipt));\r\n                    }\r\n                    catch (error) {\r\n                        reject(error);\r\n                    }\r\n                }\r\n            };\r\n            cancellers.push(() => { this.provider.off(this.hash, txListener); });\r\n            this.provider.on(this.hash, txListener);\r\n            // We support replacement detection; start checking\r\n            if (startBlock >= 0) {\r\n                const replaceListener = async () => {\r\n                    try {\r\n                        // Check for a replacement; this throws only if one is found\r\n                        await checkReplacement();\r\n                    }\r\n                    catch (error) {\r\n                        // We were replaced (with enough confirms); re-throw the error\r\n                        if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isError)(error, \"TRANSACTION_REPLACED\")) {\r\n                            cancel();\r\n                            reject(error);\r\n                            return;\r\n                        }\r\n                    }\r\n                    // Rescheudle a check on the next block\r\n                    if (!stopScanning) {\r\n                        this.provider.once(\"block\", replaceListener);\r\n                    }\r\n                };\r\n                cancellers.push(() => { this.provider.off(\"block\", replaceListener); });\r\n                this.provider.once(\"block\", replaceListener);\r\n            }\r\n        });\r\n        return await waiter;\r\n    }\r\n    /**\r\n     *  Returns ``true`` if this transaction has been included.\r\n     *\r\n     *  This is effective only as of the time the TransactionResponse\r\n     *  was instantiated. To get up-to-date information, use\r\n     *  [[getTransaction]].\r\n     *\r\n     *  This provides a Type Guard that this transaction will have\r\n     *  non-null property values for properties that are null for\r\n     *  unmined transactions.\r\n     */\r\n    isMined() {\r\n        return (this.blockHash != null);\r\n    }\r\n    /**\r\n     *  Returns true if the transaction is a legacy (i.e. ``type == 0``)\r\n     *  transaction.\r\n     *\r\n     *  This provides a Type Guard that this transaction will have\r\n     *  the ``null``-ness for hardfork-specific properties set correctly.\r\n     */\r\n    isLegacy() {\r\n        return (this.type === 0);\r\n    }\r\n    /**\r\n     *  Returns true if the transaction is a Berlin (i.e. ``type == 1``)\r\n     *  transaction. See [[link-eip-2070]].\r\n     *\r\n     *  This provides a Type Guard that this transaction will have\r\n     *  the ``null``-ness for hardfork-specific properties set correctly.\r\n     */\r\n    isBerlin() {\r\n        return (this.type === 1);\r\n    }\r\n    /**\r\n     *  Returns true if the transaction is a London (i.e. ``type == 2``)\r\n     *  transaction. See [[link-eip-1559]].\r\n     *\r\n     *  This provides a Type Guard that this transaction will have\r\n     *  the ``null``-ness for hardfork-specific properties set correctly.\r\n     */\r\n    isLondon() {\r\n        return (this.type === 2);\r\n    }\r\n    /**\r\n     *  Returns true if hte transaction is a Cancun (i.e. ``type == 3``)\r\n     *  transaction. See [[link-eip-4844]].\r\n     */\r\n    isCancun() {\r\n        return (this.type === 3);\r\n    }\r\n    /**\r\n     *  Returns a filter which can be used to listen for orphan events\r\n     *  that evict this transaction.\r\n     */\r\n    removedEvent() {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(this.isMined(), \"unmined transaction canot be orphaned\", \"UNSUPPORTED_OPERATION\", { operation: \"removeEvent()\" });\r\n        return createRemovedTransactionFilter(this);\r\n    }\r\n    /**\r\n     *  Returns a filter which can be used to listen for orphan events\r\n     *  that re-order this event against %%other%%.\r\n     */\r\n    reorderedEvent(other) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(this.isMined(), \"unmined transaction canot be orphaned\", \"UNSUPPORTED_OPERATION\", { operation: \"removeEvent()\" });\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(!other || other.isMined(), \"unmined 'other' transaction canot be orphaned\", \"UNSUPPORTED_OPERATION\", { operation: \"removeEvent()\" });\r\n        return createReorderedTransactionFilter(this, other);\r\n    }\r\n    /**\r\n     *  Returns a new TransactionResponse instance which has the ability to\r\n     *  detect (and throw an error) if the transaction is replaced, which\r\n     *  will begin scanning at %%startBlock%%.\r\n     *\r\n     *  This should generally not be used by developers and is intended\r\n     *  primarily for internal use. Setting an incorrect %%startBlock%% can\r\n     *  have devastating performance consequences if used incorrectly.\r\n     */\r\n    replaceableTransaction(startBlock) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(Number.isInteger(startBlock) && startBlock >= 0, \"invalid startBlock\", \"startBlock\", startBlock);\r\n        const tx = new TransactionResponse(this, this.provider);\r\n        tx.#startBlock = startBlock;\r\n        return tx;\r\n    }\r\n}\r\nfunction createOrphanedBlockFilter(block) {\r\n    return { orphan: \"drop-block\", hash: block.hash, number: block.number };\r\n}\r\nfunction createReorderedTransactionFilter(tx, other) {\r\n    return { orphan: \"reorder-transaction\", tx, other };\r\n}\r\nfunction createRemovedTransactionFilter(tx) {\r\n    return { orphan: \"drop-transaction\", tx };\r\n}\r\nfunction createRemovedLogFilter(log) {\r\n    return { orphan: \"drop-log\", log: {\r\n            transactionHash: log.transactionHash,\r\n            blockHash: log.blockHash,\r\n            blockNumber: log.blockNumber,\r\n            address: log.address,\r\n            data: log.data,\r\n            topics: Object.freeze(log.topics.slice()),\r\n            index: log.index\r\n        } };\r\n}\r\n//# sourceMappingURL=provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/provider.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/signer-noncemanager.js":
/*!**********************************************************************!*\
  !*** ./node_modules/ethers/lib.esm/providers/signer-noncemanager.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NonceManager: () => (/* binding */ NonceManager)\n/* harmony export */ });\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/* harmony import */ var _abstract_signer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract-signer.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/abstract-signer.js\");\n\r\n\r\n/**\r\n *  A **NonceManager** wraps another [[Signer]] and automatically manages\r\n *  the nonce, ensuring serialized and sequential nonces are used during\r\n *  transaction.\r\n */\r\nclass NonceManager extends _abstract_signer_js__WEBPACK_IMPORTED_MODULE_0__.AbstractSigner {\r\n    /**\r\n     *  The Signer being managed.\r\n     */\r\n    signer;\r\n    #noncePromise;\r\n    #delta;\r\n    /**\r\n     *  Creates a new **NonceManager** to manage %%signer%%.\r\n     */\r\n    constructor(signer) {\r\n        super(signer.provider);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.defineProperties)(this, { signer });\r\n        this.#noncePromise = null;\r\n        this.#delta = 0;\r\n    }\r\n    async getAddress() {\r\n        return this.signer.getAddress();\r\n    }\r\n    connect(provider) {\r\n        return new NonceManager(this.signer.connect(provider));\r\n    }\r\n    async getNonce(blockTag) {\r\n        if (blockTag === \"pending\") {\r\n            if (this.#noncePromise == null) {\r\n                this.#noncePromise = super.getNonce(\"pending\");\r\n            }\r\n            const delta = this.#delta;\r\n            return (await this.#noncePromise) + delta;\r\n        }\r\n        return super.getNonce(blockTag);\r\n    }\r\n    /**\r\n     *  Manually increment the nonce. This may be useful when managng\r\n     *  offline transactions.\r\n     */\r\n    increment() {\r\n        this.#delta++;\r\n    }\r\n    /**\r\n     *  Resets the nonce, causing the **NonceManager** to reload the current\r\n     *  nonce from the blockchain on the next transaction.\r\n     */\r\n    reset() {\r\n        this.#delta = 0;\r\n        this.#noncePromise = null;\r\n    }\r\n    async sendTransaction(tx) {\r\n        const noncePromise = this.getNonce(\"pending\");\r\n        this.increment();\r\n        tx = await this.signer.populateTransaction(tx);\r\n        tx.nonce = await noncePromise;\r\n        // @TODO: Maybe handle interesting/recoverable errors?\r\n        // Like don't increment if the tx was certainly not sent\r\n        return await this.signer.sendTransaction(tx);\r\n    }\r\n    signTransaction(tx) {\r\n        return this.signer.signTransaction(tx);\r\n    }\r\n    signMessage(message) {\r\n        return this.signer.signMessage(message);\r\n    }\r\n    signTypedData(domain, types, value) {\r\n        return this.signer.signTypedData(domain, types, value);\r\n    }\r\n}\r\n//# sourceMappingURL=signer-noncemanager.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9wcm92aWRlcnMvc2lnbmVyLW5vbmNlbWFuYWdlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBcUQ7QUFDQztBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sMkJBQTJCLCtEQUFjO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFnQixTQUFTLFFBQVE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJEOlxcRG9fYW4yXFxsZW5kaHViX3YyXFxsZW5kaHViLWZyb250ZW5kLW5leHRqc1xcbm9kZV9tb2R1bGVzXFxldGhlcnNcXGxpYi5lc21cXHByb3ZpZGVyc1xcc2lnbmVyLW5vbmNlbWFuYWdlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZWZpbmVQcm9wZXJ0aWVzIH0gZnJvbSBcIi4uL3V0aWxzL2luZGV4LmpzXCI7XHJcbmltcG9ydCB7IEFic3RyYWN0U2lnbmVyIH0gZnJvbSBcIi4vYWJzdHJhY3Qtc2lnbmVyLmpzXCI7XHJcbi8qKlxyXG4gKiAgQSAqKk5vbmNlTWFuYWdlcioqIHdyYXBzIGFub3RoZXIgW1tTaWduZXJdXSBhbmQgYXV0b21hdGljYWxseSBtYW5hZ2VzXHJcbiAqICB0aGUgbm9uY2UsIGVuc3VyaW5nIHNlcmlhbGl6ZWQgYW5kIHNlcXVlbnRpYWwgbm9uY2VzIGFyZSB1c2VkIGR1cmluZ1xyXG4gKiAgdHJhbnNhY3Rpb24uXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTm9uY2VNYW5hZ2VyIGV4dGVuZHMgQWJzdHJhY3RTaWduZXIge1xyXG4gICAgLyoqXHJcbiAgICAgKiAgVGhlIFNpZ25lciBiZWluZyBtYW5hZ2VkLlxyXG4gICAgICovXHJcbiAgICBzaWduZXI7XHJcbiAgICAjbm9uY2VQcm9taXNlO1xyXG4gICAgI2RlbHRhO1xyXG4gICAgLyoqXHJcbiAgICAgKiAgQ3JlYXRlcyBhIG5ldyAqKk5vbmNlTWFuYWdlcioqIHRvIG1hbmFnZSAlJXNpZ25lciUlLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihzaWduZXIpIHtcclxuICAgICAgICBzdXBlcihzaWduZXIucHJvdmlkZXIpO1xyXG4gICAgICAgIGRlZmluZVByb3BlcnRpZXModGhpcywgeyBzaWduZXIgfSk7XHJcbiAgICAgICAgdGhpcy4jbm9uY2VQcm9taXNlID0gbnVsbDtcclxuICAgICAgICB0aGlzLiNkZWx0YSA9IDA7XHJcbiAgICB9XHJcbiAgICBhc3luYyBnZXRBZGRyZXNzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNpZ25lci5nZXRBZGRyZXNzKCk7XHJcbiAgICB9XHJcbiAgICBjb25uZWN0KHByb3ZpZGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBOb25jZU1hbmFnZXIodGhpcy5zaWduZXIuY29ubmVjdChwcm92aWRlcikpO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgZ2V0Tm9uY2UoYmxvY2tUYWcpIHtcclxuICAgICAgICBpZiAoYmxvY2tUYWcgPT09IFwicGVuZGluZ1wiKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLiNub25jZVByb21pc2UgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy4jbm9uY2VQcm9taXNlID0gc3VwZXIuZ2V0Tm9uY2UoXCJwZW5kaW5nXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGRlbHRhID0gdGhpcy4jZGVsdGE7XHJcbiAgICAgICAgICAgIHJldHVybiAoYXdhaXQgdGhpcy4jbm9uY2VQcm9taXNlKSArIGRlbHRhO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc3VwZXIuZ2V0Tm9uY2UoYmxvY2tUYWcpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgTWFudWFsbHkgaW5jcmVtZW50IHRoZSBub25jZS4gVGhpcyBtYXkgYmUgdXNlZnVsIHdoZW4gbWFuYWduZ1xyXG4gICAgICogIG9mZmxpbmUgdHJhbnNhY3Rpb25zLlxyXG4gICAgICovXHJcbiAgICBpbmNyZW1lbnQoKSB7XHJcbiAgICAgICAgdGhpcy4jZGVsdGErKztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogIFJlc2V0cyB0aGUgbm9uY2UsIGNhdXNpbmcgdGhlICoqTm9uY2VNYW5hZ2VyKiogdG8gcmVsb2FkIHRoZSBjdXJyZW50XHJcbiAgICAgKiAgbm9uY2UgZnJvbSB0aGUgYmxvY2tjaGFpbiBvbiB0aGUgbmV4dCB0cmFuc2FjdGlvbi5cclxuICAgICAqL1xyXG4gICAgcmVzZXQoKSB7XHJcbiAgICAgICAgdGhpcy4jZGVsdGEgPSAwO1xyXG4gICAgICAgIHRoaXMuI25vbmNlUHJvbWlzZSA9IG51bGw7XHJcbiAgICB9XHJcbiAgICBhc3luYyBzZW5kVHJhbnNhY3Rpb24odHgpIHtcclxuICAgICAgICBjb25zdCBub25jZVByb21pc2UgPSB0aGlzLmdldE5vbmNlKFwicGVuZGluZ1wiKTtcclxuICAgICAgICB0aGlzLmluY3JlbWVudCgpO1xyXG4gICAgICAgIHR4ID0gYXdhaXQgdGhpcy5zaWduZXIucG9wdWxhdGVUcmFuc2FjdGlvbih0eCk7XHJcbiAgICAgICAgdHgubm9uY2UgPSBhd2FpdCBub25jZVByb21pc2U7XHJcbiAgICAgICAgLy8gQFRPRE86IE1heWJlIGhhbmRsZSBpbnRlcmVzdGluZy9yZWNvdmVyYWJsZSBlcnJvcnM/XHJcbiAgICAgICAgLy8gTGlrZSBkb24ndCBpbmNyZW1lbnQgaWYgdGhlIHR4IHdhcyBjZXJ0YWlubHkgbm90IHNlbnRcclxuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5zaWduZXIuc2VuZFRyYW5zYWN0aW9uKHR4KTtcclxuICAgIH1cclxuICAgIHNpZ25UcmFuc2FjdGlvbih0eCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNpZ25lci5zaWduVHJhbnNhY3Rpb24odHgpO1xyXG4gICAgfVxyXG4gICAgc2lnbk1lc3NhZ2UobWVzc2FnZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNpZ25lci5zaWduTWVzc2FnZShtZXNzYWdlKTtcclxuICAgIH1cclxuICAgIHNpZ25UeXBlZERhdGEoZG9tYWluLCB0eXBlcywgdmFsdWUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zaWduZXIuc2lnblR5cGVkRGF0YShkb21haW4sIHR5cGVzLCB2YWx1ZSk7XHJcbiAgICB9XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2lnbmVyLW5vbmNlbWFuYWdlci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/signer-noncemanager.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/subscriber-filterid.js":
/*!**********************************************************************!*\
  !*** ./node_modules/ethers/lib.esm/providers/subscriber-filterid.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FilterIdEventSubscriber: () => (/* binding */ FilterIdEventSubscriber),\n/* harmony export */   FilterIdPendingSubscriber: () => (/* binding */ FilterIdPendingSubscriber),\n/* harmony export */   FilterIdSubscriber: () => (/* binding */ FilterIdSubscriber)\n/* harmony export */ });\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/* harmony import */ var _subscriber_polling_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./subscriber-polling.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/subscriber-polling.js\");\n\r\n\r\nfunction copy(obj) {\r\n    return JSON.parse(JSON.stringify(obj));\r\n}\r\n/**\r\n *  Some backends support subscribing to events using a Filter ID.\r\n *\r\n *  When subscribing with this technique, the node issues a unique\r\n *  //Filter ID//. At this point the node dedicates resources to\r\n *  the filter, so that periodic calls to follow up on the //Filter ID//\r\n *  will receive any events since the last call.\r\n *\r\n *  @_docloc: api/providers/abstract-provider\r\n */\r\nclass FilterIdSubscriber {\r\n    #provider;\r\n    #filterIdPromise;\r\n    #poller;\r\n    #running;\r\n    #network;\r\n    #hault;\r\n    /**\r\n     *  Creates a new **FilterIdSubscriber** which will used [[_subscribe]]\r\n     *  and [[_emitResults]] to setup the subscription and provide the event\r\n     *  to the %%provider%%.\r\n     */\r\n    constructor(provider) {\r\n        this.#provider = provider;\r\n        this.#filterIdPromise = null;\r\n        this.#poller = this.#poll.bind(this);\r\n        this.#running = false;\r\n        this.#network = null;\r\n        this.#hault = false;\r\n    }\r\n    /**\r\n     *  Sub-classes **must** override this to begin the subscription.\r\n     */\r\n    _subscribe(provider) {\r\n        throw new Error(\"subclasses must override this\");\r\n    }\r\n    /**\r\n     *  Sub-classes **must** override this handle the events.\r\n     */\r\n    _emitResults(provider, result) {\r\n        throw new Error(\"subclasses must override this\");\r\n    }\r\n    /**\r\n     *  Sub-classes **must** override this handle recovery on errors.\r\n     */\r\n    _recover(provider) {\r\n        throw new Error(\"subclasses must override this\");\r\n    }\r\n    async #poll(blockNumber) {\r\n        try {\r\n            // Subscribe if necessary\r\n            if (this.#filterIdPromise == null) {\r\n                this.#filterIdPromise = this._subscribe(this.#provider);\r\n            }\r\n            // Get the Filter ID\r\n            let filterId = null;\r\n            try {\r\n                filterId = await this.#filterIdPromise;\r\n            }\r\n            catch (error) {\r\n                if (!(0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isError)(error, \"UNSUPPORTED_OPERATION\") || error.operation !== \"eth_newFilter\") {\r\n                    throw error;\r\n                }\r\n            }\r\n            // The backend does not support Filter ID; downgrade to\r\n            // polling\r\n            if (filterId == null) {\r\n                this.#filterIdPromise = null;\r\n                this.#provider._recoverSubscriber(this, this._recover(this.#provider));\r\n                return;\r\n            }\r\n            const network = await this.#provider.getNetwork();\r\n            if (!this.#network) {\r\n                this.#network = network;\r\n            }\r\n            if (this.#network.chainId !== network.chainId) {\r\n                throw new Error(\"chaid changed\");\r\n            }\r\n            if (this.#hault) {\r\n                return;\r\n            }\r\n            const result = await this.#provider.send(\"eth_getFilterChanges\", [filterId]);\r\n            await this._emitResults(this.#provider, result);\r\n        }\r\n        catch (error) {\r\n            console.log(\"@TODO\", error);\r\n        }\r\n        this.#provider.once(\"block\", this.#poller);\r\n    }\r\n    #teardown() {\r\n        const filterIdPromise = this.#filterIdPromise;\r\n        if (filterIdPromise) {\r\n            this.#filterIdPromise = null;\r\n            filterIdPromise.then((filterId) => {\r\n                if (this.#provider.destroyed) {\r\n                    return;\r\n                }\r\n                this.#provider.send(\"eth_uninstallFilter\", [filterId]);\r\n            });\r\n        }\r\n    }\r\n    start() {\r\n        if (this.#running) {\r\n            return;\r\n        }\r\n        this.#running = true;\r\n        this.#poll(-2);\r\n    }\r\n    stop() {\r\n        if (!this.#running) {\r\n            return;\r\n        }\r\n        this.#running = false;\r\n        this.#hault = true;\r\n        this.#teardown();\r\n        this.#provider.off(\"block\", this.#poller);\r\n    }\r\n    pause(dropWhilePaused) {\r\n        if (dropWhilePaused) {\r\n            this.#teardown();\r\n        }\r\n        this.#provider.off(\"block\", this.#poller);\r\n    }\r\n    resume() { this.start(); }\r\n}\r\n/**\r\n *  A **FilterIdSubscriber** for receiving contract events.\r\n *\r\n *  @_docloc: api/providers/abstract-provider\r\n */\r\nclass FilterIdEventSubscriber extends FilterIdSubscriber {\r\n    #event;\r\n    /**\r\n     *  Creates a new **FilterIdEventSubscriber** attached to %%provider%%\r\n     *  listening for %%filter%%.\r\n     */\r\n    constructor(provider, filter) {\r\n        super(provider);\r\n        this.#event = copy(filter);\r\n    }\r\n    _recover(provider) {\r\n        return new _subscriber_polling_js__WEBPACK_IMPORTED_MODULE_1__.PollingEventSubscriber(provider, this.#event);\r\n    }\r\n    async _subscribe(provider) {\r\n        const filterId = await provider.send(\"eth_newFilter\", [this.#event]);\r\n        return filterId;\r\n    }\r\n    async _emitResults(provider, results) {\r\n        for (const result of results) {\r\n            provider.emit(this.#event, provider._wrapLog(result, provider._network));\r\n        }\r\n    }\r\n}\r\n/**\r\n *  A **FilterIdSubscriber** for receiving pending transactions events.\r\n *\r\n *  @_docloc: api/providers/abstract-provider\r\n */\r\nclass FilterIdPendingSubscriber extends FilterIdSubscriber {\r\n    async _subscribe(provider) {\r\n        return await provider.send(\"eth_newPendingTransactionFilter\", []);\r\n    }\r\n    async _emitResults(provider, results) {\r\n        for (const result of results) {\r\n            provider.emit(\"pending\", result);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=subscriber-filterid.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/subscriber-filterid.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/subscriber-polling.js":
/*!*********************************************************************!*\
  !*** ./node_modules/ethers/lib.esm/providers/subscriber-polling.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OnBlockSubscriber: () => (/* binding */ OnBlockSubscriber),\n/* harmony export */   PollingBlockSubscriber: () => (/* binding */ PollingBlockSubscriber),\n/* harmony export */   PollingBlockTagSubscriber: () => (/* binding */ PollingBlockTagSubscriber),\n/* harmony export */   PollingEventSubscriber: () => (/* binding */ PollingEventSubscriber),\n/* harmony export */   PollingOrphanSubscriber: () => (/* binding */ PollingOrphanSubscriber),\n/* harmony export */   PollingTransactionSubscriber: () => (/* binding */ PollingTransactionSubscriber),\n/* harmony export */   getPollingSubscriber: () => (/* binding */ getPollingSubscriber)\n/* harmony export */ });\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n\r\nfunction copy(obj) {\r\n    return JSON.parse(JSON.stringify(obj));\r\n}\r\n/**\r\n *  Return the polling subscriber for common events.\r\n *\r\n *  @_docloc: api/providers/abstract-provider\r\n */\r\nfunction getPollingSubscriber(provider, event) {\r\n    if (event === \"block\") {\r\n        return new PollingBlockSubscriber(provider);\r\n    }\r\n    if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isHexString)(event, 32)) {\r\n        return new PollingTransactionSubscriber(provider, event);\r\n    }\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(false, \"unsupported polling event\", \"UNSUPPORTED_OPERATION\", {\r\n        operation: \"getPollingSubscriber\", info: { event }\r\n    });\r\n}\r\n// @TODO: refactor this\r\n/**\r\n *  A **PollingBlockSubscriber** polls at a regular interval for a change\r\n *  in the block number.\r\n *\r\n *  @_docloc: api/providers/abstract-provider\r\n */\r\nclass PollingBlockSubscriber {\r\n    #provider;\r\n    #poller;\r\n    #interval;\r\n    // The most recent block we have scanned for events. The value -2\r\n    // indicates we still need to fetch an initial block number\r\n    #blockNumber;\r\n    /**\r\n     *  Create a new **PollingBlockSubscriber** attached to %%provider%%.\r\n     */\r\n    constructor(provider) {\r\n        this.#provider = provider;\r\n        this.#poller = null;\r\n        this.#interval = 4000;\r\n        this.#blockNumber = -2;\r\n    }\r\n    /**\r\n     *  The polling interval.\r\n     */\r\n    get pollingInterval() { return this.#interval; }\r\n    set pollingInterval(value) { this.#interval = value; }\r\n    async #poll() {\r\n        try {\r\n            const blockNumber = await this.#provider.getBlockNumber();\r\n            // Bootstrap poll to setup our initial block number\r\n            if (this.#blockNumber === -2) {\r\n                this.#blockNumber = blockNumber;\r\n                return;\r\n            }\r\n            // @TODO: Put a cap on the maximum number of events per loop?\r\n            if (blockNumber !== this.#blockNumber) {\r\n                for (let b = this.#blockNumber + 1; b <= blockNumber; b++) {\r\n                    // We have been stopped\r\n                    if (this.#poller == null) {\r\n                        return;\r\n                    }\r\n                    await this.#provider.emit(\"block\", b);\r\n                }\r\n                this.#blockNumber = blockNumber;\r\n            }\r\n        }\r\n        catch (error) {\r\n            // @TODO: Minor bump, add an \"error\" event to let subscribers\r\n            //        know things went awry.\r\n            //console.log(error);\r\n        }\r\n        // We have been stopped\r\n        if (this.#poller == null) {\r\n            return;\r\n        }\r\n        this.#poller = this.#provider._setTimeout(this.#poll.bind(this), this.#interval);\r\n    }\r\n    start() {\r\n        if (this.#poller) {\r\n            return;\r\n        }\r\n        this.#poller = this.#provider._setTimeout(this.#poll.bind(this), this.#interval);\r\n        this.#poll();\r\n    }\r\n    stop() {\r\n        if (!this.#poller) {\r\n            return;\r\n        }\r\n        this.#provider._clearTimeout(this.#poller);\r\n        this.#poller = null;\r\n    }\r\n    pause(dropWhilePaused) {\r\n        this.stop();\r\n        if (dropWhilePaused) {\r\n            this.#blockNumber = -2;\r\n        }\r\n    }\r\n    resume() {\r\n        this.start();\r\n    }\r\n}\r\n/**\r\n *  An **OnBlockSubscriber** can be sub-classed, with a [[_poll]]\r\n *  implmentation which will be called on every new block.\r\n *\r\n *  @_docloc: api/providers/abstract-provider\r\n */\r\nclass OnBlockSubscriber {\r\n    #provider;\r\n    #poll;\r\n    #running;\r\n    /**\r\n     *  Create a new **OnBlockSubscriber** attached to %%provider%%.\r\n     */\r\n    constructor(provider) {\r\n        this.#provider = provider;\r\n        this.#running = false;\r\n        this.#poll = (blockNumber) => {\r\n            this._poll(blockNumber, this.#provider);\r\n        };\r\n    }\r\n    /**\r\n     *  Called on every new block.\r\n     */\r\n    async _poll(blockNumber, provider) {\r\n        throw new Error(\"sub-classes must override this\");\r\n    }\r\n    start() {\r\n        if (this.#running) {\r\n            return;\r\n        }\r\n        this.#running = true;\r\n        this.#poll(-2);\r\n        this.#provider.on(\"block\", this.#poll);\r\n    }\r\n    stop() {\r\n        if (!this.#running) {\r\n            return;\r\n        }\r\n        this.#running = false;\r\n        this.#provider.off(\"block\", this.#poll);\r\n    }\r\n    pause(dropWhilePaused) { this.stop(); }\r\n    resume() { this.start(); }\r\n}\r\nclass PollingBlockTagSubscriber extends OnBlockSubscriber {\r\n    #tag;\r\n    #lastBlock;\r\n    constructor(provider, tag) {\r\n        super(provider);\r\n        this.#tag = tag;\r\n        this.#lastBlock = -2;\r\n    }\r\n    pause(dropWhilePaused) {\r\n        if (dropWhilePaused) {\r\n            this.#lastBlock = -2;\r\n        }\r\n        super.pause(dropWhilePaused);\r\n    }\r\n    async _poll(blockNumber, provider) {\r\n        const block = await provider.getBlock(this.#tag);\r\n        if (block == null) {\r\n            return;\r\n        }\r\n        if (this.#lastBlock === -2) {\r\n            this.#lastBlock = block.number;\r\n        }\r\n        else if (block.number > this.#lastBlock) {\r\n            provider.emit(this.#tag, block.number);\r\n            this.#lastBlock = block.number;\r\n        }\r\n    }\r\n}\r\n/**\r\n *  @_ignore:\r\n *\r\n *  @_docloc: api/providers/abstract-provider\r\n */\r\nclass PollingOrphanSubscriber extends OnBlockSubscriber {\r\n    #filter;\r\n    constructor(provider, filter) {\r\n        super(provider);\r\n        this.#filter = copy(filter);\r\n    }\r\n    async _poll(blockNumber, provider) {\r\n        throw new Error(\"@TODO\");\r\n        console.log(this.#filter);\r\n    }\r\n}\r\n/**\r\n *  A **PollingTransactionSubscriber** will poll for a given transaction\r\n *  hash for its receipt.\r\n *\r\n *  @_docloc: api/providers/abstract-provider\r\n */\r\nclass PollingTransactionSubscriber extends OnBlockSubscriber {\r\n    #hash;\r\n    /**\r\n     *  Create a new **PollingTransactionSubscriber** attached to\r\n     *  %%provider%%, listening for %%hash%%.\r\n     */\r\n    constructor(provider, hash) {\r\n        super(provider);\r\n        this.#hash = hash;\r\n    }\r\n    async _poll(blockNumber, provider) {\r\n        const tx = await provider.getTransactionReceipt(this.#hash);\r\n        if (tx) {\r\n            provider.emit(this.#hash, tx);\r\n        }\r\n    }\r\n}\r\n/**\r\n *  A **PollingEventSubscriber** will poll for a given filter for its logs.\r\n *\r\n *  @_docloc: api/providers/abstract-provider\r\n */\r\nclass PollingEventSubscriber {\r\n    #provider;\r\n    #filter;\r\n    #poller;\r\n    #running;\r\n    // The most recent block we have scanned for events. The value -2\r\n    // indicates we still need to fetch an initial block number\r\n    #blockNumber;\r\n    /**\r\n     *  Create a new **PollingTransactionSubscriber** attached to\r\n     *  %%provider%%, listening for %%filter%%.\r\n     */\r\n    constructor(provider, filter) {\r\n        this.#provider = provider;\r\n        this.#filter = copy(filter);\r\n        this.#poller = this.#poll.bind(this);\r\n        this.#running = false;\r\n        this.#blockNumber = -2;\r\n    }\r\n    async #poll(blockNumber) {\r\n        // The initial block hasn't been determined yet\r\n        if (this.#blockNumber === -2) {\r\n            return;\r\n        }\r\n        const filter = copy(this.#filter);\r\n        filter.fromBlock = this.#blockNumber + 1;\r\n        filter.toBlock = blockNumber;\r\n        const logs = await this.#provider.getLogs(filter);\r\n        // No logs could just mean the node has not indexed them yet,\r\n        // so we keep a sliding window of 60 blocks to keep scanning\r\n        if (logs.length === 0) {\r\n            if (this.#blockNumber < blockNumber - 60) {\r\n                this.#blockNumber = blockNumber - 60;\r\n            }\r\n            return;\r\n        }\r\n        for (const log of logs) {\r\n            this.#provider.emit(this.#filter, log);\r\n            // Only advance the block number when logs were found to\r\n            // account for networks (like BNB and Polygon) which may\r\n            // sacrifice event consistency for block event speed\r\n            this.#blockNumber = log.blockNumber;\r\n        }\r\n    }\r\n    start() {\r\n        if (this.#running) {\r\n            return;\r\n        }\r\n        this.#running = true;\r\n        if (this.#blockNumber === -2) {\r\n            this.#provider.getBlockNumber().then((blockNumber) => {\r\n                this.#blockNumber = blockNumber;\r\n            });\r\n        }\r\n        this.#provider.on(\"block\", this.#poller);\r\n    }\r\n    stop() {\r\n        if (!this.#running) {\r\n            return;\r\n        }\r\n        this.#running = false;\r\n        this.#provider.off(\"block\", this.#poller);\r\n    }\r\n    pause(dropWhilePaused) {\r\n        this.stop();\r\n        if (dropWhilePaused) {\r\n            this.#blockNumber = -2;\r\n        }\r\n    }\r\n    resume() {\r\n        this.start();\r\n    }\r\n}\r\n//# sourceMappingURL=subscriber-polling.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9wcm92aWRlcnMvc3Vic2NyaWJlci1wb2xsaW5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQXdEO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBLFFBQVEsNERBQVc7QUFDbkI7QUFDQTtBQUNBLElBQUksdURBQU07QUFDVixtREFBbUQ7QUFDbkQsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QixpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCLGVBQWU7QUFDZjtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiRDpcXERvX2FuMlxcbGVuZGh1Yl92MlxcbGVuZGh1Yi1mcm9udGVuZC1uZXh0anNcXG5vZGVfbW9kdWxlc1xcZXRoZXJzXFxsaWIuZXNtXFxwcm92aWRlcnNcXHN1YnNjcmliZXItcG9sbGluZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhc3NlcnQsIGlzSGV4U3RyaW5nIH0gZnJvbSBcIi4uL3V0aWxzL2luZGV4LmpzXCI7XHJcbmZ1bmN0aW9uIGNvcHkob2JqKSB7XHJcbiAgICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvYmopKTtcclxufVxyXG4vKipcclxuICogIFJldHVybiB0aGUgcG9sbGluZyBzdWJzY3JpYmVyIGZvciBjb21tb24gZXZlbnRzLlxyXG4gKlxyXG4gKiAgQF9kb2Nsb2M6IGFwaS9wcm92aWRlcnMvYWJzdHJhY3QtcHJvdmlkZXJcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRQb2xsaW5nU3Vic2NyaWJlcihwcm92aWRlciwgZXZlbnQpIHtcclxuICAgIGlmIChldmVudCA9PT0gXCJibG9ja1wiKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQb2xsaW5nQmxvY2tTdWJzY3JpYmVyKHByb3ZpZGVyKTtcclxuICAgIH1cclxuICAgIGlmIChpc0hleFN0cmluZyhldmVudCwgMzIpKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQb2xsaW5nVHJhbnNhY3Rpb25TdWJzY3JpYmVyKHByb3ZpZGVyLCBldmVudCk7XHJcbiAgICB9XHJcbiAgICBhc3NlcnQoZmFsc2UsIFwidW5zdXBwb3J0ZWQgcG9sbGluZyBldmVudFwiLCBcIlVOU1VQUE9SVEVEX09QRVJBVElPTlwiLCB7XHJcbiAgICAgICAgb3BlcmF0aW9uOiBcImdldFBvbGxpbmdTdWJzY3JpYmVyXCIsIGluZm86IHsgZXZlbnQgfVxyXG4gICAgfSk7XHJcbn1cclxuLy8gQFRPRE86IHJlZmFjdG9yIHRoaXNcclxuLyoqXHJcbiAqICBBICoqUG9sbGluZ0Jsb2NrU3Vic2NyaWJlcioqIHBvbGxzIGF0IGEgcmVndWxhciBpbnRlcnZhbCBmb3IgYSBjaGFuZ2VcclxuICogIGluIHRoZSBibG9jayBudW1iZXIuXHJcbiAqXHJcbiAqICBAX2RvY2xvYzogYXBpL3Byb3ZpZGVycy9hYnN0cmFjdC1wcm92aWRlclxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFBvbGxpbmdCbG9ja1N1YnNjcmliZXIge1xyXG4gICAgI3Byb3ZpZGVyO1xyXG4gICAgI3BvbGxlcjtcclxuICAgICNpbnRlcnZhbDtcclxuICAgIC8vIFRoZSBtb3N0IHJlY2VudCBibG9jayB3ZSBoYXZlIHNjYW5uZWQgZm9yIGV2ZW50cy4gVGhlIHZhbHVlIC0yXHJcbiAgICAvLyBpbmRpY2F0ZXMgd2Ugc3RpbGwgbmVlZCB0byBmZXRjaCBhbiBpbml0aWFsIGJsb2NrIG51bWJlclxyXG4gICAgI2Jsb2NrTnVtYmVyO1xyXG4gICAgLyoqXHJcbiAgICAgKiAgQ3JlYXRlIGEgbmV3ICoqUG9sbGluZ0Jsb2NrU3Vic2NyaWJlcioqIGF0dGFjaGVkIHRvICUlcHJvdmlkZXIlJS5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IocHJvdmlkZXIpIHtcclxuICAgICAgICB0aGlzLiNwcm92aWRlciA9IHByb3ZpZGVyO1xyXG4gICAgICAgIHRoaXMuI3BvbGxlciA9IG51bGw7XHJcbiAgICAgICAgdGhpcy4jaW50ZXJ2YWwgPSA0MDAwO1xyXG4gICAgICAgIHRoaXMuI2Jsb2NrTnVtYmVyID0gLTI7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqICBUaGUgcG9sbGluZyBpbnRlcnZhbC5cclxuICAgICAqL1xyXG4gICAgZ2V0IHBvbGxpbmdJbnRlcnZhbCgpIHsgcmV0dXJuIHRoaXMuI2ludGVydmFsOyB9XHJcbiAgICBzZXQgcG9sbGluZ0ludGVydmFsKHZhbHVlKSB7IHRoaXMuI2ludGVydmFsID0gdmFsdWU7IH1cclxuICAgIGFzeW5jICNwb2xsKCkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJsb2NrTnVtYmVyID0gYXdhaXQgdGhpcy4jcHJvdmlkZXIuZ2V0QmxvY2tOdW1iZXIoKTtcclxuICAgICAgICAgICAgLy8gQm9vdHN0cmFwIHBvbGwgdG8gc2V0dXAgb3VyIGluaXRpYWwgYmxvY2sgbnVtYmVyXHJcbiAgICAgICAgICAgIGlmICh0aGlzLiNibG9ja051bWJlciA9PT0gLTIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuI2Jsb2NrTnVtYmVyID0gYmxvY2tOdW1iZXI7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gQFRPRE86IFB1dCBhIGNhcCBvbiB0aGUgbWF4aW11bSBudW1iZXIgb2YgZXZlbnRzIHBlciBsb29wP1xyXG4gICAgICAgICAgICBpZiAoYmxvY2tOdW1iZXIgIT09IHRoaXMuI2Jsb2NrTnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBiID0gdGhpcy4jYmxvY2tOdW1iZXIgKyAxOyBiIDw9IGJsb2NrTnVtYmVyOyBiKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBXZSBoYXZlIGJlZW4gc3RvcHBlZFxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLiNwb2xsZXIgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuI3Byb3ZpZGVyLmVtaXQoXCJibG9ja1wiLCBiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuI2Jsb2NrTnVtYmVyID0gYmxvY2tOdW1iZXI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIC8vIEBUT0RPOiBNaW5vciBidW1wLCBhZGQgYW4gXCJlcnJvclwiIGV2ZW50IHRvIGxldCBzdWJzY3JpYmVyc1xyXG4gICAgICAgICAgICAvLyAgICAgICAga25vdyB0aGluZ3Mgd2VudCBhd3J5LlxyXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gV2UgaGF2ZSBiZWVuIHN0b3BwZWRcclxuICAgICAgICBpZiAodGhpcy4jcG9sbGVyID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLiNwb2xsZXIgPSB0aGlzLiNwcm92aWRlci5fc2V0VGltZW91dCh0aGlzLiNwb2xsLmJpbmQodGhpcyksIHRoaXMuI2ludGVydmFsKTtcclxuICAgIH1cclxuICAgIHN0YXJ0KCkge1xyXG4gICAgICAgIGlmICh0aGlzLiNwb2xsZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLiNwb2xsZXIgPSB0aGlzLiNwcm92aWRlci5fc2V0VGltZW91dCh0aGlzLiNwb2xsLmJpbmQodGhpcyksIHRoaXMuI2ludGVydmFsKTtcclxuICAgICAgICB0aGlzLiNwb2xsKCk7XHJcbiAgICB9XHJcbiAgICBzdG9wKCkge1xyXG4gICAgICAgIGlmICghdGhpcy4jcG9sbGVyKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy4jcHJvdmlkZXIuX2NsZWFyVGltZW91dCh0aGlzLiNwb2xsZXIpO1xyXG4gICAgICAgIHRoaXMuI3BvbGxlciA9IG51bGw7XHJcbiAgICB9XHJcbiAgICBwYXVzZShkcm9wV2hpbGVQYXVzZWQpIHtcclxuICAgICAgICB0aGlzLnN0b3AoKTtcclxuICAgICAgICBpZiAoZHJvcFdoaWxlUGF1c2VkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuI2Jsb2NrTnVtYmVyID0gLTI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmVzdW1lKCkge1xyXG4gICAgICAgIHRoaXMuc3RhcnQoKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogIEFuICoqT25CbG9ja1N1YnNjcmliZXIqKiBjYW4gYmUgc3ViLWNsYXNzZWQsIHdpdGggYSBbW19wb2xsXV1cclxuICogIGltcGxtZW50YXRpb24gd2hpY2ggd2lsbCBiZSBjYWxsZWQgb24gZXZlcnkgbmV3IGJsb2NrLlxyXG4gKlxyXG4gKiAgQF9kb2Nsb2M6IGFwaS9wcm92aWRlcnMvYWJzdHJhY3QtcHJvdmlkZXJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBPbkJsb2NrU3Vic2NyaWJlciB7XHJcbiAgICAjcHJvdmlkZXI7XHJcbiAgICAjcG9sbDtcclxuICAgICNydW5uaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiAgQ3JlYXRlIGEgbmV3ICoqT25CbG9ja1N1YnNjcmliZXIqKiBhdHRhY2hlZCB0byAlJXByb3ZpZGVyJSUuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHByb3ZpZGVyKSB7XHJcbiAgICAgICAgdGhpcy4jcHJvdmlkZXIgPSBwcm92aWRlcjtcclxuICAgICAgICB0aGlzLiNydW5uaW5nID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy4jcG9sbCA9IChibG9ja051bWJlcikgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9wb2xsKGJsb2NrTnVtYmVyLCB0aGlzLiNwcm92aWRlcik7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogIENhbGxlZCBvbiBldmVyeSBuZXcgYmxvY2suXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIF9wb2xsKGJsb2NrTnVtYmVyLCBwcm92aWRlcikge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcInN1Yi1jbGFzc2VzIG11c3Qgb3ZlcnJpZGUgdGhpc1wiKTtcclxuICAgIH1cclxuICAgIHN0YXJ0KCkge1xyXG4gICAgICAgIGlmICh0aGlzLiNydW5uaW5nKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy4jcnVubmluZyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy4jcG9sbCgtMik7XHJcbiAgICAgICAgdGhpcy4jcHJvdmlkZXIub24oXCJibG9ja1wiLCB0aGlzLiNwb2xsKTtcclxuICAgIH1cclxuICAgIHN0b3AoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLiNydW5uaW5nKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy4jcnVubmluZyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuI3Byb3ZpZGVyLm9mZihcImJsb2NrXCIsIHRoaXMuI3BvbGwpO1xyXG4gICAgfVxyXG4gICAgcGF1c2UoZHJvcFdoaWxlUGF1c2VkKSB7IHRoaXMuc3RvcCgpOyB9XHJcbiAgICByZXN1bWUoKSB7IHRoaXMuc3RhcnQoKTsgfVxyXG59XHJcbmV4cG9ydCBjbGFzcyBQb2xsaW5nQmxvY2tUYWdTdWJzY3JpYmVyIGV4dGVuZHMgT25CbG9ja1N1YnNjcmliZXIge1xyXG4gICAgI3RhZztcclxuICAgICNsYXN0QmxvY2s7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm92aWRlciwgdGFnKSB7XHJcbiAgICAgICAgc3VwZXIocHJvdmlkZXIpO1xyXG4gICAgICAgIHRoaXMuI3RhZyA9IHRhZztcclxuICAgICAgICB0aGlzLiNsYXN0QmxvY2sgPSAtMjtcclxuICAgIH1cclxuICAgIHBhdXNlKGRyb3BXaGlsZVBhdXNlZCkge1xyXG4gICAgICAgIGlmIChkcm9wV2hpbGVQYXVzZWQpIHtcclxuICAgICAgICAgICAgdGhpcy4jbGFzdEJsb2NrID0gLTI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN1cGVyLnBhdXNlKGRyb3BXaGlsZVBhdXNlZCk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBfcG9sbChibG9ja051bWJlciwgcHJvdmlkZXIpIHtcclxuICAgICAgICBjb25zdCBibG9jayA9IGF3YWl0IHByb3ZpZGVyLmdldEJsb2NrKHRoaXMuI3RhZyk7XHJcbiAgICAgICAgaWYgKGJsb2NrID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy4jbGFzdEJsb2NrID09PSAtMikge1xyXG4gICAgICAgICAgICB0aGlzLiNsYXN0QmxvY2sgPSBibG9jay5udW1iZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGJsb2NrLm51bWJlciA+IHRoaXMuI2xhc3RCbG9jaykge1xyXG4gICAgICAgICAgICBwcm92aWRlci5lbWl0KHRoaXMuI3RhZywgYmxvY2subnVtYmVyKTtcclxuICAgICAgICAgICAgdGhpcy4jbGFzdEJsb2NrID0gYmxvY2subnVtYmVyO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4vKipcclxuICogIEBfaWdub3JlOlxyXG4gKlxyXG4gKiAgQF9kb2Nsb2M6IGFwaS9wcm92aWRlcnMvYWJzdHJhY3QtcHJvdmlkZXJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBQb2xsaW5nT3JwaGFuU3Vic2NyaWJlciBleHRlbmRzIE9uQmxvY2tTdWJzY3JpYmVyIHtcclxuICAgICNmaWx0ZXI7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm92aWRlciwgZmlsdGVyKSB7XHJcbiAgICAgICAgc3VwZXIocHJvdmlkZXIpO1xyXG4gICAgICAgIHRoaXMuI2ZpbHRlciA9IGNvcHkoZmlsdGVyKTtcclxuICAgIH1cclxuICAgIGFzeW5jIF9wb2xsKGJsb2NrTnVtYmVyLCBwcm92aWRlcikge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkBUT0RPXCIpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMuI2ZpbHRlcik7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqICBBICoqUG9sbGluZ1RyYW5zYWN0aW9uU3Vic2NyaWJlcioqIHdpbGwgcG9sbCBmb3IgYSBnaXZlbiB0cmFuc2FjdGlvblxyXG4gKiAgaGFzaCBmb3IgaXRzIHJlY2VpcHQuXHJcbiAqXHJcbiAqICBAX2RvY2xvYzogYXBpL3Byb3ZpZGVycy9hYnN0cmFjdC1wcm92aWRlclxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFBvbGxpbmdUcmFuc2FjdGlvblN1YnNjcmliZXIgZXh0ZW5kcyBPbkJsb2NrU3Vic2NyaWJlciB7XHJcbiAgICAjaGFzaDtcclxuICAgIC8qKlxyXG4gICAgICogIENyZWF0ZSBhIG5ldyAqKlBvbGxpbmdUcmFuc2FjdGlvblN1YnNjcmliZXIqKiBhdHRhY2hlZCB0b1xyXG4gICAgICogICUlcHJvdmlkZXIlJSwgbGlzdGVuaW5nIGZvciAlJWhhc2glJS5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IocHJvdmlkZXIsIGhhc2gpIHtcclxuICAgICAgICBzdXBlcihwcm92aWRlcik7XHJcbiAgICAgICAgdGhpcy4jaGFzaCA9IGhhc2g7XHJcbiAgICB9XHJcbiAgICBhc3luYyBfcG9sbChibG9ja051bWJlciwgcHJvdmlkZXIpIHtcclxuICAgICAgICBjb25zdCB0eCA9IGF3YWl0IHByb3ZpZGVyLmdldFRyYW5zYWN0aW9uUmVjZWlwdCh0aGlzLiNoYXNoKTtcclxuICAgICAgICBpZiAodHgpIHtcclxuICAgICAgICAgICAgcHJvdmlkZXIuZW1pdCh0aGlzLiNoYXNoLCB0eCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiAgQSAqKlBvbGxpbmdFdmVudFN1YnNjcmliZXIqKiB3aWxsIHBvbGwgZm9yIGEgZ2l2ZW4gZmlsdGVyIGZvciBpdHMgbG9ncy5cclxuICpcclxuICogIEBfZG9jbG9jOiBhcGkvcHJvdmlkZXJzL2Fic3RyYWN0LXByb3ZpZGVyXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgUG9sbGluZ0V2ZW50U3Vic2NyaWJlciB7XHJcbiAgICAjcHJvdmlkZXI7XHJcbiAgICAjZmlsdGVyO1xyXG4gICAgI3BvbGxlcjtcclxuICAgICNydW5uaW5nO1xyXG4gICAgLy8gVGhlIG1vc3QgcmVjZW50IGJsb2NrIHdlIGhhdmUgc2Nhbm5lZCBmb3IgZXZlbnRzLiBUaGUgdmFsdWUgLTJcclxuICAgIC8vIGluZGljYXRlcyB3ZSBzdGlsbCBuZWVkIHRvIGZldGNoIGFuIGluaXRpYWwgYmxvY2sgbnVtYmVyXHJcbiAgICAjYmxvY2tOdW1iZXI7XHJcbiAgICAvKipcclxuICAgICAqICBDcmVhdGUgYSBuZXcgKipQb2xsaW5nVHJhbnNhY3Rpb25TdWJzY3JpYmVyKiogYXR0YWNoZWQgdG9cclxuICAgICAqICAlJXByb3ZpZGVyJSUsIGxpc3RlbmluZyBmb3IgJSVmaWx0ZXIlJS5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IocHJvdmlkZXIsIGZpbHRlcikge1xyXG4gICAgICAgIHRoaXMuI3Byb3ZpZGVyID0gcHJvdmlkZXI7XHJcbiAgICAgICAgdGhpcy4jZmlsdGVyID0gY29weShmaWx0ZXIpO1xyXG4gICAgICAgIHRoaXMuI3BvbGxlciA9IHRoaXMuI3BvbGwuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLiNydW5uaW5nID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy4jYmxvY2tOdW1iZXIgPSAtMjtcclxuICAgIH1cclxuICAgIGFzeW5jICNwb2xsKGJsb2NrTnVtYmVyKSB7XHJcbiAgICAgICAgLy8gVGhlIGluaXRpYWwgYmxvY2sgaGFzbid0IGJlZW4gZGV0ZXJtaW5lZCB5ZXRcclxuICAgICAgICBpZiAodGhpcy4jYmxvY2tOdW1iZXIgPT09IC0yKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZmlsdGVyID0gY29weSh0aGlzLiNmaWx0ZXIpO1xyXG4gICAgICAgIGZpbHRlci5mcm9tQmxvY2sgPSB0aGlzLiNibG9ja051bWJlciArIDE7XHJcbiAgICAgICAgZmlsdGVyLnRvQmxvY2sgPSBibG9ja051bWJlcjtcclxuICAgICAgICBjb25zdCBsb2dzID0gYXdhaXQgdGhpcy4jcHJvdmlkZXIuZ2V0TG9ncyhmaWx0ZXIpO1xyXG4gICAgICAgIC8vIE5vIGxvZ3MgY291bGQganVzdCBtZWFuIHRoZSBub2RlIGhhcyBub3QgaW5kZXhlZCB0aGVtIHlldCxcclxuICAgICAgICAvLyBzbyB3ZSBrZWVwIGEgc2xpZGluZyB3aW5kb3cgb2YgNjAgYmxvY2tzIHRvIGtlZXAgc2Nhbm5pbmdcclxuICAgICAgICBpZiAobG9ncy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuI2Jsb2NrTnVtYmVyIDwgYmxvY2tOdW1iZXIgLSA2MCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy4jYmxvY2tOdW1iZXIgPSBibG9ja051bWJlciAtIDYwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChjb25zdCBsb2cgb2YgbG9ncykge1xyXG4gICAgICAgICAgICB0aGlzLiNwcm92aWRlci5lbWl0KHRoaXMuI2ZpbHRlciwgbG9nKTtcclxuICAgICAgICAgICAgLy8gT25seSBhZHZhbmNlIHRoZSBibG9jayBudW1iZXIgd2hlbiBsb2dzIHdlcmUgZm91bmQgdG9cclxuICAgICAgICAgICAgLy8gYWNjb3VudCBmb3IgbmV0d29ya3MgKGxpa2UgQk5CIGFuZCBQb2x5Z29uKSB3aGljaCBtYXlcclxuICAgICAgICAgICAgLy8gc2FjcmlmaWNlIGV2ZW50IGNvbnNpc3RlbmN5IGZvciBibG9jayBldmVudCBzcGVlZFxyXG4gICAgICAgICAgICB0aGlzLiNibG9ja051bWJlciA9IGxvZy5ibG9ja051bWJlcjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzdGFydCgpIHtcclxuICAgICAgICBpZiAodGhpcy4jcnVubmluZykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuI3J1bm5pbmcgPSB0cnVlO1xyXG4gICAgICAgIGlmICh0aGlzLiNibG9ja051bWJlciA9PT0gLTIpIHtcclxuICAgICAgICAgICAgdGhpcy4jcHJvdmlkZXIuZ2V0QmxvY2tOdW1iZXIoKS50aGVuKChibG9ja051bWJlcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy4jYmxvY2tOdW1iZXIgPSBibG9ja051bWJlcjtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuI3Byb3ZpZGVyLm9uKFwiYmxvY2tcIiwgdGhpcy4jcG9sbGVyKTtcclxuICAgIH1cclxuICAgIHN0b3AoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLiNydW5uaW5nKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy4jcnVubmluZyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuI3Byb3ZpZGVyLm9mZihcImJsb2NrXCIsIHRoaXMuI3BvbGxlcik7XHJcbiAgICB9XHJcbiAgICBwYXVzZShkcm9wV2hpbGVQYXVzZWQpIHtcclxuICAgICAgICB0aGlzLnN0b3AoKTtcclxuICAgICAgICBpZiAoZHJvcFdoaWxlUGF1c2VkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuI2Jsb2NrTnVtYmVyID0gLTI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmVzdW1lKCkge1xyXG4gICAgICAgIHRoaXMuc3RhcnQoKTtcclxuICAgIH1cclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdWJzY3JpYmVyLXBvbGxpbmcuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/subscriber-polling.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/ws-browser.js":
/*!*************************************************************!*\
  !*** ./node_modules/ethers/lib.esm/providers/ws-browser.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebSocket: () => (/* binding */ _WebSocket)\n/* harmony export */ });\nfunction getGlobal() {\r\n    if (typeof self !== 'undefined') {\r\n        return self;\r\n    }\r\n    if (typeof window !== 'undefined') {\r\n        return window;\r\n    }\r\n    if (typeof global !== 'undefined') {\r\n        return global;\r\n    }\r\n    throw new Error('unable to locate global object');\r\n}\r\n;\r\nconst _WebSocket = getGlobal().WebSocket;\r\n\r\n//# sourceMappingURL=ws-browser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9wcm92aWRlcnMvd3MtYnJvd3Nlci5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNtQztBQUNuQyIsInNvdXJjZXMiOlsiRDpcXERvX2FuMlxcbGVuZGh1Yl92MlxcbGVuZGh1Yi1mcm9udGVuZC1uZXh0anNcXG5vZGVfbW9kdWxlc1xcZXRoZXJzXFxsaWIuZXNtXFxwcm92aWRlcnNcXHdzLWJyb3dzZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gZ2V0R2xvYmFsKCkge1xyXG4gICAgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIHJldHVybiBzZWxmO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgcmV0dXJuIHdpbmRvdztcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIHJldHVybiBnbG9iYWw7XHJcbiAgICB9XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3VuYWJsZSB0byBsb2NhdGUgZ2xvYmFsIG9iamVjdCcpO1xyXG59XHJcbjtcclxuY29uc3QgX1dlYlNvY2tldCA9IGdldEdsb2JhbCgpLldlYlNvY2tldDtcclxuZXhwb3J0IHsgX1dlYlNvY2tldCBhcyBXZWJTb2NrZXQgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d3MtYnJvd3Nlci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/ws-browser.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/transaction/accesslist.js":
/*!***************************************************************!*\
  !*** ./node_modules/ethers/lib.esm/transaction/accesslist.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   accessListify: () => (/* binding */ accessListify)\n/* harmony export */ });\n/* harmony import */ var _address_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../address/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/address/index.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n\r\n\r\nfunction accessSetify(addr, storageKeys) {\r\n    return {\r\n        address: (0,_address_index_js__WEBPACK_IMPORTED_MODULE_0__.getAddress)(addr),\r\n        storageKeys: storageKeys.map((storageKey, index) => {\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.isHexString)(storageKey, 32), \"invalid slot\", `storageKeys[${index}]`, storageKey);\r\n            return storageKey.toLowerCase();\r\n        })\r\n    };\r\n}\r\n/**\r\n *  Returns a [[AccessList]] from any ethers-supported access-list structure.\r\n */\r\nfunction accessListify(value) {\r\n    if (Array.isArray(value)) {\r\n        return value.map((set, index) => {\r\n            if (Array.isArray(set)) {\r\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(set.length === 2, \"invalid slot set\", `value[${index}]`, set);\r\n                return accessSetify(set[0], set[1]);\r\n            }\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(set != null && typeof (set) === \"object\", \"invalid address-slot set\", \"value\", value);\r\n            return accessSetify(set.address, set.storageKeys);\r\n        });\r\n    }\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(value != null && typeof (value) === \"object\", \"invalid access list\", \"value\", value);\r\n    const result = Object.keys(value).map((addr) => {\r\n        const storageKeys = value[addr].reduce((accum, storageKey) => {\r\n            accum[storageKey] = true;\r\n            return accum;\r\n        }, {});\r\n        return accessSetify(addr, Object.keys(storageKeys).sort());\r\n    });\r\n    result.sort((a, b) => (a.address.localeCompare(b.address)));\r\n    return result;\r\n}\r\n//# sourceMappingURL=accesslist.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS90cmFuc2FjdGlvbi9hY2Nlc3NsaXN0LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFpRDtBQUNlO0FBQ2hFO0FBQ0E7QUFDQSxpQkFBaUIsNkRBQVU7QUFDM0I7QUFDQSxZQUFZLCtEQUFjLENBQUMsNERBQVcsaURBQWlELE1BQU07QUFDN0Y7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLCtEQUFjLGdEQUFnRCxNQUFNO0FBQ3BGO0FBQ0E7QUFDQSxZQUFZLCtEQUFjO0FBQzFCO0FBQ0EsU0FBUztBQUNUO0FBQ0EsSUFBSSwrREFBYztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsSUFBSTtBQUNiO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJEOlxcRG9fYW4yXFxsZW5kaHViX3YyXFxsZW5kaHViLWZyb250ZW5kLW5leHRqc1xcbm9kZV9tb2R1bGVzXFxldGhlcnNcXGxpYi5lc21cXHRyYW5zYWN0aW9uXFxhY2Nlc3NsaXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldEFkZHJlc3MgfSBmcm9tIFwiLi4vYWRkcmVzcy9pbmRleC5qc1wiO1xyXG5pbXBvcnQgeyBhc3NlcnRBcmd1bWVudCwgaXNIZXhTdHJpbmcgfSBmcm9tIFwiLi4vdXRpbHMvaW5kZXguanNcIjtcclxuZnVuY3Rpb24gYWNjZXNzU2V0aWZ5KGFkZHIsIHN0b3JhZ2VLZXlzKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGFkZHJlc3M6IGdldEFkZHJlc3MoYWRkciksXHJcbiAgICAgICAgc3RvcmFnZUtleXM6IHN0b3JhZ2VLZXlzLm1hcCgoc3RvcmFnZUtleSwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgYXNzZXJ0QXJndW1lbnQoaXNIZXhTdHJpbmcoc3RvcmFnZUtleSwgMzIpLCBcImludmFsaWQgc2xvdFwiLCBgc3RvcmFnZUtleXNbJHtpbmRleH1dYCwgc3RvcmFnZUtleSk7XHJcbiAgICAgICAgICAgIHJldHVybiBzdG9yYWdlS2V5LnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgfSlcclxuICAgIH07XHJcbn1cclxuLyoqXHJcbiAqICBSZXR1cm5zIGEgW1tBY2Nlc3NMaXN0XV0gZnJvbSBhbnkgZXRoZXJzLXN1cHBvcnRlZCBhY2Nlc3MtbGlzdCBzdHJ1Y3R1cmUuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gYWNjZXNzTGlzdGlmeSh2YWx1ZSkge1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlLm1hcCgoc2V0LCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzZXQpKSB7XHJcbiAgICAgICAgICAgICAgICBhc3NlcnRBcmd1bWVudChzZXQubGVuZ3RoID09PSAyLCBcImludmFsaWQgc2xvdCBzZXRcIiwgYHZhbHVlWyR7aW5kZXh9XWAsIHNldCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYWNjZXNzU2V0aWZ5KHNldFswXSwgc2V0WzFdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhc3NlcnRBcmd1bWVudChzZXQgIT0gbnVsbCAmJiB0eXBlb2YgKHNldCkgPT09IFwib2JqZWN0XCIsIFwiaW52YWxpZCBhZGRyZXNzLXNsb3Qgc2V0XCIsIFwidmFsdWVcIiwgdmFsdWUpO1xyXG4gICAgICAgICAgICByZXR1cm4gYWNjZXNzU2V0aWZ5KHNldC5hZGRyZXNzLCBzZXQuc3RvcmFnZUtleXMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgYXNzZXJ0QXJndW1lbnQodmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgKHZhbHVlKSA9PT0gXCJvYmplY3RcIiwgXCJpbnZhbGlkIGFjY2VzcyBsaXN0XCIsIFwidmFsdWVcIiwgdmFsdWUpO1xyXG4gICAgY29uc3QgcmVzdWx0ID0gT2JqZWN0LmtleXModmFsdWUpLm1hcCgoYWRkcikgPT4ge1xyXG4gICAgICAgIGNvbnN0IHN0b3JhZ2VLZXlzID0gdmFsdWVbYWRkcl0ucmVkdWNlKChhY2N1bSwgc3RvcmFnZUtleSkgPT4ge1xyXG4gICAgICAgICAgICBhY2N1bVtzdG9yYWdlS2V5XSA9IHRydWU7XHJcbiAgICAgICAgICAgIHJldHVybiBhY2N1bTtcclxuICAgICAgICB9LCB7fSk7XHJcbiAgICAgICAgcmV0dXJuIGFjY2Vzc1NldGlmeShhZGRyLCBPYmplY3Qua2V5cyhzdG9yYWdlS2V5cykuc29ydCgpKTtcclxuICAgIH0pO1xyXG4gICAgcmVzdWx0LnNvcnQoKGEsIGIpID0+IChhLmFkZHJlc3MubG9jYWxlQ29tcGFyZShiLmFkZHJlc3MpKSk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFjY2Vzc2xpc3QuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/transaction/accesslist.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/transaction/address.js":
/*!************************************************************!*\
  !*** ./node_modules/ethers/lib.esm/transaction/address.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   computeAddress: () => (/* binding */ computeAddress),\n/* harmony export */   recoverAddress: () => (/* binding */ recoverAddress)\n/* harmony export */ });\n/* harmony import */ var _address_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../address/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/address/index.js\");\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../crypto/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/index.js\");\n\r\n\r\n/**\r\n *  Returns the address for the %%key%%.\r\n *\r\n *  The key may be any standard form of public key or a private key.\r\n */\r\nfunction computeAddress(key) {\r\n    let pubkey;\r\n    if (typeof (key) === \"string\") {\r\n        pubkey = _crypto_index_js__WEBPACK_IMPORTED_MODULE_0__.SigningKey.computePublicKey(key, false);\r\n    }\r\n    else {\r\n        pubkey = key.publicKey;\r\n    }\r\n    return (0,_address_index_js__WEBPACK_IMPORTED_MODULE_1__.getAddress)((0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_0__.keccak256)(\"0x\" + pubkey.substring(4)).substring(26));\r\n}\r\n/**\r\n *  Returns the recovered address for the private key that was\r\n *  used to sign %%digest%% that resulted in %%signature%%.\r\n */\r\nfunction recoverAddress(digest, signature) {\r\n    return computeAddress(_crypto_index_js__WEBPACK_IMPORTED_MODULE_0__.SigningKey.recoverPublicKey(digest, signature));\r\n}\r\n//# sourceMappingURL=address.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS90cmFuc2FjdGlvbi9hZGRyZXNzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBaUQ7QUFDVTtBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EsaUJBQWlCLHdEQUFVO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyw2REFBVSxDQUFDLDJEQUFTO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLDBCQUEwQix3REFBVTtBQUNwQztBQUNBIiwic291cmNlcyI6WyJEOlxcRG9fYW4yXFxsZW5kaHViX3YyXFxsZW5kaHViLWZyb250ZW5kLW5leHRqc1xcbm9kZV9tb2R1bGVzXFxldGhlcnNcXGxpYi5lc21cXHRyYW5zYWN0aW9uXFxhZGRyZXNzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldEFkZHJlc3MgfSBmcm9tIFwiLi4vYWRkcmVzcy9pbmRleC5qc1wiO1xyXG5pbXBvcnQgeyBrZWNjYWsyNTYsIFNpZ25pbmdLZXkgfSBmcm9tIFwiLi4vY3J5cHRvL2luZGV4LmpzXCI7XHJcbi8qKlxyXG4gKiAgUmV0dXJucyB0aGUgYWRkcmVzcyBmb3IgdGhlICUla2V5JSUuXHJcbiAqXHJcbiAqICBUaGUga2V5IG1heSBiZSBhbnkgc3RhbmRhcmQgZm9ybSBvZiBwdWJsaWMga2V5IG9yIGEgcHJpdmF0ZSBrZXkuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZUFkZHJlc3Moa2V5KSB7XHJcbiAgICBsZXQgcHVia2V5O1xyXG4gICAgaWYgKHR5cGVvZiAoa2V5KSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIHB1YmtleSA9IFNpZ25pbmdLZXkuY29tcHV0ZVB1YmxpY0tleShrZXksIGZhbHNlKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHB1YmtleSA9IGtleS5wdWJsaWNLZXk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZ2V0QWRkcmVzcyhrZWNjYWsyNTYoXCIweFwiICsgcHVia2V5LnN1YnN0cmluZyg0KSkuc3Vic3RyaW5nKDI2KSk7XHJcbn1cclxuLyoqXHJcbiAqICBSZXR1cm5zIHRoZSByZWNvdmVyZWQgYWRkcmVzcyBmb3IgdGhlIHByaXZhdGUga2V5IHRoYXQgd2FzXHJcbiAqICB1c2VkIHRvIHNpZ24gJSVkaWdlc3QlJSB0aGF0IHJlc3VsdGVkIGluICUlc2lnbmF0dXJlJSUuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcmVjb3ZlckFkZHJlc3MoZGlnZXN0LCBzaWduYXR1cmUpIHtcclxuICAgIHJldHVybiBjb21wdXRlQWRkcmVzcyhTaWduaW5nS2V5LnJlY292ZXJQdWJsaWNLZXkoZGlnZXN0LCBzaWduYXR1cmUpKTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hZGRyZXNzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/transaction/address.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/transaction/authorization.js":
/*!******************************************************************!*\
  !*** ./node_modules/ethers/lib.esm/transaction/authorization.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authorizationify: () => (/* binding */ authorizationify)\n/* harmony export */ });\n/* harmony import */ var _address_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../address/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/address/index.js\");\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../crypto/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/index.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n\r\n\r\n\r\nfunction authorizationify(auth) {\r\n    return {\r\n        address: (0,_address_index_js__WEBPACK_IMPORTED_MODULE_0__.getAddress)(auth.address),\r\n        nonce: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBigInt)((auth.nonce != null) ? auth.nonce : 0),\r\n        chainId: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBigInt)((auth.chainId != null) ? auth.chainId : 0),\r\n        signature: _crypto_index_js__WEBPACK_IMPORTED_MODULE_2__.Signature.from(auth.signature)\r\n    };\r\n}\r\n//# sourceMappingURL=authorization.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS90cmFuc2FjdGlvbi9hdXRob3JpemF0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBaUQ7QUFDRjtBQUNEO0FBQ3ZDO0FBQ1A7QUFDQSxpQkFBaUIsNkRBQVU7QUFDM0IsZUFBZSwwREFBUztBQUN4QixpQkFBaUIsMERBQVM7QUFDMUIsbUJBQW1CLHVEQUFTO0FBQzVCO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiRDpcXERvX2FuMlxcbGVuZGh1Yl92MlxcbGVuZGh1Yi1mcm9udGVuZC1uZXh0anNcXG5vZGVfbW9kdWxlc1xcZXRoZXJzXFxsaWIuZXNtXFx0cmFuc2FjdGlvblxcYXV0aG9yaXphdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRBZGRyZXNzIH0gZnJvbSBcIi4uL2FkZHJlc3MvaW5kZXguanNcIjtcclxuaW1wb3J0IHsgU2lnbmF0dXJlIH0gZnJvbSBcIi4uL2NyeXB0by9pbmRleC5qc1wiO1xyXG5pbXBvcnQgeyBnZXRCaWdJbnQgfSBmcm9tIFwiLi4vdXRpbHMvaW5kZXguanNcIjtcclxuZXhwb3J0IGZ1bmN0aW9uIGF1dGhvcml6YXRpb25pZnkoYXV0aCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBhZGRyZXNzOiBnZXRBZGRyZXNzKGF1dGguYWRkcmVzcyksXHJcbiAgICAgICAgbm9uY2U6IGdldEJpZ0ludCgoYXV0aC5ub25jZSAhPSBudWxsKSA/IGF1dGgubm9uY2UgOiAwKSxcclxuICAgICAgICBjaGFpbklkOiBnZXRCaWdJbnQoKGF1dGguY2hhaW5JZCAhPSBudWxsKSA/IGF1dGguY2hhaW5JZCA6IDApLFxyXG4gICAgICAgIHNpZ25hdHVyZTogU2lnbmF0dXJlLmZyb20oYXV0aC5zaWduYXR1cmUpXHJcbiAgICB9O1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF1dGhvcml6YXRpb24uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/transaction/authorization.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/transaction/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/ethers/lib.esm/transaction/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Transaction: () => (/* reexport safe */ _transaction_js__WEBPACK_IMPORTED_MODULE_3__.Transaction),\n/* harmony export */   accessListify: () => (/* reexport safe */ _accesslist_js__WEBPACK_IMPORTED_MODULE_0__.accessListify),\n/* harmony export */   authorizationify: () => (/* reexport safe */ _authorization_js__WEBPACK_IMPORTED_MODULE_1__.authorizationify),\n/* harmony export */   computeAddress: () => (/* reexport safe */ _address_js__WEBPACK_IMPORTED_MODULE_2__.computeAddress),\n/* harmony export */   recoverAddress: () => (/* reexport safe */ _address_js__WEBPACK_IMPORTED_MODULE_2__.recoverAddress)\n/* harmony export */ });\n/* harmony import */ var _accesslist_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./accesslist.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/transaction/accesslist.js\");\n/* harmony import */ var _authorization_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./authorization.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/transaction/authorization.js\");\n/* harmony import */ var _address_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./address.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/transaction/address.js\");\n/* harmony import */ var _transaction_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./transaction.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/transaction/transaction.js\");\n/**\r\n *  Each state-changing operation on Ethereum requires a transaction.\r\n *\r\n *  @_section api/transaction:Transactions  [about-transactions]\r\n */\r\nnull;\r\n\r\n\r\n\r\n\r\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS90cmFuc2FjdGlvbi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDZ0Q7QUFDTTtBQUNRO0FBQ2Y7QUFDL0MiLCJzb3VyY2VzIjpbIkQ6XFxEb19hbjJcXGxlbmRodWJfdjJcXGxlbmRodWItZnJvbnRlbmQtbmV4dGpzXFxub2RlX21vZHVsZXNcXGV0aGVyc1xcbGliLmVzbVxcdHJhbnNhY3Rpb25cXGluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiAgRWFjaCBzdGF0ZS1jaGFuZ2luZyBvcGVyYXRpb24gb24gRXRoZXJldW0gcmVxdWlyZXMgYSB0cmFuc2FjdGlvbi5cclxuICpcclxuICogIEBfc2VjdGlvbiBhcGkvdHJhbnNhY3Rpb246VHJhbnNhY3Rpb25zICBbYWJvdXQtdHJhbnNhY3Rpb25zXVxyXG4gKi9cclxubnVsbDtcclxuZXhwb3J0IHsgYWNjZXNzTGlzdGlmeSB9IGZyb20gXCIuL2FjY2Vzc2xpc3QuanNcIjtcclxuZXhwb3J0IHsgYXV0aG9yaXphdGlvbmlmeSB9IGZyb20gXCIuL2F1dGhvcml6YXRpb24uanNcIjtcclxuZXhwb3J0IHsgY29tcHV0ZUFkZHJlc3MsIHJlY292ZXJBZGRyZXNzIH0gZnJvbSBcIi4vYWRkcmVzcy5qc1wiO1xyXG5leHBvcnQgeyBUcmFuc2FjdGlvbiB9IGZyb20gXCIuL3RyYW5zYWN0aW9uLmpzXCI7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/transaction/index.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/transaction/transaction.js":
/*!****************************************************************!*\
  !*** ./node_modules/ethers/lib.esm/transaction/transaction.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Transaction: () => (/* binding */ Transaction)\n/* harmony export */ });\n/* harmony import */ var _address_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../address/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/address/index.js\");\n/* harmony import */ var _constants_addresses_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../constants/addresses.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/constants/addresses.js\");\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../crypto/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/index.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/* harmony import */ var _accesslist_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./accesslist.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/transaction/accesslist.js\");\n/* harmony import */ var _authorization_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./authorization.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/transaction/authorization.js\");\n/* harmony import */ var _address_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./address.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/transaction/address.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst BN_0 = BigInt(0);\r\nconst BN_2 = BigInt(2);\r\nconst BN_27 = BigInt(27);\r\nconst BN_28 = BigInt(28);\r\nconst BN_35 = BigInt(35);\r\nconst BN_MAX_UINT = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\r\nconst BLOB_SIZE = 4096 * 32;\r\nfunction getKzgLibrary(kzg) {\r\n    const blobToKzgCommitment = (blob) => {\r\n        if (\"computeBlobProof\" in kzg) {\r\n            // micro-ecc-signer; check for computeBlobProof since this API\r\n            // expects a string while the kzg-wasm below expects a Unit8Array\r\n            if (\"blobToKzgCommitment\" in kzg && typeof (kzg.blobToKzgCommitment) === \"function\") {\r\n                return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(kzg.blobToKzgCommitment((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(blob)));\r\n            }\r\n        }\r\n        else if (\"blobToKzgCommitment\" in kzg && typeof (kzg.blobToKzgCommitment) === \"function\") {\r\n            // kzg-wasm <0.5.0; blobToKzgCommitment(Uint8Array) => Uint8Array\r\n            return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(kzg.blobToKzgCommitment(blob));\r\n        }\r\n        // kzg-wasm >= 0.5.0; blobToKZGCommitment(string) => string\r\n        if (\"blobToKZGCommitment\" in kzg && typeof (kzg.blobToKZGCommitment) === \"function\") {\r\n            return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(kzg.blobToKZGCommitment((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(blob)));\r\n        }\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"unsupported KZG library\", \"kzg\", kzg);\r\n    };\r\n    const computeBlobKzgProof = (blob, commitment) => {\r\n        // micro-ecc-signer\r\n        if (\"computeBlobProof\" in kzg && typeof (kzg.computeBlobProof) === \"function\") {\r\n            return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(kzg.computeBlobProof((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(blob), (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(commitment)));\r\n        }\r\n        // kzg-wasm <0.5.0; computeBlobKzgProof(Uint8Array, Uint8Array) => Uint8Array\r\n        if (\"computeBlobKzgProof\" in kzg && typeof (kzg.computeBlobKzgProof) === \"function\") {\r\n            return kzg.computeBlobKzgProof(blob, commitment);\r\n        }\r\n        // kzg-wasm >= 0.5.0; computeBlobKZGProof(string, string) => string\r\n        if (\"computeBlobKZGProof\" in kzg && typeof (kzg.computeBlobKZGProof) === \"function\") {\r\n            return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(kzg.computeBlobKZGProof((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(blob), (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(commitment)));\r\n        }\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"unsupported KZG library\", \"kzg\", kzg);\r\n    };\r\n    return { blobToKzgCommitment, computeBlobKzgProof };\r\n}\r\nfunction getVersionedHash(version, hash) {\r\n    let versioned = version.toString(16);\r\n    while (versioned.length < 2) {\r\n        versioned = \"0\" + versioned;\r\n    }\r\n    versioned += (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_1__.sha256)(hash).substring(4);\r\n    return \"0x\" + versioned;\r\n}\r\nfunction handleAddress(value) {\r\n    if (value === \"0x\") {\r\n        return null;\r\n    }\r\n    return (0,_address_index_js__WEBPACK_IMPORTED_MODULE_2__.getAddress)(value);\r\n}\r\nfunction handleAccessList(value, param) {\r\n    try {\r\n        return (0,_accesslist_js__WEBPACK_IMPORTED_MODULE_3__.accessListify)(value);\r\n    }\r\n    catch (error) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, error.message, param, value);\r\n    }\r\n}\r\nfunction handleAuthorizationList(value, param) {\r\n    try {\r\n        if (!Array.isArray(value)) {\r\n            throw new Error(\"authorizationList: invalid array\");\r\n        }\r\n        const result = [];\r\n        for (let i = 0; i < value.length; i++) {\r\n            const auth = value[i];\r\n            if (!Array.isArray(auth)) {\r\n                throw new Error(`authorization[${i}]: invalid array`);\r\n            }\r\n            if (auth.length !== 6) {\r\n                throw new Error(`authorization[${i}]: wrong length`);\r\n            }\r\n            if (!auth[1]) {\r\n                throw new Error(`authorization[${i}]: null address`);\r\n            }\r\n            result.push({\r\n                address: handleAddress(auth[1]),\r\n                nonce: handleUint(auth[2], \"nonce\"),\r\n                chainId: handleUint(auth[0], \"chainId\"),\r\n                signature: _crypto_index_js__WEBPACK_IMPORTED_MODULE_1__.Signature.from({\r\n                    yParity: handleNumber(auth[3], \"yParity\"),\r\n                    r: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.zeroPadValue)(auth[4], 32),\r\n                    s: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.zeroPadValue)(auth[5], 32)\r\n                })\r\n            });\r\n        }\r\n        return result;\r\n    }\r\n    catch (error) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, error.message, param, value);\r\n    }\r\n}\r\nfunction handleNumber(_value, param) {\r\n    if (_value === \"0x\") {\r\n        return 0;\r\n    }\r\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getNumber)(_value, param);\r\n}\r\nfunction handleUint(_value, param) {\r\n    if (_value === \"0x\") {\r\n        return BN_0;\r\n    }\r\n    const value = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt)(_value, param);\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(value <= BN_MAX_UINT, \"value exceeds uint size\", param, value);\r\n    return value;\r\n}\r\nfunction formatNumber(_value, name) {\r\n    const value = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt)(_value, \"value\");\r\n    const result = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toBeArray)(value);\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(result.length <= 32, `value too large`, `tx.${name}`, value);\r\n    return result;\r\n}\r\nfunction formatAccessList(value) {\r\n    return (0,_accesslist_js__WEBPACK_IMPORTED_MODULE_3__.accessListify)(value).map((set) => [set.address, set.storageKeys]);\r\n}\r\nfunction formatAuthorizationList(value) {\r\n    return value.map((a) => {\r\n        return [\r\n            formatNumber(a.chainId, \"chainId\"),\r\n            a.address,\r\n            formatNumber(a.nonce, \"nonce\"),\r\n            formatNumber(a.signature.yParity, \"yParity\"),\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toBeArray)(a.signature.r),\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toBeArray)(a.signature.s)\r\n        ];\r\n    });\r\n}\r\nfunction formatHashes(value, param) {\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(Array.isArray(value), `invalid ${param}`, \"value\", value);\r\n    for (let i = 0; i < value.length; i++) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isHexString)(value[i], 32), \"invalid ${ param } hash\", `value[${i}]`, value[i]);\r\n    }\r\n    return value;\r\n}\r\nfunction _parseLegacy(data) {\r\n    const fields = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.decodeRlp)(data);\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(Array.isArray(fields) && (fields.length === 9 || fields.length === 6), \"invalid field count for legacy transaction\", \"data\", data);\r\n    const tx = {\r\n        type: 0,\r\n        nonce: handleNumber(fields[0], \"nonce\"),\r\n        gasPrice: handleUint(fields[1], \"gasPrice\"),\r\n        gasLimit: handleUint(fields[2], \"gasLimit\"),\r\n        to: handleAddress(fields[3]),\r\n        value: handleUint(fields[4], \"value\"),\r\n        data: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(fields[5]),\r\n        chainId: BN_0\r\n    };\r\n    // Legacy unsigned transaction\r\n    if (fields.length === 6) {\r\n        return tx;\r\n    }\r\n    const v = handleUint(fields[6], \"v\");\r\n    const r = handleUint(fields[7], \"r\");\r\n    const s = handleUint(fields[8], \"s\");\r\n    if (r === BN_0 && s === BN_0) {\r\n        // EIP-155 unsigned transaction\r\n        tx.chainId = v;\r\n    }\r\n    else {\r\n        // Compute the EIP-155 chain ID (or 0 for legacy)\r\n        let chainId = (v - BN_35) / BN_2;\r\n        if (chainId < BN_0) {\r\n            chainId = BN_0;\r\n        }\r\n        tx.chainId = chainId;\r\n        // Signed Legacy Transaction\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(chainId !== BN_0 || (v === BN_27 || v === BN_28), \"non-canonical legacy v\", \"v\", fields[6]);\r\n        tx.signature = _crypto_index_js__WEBPACK_IMPORTED_MODULE_1__.Signature.from({\r\n            r: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.zeroPadValue)(fields[7], 32),\r\n            s: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.zeroPadValue)(fields[8], 32),\r\n            v\r\n        });\r\n        //tx.hash = keccak256(data);\r\n    }\r\n    return tx;\r\n}\r\nfunction _serializeLegacy(tx, sig) {\r\n    const fields = [\r\n        formatNumber(tx.nonce, \"nonce\"),\r\n        formatNumber(tx.gasPrice || 0, \"gasPrice\"),\r\n        formatNumber(tx.gasLimit, \"gasLimit\"),\r\n        (tx.to || \"0x\"),\r\n        formatNumber(tx.value, \"value\"),\r\n        tx.data,\r\n    ];\r\n    let chainId = BN_0;\r\n    if (tx.chainId != BN_0) {\r\n        // A chainId was provided; if non-zero we'll use EIP-155\r\n        chainId = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt)(tx.chainId, \"tx.chainId\");\r\n        // We have a chainId in the tx and an EIP-155 v in the signature,\r\n        // make sure they agree with each other\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(!sig || sig.networkV == null || sig.legacyChainId === chainId, \"tx.chainId/sig.v mismatch\", \"sig\", sig);\r\n    }\r\n    else if (tx.signature) {\r\n        // No explicit chainId, but EIP-155 have a derived implicit chainId\r\n        const legacy = tx.signature.legacyChainId;\r\n        if (legacy != null) {\r\n            chainId = legacy;\r\n        }\r\n    }\r\n    // Requesting an unsigned transaction\r\n    if (!sig) {\r\n        // We have an EIP-155 transaction (chainId was specified and non-zero)\r\n        if (chainId !== BN_0) {\r\n            fields.push((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toBeArray)(chainId));\r\n            fields.push(\"0x\");\r\n            fields.push(\"0x\");\r\n        }\r\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.encodeRlp)(fields);\r\n    }\r\n    // @TODO: We should probably check that tx.signature, chainId, and sig\r\n    //        match but that logic could break existing code, so schedule\r\n    //        this for the next major bump.\r\n    // Compute the EIP-155 v\r\n    let v = BigInt(27 + sig.yParity);\r\n    if (chainId !== BN_0) {\r\n        v = _crypto_index_js__WEBPACK_IMPORTED_MODULE_1__.Signature.getChainIdV(chainId, sig.v);\r\n    }\r\n    else if (BigInt(sig.v) !== v) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"tx.chainId/sig.v mismatch\", \"sig\", sig);\r\n    }\r\n    // Add the signature\r\n    fields.push((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toBeArray)(v));\r\n    fields.push((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toBeArray)(sig.r));\r\n    fields.push((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toBeArray)(sig.s));\r\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.encodeRlp)(fields);\r\n}\r\nfunction _parseEipSignature(tx, fields) {\r\n    let yParity;\r\n    try {\r\n        yParity = handleNumber(fields[0], \"yParity\");\r\n        if (yParity !== 0 && yParity !== 1) {\r\n            throw new Error(\"bad yParity\");\r\n        }\r\n    }\r\n    catch (error) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"invalid yParity\", \"yParity\", fields[0]);\r\n    }\r\n    const r = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.zeroPadValue)(fields[1], 32);\r\n    const s = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.zeroPadValue)(fields[2], 32);\r\n    const signature = _crypto_index_js__WEBPACK_IMPORTED_MODULE_1__.Signature.from({ r, s, yParity });\r\n    tx.signature = signature;\r\n}\r\nfunction _parseEip1559(data) {\r\n    const fields = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.decodeRlp)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(data).slice(1));\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(Array.isArray(fields) && (fields.length === 9 || fields.length === 12), \"invalid field count for transaction type: 2\", \"data\", (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(data));\r\n    const tx = {\r\n        type: 2,\r\n        chainId: handleUint(fields[0], \"chainId\"),\r\n        nonce: handleNumber(fields[1], \"nonce\"),\r\n        maxPriorityFeePerGas: handleUint(fields[2], \"maxPriorityFeePerGas\"),\r\n        maxFeePerGas: handleUint(fields[3], \"maxFeePerGas\"),\r\n        gasPrice: null,\r\n        gasLimit: handleUint(fields[4], \"gasLimit\"),\r\n        to: handleAddress(fields[5]),\r\n        value: handleUint(fields[6], \"value\"),\r\n        data: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(fields[7]),\r\n        accessList: handleAccessList(fields[8], \"accessList\"),\r\n    };\r\n    // Unsigned EIP-1559 Transaction\r\n    if (fields.length === 9) {\r\n        return tx;\r\n    }\r\n    //tx.hash = keccak256(data);\r\n    _parseEipSignature(tx, fields.slice(9));\r\n    return tx;\r\n}\r\nfunction _serializeEip1559(tx, sig) {\r\n    const fields = [\r\n        formatNumber(tx.chainId, \"chainId\"),\r\n        formatNumber(tx.nonce, \"nonce\"),\r\n        formatNumber(tx.maxPriorityFeePerGas || 0, \"maxPriorityFeePerGas\"),\r\n        formatNumber(tx.maxFeePerGas || 0, \"maxFeePerGas\"),\r\n        formatNumber(tx.gasLimit, \"gasLimit\"),\r\n        (tx.to || \"0x\"),\r\n        formatNumber(tx.value, \"value\"),\r\n        tx.data,\r\n        formatAccessList(tx.accessList || [])\r\n    ];\r\n    if (sig) {\r\n        fields.push(formatNumber(sig.yParity, \"yParity\"));\r\n        fields.push((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toBeArray)(sig.r));\r\n        fields.push((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toBeArray)(sig.s));\r\n    }\r\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.concat)([\"0x02\", (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.encodeRlp)(fields)]);\r\n}\r\nfunction _parseEip2930(data) {\r\n    const fields = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.decodeRlp)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(data).slice(1));\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(Array.isArray(fields) && (fields.length === 8 || fields.length === 11), \"invalid field count for transaction type: 1\", \"data\", (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(data));\r\n    const tx = {\r\n        type: 1,\r\n        chainId: handleUint(fields[0], \"chainId\"),\r\n        nonce: handleNumber(fields[1], \"nonce\"),\r\n        gasPrice: handleUint(fields[2], \"gasPrice\"),\r\n        gasLimit: handleUint(fields[3], \"gasLimit\"),\r\n        to: handleAddress(fields[4]),\r\n        value: handleUint(fields[5], \"value\"),\r\n        data: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(fields[6]),\r\n        accessList: handleAccessList(fields[7], \"accessList\")\r\n    };\r\n    // Unsigned EIP-2930 Transaction\r\n    if (fields.length === 8) {\r\n        return tx;\r\n    }\r\n    //tx.hash = keccak256(data);\r\n    _parseEipSignature(tx, fields.slice(8));\r\n    return tx;\r\n}\r\nfunction _serializeEip2930(tx, sig) {\r\n    const fields = [\r\n        formatNumber(tx.chainId, \"chainId\"),\r\n        formatNumber(tx.nonce, \"nonce\"),\r\n        formatNumber(tx.gasPrice || 0, \"gasPrice\"),\r\n        formatNumber(tx.gasLimit, \"gasLimit\"),\r\n        (tx.to || \"0x\"),\r\n        formatNumber(tx.value, \"value\"),\r\n        tx.data,\r\n        formatAccessList(tx.accessList || [])\r\n    ];\r\n    if (sig) {\r\n        fields.push(formatNumber(sig.yParity, \"recoveryParam\"));\r\n        fields.push((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toBeArray)(sig.r));\r\n        fields.push((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toBeArray)(sig.s));\r\n    }\r\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.concat)([\"0x01\", (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.encodeRlp)(fields)]);\r\n}\r\nfunction _parseEip4844(data) {\r\n    let fields = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.decodeRlp)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(data).slice(1));\r\n    let typeName = \"3\";\r\n    let blobs = null;\r\n    // Parse the network format\r\n    if (fields.length === 4 && Array.isArray(fields[0])) {\r\n        typeName = \"3 (network format)\";\r\n        const fBlobs = fields[1], fCommits = fields[2], fProofs = fields[3];\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(Array.isArray(fBlobs), \"invalid network format: blobs not an array\", \"fields[1]\", fBlobs);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(Array.isArray(fCommits), \"invalid network format: commitments not an array\", \"fields[2]\", fCommits);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(Array.isArray(fProofs), \"invalid network format: proofs not an array\", \"fields[3]\", fProofs);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(fBlobs.length === fCommits.length, \"invalid network format: blobs/commitments length mismatch\", \"fields\", fields);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(fBlobs.length === fProofs.length, \"invalid network format: blobs/proofs length mismatch\", \"fields\", fields);\r\n        blobs = [];\r\n        for (let i = 0; i < fields[1].length; i++) {\r\n            blobs.push({\r\n                data: fBlobs[i],\r\n                commitment: fCommits[i],\r\n                proof: fProofs[i],\r\n            });\r\n        }\r\n        fields = fields[0];\r\n    }\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(Array.isArray(fields) && (fields.length === 11 || fields.length === 14), `invalid field count for transaction type: ${typeName}`, \"data\", (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(data));\r\n    const tx = {\r\n        type: 3,\r\n        chainId: handleUint(fields[0], \"chainId\"),\r\n        nonce: handleNumber(fields[1], \"nonce\"),\r\n        maxPriorityFeePerGas: handleUint(fields[2], \"maxPriorityFeePerGas\"),\r\n        maxFeePerGas: handleUint(fields[3], \"maxFeePerGas\"),\r\n        gasPrice: null,\r\n        gasLimit: handleUint(fields[4], \"gasLimit\"),\r\n        to: handleAddress(fields[5]),\r\n        value: handleUint(fields[6], \"value\"),\r\n        data: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(fields[7]),\r\n        accessList: handleAccessList(fields[8], \"accessList\"),\r\n        maxFeePerBlobGas: handleUint(fields[9], \"maxFeePerBlobGas\"),\r\n        blobVersionedHashes: fields[10]\r\n    };\r\n    if (blobs) {\r\n        tx.blobs = blobs;\r\n    }\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(tx.to != null, `invalid address for transaction type: ${typeName}`, \"data\", data);\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(Array.isArray(tx.blobVersionedHashes), \"invalid blobVersionedHashes: must be an array\", \"data\", data);\r\n    for (let i = 0; i < tx.blobVersionedHashes.length; i++) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isHexString)(tx.blobVersionedHashes[i], 32), `invalid blobVersionedHash at index ${i}: must be length 32`, \"data\", data);\r\n    }\r\n    // Unsigned EIP-4844 Transaction\r\n    if (fields.length === 11) {\r\n        return tx;\r\n    }\r\n    // @TODO: Do we need to do this? This is only called internally\r\n    // and used to verify hashes; it might save time to not do this\r\n    //tx.hash = keccak256(concat([ \"0x03\", encodeRlp(fields) ]));\r\n    _parseEipSignature(tx, fields.slice(11));\r\n    return tx;\r\n}\r\nfunction _serializeEip4844(tx, sig, blobs) {\r\n    const fields = [\r\n        formatNumber(tx.chainId, \"chainId\"),\r\n        formatNumber(tx.nonce, \"nonce\"),\r\n        formatNumber(tx.maxPriorityFeePerGas || 0, \"maxPriorityFeePerGas\"),\r\n        formatNumber(tx.maxFeePerGas || 0, \"maxFeePerGas\"),\r\n        formatNumber(tx.gasLimit, \"gasLimit\"),\r\n        (tx.to || _constants_addresses_js__WEBPACK_IMPORTED_MODULE_4__.ZeroAddress),\r\n        formatNumber(tx.value, \"value\"),\r\n        tx.data,\r\n        formatAccessList(tx.accessList || []),\r\n        formatNumber(tx.maxFeePerBlobGas || 0, \"maxFeePerBlobGas\"),\r\n        formatHashes(tx.blobVersionedHashes || [], \"blobVersionedHashes\")\r\n    ];\r\n    if (sig) {\r\n        fields.push(formatNumber(sig.yParity, \"yParity\"));\r\n        fields.push((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toBeArray)(sig.r));\r\n        fields.push((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toBeArray)(sig.s));\r\n        // We have blobs; return the network wrapped format\r\n        if (blobs) {\r\n            return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.concat)([\r\n                \"0x03\",\r\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.encodeRlp)([\r\n                    fields,\r\n                    blobs.map((b) => b.data),\r\n                    blobs.map((b) => b.commitment),\r\n                    blobs.map((b) => b.proof),\r\n                ])\r\n            ]);\r\n        }\r\n    }\r\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.concat)([\"0x03\", (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.encodeRlp)(fields)]);\r\n}\r\nfunction _parseEip7702(data) {\r\n    const fields = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.decodeRlp)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(data).slice(1));\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(Array.isArray(fields) && (fields.length === 10 || fields.length === 13), \"invalid field count for transaction type: 4\", \"data\", (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(data));\r\n    const tx = {\r\n        type: 4,\r\n        chainId: handleUint(fields[0], \"chainId\"),\r\n        nonce: handleNumber(fields[1], \"nonce\"),\r\n        maxPriorityFeePerGas: handleUint(fields[2], \"maxPriorityFeePerGas\"),\r\n        maxFeePerGas: handleUint(fields[3], \"maxFeePerGas\"),\r\n        gasPrice: null,\r\n        gasLimit: handleUint(fields[4], \"gasLimit\"),\r\n        to: handleAddress(fields[5]),\r\n        value: handleUint(fields[6], \"value\"),\r\n        data: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(fields[7]),\r\n        accessList: handleAccessList(fields[8], \"accessList\"),\r\n        authorizationList: handleAuthorizationList(fields[9], \"authorizationList\"),\r\n    };\r\n    // Unsigned EIP-7702 Transaction\r\n    if (fields.length === 10) {\r\n        return tx;\r\n    }\r\n    _parseEipSignature(tx, fields.slice(10));\r\n    return tx;\r\n}\r\nfunction _serializeEip7702(tx, sig) {\r\n    const fields = [\r\n        formatNumber(tx.chainId, \"chainId\"),\r\n        formatNumber(tx.nonce, \"nonce\"),\r\n        formatNumber(tx.maxPriorityFeePerGas || 0, \"maxPriorityFeePerGas\"),\r\n        formatNumber(tx.maxFeePerGas || 0, \"maxFeePerGas\"),\r\n        formatNumber(tx.gasLimit, \"gasLimit\"),\r\n        (tx.to || \"0x\"),\r\n        formatNumber(tx.value, \"value\"),\r\n        tx.data,\r\n        formatAccessList(tx.accessList || []),\r\n        formatAuthorizationList(tx.authorizationList || [])\r\n    ];\r\n    if (sig) {\r\n        fields.push(formatNumber(sig.yParity, \"yParity\"));\r\n        fields.push((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toBeArray)(sig.r));\r\n        fields.push((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toBeArray)(sig.s));\r\n    }\r\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.concat)([\"0x04\", (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.encodeRlp)(fields)]);\r\n}\r\n/**\r\n *  A **Transaction** describes an operation to be executed on\r\n *  Ethereum by an Externally Owned Account (EOA). It includes\r\n *  who (the [[to]] address), what (the [[data]]) and how much (the\r\n *  [[value]] in ether) the operation should entail.\r\n *\r\n *  @example:\r\n *    tx = new Transaction()\r\n *    //_result:\r\n *\r\n *    tx.data = \"0x1234\";\r\n *    //_result:\r\n */\r\nclass Transaction {\r\n    #type;\r\n    #to;\r\n    #data;\r\n    #nonce;\r\n    #gasLimit;\r\n    #gasPrice;\r\n    #maxPriorityFeePerGas;\r\n    #maxFeePerGas;\r\n    #value;\r\n    #chainId;\r\n    #sig;\r\n    #accessList;\r\n    #maxFeePerBlobGas;\r\n    #blobVersionedHashes;\r\n    #kzg;\r\n    #blobs;\r\n    #auths;\r\n    /**\r\n     *  The transaction type.\r\n     *\r\n     *  If null, the type will be automatically inferred based on\r\n     *  explicit properties.\r\n     */\r\n    get type() { return this.#type; }\r\n    set type(value) {\r\n        switch (value) {\r\n            case null:\r\n                this.#type = null;\r\n                break;\r\n            case 0:\r\n            case \"legacy\":\r\n                this.#type = 0;\r\n                break;\r\n            case 1:\r\n            case \"berlin\":\r\n            case \"eip-2930\":\r\n                this.#type = 1;\r\n                break;\r\n            case 2:\r\n            case \"london\":\r\n            case \"eip-1559\":\r\n                this.#type = 2;\r\n                break;\r\n            case 3:\r\n            case \"cancun\":\r\n            case \"eip-4844\":\r\n                this.#type = 3;\r\n                break;\r\n            case 4:\r\n            case \"pectra\":\r\n            case \"eip-7702\":\r\n                this.#type = 4;\r\n                break;\r\n            default:\r\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"unsupported transaction type\", \"type\", value);\r\n        }\r\n    }\r\n    /**\r\n     *  The name of the transaction type.\r\n     */\r\n    get typeName() {\r\n        switch (this.type) {\r\n            case 0: return \"legacy\";\r\n            case 1: return \"eip-2930\";\r\n            case 2: return \"eip-1559\";\r\n            case 3: return \"eip-4844\";\r\n            case 4: return \"eip-7702\";\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     *  The ``to`` address for the transaction or ``null`` if the\r\n     *  transaction is an ``init`` transaction.\r\n     */\r\n    get to() {\r\n        const value = this.#to;\r\n        if (value == null && this.type === 3) {\r\n            return _constants_addresses_js__WEBPACK_IMPORTED_MODULE_4__.ZeroAddress;\r\n        }\r\n        return value;\r\n    }\r\n    set to(value) {\r\n        this.#to = (value == null) ? null : (0,_address_index_js__WEBPACK_IMPORTED_MODULE_2__.getAddress)(value);\r\n    }\r\n    /**\r\n     *  The transaction nonce.\r\n     */\r\n    get nonce() { return this.#nonce; }\r\n    set nonce(value) { this.#nonce = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getNumber)(value, \"value\"); }\r\n    /**\r\n     *  The gas limit.\r\n     */\r\n    get gasLimit() { return this.#gasLimit; }\r\n    set gasLimit(value) { this.#gasLimit = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt)(value); }\r\n    /**\r\n     *  The gas price.\r\n     *\r\n     *  On legacy networks this defines the fee that will be paid. On\r\n     *  EIP-1559 networks, this should be ``null``.\r\n     */\r\n    get gasPrice() {\r\n        const value = this.#gasPrice;\r\n        if (value == null && (this.type === 0 || this.type === 1)) {\r\n            return BN_0;\r\n        }\r\n        return value;\r\n    }\r\n    set gasPrice(value) {\r\n        this.#gasPrice = (value == null) ? null : (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt)(value, \"gasPrice\");\r\n    }\r\n    /**\r\n     *  The maximum priority fee per unit of gas to pay. On legacy\r\n     *  networks this should be ``null``.\r\n     */\r\n    get maxPriorityFeePerGas() {\r\n        const value = this.#maxPriorityFeePerGas;\r\n        if (value == null) {\r\n            if (this.type === 2 || this.type === 3) {\r\n                return BN_0;\r\n            }\r\n            return null;\r\n        }\r\n        return value;\r\n    }\r\n    set maxPriorityFeePerGas(value) {\r\n        this.#maxPriorityFeePerGas = (value == null) ? null : (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt)(value, \"maxPriorityFeePerGas\");\r\n    }\r\n    /**\r\n     *  The maximum total fee per unit of gas to pay. On legacy\r\n     *  networks this should be ``null``.\r\n     */\r\n    get maxFeePerGas() {\r\n        const value = this.#maxFeePerGas;\r\n        if (value == null) {\r\n            if (this.type === 2 || this.type === 3) {\r\n                return BN_0;\r\n            }\r\n            return null;\r\n        }\r\n        return value;\r\n    }\r\n    set maxFeePerGas(value) {\r\n        this.#maxFeePerGas = (value == null) ? null : (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt)(value, \"maxFeePerGas\");\r\n    }\r\n    /**\r\n     *  The transaction data. For ``init`` transactions this is the\r\n     *  deployment code.\r\n     */\r\n    get data() { return this.#data; }\r\n    set data(value) { this.#data = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(value); }\r\n    /**\r\n     *  The amount of ether (in wei) to send in this transactions.\r\n     */\r\n    get value() { return this.#value; }\r\n    set value(value) {\r\n        this.#value = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt)(value, \"value\");\r\n    }\r\n    /**\r\n     *  The chain ID this transaction is valid on.\r\n     */\r\n    get chainId() { return this.#chainId; }\r\n    set chainId(value) { this.#chainId = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt)(value); }\r\n    /**\r\n     *  If signed, the signature for this transaction.\r\n     */\r\n    get signature() { return this.#sig || null; }\r\n    set signature(value) {\r\n        this.#sig = (value == null) ? null : _crypto_index_js__WEBPACK_IMPORTED_MODULE_1__.Signature.from(value);\r\n    }\r\n    /**\r\n     *  The access list.\r\n     *\r\n     *  An access list permits discounted (but pre-paid) access to\r\n     *  bytecode and state variable access within contract execution.\r\n     */\r\n    get accessList() {\r\n        const value = this.#accessList || null;\r\n        if (value == null) {\r\n            if (this.type === 1 || this.type === 2 || this.type === 3) {\r\n                // @TODO: in v7, this should assign the value or become\r\n                // a live object itself, otherwise mutation is inconsistent\r\n                return [];\r\n            }\r\n            return null;\r\n        }\r\n        return value;\r\n    }\r\n    set accessList(value) {\r\n        this.#accessList = (value == null) ? null : (0,_accesslist_js__WEBPACK_IMPORTED_MODULE_3__.accessListify)(value);\r\n    }\r\n    get authorizationList() {\r\n        const value = this.#auths || null;\r\n        if (value == null) {\r\n            if (this.type === 4) {\r\n                // @TODO: in v7, this should become a live object itself,\r\n                // otherwise mutation is inconsistent\r\n                return [];\r\n            }\r\n        }\r\n        return value;\r\n    }\r\n    set authorizationList(auths) {\r\n        this.#auths = (auths == null) ? null : auths.map((a) => (0,_authorization_js__WEBPACK_IMPORTED_MODULE_5__.authorizationify)(a));\r\n    }\r\n    /**\r\n     *  The max fee per blob gas for Cancun transactions.\r\n     */\r\n    get maxFeePerBlobGas() {\r\n        const value = this.#maxFeePerBlobGas;\r\n        if (value == null && this.type === 3) {\r\n            return BN_0;\r\n        }\r\n        return value;\r\n    }\r\n    set maxFeePerBlobGas(value) {\r\n        this.#maxFeePerBlobGas = (value == null) ? null : (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBigInt)(value, \"maxFeePerBlobGas\");\r\n    }\r\n    /**\r\n     *  The BLOb versioned hashes for Cancun transactions.\r\n     */\r\n    get blobVersionedHashes() {\r\n        // @TODO: Mutation is inconsistent; if unset, the returned value\r\n        // cannot mutate the object, if set it can\r\n        let value = this.#blobVersionedHashes;\r\n        if (value == null && this.type === 3) {\r\n            return [];\r\n        }\r\n        return value;\r\n    }\r\n    set blobVersionedHashes(value) {\r\n        if (value != null) {\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(Array.isArray(value), \"blobVersionedHashes must be an Array\", \"value\", value);\r\n            value = value.slice();\r\n            for (let i = 0; i < value.length; i++) {\r\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isHexString)(value[i], 32), \"invalid blobVersionedHash\", `value[${i}]`, value[i]);\r\n            }\r\n        }\r\n        this.#blobVersionedHashes = value;\r\n    }\r\n    /**\r\n     *  The BLObs for the Transaction, if any.\r\n     *\r\n     *  If ``blobs`` is non-``null``, then the [[seriailized]]\r\n     *  will return the network formatted sidecar, otherwise it\r\n     *  will return the standard [[link-eip-2718]] payload. The\r\n     *  [[unsignedSerialized]] is unaffected regardless.\r\n     *\r\n     *  When setting ``blobs``, either fully valid [[Blob]] objects\r\n     *  may be specified (i.e. correctly padded, with correct\r\n     *  committments and proofs) or a raw [[BytesLike]] may\r\n     *  be provided.\r\n     *\r\n     *  If raw [[BytesLike]] are provided, the [[kzg]] property **must**\r\n     *  be already set. The blob will be correctly padded and the\r\n     *  [[KzgLibrary]] will be used to compute the committment and\r\n     *  proof for the blob.\r\n     *\r\n     *  A BLOb is a sequence of field elements, each of which must\r\n     *  be within the BLS field modulo, so some additional processing\r\n     *  may be required to encode arbitrary data to ensure each 32 byte\r\n     *  field is within the valid range.\r\n     *\r\n     *  Setting this automatically populates [[blobVersionedHashes]],\r\n     *  overwriting any existing values. Setting this to ``null``\r\n     *  does **not** remove the [[blobVersionedHashes]], leaving them\r\n     *  present.\r\n     */\r\n    get blobs() {\r\n        if (this.#blobs == null) {\r\n            return null;\r\n        }\r\n        return this.#blobs.map((b) => Object.assign({}, b));\r\n    }\r\n    set blobs(_blobs) {\r\n        if (_blobs == null) {\r\n            this.#blobs = null;\r\n            return;\r\n        }\r\n        const blobs = [];\r\n        const versionedHashes = [];\r\n        for (let i = 0; i < _blobs.length; i++) {\r\n            const blob = _blobs[i];\r\n            if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isBytesLike)(blob)) {\r\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(this.#kzg, \"adding a raw blob requires a KZG library\", \"UNSUPPORTED_OPERATION\", {\r\n                    operation: \"set blobs()\"\r\n                });\r\n                let data = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(blob);\r\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(data.length <= BLOB_SIZE, \"blob is too large\", `blobs[${i}]`, blob);\r\n                // Pad blob if necessary\r\n                if (data.length !== BLOB_SIZE) {\r\n                    const padded = new Uint8Array(BLOB_SIZE);\r\n                    padded.set(data);\r\n                    data = padded;\r\n                }\r\n                const commit = this.#kzg.blobToKzgCommitment(data);\r\n                const proof = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(this.#kzg.computeBlobKzgProof(data, commit));\r\n                blobs.push({\r\n                    data: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(data),\r\n                    commitment: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(commit),\r\n                    proof\r\n                });\r\n                versionedHashes.push(getVersionedHash(1, commit));\r\n            }\r\n            else {\r\n                const commit = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(blob.commitment);\r\n                blobs.push({\r\n                    data: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(blob.data),\r\n                    commitment: commit,\r\n                    proof: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(blob.proof)\r\n                });\r\n                versionedHashes.push(getVersionedHash(1, commit));\r\n            }\r\n        }\r\n        this.#blobs = blobs;\r\n        this.#blobVersionedHashes = versionedHashes;\r\n    }\r\n    get kzg() { return this.#kzg; }\r\n    set kzg(kzg) {\r\n        if (kzg == null) {\r\n            this.#kzg = null;\r\n        }\r\n        else {\r\n            this.#kzg = getKzgLibrary(kzg);\r\n        }\r\n    }\r\n    /**\r\n     *  Creates a new Transaction with default values.\r\n     */\r\n    constructor() {\r\n        this.#type = null;\r\n        this.#to = null;\r\n        this.#nonce = 0;\r\n        this.#gasLimit = BN_0;\r\n        this.#gasPrice = null;\r\n        this.#maxPriorityFeePerGas = null;\r\n        this.#maxFeePerGas = null;\r\n        this.#data = \"0x\";\r\n        this.#value = BN_0;\r\n        this.#chainId = BN_0;\r\n        this.#sig = null;\r\n        this.#accessList = null;\r\n        this.#maxFeePerBlobGas = null;\r\n        this.#blobVersionedHashes = null;\r\n        this.#kzg = null;\r\n        this.#blobs = null;\r\n        this.#auths = null;\r\n    }\r\n    /**\r\n     *  The transaction hash, if signed. Otherwise, ``null``.\r\n     */\r\n    get hash() {\r\n        if (this.signature == null) {\r\n            return null;\r\n        }\r\n        return (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)(this.#getSerialized(true, false));\r\n    }\r\n    /**\r\n     *  The pre-image hash of this transaction.\r\n     *\r\n     *  This is the digest that a [[Signer]] must sign to authorize\r\n     *  this transaction.\r\n     */\r\n    get unsignedHash() {\r\n        return (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)(this.unsignedSerialized);\r\n    }\r\n    /**\r\n     *  The sending address, if signed. Otherwise, ``null``.\r\n     */\r\n    get from() {\r\n        if (this.signature == null) {\r\n            return null;\r\n        }\r\n        return (0,_address_js__WEBPACK_IMPORTED_MODULE_6__.recoverAddress)(this.unsignedHash, this.signature);\r\n    }\r\n    /**\r\n     *  The public key of the sender, if signed. Otherwise, ``null``.\r\n     */\r\n    get fromPublicKey() {\r\n        if (this.signature == null) {\r\n            return null;\r\n        }\r\n        return _crypto_index_js__WEBPACK_IMPORTED_MODULE_1__.SigningKey.recoverPublicKey(this.unsignedHash, this.signature);\r\n    }\r\n    /**\r\n     *  Returns true if signed.\r\n     *\r\n     *  This provides a Type Guard that properties requiring a signed\r\n     *  transaction are non-null.\r\n     */\r\n    isSigned() {\r\n        return this.signature != null;\r\n    }\r\n    #getSerialized(signed, sidecar) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(!signed || this.signature != null, \"cannot serialize unsigned transaction; maybe you meant .unsignedSerialized\", \"UNSUPPORTED_OPERATION\", { operation: \".serialized\" });\r\n        const sig = signed ? this.signature : null;\r\n        switch (this.inferType()) {\r\n            case 0:\r\n                return _serializeLegacy(this, sig);\r\n            case 1:\r\n                return _serializeEip2930(this, sig);\r\n            case 2:\r\n                return _serializeEip1559(this, sig);\r\n            case 3:\r\n                return _serializeEip4844(this, sig, sidecar ? this.blobs : null);\r\n            case 4:\r\n                return _serializeEip7702(this, sig);\r\n        }\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(false, \"unsupported transaction type\", \"UNSUPPORTED_OPERATION\", { operation: \".serialized\" });\r\n    }\r\n    /**\r\n     *  The serialized transaction.\r\n     *\r\n     *  This throws if the transaction is unsigned. For the pre-image,\r\n     *  use [[unsignedSerialized]].\r\n     */\r\n    get serialized() {\r\n        return this.#getSerialized(true, true);\r\n    }\r\n    /**\r\n     *  The transaction pre-image.\r\n     *\r\n     *  The hash of this is the digest which needs to be signed to\r\n     *  authorize this transaction.\r\n     */\r\n    get unsignedSerialized() {\r\n        return this.#getSerialized(false, false);\r\n    }\r\n    /**\r\n     *  Return the most \"likely\" type; currently the highest\r\n     *  supported transaction type.\r\n     */\r\n    inferType() {\r\n        const types = this.inferTypes();\r\n        // Prefer London (EIP-1559) over Cancun (BLOb)\r\n        if (types.indexOf(2) >= 0) {\r\n            return 2;\r\n        }\r\n        // Return the highest inferred type\r\n        return (types.pop());\r\n    }\r\n    /**\r\n     *  Validates the explicit properties and returns a list of compatible\r\n     *  transaction types.\r\n     */\r\n    inferTypes() {\r\n        // Checks that there are no conflicting properties set\r\n        const hasGasPrice = this.gasPrice != null;\r\n        const hasFee = (this.maxFeePerGas != null || this.maxPriorityFeePerGas != null);\r\n        const hasAccessList = (this.accessList != null);\r\n        const hasBlob = (this.#maxFeePerBlobGas != null || this.#blobVersionedHashes);\r\n        //if (hasGasPrice && hasFee) {\r\n        //    throw new Error(\"transaction cannot have gasPrice and maxFeePerGas\");\r\n        //}\r\n        if (this.maxFeePerGas != null && this.maxPriorityFeePerGas != null) {\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(this.maxFeePerGas >= this.maxPriorityFeePerGas, \"priorityFee cannot be more than maxFee\", \"BAD_DATA\", { value: this });\r\n        }\r\n        //if (this.type === 2 && hasGasPrice) {\r\n        //    throw new Error(\"eip-1559 transaction cannot have gasPrice\");\r\n        //}\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(!hasFee || (this.type !== 0 && this.type !== 1), \"transaction type cannot have maxFeePerGas or maxPriorityFeePerGas\", \"BAD_DATA\", { value: this });\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(this.type !== 0 || !hasAccessList, \"legacy transaction cannot have accessList\", \"BAD_DATA\", { value: this });\r\n        const types = [];\r\n        // Explicit type\r\n        if (this.type != null) {\r\n            types.push(this.type);\r\n        }\r\n        else {\r\n            if (this.authorizationList && this.authorizationList.length) {\r\n                types.push(4);\r\n            }\r\n            else if (hasFee) {\r\n                types.push(2);\r\n            }\r\n            else if (hasGasPrice) {\r\n                types.push(1);\r\n                if (!hasAccessList) {\r\n                    types.push(0);\r\n                }\r\n            }\r\n            else if (hasAccessList) {\r\n                types.push(1);\r\n                types.push(2);\r\n            }\r\n            else if (hasBlob && this.to) {\r\n                types.push(3);\r\n            }\r\n            else {\r\n                types.push(0);\r\n                types.push(1);\r\n                types.push(2);\r\n                types.push(3);\r\n            }\r\n        }\r\n        types.sort();\r\n        return types;\r\n    }\r\n    /**\r\n     *  Returns true if this transaction is a legacy transaction (i.e.\r\n     *  ``type === 0``).\r\n     *\r\n     *  This provides a Type Guard that the related properties are\r\n     *  non-null.\r\n     */\r\n    isLegacy() {\r\n        return (this.type === 0);\r\n    }\r\n    /**\r\n     *  Returns true if this transaction is berlin hardform transaction (i.e.\r\n     *  ``type === 1``).\r\n     *\r\n     *  This provides a Type Guard that the related properties are\r\n     *  non-null.\r\n     */\r\n    isBerlin() {\r\n        return (this.type === 1);\r\n    }\r\n    /**\r\n     *  Returns true if this transaction is london hardform transaction (i.e.\r\n     *  ``type === 2``).\r\n     *\r\n     *  This provides a Type Guard that the related properties are\r\n     *  non-null.\r\n     */\r\n    isLondon() {\r\n        return (this.type === 2);\r\n    }\r\n    /**\r\n     *  Returns true if this transaction is an [[link-eip-4844]] BLOB\r\n     *  transaction.\r\n     *\r\n     *  This provides a Type Guard that the related properties are\r\n     *  non-null.\r\n     */\r\n    isCancun() {\r\n        return (this.type === 3);\r\n    }\r\n    /**\r\n     *  Create a copy of this transaciton.\r\n     */\r\n    clone() {\r\n        return Transaction.from(this);\r\n    }\r\n    /**\r\n     *  Return a JSON-friendly object.\r\n     */\r\n    toJSON() {\r\n        const s = (v) => {\r\n            if (v == null) {\r\n                return null;\r\n            }\r\n            return v.toString();\r\n        };\r\n        return {\r\n            type: this.type,\r\n            to: this.to,\r\n            //            from: this.from,\r\n            data: this.data,\r\n            nonce: this.nonce,\r\n            gasLimit: s(this.gasLimit),\r\n            gasPrice: s(this.gasPrice),\r\n            maxPriorityFeePerGas: s(this.maxPriorityFeePerGas),\r\n            maxFeePerGas: s(this.maxFeePerGas),\r\n            value: s(this.value),\r\n            chainId: s(this.chainId),\r\n            sig: this.signature ? this.signature.toJSON() : null,\r\n            accessList: this.accessList\r\n        };\r\n    }\r\n    /**\r\n     *  Create a **Transaction** from a serialized transaction or a\r\n     *  Transaction-like object.\r\n     */\r\n    static from(tx) {\r\n        if (tx == null) {\r\n            return new Transaction();\r\n        }\r\n        if (typeof (tx) === \"string\") {\r\n            const payload = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(tx);\r\n            if (payload[0] >= 0x7f) { // @TODO: > vs >= ??\r\n                return Transaction.from(_parseLegacy(payload));\r\n            }\r\n            switch (payload[0]) {\r\n                case 1: return Transaction.from(_parseEip2930(payload));\r\n                case 2: return Transaction.from(_parseEip1559(payload));\r\n                case 3: return Transaction.from(_parseEip4844(payload));\r\n                case 4: return Transaction.from(_parseEip7702(payload));\r\n            }\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(false, \"unsupported transaction type\", \"UNSUPPORTED_OPERATION\", { operation: \"from\" });\r\n        }\r\n        const result = new Transaction();\r\n        if (tx.type != null) {\r\n            result.type = tx.type;\r\n        }\r\n        if (tx.to != null) {\r\n            result.to = tx.to;\r\n        }\r\n        if (tx.nonce != null) {\r\n            result.nonce = tx.nonce;\r\n        }\r\n        if (tx.gasLimit != null) {\r\n            result.gasLimit = tx.gasLimit;\r\n        }\r\n        if (tx.gasPrice != null) {\r\n            result.gasPrice = tx.gasPrice;\r\n        }\r\n        if (tx.maxPriorityFeePerGas != null) {\r\n            result.maxPriorityFeePerGas = tx.maxPriorityFeePerGas;\r\n        }\r\n        if (tx.maxFeePerGas != null) {\r\n            result.maxFeePerGas = tx.maxFeePerGas;\r\n        }\r\n        if (tx.maxFeePerBlobGas != null) {\r\n            result.maxFeePerBlobGas = tx.maxFeePerBlobGas;\r\n        }\r\n        if (tx.data != null) {\r\n            result.data = tx.data;\r\n        }\r\n        if (tx.value != null) {\r\n            result.value = tx.value;\r\n        }\r\n        if (tx.chainId != null) {\r\n            result.chainId = tx.chainId;\r\n        }\r\n        if (tx.signature != null) {\r\n            result.signature = _crypto_index_js__WEBPACK_IMPORTED_MODULE_1__.Signature.from(tx.signature);\r\n        }\r\n        if (tx.accessList != null) {\r\n            result.accessList = tx.accessList;\r\n        }\r\n        if (tx.authorizationList != null) {\r\n            result.authorizationList = tx.authorizationList;\r\n        }\r\n        // This will get overwritten by blobs, if present\r\n        if (tx.blobVersionedHashes != null) {\r\n            result.blobVersionedHashes = tx.blobVersionedHashes;\r\n        }\r\n        // Make sure we assign the kzg before assigning blobs, which\r\n        // require the library in the event raw blob data is provided.\r\n        if (tx.kzg != null) {\r\n            result.kzg = tx.kzg;\r\n        }\r\n        if (tx.blobs != null) {\r\n            result.blobs = tx.blobs;\r\n        }\r\n        if (tx.hash != null) {\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(result.isSigned(), \"unsigned transaction cannot define '.hash'\", \"tx\", tx);\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(result.hash === tx.hash, \"hash mismatch\", \"tx\", tx);\r\n        }\r\n        if (tx.from != null) {\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(result.isSigned(), \"unsigned transaction cannot define '.from'\", \"tx\", tx);\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(result.from.toLowerCase() === (tx.from || \"\").toLowerCase(), \"from mismatch\", \"tx\", tx);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n//# sourceMappingURL=transaction.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS90cmFuc2FjdGlvbi90cmFuc2FjdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFpRDtBQUNPO0FBQ3NCO0FBQ3VHO0FBQ3JJO0FBQ007QUFDUjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0EsdUJBQXVCLHlEQUFRLHlCQUF5Qix3REFBTztBQUMvRDtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEMsbUJBQW1CLHlEQUFRO0FBQzNCO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0EsbUJBQW1CLHlEQUFRLHlCQUF5Qix3REFBTztBQUMzRDtBQUNBLFFBQVEsK0RBQWM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIseURBQVEsc0JBQXNCLHdEQUFPLFFBQVEsd0RBQU87QUFDdkU7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0EsbUJBQW1CLHlEQUFRLHlCQUF5Qix3REFBTyxRQUFRLHdEQUFPO0FBQzFFO0FBQ0EsUUFBUSwrREFBYztBQUN0QjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsd0RBQU07QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyw2REFBVTtBQUNyQjtBQUNBO0FBQ0E7QUFDQSxlQUFlLDZEQUFhO0FBQzVCO0FBQ0E7QUFDQSxRQUFRLCtEQUFjO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isa0JBQWtCO0FBQzFDO0FBQ0E7QUFDQSxpREFBaUQsRUFBRTtBQUNuRDtBQUNBO0FBQ0EsaURBQWlELEVBQUU7QUFDbkQ7QUFDQTtBQUNBLGlEQUFpRCxFQUFFO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsdURBQVM7QUFDcEM7QUFDQSx1QkFBdUIsNkRBQVk7QUFDbkMsdUJBQXVCLDZEQUFZO0FBQ25DLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLCtEQUFjO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsMERBQVM7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiwwREFBUztBQUMzQixJQUFJLCtEQUFjO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiwwREFBUztBQUMzQixtQkFBbUIsMERBQVM7QUFDNUIsSUFBSSwrREFBYywrQ0FBK0MsS0FBSztBQUN0RTtBQUNBO0FBQ0E7QUFDQSxXQUFXLDZEQUFhO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDBEQUFTO0FBQ3JCLFlBQVksMERBQVM7QUFDckI7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLElBQUksK0RBQWMsa0NBQWtDLE1BQU07QUFDMUQsb0JBQW9CLGtCQUFrQjtBQUN0QyxRQUFRLCtEQUFjLENBQUMsNERBQVcsNEJBQTRCLFFBQVEsZ0JBQWdCLEVBQUU7QUFDeEY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsMERBQVM7QUFDNUIsSUFBSSwrREFBYztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsd0RBQU87QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSwrREFBYztBQUN0Qix1QkFBdUIsdURBQVM7QUFDaEMsZUFBZSw2REFBWTtBQUMzQixlQUFlLDZEQUFZO0FBQzNCO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQyxrQkFBa0IsMERBQVM7QUFDM0I7QUFDQTtBQUNBLFFBQVEsK0RBQWM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLDBEQUFTO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBLGVBQWUsMERBQVM7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHVEQUFTO0FBQ3JCO0FBQ0E7QUFDQSxRQUFRLCtEQUFjO0FBQ3RCO0FBQ0E7QUFDQSxnQkFBZ0IsMERBQVM7QUFDekIsZ0JBQWdCLDBEQUFTO0FBQ3pCLGdCQUFnQiwwREFBUztBQUN6QixXQUFXLDBEQUFTO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSwrREFBYztBQUN0QjtBQUNBLGNBQWMsNkRBQVk7QUFDMUIsY0FBYyw2REFBWTtBQUMxQixzQkFBc0IsdURBQVMsUUFBUSxlQUFlO0FBQ3REO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQiwwREFBUyxDQUFDLHlEQUFRO0FBQ3JDLElBQUksK0RBQWMsZ0lBQWdJLHdEQUFPO0FBQ3pKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyx3REFBTztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsMERBQVM7QUFDN0Isb0JBQW9CLDBEQUFTO0FBQzdCO0FBQ0EsV0FBVyx1REFBTSxVQUFVLDBEQUFTO0FBQ3BDO0FBQ0E7QUFDQSxtQkFBbUIsMERBQVMsQ0FBQyx5REFBUTtBQUNyQyxJQUFJLCtEQUFjLGdJQUFnSSx3REFBTztBQUN6SjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyx3REFBTztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLDBEQUFTO0FBQzdCLG9CQUFvQiwwREFBUztBQUM3QjtBQUNBLFdBQVcsdURBQU0sVUFBVSwwREFBUztBQUNwQztBQUNBO0FBQ0EsaUJBQWlCLDBEQUFTLENBQUMseURBQVE7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSwrREFBYztBQUN0QixRQUFRLCtEQUFjO0FBQ3RCLFFBQVEsK0RBQWM7QUFDdEIsUUFBUSwrREFBYztBQUN0QixRQUFRLCtEQUFjO0FBQ3RCO0FBQ0Esd0JBQXdCLHNCQUFzQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxJQUFJLCtEQUFjLHVIQUF1SCxTQUFTLFdBQVcsd0RBQU87QUFDcEs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLHdEQUFPO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSwrREFBYyx5REFBeUQsU0FBUztBQUNwRixJQUFJLCtEQUFjO0FBQ2xCLG9CQUFvQixtQ0FBbUM7QUFDdkQsUUFBUSwrREFBYyxDQUFDLDREQUFXLHVFQUF1RSxFQUFFO0FBQzNHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGdFQUFXO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsMERBQVM7QUFDN0Isb0JBQW9CLDBEQUFTO0FBQzdCLDBCQUEwQjtBQUMxQjtBQUNBLG1CQUFtQix1REFBTTtBQUN6QjtBQUNBLGdCQUFnQiwwREFBUztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyx1REFBTSxVQUFVLDBEQUFTO0FBQ3BDO0FBQ0E7QUFDQSxtQkFBbUIsMERBQVMsQ0FBQyx5REFBUTtBQUNyQyxJQUFJLCtEQUFjLGlJQUFpSSx3REFBTztBQUMxSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsd0RBQU87QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsMERBQVM7QUFDN0Isb0JBQW9CLDBEQUFTO0FBQzdCO0FBQ0EsV0FBVyx1REFBTSxVQUFVLDBEQUFTO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLCtEQUFjO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGdFQUFXO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLDZEQUFVO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCLHVCQUF1QixjQUFjLDBEQUFTO0FBQzlDO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQiwwQkFBMEIsaUJBQWlCLDBEQUFTO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0QsMERBQVM7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4REFBOEQsMERBQVM7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsMERBQVM7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixzQkFBc0IsYUFBYSx3REFBTztBQUMxQztBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQSxzQkFBc0IsMERBQVM7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEIseUJBQXlCLGdCQUFnQiwwREFBUztBQUNsRDtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQSw2Q0FBNkMsdURBQVM7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCw2REFBYTtBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdFQUFnRSxtRUFBZ0I7QUFDaEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMERBQTBELDBEQUFTO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSwrREFBYztBQUMxQjtBQUNBLDRCQUE0QixrQkFBa0I7QUFDOUMsZ0JBQWdCLCtEQUFjLENBQUMsNERBQVcsc0RBQXNELEVBQUU7QUFDbEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNEO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsbUJBQW1CO0FBQzNDO0FBQ0EsZ0JBQWdCLDREQUFXO0FBQzNCLGdCQUFnQix1REFBTTtBQUN0QjtBQUNBLGlCQUFpQjtBQUNqQiwyQkFBMkIseURBQVE7QUFDbkMsZ0JBQWdCLCtEQUFjLHlEQUF5RCxFQUFFO0FBQ3pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLHdEQUFPO0FBQ3JDO0FBQ0EsMEJBQTBCLHdEQUFPO0FBQ2pDLGdDQUFnQyx3REFBTztBQUN2QztBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSwrQkFBK0Isd0RBQU87QUFDdEM7QUFDQSwwQkFBMEIsd0RBQU87QUFDakM7QUFDQSwyQkFBMkIsd0RBQU87QUFDbEMsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsMkRBQVM7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsMkRBQVM7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsMkRBQWM7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsd0RBQVU7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsdURBQU0sNEVBQTRFLGlFQUFpRSwwQkFBMEI7QUFDckw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLHVEQUFNLG1FQUFtRSwwQkFBMEI7QUFDM0c7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksdURBQU0seUdBQXlHLGFBQWE7QUFDeEk7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLHVEQUFNLHFJQUFxSSxhQUFhO0FBQ2hLLFFBQVEsdURBQU0sK0ZBQStGLGFBQWE7QUFDMUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qix5REFBUTtBQUNwQyxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksdURBQU0sbUVBQW1FLG1CQUFtQjtBQUN4RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsdURBQVM7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksK0RBQWM7QUFDMUIsWUFBWSwrREFBYztBQUMxQjtBQUNBO0FBQ0EsWUFBWSwrREFBYztBQUMxQixZQUFZLCtEQUFjO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkQ6XFxEb19hbjJcXGxlbmRodWJfdjJcXGxlbmRodWItZnJvbnRlbmQtbmV4dGpzXFxub2RlX21vZHVsZXNcXGV0aGVyc1xcbGliLmVzbVxcdHJhbnNhY3Rpb25cXHRyYW5zYWN0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldEFkZHJlc3MgfSBmcm9tIFwiLi4vYWRkcmVzcy9pbmRleC5qc1wiO1xyXG5pbXBvcnQgeyBaZXJvQWRkcmVzcyB9IGZyb20gXCIuLi9jb25zdGFudHMvYWRkcmVzc2VzLmpzXCI7XHJcbmltcG9ydCB7IGtlY2NhazI1Niwgc2hhMjU2LCBTaWduYXR1cmUsIFNpZ25pbmdLZXkgfSBmcm9tIFwiLi4vY3J5cHRvL2luZGV4LmpzXCI7XHJcbmltcG9ydCB7IGNvbmNhdCwgZGVjb2RlUmxwLCBlbmNvZGVSbHAsIGdldEJ5dGVzLCBnZXRCaWdJbnQsIGdldE51bWJlciwgaGV4bGlmeSwgYXNzZXJ0LCBhc3NlcnRBcmd1bWVudCwgaXNCeXRlc0xpa2UsIGlzSGV4U3RyaW5nLCB0b0JlQXJyYXksIHplcm9QYWRWYWx1ZSB9IGZyb20gXCIuLi91dGlscy9pbmRleC5qc1wiO1xyXG5pbXBvcnQgeyBhY2Nlc3NMaXN0aWZ5IH0gZnJvbSBcIi4vYWNjZXNzbGlzdC5qc1wiO1xyXG5pbXBvcnQgeyBhdXRob3JpemF0aW9uaWZ5IH0gZnJvbSBcIi4vYXV0aG9yaXphdGlvbi5qc1wiO1xyXG5pbXBvcnQgeyByZWNvdmVyQWRkcmVzcyB9IGZyb20gXCIuL2FkZHJlc3MuanNcIjtcclxuY29uc3QgQk5fMCA9IEJpZ0ludCgwKTtcclxuY29uc3QgQk5fMiA9IEJpZ0ludCgyKTtcclxuY29uc3QgQk5fMjcgPSBCaWdJbnQoMjcpO1xyXG5jb25zdCBCTl8yOCA9IEJpZ0ludCgyOCk7XHJcbmNvbnN0IEJOXzM1ID0gQmlnSW50KDM1KTtcclxuY29uc3QgQk5fTUFYX1VJTlQgPSBCaWdJbnQoXCIweGZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZcIik7XHJcbmNvbnN0IEJMT0JfU0laRSA9IDQwOTYgKiAzMjtcclxuZnVuY3Rpb24gZ2V0S3pnTGlicmFyeShremcpIHtcclxuICAgIGNvbnN0IGJsb2JUb0t6Z0NvbW1pdG1lbnQgPSAoYmxvYikgPT4ge1xyXG4gICAgICAgIGlmIChcImNvbXB1dGVCbG9iUHJvb2ZcIiBpbiBremcpIHtcclxuICAgICAgICAgICAgLy8gbWljcm8tZWNjLXNpZ25lcjsgY2hlY2sgZm9yIGNvbXB1dGVCbG9iUHJvb2Ygc2luY2UgdGhpcyBBUElcclxuICAgICAgICAgICAgLy8gZXhwZWN0cyBhIHN0cmluZyB3aGlsZSB0aGUga3pnLXdhc20gYmVsb3cgZXhwZWN0cyBhIFVuaXQ4QXJyYXlcclxuICAgICAgICAgICAgaWYgKFwiYmxvYlRvS3pnQ29tbWl0bWVudFwiIGluIGt6ZyAmJiB0eXBlb2YgKGt6Zy5ibG9iVG9LemdDb21taXRtZW50KSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0Qnl0ZXMoa3pnLmJsb2JUb0t6Z0NvbW1pdG1lbnQoaGV4bGlmeShibG9iKSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKFwiYmxvYlRvS3pnQ29tbWl0bWVudFwiIGluIGt6ZyAmJiB0eXBlb2YgKGt6Zy5ibG9iVG9LemdDb21taXRtZW50KSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgIC8vIGt6Zy13YXNtIDwwLjUuMDsgYmxvYlRvS3pnQ29tbWl0bWVudChVaW50OEFycmF5KSA9PiBVaW50OEFycmF5XHJcbiAgICAgICAgICAgIHJldHVybiBnZXRCeXRlcyhremcuYmxvYlRvS3pnQ29tbWl0bWVudChibG9iKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGt6Zy13YXNtID49IDAuNS4wOyBibG9iVG9LWkdDb21taXRtZW50KHN0cmluZykgPT4gc3RyaW5nXHJcbiAgICAgICAgaWYgKFwiYmxvYlRvS1pHQ29tbWl0bWVudFwiIGluIGt6ZyAmJiB0eXBlb2YgKGt6Zy5ibG9iVG9LWkdDb21taXRtZW50KSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBnZXRCeXRlcyhremcuYmxvYlRvS1pHQ29tbWl0bWVudChoZXhsaWZ5KGJsb2IpKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFzc2VydEFyZ3VtZW50KGZhbHNlLCBcInVuc3VwcG9ydGVkIEtaRyBsaWJyYXJ5XCIsIFwia3pnXCIsIGt6Zyk7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgY29tcHV0ZUJsb2JLemdQcm9vZiA9IChibG9iLCBjb21taXRtZW50KSA9PiB7XHJcbiAgICAgICAgLy8gbWljcm8tZWNjLXNpZ25lclxyXG4gICAgICAgIGlmIChcImNvbXB1dGVCbG9iUHJvb2ZcIiBpbiBremcgJiYgdHlwZW9mIChremcuY29tcHV0ZUJsb2JQcm9vZikgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICByZXR1cm4gZ2V0Qnl0ZXMoa3pnLmNvbXB1dGVCbG9iUHJvb2YoaGV4bGlmeShibG9iKSwgaGV4bGlmeShjb21taXRtZW50KSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBremctd2FzbSA8MC41LjA7IGNvbXB1dGVCbG9iS3pnUHJvb2YoVWludDhBcnJheSwgVWludDhBcnJheSkgPT4gVWludDhBcnJheVxyXG4gICAgICAgIGlmIChcImNvbXB1dGVCbG9iS3pnUHJvb2ZcIiBpbiBremcgJiYgdHlwZW9mIChremcuY29tcHV0ZUJsb2JLemdQcm9vZikgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICByZXR1cm4ga3pnLmNvbXB1dGVCbG9iS3pnUHJvb2YoYmxvYiwgY29tbWl0bWVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGt6Zy13YXNtID49IDAuNS4wOyBjb21wdXRlQmxvYktaR1Byb29mKHN0cmluZywgc3RyaW5nKSA9PiBzdHJpbmdcclxuICAgICAgICBpZiAoXCJjb21wdXRlQmxvYktaR1Byb29mXCIgaW4ga3pnICYmIHR5cGVvZiAoa3pnLmNvbXB1dGVCbG9iS1pHUHJvb2YpID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGdldEJ5dGVzKGt6Zy5jb21wdXRlQmxvYktaR1Byb29mKGhleGxpZnkoYmxvYiksIGhleGxpZnkoY29tbWl0bWVudCkpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYXNzZXJ0QXJndW1lbnQoZmFsc2UsIFwidW5zdXBwb3J0ZWQgS1pHIGxpYnJhcnlcIiwgXCJremdcIiwga3pnKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4geyBibG9iVG9LemdDb21taXRtZW50LCBjb21wdXRlQmxvYkt6Z1Byb29mIH07XHJcbn1cclxuZnVuY3Rpb24gZ2V0VmVyc2lvbmVkSGFzaCh2ZXJzaW9uLCBoYXNoKSB7XHJcbiAgICBsZXQgdmVyc2lvbmVkID0gdmVyc2lvbi50b1N0cmluZygxNik7XHJcbiAgICB3aGlsZSAodmVyc2lvbmVkLmxlbmd0aCA8IDIpIHtcclxuICAgICAgICB2ZXJzaW9uZWQgPSBcIjBcIiArIHZlcnNpb25lZDtcclxuICAgIH1cclxuICAgIHZlcnNpb25lZCArPSBzaGEyNTYoaGFzaCkuc3Vic3RyaW5nKDQpO1xyXG4gICAgcmV0dXJuIFwiMHhcIiArIHZlcnNpb25lZDtcclxufVxyXG5mdW5jdGlvbiBoYW5kbGVBZGRyZXNzKHZhbHVlKSB7XHJcbiAgICBpZiAodmFsdWUgPT09IFwiMHhcIikge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGdldEFkZHJlc3ModmFsdWUpO1xyXG59XHJcbmZ1bmN0aW9uIGhhbmRsZUFjY2Vzc0xpc3QodmFsdWUsIHBhcmFtKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHJldHVybiBhY2Nlc3NMaXN0aWZ5KHZhbHVlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGFzc2VydEFyZ3VtZW50KGZhbHNlLCBlcnJvci5tZXNzYWdlLCBwYXJhbSwgdmFsdWUpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGhhbmRsZUF1dGhvcml6YXRpb25MaXN0KHZhbHVlLCBwYXJhbSkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImF1dGhvcml6YXRpb25MaXN0OiBpbnZhbGlkIGFycmF5XCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGF1dGggPSB2YWx1ZVtpXTtcclxuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGF1dGgpKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGF1dGhvcml6YXRpb25bJHtpfV06IGludmFsaWQgYXJyYXlgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYXV0aC5sZW5ndGggIT09IDYpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgYXV0aG9yaXphdGlvblske2l9XTogd3JvbmcgbGVuZ3RoYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFhdXRoWzFdKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGF1dGhvcml6YXRpb25bJHtpfV06IG51bGwgYWRkcmVzc2ApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtcclxuICAgICAgICAgICAgICAgIGFkZHJlc3M6IGhhbmRsZUFkZHJlc3MoYXV0aFsxXSksXHJcbiAgICAgICAgICAgICAgICBub25jZTogaGFuZGxlVWludChhdXRoWzJdLCBcIm5vbmNlXCIpLFxyXG4gICAgICAgICAgICAgICAgY2hhaW5JZDogaGFuZGxlVWludChhdXRoWzBdLCBcImNoYWluSWRcIiksXHJcbiAgICAgICAgICAgICAgICBzaWduYXR1cmU6IFNpZ25hdHVyZS5mcm9tKHtcclxuICAgICAgICAgICAgICAgICAgICB5UGFyaXR5OiBoYW5kbGVOdW1iZXIoYXV0aFszXSwgXCJ5UGFyaXR5XCIpLFxyXG4gICAgICAgICAgICAgICAgICAgIHI6IHplcm9QYWRWYWx1ZShhdXRoWzRdLCAzMiksXHJcbiAgICAgICAgICAgICAgICAgICAgczogemVyb1BhZFZhbHVlKGF1dGhbNV0sIDMyKVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBhc3NlcnRBcmd1bWVudChmYWxzZSwgZXJyb3IubWVzc2FnZSwgcGFyYW0sIHZhbHVlKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBoYW5kbGVOdW1iZXIoX3ZhbHVlLCBwYXJhbSkge1xyXG4gICAgaWYgKF92YWx1ZSA9PT0gXCIweFwiKSB7XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZ2V0TnVtYmVyKF92YWx1ZSwgcGFyYW0pO1xyXG59XHJcbmZ1bmN0aW9uIGhhbmRsZVVpbnQoX3ZhbHVlLCBwYXJhbSkge1xyXG4gICAgaWYgKF92YWx1ZSA9PT0gXCIweFwiKSB7XHJcbiAgICAgICAgcmV0dXJuIEJOXzA7XHJcbiAgICB9XHJcbiAgICBjb25zdCB2YWx1ZSA9IGdldEJpZ0ludChfdmFsdWUsIHBhcmFtKTtcclxuICAgIGFzc2VydEFyZ3VtZW50KHZhbHVlIDw9IEJOX01BWF9VSU5ULCBcInZhbHVlIGV4Y2VlZHMgdWludCBzaXplXCIsIHBhcmFtLCB2YWx1ZSk7XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbn1cclxuZnVuY3Rpb24gZm9ybWF0TnVtYmVyKF92YWx1ZSwgbmFtZSkge1xyXG4gICAgY29uc3QgdmFsdWUgPSBnZXRCaWdJbnQoX3ZhbHVlLCBcInZhbHVlXCIpO1xyXG4gICAgY29uc3QgcmVzdWx0ID0gdG9CZUFycmF5KHZhbHVlKTtcclxuICAgIGFzc2VydEFyZ3VtZW50KHJlc3VsdC5sZW5ndGggPD0gMzIsIGB2YWx1ZSB0b28gbGFyZ2VgLCBgdHguJHtuYW1lfWAsIHZhbHVlKTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuZnVuY3Rpb24gZm9ybWF0QWNjZXNzTGlzdCh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIGFjY2Vzc0xpc3RpZnkodmFsdWUpLm1hcCgoc2V0KSA9PiBbc2V0LmFkZHJlc3MsIHNldC5zdG9yYWdlS2V5c10pO1xyXG59XHJcbmZ1bmN0aW9uIGZvcm1hdEF1dGhvcml6YXRpb25MaXN0KHZhbHVlKSB7XHJcbiAgICByZXR1cm4gdmFsdWUubWFwKChhKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgZm9ybWF0TnVtYmVyKGEuY2hhaW5JZCwgXCJjaGFpbklkXCIpLFxyXG4gICAgICAgICAgICBhLmFkZHJlc3MsXHJcbiAgICAgICAgICAgIGZvcm1hdE51bWJlcihhLm5vbmNlLCBcIm5vbmNlXCIpLFxyXG4gICAgICAgICAgICBmb3JtYXROdW1iZXIoYS5zaWduYXR1cmUueVBhcml0eSwgXCJ5UGFyaXR5XCIpLFxyXG4gICAgICAgICAgICB0b0JlQXJyYXkoYS5zaWduYXR1cmUuciksXHJcbiAgICAgICAgICAgIHRvQmVBcnJheShhLnNpZ25hdHVyZS5zKVxyXG4gICAgICAgIF07XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiBmb3JtYXRIYXNoZXModmFsdWUsIHBhcmFtKSB7XHJcbiAgICBhc3NlcnRBcmd1bWVudChBcnJheS5pc0FycmF5KHZhbHVlKSwgYGludmFsaWQgJHtwYXJhbX1gLCBcInZhbHVlXCIsIHZhbHVlKTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBhc3NlcnRBcmd1bWVudChpc0hleFN0cmluZyh2YWx1ZVtpXSwgMzIpLCBcImludmFsaWQgJHsgcGFyYW0gfSBoYXNoXCIsIGB2YWx1ZVske2l9XWAsIHZhbHVlW2ldKTtcclxuICAgIH1cclxuICAgIHJldHVybiB2YWx1ZTtcclxufVxyXG5mdW5jdGlvbiBfcGFyc2VMZWdhY3koZGF0YSkge1xyXG4gICAgY29uc3QgZmllbGRzID0gZGVjb2RlUmxwKGRhdGEpO1xyXG4gICAgYXNzZXJ0QXJndW1lbnQoQXJyYXkuaXNBcnJheShmaWVsZHMpICYmIChmaWVsZHMubGVuZ3RoID09PSA5IHx8IGZpZWxkcy5sZW5ndGggPT09IDYpLCBcImludmFsaWQgZmllbGQgY291bnQgZm9yIGxlZ2FjeSB0cmFuc2FjdGlvblwiLCBcImRhdGFcIiwgZGF0YSk7XHJcbiAgICBjb25zdCB0eCA9IHtcclxuICAgICAgICB0eXBlOiAwLFxyXG4gICAgICAgIG5vbmNlOiBoYW5kbGVOdW1iZXIoZmllbGRzWzBdLCBcIm5vbmNlXCIpLFxyXG4gICAgICAgIGdhc1ByaWNlOiBoYW5kbGVVaW50KGZpZWxkc1sxXSwgXCJnYXNQcmljZVwiKSxcclxuICAgICAgICBnYXNMaW1pdDogaGFuZGxlVWludChmaWVsZHNbMl0sIFwiZ2FzTGltaXRcIiksXHJcbiAgICAgICAgdG86IGhhbmRsZUFkZHJlc3MoZmllbGRzWzNdKSxcclxuICAgICAgICB2YWx1ZTogaGFuZGxlVWludChmaWVsZHNbNF0sIFwidmFsdWVcIiksXHJcbiAgICAgICAgZGF0YTogaGV4bGlmeShmaWVsZHNbNV0pLFxyXG4gICAgICAgIGNoYWluSWQ6IEJOXzBcclxuICAgIH07XHJcbiAgICAvLyBMZWdhY3kgdW5zaWduZWQgdHJhbnNhY3Rpb25cclxuICAgIGlmIChmaWVsZHMubGVuZ3RoID09PSA2KSB7XHJcbiAgICAgICAgcmV0dXJuIHR4O1xyXG4gICAgfVxyXG4gICAgY29uc3QgdiA9IGhhbmRsZVVpbnQoZmllbGRzWzZdLCBcInZcIik7XHJcbiAgICBjb25zdCByID0gaGFuZGxlVWludChmaWVsZHNbN10sIFwiclwiKTtcclxuICAgIGNvbnN0IHMgPSBoYW5kbGVVaW50KGZpZWxkc1s4XSwgXCJzXCIpO1xyXG4gICAgaWYgKHIgPT09IEJOXzAgJiYgcyA9PT0gQk5fMCkge1xyXG4gICAgICAgIC8vIEVJUC0xNTUgdW5zaWduZWQgdHJhbnNhY3Rpb25cclxuICAgICAgICB0eC5jaGFpbklkID0gdjtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIENvbXB1dGUgdGhlIEVJUC0xNTUgY2hhaW4gSUQgKG9yIDAgZm9yIGxlZ2FjeSlcclxuICAgICAgICBsZXQgY2hhaW5JZCA9ICh2IC0gQk5fMzUpIC8gQk5fMjtcclxuICAgICAgICBpZiAoY2hhaW5JZCA8IEJOXzApIHtcclxuICAgICAgICAgICAgY2hhaW5JZCA9IEJOXzA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHR4LmNoYWluSWQgPSBjaGFpbklkO1xyXG4gICAgICAgIC8vIFNpZ25lZCBMZWdhY3kgVHJhbnNhY3Rpb25cclxuICAgICAgICBhc3NlcnRBcmd1bWVudChjaGFpbklkICE9PSBCTl8wIHx8ICh2ID09PSBCTl8yNyB8fCB2ID09PSBCTl8yOCksIFwibm9uLWNhbm9uaWNhbCBsZWdhY3kgdlwiLCBcInZcIiwgZmllbGRzWzZdKTtcclxuICAgICAgICB0eC5zaWduYXR1cmUgPSBTaWduYXR1cmUuZnJvbSh7XHJcbiAgICAgICAgICAgIHI6IHplcm9QYWRWYWx1ZShmaWVsZHNbN10sIDMyKSxcclxuICAgICAgICAgICAgczogemVyb1BhZFZhbHVlKGZpZWxkc1s4XSwgMzIpLFxyXG4gICAgICAgICAgICB2XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy90eC5oYXNoID0ga2VjY2FrMjU2KGRhdGEpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHR4O1xyXG59XHJcbmZ1bmN0aW9uIF9zZXJpYWxpemVMZWdhY3kodHgsIHNpZykge1xyXG4gICAgY29uc3QgZmllbGRzID0gW1xyXG4gICAgICAgIGZvcm1hdE51bWJlcih0eC5ub25jZSwgXCJub25jZVwiKSxcclxuICAgICAgICBmb3JtYXROdW1iZXIodHguZ2FzUHJpY2UgfHwgMCwgXCJnYXNQcmljZVwiKSxcclxuICAgICAgICBmb3JtYXROdW1iZXIodHguZ2FzTGltaXQsIFwiZ2FzTGltaXRcIiksXHJcbiAgICAgICAgKHR4LnRvIHx8IFwiMHhcIiksXHJcbiAgICAgICAgZm9ybWF0TnVtYmVyKHR4LnZhbHVlLCBcInZhbHVlXCIpLFxyXG4gICAgICAgIHR4LmRhdGEsXHJcbiAgICBdO1xyXG4gICAgbGV0IGNoYWluSWQgPSBCTl8wO1xyXG4gICAgaWYgKHR4LmNoYWluSWQgIT0gQk5fMCkge1xyXG4gICAgICAgIC8vIEEgY2hhaW5JZCB3YXMgcHJvdmlkZWQ7IGlmIG5vbi16ZXJvIHdlJ2xsIHVzZSBFSVAtMTU1XHJcbiAgICAgICAgY2hhaW5JZCA9IGdldEJpZ0ludCh0eC5jaGFpbklkLCBcInR4LmNoYWluSWRcIik7XHJcbiAgICAgICAgLy8gV2UgaGF2ZSBhIGNoYWluSWQgaW4gdGhlIHR4IGFuZCBhbiBFSVAtMTU1IHYgaW4gdGhlIHNpZ25hdHVyZSxcclxuICAgICAgICAvLyBtYWtlIHN1cmUgdGhleSBhZ3JlZSB3aXRoIGVhY2ggb3RoZXJcclxuICAgICAgICBhc3NlcnRBcmd1bWVudCghc2lnIHx8IHNpZy5uZXR3b3JrViA9PSBudWxsIHx8IHNpZy5sZWdhY3lDaGFpbklkID09PSBjaGFpbklkLCBcInR4LmNoYWluSWQvc2lnLnYgbWlzbWF0Y2hcIiwgXCJzaWdcIiwgc2lnKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHR4LnNpZ25hdHVyZSkge1xyXG4gICAgICAgIC8vIE5vIGV4cGxpY2l0IGNoYWluSWQsIGJ1dCBFSVAtMTU1IGhhdmUgYSBkZXJpdmVkIGltcGxpY2l0IGNoYWluSWRcclxuICAgICAgICBjb25zdCBsZWdhY3kgPSB0eC5zaWduYXR1cmUubGVnYWN5Q2hhaW5JZDtcclxuICAgICAgICBpZiAobGVnYWN5ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgY2hhaW5JZCA9IGxlZ2FjeTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBSZXF1ZXN0aW5nIGFuIHVuc2lnbmVkIHRyYW5zYWN0aW9uXHJcbiAgICBpZiAoIXNpZykge1xyXG4gICAgICAgIC8vIFdlIGhhdmUgYW4gRUlQLTE1NSB0cmFuc2FjdGlvbiAoY2hhaW5JZCB3YXMgc3BlY2lmaWVkIGFuZCBub24temVybylcclxuICAgICAgICBpZiAoY2hhaW5JZCAhPT0gQk5fMCkge1xyXG4gICAgICAgICAgICBmaWVsZHMucHVzaCh0b0JlQXJyYXkoY2hhaW5JZCkpO1xyXG4gICAgICAgICAgICBmaWVsZHMucHVzaChcIjB4XCIpO1xyXG4gICAgICAgICAgICBmaWVsZHMucHVzaChcIjB4XCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZW5jb2RlUmxwKGZpZWxkcyk7XHJcbiAgICB9XHJcbiAgICAvLyBAVE9ETzogV2Ugc2hvdWxkIHByb2JhYmx5IGNoZWNrIHRoYXQgdHguc2lnbmF0dXJlLCBjaGFpbklkLCBhbmQgc2lnXHJcbiAgICAvLyAgICAgICAgbWF0Y2ggYnV0IHRoYXQgbG9naWMgY291bGQgYnJlYWsgZXhpc3RpbmcgY29kZSwgc28gc2NoZWR1bGVcclxuICAgIC8vICAgICAgICB0aGlzIGZvciB0aGUgbmV4dCBtYWpvciBidW1wLlxyXG4gICAgLy8gQ29tcHV0ZSB0aGUgRUlQLTE1NSB2XHJcbiAgICBsZXQgdiA9IEJpZ0ludCgyNyArIHNpZy55UGFyaXR5KTtcclxuICAgIGlmIChjaGFpbklkICE9PSBCTl8wKSB7XHJcbiAgICAgICAgdiA9IFNpZ25hdHVyZS5nZXRDaGFpbklkVihjaGFpbklkLCBzaWcudik7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChCaWdJbnQoc2lnLnYpICE9PSB2KSB7XHJcbiAgICAgICAgYXNzZXJ0QXJndW1lbnQoZmFsc2UsIFwidHguY2hhaW5JZC9zaWcudiBtaXNtYXRjaFwiLCBcInNpZ1wiLCBzaWcpO1xyXG4gICAgfVxyXG4gICAgLy8gQWRkIHRoZSBzaWduYXR1cmVcclxuICAgIGZpZWxkcy5wdXNoKHRvQmVBcnJheSh2KSk7XHJcbiAgICBmaWVsZHMucHVzaCh0b0JlQXJyYXkoc2lnLnIpKTtcclxuICAgIGZpZWxkcy5wdXNoKHRvQmVBcnJheShzaWcucykpO1xyXG4gICAgcmV0dXJuIGVuY29kZVJscChmaWVsZHMpO1xyXG59XHJcbmZ1bmN0aW9uIF9wYXJzZUVpcFNpZ25hdHVyZSh0eCwgZmllbGRzKSB7XHJcbiAgICBsZXQgeVBhcml0eTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgeVBhcml0eSA9IGhhbmRsZU51bWJlcihmaWVsZHNbMF0sIFwieVBhcml0eVwiKTtcclxuICAgICAgICBpZiAoeVBhcml0eSAhPT0gMCAmJiB5UGFyaXR5ICE9PSAxKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImJhZCB5UGFyaXR5XCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGFzc2VydEFyZ3VtZW50KGZhbHNlLCBcImludmFsaWQgeVBhcml0eVwiLCBcInlQYXJpdHlcIiwgZmllbGRzWzBdKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHIgPSB6ZXJvUGFkVmFsdWUoZmllbGRzWzFdLCAzMik7XHJcbiAgICBjb25zdCBzID0gemVyb1BhZFZhbHVlKGZpZWxkc1syXSwgMzIpO1xyXG4gICAgY29uc3Qgc2lnbmF0dXJlID0gU2lnbmF0dXJlLmZyb20oeyByLCBzLCB5UGFyaXR5IH0pO1xyXG4gICAgdHguc2lnbmF0dXJlID0gc2lnbmF0dXJlO1xyXG59XHJcbmZ1bmN0aW9uIF9wYXJzZUVpcDE1NTkoZGF0YSkge1xyXG4gICAgY29uc3QgZmllbGRzID0gZGVjb2RlUmxwKGdldEJ5dGVzKGRhdGEpLnNsaWNlKDEpKTtcclxuICAgIGFzc2VydEFyZ3VtZW50KEFycmF5LmlzQXJyYXkoZmllbGRzKSAmJiAoZmllbGRzLmxlbmd0aCA9PT0gOSB8fCBmaWVsZHMubGVuZ3RoID09PSAxMiksIFwiaW52YWxpZCBmaWVsZCBjb3VudCBmb3IgdHJhbnNhY3Rpb24gdHlwZTogMlwiLCBcImRhdGFcIiwgaGV4bGlmeShkYXRhKSk7XHJcbiAgICBjb25zdCB0eCA9IHtcclxuICAgICAgICB0eXBlOiAyLFxyXG4gICAgICAgIGNoYWluSWQ6IGhhbmRsZVVpbnQoZmllbGRzWzBdLCBcImNoYWluSWRcIiksXHJcbiAgICAgICAgbm9uY2U6IGhhbmRsZU51bWJlcihmaWVsZHNbMV0sIFwibm9uY2VcIiksXHJcbiAgICAgICAgbWF4UHJpb3JpdHlGZWVQZXJHYXM6IGhhbmRsZVVpbnQoZmllbGRzWzJdLCBcIm1heFByaW9yaXR5RmVlUGVyR2FzXCIpLFxyXG4gICAgICAgIG1heEZlZVBlckdhczogaGFuZGxlVWludChmaWVsZHNbM10sIFwibWF4RmVlUGVyR2FzXCIpLFxyXG4gICAgICAgIGdhc1ByaWNlOiBudWxsLFxyXG4gICAgICAgIGdhc0xpbWl0OiBoYW5kbGVVaW50KGZpZWxkc1s0XSwgXCJnYXNMaW1pdFwiKSxcclxuICAgICAgICB0bzogaGFuZGxlQWRkcmVzcyhmaWVsZHNbNV0pLFxyXG4gICAgICAgIHZhbHVlOiBoYW5kbGVVaW50KGZpZWxkc1s2XSwgXCJ2YWx1ZVwiKSxcclxuICAgICAgICBkYXRhOiBoZXhsaWZ5KGZpZWxkc1s3XSksXHJcbiAgICAgICAgYWNjZXNzTGlzdDogaGFuZGxlQWNjZXNzTGlzdChmaWVsZHNbOF0sIFwiYWNjZXNzTGlzdFwiKSxcclxuICAgIH07XHJcbiAgICAvLyBVbnNpZ25lZCBFSVAtMTU1OSBUcmFuc2FjdGlvblxyXG4gICAgaWYgKGZpZWxkcy5sZW5ndGggPT09IDkpIHtcclxuICAgICAgICByZXR1cm4gdHg7XHJcbiAgICB9XHJcbiAgICAvL3R4Lmhhc2ggPSBrZWNjYWsyNTYoZGF0YSk7XHJcbiAgICBfcGFyc2VFaXBTaWduYXR1cmUodHgsIGZpZWxkcy5zbGljZSg5KSk7XHJcbiAgICByZXR1cm4gdHg7XHJcbn1cclxuZnVuY3Rpb24gX3NlcmlhbGl6ZUVpcDE1NTkodHgsIHNpZykge1xyXG4gICAgY29uc3QgZmllbGRzID0gW1xyXG4gICAgICAgIGZvcm1hdE51bWJlcih0eC5jaGFpbklkLCBcImNoYWluSWRcIiksXHJcbiAgICAgICAgZm9ybWF0TnVtYmVyKHR4Lm5vbmNlLCBcIm5vbmNlXCIpLFxyXG4gICAgICAgIGZvcm1hdE51bWJlcih0eC5tYXhQcmlvcml0eUZlZVBlckdhcyB8fCAwLCBcIm1heFByaW9yaXR5RmVlUGVyR2FzXCIpLFxyXG4gICAgICAgIGZvcm1hdE51bWJlcih0eC5tYXhGZWVQZXJHYXMgfHwgMCwgXCJtYXhGZWVQZXJHYXNcIiksXHJcbiAgICAgICAgZm9ybWF0TnVtYmVyKHR4Lmdhc0xpbWl0LCBcImdhc0xpbWl0XCIpLFxyXG4gICAgICAgICh0eC50byB8fCBcIjB4XCIpLFxyXG4gICAgICAgIGZvcm1hdE51bWJlcih0eC52YWx1ZSwgXCJ2YWx1ZVwiKSxcclxuICAgICAgICB0eC5kYXRhLFxyXG4gICAgICAgIGZvcm1hdEFjY2Vzc0xpc3QodHguYWNjZXNzTGlzdCB8fCBbXSlcclxuICAgIF07XHJcbiAgICBpZiAoc2lnKSB7XHJcbiAgICAgICAgZmllbGRzLnB1c2goZm9ybWF0TnVtYmVyKHNpZy55UGFyaXR5LCBcInlQYXJpdHlcIikpO1xyXG4gICAgICAgIGZpZWxkcy5wdXNoKHRvQmVBcnJheShzaWcucikpO1xyXG4gICAgICAgIGZpZWxkcy5wdXNoKHRvQmVBcnJheShzaWcucykpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNvbmNhdChbXCIweDAyXCIsIGVuY29kZVJscChmaWVsZHMpXSk7XHJcbn1cclxuZnVuY3Rpb24gX3BhcnNlRWlwMjkzMChkYXRhKSB7XHJcbiAgICBjb25zdCBmaWVsZHMgPSBkZWNvZGVSbHAoZ2V0Qnl0ZXMoZGF0YSkuc2xpY2UoMSkpO1xyXG4gICAgYXNzZXJ0QXJndW1lbnQoQXJyYXkuaXNBcnJheShmaWVsZHMpICYmIChmaWVsZHMubGVuZ3RoID09PSA4IHx8IGZpZWxkcy5sZW5ndGggPT09IDExKSwgXCJpbnZhbGlkIGZpZWxkIGNvdW50IGZvciB0cmFuc2FjdGlvbiB0eXBlOiAxXCIsIFwiZGF0YVwiLCBoZXhsaWZ5KGRhdGEpKTtcclxuICAgIGNvbnN0IHR4ID0ge1xyXG4gICAgICAgIHR5cGU6IDEsXHJcbiAgICAgICAgY2hhaW5JZDogaGFuZGxlVWludChmaWVsZHNbMF0sIFwiY2hhaW5JZFwiKSxcclxuICAgICAgICBub25jZTogaGFuZGxlTnVtYmVyKGZpZWxkc1sxXSwgXCJub25jZVwiKSxcclxuICAgICAgICBnYXNQcmljZTogaGFuZGxlVWludChmaWVsZHNbMl0sIFwiZ2FzUHJpY2VcIiksXHJcbiAgICAgICAgZ2FzTGltaXQ6IGhhbmRsZVVpbnQoZmllbGRzWzNdLCBcImdhc0xpbWl0XCIpLFxyXG4gICAgICAgIHRvOiBoYW5kbGVBZGRyZXNzKGZpZWxkc1s0XSksXHJcbiAgICAgICAgdmFsdWU6IGhhbmRsZVVpbnQoZmllbGRzWzVdLCBcInZhbHVlXCIpLFxyXG4gICAgICAgIGRhdGE6IGhleGxpZnkoZmllbGRzWzZdKSxcclxuICAgICAgICBhY2Nlc3NMaXN0OiBoYW5kbGVBY2Nlc3NMaXN0KGZpZWxkc1s3XSwgXCJhY2Nlc3NMaXN0XCIpXHJcbiAgICB9O1xyXG4gICAgLy8gVW5zaWduZWQgRUlQLTI5MzAgVHJhbnNhY3Rpb25cclxuICAgIGlmIChmaWVsZHMubGVuZ3RoID09PSA4KSB7XHJcbiAgICAgICAgcmV0dXJuIHR4O1xyXG4gICAgfVxyXG4gICAgLy90eC5oYXNoID0ga2VjY2FrMjU2KGRhdGEpO1xyXG4gICAgX3BhcnNlRWlwU2lnbmF0dXJlKHR4LCBmaWVsZHMuc2xpY2UoOCkpO1xyXG4gICAgcmV0dXJuIHR4O1xyXG59XHJcbmZ1bmN0aW9uIF9zZXJpYWxpemVFaXAyOTMwKHR4LCBzaWcpIHtcclxuICAgIGNvbnN0IGZpZWxkcyA9IFtcclxuICAgICAgICBmb3JtYXROdW1iZXIodHguY2hhaW5JZCwgXCJjaGFpbklkXCIpLFxyXG4gICAgICAgIGZvcm1hdE51bWJlcih0eC5ub25jZSwgXCJub25jZVwiKSxcclxuICAgICAgICBmb3JtYXROdW1iZXIodHguZ2FzUHJpY2UgfHwgMCwgXCJnYXNQcmljZVwiKSxcclxuICAgICAgICBmb3JtYXROdW1iZXIodHguZ2FzTGltaXQsIFwiZ2FzTGltaXRcIiksXHJcbiAgICAgICAgKHR4LnRvIHx8IFwiMHhcIiksXHJcbiAgICAgICAgZm9ybWF0TnVtYmVyKHR4LnZhbHVlLCBcInZhbHVlXCIpLFxyXG4gICAgICAgIHR4LmRhdGEsXHJcbiAgICAgICAgZm9ybWF0QWNjZXNzTGlzdCh0eC5hY2Nlc3NMaXN0IHx8IFtdKVxyXG4gICAgXTtcclxuICAgIGlmIChzaWcpIHtcclxuICAgICAgICBmaWVsZHMucHVzaChmb3JtYXROdW1iZXIoc2lnLnlQYXJpdHksIFwicmVjb3ZlcnlQYXJhbVwiKSk7XHJcbiAgICAgICAgZmllbGRzLnB1c2godG9CZUFycmF5KHNpZy5yKSk7XHJcbiAgICAgICAgZmllbGRzLnB1c2godG9CZUFycmF5KHNpZy5zKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY29uY2F0KFtcIjB4MDFcIiwgZW5jb2RlUmxwKGZpZWxkcyldKTtcclxufVxyXG5mdW5jdGlvbiBfcGFyc2VFaXA0ODQ0KGRhdGEpIHtcclxuICAgIGxldCBmaWVsZHMgPSBkZWNvZGVSbHAoZ2V0Qnl0ZXMoZGF0YSkuc2xpY2UoMSkpO1xyXG4gICAgbGV0IHR5cGVOYW1lID0gXCIzXCI7XHJcbiAgICBsZXQgYmxvYnMgPSBudWxsO1xyXG4gICAgLy8gUGFyc2UgdGhlIG5ldHdvcmsgZm9ybWF0XHJcbiAgICBpZiAoZmllbGRzLmxlbmd0aCA9PT0gNCAmJiBBcnJheS5pc0FycmF5KGZpZWxkc1swXSkpIHtcclxuICAgICAgICB0eXBlTmFtZSA9IFwiMyAobmV0d29yayBmb3JtYXQpXCI7XHJcbiAgICAgICAgY29uc3QgZkJsb2JzID0gZmllbGRzWzFdLCBmQ29tbWl0cyA9IGZpZWxkc1syXSwgZlByb29mcyA9IGZpZWxkc1szXTtcclxuICAgICAgICBhc3NlcnRBcmd1bWVudChBcnJheS5pc0FycmF5KGZCbG9icyksIFwiaW52YWxpZCBuZXR3b3JrIGZvcm1hdDogYmxvYnMgbm90IGFuIGFycmF5XCIsIFwiZmllbGRzWzFdXCIsIGZCbG9icyk7XHJcbiAgICAgICAgYXNzZXJ0QXJndW1lbnQoQXJyYXkuaXNBcnJheShmQ29tbWl0cyksIFwiaW52YWxpZCBuZXR3b3JrIGZvcm1hdDogY29tbWl0bWVudHMgbm90IGFuIGFycmF5XCIsIFwiZmllbGRzWzJdXCIsIGZDb21taXRzKTtcclxuICAgICAgICBhc3NlcnRBcmd1bWVudChBcnJheS5pc0FycmF5KGZQcm9vZnMpLCBcImludmFsaWQgbmV0d29yayBmb3JtYXQ6IHByb29mcyBub3QgYW4gYXJyYXlcIiwgXCJmaWVsZHNbM11cIiwgZlByb29mcyk7XHJcbiAgICAgICAgYXNzZXJ0QXJndW1lbnQoZkJsb2JzLmxlbmd0aCA9PT0gZkNvbW1pdHMubGVuZ3RoLCBcImludmFsaWQgbmV0d29yayBmb3JtYXQ6IGJsb2JzL2NvbW1pdG1lbnRzIGxlbmd0aCBtaXNtYXRjaFwiLCBcImZpZWxkc1wiLCBmaWVsZHMpO1xyXG4gICAgICAgIGFzc2VydEFyZ3VtZW50KGZCbG9icy5sZW5ndGggPT09IGZQcm9vZnMubGVuZ3RoLCBcImludmFsaWQgbmV0d29yayBmb3JtYXQ6IGJsb2JzL3Byb29mcyBsZW5ndGggbWlzbWF0Y2hcIiwgXCJmaWVsZHNcIiwgZmllbGRzKTtcclxuICAgICAgICBibG9icyA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmllbGRzWzFdLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGJsb2JzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgZGF0YTogZkJsb2JzW2ldLFxyXG4gICAgICAgICAgICAgICAgY29tbWl0bWVudDogZkNvbW1pdHNbaV0sXHJcbiAgICAgICAgICAgICAgICBwcm9vZjogZlByb29mc1tpXSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpZWxkcyA9IGZpZWxkc1swXTtcclxuICAgIH1cclxuICAgIGFzc2VydEFyZ3VtZW50KEFycmF5LmlzQXJyYXkoZmllbGRzKSAmJiAoZmllbGRzLmxlbmd0aCA9PT0gMTEgfHwgZmllbGRzLmxlbmd0aCA9PT0gMTQpLCBgaW52YWxpZCBmaWVsZCBjb3VudCBmb3IgdHJhbnNhY3Rpb24gdHlwZTogJHt0eXBlTmFtZX1gLCBcImRhdGFcIiwgaGV4bGlmeShkYXRhKSk7XHJcbiAgICBjb25zdCB0eCA9IHtcclxuICAgICAgICB0eXBlOiAzLFxyXG4gICAgICAgIGNoYWluSWQ6IGhhbmRsZVVpbnQoZmllbGRzWzBdLCBcImNoYWluSWRcIiksXHJcbiAgICAgICAgbm9uY2U6IGhhbmRsZU51bWJlcihmaWVsZHNbMV0sIFwibm9uY2VcIiksXHJcbiAgICAgICAgbWF4UHJpb3JpdHlGZWVQZXJHYXM6IGhhbmRsZVVpbnQoZmllbGRzWzJdLCBcIm1heFByaW9yaXR5RmVlUGVyR2FzXCIpLFxyXG4gICAgICAgIG1heEZlZVBlckdhczogaGFuZGxlVWludChmaWVsZHNbM10sIFwibWF4RmVlUGVyR2FzXCIpLFxyXG4gICAgICAgIGdhc1ByaWNlOiBudWxsLFxyXG4gICAgICAgIGdhc0xpbWl0OiBoYW5kbGVVaW50KGZpZWxkc1s0XSwgXCJnYXNMaW1pdFwiKSxcclxuICAgICAgICB0bzogaGFuZGxlQWRkcmVzcyhmaWVsZHNbNV0pLFxyXG4gICAgICAgIHZhbHVlOiBoYW5kbGVVaW50KGZpZWxkc1s2XSwgXCJ2YWx1ZVwiKSxcclxuICAgICAgICBkYXRhOiBoZXhsaWZ5KGZpZWxkc1s3XSksXHJcbiAgICAgICAgYWNjZXNzTGlzdDogaGFuZGxlQWNjZXNzTGlzdChmaWVsZHNbOF0sIFwiYWNjZXNzTGlzdFwiKSxcclxuICAgICAgICBtYXhGZWVQZXJCbG9iR2FzOiBoYW5kbGVVaW50KGZpZWxkc1s5XSwgXCJtYXhGZWVQZXJCbG9iR2FzXCIpLFxyXG4gICAgICAgIGJsb2JWZXJzaW9uZWRIYXNoZXM6IGZpZWxkc1sxMF1cclxuICAgIH07XHJcbiAgICBpZiAoYmxvYnMpIHtcclxuICAgICAgICB0eC5ibG9icyA9IGJsb2JzO1xyXG4gICAgfVxyXG4gICAgYXNzZXJ0QXJndW1lbnQodHgudG8gIT0gbnVsbCwgYGludmFsaWQgYWRkcmVzcyBmb3IgdHJhbnNhY3Rpb24gdHlwZTogJHt0eXBlTmFtZX1gLCBcImRhdGFcIiwgZGF0YSk7XHJcbiAgICBhc3NlcnRBcmd1bWVudChBcnJheS5pc0FycmF5KHR4LmJsb2JWZXJzaW9uZWRIYXNoZXMpLCBcImludmFsaWQgYmxvYlZlcnNpb25lZEhhc2hlczogbXVzdCBiZSBhbiBhcnJheVwiLCBcImRhdGFcIiwgZGF0YSk7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHR4LmJsb2JWZXJzaW9uZWRIYXNoZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBhc3NlcnRBcmd1bWVudChpc0hleFN0cmluZyh0eC5ibG9iVmVyc2lvbmVkSGFzaGVzW2ldLCAzMiksIGBpbnZhbGlkIGJsb2JWZXJzaW9uZWRIYXNoIGF0IGluZGV4ICR7aX06IG11c3QgYmUgbGVuZ3RoIDMyYCwgXCJkYXRhXCIsIGRhdGEpO1xyXG4gICAgfVxyXG4gICAgLy8gVW5zaWduZWQgRUlQLTQ4NDQgVHJhbnNhY3Rpb25cclxuICAgIGlmIChmaWVsZHMubGVuZ3RoID09PSAxMSkge1xyXG4gICAgICAgIHJldHVybiB0eDtcclxuICAgIH1cclxuICAgIC8vIEBUT0RPOiBEbyB3ZSBuZWVkIHRvIGRvIHRoaXM/IFRoaXMgaXMgb25seSBjYWxsZWQgaW50ZXJuYWxseVxyXG4gICAgLy8gYW5kIHVzZWQgdG8gdmVyaWZ5IGhhc2hlczsgaXQgbWlnaHQgc2F2ZSB0aW1lIHRvIG5vdCBkbyB0aGlzXHJcbiAgICAvL3R4Lmhhc2ggPSBrZWNjYWsyNTYoY29uY2F0KFsgXCIweDAzXCIsIGVuY29kZVJscChmaWVsZHMpIF0pKTtcclxuICAgIF9wYXJzZUVpcFNpZ25hdHVyZSh0eCwgZmllbGRzLnNsaWNlKDExKSk7XHJcbiAgICByZXR1cm4gdHg7XHJcbn1cclxuZnVuY3Rpb24gX3NlcmlhbGl6ZUVpcDQ4NDQodHgsIHNpZywgYmxvYnMpIHtcclxuICAgIGNvbnN0IGZpZWxkcyA9IFtcclxuICAgICAgICBmb3JtYXROdW1iZXIodHguY2hhaW5JZCwgXCJjaGFpbklkXCIpLFxyXG4gICAgICAgIGZvcm1hdE51bWJlcih0eC5ub25jZSwgXCJub25jZVwiKSxcclxuICAgICAgICBmb3JtYXROdW1iZXIodHgubWF4UHJpb3JpdHlGZWVQZXJHYXMgfHwgMCwgXCJtYXhQcmlvcml0eUZlZVBlckdhc1wiKSxcclxuICAgICAgICBmb3JtYXROdW1iZXIodHgubWF4RmVlUGVyR2FzIHx8IDAsIFwibWF4RmVlUGVyR2FzXCIpLFxyXG4gICAgICAgIGZvcm1hdE51bWJlcih0eC5nYXNMaW1pdCwgXCJnYXNMaW1pdFwiKSxcclxuICAgICAgICAodHgudG8gfHwgWmVyb0FkZHJlc3MpLFxyXG4gICAgICAgIGZvcm1hdE51bWJlcih0eC52YWx1ZSwgXCJ2YWx1ZVwiKSxcclxuICAgICAgICB0eC5kYXRhLFxyXG4gICAgICAgIGZvcm1hdEFjY2Vzc0xpc3QodHguYWNjZXNzTGlzdCB8fCBbXSksXHJcbiAgICAgICAgZm9ybWF0TnVtYmVyKHR4Lm1heEZlZVBlckJsb2JHYXMgfHwgMCwgXCJtYXhGZWVQZXJCbG9iR2FzXCIpLFxyXG4gICAgICAgIGZvcm1hdEhhc2hlcyh0eC5ibG9iVmVyc2lvbmVkSGFzaGVzIHx8IFtdLCBcImJsb2JWZXJzaW9uZWRIYXNoZXNcIilcclxuICAgIF07XHJcbiAgICBpZiAoc2lnKSB7XHJcbiAgICAgICAgZmllbGRzLnB1c2goZm9ybWF0TnVtYmVyKHNpZy55UGFyaXR5LCBcInlQYXJpdHlcIikpO1xyXG4gICAgICAgIGZpZWxkcy5wdXNoKHRvQmVBcnJheShzaWcucikpO1xyXG4gICAgICAgIGZpZWxkcy5wdXNoKHRvQmVBcnJheShzaWcucykpO1xyXG4gICAgICAgIC8vIFdlIGhhdmUgYmxvYnM7IHJldHVybiB0aGUgbmV0d29yayB3cmFwcGVkIGZvcm1hdFxyXG4gICAgICAgIGlmIChibG9icykge1xyXG4gICAgICAgICAgICByZXR1cm4gY29uY2F0KFtcclxuICAgICAgICAgICAgICAgIFwiMHgwM1wiLFxyXG4gICAgICAgICAgICAgICAgZW5jb2RlUmxwKFtcclxuICAgICAgICAgICAgICAgICAgICBmaWVsZHMsXHJcbiAgICAgICAgICAgICAgICAgICAgYmxvYnMubWFwKChiKSA9PiBiLmRhdGEpLFxyXG4gICAgICAgICAgICAgICAgICAgIGJsb2JzLm1hcCgoYikgPT4gYi5jb21taXRtZW50KSxcclxuICAgICAgICAgICAgICAgICAgICBibG9icy5tYXAoKGIpID0+IGIucHJvb2YpLFxyXG4gICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNvbmNhdChbXCIweDAzXCIsIGVuY29kZVJscChmaWVsZHMpXSk7XHJcbn1cclxuZnVuY3Rpb24gX3BhcnNlRWlwNzcwMihkYXRhKSB7XHJcbiAgICBjb25zdCBmaWVsZHMgPSBkZWNvZGVSbHAoZ2V0Qnl0ZXMoZGF0YSkuc2xpY2UoMSkpO1xyXG4gICAgYXNzZXJ0QXJndW1lbnQoQXJyYXkuaXNBcnJheShmaWVsZHMpICYmIChmaWVsZHMubGVuZ3RoID09PSAxMCB8fCBmaWVsZHMubGVuZ3RoID09PSAxMyksIFwiaW52YWxpZCBmaWVsZCBjb3VudCBmb3IgdHJhbnNhY3Rpb24gdHlwZTogNFwiLCBcImRhdGFcIiwgaGV4bGlmeShkYXRhKSk7XHJcbiAgICBjb25zdCB0eCA9IHtcclxuICAgICAgICB0eXBlOiA0LFxyXG4gICAgICAgIGNoYWluSWQ6IGhhbmRsZVVpbnQoZmllbGRzWzBdLCBcImNoYWluSWRcIiksXHJcbiAgICAgICAgbm9uY2U6IGhhbmRsZU51bWJlcihmaWVsZHNbMV0sIFwibm9uY2VcIiksXHJcbiAgICAgICAgbWF4UHJpb3JpdHlGZWVQZXJHYXM6IGhhbmRsZVVpbnQoZmllbGRzWzJdLCBcIm1heFByaW9yaXR5RmVlUGVyR2FzXCIpLFxyXG4gICAgICAgIG1heEZlZVBlckdhczogaGFuZGxlVWludChmaWVsZHNbM10sIFwibWF4RmVlUGVyR2FzXCIpLFxyXG4gICAgICAgIGdhc1ByaWNlOiBudWxsLFxyXG4gICAgICAgIGdhc0xpbWl0OiBoYW5kbGVVaW50KGZpZWxkc1s0XSwgXCJnYXNMaW1pdFwiKSxcclxuICAgICAgICB0bzogaGFuZGxlQWRkcmVzcyhmaWVsZHNbNV0pLFxyXG4gICAgICAgIHZhbHVlOiBoYW5kbGVVaW50KGZpZWxkc1s2XSwgXCJ2YWx1ZVwiKSxcclxuICAgICAgICBkYXRhOiBoZXhsaWZ5KGZpZWxkc1s3XSksXHJcbiAgICAgICAgYWNjZXNzTGlzdDogaGFuZGxlQWNjZXNzTGlzdChmaWVsZHNbOF0sIFwiYWNjZXNzTGlzdFwiKSxcclxuICAgICAgICBhdXRob3JpemF0aW9uTGlzdDogaGFuZGxlQXV0aG9yaXphdGlvbkxpc3QoZmllbGRzWzldLCBcImF1dGhvcml6YXRpb25MaXN0XCIpLFxyXG4gICAgfTtcclxuICAgIC8vIFVuc2lnbmVkIEVJUC03NzAyIFRyYW5zYWN0aW9uXHJcbiAgICBpZiAoZmllbGRzLmxlbmd0aCA9PT0gMTApIHtcclxuICAgICAgICByZXR1cm4gdHg7XHJcbiAgICB9XHJcbiAgICBfcGFyc2VFaXBTaWduYXR1cmUodHgsIGZpZWxkcy5zbGljZSgxMCkpO1xyXG4gICAgcmV0dXJuIHR4O1xyXG59XHJcbmZ1bmN0aW9uIF9zZXJpYWxpemVFaXA3NzAyKHR4LCBzaWcpIHtcclxuICAgIGNvbnN0IGZpZWxkcyA9IFtcclxuICAgICAgICBmb3JtYXROdW1iZXIodHguY2hhaW5JZCwgXCJjaGFpbklkXCIpLFxyXG4gICAgICAgIGZvcm1hdE51bWJlcih0eC5ub25jZSwgXCJub25jZVwiKSxcclxuICAgICAgICBmb3JtYXROdW1iZXIodHgubWF4UHJpb3JpdHlGZWVQZXJHYXMgfHwgMCwgXCJtYXhQcmlvcml0eUZlZVBlckdhc1wiKSxcclxuICAgICAgICBmb3JtYXROdW1iZXIodHgubWF4RmVlUGVyR2FzIHx8IDAsIFwibWF4RmVlUGVyR2FzXCIpLFxyXG4gICAgICAgIGZvcm1hdE51bWJlcih0eC5nYXNMaW1pdCwgXCJnYXNMaW1pdFwiKSxcclxuICAgICAgICAodHgudG8gfHwgXCIweFwiKSxcclxuICAgICAgICBmb3JtYXROdW1iZXIodHgudmFsdWUsIFwidmFsdWVcIiksXHJcbiAgICAgICAgdHguZGF0YSxcclxuICAgICAgICBmb3JtYXRBY2Nlc3NMaXN0KHR4LmFjY2Vzc0xpc3QgfHwgW10pLFxyXG4gICAgICAgIGZvcm1hdEF1dGhvcml6YXRpb25MaXN0KHR4LmF1dGhvcml6YXRpb25MaXN0IHx8IFtdKVxyXG4gICAgXTtcclxuICAgIGlmIChzaWcpIHtcclxuICAgICAgICBmaWVsZHMucHVzaChmb3JtYXROdW1iZXIoc2lnLnlQYXJpdHksIFwieVBhcml0eVwiKSk7XHJcbiAgICAgICAgZmllbGRzLnB1c2godG9CZUFycmF5KHNpZy5yKSk7XHJcbiAgICAgICAgZmllbGRzLnB1c2godG9CZUFycmF5KHNpZy5zKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY29uY2F0KFtcIjB4MDRcIiwgZW5jb2RlUmxwKGZpZWxkcyldKTtcclxufVxyXG4vKipcclxuICogIEEgKipUcmFuc2FjdGlvbioqIGRlc2NyaWJlcyBhbiBvcGVyYXRpb24gdG8gYmUgZXhlY3V0ZWQgb25cclxuICogIEV0aGVyZXVtIGJ5IGFuIEV4dGVybmFsbHkgT3duZWQgQWNjb3VudCAoRU9BKS4gSXQgaW5jbHVkZXNcclxuICogIHdobyAodGhlIFtbdG9dXSBhZGRyZXNzKSwgd2hhdCAodGhlIFtbZGF0YV1dKSBhbmQgaG93IG11Y2ggKHRoZVxyXG4gKiAgW1t2YWx1ZV1dIGluIGV0aGVyKSB0aGUgb3BlcmF0aW9uIHNob3VsZCBlbnRhaWwuXHJcbiAqXHJcbiAqICBAZXhhbXBsZTpcclxuICogICAgdHggPSBuZXcgVHJhbnNhY3Rpb24oKVxyXG4gKiAgICAvL19yZXN1bHQ6XHJcbiAqXHJcbiAqICAgIHR4LmRhdGEgPSBcIjB4MTIzNFwiO1xyXG4gKiAgICAvL19yZXN1bHQ6XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgVHJhbnNhY3Rpb24ge1xyXG4gICAgI3R5cGU7XHJcbiAgICAjdG87XHJcbiAgICAjZGF0YTtcclxuICAgICNub25jZTtcclxuICAgICNnYXNMaW1pdDtcclxuICAgICNnYXNQcmljZTtcclxuICAgICNtYXhQcmlvcml0eUZlZVBlckdhcztcclxuICAgICNtYXhGZWVQZXJHYXM7XHJcbiAgICAjdmFsdWU7XHJcbiAgICAjY2hhaW5JZDtcclxuICAgICNzaWc7XHJcbiAgICAjYWNjZXNzTGlzdDtcclxuICAgICNtYXhGZWVQZXJCbG9iR2FzO1xyXG4gICAgI2Jsb2JWZXJzaW9uZWRIYXNoZXM7XHJcbiAgICAja3pnO1xyXG4gICAgI2Jsb2JzO1xyXG4gICAgI2F1dGhzO1xyXG4gICAgLyoqXHJcbiAgICAgKiAgVGhlIHRyYW5zYWN0aW9uIHR5cGUuXHJcbiAgICAgKlxyXG4gICAgICogIElmIG51bGwsIHRoZSB0eXBlIHdpbGwgYmUgYXV0b21hdGljYWxseSBpbmZlcnJlZCBiYXNlZCBvblxyXG4gICAgICogIGV4cGxpY2l0IHByb3BlcnRpZXMuXHJcbiAgICAgKi9cclxuICAgIGdldCB0eXBlKCkgeyByZXR1cm4gdGhpcy4jdHlwZTsgfVxyXG4gICAgc2V0IHR5cGUodmFsdWUpIHtcclxuICAgICAgICBzd2l0Y2ggKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgbnVsbDpcclxuICAgICAgICAgICAgICAgIHRoaXMuI3R5cGUgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgY2FzZSBcImxlZ2FjeVwiOlxyXG4gICAgICAgICAgICAgICAgdGhpcy4jdHlwZSA9IDA7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICBjYXNlIFwiYmVybGluXCI6XHJcbiAgICAgICAgICAgIGNhc2UgXCJlaXAtMjkzMFwiOlxyXG4gICAgICAgICAgICAgICAgdGhpcy4jdHlwZSA9IDE7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICBjYXNlIFwibG9uZG9uXCI6XHJcbiAgICAgICAgICAgIGNhc2UgXCJlaXAtMTU1OVwiOlxyXG4gICAgICAgICAgICAgICAgdGhpcy4jdHlwZSA9IDI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICBjYXNlIFwiY2FuY3VuXCI6XHJcbiAgICAgICAgICAgIGNhc2UgXCJlaXAtNDg0NFwiOlxyXG4gICAgICAgICAgICAgICAgdGhpcy4jdHlwZSA9IDM7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICBjYXNlIFwicGVjdHJhXCI6XHJcbiAgICAgICAgICAgIGNhc2UgXCJlaXAtNzcwMlwiOlxyXG4gICAgICAgICAgICAgICAgdGhpcy4jdHlwZSA9IDQ7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGFzc2VydEFyZ3VtZW50KGZhbHNlLCBcInVuc3VwcG9ydGVkIHRyYW5zYWN0aW9uIHR5cGVcIiwgXCJ0eXBlXCIsIHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqICBUaGUgbmFtZSBvZiB0aGUgdHJhbnNhY3Rpb24gdHlwZS5cclxuICAgICAqL1xyXG4gICAgZ2V0IHR5cGVOYW1lKCkge1xyXG4gICAgICAgIHN3aXRjaCAodGhpcy50eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFwibGVnYWN5XCI7XHJcbiAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIFwiZWlwLTI5MzBcIjtcclxuICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gXCJlaXAtMTU1OVwiO1xyXG4gICAgICAgICAgICBjYXNlIDM6IHJldHVybiBcImVpcC00ODQ0XCI7XHJcbiAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFwiZWlwLTc3MDJcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqICBUaGUgYGB0b2BgIGFkZHJlc3MgZm9yIHRoZSB0cmFuc2FjdGlvbiBvciBgYG51bGxgYCBpZiB0aGVcclxuICAgICAqICB0cmFuc2FjdGlvbiBpcyBhbiBgYGluaXRgYCB0cmFuc2FjdGlvbi5cclxuICAgICAqL1xyXG4gICAgZ2V0IHRvKCkge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy4jdG87XHJcbiAgICAgICAgaWYgKHZhbHVlID09IG51bGwgJiYgdGhpcy50eXBlID09PSAzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBaZXJvQWRkcmVzcztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfVxyXG4gICAgc2V0IHRvKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy4jdG8gPSAodmFsdWUgPT0gbnVsbCkgPyBudWxsIDogZ2V0QWRkcmVzcyh2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqICBUaGUgdHJhbnNhY3Rpb24gbm9uY2UuXHJcbiAgICAgKi9cclxuICAgIGdldCBub25jZSgpIHsgcmV0dXJuIHRoaXMuI25vbmNlOyB9XHJcbiAgICBzZXQgbm9uY2UodmFsdWUpIHsgdGhpcy4jbm9uY2UgPSBnZXROdW1iZXIodmFsdWUsIFwidmFsdWVcIik7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFRoZSBnYXMgbGltaXQuXHJcbiAgICAgKi9cclxuICAgIGdldCBnYXNMaW1pdCgpIHsgcmV0dXJuIHRoaXMuI2dhc0xpbWl0OyB9XHJcbiAgICBzZXQgZ2FzTGltaXQodmFsdWUpIHsgdGhpcy4jZ2FzTGltaXQgPSBnZXRCaWdJbnQodmFsdWUpOyB9XHJcbiAgICAvKipcclxuICAgICAqICBUaGUgZ2FzIHByaWNlLlxyXG4gICAgICpcclxuICAgICAqICBPbiBsZWdhY3kgbmV0d29ya3MgdGhpcyBkZWZpbmVzIHRoZSBmZWUgdGhhdCB3aWxsIGJlIHBhaWQuIE9uXHJcbiAgICAgKiAgRUlQLTE1NTkgbmV0d29ya3MsIHRoaXMgc2hvdWxkIGJlIGBgbnVsbGBgLlxyXG4gICAgICovXHJcbiAgICBnZXQgZ2FzUHJpY2UoKSB7XHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLiNnYXNQcmljZTtcclxuICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCAmJiAodGhpcy50eXBlID09PSAwIHx8IHRoaXMudHlwZSA9PT0gMSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEJOXzA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH1cclxuICAgIHNldCBnYXNQcmljZSh2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuI2dhc1ByaWNlID0gKHZhbHVlID09IG51bGwpID8gbnVsbCA6IGdldEJpZ0ludCh2YWx1ZSwgXCJnYXNQcmljZVwiKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogIFRoZSBtYXhpbXVtIHByaW9yaXR5IGZlZSBwZXIgdW5pdCBvZiBnYXMgdG8gcGF5LiBPbiBsZWdhY3lcclxuICAgICAqICBuZXR3b3JrcyB0aGlzIHNob3VsZCBiZSBgYG51bGxgYC5cclxuICAgICAqL1xyXG4gICAgZ2V0IG1heFByaW9yaXR5RmVlUGVyR2FzKCkge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy4jbWF4UHJpb3JpdHlGZWVQZXJHYXM7XHJcbiAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gMiB8fCB0aGlzLnR5cGUgPT09IDMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBCTl8wO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcbiAgICBzZXQgbWF4UHJpb3JpdHlGZWVQZXJHYXModmFsdWUpIHtcclxuICAgICAgICB0aGlzLiNtYXhQcmlvcml0eUZlZVBlckdhcyA9ICh2YWx1ZSA9PSBudWxsKSA/IG51bGwgOiBnZXRCaWdJbnQodmFsdWUsIFwibWF4UHJpb3JpdHlGZWVQZXJHYXNcIik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqICBUaGUgbWF4aW11bSB0b3RhbCBmZWUgcGVyIHVuaXQgb2YgZ2FzIHRvIHBheS4gT24gbGVnYWN5XHJcbiAgICAgKiAgbmV0d29ya3MgdGhpcyBzaG91bGQgYmUgYGBudWxsYGAuXHJcbiAgICAgKi9cclxuICAgIGdldCBtYXhGZWVQZXJHYXMoKSB7XHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLiNtYXhGZWVQZXJHYXM7XHJcbiAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gMiB8fCB0aGlzLnR5cGUgPT09IDMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBCTl8wO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcbiAgICBzZXQgbWF4RmVlUGVyR2FzKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy4jbWF4RmVlUGVyR2FzID0gKHZhbHVlID09IG51bGwpID8gbnVsbCA6IGdldEJpZ0ludCh2YWx1ZSwgXCJtYXhGZWVQZXJHYXNcIik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqICBUaGUgdHJhbnNhY3Rpb24gZGF0YS4gRm9yIGBgaW5pdGBgIHRyYW5zYWN0aW9ucyB0aGlzIGlzIHRoZVxyXG4gICAgICogIGRlcGxveW1lbnQgY29kZS5cclxuICAgICAqL1xyXG4gICAgZ2V0IGRhdGEoKSB7IHJldHVybiB0aGlzLiNkYXRhOyB9XHJcbiAgICBzZXQgZGF0YSh2YWx1ZSkgeyB0aGlzLiNkYXRhID0gaGV4bGlmeSh2YWx1ZSk7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFRoZSBhbW91bnQgb2YgZXRoZXIgKGluIHdlaSkgdG8gc2VuZCBpbiB0aGlzIHRyYW5zYWN0aW9ucy5cclxuICAgICAqL1xyXG4gICAgZ2V0IHZhbHVlKCkgeyByZXR1cm4gdGhpcy4jdmFsdWU7IH1cclxuICAgIHNldCB2YWx1ZSh2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuI3ZhbHVlID0gZ2V0QmlnSW50KHZhbHVlLCBcInZhbHVlXCIpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgVGhlIGNoYWluIElEIHRoaXMgdHJhbnNhY3Rpb24gaXMgdmFsaWQgb24uXHJcbiAgICAgKi9cclxuICAgIGdldCBjaGFpbklkKCkgeyByZXR1cm4gdGhpcy4jY2hhaW5JZDsgfVxyXG4gICAgc2V0IGNoYWluSWQodmFsdWUpIHsgdGhpcy4jY2hhaW5JZCA9IGdldEJpZ0ludCh2YWx1ZSk7IH1cclxuICAgIC8qKlxyXG4gICAgICogIElmIHNpZ25lZCwgdGhlIHNpZ25hdHVyZSBmb3IgdGhpcyB0cmFuc2FjdGlvbi5cclxuICAgICAqL1xyXG4gICAgZ2V0IHNpZ25hdHVyZSgpIHsgcmV0dXJuIHRoaXMuI3NpZyB8fCBudWxsOyB9XHJcbiAgICBzZXQgc2lnbmF0dXJlKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy4jc2lnID0gKHZhbHVlID09IG51bGwpID8gbnVsbCA6IFNpZ25hdHVyZS5mcm9tKHZhbHVlKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogIFRoZSBhY2Nlc3MgbGlzdC5cclxuICAgICAqXHJcbiAgICAgKiAgQW4gYWNjZXNzIGxpc3QgcGVybWl0cyBkaXNjb3VudGVkIChidXQgcHJlLXBhaWQpIGFjY2VzcyB0b1xyXG4gICAgICogIGJ5dGVjb2RlIGFuZCBzdGF0ZSB2YXJpYWJsZSBhY2Nlc3Mgd2l0aGluIGNvbnRyYWN0IGV4ZWN1dGlvbi5cclxuICAgICAqL1xyXG4gICAgZ2V0IGFjY2Vzc0xpc3QoKSB7XHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLiNhY2Nlc3NMaXN0IHx8IG51bGw7XHJcbiAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gMSB8fCB0aGlzLnR5cGUgPT09IDIgfHwgdGhpcy50eXBlID09PSAzKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBAVE9ETzogaW4gdjcsIHRoaXMgc2hvdWxkIGFzc2lnbiB0aGUgdmFsdWUgb3IgYmVjb21lXHJcbiAgICAgICAgICAgICAgICAvLyBhIGxpdmUgb2JqZWN0IGl0c2VsZiwgb3RoZXJ3aXNlIG11dGF0aW9uIGlzIGluY29uc2lzdGVudFxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcbiAgICBzZXQgYWNjZXNzTGlzdCh2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuI2FjY2Vzc0xpc3QgPSAodmFsdWUgPT0gbnVsbCkgPyBudWxsIDogYWNjZXNzTGlzdGlmeSh2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBnZXQgYXV0aG9yaXphdGlvbkxpc3QoKSB7XHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLiNhdXRocyB8fCBudWxsO1xyXG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnR5cGUgPT09IDQpIHtcclxuICAgICAgICAgICAgICAgIC8vIEBUT0RPOiBpbiB2NywgdGhpcyBzaG91bGQgYmVjb21lIGEgbGl2ZSBvYmplY3QgaXRzZWxmLFxyXG4gICAgICAgICAgICAgICAgLy8gb3RoZXJ3aXNlIG11dGF0aW9uIGlzIGluY29uc2lzdGVudFxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH1cclxuICAgIHNldCBhdXRob3JpemF0aW9uTGlzdChhdXRocykge1xyXG4gICAgICAgIHRoaXMuI2F1dGhzID0gKGF1dGhzID09IG51bGwpID8gbnVsbCA6IGF1dGhzLm1hcCgoYSkgPT4gYXV0aG9yaXphdGlvbmlmeShhKSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqICBUaGUgbWF4IGZlZSBwZXIgYmxvYiBnYXMgZm9yIENhbmN1biB0cmFuc2FjdGlvbnMuXHJcbiAgICAgKi9cclxuICAgIGdldCBtYXhGZWVQZXJCbG9iR2FzKCkge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy4jbWF4RmVlUGVyQmxvYkdhcztcclxuICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCAmJiB0aGlzLnR5cGUgPT09IDMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEJOXzA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH1cclxuICAgIHNldCBtYXhGZWVQZXJCbG9iR2FzKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy4jbWF4RmVlUGVyQmxvYkdhcyA9ICh2YWx1ZSA9PSBudWxsKSA/IG51bGwgOiBnZXRCaWdJbnQodmFsdWUsIFwibWF4RmVlUGVyQmxvYkdhc1wiKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogIFRoZSBCTE9iIHZlcnNpb25lZCBoYXNoZXMgZm9yIENhbmN1biB0cmFuc2FjdGlvbnMuXHJcbiAgICAgKi9cclxuICAgIGdldCBibG9iVmVyc2lvbmVkSGFzaGVzKCkge1xyXG4gICAgICAgIC8vIEBUT0RPOiBNdXRhdGlvbiBpcyBpbmNvbnNpc3RlbnQ7IGlmIHVuc2V0LCB0aGUgcmV0dXJuZWQgdmFsdWVcclxuICAgICAgICAvLyBjYW5ub3QgbXV0YXRlIHRoZSBvYmplY3QsIGlmIHNldCBpdCBjYW5cclxuICAgICAgICBsZXQgdmFsdWUgPSB0aGlzLiNibG9iVmVyc2lvbmVkSGFzaGVzO1xyXG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsICYmIHRoaXMudHlwZSA9PT0gMykge1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH1cclxuICAgIHNldCBibG9iVmVyc2lvbmVkSGFzaGVzKHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgYXNzZXJ0QXJndW1lbnQoQXJyYXkuaXNBcnJheSh2YWx1ZSksIFwiYmxvYlZlcnNpb25lZEhhc2hlcyBtdXN0IGJlIGFuIEFycmF5XCIsIFwidmFsdWVcIiwgdmFsdWUpO1xyXG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKCk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGFzc2VydEFyZ3VtZW50KGlzSGV4U3RyaW5nKHZhbHVlW2ldLCAzMiksIFwiaW52YWxpZCBibG9iVmVyc2lvbmVkSGFzaFwiLCBgdmFsdWVbJHtpfV1gLCB2YWx1ZVtpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy4jYmxvYlZlcnNpb25lZEhhc2hlcyA9IHZhbHVlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgVGhlIEJMT2JzIGZvciB0aGUgVHJhbnNhY3Rpb24sIGlmIGFueS5cclxuICAgICAqXHJcbiAgICAgKiAgSWYgYGBibG9ic2BgIGlzIG5vbi1gYG51bGxgYCwgdGhlbiB0aGUgW1tzZXJpYWlsaXplZF1dXHJcbiAgICAgKiAgd2lsbCByZXR1cm4gdGhlIG5ldHdvcmsgZm9ybWF0dGVkIHNpZGVjYXIsIG90aGVyd2lzZSBpdFxyXG4gICAgICogIHdpbGwgcmV0dXJuIHRoZSBzdGFuZGFyZCBbW2xpbmstZWlwLTI3MThdXSBwYXlsb2FkLiBUaGVcclxuICAgICAqICBbW3Vuc2lnbmVkU2VyaWFsaXplZF1dIGlzIHVuYWZmZWN0ZWQgcmVnYXJkbGVzcy5cclxuICAgICAqXHJcbiAgICAgKiAgV2hlbiBzZXR0aW5nIGBgYmxvYnNgYCwgZWl0aGVyIGZ1bGx5IHZhbGlkIFtbQmxvYl1dIG9iamVjdHNcclxuICAgICAqICBtYXkgYmUgc3BlY2lmaWVkIChpLmUuIGNvcnJlY3RseSBwYWRkZWQsIHdpdGggY29ycmVjdFxyXG4gICAgICogIGNvbW1pdHRtZW50cyBhbmQgcHJvb2ZzKSBvciBhIHJhdyBbW0J5dGVzTGlrZV1dIG1heVxyXG4gICAgICogIGJlIHByb3ZpZGVkLlxyXG4gICAgICpcclxuICAgICAqICBJZiByYXcgW1tCeXRlc0xpa2VdXSBhcmUgcHJvdmlkZWQsIHRoZSBbW2t6Z11dIHByb3BlcnR5ICoqbXVzdCoqXHJcbiAgICAgKiAgYmUgYWxyZWFkeSBzZXQuIFRoZSBibG9iIHdpbGwgYmUgY29ycmVjdGx5IHBhZGRlZCBhbmQgdGhlXHJcbiAgICAgKiAgW1tLemdMaWJyYXJ5XV0gd2lsbCBiZSB1c2VkIHRvIGNvbXB1dGUgdGhlIGNvbW1pdHRtZW50IGFuZFxyXG4gICAgICogIHByb29mIGZvciB0aGUgYmxvYi5cclxuICAgICAqXHJcbiAgICAgKiAgQSBCTE9iIGlzIGEgc2VxdWVuY2Ugb2YgZmllbGQgZWxlbWVudHMsIGVhY2ggb2Ygd2hpY2ggbXVzdFxyXG4gICAgICogIGJlIHdpdGhpbiB0aGUgQkxTIGZpZWxkIG1vZHVsbywgc28gc29tZSBhZGRpdGlvbmFsIHByb2Nlc3NpbmdcclxuICAgICAqICBtYXkgYmUgcmVxdWlyZWQgdG8gZW5jb2RlIGFyYml0cmFyeSBkYXRhIHRvIGVuc3VyZSBlYWNoIDMyIGJ5dGVcclxuICAgICAqICBmaWVsZCBpcyB3aXRoaW4gdGhlIHZhbGlkIHJhbmdlLlxyXG4gICAgICpcclxuICAgICAqICBTZXR0aW5nIHRoaXMgYXV0b21hdGljYWxseSBwb3B1bGF0ZXMgW1tibG9iVmVyc2lvbmVkSGFzaGVzXV0sXHJcbiAgICAgKiAgb3ZlcndyaXRpbmcgYW55IGV4aXN0aW5nIHZhbHVlcy4gU2V0dGluZyB0aGlzIHRvIGBgbnVsbGBgXHJcbiAgICAgKiAgZG9lcyAqKm5vdCoqIHJlbW92ZSB0aGUgW1tibG9iVmVyc2lvbmVkSGFzaGVzXV0sIGxlYXZpbmcgdGhlbVxyXG4gICAgICogIHByZXNlbnQuXHJcbiAgICAgKi9cclxuICAgIGdldCBibG9icygpIHtcclxuICAgICAgICBpZiAodGhpcy4jYmxvYnMgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuI2Jsb2JzLm1hcCgoYikgPT4gT2JqZWN0LmFzc2lnbih7fSwgYikpO1xyXG4gICAgfVxyXG4gICAgc2V0IGJsb2JzKF9ibG9icykge1xyXG4gICAgICAgIGlmIChfYmxvYnMgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLiNibG9icyA9IG51bGw7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgYmxvYnMgPSBbXTtcclxuICAgICAgICBjb25zdCB2ZXJzaW9uZWRIYXNoZXMgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IF9ibG9icy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBibG9iID0gX2Jsb2JzW2ldO1xyXG4gICAgICAgICAgICBpZiAoaXNCeXRlc0xpa2UoYmxvYikpIHtcclxuICAgICAgICAgICAgICAgIGFzc2VydCh0aGlzLiNremcsIFwiYWRkaW5nIGEgcmF3IGJsb2IgcmVxdWlyZXMgYSBLWkcgbGlicmFyeVwiLCBcIlVOU1VQUE9SVEVEX09QRVJBVElPTlwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3BlcmF0aW9uOiBcInNldCBibG9icygpXCJcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgbGV0IGRhdGEgPSBnZXRCeXRlcyhibG9iKTtcclxuICAgICAgICAgICAgICAgIGFzc2VydEFyZ3VtZW50KGRhdGEubGVuZ3RoIDw9IEJMT0JfU0laRSwgXCJibG9iIGlzIHRvbyBsYXJnZVwiLCBgYmxvYnNbJHtpfV1gLCBibG9iKTtcclxuICAgICAgICAgICAgICAgIC8vIFBhZCBibG9iIGlmIG5lY2Vzc2FyeVxyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEubGVuZ3RoICE9PSBCTE9CX1NJWkUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYWRkZWQgPSBuZXcgVWludDhBcnJheShCTE9CX1NJWkUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHBhZGRlZC5zZXQoZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHBhZGRlZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbW1pdCA9IHRoaXMuI2t6Zy5ibG9iVG9LemdDb21taXRtZW50KGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcHJvb2YgPSBoZXhsaWZ5KHRoaXMuI2t6Zy5jb21wdXRlQmxvYkt6Z1Byb29mKGRhdGEsIGNvbW1pdCkpO1xyXG4gICAgICAgICAgICAgICAgYmxvYnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogaGV4bGlmeShkYXRhKSxcclxuICAgICAgICAgICAgICAgICAgICBjb21taXRtZW50OiBoZXhsaWZ5KGNvbW1pdCksXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvb2ZcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdmVyc2lvbmVkSGFzaGVzLnB1c2goZ2V0VmVyc2lvbmVkSGFzaCgxLCBjb21taXQpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbW1pdCA9IGhleGxpZnkoYmxvYi5jb21taXRtZW50KTtcclxuICAgICAgICAgICAgICAgIGJsb2JzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGhleGxpZnkoYmxvYi5kYXRhKSxcclxuICAgICAgICAgICAgICAgICAgICBjb21taXRtZW50OiBjb21taXQsXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvb2Y6IGhleGxpZnkoYmxvYi5wcm9vZilcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdmVyc2lvbmVkSGFzaGVzLnB1c2goZ2V0VmVyc2lvbmVkSGFzaCgxLCBjb21taXQpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLiNibG9icyA9IGJsb2JzO1xyXG4gICAgICAgIHRoaXMuI2Jsb2JWZXJzaW9uZWRIYXNoZXMgPSB2ZXJzaW9uZWRIYXNoZXM7XHJcbiAgICB9XHJcbiAgICBnZXQga3pnKCkgeyByZXR1cm4gdGhpcy4ja3pnOyB9XHJcbiAgICBzZXQga3pnKGt6Zykge1xyXG4gICAgICAgIGlmIChremcgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLiNremcgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy4ja3pnID0gZ2V0S3pnTGlicmFyeShremcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogIENyZWF0ZXMgYSBuZXcgVHJhbnNhY3Rpb24gd2l0aCBkZWZhdWx0IHZhbHVlcy5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy4jdHlwZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy4jdG8gPSBudWxsO1xyXG4gICAgICAgIHRoaXMuI25vbmNlID0gMDtcclxuICAgICAgICB0aGlzLiNnYXNMaW1pdCA9IEJOXzA7XHJcbiAgICAgICAgdGhpcy4jZ2FzUHJpY2UgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuI21heFByaW9yaXR5RmVlUGVyR2FzID0gbnVsbDtcclxuICAgICAgICB0aGlzLiNtYXhGZWVQZXJHYXMgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuI2RhdGEgPSBcIjB4XCI7XHJcbiAgICAgICAgdGhpcy4jdmFsdWUgPSBCTl8wO1xyXG4gICAgICAgIHRoaXMuI2NoYWluSWQgPSBCTl8wO1xyXG4gICAgICAgIHRoaXMuI3NpZyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy4jYWNjZXNzTGlzdCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy4jbWF4RmVlUGVyQmxvYkdhcyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy4jYmxvYlZlcnNpb25lZEhhc2hlcyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy4ja3pnID0gbnVsbDtcclxuICAgICAgICB0aGlzLiNibG9icyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy4jYXV0aHMgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgVGhlIHRyYW5zYWN0aW9uIGhhc2gsIGlmIHNpZ25lZC4gT3RoZXJ3aXNlLCBgYG51bGxgYC5cclxuICAgICAqL1xyXG4gICAgZ2V0IGhhc2goKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2lnbmF0dXJlID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBrZWNjYWsyNTYodGhpcy4jZ2V0U2VyaWFsaXplZCh0cnVlLCBmYWxzZSkpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgVGhlIHByZS1pbWFnZSBoYXNoIG9mIHRoaXMgdHJhbnNhY3Rpb24uXHJcbiAgICAgKlxyXG4gICAgICogIFRoaXMgaXMgdGhlIGRpZ2VzdCB0aGF0IGEgW1tTaWduZXJdXSBtdXN0IHNpZ24gdG8gYXV0aG9yaXplXHJcbiAgICAgKiAgdGhpcyB0cmFuc2FjdGlvbi5cclxuICAgICAqL1xyXG4gICAgZ2V0IHVuc2lnbmVkSGFzaCgpIHtcclxuICAgICAgICByZXR1cm4ga2VjY2FrMjU2KHRoaXMudW5zaWduZWRTZXJpYWxpemVkKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogIFRoZSBzZW5kaW5nIGFkZHJlc3MsIGlmIHNpZ25lZC4gT3RoZXJ3aXNlLCBgYG51bGxgYC5cclxuICAgICAqL1xyXG4gICAgZ2V0IGZyb20oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2lnbmF0dXJlID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZWNvdmVyQWRkcmVzcyh0aGlzLnVuc2lnbmVkSGFzaCwgdGhpcy5zaWduYXR1cmUpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgVGhlIHB1YmxpYyBrZXkgb2YgdGhlIHNlbmRlciwgaWYgc2lnbmVkLiBPdGhlcndpc2UsIGBgbnVsbGBgLlxyXG4gICAgICovXHJcbiAgICBnZXQgZnJvbVB1YmxpY0tleSgpIHtcclxuICAgICAgICBpZiAodGhpcy5zaWduYXR1cmUgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFNpZ25pbmdLZXkucmVjb3ZlclB1YmxpY0tleSh0aGlzLnVuc2lnbmVkSGFzaCwgdGhpcy5zaWduYXR1cmUpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgUmV0dXJucyB0cnVlIGlmIHNpZ25lZC5cclxuICAgICAqXHJcbiAgICAgKiAgVGhpcyBwcm92aWRlcyBhIFR5cGUgR3VhcmQgdGhhdCBwcm9wZXJ0aWVzIHJlcXVpcmluZyBhIHNpZ25lZFxyXG4gICAgICogIHRyYW5zYWN0aW9uIGFyZSBub24tbnVsbC5cclxuICAgICAqL1xyXG4gICAgaXNTaWduZWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2lnbmF0dXJlICE9IG51bGw7XHJcbiAgICB9XHJcbiAgICAjZ2V0U2VyaWFsaXplZChzaWduZWQsIHNpZGVjYXIpIHtcclxuICAgICAgICBhc3NlcnQoIXNpZ25lZCB8fCB0aGlzLnNpZ25hdHVyZSAhPSBudWxsLCBcImNhbm5vdCBzZXJpYWxpemUgdW5zaWduZWQgdHJhbnNhY3Rpb247IG1heWJlIHlvdSBtZWFudCAudW5zaWduZWRTZXJpYWxpemVkXCIsIFwiVU5TVVBQT1JURURfT1BFUkFUSU9OXCIsIHsgb3BlcmF0aW9uOiBcIi5zZXJpYWxpemVkXCIgfSk7XHJcbiAgICAgICAgY29uc3Qgc2lnID0gc2lnbmVkID8gdGhpcy5zaWduYXR1cmUgOiBudWxsO1xyXG4gICAgICAgIHN3aXRjaCAodGhpcy5pbmZlclR5cGUoKSkge1xyXG4gICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX3NlcmlhbGl6ZUxlZ2FjeSh0aGlzLCBzaWcpO1xyXG4gICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX3NlcmlhbGl6ZUVpcDI5MzAodGhpcywgc2lnKTtcclxuICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9zZXJpYWxpemVFaXAxNTU5KHRoaXMsIHNpZyk7XHJcbiAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBfc2VyaWFsaXplRWlwNDg0NCh0aGlzLCBzaWcsIHNpZGVjYXIgPyB0aGlzLmJsb2JzIDogbnVsbCk7XHJcbiAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBfc2VyaWFsaXplRWlwNzcwMih0aGlzLCBzaWcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhc3NlcnQoZmFsc2UsIFwidW5zdXBwb3J0ZWQgdHJhbnNhY3Rpb24gdHlwZVwiLCBcIlVOU1VQUE9SVEVEX09QRVJBVElPTlwiLCB7IG9wZXJhdGlvbjogXCIuc2VyaWFsaXplZFwiIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgVGhlIHNlcmlhbGl6ZWQgdHJhbnNhY3Rpb24uXHJcbiAgICAgKlxyXG4gICAgICogIFRoaXMgdGhyb3dzIGlmIHRoZSB0cmFuc2FjdGlvbiBpcyB1bnNpZ25lZC4gRm9yIHRoZSBwcmUtaW1hZ2UsXHJcbiAgICAgKiAgdXNlIFtbdW5zaWduZWRTZXJpYWxpemVkXV0uXHJcbiAgICAgKi9cclxuICAgIGdldCBzZXJpYWxpemVkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiNnZXRTZXJpYWxpemVkKHRydWUsIHRydWUpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgVGhlIHRyYW5zYWN0aW9uIHByZS1pbWFnZS5cclxuICAgICAqXHJcbiAgICAgKiAgVGhlIGhhc2ggb2YgdGhpcyBpcyB0aGUgZGlnZXN0IHdoaWNoIG5lZWRzIHRvIGJlIHNpZ25lZCB0b1xyXG4gICAgICogIGF1dGhvcml6ZSB0aGlzIHRyYW5zYWN0aW9uLlxyXG4gICAgICovXHJcbiAgICBnZXQgdW5zaWduZWRTZXJpYWxpemVkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiNnZXRTZXJpYWxpemVkKGZhbHNlLCBmYWxzZSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqICBSZXR1cm4gdGhlIG1vc3QgXCJsaWtlbHlcIiB0eXBlOyBjdXJyZW50bHkgdGhlIGhpZ2hlc3RcclxuICAgICAqICBzdXBwb3J0ZWQgdHJhbnNhY3Rpb24gdHlwZS5cclxuICAgICAqL1xyXG4gICAgaW5mZXJUeXBlKCkge1xyXG4gICAgICAgIGNvbnN0IHR5cGVzID0gdGhpcy5pbmZlclR5cGVzKCk7XHJcbiAgICAgICAgLy8gUHJlZmVyIExvbmRvbiAoRUlQLTE1NTkpIG92ZXIgQ2FuY3VuIChCTE9iKVxyXG4gICAgICAgIGlmICh0eXBlcy5pbmRleE9mKDIpID49IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIDI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFJldHVybiB0aGUgaGlnaGVzdCBpbmZlcnJlZCB0eXBlXHJcbiAgICAgICAgcmV0dXJuICh0eXBlcy5wb3AoKSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqICBWYWxpZGF0ZXMgdGhlIGV4cGxpY2l0IHByb3BlcnRpZXMgYW5kIHJldHVybnMgYSBsaXN0IG9mIGNvbXBhdGlibGVcclxuICAgICAqICB0cmFuc2FjdGlvbiB0eXBlcy5cclxuICAgICAqL1xyXG4gICAgaW5mZXJUeXBlcygpIHtcclxuICAgICAgICAvLyBDaGVja3MgdGhhdCB0aGVyZSBhcmUgbm8gY29uZmxpY3RpbmcgcHJvcGVydGllcyBzZXRcclxuICAgICAgICBjb25zdCBoYXNHYXNQcmljZSA9IHRoaXMuZ2FzUHJpY2UgIT0gbnVsbDtcclxuICAgICAgICBjb25zdCBoYXNGZWUgPSAodGhpcy5tYXhGZWVQZXJHYXMgIT0gbnVsbCB8fCB0aGlzLm1heFByaW9yaXR5RmVlUGVyR2FzICE9IG51bGwpO1xyXG4gICAgICAgIGNvbnN0IGhhc0FjY2Vzc0xpc3QgPSAodGhpcy5hY2Nlc3NMaXN0ICE9IG51bGwpO1xyXG4gICAgICAgIGNvbnN0IGhhc0Jsb2IgPSAodGhpcy4jbWF4RmVlUGVyQmxvYkdhcyAhPSBudWxsIHx8IHRoaXMuI2Jsb2JWZXJzaW9uZWRIYXNoZXMpO1xyXG4gICAgICAgIC8vaWYgKGhhc0dhc1ByaWNlICYmIGhhc0ZlZSkge1xyXG4gICAgICAgIC8vICAgIHRocm93IG5ldyBFcnJvcihcInRyYW5zYWN0aW9uIGNhbm5vdCBoYXZlIGdhc1ByaWNlIGFuZCBtYXhGZWVQZXJHYXNcIik7XHJcbiAgICAgICAgLy99XHJcbiAgICAgICAgaWYgKHRoaXMubWF4RmVlUGVyR2FzICE9IG51bGwgJiYgdGhpcy5tYXhQcmlvcml0eUZlZVBlckdhcyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGFzc2VydCh0aGlzLm1heEZlZVBlckdhcyA+PSB0aGlzLm1heFByaW9yaXR5RmVlUGVyR2FzLCBcInByaW9yaXR5RmVlIGNhbm5vdCBiZSBtb3JlIHRoYW4gbWF4RmVlXCIsIFwiQkFEX0RBVEFcIiwgeyB2YWx1ZTogdGhpcyB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy9pZiAodGhpcy50eXBlID09PSAyICYmIGhhc0dhc1ByaWNlKSB7XHJcbiAgICAgICAgLy8gICAgdGhyb3cgbmV3IEVycm9yKFwiZWlwLTE1NTkgdHJhbnNhY3Rpb24gY2Fubm90IGhhdmUgZ2FzUHJpY2VcIik7XHJcbiAgICAgICAgLy99XHJcbiAgICAgICAgYXNzZXJ0KCFoYXNGZWUgfHwgKHRoaXMudHlwZSAhPT0gMCAmJiB0aGlzLnR5cGUgIT09IDEpLCBcInRyYW5zYWN0aW9uIHR5cGUgY2Fubm90IGhhdmUgbWF4RmVlUGVyR2FzIG9yIG1heFByaW9yaXR5RmVlUGVyR2FzXCIsIFwiQkFEX0RBVEFcIiwgeyB2YWx1ZTogdGhpcyB9KTtcclxuICAgICAgICBhc3NlcnQodGhpcy50eXBlICE9PSAwIHx8ICFoYXNBY2Nlc3NMaXN0LCBcImxlZ2FjeSB0cmFuc2FjdGlvbiBjYW5ub3QgaGF2ZSBhY2Nlc3NMaXN0XCIsIFwiQkFEX0RBVEFcIiwgeyB2YWx1ZTogdGhpcyB9KTtcclxuICAgICAgICBjb25zdCB0eXBlcyA9IFtdO1xyXG4gICAgICAgIC8vIEV4cGxpY2l0IHR5cGVcclxuICAgICAgICBpZiAodGhpcy50eXBlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdHlwZXMucHVzaCh0aGlzLnR5cGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuYXV0aG9yaXphdGlvbkxpc3QgJiYgdGhpcy5hdXRob3JpemF0aW9uTGlzdC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHR5cGVzLnB1c2goNCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoaGFzRmVlKSB7XHJcbiAgICAgICAgICAgICAgICB0eXBlcy5wdXNoKDIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGhhc0dhc1ByaWNlKSB7XHJcbiAgICAgICAgICAgICAgICB0eXBlcy5wdXNoKDEpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFoYXNBY2Nlc3NMaXN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZXMucHVzaCgwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChoYXNBY2Nlc3NMaXN0KSB7XHJcbiAgICAgICAgICAgICAgICB0eXBlcy5wdXNoKDEpO1xyXG4gICAgICAgICAgICAgICAgdHlwZXMucHVzaCgyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChoYXNCbG9iICYmIHRoaXMudG8pIHtcclxuICAgICAgICAgICAgICAgIHR5cGVzLnB1c2goMyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0eXBlcy5wdXNoKDApO1xyXG4gICAgICAgICAgICAgICAgdHlwZXMucHVzaCgxKTtcclxuICAgICAgICAgICAgICAgIHR5cGVzLnB1c2goMik7XHJcbiAgICAgICAgICAgICAgICB0eXBlcy5wdXNoKDMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHR5cGVzLnNvcnQoKTtcclxuICAgICAgICByZXR1cm4gdHlwZXM7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqICBSZXR1cm5zIHRydWUgaWYgdGhpcyB0cmFuc2FjdGlvbiBpcyBhIGxlZ2FjeSB0cmFuc2FjdGlvbiAoaS5lLlxyXG4gICAgICogIGBgdHlwZSA9PT0gMGBgKS5cclxuICAgICAqXHJcbiAgICAgKiAgVGhpcyBwcm92aWRlcyBhIFR5cGUgR3VhcmQgdGhhdCB0aGUgcmVsYXRlZCBwcm9wZXJ0aWVzIGFyZVxyXG4gICAgICogIG5vbi1udWxsLlxyXG4gICAgICovXHJcbiAgICBpc0xlZ2FjeSgpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMudHlwZSA9PT0gMCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqICBSZXR1cm5zIHRydWUgaWYgdGhpcyB0cmFuc2FjdGlvbiBpcyBiZXJsaW4gaGFyZGZvcm0gdHJhbnNhY3Rpb24gKGkuZS5cclxuICAgICAqICBgYHR5cGUgPT09IDFgYCkuXHJcbiAgICAgKlxyXG4gICAgICogIFRoaXMgcHJvdmlkZXMgYSBUeXBlIEd1YXJkIHRoYXQgdGhlIHJlbGF0ZWQgcHJvcGVydGllcyBhcmVcclxuICAgICAqICBub24tbnVsbC5cclxuICAgICAqL1xyXG4gICAgaXNCZXJsaW4oKSB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLnR5cGUgPT09IDEpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgUmV0dXJucyB0cnVlIGlmIHRoaXMgdHJhbnNhY3Rpb24gaXMgbG9uZG9uIGhhcmRmb3JtIHRyYW5zYWN0aW9uIChpLmUuXHJcbiAgICAgKiAgYGB0eXBlID09PSAyYGApLlxyXG4gICAgICpcclxuICAgICAqICBUaGlzIHByb3ZpZGVzIGEgVHlwZSBHdWFyZCB0aGF0IHRoZSByZWxhdGVkIHByb3BlcnRpZXMgYXJlXHJcbiAgICAgKiAgbm9uLW51bGwuXHJcbiAgICAgKi9cclxuICAgIGlzTG9uZG9uKCkge1xyXG4gICAgICAgIHJldHVybiAodGhpcy50eXBlID09PSAyKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybnMgdHJ1ZSBpZiB0aGlzIHRyYW5zYWN0aW9uIGlzIGFuIFtbbGluay1laXAtNDg0NF1dIEJMT0JcclxuICAgICAqICB0cmFuc2FjdGlvbi5cclxuICAgICAqXHJcbiAgICAgKiAgVGhpcyBwcm92aWRlcyBhIFR5cGUgR3VhcmQgdGhhdCB0aGUgcmVsYXRlZCBwcm9wZXJ0aWVzIGFyZVxyXG4gICAgICogIG5vbi1udWxsLlxyXG4gICAgICovXHJcbiAgICBpc0NhbmN1bigpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMudHlwZSA9PT0gMyk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqICBDcmVhdGUgYSBjb3B5IG9mIHRoaXMgdHJhbnNhY2l0b24uXHJcbiAgICAgKi9cclxuICAgIGNsb25lKCkge1xyXG4gICAgICAgIHJldHVybiBUcmFuc2FjdGlvbi5mcm9tKHRoaXMpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgUmV0dXJuIGEgSlNPTi1mcmllbmRseSBvYmplY3QuXHJcbiAgICAgKi9cclxuICAgIHRvSlNPTigpIHtcclxuICAgICAgICBjb25zdCBzID0gKHYpID0+IHtcclxuICAgICAgICAgICAgaWYgKHYgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHYudG9TdHJpbmcoKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZSxcclxuICAgICAgICAgICAgdG86IHRoaXMudG8sXHJcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgZnJvbTogdGhpcy5mcm9tLFxyXG4gICAgICAgICAgICBkYXRhOiB0aGlzLmRhdGEsXHJcbiAgICAgICAgICAgIG5vbmNlOiB0aGlzLm5vbmNlLFxyXG4gICAgICAgICAgICBnYXNMaW1pdDogcyh0aGlzLmdhc0xpbWl0KSxcclxuICAgICAgICAgICAgZ2FzUHJpY2U6IHModGhpcy5nYXNQcmljZSksXHJcbiAgICAgICAgICAgIG1heFByaW9yaXR5RmVlUGVyR2FzOiBzKHRoaXMubWF4UHJpb3JpdHlGZWVQZXJHYXMpLFxyXG4gICAgICAgICAgICBtYXhGZWVQZXJHYXM6IHModGhpcy5tYXhGZWVQZXJHYXMpLFxyXG4gICAgICAgICAgICB2YWx1ZTogcyh0aGlzLnZhbHVlKSxcclxuICAgICAgICAgICAgY2hhaW5JZDogcyh0aGlzLmNoYWluSWQpLFxyXG4gICAgICAgICAgICBzaWc6IHRoaXMuc2lnbmF0dXJlID8gdGhpcy5zaWduYXR1cmUudG9KU09OKCkgOiBudWxsLFxyXG4gICAgICAgICAgICBhY2Nlc3NMaXN0OiB0aGlzLmFjY2Vzc0xpc3RcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgQ3JlYXRlIGEgKipUcmFuc2FjdGlvbioqIGZyb20gYSBzZXJpYWxpemVkIHRyYW5zYWN0aW9uIG9yIGFcclxuICAgICAqICBUcmFuc2FjdGlvbi1saWtlIG9iamVjdC5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGZyb20odHgpIHtcclxuICAgICAgICBpZiAodHggPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFRyYW5zYWN0aW9uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlb2YgKHR4KSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBjb25zdCBwYXlsb2FkID0gZ2V0Qnl0ZXModHgpO1xyXG4gICAgICAgICAgICBpZiAocGF5bG9hZFswXSA+PSAweDdmKSB7IC8vIEBUT0RPOiA+IHZzID49ID8/XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gVHJhbnNhY3Rpb24uZnJvbShfcGFyc2VMZWdhY3kocGF5bG9hZCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHN3aXRjaCAocGF5bG9hZFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gVHJhbnNhY3Rpb24uZnJvbShfcGFyc2VFaXAyOTMwKHBheWxvYWQpKTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjogcmV0dXJuIFRyYW5zYWN0aW9uLmZyb20oX3BhcnNlRWlwMTU1OShwYXlsb2FkKSk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiBUcmFuc2FjdGlvbi5mcm9tKF9wYXJzZUVpcDQ4NDQocGF5bG9hZCkpO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gVHJhbnNhY3Rpb24uZnJvbShfcGFyc2VFaXA3NzAyKHBheWxvYWQpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhc3NlcnQoZmFsc2UsIFwidW5zdXBwb3J0ZWQgdHJhbnNhY3Rpb24gdHlwZVwiLCBcIlVOU1VQUE9SVEVEX09QRVJBVElPTlwiLCB7IG9wZXJhdGlvbjogXCJmcm9tXCIgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBUcmFuc2FjdGlvbigpO1xyXG4gICAgICAgIGlmICh0eC50eXBlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcmVzdWx0LnR5cGUgPSB0eC50eXBlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHgudG8gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXN1bHQudG8gPSB0eC50bztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR4Lm5vbmNlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcmVzdWx0Lm5vbmNlID0gdHgubm9uY2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eC5nYXNMaW1pdCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5nYXNMaW1pdCA9IHR4Lmdhc0xpbWl0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHguZ2FzUHJpY2UgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXN1bHQuZ2FzUHJpY2UgPSB0eC5nYXNQcmljZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR4Lm1heFByaW9yaXR5RmVlUGVyR2FzICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcmVzdWx0Lm1heFByaW9yaXR5RmVlUGVyR2FzID0gdHgubWF4UHJpb3JpdHlGZWVQZXJHYXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eC5tYXhGZWVQZXJHYXMgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXN1bHQubWF4RmVlUGVyR2FzID0gdHgubWF4RmVlUGVyR2FzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHgubWF4RmVlUGVyQmxvYkdhcyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5tYXhGZWVQZXJCbG9iR2FzID0gdHgubWF4RmVlUGVyQmxvYkdhcztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR4LmRhdGEgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXN1bHQuZGF0YSA9IHR4LmRhdGE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eC52YWx1ZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHR4LnZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHguY2hhaW5JZCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5jaGFpbklkID0gdHguY2hhaW5JZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR4LnNpZ25hdHVyZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5zaWduYXR1cmUgPSBTaWduYXR1cmUuZnJvbSh0eC5zaWduYXR1cmUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHguYWNjZXNzTGlzdCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5hY2Nlc3NMaXN0ID0gdHguYWNjZXNzTGlzdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR4LmF1dGhvcml6YXRpb25MaXN0ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcmVzdWx0LmF1dGhvcml6YXRpb25MaXN0ID0gdHguYXV0aG9yaXphdGlvbkxpc3Q7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFRoaXMgd2lsbCBnZXQgb3ZlcndyaXR0ZW4gYnkgYmxvYnMsIGlmIHByZXNlbnRcclxuICAgICAgICBpZiAodHguYmxvYlZlcnNpb25lZEhhc2hlcyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5ibG9iVmVyc2lvbmVkSGFzaGVzID0gdHguYmxvYlZlcnNpb25lZEhhc2hlcztcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gTWFrZSBzdXJlIHdlIGFzc2lnbiB0aGUga3pnIGJlZm9yZSBhc3NpZ25pbmcgYmxvYnMsIHdoaWNoXHJcbiAgICAgICAgLy8gcmVxdWlyZSB0aGUgbGlicmFyeSBpbiB0aGUgZXZlbnQgcmF3IGJsb2IgZGF0YSBpcyBwcm92aWRlZC5cclxuICAgICAgICBpZiAodHgua3pnICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcmVzdWx0Lmt6ZyA9IHR4Lmt6ZztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR4LmJsb2JzICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcmVzdWx0LmJsb2JzID0gdHguYmxvYnM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eC5oYXNoICE9IG51bGwpIHtcclxuICAgICAgICAgICAgYXNzZXJ0QXJndW1lbnQocmVzdWx0LmlzU2lnbmVkKCksIFwidW5zaWduZWQgdHJhbnNhY3Rpb24gY2Fubm90IGRlZmluZSAnLmhhc2gnXCIsIFwidHhcIiwgdHgpO1xyXG4gICAgICAgICAgICBhc3NlcnRBcmd1bWVudChyZXN1bHQuaGFzaCA9PT0gdHguaGFzaCwgXCJoYXNoIG1pc21hdGNoXCIsIFwidHhcIiwgdHgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHguZnJvbSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGFzc2VydEFyZ3VtZW50KHJlc3VsdC5pc1NpZ25lZCgpLCBcInVuc2lnbmVkIHRyYW5zYWN0aW9uIGNhbm5vdCBkZWZpbmUgJy5mcm9tJ1wiLCBcInR4XCIsIHR4KTtcclxuICAgICAgICAgICAgYXNzZXJ0QXJndW1lbnQocmVzdWx0LmZyb20udG9Mb3dlckNhc2UoKSA9PT0gKHR4LmZyb20gfHwgXCJcIikudG9Mb3dlckNhc2UoKSwgXCJmcm9tIG1pc21hdGNoXCIsIFwidHhcIiwgdHgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyYW5zYWN0aW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/transaction/transaction.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/base58.js":
/*!*****************************************************!*\
  !*** ./node_modules/ethers/lib.esm/utils/base58.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeBase58: () => (/* binding */ decodeBase58),\n/* harmony export */   encodeBase58: () => (/* binding */ encodeBase58)\n/* harmony export */ });\n/* harmony import */ var _data_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./data.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/data.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _maths_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./maths.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/maths.js\");\n/**\r\n *  The [Base58 Encoding](link-base58) scheme allows a **numeric** value\r\n *  to be encoded as a compact string using a radix of 58 using only\r\n *  alpha-numeric characters. Confusingly similar characters are omitted\r\n *  (i.e. ``\"l0O\"``).\r\n *\r\n *  Note that Base58 encodes a **numeric** value, not arbitrary bytes,\r\n *  since any zero-bytes on the left would get removed. To mitigate this\r\n *  issue most schemes that use Base58 choose specific high-order values\r\n *  to ensure non-zero prefixes.\r\n *\r\n *  @_subsection: api/utils:Base58 Encoding [about-base58]\r\n */\r\n\r\n\r\n\r\nconst Alphabet = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\r\nlet Lookup = null;\r\nfunction getAlpha(letter) {\r\n    if (Lookup == null) {\r\n        Lookup = {};\r\n        for (let i = 0; i < Alphabet.length; i++) {\r\n            Lookup[Alphabet[i]] = BigInt(i);\r\n        }\r\n    }\r\n    const result = Lookup[letter];\r\n    (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(result != null, `invalid base58 value`, \"letter\", letter);\r\n    return result;\r\n}\r\nconst BN_0 = BigInt(0);\r\nconst BN_58 = BigInt(58);\r\n/**\r\n *  Encode %%value%% as a Base58-encoded string.\r\n */\r\nfunction encodeBase58(_value) {\r\n    const bytes = (0,_data_js__WEBPACK_IMPORTED_MODULE_1__.getBytes)(_value);\r\n    let value = (0,_maths_js__WEBPACK_IMPORTED_MODULE_2__.toBigInt)(bytes);\r\n    let result = \"\";\r\n    while (value) {\r\n        result = Alphabet[Number(value % BN_58)] + result;\r\n        value /= BN_58;\r\n    }\r\n    // Account for leading padding zeros\r\n    for (let i = 0; i < bytes.length; i++) {\r\n        if (bytes[i]) {\r\n            break;\r\n        }\r\n        result = Alphabet[0] + result;\r\n    }\r\n    return result;\r\n}\r\n/**\r\n *  Decode the Base58-encoded %%value%%.\r\n */\r\nfunction decodeBase58(value) {\r\n    let result = BN_0;\r\n    for (let i = 0; i < value.length; i++) {\r\n        result *= BN_58;\r\n        result += getAlpha(value[i]);\r\n    }\r\n    return result;\r\n}\r\n//# sourceMappingURL=base58.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS91dGlscy9iYXNlNTguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNxQztBQUNRO0FBQ1A7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixxQkFBcUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLDBEQUFjO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxrQkFBa0Isa0RBQVE7QUFDMUIsZ0JBQWdCLG1EQUFRO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixrQkFBa0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0Esb0JBQW9CLGtCQUFrQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkQ6XFxEb19hbjJcXGxlbmRodWJfdjJcXGxlbmRodWItZnJvbnRlbmQtbmV4dGpzXFxub2RlX21vZHVsZXNcXGV0aGVyc1xcbGliLmVzbVxcdXRpbHNcXGJhc2U1OC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogIFRoZSBbQmFzZTU4IEVuY29kaW5nXShsaW5rLWJhc2U1OCkgc2NoZW1lIGFsbG93cyBhICoqbnVtZXJpYyoqIHZhbHVlXHJcbiAqICB0byBiZSBlbmNvZGVkIGFzIGEgY29tcGFjdCBzdHJpbmcgdXNpbmcgYSByYWRpeCBvZiA1OCB1c2luZyBvbmx5XHJcbiAqICBhbHBoYS1udW1lcmljIGNoYXJhY3RlcnMuIENvbmZ1c2luZ2x5IHNpbWlsYXIgY2hhcmFjdGVycyBhcmUgb21pdHRlZFxyXG4gKiAgKGkuZS4gYGBcImwwT1wiYGApLlxyXG4gKlxyXG4gKiAgTm90ZSB0aGF0IEJhc2U1OCBlbmNvZGVzIGEgKipudW1lcmljKiogdmFsdWUsIG5vdCBhcmJpdHJhcnkgYnl0ZXMsXHJcbiAqICBzaW5jZSBhbnkgemVyby1ieXRlcyBvbiB0aGUgbGVmdCB3b3VsZCBnZXQgcmVtb3ZlZC4gVG8gbWl0aWdhdGUgdGhpc1xyXG4gKiAgaXNzdWUgbW9zdCBzY2hlbWVzIHRoYXQgdXNlIEJhc2U1OCBjaG9vc2Ugc3BlY2lmaWMgaGlnaC1vcmRlciB2YWx1ZXNcclxuICogIHRvIGVuc3VyZSBub24temVybyBwcmVmaXhlcy5cclxuICpcclxuICogIEBfc3Vic2VjdGlvbjogYXBpL3V0aWxzOkJhc2U1OCBFbmNvZGluZyBbYWJvdXQtYmFzZTU4XVxyXG4gKi9cclxuaW1wb3J0IHsgZ2V0Qnl0ZXMgfSBmcm9tIFwiLi9kYXRhLmpzXCI7XHJcbmltcG9ydCB7IGFzc2VydEFyZ3VtZW50IH0gZnJvbSBcIi4vZXJyb3JzLmpzXCI7XHJcbmltcG9ydCB7IHRvQmlnSW50IH0gZnJvbSBcIi4vbWF0aHMuanNcIjtcclxuY29uc3QgQWxwaGFiZXQgPSBcIjEyMzQ1Njc4OUFCQ0RFRkdISktMTU5QUVJTVFVWV1hZWmFiY2RlZmdoaWprbW5vcHFyc3R1dnd4eXpcIjtcclxubGV0IExvb2t1cCA9IG51bGw7XHJcbmZ1bmN0aW9uIGdldEFscGhhKGxldHRlcikge1xyXG4gICAgaWYgKExvb2t1cCA9PSBudWxsKSB7XHJcbiAgICAgICAgTG9va3VwID0ge307XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBBbHBoYWJldC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBMb29rdXBbQWxwaGFiZXRbaV1dID0gQmlnSW50KGkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnN0IHJlc3VsdCA9IExvb2t1cFtsZXR0ZXJdO1xyXG4gICAgYXNzZXJ0QXJndW1lbnQocmVzdWx0ICE9IG51bGwsIGBpbnZhbGlkIGJhc2U1OCB2YWx1ZWAsIFwibGV0dGVyXCIsIGxldHRlcik7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbmNvbnN0IEJOXzAgPSBCaWdJbnQoMCk7XHJcbmNvbnN0IEJOXzU4ID0gQmlnSW50KDU4KTtcclxuLyoqXHJcbiAqICBFbmNvZGUgJSV2YWx1ZSUlIGFzIGEgQmFzZTU4LWVuY29kZWQgc3RyaW5nLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZUJhc2U1OChfdmFsdWUpIHtcclxuICAgIGNvbnN0IGJ5dGVzID0gZ2V0Qnl0ZXMoX3ZhbHVlKTtcclxuICAgIGxldCB2YWx1ZSA9IHRvQmlnSW50KGJ5dGVzKTtcclxuICAgIGxldCByZXN1bHQgPSBcIlwiO1xyXG4gICAgd2hpbGUgKHZhbHVlKSB7XHJcbiAgICAgICAgcmVzdWx0ID0gQWxwaGFiZXRbTnVtYmVyKHZhbHVlICUgQk5fNTgpXSArIHJlc3VsdDtcclxuICAgICAgICB2YWx1ZSAvPSBCTl81ODtcclxuICAgIH1cclxuICAgIC8vIEFjY291bnQgZm9yIGxlYWRpbmcgcGFkZGluZyB6ZXJvc1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGlmIChieXRlc1tpXSkge1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmVzdWx0ID0gQWxwaGFiZXRbMF0gKyByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbi8qKlxyXG4gKiAgRGVjb2RlIHRoZSBCYXNlNTgtZW5jb2RlZCAlJXZhbHVlJSUuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlQmFzZTU4KHZhbHVlKSB7XHJcbiAgICBsZXQgcmVzdWx0ID0gQk5fMDtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICByZXN1bHQgKj0gQk5fNTg7XHJcbiAgICAgICAgcmVzdWx0ICs9IGdldEFscGhhKHZhbHVlW2ldKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFzZTU4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/base58.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/base64-browser.js":
/*!*************************************************************!*\
  !*** ./node_modules/ethers/lib.esm/utils/base64-browser.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeBase64: () => (/* binding */ decodeBase64),\n/* harmony export */   encodeBase64: () => (/* binding */ encodeBase64)\n/* harmony export */ });\n/* harmony import */ var _data_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./data.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/data.js\");\n// utils/base64-browser\r\n\r\nfunction decodeBase64(textData) {\r\n    textData = atob(textData);\r\n    const data = new Uint8Array(textData.length);\r\n    for (let i = 0; i < textData.length; i++) {\r\n        data[i] = textData.charCodeAt(i);\r\n    }\r\n    return (0,_data_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(data);\r\n}\r\nfunction encodeBase64(_data) {\r\n    const data = (0,_data_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(_data);\r\n    let textData = \"\";\r\n    for (let i = 0; i < data.length; i++) {\r\n        textData += String.fromCharCode(data[i]);\r\n    }\r\n    return btoa(textData);\r\n}\r\n//# sourceMappingURL=base64-browser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS91dGlscy9iYXNlNjQtYnJvd3Nlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNxQztBQUM5QjtBQUNQO0FBQ0E7QUFDQSxvQkFBb0IscUJBQXFCO0FBQ3pDO0FBQ0E7QUFDQSxXQUFXLGtEQUFRO0FBQ25CO0FBQ087QUFDUCxpQkFBaUIsa0RBQVE7QUFDekI7QUFDQSxvQkFBb0IsaUJBQWlCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkQ6XFxEb19hbjJcXGxlbmRodWJfdjJcXGxlbmRodWItZnJvbnRlbmQtbmV4dGpzXFxub2RlX21vZHVsZXNcXGV0aGVyc1xcbGliLmVzbVxcdXRpbHNcXGJhc2U2NC1icm93c2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHV0aWxzL2Jhc2U2NC1icm93c2VyXHJcbmltcG9ydCB7IGdldEJ5dGVzIH0gZnJvbSBcIi4vZGF0YS5qc1wiO1xyXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlQmFzZTY0KHRleHREYXRhKSB7XHJcbiAgICB0ZXh0RGF0YSA9IGF0b2IodGV4dERhdGEpO1xyXG4gICAgY29uc3QgZGF0YSA9IG5ldyBVaW50OEFycmF5KHRleHREYXRhLmxlbmd0aCk7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRleHREYXRhLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgZGF0YVtpXSA9IHRleHREYXRhLmNoYXJDb2RlQXQoaSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZ2V0Qnl0ZXMoZGF0YSk7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZUJhc2U2NChfZGF0YSkge1xyXG4gICAgY29uc3QgZGF0YSA9IGdldEJ5dGVzKF9kYXRhKTtcclxuICAgIGxldCB0ZXh0RGF0YSA9IFwiXCI7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB0ZXh0RGF0YSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGRhdGFbaV0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGJ0b2EodGV4dERhdGEpO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhc2U2NC1icm93c2VyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/base64-browser.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/data.js":
/*!***************************************************!*\
  !*** ./node_modules/ethers/lib.esm/utils/data.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   concat: () => (/* binding */ concat),\n/* harmony export */   dataLength: () => (/* binding */ dataLength),\n/* harmony export */   dataSlice: () => (/* binding */ dataSlice),\n/* harmony export */   getBytes: () => (/* binding */ getBytes),\n/* harmony export */   getBytesCopy: () => (/* binding */ getBytesCopy),\n/* harmony export */   hexlify: () => (/* binding */ hexlify),\n/* harmony export */   isBytesLike: () => (/* binding */ isBytesLike),\n/* harmony export */   isHexString: () => (/* binding */ isHexString),\n/* harmony export */   stripZerosLeft: () => (/* binding */ stripZerosLeft),\n/* harmony export */   zeroPadBytes: () => (/* binding */ zeroPadBytes),\n/* harmony export */   zeroPadValue: () => (/* binding */ zeroPadValue)\n/* harmony export */ });\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/errors.js\");\n/**\r\n *  Some data helpers.\r\n *\r\n *\r\n *  @_subsection api/utils:Data Helpers  [about-data]\r\n */\r\n\r\nfunction _getBytes(value, name, copy) {\r\n    if (value instanceof Uint8Array) {\r\n        if (copy) {\r\n            return new Uint8Array(value);\r\n        }\r\n        return value;\r\n    }\r\n    if (typeof (value) === \"string\" && value.match(/^0x(?:[0-9a-f][0-9a-f])*$/i)) {\r\n        const result = new Uint8Array((value.length - 2) / 2);\r\n        let offset = 2;\r\n        for (let i = 0; i < result.length; i++) {\r\n            result[i] = parseInt(value.substring(offset, offset + 2), 16);\r\n            offset += 2;\r\n        }\r\n        return result;\r\n    }\r\n    (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"invalid BytesLike value\", name || \"value\", value);\r\n}\r\n/**\r\n *  Get a typed Uint8Array for %%value%%. If already a Uint8Array\r\n *  the original %%value%% is returned; if a copy is required use\r\n *  [[getBytesCopy]].\r\n *\r\n *  @see: getBytesCopy\r\n */\r\nfunction getBytes(value, name) {\r\n    return _getBytes(value, name, false);\r\n}\r\n/**\r\n *  Get a typed Uint8Array for %%value%%, creating a copy if necessary\r\n *  to prevent any modifications of the returned value from being\r\n *  reflected elsewhere.\r\n *\r\n *  @see: getBytes\r\n */\r\nfunction getBytesCopy(value, name) {\r\n    return _getBytes(value, name, true);\r\n}\r\n/**\r\n *  Returns true if %%value%% is a valid [[HexString]].\r\n *\r\n *  If %%length%% is ``true`` or a //number//, it also checks that\r\n *  %%value%% is a valid [[DataHexString]] of %%length%% (if a //number//)\r\n *  bytes of data (e.g. ``0x1234`` is 2 bytes).\r\n */\r\nfunction isHexString(value, length) {\r\n    if (typeof (value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\r\n        return false;\r\n    }\r\n    if (typeof (length) === \"number\" && value.length !== 2 + 2 * length) {\r\n        return false;\r\n    }\r\n    if (length === true && (value.length % 2) !== 0) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n *  Returns true if %%value%% is a valid representation of arbitrary\r\n *  data (i.e. a valid [[DataHexString]] or a Uint8Array).\r\n */\r\nfunction isBytesLike(value) {\r\n    return (isHexString(value, true) || (value instanceof Uint8Array));\r\n}\r\nconst HexCharacters = \"0123456789abcdef\";\r\n/**\r\n *  Returns a [[DataHexString]] representation of %%data%%.\r\n */\r\nfunction hexlify(data) {\r\n    const bytes = getBytes(data);\r\n    let result = \"0x\";\r\n    for (let i = 0; i < bytes.length; i++) {\r\n        const v = bytes[i];\r\n        result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\r\n    }\r\n    return result;\r\n}\r\n/**\r\n *  Returns a [[DataHexString]] by concatenating all values\r\n *  within %%data%%.\r\n */\r\nfunction concat(datas) {\r\n    return \"0x\" + datas.map((d) => hexlify(d).substring(2)).join(\"\");\r\n}\r\n/**\r\n *  Returns the length of %%data%%, in bytes.\r\n */\r\nfunction dataLength(data) {\r\n    if (isHexString(data, true)) {\r\n        return (data.length - 2) / 2;\r\n    }\r\n    return getBytes(data).length;\r\n}\r\n/**\r\n *  Returns a [[DataHexString]] by slicing %%data%% from the %%start%%\r\n *  offset to the %%end%% offset.\r\n *\r\n *  By default %%start%% is 0 and %%end%% is the length of %%data%%.\r\n */\r\nfunction dataSlice(data, start, end) {\r\n    const bytes = getBytes(data);\r\n    if (end != null && end > bytes.length) {\r\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assert)(false, \"cannot slice beyond data bounds\", \"BUFFER_OVERRUN\", {\r\n            buffer: bytes, length: bytes.length, offset: end\r\n        });\r\n    }\r\n    return hexlify(bytes.slice((start == null) ? 0 : start, (end == null) ? bytes.length : end));\r\n}\r\n/**\r\n *  Return the [[DataHexString]] result by stripping all **leading**\r\n ** zero bytes from %%data%%.\r\n */\r\nfunction stripZerosLeft(data) {\r\n    let bytes = hexlify(data).substring(2);\r\n    while (bytes.startsWith(\"00\")) {\r\n        bytes = bytes.substring(2);\r\n    }\r\n    return \"0x\" + bytes;\r\n}\r\nfunction zeroPad(data, length, left) {\r\n    const bytes = getBytes(data);\r\n    (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assert)(length >= bytes.length, \"padding exceeds data length\", \"BUFFER_OVERRUN\", {\r\n        buffer: new Uint8Array(bytes),\r\n        length: length,\r\n        offset: length + 1\r\n    });\r\n    const result = new Uint8Array(length);\r\n    result.fill(0);\r\n    if (left) {\r\n        result.set(bytes, length - bytes.length);\r\n    }\r\n    else {\r\n        result.set(bytes, 0);\r\n    }\r\n    return hexlify(result);\r\n}\r\n/**\r\n *  Return the [[DataHexString]] of %%data%% padded on the **left**\r\n *  to %%length%% bytes.\r\n *\r\n *  If %%data%% already exceeds %%length%%, a [[BufferOverrunError]] is\r\n *  thrown.\r\n *\r\n *  This pads data the same as **values** are in Solidity\r\n *  (e.g. ``uint128``).\r\n */\r\nfunction zeroPadValue(data, length) {\r\n    return zeroPad(data, length, true);\r\n}\r\n/**\r\n *  Return the [[DataHexString]] of %%data%% padded on the **right**\r\n *  to %%length%% bytes.\r\n *\r\n *  If %%data%% already exceeds %%length%%, a [[BufferOverrunError]] is\r\n *  thrown.\r\n *\r\n *  This pads data the same as **bytes** are in Solidity\r\n *  (e.g. ``bytes16``).\r\n */\r\nfunction zeroPadBytes(data, length) {\r\n    return zeroPad(data, length, false);\r\n}\r\n//# sourceMappingURL=data.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/data.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/errors.js":
/*!*****************************************************!*\
  !*** ./node_modules/ethers/lib.esm/utils/errors.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assert: () => (/* binding */ assert),\n/* harmony export */   assertArgument: () => (/* binding */ assertArgument),\n/* harmony export */   assertArgumentCount: () => (/* binding */ assertArgumentCount),\n/* harmony export */   assertNormalize: () => (/* binding */ assertNormalize),\n/* harmony export */   assertPrivate: () => (/* binding */ assertPrivate),\n/* harmony export */   isCallException: () => (/* binding */ isCallException),\n/* harmony export */   isError: () => (/* binding */ isError),\n/* harmony export */   makeError: () => (/* binding */ makeError)\n/* harmony export */ });\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_version.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/_version.js\");\n/* harmony import */ var _properties_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./properties.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/properties.js\");\n/**\r\n *  All errors in ethers include properties to ensure they are both\r\n *  human-readable (i.e. ``.message``) and machine-readable (i.e. ``.code``).\r\n *\r\n *  The [[isError]] function can be used to check the error ``code`` and\r\n *  provide a type guard for the properties present on that error interface.\r\n *\r\n *  @_section: api/utils/errors:Errors  [about-errors]\r\n */\r\n\r\n\r\nfunction stringify(value, seen) {\r\n    if (value == null) {\r\n        return \"null\";\r\n    }\r\n    if (seen == null) {\r\n        seen = new Set();\r\n    }\r\n    if (typeof (value) === \"object\") {\r\n        if (seen.has(value)) {\r\n            return \"[Circular]\";\r\n        }\r\n        seen.add(value);\r\n    }\r\n    if (Array.isArray(value)) {\r\n        return \"[ \" + (value.map((v) => stringify(v, seen))).join(\", \") + \" ]\";\r\n    }\r\n    if (value instanceof Uint8Array) {\r\n        const HEX = \"0123456789abcdef\";\r\n        let result = \"0x\";\r\n        for (let i = 0; i < value.length; i++) {\r\n            result += HEX[value[i] >> 4];\r\n            result += HEX[value[i] & 0xf];\r\n        }\r\n        return result;\r\n    }\r\n    if (typeof (value) === \"object\" && typeof (value.toJSON) === \"function\") {\r\n        return stringify(value.toJSON(), seen);\r\n    }\r\n    switch (typeof (value)) {\r\n        case \"boolean\":\r\n        case \"number\":\r\n        case \"symbol\":\r\n            return value.toString();\r\n        case \"bigint\":\r\n            return BigInt(value).toString();\r\n        case \"string\":\r\n            return JSON.stringify(value);\r\n        case \"object\": {\r\n            const keys = Object.keys(value);\r\n            keys.sort();\r\n            return \"{ \" + keys.map((k) => `${stringify(k, seen)}: ${stringify(value[k], seen)}`).join(\", \") + \" }\";\r\n        }\r\n    }\r\n    return `[ COULD NOT SERIALIZE ]`;\r\n}\r\n/**\r\n *  Returns true if the %%error%% matches an error thrown by ethers\r\n *  that matches the error %%code%%.\r\n *\r\n *  In TypeScript environments, this can be used to check that %%error%%\r\n *  matches an EthersError type, which means the expected properties will\r\n *  be set.\r\n *\r\n *  @See [ErrorCodes](api:ErrorCode)\r\n *  @example\r\n *    try {\r\n *      // code....\r\n *    } catch (e) {\r\n *      if (isError(e, \"CALL_EXCEPTION\")) {\r\n *          // The Type Guard has validated this object\r\n *          console.log(e.data);\r\n *      }\r\n *    }\r\n */\r\nfunction isError(error, code) {\r\n    return (error && error.code === code);\r\n}\r\n/**\r\n *  Returns true if %%error%% is a [[CallExceptionError].\r\n */\r\nfunction isCallException(error) {\r\n    return isError(error, \"CALL_EXCEPTION\");\r\n}\r\n/**\r\n *  Returns a new Error configured to the format ethers emits errors, with\r\n *  the %%message%%, [[api:ErrorCode]] %%code%% and additional properties\r\n *  for the corresponding EthersError.\r\n *\r\n *  Each error in ethers includes the version of ethers, a\r\n *  machine-readable [[ErrorCode]], and depending on %%code%%, additional\r\n *  required properties. The error message will also include the %%message%%,\r\n *  ethers version, %%code%% and all additional properties, serialized.\r\n */\r\nfunction makeError(message, code, info) {\r\n    let shortMessage = message;\r\n    {\r\n        const details = [];\r\n        if (info) {\r\n            if (\"message\" in info || \"code\" in info || \"name\" in info) {\r\n                throw new Error(`value will overwrite populated values: ${stringify(info)}`);\r\n            }\r\n            for (const key in info) {\r\n                if (key === \"shortMessage\") {\r\n                    continue;\r\n                }\r\n                const value = (info[key]);\r\n                //                try {\r\n                details.push(key + \"=\" + stringify(value));\r\n                //                } catch (error: any) {\r\n                //                console.log(\"MMM\", error.message);\r\n                //                    details.push(key + \"=[could not serialize object]\");\r\n                //                }\r\n            }\r\n        }\r\n        details.push(`code=${code}`);\r\n        details.push(`version=${_version_js__WEBPACK_IMPORTED_MODULE_0__.version}`);\r\n        if (details.length) {\r\n            message += \" (\" + details.join(\", \") + \")\";\r\n        }\r\n    }\r\n    let error;\r\n    switch (code) {\r\n        case \"INVALID_ARGUMENT\":\r\n            error = new TypeError(message);\r\n            break;\r\n        case \"NUMERIC_FAULT\":\r\n        case \"BUFFER_OVERRUN\":\r\n            error = new RangeError(message);\r\n            break;\r\n        default:\r\n            error = new Error(message);\r\n    }\r\n    (0,_properties_js__WEBPACK_IMPORTED_MODULE_1__.defineProperties)(error, { code });\r\n    if (info) {\r\n        Object.assign(error, info);\r\n    }\r\n    if (error.shortMessage == null) {\r\n        (0,_properties_js__WEBPACK_IMPORTED_MODULE_1__.defineProperties)(error, { shortMessage });\r\n    }\r\n    return error;\r\n}\r\n/**\r\n *  Throws an EthersError with %%message%%, %%code%% and additional error\r\n *  %%info%% when %%check%% is falsish..\r\n *\r\n *  @see [[api:makeError]]\r\n */\r\nfunction assert(check, message, code, info) {\r\n    if (!check) {\r\n        throw makeError(message, code, info);\r\n    }\r\n}\r\n/**\r\n *  A simple helper to simply ensuring provided arguments match expected\r\n *  constraints, throwing if not.\r\n *\r\n *  In TypeScript environments, the %%check%% has been asserted true, so\r\n *  any further code does not need additional compile-time checks.\r\n */\r\nfunction assertArgument(check, message, name, value) {\r\n    assert(check, message, \"INVALID_ARGUMENT\", { argument: name, value: value });\r\n}\r\nfunction assertArgumentCount(count, expectedCount, message) {\r\n    if (message == null) {\r\n        message = \"\";\r\n    }\r\n    if (message) {\r\n        message = \": \" + message;\r\n    }\r\n    assert(count >= expectedCount, \"missing argument\" + message, \"MISSING_ARGUMENT\", {\r\n        count: count,\r\n        expectedCount: expectedCount\r\n    });\r\n    assert(count <= expectedCount, \"too many arguments\" + message, \"UNEXPECTED_ARGUMENT\", {\r\n        count: count,\r\n        expectedCount: expectedCount\r\n    });\r\n}\r\nconst _normalizeForms = [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].reduce((accum, form) => {\r\n    try {\r\n        // General test for normalize\r\n        /* c8 ignore start */\r\n        if (\"test\".normalize(form) !== \"test\") {\r\n            throw new Error(\"bad\");\r\n        }\r\n        ;\r\n        /* c8 ignore stop */\r\n        if (form === \"NFD\") {\r\n            const check = String.fromCharCode(0xe9).normalize(\"NFD\");\r\n            const expected = String.fromCharCode(0x65, 0x0301);\r\n            /* c8 ignore start */\r\n            if (check !== expected) {\r\n                throw new Error(\"broken\");\r\n            }\r\n            /* c8 ignore stop */\r\n        }\r\n        accum.push(form);\r\n    }\r\n    catch (error) { }\r\n    return accum;\r\n}, []);\r\n/**\r\n *  Throws if the normalization %%form%% is not supported.\r\n */\r\nfunction assertNormalize(form) {\r\n    assert(_normalizeForms.indexOf(form) >= 0, \"platform missing String.prototype.normalize\", \"UNSUPPORTED_OPERATION\", {\r\n        operation: \"String.prototype.normalize\", info: { form }\r\n    });\r\n}\r\n/**\r\n *  Many classes use file-scoped values to guard the constructor,\r\n *  making it effectively private. This facilitates that pattern\r\n *  by ensuring the %%givenGaurd%% matches the file-scoped %%guard%%,\r\n *  throwing if not, indicating the %%className%% if provided.\r\n */\r\nfunction assertPrivate(givenGuard, guard, className) {\r\n    if (className == null) {\r\n        className = \"\";\r\n    }\r\n    if (givenGuard !== guard) {\r\n        let method = className, operation = \"new\";\r\n        if (className) {\r\n            method += \".\";\r\n            operation += \" \" + className;\r\n        }\r\n        assert(false, `private constructor; use ${method}from* methods`, \"UNSUPPORTED_OPERATION\", {\r\n            operation\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=errors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/errors.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/events.js":
/*!*****************************************************!*\
  !*** ./node_modules/ethers/lib.esm/utils/events.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EventPayload: () => (/* binding */ EventPayload)\n/* harmony export */ });\n/* harmony import */ var _properties_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./properties.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/properties.js\");\n/**\r\n *  Events allow for applications to use the observer pattern, which\r\n *  allows subscribing and publishing events, outside the normal\r\n *  execution paths.\r\n *\r\n *  @_section api/utils/events:Events  [about-events]\r\n */\r\n\r\n/**\r\n *  When an [[EventEmitterable]] triggers a [[Listener]], the\r\n *  callback always ahas one additional argument passed, which is\r\n *  an **EventPayload**.\r\n */\r\nclass EventPayload {\r\n    /**\r\n     *  The event filter.\r\n     */\r\n    filter;\r\n    /**\r\n     *  The **EventEmitterable**.\r\n     */\r\n    emitter;\r\n    #listener;\r\n    /**\r\n     *  Create a new **EventPayload** for %%emitter%% with\r\n     *  the %%listener%% and for %%filter%%.\r\n     */\r\n    constructor(emitter, listener, filter) {\r\n        this.#listener = listener;\r\n        (0,_properties_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, { emitter, filter });\r\n    }\r\n    /**\r\n     *  Unregister the triggered listener for future events.\r\n     */\r\n    async removeListener() {\r\n        if (this.#listener == null) {\r\n            return;\r\n        }\r\n        await this.emitter.off(this.filter, this.#listener);\r\n    }\r\n}\r\n//# sourceMappingURL=events.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS91dGlscy9ldmVudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNtRDtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLGdFQUFnQixTQUFTLGlCQUFpQjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkQ6XFxEb19hbjJcXGxlbmRodWJfdjJcXGxlbmRodWItZnJvbnRlbmQtbmV4dGpzXFxub2RlX21vZHVsZXNcXGV0aGVyc1xcbGliLmVzbVxcdXRpbHNcXGV2ZW50cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogIEV2ZW50cyBhbGxvdyBmb3IgYXBwbGljYXRpb25zIHRvIHVzZSB0aGUgb2JzZXJ2ZXIgcGF0dGVybiwgd2hpY2hcclxuICogIGFsbG93cyBzdWJzY3JpYmluZyBhbmQgcHVibGlzaGluZyBldmVudHMsIG91dHNpZGUgdGhlIG5vcm1hbFxyXG4gKiAgZXhlY3V0aW9uIHBhdGhzLlxyXG4gKlxyXG4gKiAgQF9zZWN0aW9uIGFwaS91dGlscy9ldmVudHM6RXZlbnRzICBbYWJvdXQtZXZlbnRzXVxyXG4gKi9cclxuaW1wb3J0IHsgZGVmaW5lUHJvcGVydGllcyB9IGZyb20gXCIuL3Byb3BlcnRpZXMuanNcIjtcclxuLyoqXHJcbiAqICBXaGVuIGFuIFtbRXZlbnRFbWl0dGVyYWJsZV1dIHRyaWdnZXJzIGEgW1tMaXN0ZW5lcl1dLCB0aGVcclxuICogIGNhbGxiYWNrIGFsd2F5cyBhaGFzIG9uZSBhZGRpdGlvbmFsIGFyZ3VtZW50IHBhc3NlZCwgd2hpY2ggaXNcclxuICogIGFuICoqRXZlbnRQYXlsb2FkKiouXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRXZlbnRQYXlsb2FkIHtcclxuICAgIC8qKlxyXG4gICAgICogIFRoZSBldmVudCBmaWx0ZXIuXHJcbiAgICAgKi9cclxuICAgIGZpbHRlcjtcclxuICAgIC8qKlxyXG4gICAgICogIFRoZSAqKkV2ZW50RW1pdHRlcmFibGUqKi5cclxuICAgICAqL1xyXG4gICAgZW1pdHRlcjtcclxuICAgICNsaXN0ZW5lcjtcclxuICAgIC8qKlxyXG4gICAgICogIENyZWF0ZSBhIG5ldyAqKkV2ZW50UGF5bG9hZCoqIGZvciAlJWVtaXR0ZXIlJSB3aXRoXHJcbiAgICAgKiAgdGhlICUlbGlzdGVuZXIlJSBhbmQgZm9yICUlZmlsdGVyJSUuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKGVtaXR0ZXIsIGxpc3RlbmVyLCBmaWx0ZXIpIHtcclxuICAgICAgICB0aGlzLiNsaXN0ZW5lciA9IGxpc3RlbmVyO1xyXG4gICAgICAgIGRlZmluZVByb3BlcnRpZXModGhpcywgeyBlbWl0dGVyLCBmaWx0ZXIgfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqICBVbnJlZ2lzdGVyIHRoZSB0cmlnZ2VyZWQgbGlzdGVuZXIgZm9yIGZ1dHVyZSBldmVudHMuXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIHJlbW92ZUxpc3RlbmVyKCkge1xyXG4gICAgICAgIGlmICh0aGlzLiNsaXN0ZW5lciA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgYXdhaXQgdGhpcy5lbWl0dGVyLm9mZih0aGlzLmZpbHRlciwgdGhpcy4jbGlzdGVuZXIpO1xyXG4gICAgfVxyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV2ZW50cy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/events.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/fetch.js":
/*!****************************************************!*\
  !*** ./node_modules/ethers/lib.esm/utils/fetch.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FetchCancelSignal: () => (/* binding */ FetchCancelSignal),\n/* harmony export */   FetchRequest: () => (/* binding */ FetchRequest),\n/* harmony export */   FetchResponse: () => (/* binding */ FetchResponse)\n/* harmony export */ });\n/* harmony import */ var _base64_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base64.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/base64-browser.js\");\n/* harmony import */ var _data_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./data.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/data.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./errors.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _properties_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./properties.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/properties.js\");\n/* harmony import */ var _utf8_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utf8.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/utf8.js\");\n/* harmony import */ var _geturl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./geturl.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/geturl-browser.js\");\n/**\r\n *  Fetching content from the web is environment-specific, so Ethers\r\n *  provides an abstraction that each environment can implement to provide\r\n *  this service.\r\n *\r\n *  On [Node.js](link-node), the ``http`` and ``https`` libs are used to\r\n *  create a request object, register event listeners and process data\r\n *  and populate the [[FetchResponse]].\r\n *\r\n *  In a browser, the [DOM fetch](link-js-fetch) is used, and the resulting\r\n *  ``Promise`` is waited on to retrieve the payload.\r\n *\r\n *  The [[FetchRequest]] is responsible for handling many common situations,\r\n *  such as redirects, server throttling, authentication, etc.\r\n *\r\n *  It also handles common gateways, such as IPFS and data URIs.\r\n *\r\n *  @_section api/utils/fetching:Fetching Web Content  [about-fetch]\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst MAX_ATTEMPTS = 12;\r\nconst SLOT_INTERVAL = 250;\r\n// The global FetchGetUrlFunc implementation.\r\nlet defaultGetUrlFunc = (0,_geturl_js__WEBPACK_IMPORTED_MODULE_0__.createGetUrl)();\r\nconst reData = new RegExp(\"^data:([^;:]*)?(;base64)?,(.*)$\", \"i\");\r\nconst reIpfs = new RegExp(\"^ipfs:/\\/(ipfs/)?(.*)$\", \"i\");\r\n// If locked, new Gateways cannot be added\r\nlet locked = false;\r\n// https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URLs\r\nasync function dataGatewayFunc(url, signal) {\r\n    try {\r\n        const match = url.match(reData);\r\n        if (!match) {\r\n            throw new Error(\"invalid data\");\r\n        }\r\n        return new FetchResponse(200, \"OK\", {\r\n            \"content-type\": (match[1] || \"text/plain\"),\r\n        }, (match[2] ? (0,_base64_js__WEBPACK_IMPORTED_MODULE_1__.decodeBase64)(match[3]) : unpercent(match[3])));\r\n    }\r\n    catch (error) {\r\n        return new FetchResponse(599, \"BAD REQUEST (invalid data: URI)\", {}, null, new FetchRequest(url));\r\n    }\r\n}\r\n/**\r\n *  Returns a [[FetchGatewayFunc]] for fetching content from a standard\r\n *  IPFS gateway hosted at %%baseUrl%%.\r\n */\r\nfunction getIpfsGatewayFunc(baseUrl) {\r\n    async function gatewayIpfs(url, signal) {\r\n        try {\r\n            const match = url.match(reIpfs);\r\n            if (!match) {\r\n                throw new Error(\"invalid link\");\r\n            }\r\n            return new FetchRequest(`${baseUrl}${match[2]}`);\r\n        }\r\n        catch (error) {\r\n            return new FetchResponse(599, \"BAD REQUEST (invalid IPFS URI)\", {}, null, new FetchRequest(url));\r\n        }\r\n    }\r\n    return gatewayIpfs;\r\n}\r\nconst Gateways = {\r\n    \"data\": dataGatewayFunc,\r\n    \"ipfs\": getIpfsGatewayFunc(\"https:/\\/gateway.ipfs.io/ipfs/\")\r\n};\r\nconst fetchSignals = new WeakMap();\r\n/**\r\n *  @_ignore\r\n */\r\nclass FetchCancelSignal {\r\n    #listeners;\r\n    #cancelled;\r\n    constructor(request) {\r\n        this.#listeners = [];\r\n        this.#cancelled = false;\r\n        fetchSignals.set(request, () => {\r\n            if (this.#cancelled) {\r\n                return;\r\n            }\r\n            this.#cancelled = true;\r\n            for (const listener of this.#listeners) {\r\n                setTimeout(() => { listener(); }, 0);\r\n            }\r\n            this.#listeners = [];\r\n        });\r\n    }\r\n    addListener(listener) {\r\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_2__.assert)(!this.#cancelled, \"singal already cancelled\", \"UNSUPPORTED_OPERATION\", {\r\n            operation: \"fetchCancelSignal.addCancelListener\"\r\n        });\r\n        this.#listeners.push(listener);\r\n    }\r\n    get cancelled() { return this.#cancelled; }\r\n    checkSignal() {\r\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_2__.assert)(!this.cancelled, \"cancelled\", \"CANCELLED\", {});\r\n    }\r\n}\r\n// Check the signal, throwing if it is cancelled\r\nfunction checkSignal(signal) {\r\n    if (signal == null) {\r\n        throw new Error(\"missing signal; should not happen\");\r\n    }\r\n    signal.checkSignal();\r\n    return signal;\r\n}\r\n/**\r\n *  Represents a request for a resource using a URI.\r\n *\r\n *  By default, the supported schemes are ``HTTP``, ``HTTPS``, ``data:``,\r\n *  and ``IPFS:``.\r\n *\r\n *  Additional schemes can be added globally using [[registerGateway]].\r\n *\r\n *  @example:\r\n *    req = new FetchRequest(\"https://www.ricmoo.com\")\r\n *    resp = await req.send()\r\n *    resp.body.length\r\n *    //_result:\r\n */\r\nclass FetchRequest {\r\n    #allowInsecure;\r\n    #gzip;\r\n    #headers;\r\n    #method;\r\n    #timeout;\r\n    #url;\r\n    #body;\r\n    #bodyType;\r\n    #creds;\r\n    // Hooks\r\n    #preflight;\r\n    #process;\r\n    #retry;\r\n    #signal;\r\n    #throttle;\r\n    #getUrlFunc;\r\n    /**\r\n     *  The fetch URL to request.\r\n     */\r\n    get url() { return this.#url; }\r\n    set url(url) {\r\n        this.#url = String(url);\r\n    }\r\n    /**\r\n     *  The fetch body, if any, to send as the request body. //(default: null)//\r\n     *\r\n     *  When setting a body, the intrinsic ``Content-Type`` is automatically\r\n     *  set and will be used if **not overridden** by setting a custom\r\n     *  header.\r\n     *\r\n     *  If %%body%% is null, the body is cleared (along with the\r\n     *  intrinsic ``Content-Type``).\r\n     *\r\n     *  If %%body%% is a string, the intrinsic ``Content-Type`` is set to\r\n     *  ``text/plain``.\r\n     *\r\n     *  If %%body%% is a Uint8Array, the intrinsic ``Content-Type`` is set to\r\n     *  ``application/octet-stream``.\r\n     *\r\n     *  If %%body%% is any other object, the intrinsic ``Content-Type`` is\r\n     *  set to ``application/json``.\r\n     */\r\n    get body() {\r\n        if (this.#body == null) {\r\n            return null;\r\n        }\r\n        return new Uint8Array(this.#body);\r\n    }\r\n    set body(body) {\r\n        if (body == null) {\r\n            this.#body = undefined;\r\n            this.#bodyType = undefined;\r\n        }\r\n        else if (typeof (body) === \"string\") {\r\n            this.#body = (0,_utf8_js__WEBPACK_IMPORTED_MODULE_3__.toUtf8Bytes)(body);\r\n            this.#bodyType = \"text/plain\";\r\n        }\r\n        else if (body instanceof Uint8Array) {\r\n            this.#body = body;\r\n            this.#bodyType = \"application/octet-stream\";\r\n        }\r\n        else if (typeof (body) === \"object\") {\r\n            this.#body = (0,_utf8_js__WEBPACK_IMPORTED_MODULE_3__.toUtf8Bytes)(JSON.stringify(body));\r\n            this.#bodyType = \"application/json\";\r\n        }\r\n        else {\r\n            throw new Error(\"invalid body\");\r\n        }\r\n    }\r\n    /**\r\n     *  Returns true if the request has a body.\r\n     */\r\n    hasBody() {\r\n        return (this.#body != null);\r\n    }\r\n    /**\r\n     *  The HTTP method to use when requesting the URI. If no method\r\n     *  has been explicitly set, then ``GET`` is used if the body is\r\n     *  null and ``POST`` otherwise.\r\n     */\r\n    get method() {\r\n        if (this.#method) {\r\n            return this.#method;\r\n        }\r\n        if (this.hasBody()) {\r\n            return \"POST\";\r\n        }\r\n        return \"GET\";\r\n    }\r\n    set method(method) {\r\n        if (method == null) {\r\n            method = \"\";\r\n        }\r\n        this.#method = String(method).toUpperCase();\r\n    }\r\n    /**\r\n     *  The headers that will be used when requesting the URI. All\r\n     *  keys are lower-case.\r\n     *\r\n     *  This object is a copy, so any changes will **NOT** be reflected\r\n     *  in the ``FetchRequest``.\r\n     *\r\n     *  To set a header entry, use the ``setHeader`` method.\r\n     */\r\n    get headers() {\r\n        const headers = Object.assign({}, this.#headers);\r\n        if (this.#creds) {\r\n            headers[\"authorization\"] = `Basic ${(0,_base64_js__WEBPACK_IMPORTED_MODULE_1__.encodeBase64)((0,_utf8_js__WEBPACK_IMPORTED_MODULE_3__.toUtf8Bytes)(this.#creds))}`;\r\n        }\r\n        ;\r\n        if (this.allowGzip) {\r\n            headers[\"accept-encoding\"] = \"gzip\";\r\n        }\r\n        if (headers[\"content-type\"] == null && this.#bodyType) {\r\n            headers[\"content-type\"] = this.#bodyType;\r\n        }\r\n        if (this.body) {\r\n            headers[\"content-length\"] = String(this.body.length);\r\n        }\r\n        return headers;\r\n    }\r\n    /**\r\n     *  Get the header for %%key%%, ignoring case.\r\n     */\r\n    getHeader(key) {\r\n        return this.headers[key.toLowerCase()];\r\n    }\r\n    /**\r\n     *  Set the header for %%key%% to %%value%%. All values are coerced\r\n     *  to a string.\r\n     */\r\n    setHeader(key, value) {\r\n        this.#headers[String(key).toLowerCase()] = String(value);\r\n    }\r\n    /**\r\n     *  Clear all headers, resetting all intrinsic headers.\r\n     */\r\n    clearHeaders() {\r\n        this.#headers = {};\r\n    }\r\n    [Symbol.iterator]() {\r\n        const headers = this.headers;\r\n        const keys = Object.keys(headers);\r\n        let index = 0;\r\n        return {\r\n            next: () => {\r\n                if (index < keys.length) {\r\n                    const key = keys[index++];\r\n                    return {\r\n                        value: [key, headers[key]], done: false\r\n                    };\r\n                }\r\n                return { value: undefined, done: true };\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     *  The value that will be sent for the ``Authorization`` header.\r\n     *\r\n     *  To set the credentials, use the ``setCredentials`` method.\r\n     */\r\n    get credentials() {\r\n        return this.#creds || null;\r\n    }\r\n    /**\r\n     *  Sets an ``Authorization`` for %%username%% with %%password%%.\r\n     */\r\n    setCredentials(username, password) {\r\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(!username.match(/:/), \"invalid basic authentication username\", \"username\", \"[REDACTED]\");\r\n        this.#creds = `${username}:${password}`;\r\n    }\r\n    /**\r\n     *  Enable and request gzip-encoded responses. The response will\r\n     *  automatically be decompressed. //(default: true)//\r\n     */\r\n    get allowGzip() {\r\n        return this.#gzip;\r\n    }\r\n    set allowGzip(value) {\r\n        this.#gzip = !!value;\r\n    }\r\n    /**\r\n     *  Allow ``Authentication`` credentials to be sent over insecure\r\n     *  channels. //(default: false)//\r\n     */\r\n    get allowInsecureAuthentication() {\r\n        return !!this.#allowInsecure;\r\n    }\r\n    set allowInsecureAuthentication(value) {\r\n        this.#allowInsecure = !!value;\r\n    }\r\n    /**\r\n     *  The timeout (in milliseconds) to wait for a complete response.\r\n     *  //(default: 5 minutes)//\r\n     */\r\n    get timeout() { return this.#timeout; }\r\n    set timeout(timeout) {\r\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(timeout >= 0, \"timeout must be non-zero\", \"timeout\", timeout);\r\n        this.#timeout = timeout;\r\n    }\r\n    /**\r\n     *  This function is called prior to each request, for example\r\n     *  during a redirection or retry in case of server throttling.\r\n     *\r\n     *  This offers an opportunity to populate headers or update\r\n     *  content before sending a request.\r\n     */\r\n    get preflightFunc() {\r\n        return this.#preflight || null;\r\n    }\r\n    set preflightFunc(preflight) {\r\n        this.#preflight = preflight;\r\n    }\r\n    /**\r\n     *  This function is called after each response, offering an\r\n     *  opportunity to provide client-level throttling or updating\r\n     *  response data.\r\n     *\r\n     *  Any error thrown in this causes the ``send()`` to throw.\r\n     *\r\n     *  To schedule a retry attempt (assuming the maximum retry limit\r\n     *  has not been reached), use [[response.throwThrottleError]].\r\n     */\r\n    get processFunc() {\r\n        return this.#process || null;\r\n    }\r\n    set processFunc(process) {\r\n        this.#process = process;\r\n    }\r\n    /**\r\n     *  This function is called on each retry attempt.\r\n     */\r\n    get retryFunc() {\r\n        return this.#retry || null;\r\n    }\r\n    set retryFunc(retry) {\r\n        this.#retry = retry;\r\n    }\r\n    /**\r\n     *  This function is called to fetch content from HTTP and\r\n     *  HTTPS URLs and is platform specific (e.g. nodejs vs\r\n     *  browsers).\r\n     *\r\n     *  This is by default the currently registered global getUrl\r\n     *  function, which can be changed using [[registerGetUrl]].\r\n     *  If this has been set, setting is to ``null`` will cause\r\n     *  this FetchRequest (and any future clones) to revert back to\r\n     *  using the currently registered global getUrl function.\r\n     *\r\n     *  Setting this is generally not necessary, but may be useful\r\n     *  for developers that wish to intercept requests or to\r\n     *  configurege a proxy or other agent.\r\n     */\r\n    get getUrlFunc() {\r\n        return this.#getUrlFunc || defaultGetUrlFunc;\r\n    }\r\n    set getUrlFunc(value) {\r\n        this.#getUrlFunc = value;\r\n    }\r\n    /**\r\n     *  Create a new FetchRequest instance with default values.\r\n     *\r\n     *  Once created, each property may be set before issuing a\r\n     *  ``.send()`` to make the request.\r\n     */\r\n    constructor(url) {\r\n        this.#url = String(url);\r\n        this.#allowInsecure = false;\r\n        this.#gzip = true;\r\n        this.#headers = {};\r\n        this.#method = \"\";\r\n        this.#timeout = 300000;\r\n        this.#throttle = {\r\n            slotInterval: SLOT_INTERVAL,\r\n            maxAttempts: MAX_ATTEMPTS\r\n        };\r\n        this.#getUrlFunc = null;\r\n    }\r\n    toString() {\r\n        return `<FetchRequest method=${JSON.stringify(this.method)} url=${JSON.stringify(this.url)} headers=${JSON.stringify(this.headers)} body=${this.#body ? (0,_data_js__WEBPACK_IMPORTED_MODULE_4__.hexlify)(this.#body) : \"null\"}>`;\r\n    }\r\n    /**\r\n     *  Update the throttle parameters used to determine maximum\r\n     *  attempts and exponential-backoff properties.\r\n     */\r\n    setThrottleParams(params) {\r\n        if (params.slotInterval != null) {\r\n            this.#throttle.slotInterval = params.slotInterval;\r\n        }\r\n        if (params.maxAttempts != null) {\r\n            this.#throttle.maxAttempts = params.maxAttempts;\r\n        }\r\n    }\r\n    async #send(attempt, expires, delay, _request, _response) {\r\n        if (attempt >= this.#throttle.maxAttempts) {\r\n            return _response.makeServerError(\"exceeded maximum retry limit\");\r\n        }\r\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_2__.assert)(getTime() <= expires, \"timeout\", \"TIMEOUT\", {\r\n            operation: \"request.send\", reason: \"timeout\", request: _request\r\n        });\r\n        if (delay > 0) {\r\n            await wait(delay);\r\n        }\r\n        let req = this.clone();\r\n        const scheme = (req.url.split(\":\")[0] || \"\").toLowerCase();\r\n        // Process any Gateways\r\n        if (scheme in Gateways) {\r\n            const result = await Gateways[scheme](req.url, checkSignal(_request.#signal));\r\n            if (result instanceof FetchResponse) {\r\n                let response = result;\r\n                if (this.processFunc) {\r\n                    checkSignal(_request.#signal);\r\n                    try {\r\n                        response = await this.processFunc(req, response);\r\n                    }\r\n                    catch (error) {\r\n                        // Something went wrong during processing; throw a 5xx server error\r\n                        if (error.throttle == null || typeof (error.stall) !== \"number\") {\r\n                            response.makeServerError(\"error in post-processing function\", error).assertOk();\r\n                        }\r\n                        // Ignore throttling\r\n                    }\r\n                }\r\n                return response;\r\n            }\r\n            req = result;\r\n        }\r\n        // We have a preflight function; update the request\r\n        if (this.preflightFunc) {\r\n            req = await this.preflightFunc(req);\r\n        }\r\n        const resp = await this.getUrlFunc(req, checkSignal(_request.#signal));\r\n        let response = new FetchResponse(resp.statusCode, resp.statusMessage, resp.headers, resp.body, _request);\r\n        if (response.statusCode === 301 || response.statusCode === 302) {\r\n            // Redirect\r\n            try {\r\n                const location = response.headers.location || \"\";\r\n                return req.redirect(location).#send(attempt + 1, expires, 0, _request, response);\r\n            }\r\n            catch (error) { }\r\n            // Things won't get any better on another attempt; abort\r\n            return response;\r\n        }\r\n        else if (response.statusCode === 429) {\r\n            // Throttle\r\n            if (this.retryFunc == null || (await this.retryFunc(req, response, attempt))) {\r\n                const retryAfter = response.headers[\"retry-after\"];\r\n                let delay = this.#throttle.slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));\r\n                if (typeof (retryAfter) === \"string\" && retryAfter.match(/^[1-9][0-9]*$/)) {\r\n                    delay = parseInt(retryAfter);\r\n                }\r\n                return req.clone().#send(attempt + 1, expires, delay, _request, response);\r\n            }\r\n        }\r\n        if (this.processFunc) {\r\n            checkSignal(_request.#signal);\r\n            try {\r\n                response = await this.processFunc(req, response);\r\n            }\r\n            catch (error) {\r\n                // Something went wrong during processing; throw a 5xx server error\r\n                if (error.throttle == null || typeof (error.stall) !== \"number\") {\r\n                    response.makeServerError(\"error in post-processing function\", error).assertOk();\r\n                }\r\n                // Throttle\r\n                let delay = this.#throttle.slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));\r\n                ;\r\n                if (error.stall >= 0) {\r\n                    delay = error.stall;\r\n                }\r\n                return req.clone().#send(attempt + 1, expires, delay, _request, response);\r\n            }\r\n        }\r\n        return response;\r\n    }\r\n    /**\r\n     *  Resolves to the response by sending the request.\r\n     */\r\n    send() {\r\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_2__.assert)(this.#signal == null, \"request already sent\", \"UNSUPPORTED_OPERATION\", { operation: \"fetchRequest.send\" });\r\n        this.#signal = new FetchCancelSignal(this);\r\n        return this.#send(0, getTime() + this.timeout, 0, this, new FetchResponse(0, \"\", {}, null, this));\r\n    }\r\n    /**\r\n     *  Cancels the inflight response, causing a ``CANCELLED``\r\n     *  error to be rejected from the [[send]].\r\n     */\r\n    cancel() {\r\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_2__.assert)(this.#signal != null, \"request has not been sent\", \"UNSUPPORTED_OPERATION\", { operation: \"fetchRequest.cancel\" });\r\n        const signal = fetchSignals.get(this);\r\n        if (!signal) {\r\n            throw new Error(\"missing signal; should not happen\");\r\n        }\r\n        signal();\r\n    }\r\n    /**\r\n     *  Returns a new [[FetchRequest]] that represents the redirection\r\n     *  to %%location%%.\r\n     */\r\n    redirect(location) {\r\n        // Redirection; for now we only support absolute locations\r\n        const current = this.url.split(\":\")[0].toLowerCase();\r\n        const target = location.split(\":\")[0].toLowerCase();\r\n        // Don't allow redirecting:\r\n        // - non-GET requests\r\n        // - downgrading the security (e.g. https => http)\r\n        // - to non-HTTP (or non-HTTPS) protocols [this could be relaxed?]\r\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_2__.assert)(this.method === \"GET\" && (current !== \"https\" || target !== \"http\") && location.match(/^https?:/), `unsupported redirect`, \"UNSUPPORTED_OPERATION\", {\r\n            operation: `redirect(${this.method} ${JSON.stringify(this.url)} => ${JSON.stringify(location)})`\r\n        });\r\n        // Create a copy of this request, with a new URL\r\n        const req = new FetchRequest(location);\r\n        req.method = \"GET\";\r\n        req.allowGzip = this.allowGzip;\r\n        req.timeout = this.timeout;\r\n        req.#headers = Object.assign({}, this.#headers);\r\n        if (this.#body) {\r\n            req.#body = new Uint8Array(this.#body);\r\n        }\r\n        req.#bodyType = this.#bodyType;\r\n        // Do not forward credentials unless on the same domain; only absolute\r\n        //req.allowInsecure = false;\r\n        // paths are currently supported; may want a way to specify to forward?\r\n        //setStore(req.#props, \"creds\", getStore(this.#pros, \"creds\"));\r\n        return req;\r\n    }\r\n    /**\r\n     *  Create a new copy of this request.\r\n     */\r\n    clone() {\r\n        const clone = new FetchRequest(this.url);\r\n        // Preserve \"default method\" (i.e. null)\r\n        clone.#method = this.#method;\r\n        // Preserve \"default body\" with type, copying the Uint8Array is present\r\n        if (this.#body) {\r\n            clone.#body = this.#body;\r\n        }\r\n        clone.#bodyType = this.#bodyType;\r\n        // Preserve \"default headers\"\r\n        clone.#headers = Object.assign({}, this.#headers);\r\n        // Credentials is readonly, so we copy internally\r\n        clone.#creds = this.#creds;\r\n        if (this.allowGzip) {\r\n            clone.allowGzip = true;\r\n        }\r\n        clone.timeout = this.timeout;\r\n        if (this.allowInsecureAuthentication) {\r\n            clone.allowInsecureAuthentication = true;\r\n        }\r\n        clone.#preflight = this.#preflight;\r\n        clone.#process = this.#process;\r\n        clone.#retry = this.#retry;\r\n        clone.#throttle = Object.assign({}, this.#throttle);\r\n        clone.#getUrlFunc = this.#getUrlFunc;\r\n        return clone;\r\n    }\r\n    /**\r\n     *  Locks all static configuration for gateways and FetchGetUrlFunc\r\n     *  registration.\r\n     */\r\n    static lockConfig() {\r\n        locked = true;\r\n    }\r\n    /**\r\n     *  Get the current Gateway function for %%scheme%%.\r\n     */\r\n    static getGateway(scheme) {\r\n        return Gateways[scheme.toLowerCase()] || null;\r\n    }\r\n    /**\r\n     *  Use the %%func%% when fetching URIs using %%scheme%%.\r\n     *\r\n     *  This method affects all requests globally.\r\n     *\r\n     *  If [[lockConfig]] has been called, no change is made and this\r\n     *  throws.\r\n     */\r\n    static registerGateway(scheme, func) {\r\n        scheme = scheme.toLowerCase();\r\n        if (scheme === \"http\" || scheme === \"https\") {\r\n            throw new Error(`cannot intercept ${scheme}; use registerGetUrl`);\r\n        }\r\n        if (locked) {\r\n            throw new Error(\"gateways locked\");\r\n        }\r\n        Gateways[scheme] = func;\r\n    }\r\n    /**\r\n     *  Use %%getUrl%% when fetching URIs over HTTP and HTTPS requests.\r\n     *\r\n     *  This method affects all requests globally.\r\n     *\r\n     *  If [[lockConfig]] has been called, no change is made and this\r\n     *  throws.\r\n     */\r\n    static registerGetUrl(getUrl) {\r\n        if (locked) {\r\n            throw new Error(\"gateways locked\");\r\n        }\r\n        defaultGetUrlFunc = getUrl;\r\n    }\r\n    /**\r\n     *  Creates a getUrl function that fetches content from HTTP and\r\n     *  HTTPS URLs.\r\n     *\r\n     *  The available %%options%% are dependent on the platform\r\n     *  implementation of the default getUrl function.\r\n     *\r\n     *  This is not generally something that is needed, but is useful\r\n     *  when trying to customize simple behaviour when fetching HTTP\r\n     *  content.\r\n     */\r\n    static createGetUrlFunc(options) {\r\n        return (0,_geturl_js__WEBPACK_IMPORTED_MODULE_0__.createGetUrl)(options);\r\n    }\r\n    /**\r\n     *  Creates a function that can \"fetch\" data URIs.\r\n     *\r\n     *  Note that this is automatically done internally to support\r\n     *  data URIs, so it is not necessary to register it.\r\n     *\r\n     *  This is not generally something that is needed, but may\r\n     *  be useful in a wrapper to perfom custom data URI functionality.\r\n     */\r\n    static createDataGateway() {\r\n        return dataGatewayFunc;\r\n    }\r\n    /**\r\n     *  Creates a function that will fetch IPFS (unvalidated) from\r\n     *  a custom gateway baseUrl.\r\n     *\r\n     *  The default IPFS gateway used internally is\r\n     *  ``\"https:/\\/gateway.ipfs.io/ipfs/\"``.\r\n     */\r\n    static createIpfsGatewayFunc(baseUrl) {\r\n        return getIpfsGatewayFunc(baseUrl);\r\n    }\r\n}\r\n;\r\n/**\r\n *  The response for a FetchRequest.\r\n */\r\nclass FetchResponse {\r\n    #statusCode;\r\n    #statusMessage;\r\n    #headers;\r\n    #body;\r\n    #request;\r\n    #error;\r\n    toString() {\r\n        return `<FetchResponse status=${this.statusCode} body=${this.#body ? (0,_data_js__WEBPACK_IMPORTED_MODULE_4__.hexlify)(this.#body) : \"null\"}>`;\r\n    }\r\n    /**\r\n     *  The response status code.\r\n     */\r\n    get statusCode() { return this.#statusCode; }\r\n    /**\r\n     *  The response status message.\r\n     */\r\n    get statusMessage() { return this.#statusMessage; }\r\n    /**\r\n     *  The response headers. All keys are lower-case.\r\n     */\r\n    get headers() { return Object.assign({}, this.#headers); }\r\n    /**\r\n     *  The response body, or ``null`` if there was no body.\r\n     */\r\n    get body() {\r\n        return (this.#body == null) ? null : new Uint8Array(this.#body);\r\n    }\r\n    /**\r\n     *  The response body as a UTF-8 encoded string, or the empty\r\n     *  string (i.e. ``\"\"``) if there was no body.\r\n     *\r\n     *  An error is thrown if the body is invalid UTF-8 data.\r\n     */\r\n    get bodyText() {\r\n        try {\r\n            return (this.#body == null) ? \"\" : (0,_utf8_js__WEBPACK_IMPORTED_MODULE_3__.toUtf8String)(this.#body);\r\n        }\r\n        catch (error) {\r\n            (0,_errors_js__WEBPACK_IMPORTED_MODULE_2__.assert)(false, \"response body is not valid UTF-8 data\", \"UNSUPPORTED_OPERATION\", {\r\n                operation: \"bodyText\", info: { response: this }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     *  The response body, decoded as JSON.\r\n     *\r\n     *  An error is thrown if the body is invalid JSON-encoded data\r\n     *  or if there was no body.\r\n     */\r\n    get bodyJson() {\r\n        try {\r\n            return JSON.parse(this.bodyText);\r\n        }\r\n        catch (error) {\r\n            (0,_errors_js__WEBPACK_IMPORTED_MODULE_2__.assert)(false, \"response body is not valid JSON\", \"UNSUPPORTED_OPERATION\", {\r\n                operation: \"bodyJson\", info: { response: this }\r\n            });\r\n        }\r\n    }\r\n    [Symbol.iterator]() {\r\n        const headers = this.headers;\r\n        const keys = Object.keys(headers);\r\n        let index = 0;\r\n        return {\r\n            next: () => {\r\n                if (index < keys.length) {\r\n                    const key = keys[index++];\r\n                    return {\r\n                        value: [key, headers[key]], done: false\r\n                    };\r\n                }\r\n                return { value: undefined, done: true };\r\n            }\r\n        };\r\n    }\r\n    constructor(statusCode, statusMessage, headers, body, request) {\r\n        this.#statusCode = statusCode;\r\n        this.#statusMessage = statusMessage;\r\n        this.#headers = Object.keys(headers).reduce((accum, k) => {\r\n            accum[k.toLowerCase()] = String(headers[k]);\r\n            return accum;\r\n        }, {});\r\n        this.#body = ((body == null) ? null : new Uint8Array(body));\r\n        this.#request = (request || null);\r\n        this.#error = { message: \"\" };\r\n    }\r\n    /**\r\n     *  Return a Response with matching headers and body, but with\r\n     *  an error status code (i.e. 599) and %%message%% with an\r\n     *  optional %%error%%.\r\n     */\r\n    makeServerError(message, error) {\r\n        let statusMessage;\r\n        if (!message) {\r\n            message = `${this.statusCode} ${this.statusMessage}`;\r\n            statusMessage = `CLIENT ESCALATED SERVER ERROR (${message})`;\r\n        }\r\n        else {\r\n            statusMessage = `CLIENT ESCALATED SERVER ERROR (${this.statusCode} ${this.statusMessage}; ${message})`;\r\n        }\r\n        const response = new FetchResponse(599, statusMessage, this.headers, this.body, this.#request || undefined);\r\n        response.#error = { message, error };\r\n        return response;\r\n    }\r\n    /**\r\n     *  If called within a [request.processFunc](FetchRequest-processFunc)\r\n     *  call, causes the request to retry as if throttled for %%stall%%\r\n     *  milliseconds.\r\n     */\r\n    throwThrottleError(message, stall) {\r\n        if (stall == null) {\r\n            stall = -1;\r\n        }\r\n        else {\r\n            (0,_errors_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(Number.isInteger(stall) && stall >= 0, \"invalid stall timeout\", \"stall\", stall);\r\n        }\r\n        const error = new Error(message || \"throttling requests\");\r\n        (0,_properties_js__WEBPACK_IMPORTED_MODULE_5__.defineProperties)(error, { stall, throttle: true });\r\n        throw error;\r\n    }\r\n    /**\r\n     *  Get the header value for %%key%%, ignoring case.\r\n     */\r\n    getHeader(key) {\r\n        return this.headers[key.toLowerCase()];\r\n    }\r\n    /**\r\n     *  Returns true if the response has a body.\r\n     */\r\n    hasBody() {\r\n        return (this.#body != null);\r\n    }\r\n    /**\r\n     *  The request made for this response.\r\n     */\r\n    get request() { return this.#request; }\r\n    /**\r\n     *  Returns true if this response was a success statusCode.\r\n     */\r\n    ok() {\r\n        return (this.#error.message === \"\" && this.statusCode >= 200 && this.statusCode < 300);\r\n    }\r\n    /**\r\n     *  Throws a ``SERVER_ERROR`` if this response is not ok.\r\n     */\r\n    assertOk() {\r\n        if (this.ok()) {\r\n            return;\r\n        }\r\n        let { message, error } = this.#error;\r\n        if (message === \"\") {\r\n            message = `server response ${this.statusCode} ${this.statusMessage}`;\r\n        }\r\n        let requestUrl = null;\r\n        if (this.request) {\r\n            requestUrl = this.request.url;\r\n        }\r\n        let responseBody = null;\r\n        try {\r\n            if (this.#body) {\r\n                responseBody = (0,_utf8_js__WEBPACK_IMPORTED_MODULE_3__.toUtf8String)(this.#body);\r\n            }\r\n        }\r\n        catch (e) { }\r\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_2__.assert)(false, message, \"SERVER_ERROR\", {\r\n            request: (this.request || \"unknown request\"), response: this, error,\r\n            info: {\r\n                requestUrl, responseBody,\r\n                responseStatus: `${this.statusCode} ${this.statusMessage}`\r\n            }\r\n        });\r\n    }\r\n}\r\nfunction getTime() { return (new Date()).getTime(); }\r\nfunction unpercent(value) {\r\n    return (0,_utf8_js__WEBPACK_IMPORTED_MODULE_3__.toUtf8Bytes)(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code) => {\r\n        return String.fromCharCode(parseInt(code, 16));\r\n    }));\r\n}\r\nfunction wait(delay) {\r\n    return new Promise((resolve) => setTimeout(resolve, delay));\r\n}\r\n//# sourceMappingURL=fetch.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/fetch.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/fixednumber.js":
/*!**********************************************************!*\
  !*** ./node_modules/ethers/lib.esm/utils/fixednumber.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FixedNumber: () => (/* binding */ FixedNumber)\n/* harmony export */ });\n/* harmony import */ var _data_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./data.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/data.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _maths_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./maths.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/maths.js\");\n/* harmony import */ var _properties_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./properties.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/properties.js\");\n/**\r\n *  The **FixedNumber** class permits using values with decimal places,\r\n *  using fixed-pont math.\r\n *\r\n *  Fixed-point math is still based on integers under-the-hood, but uses an\r\n *  internal offset to store fractional components below, and each operation\r\n *  corrects for this after each operation.\r\n *\r\n *  @_section: api/utils/fixed-point-math:Fixed-Point Maths  [about-fixed-point-math]\r\n */\r\n\r\n\r\n\r\n\r\nconst BN_N1 = BigInt(-1);\r\nconst BN_0 = BigInt(0);\r\nconst BN_1 = BigInt(1);\r\nconst BN_5 = BigInt(5);\r\nconst _guard = {};\r\n// Constant to pull zeros from for multipliers\r\nlet Zeros = \"0000\";\r\nwhile (Zeros.length < 80) {\r\n    Zeros += Zeros;\r\n}\r\n// Returns a string \"1\" followed by decimal \"0\"s\r\nfunction getTens(decimals) {\r\n    let result = Zeros;\r\n    while (result.length < decimals) {\r\n        result += result;\r\n    }\r\n    return BigInt(\"1\" + result.substring(0, decimals));\r\n}\r\nfunction checkValue(val, format, safeOp) {\r\n    const width = BigInt(format.width);\r\n    if (format.signed) {\r\n        const limit = (BN_1 << (width - BN_1));\r\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assert)(safeOp == null || (val >= -limit && val < limit), \"overflow\", \"NUMERIC_FAULT\", {\r\n            operation: safeOp, fault: \"overflow\", value: val\r\n        });\r\n        if (val > BN_0) {\r\n            val = (0,_maths_js__WEBPACK_IMPORTED_MODULE_1__.fromTwos)((0,_maths_js__WEBPACK_IMPORTED_MODULE_1__.mask)(val, width), width);\r\n        }\r\n        else {\r\n            val = -(0,_maths_js__WEBPACK_IMPORTED_MODULE_1__.fromTwos)((0,_maths_js__WEBPACK_IMPORTED_MODULE_1__.mask)(-val, width), width);\r\n        }\r\n    }\r\n    else {\r\n        const limit = (BN_1 << width);\r\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assert)(safeOp == null || (val >= 0 && val < limit), \"overflow\", \"NUMERIC_FAULT\", {\r\n            operation: safeOp, fault: \"overflow\", value: val\r\n        });\r\n        val = (((val % limit) + limit) % limit) & (limit - BN_1);\r\n    }\r\n    return val;\r\n}\r\nfunction getFormat(value) {\r\n    if (typeof (value) === \"number\") {\r\n        value = `fixed128x${value}`;\r\n    }\r\n    let signed = true;\r\n    let width = 128;\r\n    let decimals = 18;\r\n    if (typeof (value) === \"string\") {\r\n        // Parse the format string\r\n        if (value === \"fixed\") {\r\n            // defaults...\r\n        }\r\n        else if (value === \"ufixed\") {\r\n            signed = false;\r\n        }\r\n        else {\r\n            const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);\r\n            (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(match, \"invalid fixed format\", \"format\", value);\r\n            signed = (match[1] !== \"u\");\r\n            width = parseInt(match[2]);\r\n            decimals = parseInt(match[3]);\r\n        }\r\n    }\r\n    else if (value) {\r\n        // Extract the values from the object\r\n        const v = value;\r\n        const check = (key, type, defaultValue) => {\r\n            if (v[key] == null) {\r\n                return defaultValue;\r\n            }\r\n            (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(typeof (v[key]) === type, \"invalid fixed format (\" + key + \" not \" + type + \")\", \"format.\" + key, v[key]);\r\n            return v[key];\r\n        };\r\n        signed = check(\"signed\", \"boolean\", signed);\r\n        width = check(\"width\", \"number\", width);\r\n        decimals = check(\"decimals\", \"number\", decimals);\r\n    }\r\n    (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)((width % 8) === 0, \"invalid FixedNumber width (not byte aligned)\", \"format.width\", width);\r\n    (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(decimals <= 80, \"invalid FixedNumber decimals (too large)\", \"format.decimals\", decimals);\r\n    const name = (signed ? \"\" : \"u\") + \"fixed\" + String(width) + \"x\" + String(decimals);\r\n    return { signed, width, decimals, name };\r\n}\r\nfunction toString(val, decimals) {\r\n    let negative = \"\";\r\n    if (val < BN_0) {\r\n        negative = \"-\";\r\n        val *= BN_N1;\r\n    }\r\n    let str = val.toString();\r\n    // No decimal point for whole values\r\n    if (decimals === 0) {\r\n        return (negative + str);\r\n    }\r\n    // Pad out to the whole component (including a whole digit)\r\n    while (str.length <= decimals) {\r\n        str = Zeros + str;\r\n    }\r\n    // Insert the decimal point\r\n    const index = str.length - decimals;\r\n    str = str.substring(0, index) + \".\" + str.substring(index);\r\n    // Trim the whole component (leaving at least one 0)\r\n    while (str[0] === \"0\" && str[1] !== \".\") {\r\n        str = str.substring(1);\r\n    }\r\n    // Trim the decimal component (leaving at least one 0)\r\n    while (str[str.length - 1] === \"0\" && str[str.length - 2] !== \".\") {\r\n        str = str.substring(0, str.length - 1);\r\n    }\r\n    return (negative + str);\r\n}\r\n/**\r\n *  A FixedNumber represents a value over its [[FixedFormat]]\r\n *  arithmetic field.\r\n *\r\n *  A FixedNumber can be used to perform math, losslessly, on\r\n *  values which have decmial places.\r\n *\r\n *  A FixedNumber has a fixed bit-width to store values in, and stores all\r\n *  values internally by multiplying the value by 10 raised to the power of\r\n *  %%decimals%%.\r\n *\r\n *  If operations are performed that cause a value to grow too high (close to\r\n *  positive infinity) or too low (close to negative infinity), the value\r\n *  is said to //overflow//.\r\n *\r\n *  For example, an 8-bit signed value, with 0 decimals may only be within\r\n *  the range ``-128`` to ``127``; so ``-128 - 1`` will overflow and become\r\n *  ``127``. Likewise, ``127 + 1`` will overflow and become ``-127``.\r\n *\r\n *  Many operation have a normal and //unsafe// variant. The normal variant\r\n *  will throw a [[NumericFaultError]] on any overflow, while the //unsafe//\r\n *  variant will silently allow overflow, corrupting its value value.\r\n *\r\n *  If operations are performed that cause a value to become too small\r\n *  (close to zero), the value loses precison and is said to //underflow//.\r\n *\r\n *  For example, a value with 1 decimal place may store a number as small\r\n *  as ``0.1``, but the value of ``0.1 / 2`` is ``0.05``, which cannot fit\r\n *  into 1 decimal place, so underflow occurs which means precision is lost\r\n *  and the value becomes ``0``.\r\n *\r\n *  Some operations have a normal and //signalling// variant. The normal\r\n *  variant will silently ignore underflow, while the //signalling// variant\r\n *  will thow a [[NumericFaultError]] on underflow.\r\n */\r\nclass FixedNumber {\r\n    /**\r\n     *  The specific fixed-point arithmetic field for this value.\r\n     */\r\n    format;\r\n    #format;\r\n    // The actual value (accounting for decimals)\r\n    #val;\r\n    // A base-10 value to multiple values by to maintain the magnitude\r\n    #tens;\r\n    /**\r\n     *  This is a property so console.log shows a human-meaningful value.\r\n     *\r\n     *  @private\r\n     */\r\n    _value;\r\n    // Use this when changing this file to get some typing info,\r\n    // but then switch to any to mask the internal type\r\n    //constructor(guard: any, value: bigint, format: _FixedFormat) {\r\n    /**\r\n     *  @private\r\n     */\r\n    constructor(guard, value, format) {\r\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertPrivate)(guard, _guard, \"FixedNumber\");\r\n        this.#val = value;\r\n        this.#format = format;\r\n        const _value = toString(value, format.decimals);\r\n        (0,_properties_js__WEBPACK_IMPORTED_MODULE_2__.defineProperties)(this, { format: format.name, _value });\r\n        this.#tens = getTens(format.decimals);\r\n    }\r\n    /**\r\n     *  If true, negative values are permitted, otherwise only\r\n     *  positive values and zero are allowed.\r\n     */\r\n    get signed() { return this.#format.signed; }\r\n    /**\r\n     *  The number of bits available to store the value.\r\n     */\r\n    get width() { return this.#format.width; }\r\n    /**\r\n     *  The number of decimal places in the fixed-point arithment field.\r\n     */\r\n    get decimals() { return this.#format.decimals; }\r\n    /**\r\n     *  The value as an integer, based on the smallest unit the\r\n     *  [[decimals]] allow.\r\n     */\r\n    get value() { return this.#val; }\r\n    #checkFormat(other) {\r\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(this.format === other.format, \"incompatible format; use fixedNumber.toFormat\", \"other\", other);\r\n    }\r\n    #checkValue(val, safeOp) {\r\n        /*\r\n                const width = BigInt(this.width);\r\n                if (this.signed) {\r\n                    const limit = (BN_1 << (width - BN_1));\r\n                    assert(safeOp == null || (val >= -limit  && val < limit), \"overflow\", \"NUMERIC_FAULT\", {\r\n                        operation: <string>safeOp, fault: \"overflow\", value: val\r\n                    });\r\n        \r\n                    if (val > BN_0) {\r\n                        val = fromTwos(mask(val, width), width);\r\n                    } else {\r\n                        val = -fromTwos(mask(-val, width), width);\r\n                    }\r\n        \r\n                } else {\r\n                    const masked = mask(val, width);\r\n                    assert(safeOp == null || (val >= 0 && val === masked), \"overflow\", \"NUMERIC_FAULT\", {\r\n                        operation: <string>safeOp, fault: \"overflow\", value: val\r\n                    });\r\n                    val = masked;\r\n                }\r\n        */\r\n        val = checkValue(val, this.#format, safeOp);\r\n        return new FixedNumber(_guard, val, this.#format);\r\n    }\r\n    #add(o, safeOp) {\r\n        this.#checkFormat(o);\r\n        return this.#checkValue(this.#val + o.#val, safeOp);\r\n    }\r\n    /**\r\n     *  Returns a new [[FixedNumber]] with the result of %%this%% added\r\n     *  to %%other%%, ignoring overflow.\r\n     */\r\n    addUnsafe(other) { return this.#add(other); }\r\n    /**\r\n     *  Returns a new [[FixedNumber]] with the result of %%this%% added\r\n     *  to %%other%%. A [[NumericFaultError]] is thrown if overflow\r\n     *  occurs.\r\n     */\r\n    add(other) { return this.#add(other, \"add\"); }\r\n    #sub(o, safeOp) {\r\n        this.#checkFormat(o);\r\n        return this.#checkValue(this.#val - o.#val, safeOp);\r\n    }\r\n    /**\r\n     *  Returns a new [[FixedNumber]] with the result of %%other%% subtracted\r\n     *  from %%this%%, ignoring overflow.\r\n     */\r\n    subUnsafe(other) { return this.#sub(other); }\r\n    /**\r\n     *  Returns a new [[FixedNumber]] with the result of %%other%% subtracted\r\n     *  from %%this%%. A [[NumericFaultError]] is thrown if overflow\r\n     *  occurs.\r\n     */\r\n    sub(other) { return this.#sub(other, \"sub\"); }\r\n    #mul(o, safeOp) {\r\n        this.#checkFormat(o);\r\n        return this.#checkValue((this.#val * o.#val) / this.#tens, safeOp);\r\n    }\r\n    /**\r\n     *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied\r\n     *  by %%other%%, ignoring overflow and underflow (precision loss).\r\n     */\r\n    mulUnsafe(other) { return this.#mul(other); }\r\n    /**\r\n     *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied\r\n     *  by %%other%%. A [[NumericFaultError]] is thrown if overflow\r\n     *  occurs.\r\n     */\r\n    mul(other) { return this.#mul(other, \"mul\"); }\r\n    /**\r\n     *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied\r\n     *  by %%other%%. A [[NumericFaultError]] is thrown if overflow\r\n     *  occurs or if underflow (precision loss) occurs.\r\n     */\r\n    mulSignal(other) {\r\n        this.#checkFormat(other);\r\n        const value = this.#val * other.#val;\r\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assert)((value % this.#tens) === BN_0, \"precision lost during signalling mul\", \"NUMERIC_FAULT\", {\r\n            operation: \"mulSignal\", fault: \"underflow\", value: this\r\n        });\r\n        return this.#checkValue(value / this.#tens, \"mulSignal\");\r\n    }\r\n    #div(o, safeOp) {\r\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assert)(o.#val !== BN_0, \"division by zero\", \"NUMERIC_FAULT\", {\r\n            operation: \"div\", fault: \"divide-by-zero\", value: this\r\n        });\r\n        this.#checkFormat(o);\r\n        return this.#checkValue((this.#val * this.#tens) / o.#val, safeOp);\r\n    }\r\n    /**\r\n     *  Returns a new [[FixedNumber]] with the result of %%this%% divided\r\n     *  by %%other%%, ignoring underflow (precision loss). A\r\n     *  [[NumericFaultError]] is thrown if overflow occurs.\r\n     */\r\n    divUnsafe(other) { return this.#div(other); }\r\n    /**\r\n     *  Returns a new [[FixedNumber]] with the result of %%this%% divided\r\n     *  by %%other%%, ignoring underflow (precision loss). A\r\n     *  [[NumericFaultError]] is thrown if overflow occurs.\r\n     */\r\n    div(other) { return this.#div(other, \"div\"); }\r\n    /**\r\n     *  Returns a new [[FixedNumber]] with the result of %%this%% divided\r\n     *  by %%other%%. A [[NumericFaultError]] is thrown if underflow\r\n     *  (precision loss) occurs.\r\n     */\r\n    divSignal(other) {\r\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assert)(other.#val !== BN_0, \"division by zero\", \"NUMERIC_FAULT\", {\r\n            operation: \"div\", fault: \"divide-by-zero\", value: this\r\n        });\r\n        this.#checkFormat(other);\r\n        const value = (this.#val * this.#tens);\r\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assert)((value % other.#val) === BN_0, \"precision lost during signalling div\", \"NUMERIC_FAULT\", {\r\n            operation: \"divSignal\", fault: \"underflow\", value: this\r\n        });\r\n        return this.#checkValue(value / other.#val, \"divSignal\");\r\n    }\r\n    /**\r\n     *  Returns a comparison result between %%this%% and %%other%%.\r\n     *\r\n     *  This is suitable for use in sorting, where ``-1`` implies %%this%%\r\n     *  is smaller, ``1`` implies %%this%% is larger and ``0`` implies\r\n     *  both are equal.\r\n     */\r\n    cmp(other) {\r\n        let a = this.value, b = other.value;\r\n        // Coerce a and b to the same magnitude\r\n        const delta = this.decimals - other.decimals;\r\n        if (delta > 0) {\r\n            b *= getTens(delta);\r\n        }\r\n        else if (delta < 0) {\r\n            a *= getTens(-delta);\r\n        }\r\n        // Comnpare\r\n        if (a < b) {\r\n            return -1;\r\n        }\r\n        if (a > b) {\r\n            return 1;\r\n        }\r\n        return 0;\r\n    }\r\n    /**\r\n     *  Returns true if %%other%% is equal to %%this%%.\r\n     */\r\n    eq(other) { return this.cmp(other) === 0; }\r\n    /**\r\n     *  Returns true if %%other%% is less than to %%this%%.\r\n     */\r\n    lt(other) { return this.cmp(other) < 0; }\r\n    /**\r\n     *  Returns true if %%other%% is less than or equal to %%this%%.\r\n     */\r\n    lte(other) { return this.cmp(other) <= 0; }\r\n    /**\r\n     *  Returns true if %%other%% is greater than to %%this%%.\r\n     */\r\n    gt(other) { return this.cmp(other) > 0; }\r\n    /**\r\n     *  Returns true if %%other%% is greater than or equal to %%this%%.\r\n     */\r\n    gte(other) { return this.cmp(other) >= 0; }\r\n    /**\r\n     *  Returns a new [[FixedNumber]] which is the largest **integer**\r\n     *  that is less than or equal to %%this%%.\r\n     *\r\n     *  The decimal component of the result will always be ``0``.\r\n     */\r\n    floor() {\r\n        let val = this.#val;\r\n        if (this.#val < BN_0) {\r\n            val -= this.#tens - BN_1;\r\n        }\r\n        val = (this.#val / this.#tens) * this.#tens;\r\n        return this.#checkValue(val, \"floor\");\r\n    }\r\n    /**\r\n     *  Returns a new [[FixedNumber]] which is the smallest **integer**\r\n     *  that is greater than or equal to %%this%%.\r\n     *\r\n     *  The decimal component of the result will always be ``0``.\r\n     */\r\n    ceiling() {\r\n        let val = this.#val;\r\n        if (this.#val > BN_0) {\r\n            val += this.#tens - BN_1;\r\n        }\r\n        val = (this.#val / this.#tens) * this.#tens;\r\n        return this.#checkValue(val, \"ceiling\");\r\n    }\r\n    /**\r\n     *  Returns a new [[FixedNumber]] with the decimal component\r\n     *  rounded up on ties at %%decimals%% places.\r\n     */\r\n    round(decimals) {\r\n        if (decimals == null) {\r\n            decimals = 0;\r\n        }\r\n        // Not enough precision to not already be rounded\r\n        if (decimals >= this.decimals) {\r\n            return this;\r\n        }\r\n        const delta = this.decimals - decimals;\r\n        const bump = BN_5 * getTens(delta - 1);\r\n        let value = this.value + bump;\r\n        const tens = getTens(delta);\r\n        value = (value / tens) * tens;\r\n        checkValue(value, this.#format, \"round\");\r\n        return new FixedNumber(_guard, value, this.#format);\r\n    }\r\n    /**\r\n     *  Returns true if %%this%% is equal to ``0``.\r\n     */\r\n    isZero() { return (this.#val === BN_0); }\r\n    /**\r\n     *  Returns true if %%this%% is less than ``0``.\r\n     */\r\n    isNegative() { return (this.#val < BN_0); }\r\n    /**\r\n     *  Returns the string representation of %%this%%.\r\n     */\r\n    toString() { return this._value; }\r\n    /**\r\n     *  Returns a float approximation.\r\n     *\r\n     *  Due to IEEE 754 precission (or lack thereof), this function\r\n     *  can only return an approximation and most values will contain\r\n     *  rounding errors.\r\n     */\r\n    toUnsafeFloat() { return parseFloat(this.toString()); }\r\n    /**\r\n     *  Return a new [[FixedNumber]] with the same value but has had\r\n     *  its field set to %%format%%.\r\n     *\r\n     *  This will throw if the value cannot fit into %%format%%.\r\n     */\r\n    toFormat(format) {\r\n        return FixedNumber.fromString(this.toString(), format);\r\n    }\r\n    /**\r\n     *  Creates a new [[FixedNumber]] for %%value%% divided by\r\n     *  %%decimal%% places with %%format%%.\r\n     *\r\n     *  This will throw a [[NumericFaultError]] if %%value%% (once adjusted\r\n     *  for %%decimals%%) cannot fit in %%format%%, either due to overflow\r\n     *  or underflow (precision loss).\r\n     */\r\n    static fromValue(_value, _decimals, _format) {\r\n        const decimals = (_decimals == null) ? 0 : (0,_maths_js__WEBPACK_IMPORTED_MODULE_1__.getNumber)(_decimals);\r\n        const format = getFormat(_format);\r\n        let value = (0,_maths_js__WEBPACK_IMPORTED_MODULE_1__.getBigInt)(_value, \"value\");\r\n        const delta = decimals - format.decimals;\r\n        if (delta > 0) {\r\n            const tens = getTens(delta);\r\n            (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assert)((value % tens) === BN_0, \"value loses precision for format\", \"NUMERIC_FAULT\", {\r\n                operation: \"fromValue\", fault: \"underflow\", value: _value\r\n            });\r\n            value /= tens;\r\n        }\r\n        else if (delta < 0) {\r\n            value *= getTens(-delta);\r\n        }\r\n        checkValue(value, format, \"fromValue\");\r\n        return new FixedNumber(_guard, value, format);\r\n    }\r\n    /**\r\n     *  Creates a new [[FixedNumber]] for %%value%% with %%format%%.\r\n     *\r\n     *  This will throw a [[NumericFaultError]] if %%value%% cannot fit\r\n     *  in %%format%%, either due to overflow or underflow (precision loss).\r\n     */\r\n    static fromString(_value, _format) {\r\n        const match = _value.match(/^(-?)([0-9]*)\\.?([0-9]*)$/);\r\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(match && (match[2].length + match[3].length) > 0, \"invalid FixedNumber string value\", \"value\", _value);\r\n        const format = getFormat(_format);\r\n        let whole = (match[2] || \"0\"), decimal = (match[3] || \"\");\r\n        // Pad out the decimals\r\n        while (decimal.length < format.decimals) {\r\n            decimal += Zeros;\r\n        }\r\n        // Check precision is safe\r\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assert)(decimal.substring(format.decimals).match(/^0*$/), \"too many decimals for format\", \"NUMERIC_FAULT\", {\r\n            operation: \"fromString\", fault: \"underflow\", value: _value\r\n        });\r\n        // Remove extra padding\r\n        decimal = decimal.substring(0, format.decimals);\r\n        const value = BigInt(match[1] + whole + decimal);\r\n        checkValue(value, format, \"fromString\");\r\n        return new FixedNumber(_guard, value, format);\r\n    }\r\n    /**\r\n     *  Creates a new [[FixedNumber]] with the big-endian representation\r\n     *  %%value%% with %%format%%.\r\n     *\r\n     *  This will throw a [[NumericFaultError]] if %%value%% cannot fit\r\n     *  in %%format%% due to overflow.\r\n     */\r\n    static fromBytes(_value, _format) {\r\n        let value = (0,_maths_js__WEBPACK_IMPORTED_MODULE_1__.toBigInt)((0,_data_js__WEBPACK_IMPORTED_MODULE_3__.getBytes)(_value, \"value\"));\r\n        const format = getFormat(_format);\r\n        if (format.signed) {\r\n            value = (0,_maths_js__WEBPACK_IMPORTED_MODULE_1__.fromTwos)(value, format.width);\r\n        }\r\n        checkValue(value, format, \"fromBytes\");\r\n        return new FixedNumber(_guard, value, format);\r\n    }\r\n}\r\n//const f1 = FixedNumber.fromString(\"12.56\", \"fixed16x2\");\r\n//const f2 = FixedNumber.fromString(\"0.3\", \"fixed16x2\");\r\n//console.log(f1.divSignal(f2));\r\n//const BUMP = FixedNumber.from(\"0.5\");\r\n//# sourceMappingURL=fixednumber.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/fixednumber.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/geturl-browser.js":
/*!*************************************************************!*\
  !*** ./node_modules/ethers/lib.esm/utils/geturl-browser.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createGetUrl: () => (/* binding */ createGetUrl),\n/* harmony export */   getUrl: () => (/* binding */ getUrl)\n/* harmony export */ });\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/errors.js\");\n\r\nfunction createGetUrl(options) {\r\n    async function getUrl(req, _signal) {\r\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assert)(_signal == null || !_signal.cancelled, \"request cancelled before sending\", \"CANCELLED\");\r\n        const protocol = req.url.split(\":\")[0].toLowerCase();\r\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assert)(protocol === \"http\" || protocol === \"https\", `unsupported protocol ${protocol}`, \"UNSUPPORTED_OPERATION\", {\r\n            info: { protocol },\r\n            operation: \"request\"\r\n        });\r\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assert)(protocol === \"https\" || !req.credentials || req.allowInsecureAuthentication, \"insecure authorized connections unsupported\", \"UNSUPPORTED_OPERATION\", {\r\n            operation: \"request\"\r\n        });\r\n        let error = null;\r\n        const controller = new AbortController();\r\n        const timer = setTimeout(() => {\r\n            error = (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.makeError)(\"request timeout\", \"TIMEOUT\");\r\n            controller.abort();\r\n        }, req.timeout);\r\n        if (_signal) {\r\n            _signal.addListener(() => {\r\n                error = (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.makeError)(\"request cancelled\", \"CANCELLED\");\r\n                controller.abort();\r\n            });\r\n        }\r\n        const init = Object.assign({}, options, {\r\n            method: req.method,\r\n            headers: new Headers(Array.from(req)),\r\n            body: req.body || undefined,\r\n            signal: controller.signal\r\n        });\r\n        let resp;\r\n        try {\r\n            resp = await fetch(req.url, init);\r\n        }\r\n        catch (_error) {\r\n            clearTimeout(timer);\r\n            if (error) {\r\n                throw error;\r\n            }\r\n            throw _error;\r\n        }\r\n        clearTimeout(timer);\r\n        const headers = {};\r\n        resp.headers.forEach((value, key) => {\r\n            headers[key.toLowerCase()] = value;\r\n        });\r\n        const respBody = await resp.arrayBuffer();\r\n        const body = (respBody == null) ? null : new Uint8Array(respBody);\r\n        return {\r\n            statusCode: resp.status,\r\n            statusMessage: resp.statusText,\r\n            headers, body\r\n        };\r\n    }\r\n    return getUrl;\r\n}\r\n// @TODO: remove in v7; provided for backwards compat\r\nconst defaultGetUrl = createGetUrl({});\r\nasync function getUrl(req, _signal) {\r\n    return defaultGetUrl(req, _signal);\r\n}\r\n//# sourceMappingURL=geturl-browser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS91dGlscy9nZXR1cmwtYnJvd3Nlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBZ0Q7QUFDekM7QUFDUDtBQUNBLFFBQVEsa0RBQU07QUFDZDtBQUNBLFFBQVEsa0RBQU0sc0VBQXNFLFNBQVM7QUFDN0Ysb0JBQW9CLFVBQVU7QUFDOUI7QUFDQSxTQUFTO0FBQ1QsUUFBUSxrREFBTTtBQUNkO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixxREFBUztBQUM3QjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0Esd0JBQXdCLHFEQUFTO0FBQ2pDO0FBQ0EsYUFBYTtBQUNiO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QixxQ0FBcUM7QUFDOUI7QUFDUDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkQ6XFxEb19hbjJcXGxlbmRodWJfdjJcXGxlbmRodWItZnJvbnRlbmQtbmV4dGpzXFxub2RlX21vZHVsZXNcXGV0aGVyc1xcbGliLmVzbVxcdXRpbHNcXGdldHVybC1icm93c2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFzc2VydCwgbWFrZUVycm9yIH0gZnJvbSBcIi4vZXJyb3JzLmpzXCI7XHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVHZXRVcmwob3B0aW9ucykge1xyXG4gICAgYXN5bmMgZnVuY3Rpb24gZ2V0VXJsKHJlcSwgX3NpZ25hbCkge1xyXG4gICAgICAgIGFzc2VydChfc2lnbmFsID09IG51bGwgfHwgIV9zaWduYWwuY2FuY2VsbGVkLCBcInJlcXVlc3QgY2FuY2VsbGVkIGJlZm9yZSBzZW5kaW5nXCIsIFwiQ0FOQ0VMTEVEXCIpO1xyXG4gICAgICAgIGNvbnN0IHByb3RvY29sID0gcmVxLnVybC5zcGxpdChcIjpcIilbMF0udG9Mb3dlckNhc2UoKTtcclxuICAgICAgICBhc3NlcnQocHJvdG9jb2wgPT09IFwiaHR0cFwiIHx8IHByb3RvY29sID09PSBcImh0dHBzXCIsIGB1bnN1cHBvcnRlZCBwcm90b2NvbCAke3Byb3RvY29sfWAsIFwiVU5TVVBQT1JURURfT1BFUkFUSU9OXCIsIHtcclxuICAgICAgICAgICAgaW5mbzogeyBwcm90b2NvbCB9LFxyXG4gICAgICAgICAgICBvcGVyYXRpb246IFwicmVxdWVzdFwiXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgYXNzZXJ0KHByb3RvY29sID09PSBcImh0dHBzXCIgfHwgIXJlcS5jcmVkZW50aWFscyB8fCByZXEuYWxsb3dJbnNlY3VyZUF1dGhlbnRpY2F0aW9uLCBcImluc2VjdXJlIGF1dGhvcml6ZWQgY29ubmVjdGlvbnMgdW5zdXBwb3J0ZWRcIiwgXCJVTlNVUFBPUlRFRF9PUEVSQVRJT05cIiwge1xyXG4gICAgICAgICAgICBvcGVyYXRpb246IFwicmVxdWVzdFwiXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgbGV0IGVycm9yID0gbnVsbDtcclxuICAgICAgICBjb25zdCBjb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xyXG4gICAgICAgIGNvbnN0IHRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGVycm9yID0gbWFrZUVycm9yKFwicmVxdWVzdCB0aW1lb3V0XCIsIFwiVElNRU9VVFwiKTtcclxuICAgICAgICAgICAgY29udHJvbGxlci5hYm9ydCgpO1xyXG4gICAgICAgIH0sIHJlcS50aW1lb3V0KTtcclxuICAgICAgICBpZiAoX3NpZ25hbCkge1xyXG4gICAgICAgICAgICBfc2lnbmFsLmFkZExpc3RlbmVyKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGVycm9yID0gbWFrZUVycm9yKFwicmVxdWVzdCBjYW5jZWxsZWRcIiwgXCJDQU5DRUxMRURcIik7XHJcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLmFib3J0KCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBpbml0ID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucywge1xyXG4gICAgICAgICAgICBtZXRob2Q6IHJlcS5tZXRob2QsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IG5ldyBIZWFkZXJzKEFycmF5LmZyb20ocmVxKSksXHJcbiAgICAgICAgICAgIGJvZHk6IHJlcS5ib2R5IHx8IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgc2lnbmFsOiBjb250cm9sbGVyLnNpZ25hbFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGxldCByZXNwO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHJlc3AgPSBhd2FpdCBmZXRjaChyZXEudXJsLCBpbml0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKF9lcnJvcikge1xyXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xyXG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRocm93IF9lcnJvcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcclxuICAgICAgICBjb25zdCBoZWFkZXJzID0ge307XHJcbiAgICAgICAgcmVzcC5oZWFkZXJzLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcclxuICAgICAgICAgICAgaGVhZGVyc1trZXkudG9Mb3dlckNhc2UoKV0gPSB2YWx1ZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBjb25zdCByZXNwQm9keSA9IGF3YWl0IHJlc3AuYXJyYXlCdWZmZXIoKTtcclxuICAgICAgICBjb25zdCBib2R5ID0gKHJlc3BCb2R5ID09IG51bGwpID8gbnVsbCA6IG5ldyBVaW50OEFycmF5KHJlc3BCb2R5KTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzdGF0dXNDb2RlOiByZXNwLnN0YXR1cyxcclxuICAgICAgICAgICAgc3RhdHVzTWVzc2FnZTogcmVzcC5zdGF0dXNUZXh0LFxyXG4gICAgICAgICAgICBoZWFkZXJzLCBib2R5XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIHJldHVybiBnZXRVcmw7XHJcbn1cclxuLy8gQFRPRE86IHJlbW92ZSBpbiB2NzsgcHJvdmlkZWQgZm9yIGJhY2t3YXJkcyBjb21wYXRcclxuY29uc3QgZGVmYXVsdEdldFVybCA9IGNyZWF0ZUdldFVybCh7fSk7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRVcmwocmVxLCBfc2lnbmFsKSB7XHJcbiAgICByZXR1cm4gZGVmYXVsdEdldFVybChyZXEsIF9zaWduYWwpO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldHVybC1icm93c2VyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/geturl-browser.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js":
/*!****************************************************!*\
  !*** ./node_modules/ethers/lib.esm/utils/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EventPayload: () => (/* reexport safe */ _events_js__WEBPACK_IMPORTED_MODULE_4__.EventPayload),\n/* harmony export */   FetchCancelSignal: () => (/* reexport safe */ _fetch_js__WEBPACK_IMPORTED_MODULE_5__.FetchCancelSignal),\n/* harmony export */   FetchRequest: () => (/* reexport safe */ _fetch_js__WEBPACK_IMPORTED_MODULE_5__.FetchRequest),\n/* harmony export */   FetchResponse: () => (/* reexport safe */ _fetch_js__WEBPACK_IMPORTED_MODULE_5__.FetchResponse),\n/* harmony export */   FixedNumber: () => (/* reexport safe */ _fixednumber_js__WEBPACK_IMPORTED_MODULE_6__.FixedNumber),\n/* harmony export */   Utf8ErrorFuncs: () => (/* reexport safe */ _utf8_js__WEBPACK_IMPORTED_MODULE_12__.Utf8ErrorFuncs),\n/* harmony export */   assert: () => (/* reexport safe */ _errors_js__WEBPACK_IMPORTED_MODULE_3__.assert),\n/* harmony export */   assertArgument: () => (/* reexport safe */ _errors_js__WEBPACK_IMPORTED_MODULE_3__.assertArgument),\n/* harmony export */   assertArgumentCount: () => (/* reexport safe */ _errors_js__WEBPACK_IMPORTED_MODULE_3__.assertArgumentCount),\n/* harmony export */   assertNormalize: () => (/* reexport safe */ _errors_js__WEBPACK_IMPORTED_MODULE_3__.assertNormalize),\n/* harmony export */   assertPrivate: () => (/* reexport safe */ _errors_js__WEBPACK_IMPORTED_MODULE_3__.assertPrivate),\n/* harmony export */   concat: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_2__.concat),\n/* harmony export */   dataLength: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_2__.dataLength),\n/* harmony export */   dataSlice: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_2__.dataSlice),\n/* harmony export */   decodeBase58: () => (/* reexport safe */ _base58_js__WEBPACK_IMPORTED_MODULE_0__.decodeBase58),\n/* harmony export */   decodeBase64: () => (/* reexport safe */ _base64_js__WEBPACK_IMPORTED_MODULE_1__.decodeBase64),\n/* harmony export */   decodeRlp: () => (/* reexport safe */ _rlp_decode_js__WEBPACK_IMPORTED_MODULE_9__.decodeRlp),\n/* harmony export */   defineProperties: () => (/* reexport safe */ _properties_js__WEBPACK_IMPORTED_MODULE_8__.defineProperties),\n/* harmony export */   encodeBase58: () => (/* reexport safe */ _base58_js__WEBPACK_IMPORTED_MODULE_0__.encodeBase58),\n/* harmony export */   encodeBase64: () => (/* reexport safe */ _base64_js__WEBPACK_IMPORTED_MODULE_1__.encodeBase64),\n/* harmony export */   encodeRlp: () => (/* reexport safe */ _rlp_encode_js__WEBPACK_IMPORTED_MODULE_10__.encodeRlp),\n/* harmony export */   formatEther: () => (/* reexport safe */ _units_js__WEBPACK_IMPORTED_MODULE_11__.formatEther),\n/* harmony export */   formatUnits: () => (/* reexport safe */ _units_js__WEBPACK_IMPORTED_MODULE_11__.formatUnits),\n/* harmony export */   fromTwos: () => (/* reexport safe */ _maths_js__WEBPACK_IMPORTED_MODULE_7__.fromTwos),\n/* harmony export */   getBigInt: () => (/* reexport safe */ _maths_js__WEBPACK_IMPORTED_MODULE_7__.getBigInt),\n/* harmony export */   getBytes: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_2__.getBytes),\n/* harmony export */   getBytesCopy: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_2__.getBytesCopy),\n/* harmony export */   getNumber: () => (/* reexport safe */ _maths_js__WEBPACK_IMPORTED_MODULE_7__.getNumber),\n/* harmony export */   getUint: () => (/* reexport safe */ _maths_js__WEBPACK_IMPORTED_MODULE_7__.getUint),\n/* harmony export */   hexlify: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_2__.hexlify),\n/* harmony export */   isBytesLike: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_2__.isBytesLike),\n/* harmony export */   isCallException: () => (/* reexport safe */ _errors_js__WEBPACK_IMPORTED_MODULE_3__.isCallException),\n/* harmony export */   isError: () => (/* reexport safe */ _errors_js__WEBPACK_IMPORTED_MODULE_3__.isError),\n/* harmony export */   isHexString: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_2__.isHexString),\n/* harmony export */   makeError: () => (/* reexport safe */ _errors_js__WEBPACK_IMPORTED_MODULE_3__.makeError),\n/* harmony export */   mask: () => (/* reexport safe */ _maths_js__WEBPACK_IMPORTED_MODULE_7__.mask),\n/* harmony export */   parseEther: () => (/* reexport safe */ _units_js__WEBPACK_IMPORTED_MODULE_11__.parseEther),\n/* harmony export */   parseUnits: () => (/* reexport safe */ _units_js__WEBPACK_IMPORTED_MODULE_11__.parseUnits),\n/* harmony export */   resolveProperties: () => (/* reexport safe */ _properties_js__WEBPACK_IMPORTED_MODULE_8__.resolveProperties),\n/* harmony export */   stripZerosLeft: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_2__.stripZerosLeft),\n/* harmony export */   toBeArray: () => (/* reexport safe */ _maths_js__WEBPACK_IMPORTED_MODULE_7__.toBeArray),\n/* harmony export */   toBeHex: () => (/* reexport safe */ _maths_js__WEBPACK_IMPORTED_MODULE_7__.toBeHex),\n/* harmony export */   toBigInt: () => (/* reexport safe */ _maths_js__WEBPACK_IMPORTED_MODULE_7__.toBigInt),\n/* harmony export */   toNumber: () => (/* reexport safe */ _maths_js__WEBPACK_IMPORTED_MODULE_7__.toNumber),\n/* harmony export */   toQuantity: () => (/* reexport safe */ _maths_js__WEBPACK_IMPORTED_MODULE_7__.toQuantity),\n/* harmony export */   toTwos: () => (/* reexport safe */ _maths_js__WEBPACK_IMPORTED_MODULE_7__.toTwos),\n/* harmony export */   toUtf8Bytes: () => (/* reexport safe */ _utf8_js__WEBPACK_IMPORTED_MODULE_12__.toUtf8Bytes),\n/* harmony export */   toUtf8CodePoints: () => (/* reexport safe */ _utf8_js__WEBPACK_IMPORTED_MODULE_12__.toUtf8CodePoints),\n/* harmony export */   toUtf8String: () => (/* reexport safe */ _utf8_js__WEBPACK_IMPORTED_MODULE_12__.toUtf8String),\n/* harmony export */   uuidV4: () => (/* reexport safe */ _uuid_js__WEBPACK_IMPORTED_MODULE_13__.uuidV4),\n/* harmony export */   zeroPadBytes: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_2__.zeroPadBytes),\n/* harmony export */   zeroPadValue: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_2__.zeroPadValue)\n/* harmony export */ });\n/* harmony import */ var _base58_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base58.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/base58.js\");\n/* harmony import */ var _base64_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base64.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/base64-browser.js\");\n/* harmony import */ var _data_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./data.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/data.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./errors.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./events.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/events.js\");\n/* harmony import */ var _fetch_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./fetch.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/fetch.js\");\n/* harmony import */ var _fixednumber_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./fixednumber.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/fixednumber.js\");\n/* harmony import */ var _maths_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./maths.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/maths.js\");\n/* harmony import */ var _properties_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./properties.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/properties.js\");\n/* harmony import */ var _rlp_decode_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./rlp-decode.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/rlp-decode.js\");\n/* harmony import */ var _rlp_encode_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./rlp-encode.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/rlp-encode.js\");\n/* harmony import */ var _units_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./units.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/units.js\");\n/* harmony import */ var _utf8_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./utf8.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/utf8.js\");\n/* harmony import */ var _uuid_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./uuid.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/uuid.js\");\n/**\r\n *  There are many simple utilities required to interact with\r\n *  Ethereum and to simplify the library, without increasing\r\n *  the library dependencies for simple functions.\r\n *\r\n *  @_section api/utils:Utilities  [about-utils]\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS91dGlscy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN5RDtBQUNBO0FBQ3dHO0FBQ2xCO0FBQ3BHO0FBQ2tDO0FBQzlCO0FBQ3dGO0FBQ2pFO0FBQzFCO0FBQ0E7QUFDa0M7QUFDVztBQUN0RDtBQUNuQyIsInNvdXJjZXMiOlsiRDpcXERvX2FuMlxcbGVuZGh1Yl92MlxcbGVuZGh1Yi1mcm9udGVuZC1uZXh0anNcXG5vZGVfbW9kdWxlc1xcZXRoZXJzXFxsaWIuZXNtXFx1dGlsc1xcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqICBUaGVyZSBhcmUgbWFueSBzaW1wbGUgdXRpbGl0aWVzIHJlcXVpcmVkIHRvIGludGVyYWN0IHdpdGhcclxuICogIEV0aGVyZXVtIGFuZCB0byBzaW1wbGlmeSB0aGUgbGlicmFyeSwgd2l0aG91dCBpbmNyZWFzaW5nXHJcbiAqICB0aGUgbGlicmFyeSBkZXBlbmRlbmNpZXMgZm9yIHNpbXBsZSBmdW5jdGlvbnMuXHJcbiAqXHJcbiAqICBAX3NlY3Rpb24gYXBpL3V0aWxzOlV0aWxpdGllcyAgW2Fib3V0LXV0aWxzXVxyXG4gKi9cclxuZXhwb3J0IHsgZGVjb2RlQmFzZTU4LCBlbmNvZGVCYXNlNTggfSBmcm9tIFwiLi9iYXNlNTguanNcIjtcclxuZXhwb3J0IHsgZGVjb2RlQmFzZTY0LCBlbmNvZGVCYXNlNjQgfSBmcm9tIFwiLi9iYXNlNjQuanNcIjtcclxuZXhwb3J0IHsgZ2V0Qnl0ZXMsIGdldEJ5dGVzQ29weSwgaXNIZXhTdHJpbmcsIGlzQnl0ZXNMaWtlLCBoZXhsaWZ5LCBjb25jYXQsIGRhdGFMZW5ndGgsIGRhdGFTbGljZSwgc3RyaXBaZXJvc0xlZnQsIHplcm9QYWRWYWx1ZSwgemVyb1BhZEJ5dGVzIH0gZnJvbSBcIi4vZGF0YS5qc1wiO1xyXG5leHBvcnQgeyBpc0NhbGxFeGNlcHRpb24sIGlzRXJyb3IsIGFzc2VydCwgYXNzZXJ0QXJndW1lbnQsIGFzc2VydEFyZ3VtZW50Q291bnQsIGFzc2VydFByaXZhdGUsIGFzc2VydE5vcm1hbGl6ZSwgbWFrZUVycm9yIH0gZnJvbSBcIi4vZXJyb3JzLmpzXCI7XHJcbmV4cG9ydCB7IEV2ZW50UGF5bG9hZCB9IGZyb20gXCIuL2V2ZW50cy5qc1wiO1xyXG5leHBvcnQgeyBGZXRjaFJlcXVlc3QsIEZldGNoUmVzcG9uc2UsIEZldGNoQ2FuY2VsU2lnbmFsLCB9IGZyb20gXCIuL2ZldGNoLmpzXCI7XHJcbmV4cG9ydCB7IEZpeGVkTnVtYmVyIH0gZnJvbSBcIi4vZml4ZWRudW1iZXIuanNcIjtcclxuZXhwb3J0IHsgZnJvbVR3b3MsIHRvVHdvcywgbWFzaywgZ2V0QmlnSW50LCBnZXROdW1iZXIsIGdldFVpbnQsIHRvQmlnSW50LCB0b051bWJlciwgdG9CZUhleCwgdG9CZUFycmF5LCB0b1F1YW50aXR5IH0gZnJvbSBcIi4vbWF0aHMuanNcIjtcclxuZXhwb3J0IHsgcmVzb2x2ZVByb3BlcnRpZXMsIGRlZmluZVByb3BlcnRpZXMgfSBmcm9tIFwiLi9wcm9wZXJ0aWVzLmpzXCI7XHJcbmV4cG9ydCB7IGRlY29kZVJscCB9IGZyb20gXCIuL3JscC1kZWNvZGUuanNcIjtcclxuZXhwb3J0IHsgZW5jb2RlUmxwIH0gZnJvbSBcIi4vcmxwLWVuY29kZS5qc1wiO1xyXG5leHBvcnQgeyBmb3JtYXRFdGhlciwgcGFyc2VFdGhlciwgZm9ybWF0VW5pdHMsIHBhcnNlVW5pdHMgfSBmcm9tIFwiLi91bml0cy5qc1wiO1xyXG5leHBvcnQgeyB0b1V0ZjhCeXRlcywgdG9VdGY4Q29kZVBvaW50cywgdG9VdGY4U3RyaW5nLCBVdGY4RXJyb3JGdW5jcywgfSBmcm9tIFwiLi91dGY4LmpzXCI7XHJcbmV4cG9ydCB7IHV1aWRWNCB9IGZyb20gXCIuL3V1aWQuanNcIjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/maths.js":
/*!****************************************************!*\
  !*** ./node_modules/ethers/lib.esm/utils/maths.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromTwos: () => (/* binding */ fromTwos),\n/* harmony export */   getBigInt: () => (/* binding */ getBigInt),\n/* harmony export */   getNumber: () => (/* binding */ getNumber),\n/* harmony export */   getUint: () => (/* binding */ getUint),\n/* harmony export */   mask: () => (/* binding */ mask),\n/* harmony export */   toBeArray: () => (/* binding */ toBeArray),\n/* harmony export */   toBeHex: () => (/* binding */ toBeHex),\n/* harmony export */   toBigInt: () => (/* binding */ toBigInt),\n/* harmony export */   toNumber: () => (/* binding */ toNumber),\n/* harmony export */   toQuantity: () => (/* binding */ toQuantity),\n/* harmony export */   toTwos: () => (/* binding */ toTwos)\n/* harmony export */ });\n/* harmony import */ var _data_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./data.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/data.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/errors.js\");\n/**\r\n *  Some mathematic operations.\r\n *\r\n *  @_subsection: api/utils:Math Helpers  [about-maths]\r\n */\r\n\r\n\r\nconst BN_0 = BigInt(0);\r\nconst BN_1 = BigInt(1);\r\n//const BN_Max256 = (BN_1 << BigInt(256)) - BN_1;\r\n// IEEE 754 support 53-bits of mantissa\r\nconst maxValue = 0x1fffffffffffff;\r\n/**\r\n *  Convert %%value%% from a twos-compliment representation of %%width%%\r\n *  bits to its value.\r\n *\r\n *  If the highest bit is ``1``, the result will be negative.\r\n */\r\nfunction fromTwos(_value, _width) {\r\n    const value = getUint(_value, \"value\");\r\n    const width = BigInt(getNumber(_width, \"width\"));\r\n    (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assert)((value >> width) === BN_0, \"overflow\", \"NUMERIC_FAULT\", {\r\n        operation: \"fromTwos\", fault: \"overflow\", value: _value\r\n    });\r\n    // Top bit set; treat as a negative value\r\n    if (value >> (width - BN_1)) {\r\n        const mask = (BN_1 << width) - BN_1;\r\n        return -(((~value) & mask) + BN_1);\r\n    }\r\n    return value;\r\n}\r\n/**\r\n *  Convert %%value%% to a twos-compliment representation of\r\n *  %%width%% bits.\r\n *\r\n *  The result will always be positive.\r\n */\r\nfunction toTwos(_value, _width) {\r\n    let value = getBigInt(_value, \"value\");\r\n    const width = BigInt(getNumber(_width, \"width\"));\r\n    const limit = (BN_1 << (width - BN_1));\r\n    if (value < BN_0) {\r\n        value = -value;\r\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assert)(value <= limit, \"too low\", \"NUMERIC_FAULT\", {\r\n            operation: \"toTwos\", fault: \"overflow\", value: _value\r\n        });\r\n        const mask = (BN_1 << width) - BN_1;\r\n        return ((~value) & mask) + BN_1;\r\n    }\r\n    else {\r\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assert)(value < limit, \"too high\", \"NUMERIC_FAULT\", {\r\n            operation: \"toTwos\", fault: \"overflow\", value: _value\r\n        });\r\n    }\r\n    return value;\r\n}\r\n/**\r\n *  Mask %%value%% with a bitmask of %%bits%% ones.\r\n */\r\nfunction mask(_value, _bits) {\r\n    const value = getUint(_value, \"value\");\r\n    const bits = BigInt(getNumber(_bits, \"bits\"));\r\n    return value & ((BN_1 << bits) - BN_1);\r\n}\r\n/**\r\n *  Gets a BigInt from %%value%%. If it is an invalid value for\r\n *  a BigInt, then an ArgumentError will be thrown for %%name%%.\r\n */\r\nfunction getBigInt(value, name) {\r\n    switch (typeof (value)) {\r\n        case \"bigint\": return value;\r\n        case \"number\":\r\n            (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(Number.isInteger(value), \"underflow\", name || \"value\", value);\r\n            (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(value >= -maxValue && value <= maxValue, \"overflow\", name || \"value\", value);\r\n            return BigInt(value);\r\n        case \"string\":\r\n            try {\r\n                if (value === \"\") {\r\n                    throw new Error(\"empty string\");\r\n                }\r\n                if (value[0] === \"-\" && value[1] !== \"-\") {\r\n                    return -BigInt(value.substring(1));\r\n                }\r\n                return BigInt(value);\r\n            }\r\n            catch (e) {\r\n                (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, `invalid BigNumberish string: ${e.message}`, name || \"value\", value);\r\n            }\r\n    }\r\n    (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"invalid BigNumberish value\", name || \"value\", value);\r\n}\r\n/**\r\n *  Returns %%value%% as a bigint, validating it is valid as a bigint\r\n *  value and that it is positive.\r\n */\r\nfunction getUint(value, name) {\r\n    const result = getBigInt(value, name);\r\n    (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assert)(result >= BN_0, \"unsigned value cannot be negative\", \"NUMERIC_FAULT\", {\r\n        fault: \"overflow\", operation: \"getUint\", value\r\n    });\r\n    return result;\r\n}\r\nconst Nibbles = \"0123456789abcdef\";\r\n/*\r\n * Converts %%value%% to a BigInt. If %%value%% is a Uint8Array, it\r\n * is treated as Big Endian data.\r\n */\r\nfunction toBigInt(value) {\r\n    if (value instanceof Uint8Array) {\r\n        let result = \"0x0\";\r\n        for (const v of value) {\r\n            result += Nibbles[v >> 4];\r\n            result += Nibbles[v & 0x0f];\r\n        }\r\n        return BigInt(result);\r\n    }\r\n    return getBigInt(value);\r\n}\r\n/**\r\n *  Gets a //number// from %%value%%. If it is an invalid value for\r\n *  a //number//, then an ArgumentError will be thrown for %%name%%.\r\n */\r\nfunction getNumber(value, name) {\r\n    switch (typeof (value)) {\r\n        case \"bigint\":\r\n            (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(value >= -maxValue && value <= maxValue, \"overflow\", name || \"value\", value);\r\n            return Number(value);\r\n        case \"number\":\r\n            (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(Number.isInteger(value), \"underflow\", name || \"value\", value);\r\n            (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(value >= -maxValue && value <= maxValue, \"overflow\", name || \"value\", value);\r\n            return value;\r\n        case \"string\":\r\n            try {\r\n                if (value === \"\") {\r\n                    throw new Error(\"empty string\");\r\n                }\r\n                return getNumber(BigInt(value), name);\r\n            }\r\n            catch (e) {\r\n                (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, `invalid numeric string: ${e.message}`, name || \"value\", value);\r\n            }\r\n    }\r\n    (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"invalid numeric value\", name || \"value\", value);\r\n}\r\n/**\r\n *  Converts %%value%% to a number. If %%value%% is a Uint8Array, it\r\n *  is treated as Big Endian data. Throws if the value is not safe.\r\n */\r\nfunction toNumber(value) {\r\n    return getNumber(toBigInt(value));\r\n}\r\n/**\r\n *  Converts %%value%% to a Big Endian hexstring, optionally padded to\r\n *  %%width%% bytes.\r\n */\r\nfunction toBeHex(_value, _width) {\r\n    const value = getUint(_value, \"value\");\r\n    let result = value.toString(16);\r\n    if (_width == null) {\r\n        // Ensure the value is of even length\r\n        if (result.length % 2) {\r\n            result = \"0\" + result;\r\n        }\r\n    }\r\n    else {\r\n        const width = getNumber(_width, \"width\");\r\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assert)(width * 2 >= result.length, `value exceeds width (${width} bytes)`, \"NUMERIC_FAULT\", {\r\n            operation: \"toBeHex\",\r\n            fault: \"overflow\",\r\n            value: _value\r\n        });\r\n        // Pad the value to the required width\r\n        while (result.length < (width * 2)) {\r\n            result = \"0\" + result;\r\n        }\r\n    }\r\n    return \"0x\" + result;\r\n}\r\n/**\r\n *  Converts %%value%% to a Big Endian Uint8Array.\r\n */\r\nfunction toBeArray(_value) {\r\n    const value = getUint(_value, \"value\");\r\n    if (value === BN_0) {\r\n        return new Uint8Array([]);\r\n    }\r\n    let hex = value.toString(16);\r\n    if (hex.length % 2) {\r\n        hex = \"0\" + hex;\r\n    }\r\n    const result = new Uint8Array(hex.length / 2);\r\n    for (let i = 0; i < result.length; i++) {\r\n        const offset = i * 2;\r\n        result[i] = parseInt(hex.substring(offset, offset + 2), 16);\r\n    }\r\n    return result;\r\n}\r\n/**\r\n *  Returns a [[HexString]] for %%value%% safe to use as a //Quantity//.\r\n *\r\n *  A //Quantity// does not have and leading 0 values unless the value is\r\n *  the literal value `0x0`. This is most commonly used for JSSON-RPC\r\n *  numeric values.\r\n */\r\nfunction toQuantity(value) {\r\n    let result = (0,_data_js__WEBPACK_IMPORTED_MODULE_1__.hexlify)((0,_data_js__WEBPACK_IMPORTED_MODULE_1__.isBytesLike)(value) ? value : toBeArray(value)).substring(2);\r\n    while (result.startsWith(\"0\")) {\r\n        result = result.substring(1);\r\n    }\r\n    if (result === \"\") {\r\n        result = \"0\";\r\n    }\r\n    return \"0x\" + result;\r\n}\r\n//# sourceMappingURL=maths.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/maths.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/properties.js":
/*!*********************************************************!*\
  !*** ./node_modules/ethers/lib.esm/utils/properties.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defineProperties: () => (/* binding */ defineProperties),\n/* harmony export */   resolveProperties: () => (/* binding */ resolveProperties)\n/* harmony export */ });\n/**\r\n *  Property helper functions.\r\n *\r\n *  @_subsection api/utils:Properties  [about-properties]\r\n */\r\nfunction checkType(value, type, name) {\r\n    const types = type.split(\"|\").map(t => t.trim());\r\n    for (let i = 0; i < types.length; i++) {\r\n        switch (type) {\r\n            case \"any\":\r\n                return;\r\n            case \"bigint\":\r\n            case \"boolean\":\r\n            case \"number\":\r\n            case \"string\":\r\n                if (typeof (value) === type) {\r\n                    return;\r\n                }\r\n        }\r\n    }\r\n    const error = new Error(`invalid value for type ${type}`);\r\n    error.code = \"INVALID_ARGUMENT\";\r\n    error.argument = `value.${name}`;\r\n    error.value = value;\r\n    throw error;\r\n}\r\n/**\r\n *  Resolves to a new object that is a copy of %%value%%, but with all\r\n *  values resolved.\r\n */\r\nasync function resolveProperties(value) {\r\n    const keys = Object.keys(value);\r\n    const results = await Promise.all(keys.map((k) => Promise.resolve(value[k])));\r\n    return results.reduce((accum, v, index) => {\r\n        accum[keys[index]] = v;\r\n        return accum;\r\n    }, {});\r\n}\r\n/**\r\n *  Assigns the %%values%% to %%target%% as read-only values.\r\n *\r\n *  It %%types%% is specified, the values are checked.\r\n */\r\nfunction defineProperties(target, values, types) {\r\n    for (let key in values) {\r\n        let value = values[key];\r\n        const type = (types ? types[key] : null);\r\n        if (type) {\r\n            checkType(value, type, key);\r\n        }\r\n        Object.defineProperty(target, key, { enumerable: true, value, writable: false });\r\n    }\r\n}\r\n//# sourceMappingURL=properties.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS91dGlscy9wcm9wZXJ0aWVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isa0JBQWtCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxLQUFLO0FBQzNEO0FBQ0EsOEJBQThCLEtBQUs7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLLElBQUk7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QywwQ0FBMEM7QUFDdkY7QUFDQTtBQUNBIiwic291cmNlcyI6WyJEOlxcRG9fYW4yXFxsZW5kaHViX3YyXFxsZW5kaHViLWZyb250ZW5kLW5leHRqc1xcbm9kZV9tb2R1bGVzXFxldGhlcnNcXGxpYi5lc21cXHV0aWxzXFxwcm9wZXJ0aWVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiAgUHJvcGVydHkgaGVscGVyIGZ1bmN0aW9ucy5cclxuICpcclxuICogIEBfc3Vic2VjdGlvbiBhcGkvdXRpbHM6UHJvcGVydGllcyAgW2Fib3V0LXByb3BlcnRpZXNdXHJcbiAqL1xyXG5mdW5jdGlvbiBjaGVja1R5cGUodmFsdWUsIHR5cGUsIG5hbWUpIHtcclxuICAgIGNvbnN0IHR5cGVzID0gdHlwZS5zcGxpdChcInxcIikubWFwKHQgPT4gdC50cmltKCkpO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0eXBlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIFwiYW55XCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIGNhc2UgXCJiaWdpbnRcIjpcclxuICAgICAgICAgICAgY2FzZSBcImJvb2xlYW5cIjpcclxuICAgICAgICAgICAgY2FzZSBcIm51bWJlclwiOlxyXG4gICAgICAgICAgICBjYXNlIFwic3RyaW5nXCI6XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mICh2YWx1ZSkgPT09IHR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoYGludmFsaWQgdmFsdWUgZm9yIHR5cGUgJHt0eXBlfWApO1xyXG4gICAgZXJyb3IuY29kZSA9IFwiSU5WQUxJRF9BUkdVTUVOVFwiO1xyXG4gICAgZXJyb3IuYXJndW1lbnQgPSBgdmFsdWUuJHtuYW1lfWA7XHJcbiAgICBlcnJvci52YWx1ZSA9IHZhbHVlO1xyXG4gICAgdGhyb3cgZXJyb3I7XHJcbn1cclxuLyoqXHJcbiAqICBSZXNvbHZlcyB0byBhIG5ldyBvYmplY3QgdGhhdCBpcyBhIGNvcHkgb2YgJSV2YWx1ZSUlLCBidXQgd2l0aCBhbGxcclxuICogIHZhbHVlcyByZXNvbHZlZC5cclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZXNvbHZlUHJvcGVydGllcyh2YWx1ZSkge1xyXG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlKTtcclxuICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBQcm9taXNlLmFsbChrZXlzLm1hcCgoaykgPT4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlW2tdKSkpO1xyXG4gICAgcmV0dXJuIHJlc3VsdHMucmVkdWNlKChhY2N1bSwgdiwgaW5kZXgpID0+IHtcclxuICAgICAgICBhY2N1bVtrZXlzW2luZGV4XV0gPSB2O1xyXG4gICAgICAgIHJldHVybiBhY2N1bTtcclxuICAgIH0sIHt9KTtcclxufVxyXG4vKipcclxuICogIEFzc2lnbnMgdGhlICUldmFsdWVzJSUgdG8gJSV0YXJnZXQlJSBhcyByZWFkLW9ubHkgdmFsdWVzLlxyXG4gKlxyXG4gKiAgSXQgJSV0eXBlcyUlIGlzIHNwZWNpZmllZCwgdGhlIHZhbHVlcyBhcmUgY2hlY2tlZC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgdmFsdWVzLCB0eXBlcykge1xyXG4gICAgZm9yIChsZXQga2V5IGluIHZhbHVlcykge1xyXG4gICAgICAgIGxldCB2YWx1ZSA9IHZhbHVlc1trZXldO1xyXG4gICAgICAgIGNvbnN0IHR5cGUgPSAodHlwZXMgPyB0eXBlc1trZXldIDogbnVsbCk7XHJcbiAgICAgICAgaWYgKHR5cGUpIHtcclxuICAgICAgICAgICAgY2hlY2tUeXBlKHZhbHVlLCB0eXBlLCBrZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWUsIHdyaXRhYmxlOiBmYWxzZSB9KTtcclxuICAgIH1cclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm9wZXJ0aWVzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/properties.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/rlp-decode.js":
/*!*********************************************************!*\
  !*** ./node_modules/ethers/lib.esm/utils/rlp-decode.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeRlp: () => (/* binding */ decodeRlp)\n/* harmony export */ });\n/* harmony import */ var _data_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./data.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/data.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/errors.js\");\n//See: https://github.com/ethereum/wiki/wiki/RLP\r\n\r\n\r\n\r\nfunction hexlifyByte(value) {\r\n    let result = value.toString(16);\r\n    while (result.length < 2) {\r\n        result = \"0\" + result;\r\n    }\r\n    return \"0x\" + result;\r\n}\r\nfunction unarrayifyInteger(data, offset, length) {\r\n    let result = 0;\r\n    for (let i = 0; i < length; i++) {\r\n        result = (result * 256) + data[offset + i];\r\n    }\r\n    return result;\r\n}\r\nfunction _decodeChildren(data, offset, childOffset, length) {\r\n    const result = [];\r\n    while (childOffset < offset + 1 + length) {\r\n        const decoded = _decode(data, childOffset);\r\n        result.push(decoded.result);\r\n        childOffset += decoded.consumed;\r\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assert)(childOffset <= offset + 1 + length, \"child data too short\", \"BUFFER_OVERRUN\", {\r\n            buffer: data, length, offset\r\n        });\r\n    }\r\n    return { consumed: (1 + length), result: result };\r\n}\r\n// returns { consumed: number, result: Object }\r\nfunction _decode(data, offset) {\r\n    (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assert)(data.length !== 0, \"data too short\", \"BUFFER_OVERRUN\", {\r\n        buffer: data, length: 0, offset: 1\r\n    });\r\n    const checkOffset = (offset) => {\r\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assert)(offset <= data.length, \"data short segment too short\", \"BUFFER_OVERRUN\", {\r\n            buffer: data, length: data.length, offset\r\n        });\r\n    };\r\n    // Array with extra length prefix\r\n    if (data[offset] >= 0xf8) {\r\n        const lengthLength = data[offset] - 0xf7;\r\n        checkOffset(offset + 1 + lengthLength);\r\n        const length = unarrayifyInteger(data, offset + 1, lengthLength);\r\n        checkOffset(offset + 1 + lengthLength + length);\r\n        return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);\r\n    }\r\n    else if (data[offset] >= 0xc0) {\r\n        const length = data[offset] - 0xc0;\r\n        checkOffset(offset + 1 + length);\r\n        return _decodeChildren(data, offset, offset + 1, length);\r\n    }\r\n    else if (data[offset] >= 0xb8) {\r\n        const lengthLength = data[offset] - 0xb7;\r\n        checkOffset(offset + 1 + lengthLength);\r\n        const length = unarrayifyInteger(data, offset + 1, lengthLength);\r\n        checkOffset(offset + 1 + lengthLength + length);\r\n        const result = (0,_data_js__WEBPACK_IMPORTED_MODULE_1__.hexlify)(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));\r\n        return { consumed: (1 + lengthLength + length), result: result };\r\n    }\r\n    else if (data[offset] >= 0x80) {\r\n        const length = data[offset] - 0x80;\r\n        checkOffset(offset + 1 + length);\r\n        const result = (0,_data_js__WEBPACK_IMPORTED_MODULE_1__.hexlify)(data.slice(offset + 1, offset + 1 + length));\r\n        return { consumed: (1 + length), result: result };\r\n    }\r\n    return { consumed: 1, result: hexlifyByte(data[offset]) };\r\n}\r\n/**\r\n *  Decodes %%data%% into the structured data it represents.\r\n */\r\nfunction decodeRlp(_data) {\r\n    const data = (0,_data_js__WEBPACK_IMPORTED_MODULE_1__.getBytes)(_data, \"data\");\r\n    const decoded = _decode(data, 0);\r\n    (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(decoded.consumed === data.length, \"unexpected junk after rlp payload\", \"data\", _data);\r\n    return decoded.result;\r\n}\r\n//# sourceMappingURL=rlp-decode.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS91dGlscy9ybHAtZGVjb2RlLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ29DO0FBQ2lCO0FBQ2hCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixZQUFZO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxrREFBTTtBQUNkO0FBQ0EsU0FBUztBQUNUO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsSUFBSSxrREFBTTtBQUNWO0FBQ0EsS0FBSztBQUNMO0FBQ0EsUUFBUSxrREFBTTtBQUNkO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLGlEQUFPO0FBQzlCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixpREFBTztBQUM5QixpQkFBaUI7QUFDakI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLGlCQUFpQixrREFBUTtBQUN6QjtBQUNBLElBQUksMERBQWM7QUFDbEI7QUFDQTtBQUNBIiwic291cmNlcyI6WyJEOlxcRG9fYW4yXFxsZW5kaHViX3YyXFxsZW5kaHViLWZyb250ZW5kLW5leHRqc1xcbm9kZV9tb2R1bGVzXFxldGhlcnNcXGxpYi5lc21cXHV0aWxzXFxybHAtZGVjb2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vd2lraS93aWtpL1JMUFxyXG5pbXBvcnQgeyBoZXhsaWZ5IH0gZnJvbSBcIi4vZGF0YS5qc1wiO1xyXG5pbXBvcnQgeyBhc3NlcnQsIGFzc2VydEFyZ3VtZW50IH0gZnJvbSBcIi4vZXJyb3JzLmpzXCI7XHJcbmltcG9ydCB7IGdldEJ5dGVzIH0gZnJvbSBcIi4vZGF0YS5qc1wiO1xyXG5mdW5jdGlvbiBoZXhsaWZ5Qnl0ZSh2YWx1ZSkge1xyXG4gICAgbGV0IHJlc3VsdCA9IHZhbHVlLnRvU3RyaW5nKDE2KTtcclxuICAgIHdoaWxlIChyZXN1bHQubGVuZ3RoIDwgMikge1xyXG4gICAgICAgIHJlc3VsdCA9IFwiMFwiICsgcmVzdWx0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFwiMHhcIiArIHJlc3VsdDtcclxufVxyXG5mdW5jdGlvbiB1bmFycmF5aWZ5SW50ZWdlcihkYXRhLCBvZmZzZXQsIGxlbmd0aCkge1xyXG4gICAgbGV0IHJlc3VsdCA9IDA7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgcmVzdWx0ID0gKHJlc3VsdCAqIDI1NikgKyBkYXRhW29mZnNldCArIGldO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5mdW5jdGlvbiBfZGVjb2RlQ2hpbGRyZW4oZGF0YSwgb2Zmc2V0LCBjaGlsZE9mZnNldCwgbGVuZ3RoKSB7XHJcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcclxuICAgIHdoaWxlIChjaGlsZE9mZnNldCA8IG9mZnNldCArIDEgKyBsZW5ndGgpIHtcclxuICAgICAgICBjb25zdCBkZWNvZGVkID0gX2RlY29kZShkYXRhLCBjaGlsZE9mZnNldCk7XHJcbiAgICAgICAgcmVzdWx0LnB1c2goZGVjb2RlZC5yZXN1bHQpO1xyXG4gICAgICAgIGNoaWxkT2Zmc2V0ICs9IGRlY29kZWQuY29uc3VtZWQ7XHJcbiAgICAgICAgYXNzZXJ0KGNoaWxkT2Zmc2V0IDw9IG9mZnNldCArIDEgKyBsZW5ndGgsIFwiY2hpbGQgZGF0YSB0b28gc2hvcnRcIiwgXCJCVUZGRVJfT1ZFUlJVTlwiLCB7XHJcbiAgICAgICAgICAgIGJ1ZmZlcjogZGF0YSwgbGVuZ3RoLCBvZmZzZXRcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiB7IGNvbnN1bWVkOiAoMSArIGxlbmd0aCksIHJlc3VsdDogcmVzdWx0IH07XHJcbn1cclxuLy8gcmV0dXJucyB7IGNvbnN1bWVkOiBudW1iZXIsIHJlc3VsdDogT2JqZWN0IH1cclxuZnVuY3Rpb24gX2RlY29kZShkYXRhLCBvZmZzZXQpIHtcclxuICAgIGFzc2VydChkYXRhLmxlbmd0aCAhPT0gMCwgXCJkYXRhIHRvbyBzaG9ydFwiLCBcIkJVRkZFUl9PVkVSUlVOXCIsIHtcclxuICAgICAgICBidWZmZXI6IGRhdGEsIGxlbmd0aDogMCwgb2Zmc2V0OiAxXHJcbiAgICB9KTtcclxuICAgIGNvbnN0IGNoZWNrT2Zmc2V0ID0gKG9mZnNldCkgPT4ge1xyXG4gICAgICAgIGFzc2VydChvZmZzZXQgPD0gZGF0YS5sZW5ndGgsIFwiZGF0YSBzaG9ydCBzZWdtZW50IHRvbyBzaG9ydFwiLCBcIkJVRkZFUl9PVkVSUlVOXCIsIHtcclxuICAgICAgICAgICAgYnVmZmVyOiBkYXRhLCBsZW5ndGg6IGRhdGEubGVuZ3RoLCBvZmZzZXRcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvLyBBcnJheSB3aXRoIGV4dHJhIGxlbmd0aCBwcmVmaXhcclxuICAgIGlmIChkYXRhW29mZnNldF0gPj0gMHhmOCkge1xyXG4gICAgICAgIGNvbnN0IGxlbmd0aExlbmd0aCA9IGRhdGFbb2Zmc2V0XSAtIDB4Zjc7XHJcbiAgICAgICAgY2hlY2tPZmZzZXQob2Zmc2V0ICsgMSArIGxlbmd0aExlbmd0aCk7XHJcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gdW5hcnJheWlmeUludGVnZXIoZGF0YSwgb2Zmc2V0ICsgMSwgbGVuZ3RoTGVuZ3RoKTtcclxuICAgICAgICBjaGVja09mZnNldChvZmZzZXQgKyAxICsgbGVuZ3RoTGVuZ3RoICsgbGVuZ3RoKTtcclxuICAgICAgICByZXR1cm4gX2RlY29kZUNoaWxkcmVuKGRhdGEsIG9mZnNldCwgb2Zmc2V0ICsgMSArIGxlbmd0aExlbmd0aCwgbGVuZ3RoTGVuZ3RoICsgbGVuZ3RoKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGRhdGFbb2Zmc2V0XSA+PSAweGMwKSB7XHJcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gZGF0YVtvZmZzZXRdIC0gMHhjMDtcclxuICAgICAgICBjaGVja09mZnNldChvZmZzZXQgKyAxICsgbGVuZ3RoKTtcclxuICAgICAgICByZXR1cm4gX2RlY29kZUNoaWxkcmVuKGRhdGEsIG9mZnNldCwgb2Zmc2V0ICsgMSwgbGVuZ3RoKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGRhdGFbb2Zmc2V0XSA+PSAweGI4KSB7XHJcbiAgICAgICAgY29uc3QgbGVuZ3RoTGVuZ3RoID0gZGF0YVtvZmZzZXRdIC0gMHhiNztcclxuICAgICAgICBjaGVja09mZnNldChvZmZzZXQgKyAxICsgbGVuZ3RoTGVuZ3RoKTtcclxuICAgICAgICBjb25zdCBsZW5ndGggPSB1bmFycmF5aWZ5SW50ZWdlcihkYXRhLCBvZmZzZXQgKyAxLCBsZW5ndGhMZW5ndGgpO1xyXG4gICAgICAgIGNoZWNrT2Zmc2V0KG9mZnNldCArIDEgKyBsZW5ndGhMZW5ndGggKyBsZW5ndGgpO1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGhleGxpZnkoZGF0YS5zbGljZShvZmZzZXQgKyAxICsgbGVuZ3RoTGVuZ3RoLCBvZmZzZXQgKyAxICsgbGVuZ3RoTGVuZ3RoICsgbGVuZ3RoKSk7XHJcbiAgICAgICAgcmV0dXJuIHsgY29uc3VtZWQ6ICgxICsgbGVuZ3RoTGVuZ3RoICsgbGVuZ3RoKSwgcmVzdWx0OiByZXN1bHQgfTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGRhdGFbb2Zmc2V0XSA+PSAweDgwKSB7XHJcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gZGF0YVtvZmZzZXRdIC0gMHg4MDtcclxuICAgICAgICBjaGVja09mZnNldChvZmZzZXQgKyAxICsgbGVuZ3RoKTtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBoZXhsaWZ5KGRhdGEuc2xpY2Uob2Zmc2V0ICsgMSwgb2Zmc2V0ICsgMSArIGxlbmd0aCkpO1xyXG4gICAgICAgIHJldHVybiB7IGNvbnN1bWVkOiAoMSArIGxlbmd0aCksIHJlc3VsdDogcmVzdWx0IH07XHJcbiAgICB9XHJcbiAgICByZXR1cm4geyBjb25zdW1lZDogMSwgcmVzdWx0OiBoZXhsaWZ5Qnl0ZShkYXRhW29mZnNldF0pIH07XHJcbn1cclxuLyoqXHJcbiAqICBEZWNvZGVzICUlZGF0YSUlIGludG8gdGhlIHN0cnVjdHVyZWQgZGF0YSBpdCByZXByZXNlbnRzLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZVJscChfZGF0YSkge1xyXG4gICAgY29uc3QgZGF0YSA9IGdldEJ5dGVzKF9kYXRhLCBcImRhdGFcIik7XHJcbiAgICBjb25zdCBkZWNvZGVkID0gX2RlY29kZShkYXRhLCAwKTtcclxuICAgIGFzc2VydEFyZ3VtZW50KGRlY29kZWQuY29uc3VtZWQgPT09IGRhdGEubGVuZ3RoLCBcInVuZXhwZWN0ZWQganVuayBhZnRlciBybHAgcGF5bG9hZFwiLCBcImRhdGFcIiwgX2RhdGEpO1xyXG4gICAgcmV0dXJuIGRlY29kZWQucmVzdWx0O1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJscC1kZWNvZGUuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/rlp-decode.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/rlp-encode.js":
/*!*********************************************************!*\
  !*** ./node_modules/ethers/lib.esm/utils/rlp-encode.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encodeRlp: () => (/* binding */ encodeRlp)\n/* harmony export */ });\n/* harmony import */ var _data_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./data.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/data.js\");\n//See: https://github.com/ethereum/wiki/wiki/RLP\r\n\r\nfunction arrayifyInteger(value) {\r\n    const result = [];\r\n    while (value) {\r\n        result.unshift(value & 0xff);\r\n        value >>= 8;\r\n    }\r\n    return result;\r\n}\r\nfunction _encode(object) {\r\n    if (Array.isArray(object)) {\r\n        let payload = [];\r\n        object.forEach(function (child) {\r\n            payload = payload.concat(_encode(child));\r\n        });\r\n        if (payload.length <= 55) {\r\n            payload.unshift(0xc0 + payload.length);\r\n            return payload;\r\n        }\r\n        const length = arrayifyInteger(payload.length);\r\n        length.unshift(0xf7 + length.length);\r\n        return length.concat(payload);\r\n    }\r\n    const data = Array.prototype.slice.call((0,_data_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(object, \"object\"));\r\n    if (data.length === 1 && data[0] <= 0x7f) {\r\n        return data;\r\n    }\r\n    else if (data.length <= 55) {\r\n        data.unshift(0x80 + data.length);\r\n        return data;\r\n    }\r\n    const length = arrayifyInteger(data.length);\r\n    length.unshift(0xb7 + length.length);\r\n    return length.concat(data);\r\n}\r\nconst nibbles = \"0123456789abcdef\";\r\n/**\r\n *  Encodes %%object%% as an RLP-encoded [[DataHexString]].\r\n */\r\nfunction encodeRlp(object) {\r\n    let result = \"0x\";\r\n    for (const v of _encode(object)) {\r\n        result += nibbles[v >> 4];\r\n        result += nibbles[v & 0xf];\r\n    }\r\n    return result;\r\n}\r\n//# sourceMappingURL=rlp-encode.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS91dGlscy9ybHAtZW5jb2RlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxrREFBUTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkQ6XFxEb19hbjJcXGxlbmRodWJfdjJcXGxlbmRodWItZnJvbnRlbmQtbmV4dGpzXFxub2RlX21vZHVsZXNcXGV0aGVyc1xcbGliLmVzbVxcdXRpbHNcXHJscC1lbmNvZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy9TZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS93aWtpL3dpa2kvUkxQXHJcbmltcG9ydCB7IGdldEJ5dGVzIH0gZnJvbSBcIi4vZGF0YS5qc1wiO1xyXG5mdW5jdGlvbiBhcnJheWlmeUludGVnZXIodmFsdWUpIHtcclxuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xyXG4gICAgd2hpbGUgKHZhbHVlKSB7XHJcbiAgICAgICAgcmVzdWx0LnVuc2hpZnQodmFsdWUgJiAweGZmKTtcclxuICAgICAgICB2YWx1ZSA+Pj0gODtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuZnVuY3Rpb24gX2VuY29kZShvYmplY3QpIHtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KG9iamVjdCkpIHtcclxuICAgICAgICBsZXQgcGF5bG9hZCA9IFtdO1xyXG4gICAgICAgIG9iamVjdC5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xyXG4gICAgICAgICAgICBwYXlsb2FkID0gcGF5bG9hZC5jb25jYXQoX2VuY29kZShjaGlsZCkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmIChwYXlsb2FkLmxlbmd0aCA8PSA1NSkge1xyXG4gICAgICAgICAgICBwYXlsb2FkLnVuc2hpZnQoMHhjMCArIHBheWxvYWQubGVuZ3RoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHBheWxvYWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IGFycmF5aWZ5SW50ZWdlcihwYXlsb2FkLmxlbmd0aCk7XHJcbiAgICAgICAgbGVuZ3RoLnVuc2hpZnQoMHhmNyArIGxlbmd0aC5sZW5ndGgpO1xyXG4gICAgICAgIHJldHVybiBsZW5ndGguY29uY2F0KHBheWxvYWQpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZGF0YSA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGdldEJ5dGVzKG9iamVjdCwgXCJvYmplY3RcIikpO1xyXG4gICAgaWYgKGRhdGEubGVuZ3RoID09PSAxICYmIGRhdGFbMF0gPD0gMHg3Zikge1xyXG4gICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoZGF0YS5sZW5ndGggPD0gNTUpIHtcclxuICAgICAgICBkYXRhLnVuc2hpZnQoMHg4MCArIGRhdGEubGVuZ3RoKTtcclxuICAgICAgICByZXR1cm4gZGF0YTtcclxuICAgIH1cclxuICAgIGNvbnN0IGxlbmd0aCA9IGFycmF5aWZ5SW50ZWdlcihkYXRhLmxlbmd0aCk7XHJcbiAgICBsZW5ndGgudW5zaGlmdCgweGI3ICsgbGVuZ3RoLmxlbmd0aCk7XHJcbiAgICByZXR1cm4gbGVuZ3RoLmNvbmNhdChkYXRhKTtcclxufVxyXG5jb25zdCBuaWJibGVzID0gXCIwMTIzNDU2Nzg5YWJjZGVmXCI7XHJcbi8qKlxyXG4gKiAgRW5jb2RlcyAlJW9iamVjdCUlIGFzIGFuIFJMUC1lbmNvZGVkIFtbRGF0YUhleFN0cmluZ11dLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZVJscChvYmplY3QpIHtcclxuICAgIGxldCByZXN1bHQgPSBcIjB4XCI7XHJcbiAgICBmb3IgKGNvbnN0IHYgb2YgX2VuY29kZShvYmplY3QpKSB7XHJcbiAgICAgICAgcmVzdWx0ICs9IG5pYmJsZXNbdiA+PiA0XTtcclxuICAgICAgICByZXN1bHQgKz0gbmliYmxlc1t2ICYgMHhmXTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmxwLWVuY29kZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/rlp-encode.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/units.js":
/*!****************************************************!*\
  !*** ./node_modules/ethers/lib.esm/utils/units.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatEther: () => (/* binding */ formatEther),\n/* harmony export */   formatUnits: () => (/* binding */ formatUnits),\n/* harmony export */   parseEther: () => (/* binding */ parseEther),\n/* harmony export */   parseUnits: () => (/* binding */ parseUnits)\n/* harmony export */ });\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/errors.js\");\n/* harmony import */ var _fixednumber_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./fixednumber.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/fixednumber.js\");\n/* harmony import */ var _maths_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./maths.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/maths.js\");\n/**\r\n *  Most interactions with Ethereum requires integer values, which use\r\n *  the smallest magnitude unit.\r\n *\r\n *  For example, imagine dealing with dollars and cents. Since dollars\r\n *  are divisible, non-integer values are possible, such as ``$10.77``.\r\n *  By using the smallest indivisible unit (i.e. cents), the value can\r\n *  be kept as the integer ``1077``.\r\n *\r\n *  When receiving decimal input from the user (as a decimal string),\r\n *  the value should be converted to an integer and when showing a user\r\n *  a value, the integer value should be converted to a decimal string.\r\n *\r\n *  This creates a clear distinction, between values to be used by code\r\n *  (integers) and values used for display logic to users (decimals).\r\n *\r\n *  The native unit in Ethereum, //ether// is divisible to 18 decimal places,\r\n *  where each individual unit is called a //wei//.\r\n *\r\n *  @_subsection api/utils:Unit Conversion  [about-units]\r\n */\r\n\r\n\r\n\r\nconst names = [\r\n    \"wei\",\r\n    \"kwei\",\r\n    \"mwei\",\r\n    \"gwei\",\r\n    \"szabo\",\r\n    \"finney\",\r\n    \"ether\",\r\n];\r\n/**\r\n *  Converts %%value%% into a //decimal string//, assuming %%unit%% decimal\r\n *  places. The %%unit%% may be the number of decimal places or the name of\r\n *  a unit (e.g. ``\"gwei\"`` for 9 decimal places).\r\n *\r\n */\r\nfunction formatUnits(value, unit) {\r\n    let decimals = 18;\r\n    if (typeof (unit) === \"string\") {\r\n        const index = names.indexOf(unit);\r\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(index >= 0, \"invalid unit\", \"unit\", unit);\r\n        decimals = 3 * index;\r\n    }\r\n    else if (unit != null) {\r\n        decimals = (0,_maths_js__WEBPACK_IMPORTED_MODULE_1__.getNumber)(unit, \"unit\");\r\n    }\r\n    return _fixednumber_js__WEBPACK_IMPORTED_MODULE_2__.FixedNumber.fromValue(value, decimals, { decimals, width: 512 }).toString();\r\n}\r\n/**\r\n *  Converts the //decimal string// %%value%% to a BigInt, assuming\r\n *  %%unit%% decimal places. The %%unit%% may the number of decimal places\r\n *  or the name of a unit (e.g. ``\"gwei\"`` for 9 decimal places).\r\n */\r\nfunction parseUnits(value, unit) {\r\n    (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(typeof (value) === \"string\", \"value must be a string\", \"value\", value);\r\n    let decimals = 18;\r\n    if (typeof (unit) === \"string\") {\r\n        const index = names.indexOf(unit);\r\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(index >= 0, \"invalid unit\", \"unit\", unit);\r\n        decimals = 3 * index;\r\n    }\r\n    else if (unit != null) {\r\n        decimals = (0,_maths_js__WEBPACK_IMPORTED_MODULE_1__.getNumber)(unit, \"unit\");\r\n    }\r\n    return _fixednumber_js__WEBPACK_IMPORTED_MODULE_2__.FixedNumber.fromString(value, { decimals, width: 512 }).value;\r\n}\r\n/**\r\n *  Converts %%value%% into a //decimal string// using 18 decimal places.\r\n */\r\nfunction formatEther(wei) {\r\n    return formatUnits(wei, 18);\r\n}\r\n/**\r\n *  Converts the //decimal string// %%ether%% to a BigInt, using 18\r\n *  decimal places.\r\n */\r\nfunction parseEther(ether) {\r\n    return parseUnits(ether, 18);\r\n}\r\n//# sourceMappingURL=units.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS91dGlscy91bml0cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQzZDO0FBQ0U7QUFDUjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBLFFBQVEsMERBQWM7QUFDdEI7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLG9EQUFTO0FBQzVCO0FBQ0EsV0FBVyx3REFBVyw4QkFBOEIsc0JBQXNCO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsSUFBSSwwREFBYztBQUNsQjtBQUNBO0FBQ0E7QUFDQSxRQUFRLDBEQUFjO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixvREFBUztBQUM1QjtBQUNBLFdBQVcsd0RBQVcscUJBQXFCLHNCQUFzQjtBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkQ6XFxEb19hbjJcXGxlbmRodWJfdjJcXGxlbmRodWItZnJvbnRlbmQtbmV4dGpzXFxub2RlX21vZHVsZXNcXGV0aGVyc1xcbGliLmVzbVxcdXRpbHNcXHVuaXRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiAgTW9zdCBpbnRlcmFjdGlvbnMgd2l0aCBFdGhlcmV1bSByZXF1aXJlcyBpbnRlZ2VyIHZhbHVlcywgd2hpY2ggdXNlXHJcbiAqICB0aGUgc21hbGxlc3QgbWFnbml0dWRlIHVuaXQuXHJcbiAqXHJcbiAqICBGb3IgZXhhbXBsZSwgaW1hZ2luZSBkZWFsaW5nIHdpdGggZG9sbGFycyBhbmQgY2VudHMuIFNpbmNlIGRvbGxhcnNcclxuICogIGFyZSBkaXZpc2libGUsIG5vbi1pbnRlZ2VyIHZhbHVlcyBhcmUgcG9zc2libGUsIHN1Y2ggYXMgYGAkMTAuNzdgYC5cclxuICogIEJ5IHVzaW5nIHRoZSBzbWFsbGVzdCBpbmRpdmlzaWJsZSB1bml0IChpLmUuIGNlbnRzKSwgdGhlIHZhbHVlIGNhblxyXG4gKiAgYmUga2VwdCBhcyB0aGUgaW50ZWdlciBgYDEwNzdgYC5cclxuICpcclxuICogIFdoZW4gcmVjZWl2aW5nIGRlY2ltYWwgaW5wdXQgZnJvbSB0aGUgdXNlciAoYXMgYSBkZWNpbWFsIHN0cmluZyksXHJcbiAqICB0aGUgdmFsdWUgc2hvdWxkIGJlIGNvbnZlcnRlZCB0byBhbiBpbnRlZ2VyIGFuZCB3aGVuIHNob3dpbmcgYSB1c2VyXHJcbiAqICBhIHZhbHVlLCB0aGUgaW50ZWdlciB2YWx1ZSBzaG91bGQgYmUgY29udmVydGVkIHRvIGEgZGVjaW1hbCBzdHJpbmcuXHJcbiAqXHJcbiAqICBUaGlzIGNyZWF0ZXMgYSBjbGVhciBkaXN0aW5jdGlvbiwgYmV0d2VlbiB2YWx1ZXMgdG8gYmUgdXNlZCBieSBjb2RlXHJcbiAqICAoaW50ZWdlcnMpIGFuZCB2YWx1ZXMgdXNlZCBmb3IgZGlzcGxheSBsb2dpYyB0byB1c2VycyAoZGVjaW1hbHMpLlxyXG4gKlxyXG4gKiAgVGhlIG5hdGl2ZSB1bml0IGluIEV0aGVyZXVtLCAvL2V0aGVyLy8gaXMgZGl2aXNpYmxlIHRvIDE4IGRlY2ltYWwgcGxhY2VzLFxyXG4gKiAgd2hlcmUgZWFjaCBpbmRpdmlkdWFsIHVuaXQgaXMgY2FsbGVkIGEgLy93ZWkvLy5cclxuICpcclxuICogIEBfc3Vic2VjdGlvbiBhcGkvdXRpbHM6VW5pdCBDb252ZXJzaW9uICBbYWJvdXQtdW5pdHNdXHJcbiAqL1xyXG5pbXBvcnQgeyBhc3NlcnRBcmd1bWVudCB9IGZyb20gXCIuL2Vycm9ycy5qc1wiO1xyXG5pbXBvcnQgeyBGaXhlZE51bWJlciB9IGZyb20gXCIuL2ZpeGVkbnVtYmVyLmpzXCI7XHJcbmltcG9ydCB7IGdldE51bWJlciB9IGZyb20gXCIuL21hdGhzLmpzXCI7XHJcbmNvbnN0IG5hbWVzID0gW1xyXG4gICAgXCJ3ZWlcIixcclxuICAgIFwia3dlaVwiLFxyXG4gICAgXCJtd2VpXCIsXHJcbiAgICBcImd3ZWlcIixcclxuICAgIFwic3phYm9cIixcclxuICAgIFwiZmlubmV5XCIsXHJcbiAgICBcImV0aGVyXCIsXHJcbl07XHJcbi8qKlxyXG4gKiAgQ29udmVydHMgJSV2YWx1ZSUlIGludG8gYSAvL2RlY2ltYWwgc3RyaW5nLy8sIGFzc3VtaW5nICUldW5pdCUlIGRlY2ltYWxcclxuICogIHBsYWNlcy4gVGhlICUldW5pdCUlIG1heSBiZSB0aGUgbnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzIG9yIHRoZSBuYW1lIG9mXHJcbiAqICBhIHVuaXQgKGUuZy4gYGBcImd3ZWlcImBgIGZvciA5IGRlY2ltYWwgcGxhY2VzKS5cclxuICpcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRVbml0cyh2YWx1ZSwgdW5pdCkge1xyXG4gICAgbGV0IGRlY2ltYWxzID0gMTg7XHJcbiAgICBpZiAodHlwZW9mICh1bml0KSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIGNvbnN0IGluZGV4ID0gbmFtZXMuaW5kZXhPZih1bml0KTtcclxuICAgICAgICBhc3NlcnRBcmd1bWVudChpbmRleCA+PSAwLCBcImludmFsaWQgdW5pdFwiLCBcInVuaXRcIiwgdW5pdCk7XHJcbiAgICAgICAgZGVjaW1hbHMgPSAzICogaW5kZXg7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh1bml0ICE9IG51bGwpIHtcclxuICAgICAgICBkZWNpbWFscyA9IGdldE51bWJlcih1bml0LCBcInVuaXRcIik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gRml4ZWROdW1iZXIuZnJvbVZhbHVlKHZhbHVlLCBkZWNpbWFscywgeyBkZWNpbWFscywgd2lkdGg6IDUxMiB9KS50b1N0cmluZygpO1xyXG59XHJcbi8qKlxyXG4gKiAgQ29udmVydHMgdGhlIC8vZGVjaW1hbCBzdHJpbmcvLyAlJXZhbHVlJSUgdG8gYSBCaWdJbnQsIGFzc3VtaW5nXHJcbiAqICAlJXVuaXQlJSBkZWNpbWFsIHBsYWNlcy4gVGhlICUldW5pdCUlIG1heSB0aGUgbnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzXHJcbiAqICBvciB0aGUgbmFtZSBvZiBhIHVuaXQgKGUuZy4gYGBcImd3ZWlcImBgIGZvciA5IGRlY2ltYWwgcGxhY2VzKS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVVuaXRzKHZhbHVlLCB1bml0KSB7XHJcbiAgICBhc3NlcnRBcmd1bWVudCh0eXBlb2YgKHZhbHVlKSA9PT0gXCJzdHJpbmdcIiwgXCJ2YWx1ZSBtdXN0IGJlIGEgc3RyaW5nXCIsIFwidmFsdWVcIiwgdmFsdWUpO1xyXG4gICAgbGV0IGRlY2ltYWxzID0gMTg7XHJcbiAgICBpZiAodHlwZW9mICh1bml0KSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIGNvbnN0IGluZGV4ID0gbmFtZXMuaW5kZXhPZih1bml0KTtcclxuICAgICAgICBhc3NlcnRBcmd1bWVudChpbmRleCA+PSAwLCBcImludmFsaWQgdW5pdFwiLCBcInVuaXRcIiwgdW5pdCk7XHJcbiAgICAgICAgZGVjaW1hbHMgPSAzICogaW5kZXg7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh1bml0ICE9IG51bGwpIHtcclxuICAgICAgICBkZWNpbWFscyA9IGdldE51bWJlcih1bml0LCBcInVuaXRcIik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gRml4ZWROdW1iZXIuZnJvbVN0cmluZyh2YWx1ZSwgeyBkZWNpbWFscywgd2lkdGg6IDUxMiB9KS52YWx1ZTtcclxufVxyXG4vKipcclxuICogIENvbnZlcnRzICUldmFsdWUlJSBpbnRvIGEgLy9kZWNpbWFsIHN0cmluZy8vIHVzaW5nIDE4IGRlY2ltYWwgcGxhY2VzLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdEV0aGVyKHdlaSkge1xyXG4gICAgcmV0dXJuIGZvcm1hdFVuaXRzKHdlaSwgMTgpO1xyXG59XHJcbi8qKlxyXG4gKiAgQ29udmVydHMgdGhlIC8vZGVjaW1hbCBzdHJpbmcvLyAlJWV0aGVyJSUgdG8gYSBCaWdJbnQsIHVzaW5nIDE4XHJcbiAqICBkZWNpbWFsIHBsYWNlcy5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUV0aGVyKGV0aGVyKSB7XHJcbiAgICByZXR1cm4gcGFyc2VVbml0cyhldGhlciwgMTgpO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVuaXRzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/units.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/utf8.js":
/*!***************************************************!*\
  !*** ./node_modules/ethers/lib.esm/utils/utf8.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Utf8ErrorFuncs: () => (/* binding */ Utf8ErrorFuncs),\n/* harmony export */   toUtf8Bytes: () => (/* binding */ toUtf8Bytes),\n/* harmony export */   toUtf8CodePoints: () => (/* binding */ toUtf8CodePoints),\n/* harmony export */   toUtf8String: () => (/* binding */ toUtf8String)\n/* harmony export */ });\n/* harmony import */ var _data_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./data.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/data.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/errors.js\");\n/**\r\n *  Using strings in Ethereum (or any security-basd system) requires\r\n *  additional care. These utilities attempt to mitigate some of the\r\n *  safety issues as well as provide the ability to recover and analyse\r\n *  strings.\r\n *\r\n *  @_subsection api/utils:Strings and UTF-8  [about-strings]\r\n */\r\n\r\n\r\nfunction errorFunc(reason, offset, bytes, output, badCodepoint) {\r\n    (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, `invalid codepoint at offset ${offset}; ${reason}`, \"bytes\", bytes);\r\n}\r\nfunction ignoreFunc(reason, offset, bytes, output, badCodepoint) {\r\n    // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes\r\n    if (reason === \"BAD_PREFIX\" || reason === \"UNEXPECTED_CONTINUE\") {\r\n        let i = 0;\r\n        for (let o = offset + 1; o < bytes.length; o++) {\r\n            if (bytes[o] >> 6 !== 0x02) {\r\n                break;\r\n            }\r\n            i++;\r\n        }\r\n        return i;\r\n    }\r\n    // This byte runs us past the end of the string, so just jump to the end\r\n    // (but the first byte was read already read and therefore skipped)\r\n    if (reason === \"OVERRUN\") {\r\n        return bytes.length - offset - 1;\r\n    }\r\n    // Nothing to skip\r\n    return 0;\r\n}\r\nfunction replaceFunc(reason, offset, bytes, output, badCodepoint) {\r\n    // Overlong representations are otherwise \"valid\" code points; just non-deistingtished\r\n    if (reason === \"OVERLONG\") {\r\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(typeof (badCodepoint) === \"number\", \"invalid bad code point for replacement\", \"badCodepoint\", badCodepoint);\r\n        output.push(badCodepoint);\r\n        return 0;\r\n    }\r\n    // Put the replacement character into the output\r\n    output.push(0xfffd);\r\n    // Otherwise, process as if ignoring errors\r\n    return ignoreFunc(reason, offset, bytes, output, badCodepoint);\r\n}\r\n/**\r\n *  A handful of popular, built-in UTF-8 error handling strategies.\r\n *\r\n *  **``\"error\"``** - throws on ANY illegal UTF-8 sequence or\r\n *  non-canonical (overlong) codepoints (this is the default)\r\n *\r\n *  **``\"ignore\"``** - silently drops any illegal UTF-8 sequence\r\n *  and accepts non-canonical (overlong) codepoints\r\n *\r\n *  **``\"replace\"``** - replace any illegal UTF-8 sequence with the\r\n *  UTF-8 replacement character (i.e. ``\"\\\\ufffd\"``) and accepts\r\n *  non-canonical (overlong) codepoints\r\n *\r\n *  @returns: Record<\"error\" | \"ignore\" | \"replace\", Utf8ErrorFunc>\r\n */\r\nconst Utf8ErrorFuncs = Object.freeze({\r\n    error: errorFunc,\r\n    ignore: ignoreFunc,\r\n    replace: replaceFunc\r\n});\r\n// http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499\r\nfunction getUtf8CodePoints(_bytes, onError) {\r\n    if (onError == null) {\r\n        onError = Utf8ErrorFuncs.error;\r\n    }\r\n    const bytes = (0,_data_js__WEBPACK_IMPORTED_MODULE_1__.getBytes)(_bytes, \"bytes\");\r\n    const result = [];\r\n    let i = 0;\r\n    // Invalid bytes are ignored\r\n    while (i < bytes.length) {\r\n        const c = bytes[i++];\r\n        // 0xxx xxxx\r\n        if (c >> 7 === 0) {\r\n            result.push(c);\r\n            continue;\r\n        }\r\n        // Multibyte; how many bytes left for this character?\r\n        let extraLength = null;\r\n        let overlongMask = null;\r\n        // 110x xxxx 10xx xxxx\r\n        if ((c & 0xe0) === 0xc0) {\r\n            extraLength = 1;\r\n            overlongMask = 0x7f;\r\n            // 1110 xxxx 10xx xxxx 10xx xxxx\r\n        }\r\n        else if ((c & 0xf0) === 0xe0) {\r\n            extraLength = 2;\r\n            overlongMask = 0x7ff;\r\n            // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx\r\n        }\r\n        else if ((c & 0xf8) === 0xf0) {\r\n            extraLength = 3;\r\n            overlongMask = 0xffff;\r\n        }\r\n        else {\r\n            if ((c & 0xc0) === 0x80) {\r\n                i += onError(\"UNEXPECTED_CONTINUE\", i - 1, bytes, result);\r\n            }\r\n            else {\r\n                i += onError(\"BAD_PREFIX\", i - 1, bytes, result);\r\n            }\r\n            continue;\r\n        }\r\n        // Do we have enough bytes in our data?\r\n        if (i - 1 + extraLength >= bytes.length) {\r\n            i += onError(\"OVERRUN\", i - 1, bytes, result);\r\n            continue;\r\n        }\r\n        // Remove the length prefix from the char\r\n        let res = c & ((1 << (8 - extraLength - 1)) - 1);\r\n        for (let j = 0; j < extraLength; j++) {\r\n            let nextChar = bytes[i];\r\n            // Invalid continuation byte\r\n            if ((nextChar & 0xc0) != 0x80) {\r\n                i += onError(\"MISSING_CONTINUE\", i, bytes, result);\r\n                res = null;\r\n                break;\r\n            }\r\n            ;\r\n            res = (res << 6) | (nextChar & 0x3f);\r\n            i++;\r\n        }\r\n        // See above loop for invalid continuation byte\r\n        if (res === null) {\r\n            continue;\r\n        }\r\n        // Maximum code point\r\n        if (res > 0x10ffff) {\r\n            i += onError(\"OUT_OF_RANGE\", i - 1 - extraLength, bytes, result, res);\r\n            continue;\r\n        }\r\n        // Reserved for UTF-16 surrogate halves\r\n        if (res >= 0xd800 && res <= 0xdfff) {\r\n            i += onError(\"UTF16_SURROGATE\", i - 1 - extraLength, bytes, result, res);\r\n            continue;\r\n        }\r\n        // Check for overlong sequences (more bytes than needed)\r\n        if (res <= overlongMask) {\r\n            i += onError(\"OVERLONG\", i - 1 - extraLength, bytes, result, res);\r\n            continue;\r\n        }\r\n        result.push(res);\r\n    }\r\n    return result;\r\n}\r\n// http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\r\n/**\r\n *  Returns the UTF-8 byte representation of %%str%%.\r\n *\r\n *  If %%form%% is specified, the string is normalized.\r\n */\r\nfunction toUtf8Bytes(str, form) {\r\n    (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(typeof (str) === \"string\", \"invalid string value\", \"str\", str);\r\n    if (form != null) {\r\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertNormalize)(form);\r\n        str = str.normalize(form);\r\n    }\r\n    let result = [];\r\n    for (let i = 0; i < str.length; i++) {\r\n        const c = str.charCodeAt(i);\r\n        if (c < 0x80) {\r\n            result.push(c);\r\n        }\r\n        else if (c < 0x800) {\r\n            result.push((c >> 6) | 0xc0);\r\n            result.push((c & 0x3f) | 0x80);\r\n        }\r\n        else if ((c & 0xfc00) == 0xd800) {\r\n            i++;\r\n            const c2 = str.charCodeAt(i);\r\n            (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(i < str.length && ((c2 & 0xfc00) === 0xdc00), \"invalid surrogate pair\", \"str\", str);\r\n            // Surrogate Pair\r\n            const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\r\n            result.push((pair >> 18) | 0xf0);\r\n            result.push(((pair >> 12) & 0x3f) | 0x80);\r\n            result.push(((pair >> 6) & 0x3f) | 0x80);\r\n            result.push((pair & 0x3f) | 0x80);\r\n        }\r\n        else {\r\n            result.push((c >> 12) | 0xe0);\r\n            result.push(((c >> 6) & 0x3f) | 0x80);\r\n            result.push((c & 0x3f) | 0x80);\r\n        }\r\n    }\r\n    return new Uint8Array(result);\r\n}\r\n;\r\n//export \r\nfunction _toUtf8String(codePoints) {\r\n    return codePoints.map((codePoint) => {\r\n        if (codePoint <= 0xffff) {\r\n            return String.fromCharCode(codePoint);\r\n        }\r\n        codePoint -= 0x10000;\r\n        return String.fromCharCode((((codePoint >> 10) & 0x3ff) + 0xd800), ((codePoint & 0x3ff) + 0xdc00));\r\n    }).join(\"\");\r\n}\r\n/**\r\n *  Returns the string represented by the UTF-8 data %%bytes%%.\r\n *\r\n *  When %%onError%% function is specified, it is called on UTF-8\r\n *  errors allowing recovery using the [[Utf8ErrorFunc]] API.\r\n *  (default: [error](Utf8ErrorFuncs))\r\n */\r\nfunction toUtf8String(bytes, onError) {\r\n    return _toUtf8String(getUtf8CodePoints(bytes, onError));\r\n}\r\n/**\r\n *  Returns the UTF-8 code-points for %%str%%.\r\n *\r\n *  If %%form%% is specified, the string is normalized.\r\n */\r\nfunction toUtf8CodePoints(str, form) {\r\n    return getUtf8CodePoints(toUtf8Bytes(str, form));\r\n}\r\n//# sourceMappingURL=utf8.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/utf8.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/uuid.js":
/*!***************************************************!*\
  !*** ./node_modules/ethers/lib.esm/utils/uuid.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   uuidV4: () => (/* binding */ uuidV4)\n/* harmony export */ });\n/* harmony import */ var _data_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./data.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/data.js\");\n/**\r\n *  Explain UUID and link to RFC here.\r\n *\r\n *  @_subsection: api/utils:UUID  [about-uuid]\r\n */\r\n\r\n/**\r\n *  Returns the version 4 [[link-uuid]] for the %%randomBytes%%.\r\n *\r\n *  @see: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)\r\n */\r\nfunction uuidV4(randomBytes) {\r\n    const bytes = (0,_data_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(randomBytes, \"randomBytes\");\r\n    // Section: 4.1.3:\r\n    // - time_hi_and_version[12:16] = 0b0100\r\n    bytes[6] = (bytes[6] & 0x0f) | 0x40;\r\n    // Section 4.4\r\n    // - clock_seq_hi_and_reserved[6] = 0b0\r\n    // - clock_seq_hi_and_reserved[7] = 0b1\r\n    bytes[8] = (bytes[8] & 0x3f) | 0x80;\r\n    const value = (0,_data_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(bytes);\r\n    return [\r\n        value.substring(2, 10),\r\n        value.substring(10, 14),\r\n        value.substring(14, 18),\r\n        value.substring(18, 22),\r\n        value.substring(22, 34),\r\n    ].join(\"-\");\r\n}\r\n//# sourceMappingURL=uuid.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS91dGlscy91dWlkLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUM4QztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxrQkFBa0Isa0RBQVE7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsaURBQU87QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJEOlxcRG9fYW4yXFxsZW5kaHViX3YyXFxsZW5kaHViLWZyb250ZW5kLW5leHRqc1xcbm9kZV9tb2R1bGVzXFxldGhlcnNcXGxpYi5lc21cXHV0aWxzXFx1dWlkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiAgRXhwbGFpbiBVVUlEIGFuZCBsaW5rIHRvIFJGQyBoZXJlLlxyXG4gKlxyXG4gKiAgQF9zdWJzZWN0aW9uOiBhcGkvdXRpbHM6VVVJRCAgW2Fib3V0LXV1aWRdXHJcbiAqL1xyXG5pbXBvcnQgeyBnZXRCeXRlcywgaGV4bGlmeSB9IGZyb20gXCIuL2RhdGEuanNcIjtcclxuLyoqXHJcbiAqICBSZXR1cm5zIHRoZSB2ZXJzaW9uIDQgW1tsaW5rLXV1aWRdXSBmb3IgdGhlICUlcmFuZG9tQnl0ZXMlJS5cclxuICpcclxuICogIEBzZWU6IGh0dHBzOi8vd3d3LmlldGYub3JnL3JmYy9yZmM0MTIyLnR4dCAoU2VjdGlvbiA0LjQpXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdXVpZFY0KHJhbmRvbUJ5dGVzKSB7XHJcbiAgICBjb25zdCBieXRlcyA9IGdldEJ5dGVzKHJhbmRvbUJ5dGVzLCBcInJhbmRvbUJ5dGVzXCIpO1xyXG4gICAgLy8gU2VjdGlvbjogNC4xLjM6XHJcbiAgICAvLyAtIHRpbWVfaGlfYW5kX3ZlcnNpb25bMTI6MTZdID0gMGIwMTAwXHJcbiAgICBieXRlc1s2XSA9IChieXRlc1s2XSAmIDB4MGYpIHwgMHg0MDtcclxuICAgIC8vIFNlY3Rpb24gNC40XHJcbiAgICAvLyAtIGNsb2NrX3NlcV9oaV9hbmRfcmVzZXJ2ZWRbNl0gPSAwYjBcclxuICAgIC8vIC0gY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZFs3XSA9IDBiMVxyXG4gICAgYnl0ZXNbOF0gPSAoYnl0ZXNbOF0gJiAweDNmKSB8IDB4ODA7XHJcbiAgICBjb25zdCB2YWx1ZSA9IGhleGxpZnkoYnl0ZXMpO1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgICB2YWx1ZS5zdWJzdHJpbmcoMiwgMTApLFxyXG4gICAgICAgIHZhbHVlLnN1YnN0cmluZygxMCwgMTQpLFxyXG4gICAgICAgIHZhbHVlLnN1YnN0cmluZygxNCwgMTgpLFxyXG4gICAgICAgIHZhbHVlLnN1YnN0cmluZygxOCwgMjIpLFxyXG4gICAgICAgIHZhbHVlLnN1YnN0cmluZygyMiwgMzQpLFxyXG4gICAgXS5qb2luKFwiLVwiKTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD11dWlkLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/uuid.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/wallet/base-wallet.js":
/*!***********************************************************!*\
  !*** ./node_modules/ethers/lib.esm/wallet/base-wallet.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseWallet: () => (/* binding */ BaseWallet)\n/* harmony export */ });\n/* harmony import */ var _address_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../address/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/address/index.js\");\n/* harmony import */ var _hash_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../hash/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/hash/index.js\");\n/* harmony import */ var _providers_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../providers/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/index.js\");\n/* harmony import */ var _transaction_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../transaction/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/transaction/index.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n\r\n\r\n\r\n\r\n\r\n/**\r\n *  The **BaseWallet** is a stream-lined implementation of a\r\n *  [[Signer]] that operates with a private key.\r\n *\r\n *  It is preferred to use the [[Wallet]] class, as it offers\r\n *  additional functionality and simplifies loading a variety\r\n *  of JSON formats, Mnemonic Phrases, etc.\r\n *\r\n *  This class may be of use for those attempting to implement\r\n *  a minimal Signer.\r\n */\r\nclass BaseWallet extends _providers_index_js__WEBPACK_IMPORTED_MODULE_0__.AbstractSigner {\r\n    /**\r\n     *  The wallet address.\r\n     */\r\n    address;\r\n    #signingKey;\r\n    /**\r\n     *  Creates a new BaseWallet for %%privateKey%%, optionally\r\n     *  connected to %%provider%%.\r\n     *\r\n     *  If %%provider%% is not specified, only offline methods can\r\n     *  be used.\r\n     */\r\n    constructor(privateKey, provider) {\r\n        super(provider);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(privateKey && typeof (privateKey.sign) === \"function\", \"invalid private key\", \"privateKey\", \"[ REDACTED ]\");\r\n        this.#signingKey = privateKey;\r\n        const address = (0,_transaction_index_js__WEBPACK_IMPORTED_MODULE_2__.computeAddress)(this.signingKey.publicKey);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.defineProperties)(this, { address });\r\n    }\r\n    // Store private values behind getters to reduce visibility\r\n    // in console.log\r\n    /**\r\n     *  The [[SigningKey]] used for signing payloads.\r\n     */\r\n    get signingKey() { return this.#signingKey; }\r\n    /**\r\n     *  The private key for this wallet.\r\n     */\r\n    get privateKey() { return this.signingKey.privateKey; }\r\n    async getAddress() { return this.address; }\r\n    connect(provider) {\r\n        return new BaseWallet(this.#signingKey, provider);\r\n    }\r\n    async signTransaction(tx) {\r\n        tx = (0,_providers_index_js__WEBPACK_IMPORTED_MODULE_0__.copyRequest)(tx);\r\n        // Replace any Addressable or ENS name with an address\r\n        const { to, from } = await (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.resolveProperties)({\r\n            to: (tx.to ? (0,_address_index_js__WEBPACK_IMPORTED_MODULE_3__.resolveAddress)(tx.to, this) : undefined),\r\n            from: (tx.from ? (0,_address_index_js__WEBPACK_IMPORTED_MODULE_3__.resolveAddress)(tx.from, this) : undefined)\r\n        });\r\n        if (to != null) {\r\n            tx.to = to;\r\n        }\r\n        if (from != null) {\r\n            tx.from = from;\r\n        }\r\n        if (tx.from != null) {\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)((0,_address_index_js__WEBPACK_IMPORTED_MODULE_3__.getAddress)((tx.from)) === this.address, \"transaction from address mismatch\", \"tx.from\", tx.from);\r\n            delete tx.from;\r\n        }\r\n        // Build the transaction\r\n        const btx = _transaction_index_js__WEBPACK_IMPORTED_MODULE_2__.Transaction.from(tx);\r\n        btx.signature = this.signingKey.sign(btx.unsignedHash);\r\n        return btx.serialized;\r\n    }\r\n    async signMessage(message) {\r\n        return this.signMessageSync(message);\r\n    }\r\n    // @TODO: Add a secialized signTx and signTyped sync that enforces\r\n    // all parameters are known?\r\n    /**\r\n     *  Returns the signature for %%message%% signed with this wallet.\r\n     */\r\n    signMessageSync(message) {\r\n        return this.signingKey.sign((0,_hash_index_js__WEBPACK_IMPORTED_MODULE_4__.hashMessage)(message)).serialized;\r\n    }\r\n    /**\r\n     *  Returns the Authorization for %%auth%%.\r\n     */\r\n    authorizeSync(auth) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(typeof (auth.address) === \"string\", \"invalid address for authorizeSync\", \"auth.address\", auth);\r\n        const signature = this.signingKey.sign((0,_hash_index_js__WEBPACK_IMPORTED_MODULE_4__.hashAuthorization)(auth));\r\n        return Object.assign({}, {\r\n            address: (0,_address_index_js__WEBPACK_IMPORTED_MODULE_3__.getAddress)(auth.address),\r\n            nonce: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBigInt)(auth.nonce || 0),\r\n            chainId: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.getBigInt)(auth.chainId || 0),\r\n        }, { signature });\r\n    }\r\n    /**\r\n     *  Resolves to the Authorization for %%auth%%.\r\n     */\r\n    async authorize(auth) {\r\n        auth = Object.assign({}, auth, {\r\n            address: await (0,_address_index_js__WEBPACK_IMPORTED_MODULE_3__.resolveAddress)(auth.address, this)\r\n        });\r\n        return this.authorizeSync(await this.populateAuthorization(auth));\r\n    }\r\n    async signTypedData(domain, types, value) {\r\n        // Populate any ENS names\r\n        const populated = await _hash_index_js__WEBPACK_IMPORTED_MODULE_4__.TypedDataEncoder.resolveNames(domain, types, value, async (name) => {\r\n            // @TODO: this should use resolveName; addresses don't\r\n            //        need a provider\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assert)(this.provider != null, \"cannot resolve ENS names without a provider\", \"UNSUPPORTED_OPERATION\", {\r\n                operation: \"resolveName\",\r\n                info: { name }\r\n            });\r\n            const address = await this.provider.resolveName(name);\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assert)(address != null, \"unconfigured ENS name\", \"UNCONFIGURED_NAME\", {\r\n                value: name\r\n            });\r\n            return address;\r\n        });\r\n        return this.signingKey.sign(_hash_index_js__WEBPACK_IMPORTED_MODULE_4__.TypedDataEncoder.hash(populated.domain, types, populated.value)).serialized;\r\n    }\r\n}\r\n//# sourceMappingURL=base-wallet.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/wallet/base-wallet.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/wallet/hdwallet.js":
/*!********************************************************!*\
  !*** ./node_modules/ethers/lib.esm/wallet/hdwallet.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HDNodeVoidWallet: () => (/* binding */ HDNodeVoidWallet),\n/* harmony export */   HDNodeWallet: () => (/* binding */ HDNodeWallet),\n/* harmony export */   defaultPath: () => (/* binding */ defaultPath),\n/* harmony export */   getAccountPath: () => (/* binding */ getAccountPath),\n/* harmony export */   getIndexedAccountPath: () => (/* binding */ getIndexedAccountPath)\n/* harmony export */ });\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../crypto/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/index.js\");\n/* harmony import */ var _providers_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../providers/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/providers/index.js\");\n/* harmony import */ var _transaction_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../transaction/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/transaction/index.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/* harmony import */ var _wordlists_lang_en_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../wordlists/lang-en.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/wordlists/lang-en.js\");\n/* harmony import */ var _base_wallet_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./base-wallet.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/wallet/base-wallet.js\");\n/* harmony import */ var _mnemonic_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./mnemonic.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/wallet/mnemonic.js\");\n/* harmony import */ var _json_keystore_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./json-keystore.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/wallet/json-keystore.js\");\n/**\r\n *  Explain HD Wallets..\r\n *\r\n *  @_subsection: api/wallet:HD Wallets  [hd-wallets]\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n *  The default derivation path for Ethereum HD Nodes. (i.e. ``\"m/44'/60'/0'/0/0\"``)\r\n */\r\nconst defaultPath = \"m/44'/60'/0'/0/0\";\r\n// \"Bitcoin seed\"\r\nconst MasterSecret = new Uint8Array([66, 105, 116, 99, 111, 105, 110, 32, 115, 101, 101, 100]);\r\nconst HardenedBit = 0x80000000;\r\nconst N = BigInt(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\r\nconst Nibbles = \"0123456789abcdef\";\r\nfunction zpad(value, length) {\r\n    let result = \"\";\r\n    while (value) {\r\n        result = Nibbles[value % 16] + result;\r\n        value = Math.trunc(value / 16);\r\n    }\r\n    while (result.length < length * 2) {\r\n        result = \"0\" + result;\r\n    }\r\n    return \"0x\" + result;\r\n}\r\nfunction encodeBase58Check(_value) {\r\n    const value = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(_value);\r\n    const check = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.dataSlice)((0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_1__.sha256)((0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_1__.sha256)(value)), 0, 4);\r\n    const bytes = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.concat)([value, check]);\r\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.encodeBase58)(bytes);\r\n}\r\nconst _guard = {};\r\nfunction ser_I(index, chainCode, publicKey, privateKey) {\r\n    const data = new Uint8Array(37);\r\n    if (index & HardenedBit) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(privateKey != null, \"cannot derive child of neutered node\", \"UNSUPPORTED_OPERATION\", {\r\n            operation: \"deriveChild\"\r\n        });\r\n        // Data = 0x00 || ser_256(k_par)\r\n        data.set((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(privateKey), 1);\r\n    }\r\n    else {\r\n        // Data = ser_p(point(k_par))\r\n        data.set((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(publicKey));\r\n    }\r\n    // Data += ser_32(i)\r\n    for (let i = 24; i >= 0; i -= 8) {\r\n        data[33 + (i >> 3)] = ((index >> (24 - i)) & 0xff);\r\n    }\r\n    const I = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)((0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_1__.computeHmac)(\"sha512\", chainCode, data));\r\n    return { IL: I.slice(0, 32), IR: I.slice(32) };\r\n}\r\nfunction derivePath(node, path) {\r\n    const components = path.split(\"/\");\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(components.length > 0, \"invalid path\", \"path\", path);\r\n    if (components[0] === \"m\") {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(node.depth === 0, `cannot derive root path (i.e. path starting with \"m/\") for a node at non-zero depth ${node.depth}`, \"path\", path);\r\n        components.shift();\r\n    }\r\n    let result = node;\r\n    for (let i = 0; i < components.length; i++) {\r\n        const component = components[i];\r\n        if (component.match(/^[0-9]+'$/)) {\r\n            const index = parseInt(component.substring(0, component.length - 1));\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(index < HardenedBit, \"invalid path index\", `path[${i}]`, component);\r\n            result = result.deriveChild(HardenedBit + index);\r\n        }\r\n        else if (component.match(/^[0-9]+$/)) {\r\n            const index = parseInt(component);\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(index < HardenedBit, \"invalid path index\", `path[${i}]`, component);\r\n            result = result.deriveChild(index);\r\n        }\r\n        else {\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"invalid path component\", `path[${i}]`, component);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n *  An **HDNodeWallet** is a [[Signer]] backed by the private key derived\r\n *  from an HD Node using the [[link-bip-32]] stantard.\r\n *\r\n *  An HD Node forms a hierarchal structure with each HD Node having a\r\n *  private key and the ability to derive child HD Nodes, defined by\r\n *  a path indicating the index of each child.\r\n */\r\nclass HDNodeWallet extends _base_wallet_js__WEBPACK_IMPORTED_MODULE_2__.BaseWallet {\r\n    /**\r\n     *  The compressed public key.\r\n     */\r\n    publicKey;\r\n    /**\r\n     *  The fingerprint.\r\n     *\r\n     *  A fingerprint allows quick qay to detect parent and child nodes,\r\n     *  but developers should be prepared to deal with collisions as it\r\n     *  is only 4 bytes.\r\n     */\r\n    fingerprint;\r\n    /**\r\n     *  The parent fingerprint.\r\n     */\r\n    parentFingerprint;\r\n    /**\r\n     *  The mnemonic used to create this HD Node, if available.\r\n     *\r\n     *  Sources such as extended keys do not encode the mnemonic, in\r\n     *  which case this will be ``null``.\r\n     */\r\n    mnemonic;\r\n    /**\r\n     *  The chaincode, which is effectively a public key used\r\n     *  to derive children.\r\n     */\r\n    chainCode;\r\n    /**\r\n     *  The derivation path of this wallet.\r\n     *\r\n     *  Since extended keys do not provide full path details, this\r\n     *  may be ``null``, if instantiated from a source that does not\r\n     *  encode it.\r\n     */\r\n    path;\r\n    /**\r\n     *  The child index of this wallet. Values over ``2 *\\* 31`` indicate\r\n     *  the node is hardened.\r\n     */\r\n    index;\r\n    /**\r\n     *  The depth of this wallet, which is the number of components\r\n     *  in its path.\r\n     */\r\n    depth;\r\n    /**\r\n     *  @private\r\n     */\r\n    constructor(guard, signingKey, parentFingerprint, chainCode, path, index, depth, mnemonic, provider) {\r\n        super(signingKey, provider);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertPrivate)(guard, _guard, \"HDNodeWallet\");\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, { publicKey: signingKey.compressedPublicKey });\r\n        const fingerprint = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.dataSlice)((0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_1__.ripemd160)((0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_1__.sha256)(this.publicKey)), 0, 4);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, {\r\n            parentFingerprint, fingerprint,\r\n            chainCode, path, index, depth\r\n        });\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, { mnemonic });\r\n    }\r\n    connect(provider) {\r\n        return new HDNodeWallet(_guard, this.signingKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.mnemonic, provider);\r\n    }\r\n    #account() {\r\n        const account = { address: this.address, privateKey: this.privateKey };\r\n        const m = this.mnemonic;\r\n        if (this.path && m && m.wordlist.locale === \"en\" && m.password === \"\") {\r\n            account.mnemonic = {\r\n                path: this.path,\r\n                locale: \"en\",\r\n                entropy: m.entropy\r\n            };\r\n        }\r\n        return account;\r\n    }\r\n    /**\r\n     *  Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with\r\n     *  %%password%%.\r\n     *\r\n     *  If %%progressCallback%% is specified, it will receive periodic\r\n     *  updates as the encryption process progreses.\r\n     */\r\n    async encrypt(password, progressCallback) {\r\n        return await (0,_json_keystore_js__WEBPACK_IMPORTED_MODULE_3__.encryptKeystoreJson)(this.#account(), password, { progressCallback });\r\n    }\r\n    /**\r\n     *  Returns a [JSON Keystore Wallet](json-wallets) encryped with\r\n     *  %%password%%.\r\n     *\r\n     *  It is preferred to use the [async version](encrypt) instead,\r\n     *  which allows a [[ProgressCallback]] to keep the user informed.\r\n     *\r\n     *  This method will block the event loop (freezing all UI) until\r\n     *  it is complete, which may be a non-trivial duration.\r\n     */\r\n    encryptSync(password) {\r\n        return (0,_json_keystore_js__WEBPACK_IMPORTED_MODULE_3__.encryptKeystoreJsonSync)(this.#account(), password);\r\n    }\r\n    /**\r\n     *  The extended key.\r\n     *\r\n     *  This key will begin with the prefix ``xpriv`` and can be used to\r\n     *  reconstruct this HD Node to derive its children.\r\n     */\r\n    get extendedKey() {\r\n        // We only support the mainnet values for now, but if anyone needs\r\n        // testnet values, let me know. I believe current sentiment is that\r\n        // we should always use mainnet, and use BIP-44 to derive the network\r\n        //   - Mainnet: public=0x0488B21E, private=0x0488ADE4\r\n        //   - Testnet: public=0x043587CF, private=0x04358394\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(this.depth < 256, \"Depth too deep\", \"UNSUPPORTED_OPERATION\", { operation: \"extendedKey\" });\r\n        return encodeBase58Check((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.concat)([\r\n            \"0x0488ADE4\", zpad(this.depth, 1), this.parentFingerprint,\r\n            zpad(this.index, 4), this.chainCode,\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.concat)([\"0x00\", this.privateKey])\r\n        ]));\r\n    }\r\n    /**\r\n     *  Returns true if this wallet has a path, providing a Type Guard\r\n     *  that the path is non-null.\r\n     */\r\n    hasPath() { return (this.path != null); }\r\n    /**\r\n     *  Returns a neutered HD Node, which removes the private details\r\n     *  of an HD Node.\r\n     *\r\n     *  A neutered node has no private key, but can be used to derive\r\n     *  child addresses and other public data about the HD Node.\r\n     */\r\n    neuter() {\r\n        return new HDNodeVoidWallet(_guard, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.provider);\r\n    }\r\n    /**\r\n     *  Return the child for %%index%%.\r\n     */\r\n    deriveChild(_index) {\r\n        const index = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getNumber)(_index, \"index\");\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(index <= 0xffffffff, \"invalid index\", \"index\", index);\r\n        // Base path\r\n        let path = this.path;\r\n        if (path) {\r\n            path += \"/\" + (index & ~HardenedBit);\r\n            if (index & HardenedBit) {\r\n                path += \"'\";\r\n            }\r\n        }\r\n        const { IR, IL } = ser_I(index, this.chainCode, this.publicKey, this.privateKey);\r\n        const ki = new _crypto_index_js__WEBPACK_IMPORTED_MODULE_1__.SigningKey((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toBeHex)(((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toBigInt)(IL) + BigInt(this.privateKey)) % N, 32));\r\n        return new HDNodeWallet(_guard, ki, this.fingerprint, (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(IR), path, index, this.depth + 1, this.mnemonic, this.provider);\r\n    }\r\n    /**\r\n     *  Return the HDNode for %%path%% from this node.\r\n     */\r\n    derivePath(path) {\r\n        return derivePath(this, path);\r\n    }\r\n    static #fromSeed(_seed, mnemonic) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.isBytesLike)(_seed), \"invalid seed\", \"seed\", \"[REDACTED]\");\r\n        const seed = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(_seed, \"seed\");\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(seed.length >= 16 && seed.length <= 64, \"invalid seed\", \"seed\", \"[REDACTED]\");\r\n        const I = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)((0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_1__.computeHmac)(\"sha512\", MasterSecret, seed));\r\n        const signingKey = new _crypto_index_js__WEBPACK_IMPORTED_MODULE_1__.SigningKey((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(I.slice(0, 32)));\r\n        return new HDNodeWallet(_guard, signingKey, \"0x00000000\", (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(I.slice(32)), \"m\", 0, 0, mnemonic, null);\r\n    }\r\n    /**\r\n     *  Creates a new HD Node from %%extendedKey%%.\r\n     *\r\n     *  If the %%extendedKey%% will either have a prefix or ``xpub`` or\r\n     *  ``xpriv``, returning a neutered HD Node ([[HDNodeVoidWallet]])\r\n     *  or full HD Node ([[HDNodeWallet) respectively.\r\n     */\r\n    static fromExtendedKey(extendedKey) {\r\n        const bytes = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toBeArray)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.decodeBase58)(extendedKey)); // @TODO: redact\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(bytes.length === 82 || encodeBase58Check(bytes.slice(0, 78)) === extendedKey, \"invalid extended key\", \"extendedKey\", \"[ REDACTED ]\");\r\n        const depth = bytes[4];\r\n        const parentFingerprint = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(bytes.slice(5, 9));\r\n        const index = parseInt((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(bytes.slice(9, 13)).substring(2), 16);\r\n        const chainCode = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(bytes.slice(13, 45));\r\n        const key = bytes.slice(45, 78);\r\n        switch ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(bytes.slice(0, 4))) {\r\n            // Public Key\r\n            case \"0x0488b21e\":\r\n            case \"0x043587cf\": {\r\n                const publicKey = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(key);\r\n                return new HDNodeVoidWallet(_guard, (0,_transaction_index_js__WEBPACK_IMPORTED_MODULE_4__.computeAddress)(publicKey), publicKey, parentFingerprint, chainCode, null, index, depth, null);\r\n            }\r\n            // Private Key\r\n            case \"0x0488ade4\":\r\n            case \"0x04358394 \":\r\n                if (key[0] !== 0) {\r\n                    break;\r\n                }\r\n                return new HDNodeWallet(_guard, new _crypto_index_js__WEBPACK_IMPORTED_MODULE_1__.SigningKey(key.slice(1)), parentFingerprint, chainCode, null, index, depth, null, null);\r\n        }\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, \"invalid extended key prefix\", \"extendedKey\", \"[ REDACTED ]\");\r\n    }\r\n    /**\r\n     *  Creates a new random HDNode.\r\n     */\r\n    static createRandom(password, path, wordlist) {\r\n        if (password == null) {\r\n            password = \"\";\r\n        }\r\n        if (path == null) {\r\n            path = defaultPath;\r\n        }\r\n        if (wordlist == null) {\r\n            wordlist = _wordlists_lang_en_js__WEBPACK_IMPORTED_MODULE_5__.LangEn.wordlist();\r\n        }\r\n        const mnemonic = _mnemonic_js__WEBPACK_IMPORTED_MODULE_6__.Mnemonic.fromEntropy((0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_1__.randomBytes)(16), password, wordlist);\r\n        return HDNodeWallet.#fromSeed(mnemonic.computeSeed(), mnemonic).derivePath(path);\r\n    }\r\n    /**\r\n     *  Create an HD Node from %%mnemonic%%.\r\n     */\r\n    static fromMnemonic(mnemonic, path) {\r\n        if (!path) {\r\n            path = defaultPath;\r\n        }\r\n        return HDNodeWallet.#fromSeed(mnemonic.computeSeed(), mnemonic).derivePath(path);\r\n    }\r\n    /**\r\n     *  Creates an HD Node from a mnemonic %%phrase%%.\r\n     */\r\n    static fromPhrase(phrase, password, path, wordlist) {\r\n        if (password == null) {\r\n            password = \"\";\r\n        }\r\n        if (path == null) {\r\n            path = defaultPath;\r\n        }\r\n        if (wordlist == null) {\r\n            wordlist = _wordlists_lang_en_js__WEBPACK_IMPORTED_MODULE_5__.LangEn.wordlist();\r\n        }\r\n        const mnemonic = _mnemonic_js__WEBPACK_IMPORTED_MODULE_6__.Mnemonic.fromPhrase(phrase, password, wordlist);\r\n        return HDNodeWallet.#fromSeed(mnemonic.computeSeed(), mnemonic).derivePath(path);\r\n    }\r\n    /**\r\n     *  Creates an HD Node from a %%seed%%.\r\n     */\r\n    static fromSeed(seed) {\r\n        return HDNodeWallet.#fromSeed(seed, null);\r\n    }\r\n}\r\n/**\r\n *  A **HDNodeVoidWallet** cannot sign, but provides access to\r\n *  the children nodes of a [[link-bip-32]] HD wallet addresses.\r\n *\r\n *  The can be created by using an extended ``xpub`` key to\r\n *  [[HDNodeWallet_fromExtendedKey]] or by\r\n *  [nuetering](HDNodeWallet-neuter) a [[HDNodeWallet]].\r\n */\r\nclass HDNodeVoidWallet extends _providers_index_js__WEBPACK_IMPORTED_MODULE_7__.VoidSigner {\r\n    /**\r\n     *  The compressed public key.\r\n     */\r\n    publicKey;\r\n    /**\r\n     *  The fingerprint.\r\n     *\r\n     *  A fingerprint allows quick qay to detect parent and child nodes,\r\n     *  but developers should be prepared to deal with collisions as it\r\n     *  is only 4 bytes.\r\n     */\r\n    fingerprint;\r\n    /**\r\n     *  The parent node fingerprint.\r\n     */\r\n    parentFingerprint;\r\n    /**\r\n     *  The chaincode, which is effectively a public key used\r\n     *  to derive children.\r\n     */\r\n    chainCode;\r\n    /**\r\n     *  The derivation path of this wallet.\r\n     *\r\n     *  Since extended keys do not provider full path details, this\r\n     *  may be ``null``, if instantiated from a source that does not\r\n     *  enocde it.\r\n     */\r\n    path;\r\n    /**\r\n     *  The child index of this wallet. Values over ``2 *\\* 31`` indicate\r\n     *  the node is hardened.\r\n     */\r\n    index;\r\n    /**\r\n     *  The depth of this wallet, which is the number of components\r\n     *  in its path.\r\n     */\r\n    depth;\r\n    /**\r\n     *  @private\r\n     */\r\n    constructor(guard, address, publicKey, parentFingerprint, chainCode, path, index, depth, provider) {\r\n        super(address, provider);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertPrivate)(guard, _guard, \"HDNodeVoidWallet\");\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, { publicKey });\r\n        const fingerprint = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.dataSlice)((0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_1__.ripemd160)((0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_1__.sha256)(publicKey)), 0, 4);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, {\r\n            publicKey, fingerprint, parentFingerprint, chainCode, path, index, depth\r\n        });\r\n    }\r\n    connect(provider) {\r\n        return new HDNodeVoidWallet(_guard, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, provider);\r\n    }\r\n    /**\r\n     *  The extended key.\r\n     *\r\n     *  This key will begin with the prefix ``xpub`` and can be used to\r\n     *  reconstruct this neutered key to derive its children addresses.\r\n     */\r\n    get extendedKey() {\r\n        // We only support the mainnet values for now, but if anyone needs\r\n        // testnet values, let me know. I believe current sentiment is that\r\n        // we should always use mainnet, and use BIP-44 to derive the network\r\n        //   - Mainnet: public=0x0488B21E, private=0x0488ADE4\r\n        //   - Testnet: public=0x043587CF, private=0x04358394\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assert)(this.depth < 256, \"Depth too deep\", \"UNSUPPORTED_OPERATION\", { operation: \"extendedKey\" });\r\n        return encodeBase58Check((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.concat)([\r\n            \"0x0488B21E\",\r\n            zpad(this.depth, 1),\r\n            this.parentFingerprint,\r\n            zpad(this.index, 4),\r\n            this.chainCode,\r\n            this.publicKey,\r\n        ]));\r\n    }\r\n    /**\r\n     *  Returns true if this wallet has a path, providing a Type Guard\r\n     *  that the path is non-null.\r\n     */\r\n    hasPath() { return (this.path != null); }\r\n    /**\r\n     *  Return the child for %%index%%.\r\n     */\r\n    deriveChild(_index) {\r\n        const index = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getNumber)(_index, \"index\");\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(index <= 0xffffffff, \"invalid index\", \"index\", index);\r\n        // Base path\r\n        let path = this.path;\r\n        if (path) {\r\n            path += \"/\" + (index & ~HardenedBit);\r\n            if (index & HardenedBit) {\r\n                path += \"'\";\r\n            }\r\n        }\r\n        const { IR, IL } = ser_I(index, this.chainCode, this.publicKey, null);\r\n        const Ki = _crypto_index_js__WEBPACK_IMPORTED_MODULE_1__.SigningKey.addPoints(IL, this.publicKey, true);\r\n        const address = (0,_transaction_index_js__WEBPACK_IMPORTED_MODULE_4__.computeAddress)(Ki);\r\n        return new HDNodeVoidWallet(_guard, address, Ki, this.fingerprint, (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(IR), path, index, this.depth + 1, this.provider);\r\n    }\r\n    /**\r\n     *  Return the signer for %%path%% from this node.\r\n     */\r\n    derivePath(path) {\r\n        return derivePath(this, path);\r\n    }\r\n}\r\n/*\r\nexport class HDNodeWalletManager {\r\n    #root: HDNodeWallet;\r\n\r\n    constructor(phrase: string, password?: null | string, path?: null | string, locale?: null | Wordlist) {\r\n        if (password == null) { password = \"\"; }\r\n        if (path == null) { path = \"m/44'/60'/0'/0\"; }\r\n        if (locale == null) { locale = LangEn.wordlist(); }\r\n        this.#root = HDNodeWallet.fromPhrase(phrase, password, path, locale);\r\n    }\r\n\r\n    getSigner(index?: number): HDNodeWallet {\r\n        return this.#root.deriveChild((index == null) ? 0: index);\r\n    }\r\n}\r\n*/\r\n/**\r\n *  Returns the [[link-bip-32]] path for the account at %%index%%.\r\n *\r\n *  This is the pattern used by wallets like Ledger.\r\n *\r\n *  There is also an [alternate pattern](getIndexedAccountPath) used by\r\n *  some software.\r\n */\r\nfunction getAccountPath(_index) {\r\n    const index = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getNumber)(_index, \"index\");\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(index >= 0 && index < HardenedBit, \"invalid account index\", \"index\", index);\r\n    return `m/44'/60'/${index}'/0/0`;\r\n}\r\n/**\r\n *  Returns the path using an alternative pattern for deriving accounts,\r\n *  at %%index%%.\r\n *\r\n *  This derivation path uses the //index// component rather than the\r\n *  //account// component to derive sequential accounts.\r\n *\r\n *  This is the pattern used by wallets like MetaMask.\r\n */\r\nfunction getIndexedAccountPath(_index) {\r\n    const index = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getNumber)(_index, \"index\");\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(index >= 0 && index < HardenedBit, \"invalid account index\", \"index\", index);\r\n    return `m/44'/60'/0'/0/${index}`;\r\n}\r\n//# sourceMappingURL=hdwallet.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/wallet/hdwallet.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/wallet/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/ethers/lib.esm/wallet/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseWallet: () => (/* reexport safe */ _base_wallet_js__WEBPACK_IMPORTED_MODULE_0__.BaseWallet),\n/* harmony export */   HDNodeVoidWallet: () => (/* reexport safe */ _hdwallet_js__WEBPACK_IMPORTED_MODULE_1__.HDNodeVoidWallet),\n/* harmony export */   HDNodeWallet: () => (/* reexport safe */ _hdwallet_js__WEBPACK_IMPORTED_MODULE_1__.HDNodeWallet),\n/* harmony export */   Mnemonic: () => (/* reexport safe */ _mnemonic_js__WEBPACK_IMPORTED_MODULE_4__.Mnemonic),\n/* harmony export */   Wallet: () => (/* reexport safe */ _wallet_js__WEBPACK_IMPORTED_MODULE_5__.Wallet),\n/* harmony export */   decryptCrowdsaleJson: () => (/* reexport safe */ _json_crowdsale_js__WEBPACK_IMPORTED_MODULE_2__.decryptCrowdsaleJson),\n/* harmony export */   decryptKeystoreJson: () => (/* reexport safe */ _json_keystore_js__WEBPACK_IMPORTED_MODULE_3__.decryptKeystoreJson),\n/* harmony export */   decryptKeystoreJsonSync: () => (/* reexport safe */ _json_keystore_js__WEBPACK_IMPORTED_MODULE_3__.decryptKeystoreJsonSync),\n/* harmony export */   defaultPath: () => (/* reexport safe */ _hdwallet_js__WEBPACK_IMPORTED_MODULE_1__.defaultPath),\n/* harmony export */   encryptKeystoreJson: () => (/* reexport safe */ _json_keystore_js__WEBPACK_IMPORTED_MODULE_3__.encryptKeystoreJson),\n/* harmony export */   encryptKeystoreJsonSync: () => (/* reexport safe */ _json_keystore_js__WEBPACK_IMPORTED_MODULE_3__.encryptKeystoreJsonSync),\n/* harmony export */   getAccountPath: () => (/* reexport safe */ _hdwallet_js__WEBPACK_IMPORTED_MODULE_1__.getAccountPath),\n/* harmony export */   getIndexedAccountPath: () => (/* reexport safe */ _hdwallet_js__WEBPACK_IMPORTED_MODULE_1__.getIndexedAccountPath),\n/* harmony export */   isCrowdsaleJson: () => (/* reexport safe */ _json_crowdsale_js__WEBPACK_IMPORTED_MODULE_2__.isCrowdsaleJson),\n/* harmony export */   isKeystoreJson: () => (/* reexport safe */ _json_keystore_js__WEBPACK_IMPORTED_MODULE_3__.isKeystoreJson)\n/* harmony export */ });\n/* harmony import */ var _base_wallet_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base-wallet.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/wallet/base-wallet.js\");\n/* harmony import */ var _hdwallet_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./hdwallet.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/wallet/hdwallet.js\");\n/* harmony import */ var _json_crowdsale_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./json-crowdsale.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/wallet/json-crowdsale.js\");\n/* harmony import */ var _json_keystore_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./json-keystore.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/wallet/json-keystore.js\");\n/* harmony import */ var _mnemonic_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./mnemonic.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/wallet/mnemonic.js\");\n/* harmony import */ var _wallet_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./wallet.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/wallet/wallet.js\");\n/**\r\n *  When interacting with Ethereum, it is necessary to use a private\r\n *  key authenticate actions by signing a payload.\r\n *\r\n *  Wallets are the simplest way to expose the concept of an\r\n *  //Externally Owner Account// (EOA) as it wraps a private key\r\n *  and supports high-level methods to sign common types of interaction\r\n *  and send transactions.\r\n *\r\n *  The class most developers will want to use is [[Wallet]], which\r\n *  can load a private key directly or from any common wallet format.\r\n *\r\n *  The [[HDNodeWallet]] can be used when it is necessary to access\r\n *  low-level details of how an HD wallets are derived, exported\r\n *  or imported.\r\n *\r\n *  @_section: api/wallet:Wallets  [about-wallets]\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS93YWxsZXQvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQzhDO0FBQ3NFO0FBQ3hDO0FBQ29FO0FBQ3ZHO0FBQ0o7QUFDckMiLCJzb3VyY2VzIjpbIkQ6XFxEb19hbjJcXGxlbmRodWJfdjJcXGxlbmRodWItZnJvbnRlbmQtbmV4dGpzXFxub2RlX21vZHVsZXNcXGV0aGVyc1xcbGliLmVzbVxcd2FsbGV0XFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogIFdoZW4gaW50ZXJhY3Rpbmcgd2l0aCBFdGhlcmV1bSwgaXQgaXMgbmVjZXNzYXJ5IHRvIHVzZSBhIHByaXZhdGVcclxuICogIGtleSBhdXRoZW50aWNhdGUgYWN0aW9ucyBieSBzaWduaW5nIGEgcGF5bG9hZC5cclxuICpcclxuICogIFdhbGxldHMgYXJlIHRoZSBzaW1wbGVzdCB3YXkgdG8gZXhwb3NlIHRoZSBjb25jZXB0IG9mIGFuXHJcbiAqICAvL0V4dGVybmFsbHkgT3duZXIgQWNjb3VudC8vIChFT0EpIGFzIGl0IHdyYXBzIGEgcHJpdmF0ZSBrZXlcclxuICogIGFuZCBzdXBwb3J0cyBoaWdoLWxldmVsIG1ldGhvZHMgdG8gc2lnbiBjb21tb24gdHlwZXMgb2YgaW50ZXJhY3Rpb25cclxuICogIGFuZCBzZW5kIHRyYW5zYWN0aW9ucy5cclxuICpcclxuICogIFRoZSBjbGFzcyBtb3N0IGRldmVsb3BlcnMgd2lsbCB3YW50IHRvIHVzZSBpcyBbW1dhbGxldF1dLCB3aGljaFxyXG4gKiAgY2FuIGxvYWQgYSBwcml2YXRlIGtleSBkaXJlY3RseSBvciBmcm9tIGFueSBjb21tb24gd2FsbGV0IGZvcm1hdC5cclxuICpcclxuICogIFRoZSBbW0hETm9kZVdhbGxldF1dIGNhbiBiZSB1c2VkIHdoZW4gaXQgaXMgbmVjZXNzYXJ5IHRvIGFjY2Vzc1xyXG4gKiAgbG93LWxldmVsIGRldGFpbHMgb2YgaG93IGFuIEhEIHdhbGxldHMgYXJlIGRlcml2ZWQsIGV4cG9ydGVkXHJcbiAqICBvciBpbXBvcnRlZC5cclxuICpcclxuICogIEBfc2VjdGlvbjogYXBpL3dhbGxldDpXYWxsZXRzICBbYWJvdXQtd2FsbGV0c11cclxuICovXHJcbmV4cG9ydCB7IEJhc2VXYWxsZXQgfSBmcm9tIFwiLi9iYXNlLXdhbGxldC5qc1wiO1xyXG5leHBvcnQgeyBkZWZhdWx0UGF0aCwgZ2V0QWNjb3VudFBhdGgsIGdldEluZGV4ZWRBY2NvdW50UGF0aCwgSEROb2RlV2FsbGV0LCBIRE5vZGVWb2lkV2FsbGV0LCB9IGZyb20gXCIuL2hkd2FsbGV0LmpzXCI7XHJcbmV4cG9ydCB7IGlzQ3Jvd2RzYWxlSnNvbiwgZGVjcnlwdENyb3dkc2FsZUpzb24gfSBmcm9tIFwiLi9qc29uLWNyb3dkc2FsZS5qc1wiO1xyXG5leHBvcnQgeyBpc0tleXN0b3JlSnNvbiwgZGVjcnlwdEtleXN0b3JlSnNvblN5bmMsIGRlY3J5cHRLZXlzdG9yZUpzb24sIGVuY3J5cHRLZXlzdG9yZUpzb24sIGVuY3J5cHRLZXlzdG9yZUpzb25TeW5jIH0gZnJvbSBcIi4vanNvbi1rZXlzdG9yZS5qc1wiO1xyXG5leHBvcnQgeyBNbmVtb25pYyB9IGZyb20gXCIuL21uZW1vbmljLmpzXCI7XHJcbmV4cG9ydCB7IFdhbGxldCB9IGZyb20gXCIuL3dhbGxldC5qc1wiO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/wallet/index.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/wallet/json-crowdsale.js":
/*!**************************************************************!*\
  !*** ./node_modules/ethers/lib.esm/wallet/json-crowdsale.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decryptCrowdsaleJson: () => (/* binding */ decryptCrowdsaleJson),\n/* harmony export */   isCrowdsaleJson: () => (/* binding */ isCrowdsaleJson)\n/* harmony export */ });\n/* harmony import */ var aes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aes-js */ \"(pages-dir-browser)/./node_modules/aes-js/lib.esm/index.js\");\n/* harmony import */ var _address_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../address/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/address/index.js\");\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../crypto/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/index.js\");\n/* harmony import */ var _hash_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../hash/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/hash/index.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/wallet/utils.js\");\n/**\r\n *  @_subsection: api/wallet:JSON Wallets  [json-wallets]\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n *  Returns true if %%json%% is a valid JSON Crowdsale wallet.\r\n */\r\nfunction isCrowdsaleJson(json) {\r\n    try {\r\n        const data = JSON.parse(json);\r\n        if (data.encseed) {\r\n            return true;\r\n        }\r\n    }\r\n    catch (error) { }\r\n    return false;\r\n}\r\n// See: https://github.com/ethereum/pyethsaletool\r\n/**\r\n *  Before Ethereum launched, it was necessary to create a wallet\r\n *  format for backers to use, which would be used to receive ether\r\n *  as a reward for contributing to the project.\r\n *\r\n *  The [[link-crowdsale]] format is now obsolete, but it is still\r\n *  useful to support and the additional code is fairly trivial as\r\n *  all the primitives required are used through core portions of\r\n *  the library.\r\n */\r\nfunction decryptCrowdsaleJson(json, _password) {\r\n    const data = JSON.parse(json);\r\n    const password = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.getPassword)(_password);\r\n    // Ethereum Address\r\n    const address = (0,_address_index_js__WEBPACK_IMPORTED_MODULE_2__.getAddress)((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.spelunk)(data, \"ethaddr:string!\"));\r\n    // Encrypted Seed\r\n    const encseed = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.looseArrayify)((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.spelunk)(data, \"encseed:string!\"));\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertArgument)(encseed && (encseed.length % 16) === 0, \"invalid encseed\", \"json\", json);\r\n    const key = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getBytes)((0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_4__.pbkdf2)(password, password, 2000, 32, \"sha256\")).slice(0, 16);\r\n    const iv = encseed.slice(0, 16);\r\n    const encryptedSeed = encseed.slice(16);\r\n    // Decrypt the seed\r\n    const aesCbc = new aes_js__WEBPACK_IMPORTED_MODULE_0__.CBC(key, iv);\r\n    const seed = (0,aes_js__WEBPACK_IMPORTED_MODULE_0__.pkcs7Strip)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.getBytes)(aesCbc.decrypt(encryptedSeed)));\r\n    // This wallet format is weird... Convert the binary encoded hex to a string.\r\n    let seedHex = \"\";\r\n    for (let i = 0; i < seed.length; i++) {\r\n        seedHex += String.fromCharCode(seed[i]);\r\n    }\r\n    return { address, privateKey: (0,_hash_index_js__WEBPACK_IMPORTED_MODULE_5__.id)(seedHex) };\r\n}\r\n//# sourceMappingURL=json-crowdsale.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS93YWxsZXQvanNvbi1jcm93ZHNhbGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDeUM7QUFDUTtBQUNMO0FBQ047QUFDdUI7QUFDSTtBQUNqRTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EscUJBQXFCLHNEQUFXO0FBQ2hDO0FBQ0Esb0JBQW9CLDZEQUFVLENBQUMsa0RBQU87QUFDdEM7QUFDQSxvQkFBb0Isd0RBQWEsQ0FBQyxrREFBTztBQUN6QyxJQUFJLCtEQUFjO0FBQ2xCLGdCQUFnQix5REFBUSxDQUFDLHdEQUFNO0FBQy9CO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qix1Q0FBRztBQUMxQixpQkFBaUIsa0RBQVUsQ0FBQyx5REFBUTtBQUNwQztBQUNBO0FBQ0Esb0JBQW9CLGlCQUFpQjtBQUNyQztBQUNBO0FBQ0EsYUFBYSxxQkFBcUIsa0RBQUU7QUFDcEM7QUFDQSIsInNvdXJjZXMiOlsiRDpcXERvX2FuMlxcbGVuZGh1Yl92MlxcbGVuZGh1Yi1mcm9udGVuZC1uZXh0anNcXG5vZGVfbW9kdWxlc1xcZXRoZXJzXFxsaWIuZXNtXFx3YWxsZXRcXGpzb24tY3Jvd2RzYWxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiAgQF9zdWJzZWN0aW9uOiBhcGkvd2FsbGV0OkpTT04gV2FsbGV0cyAgW2pzb24td2FsbGV0c11cclxuICovXHJcbmltcG9ydCB7IENCQywgcGtjczdTdHJpcCB9IGZyb20gXCJhZXMtanNcIjtcclxuaW1wb3J0IHsgZ2V0QWRkcmVzcyB9IGZyb20gXCIuLi9hZGRyZXNzL2luZGV4LmpzXCI7XHJcbmltcG9ydCB7IHBia2RmMiB9IGZyb20gXCIuLi9jcnlwdG8vaW5kZXguanNcIjtcclxuaW1wb3J0IHsgaWQgfSBmcm9tIFwiLi4vaGFzaC9pbmRleC5qc1wiO1xyXG5pbXBvcnQgeyBnZXRCeXRlcywgYXNzZXJ0QXJndW1lbnQgfSBmcm9tIFwiLi4vdXRpbHMvaW5kZXguanNcIjtcclxuaW1wb3J0IHsgZ2V0UGFzc3dvcmQsIGxvb3NlQXJyYXlpZnksIHNwZWx1bmsgfSBmcm9tIFwiLi91dGlscy5qc1wiO1xyXG4vKipcclxuICogIFJldHVybnMgdHJ1ZSBpZiAlJWpzb24lJSBpcyBhIHZhbGlkIEpTT04gQ3Jvd2RzYWxlIHdhbGxldC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0Nyb3dkc2FsZUpzb24oanNvbikge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShqc29uKTtcclxuICAgICAgICBpZiAoZGF0YS5lbmNzZWVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvcikgeyB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cclxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vcHlldGhzYWxldG9vbFxyXG4vKipcclxuICogIEJlZm9yZSBFdGhlcmV1bSBsYXVuY2hlZCwgaXQgd2FzIG5lY2Vzc2FyeSB0byBjcmVhdGUgYSB3YWxsZXRcclxuICogIGZvcm1hdCBmb3IgYmFja2VycyB0byB1c2UsIHdoaWNoIHdvdWxkIGJlIHVzZWQgdG8gcmVjZWl2ZSBldGhlclxyXG4gKiAgYXMgYSByZXdhcmQgZm9yIGNvbnRyaWJ1dGluZyB0byB0aGUgcHJvamVjdC5cclxuICpcclxuICogIFRoZSBbW2xpbmstY3Jvd2RzYWxlXV0gZm9ybWF0IGlzIG5vdyBvYnNvbGV0ZSwgYnV0IGl0IGlzIHN0aWxsXHJcbiAqICB1c2VmdWwgdG8gc3VwcG9ydCBhbmQgdGhlIGFkZGl0aW9uYWwgY29kZSBpcyBmYWlybHkgdHJpdmlhbCBhc1xyXG4gKiAgYWxsIHRoZSBwcmltaXRpdmVzIHJlcXVpcmVkIGFyZSB1c2VkIHRocm91Z2ggY29yZSBwb3J0aW9ucyBvZlxyXG4gKiAgdGhlIGxpYnJhcnkuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZGVjcnlwdENyb3dkc2FsZUpzb24oanNvbiwgX3Bhc3N3b3JkKSB7XHJcbiAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShqc29uKTtcclxuICAgIGNvbnN0IHBhc3N3b3JkID0gZ2V0UGFzc3dvcmQoX3Bhc3N3b3JkKTtcclxuICAgIC8vIEV0aGVyZXVtIEFkZHJlc3NcclxuICAgIGNvbnN0IGFkZHJlc3MgPSBnZXRBZGRyZXNzKHNwZWx1bmsoZGF0YSwgXCJldGhhZGRyOnN0cmluZyFcIikpO1xyXG4gICAgLy8gRW5jcnlwdGVkIFNlZWRcclxuICAgIGNvbnN0IGVuY3NlZWQgPSBsb29zZUFycmF5aWZ5KHNwZWx1bmsoZGF0YSwgXCJlbmNzZWVkOnN0cmluZyFcIikpO1xyXG4gICAgYXNzZXJ0QXJndW1lbnQoZW5jc2VlZCAmJiAoZW5jc2VlZC5sZW5ndGggJSAxNikgPT09IDAsIFwiaW52YWxpZCBlbmNzZWVkXCIsIFwianNvblwiLCBqc29uKTtcclxuICAgIGNvbnN0IGtleSA9IGdldEJ5dGVzKHBia2RmMihwYXNzd29yZCwgcGFzc3dvcmQsIDIwMDAsIDMyLCBcInNoYTI1NlwiKSkuc2xpY2UoMCwgMTYpO1xyXG4gICAgY29uc3QgaXYgPSBlbmNzZWVkLnNsaWNlKDAsIDE2KTtcclxuICAgIGNvbnN0IGVuY3J5cHRlZFNlZWQgPSBlbmNzZWVkLnNsaWNlKDE2KTtcclxuICAgIC8vIERlY3J5cHQgdGhlIHNlZWRcclxuICAgIGNvbnN0IGFlc0NiYyA9IG5ldyBDQkMoa2V5LCBpdik7XHJcbiAgICBjb25zdCBzZWVkID0gcGtjczdTdHJpcChnZXRCeXRlcyhhZXNDYmMuZGVjcnlwdChlbmNyeXB0ZWRTZWVkKSkpO1xyXG4gICAgLy8gVGhpcyB3YWxsZXQgZm9ybWF0IGlzIHdlaXJkLi4uIENvbnZlcnQgdGhlIGJpbmFyeSBlbmNvZGVkIGhleCB0byBhIHN0cmluZy5cclxuICAgIGxldCBzZWVkSGV4ID0gXCJcIjtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VlZC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHNlZWRIZXggKz0gU3RyaW5nLmZyb21DaGFyQ29kZShzZWVkW2ldKTtcclxuICAgIH1cclxuICAgIHJldHVybiB7IGFkZHJlc3MsIHByaXZhdGVLZXk6IGlkKHNlZWRIZXgpIH07XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9anNvbi1jcm93ZHNhbGUuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/wallet/json-crowdsale.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/wallet/json-keystore.js":
/*!*************************************************************!*\
  !*** ./node_modules/ethers/lib.esm/wallet/json-keystore.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decryptKeystoreJson: () => (/* binding */ decryptKeystoreJson),\n/* harmony export */   decryptKeystoreJsonSync: () => (/* binding */ decryptKeystoreJsonSync),\n/* harmony export */   encryptKeystoreJson: () => (/* binding */ encryptKeystoreJson),\n/* harmony export */   encryptKeystoreJsonSync: () => (/* binding */ encryptKeystoreJsonSync),\n/* harmony export */   isKeystoreJson: () => (/* binding */ isKeystoreJson)\n/* harmony export */ });\n/* harmony import */ var aes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aes-js */ \"(pages-dir-browser)/./node_modules/aes-js/lib.esm/index.js\");\n/* harmony import */ var _address_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../address/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/address/index.js\");\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../crypto/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/index.js\");\n/* harmony import */ var _transaction_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../transaction/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/transaction/index.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/wallet/utils.js\");\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../_version.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/_version.js\");\n/**\r\n *  The JSON Wallet formats allow a simple way to store the private\r\n *  keys needed in Ethereum along with related information and allows\r\n *  for extensible forms of encryption.\r\n *\r\n *  These utilities facilitate decrypting and encrypting the most common\r\n *  JSON Wallet formats.\r\n *\r\n *  @_subsection: api/wallet:JSON Wallets  [json-wallets]\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst defaultPath = \"m/44'/60'/0'/0/0\";\r\n/**\r\n *  Returns true if %%json%% is a valid JSON Keystore Wallet.\r\n */\r\nfunction isKeystoreJson(json) {\r\n    try {\r\n        const data = JSON.parse(json);\r\n        const version = ((data.version != null) ? parseInt(data.version) : 0);\r\n        if (version === 3) {\r\n            return true;\r\n        }\r\n    }\r\n    catch (error) { }\r\n    return false;\r\n}\r\nfunction decrypt(data, key, ciphertext) {\r\n    const cipher = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.spelunk)(data, \"crypto.cipher:string\");\r\n    if (cipher === \"aes-128-ctr\") {\r\n        const iv = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.spelunk)(data, \"crypto.cipherparams.iv:data!\");\r\n        const aesCtr = new aes_js__WEBPACK_IMPORTED_MODULE_0__.CTR(key, iv);\r\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.hexlify)(aesCtr.decrypt(ciphertext));\r\n    }\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assert)(false, \"unsupported cipher\", \"UNSUPPORTED_OPERATION\", {\r\n        operation: \"decrypt\"\r\n    });\r\n}\r\nfunction getAccount(data, _key) {\r\n    const key = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getBytes)(_key);\r\n    const ciphertext = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.spelunk)(data, \"crypto.ciphertext:data!\");\r\n    const computedMAC = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.hexlify)((0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_3__.keccak256)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.concat)([key.slice(16, 32), ciphertext]))).substring(2);\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(computedMAC === (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.spelunk)(data, \"crypto.mac:string!\").toLowerCase(), \"incorrect password\", \"password\", \"[ REDACTED ]\");\r\n    const privateKey = decrypt(data, key.slice(0, 16), ciphertext);\r\n    const address = (0,_transaction_index_js__WEBPACK_IMPORTED_MODULE_4__.computeAddress)(privateKey);\r\n    if (data.address) {\r\n        let check = data.address.toLowerCase();\r\n        if (!check.startsWith(\"0x\")) {\r\n            check = \"0x\" + check;\r\n        }\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)((0,_address_index_js__WEBPACK_IMPORTED_MODULE_5__.getAddress)(check) === address, \"keystore address/privateKey mismatch\", \"address\", data.address);\r\n    }\r\n    const account = { address, privateKey };\r\n    // Version 0.1 x-ethers metadata must contain an encrypted mnemonic phrase\r\n    const version = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.spelunk)(data, \"x-ethers.version:string\");\r\n    if (version === \"0.1\") {\r\n        const mnemonicKey = key.slice(32, 64);\r\n        const mnemonicCiphertext = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.spelunk)(data, \"x-ethers.mnemonicCiphertext:data!\");\r\n        const mnemonicIv = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.spelunk)(data, \"x-ethers.mnemonicCounter:data!\");\r\n        const mnemonicAesCtr = new aes_js__WEBPACK_IMPORTED_MODULE_0__.CTR(mnemonicKey, mnemonicIv);\r\n        account.mnemonic = {\r\n            path: ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.spelunk)(data, \"x-ethers.path:string\") || defaultPath),\r\n            locale: ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.spelunk)(data, \"x-ethers.locale:string\") || \"en\"),\r\n            entropy: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.hexlify)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getBytes)(mnemonicAesCtr.decrypt(mnemonicCiphertext)))\r\n        };\r\n    }\r\n    return account;\r\n}\r\nfunction getDecryptKdfParams(data) {\r\n    const kdf = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.spelunk)(data, \"crypto.kdf:string\");\r\n    if (kdf && typeof (kdf) === \"string\") {\r\n        if (kdf.toLowerCase() === \"scrypt\") {\r\n            const salt = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.spelunk)(data, \"crypto.kdfparams.salt:data!\");\r\n            const N = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.spelunk)(data, \"crypto.kdfparams.n:int!\");\r\n            const r = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.spelunk)(data, \"crypto.kdfparams.r:int!\");\r\n            const p = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.spelunk)(data, \"crypto.kdfparams.p:int!\");\r\n            // Make sure N is a power of 2\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(N > 0 && (N & (N - 1)) === 0, \"invalid kdf.N\", \"kdf.N\", N);\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(r > 0 && p > 0, \"invalid kdf\", \"kdf\", kdf);\r\n            const dkLen = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.spelunk)(data, \"crypto.kdfparams.dklen:int!\");\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(dkLen === 32, \"invalid kdf.dklen\", \"kdf.dflen\", dkLen);\r\n            return { name: \"scrypt\", salt, N, r, p, dkLen: 64 };\r\n        }\r\n        else if (kdf.toLowerCase() === \"pbkdf2\") {\r\n            const salt = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.spelunk)(data, \"crypto.kdfparams.salt:data!\");\r\n            const prf = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.spelunk)(data, \"crypto.kdfparams.prf:string!\");\r\n            const algorithm = prf.split(\"-\").pop();\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(algorithm === \"sha256\" || algorithm === \"sha512\", \"invalid kdf.pdf\", \"kdf.pdf\", prf);\r\n            const count = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.spelunk)(data, \"crypto.kdfparams.c:int!\");\r\n            const dkLen = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.spelunk)(data, \"crypto.kdfparams.dklen:int!\");\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(dkLen === 32, \"invalid kdf.dklen\", \"kdf.dklen\", dkLen);\r\n            return { name: \"pbkdf2\", salt, count, dkLen, algorithm };\r\n        }\r\n    }\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(false, \"unsupported key-derivation function\", \"kdf\", kdf);\r\n}\r\n/**\r\n *  Returns the account details for the JSON Keystore Wallet %%json%%\r\n *  using %%password%%.\r\n *\r\n *  It is preferred to use the [async version](decryptKeystoreJson)\r\n *  instead, which allows a [[ProgressCallback]] to keep the user informed\r\n *  as to the decryption status.\r\n *\r\n *  This method will block the event loop (freezing all UI) until decryption\r\n *  is complete, which can take quite some time, depending on the wallet\r\n *  paramters and platform.\r\n */\r\nfunction decryptKeystoreJsonSync(json, _password) {\r\n    const data = JSON.parse(json);\r\n    const password = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.getPassword)(_password);\r\n    const params = getDecryptKdfParams(data);\r\n    if (params.name === \"pbkdf2\") {\r\n        const { salt, count, dkLen, algorithm } = params;\r\n        const key = (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_3__.pbkdf2)(password, salt, count, dkLen, algorithm);\r\n        return getAccount(data, key);\r\n    }\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assert)(params.name === \"scrypt\", \"cannot be reached\", \"UNKNOWN_ERROR\", { params });\r\n    const { salt, N, r, p, dkLen } = params;\r\n    const key = (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_3__.scryptSync)(password, salt, N, r, p, dkLen);\r\n    return getAccount(data, key);\r\n}\r\nfunction stall(duration) {\r\n    return new Promise((resolve) => { setTimeout(() => { resolve(); }, duration); });\r\n}\r\n/**\r\n *  Resolves to the decrypted JSON Keystore Wallet %%json%% using the\r\n *  %%password%%.\r\n *\r\n *  If provided, %%progress%% will be called periodically during the\r\n *  decrpytion to provide feedback, and if the function returns\r\n *  ``false`` will halt decryption.\r\n *\r\n *  The %%progressCallback%% will **always** receive ``0`` before\r\n *  decryption begins and ``1`` when complete.\r\n */\r\nasync function decryptKeystoreJson(json, _password, progress) {\r\n    const data = JSON.parse(json);\r\n    const password = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.getPassword)(_password);\r\n    const params = getDecryptKdfParams(data);\r\n    if (params.name === \"pbkdf2\") {\r\n        if (progress) {\r\n            progress(0);\r\n            await stall(0);\r\n        }\r\n        const { salt, count, dkLen, algorithm } = params;\r\n        const key = (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_3__.pbkdf2)(password, salt, count, dkLen, algorithm);\r\n        if (progress) {\r\n            progress(1);\r\n            await stall(0);\r\n        }\r\n        return getAccount(data, key);\r\n    }\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assert)(params.name === \"scrypt\", \"cannot be reached\", \"UNKNOWN_ERROR\", { params });\r\n    const { salt, N, r, p, dkLen } = params;\r\n    const key = await (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_3__.scrypt)(password, salt, N, r, p, dkLen, progress);\r\n    return getAccount(data, key);\r\n}\r\nfunction getEncryptKdfParams(options) {\r\n    // Check/generate the salt\r\n    const salt = (options.salt != null) ? (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getBytes)(options.salt, \"options.salt\") : (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_3__.randomBytes)(32);\r\n    // Override the scrypt password-based key derivation function parameters\r\n    let N = (1 << 17), r = 8, p = 1;\r\n    if (options.scrypt) {\r\n        if (options.scrypt.N) {\r\n            N = options.scrypt.N;\r\n        }\r\n        if (options.scrypt.r) {\r\n            r = options.scrypt.r;\r\n        }\r\n        if (options.scrypt.p) {\r\n            p = options.scrypt.p;\r\n        }\r\n    }\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(typeof (N) === \"number\" && N > 0 && Number.isSafeInteger(N) && (BigInt(N) & BigInt(N - 1)) === BigInt(0), \"invalid scrypt N parameter\", \"options.N\", N);\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(typeof (r) === \"number\" && r > 0 && Number.isSafeInteger(r), \"invalid scrypt r parameter\", \"options.r\", r);\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(typeof (p) === \"number\" && p > 0 && Number.isSafeInteger(p), \"invalid scrypt p parameter\", \"options.p\", p);\r\n    return { name: \"scrypt\", dkLen: 32, salt, N, r, p };\r\n}\r\nfunction _encryptKeystore(key, kdf, account, options) {\r\n    const privateKey = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getBytes)(account.privateKey, \"privateKey\");\r\n    // Override initialization vector\r\n    const iv = (options.iv != null) ? (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getBytes)(options.iv, \"options.iv\") : (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_3__.randomBytes)(16);\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(iv.length === 16, \"invalid options.iv length\", \"options.iv\", options.iv);\r\n    // Override the uuid\r\n    const uuidRandom = (options.uuid != null) ? (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getBytes)(options.uuid, \"options.uuid\") : (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_3__.randomBytes)(16);\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.assertArgument)(uuidRandom.length === 16, \"invalid options.uuid length\", \"options.uuid\", options.iv);\r\n    // This will be used to encrypt the wallet (as per Web3 secret storage)\r\n    // - 32 bytes   As normal for the Web3 secret storage (derivedKey, macPrefix)\r\n    // - 32 bytes   AES key to encrypt mnemonic with (required here to be Ethers Wallet)\r\n    const derivedKey = key.slice(0, 16);\r\n    const macPrefix = key.slice(16, 32);\r\n    // Encrypt the private key\r\n    const aesCtr = new aes_js__WEBPACK_IMPORTED_MODULE_0__.CTR(derivedKey, iv);\r\n    const ciphertext = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getBytes)(aesCtr.encrypt(privateKey));\r\n    // Compute the message authentication code, used to check the password\r\n    const mac = (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_3__.keccak256)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.concat)([macPrefix, ciphertext]));\r\n    // See: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition\r\n    const data = {\r\n        address: account.address.substring(2).toLowerCase(),\r\n        id: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.uuidV4)(uuidRandom),\r\n        version: 3,\r\n        Crypto: {\r\n            cipher: \"aes-128-ctr\",\r\n            cipherparams: {\r\n                iv: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.hexlify)(iv).substring(2),\r\n            },\r\n            ciphertext: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.hexlify)(ciphertext).substring(2),\r\n            kdf: \"scrypt\",\r\n            kdfparams: {\r\n                salt: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.hexlify)(kdf.salt).substring(2),\r\n                n: kdf.N,\r\n                dklen: 32,\r\n                p: kdf.p,\r\n                r: kdf.r\r\n            },\r\n            mac: mac.substring(2)\r\n        }\r\n    };\r\n    // If we have a mnemonic, encrypt it into the JSON wallet\r\n    if (account.mnemonic) {\r\n        const client = (options.client != null) ? options.client : `ethers/${_version_js__WEBPACK_IMPORTED_MODULE_6__.version}`;\r\n        const path = account.mnemonic.path || defaultPath;\r\n        const locale = account.mnemonic.locale || \"en\";\r\n        const mnemonicKey = key.slice(32, 64);\r\n        const entropy = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getBytes)(account.mnemonic.entropy, \"account.mnemonic.entropy\");\r\n        const mnemonicIv = (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_3__.randomBytes)(16);\r\n        const mnemonicAesCtr = new aes_js__WEBPACK_IMPORTED_MODULE_0__.CTR(mnemonicKey, mnemonicIv);\r\n        const mnemonicCiphertext = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getBytes)(mnemonicAesCtr.encrypt(entropy));\r\n        const now = new Date();\r\n        const timestamp = (now.getUTCFullYear() + \"-\" +\r\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.zpad)(now.getUTCMonth() + 1, 2) + \"-\" +\r\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.zpad)(now.getUTCDate(), 2) + \"T\" +\r\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.zpad)(now.getUTCHours(), 2) + \"-\" +\r\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.zpad)(now.getUTCMinutes(), 2) + \"-\" +\r\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.zpad)(now.getUTCSeconds(), 2) + \".0Z\");\r\n        const gethFilename = (\"UTC--\" + timestamp + \"--\" + data.address);\r\n        data[\"x-ethers\"] = {\r\n            client, gethFilename, path, locale,\r\n            mnemonicCounter: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.hexlify)(mnemonicIv).substring(2),\r\n            mnemonicCiphertext: (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.hexlify)(mnemonicCiphertext).substring(2),\r\n            version: \"0.1\"\r\n        };\r\n    }\r\n    return JSON.stringify(data);\r\n}\r\n/**\r\n *  Return the JSON Keystore Wallet for %%account%% encrypted with\r\n *  %%password%%.\r\n *\r\n *  The %%options%% can be used to tune the password-based key\r\n *  derivation function parameters, explicitly set the random values\r\n *  used. Any provided [[ProgressCallback]] is ignord.\r\n */\r\nfunction encryptKeystoreJsonSync(account, password, options) {\r\n    if (options == null) {\r\n        options = {};\r\n    }\r\n    const passwordBytes = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.getPassword)(password);\r\n    const kdf = getEncryptKdfParams(options);\r\n    const key = (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_3__.scryptSync)(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64);\r\n    return _encryptKeystore((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getBytes)(key), kdf, account, options);\r\n}\r\n/**\r\n *  Resolved to the JSON Keystore Wallet for %%account%% encrypted\r\n *  with %%password%%.\r\n *\r\n *  The %%options%% can be used to tune the password-based key\r\n *  derivation function parameters, explicitly set the random values\r\n *  used and provide a [[ProgressCallback]] to receive periodic updates\r\n *  on the completion status..\r\n */\r\nasync function encryptKeystoreJson(account, password, options) {\r\n    if (options == null) {\r\n        options = {};\r\n    }\r\n    const passwordBytes = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.getPassword)(password);\r\n    const kdf = getEncryptKdfParams(options);\r\n    const key = await (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_3__.scrypt)(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64, options.progressCallback);\r\n    return _encryptKeystore((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getBytes)(key), kdf, account, options);\r\n}\r\n//# sourceMappingURL=json-keystore.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/wallet/json-keystore.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/wallet/mnemonic.js":
/*!********************************************************!*\
  !*** ./node_modules/ethers/lib.esm/wallet/mnemonic.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Mnemonic: () => (/* binding */ Mnemonic)\n/* harmony export */ });\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../crypto/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/index.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/* harmony import */ var _wordlists_lang_en_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../wordlists/lang-en.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/wordlists/lang-en.js\");\n\r\n\r\n\r\n// Returns a byte with the MSB bits set\r\nfunction getUpperMask(bits) {\r\n    return ((1 << bits) - 1) << (8 - bits) & 0xff;\r\n}\r\n// Returns a byte with the LSB bits set\r\nfunction getLowerMask(bits) {\r\n    return ((1 << bits) - 1) & 0xff;\r\n}\r\nfunction mnemonicToEntropy(mnemonic, wordlist) {\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertNormalize)(\"NFKD\");\r\n    if (wordlist == null) {\r\n        wordlist = _wordlists_lang_en_js__WEBPACK_IMPORTED_MODULE_1__.LangEn.wordlist();\r\n    }\r\n    const words = wordlist.split(mnemonic);\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)((words.length % 3) === 0 && words.length >= 12 && words.length <= 24, \"invalid mnemonic length\", \"mnemonic\", \"[ REDACTED ]\");\r\n    const entropy = new Uint8Array(Math.ceil(11 * words.length / 8));\r\n    let offset = 0;\r\n    for (let i = 0; i < words.length; i++) {\r\n        let index = wordlist.getWordIndex(words[i].normalize(\"NFKD\"));\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(index >= 0, `invalid mnemonic word at index ${i}`, \"mnemonic\", \"[ REDACTED ]\");\r\n        for (let bit = 0; bit < 11; bit++) {\r\n            if (index & (1 << (10 - bit))) {\r\n                entropy[offset >> 3] |= (1 << (7 - (offset % 8)));\r\n            }\r\n            offset++;\r\n        }\r\n    }\r\n    const entropyBits = 32 * words.length / 3;\r\n    const checksumBits = words.length / 3;\r\n    const checksumMask = getUpperMask(checksumBits);\r\n    const checksum = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)((0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_2__.sha256)(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(checksum === (entropy[entropy.length - 1] & checksumMask), \"invalid mnemonic checksum\", \"mnemonic\", \"[ REDACTED ]\");\r\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(entropy.slice(0, entropyBits / 8));\r\n}\r\nfunction entropyToMnemonic(entropy, wordlist) {\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)((entropy.length % 4) === 0 && entropy.length >= 16 && entropy.length <= 32, \"invalid entropy size\", \"entropy\", \"[ REDACTED ]\");\r\n    if (wordlist == null) {\r\n        wordlist = _wordlists_lang_en_js__WEBPACK_IMPORTED_MODULE_1__.LangEn.wordlist();\r\n    }\r\n    const indices = [0];\r\n    let remainingBits = 11;\r\n    for (let i = 0; i < entropy.length; i++) {\r\n        // Consume the whole byte (with still more to go)\r\n        if (remainingBits > 8) {\r\n            indices[indices.length - 1] <<= 8;\r\n            indices[indices.length - 1] |= entropy[i];\r\n            remainingBits -= 8;\r\n            // This byte will complete an 11-bit index\r\n        }\r\n        else {\r\n            indices[indices.length - 1] <<= remainingBits;\r\n            indices[indices.length - 1] |= entropy[i] >> (8 - remainingBits);\r\n            // Start the next word\r\n            indices.push(entropy[i] & getLowerMask(8 - remainingBits));\r\n            remainingBits += 3;\r\n        }\r\n    }\r\n    // Compute the checksum bits\r\n    const checksumBits = entropy.length / 4;\r\n    const checksum = parseInt((0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_2__.sha256)(entropy).substring(2, 4), 16) & getUpperMask(checksumBits);\r\n    // Shift the checksum into the word indices\r\n    indices[indices.length - 1] <<= checksumBits;\r\n    indices[indices.length - 1] |= (checksum >> (8 - checksumBits));\r\n    return wordlist.join(indices.map((index) => wordlist.getWord(index)));\r\n}\r\nconst _guard = {};\r\n/**\r\n *  A **Mnemonic** wraps all properties required to compute [[link-bip-39]]\r\n *  seeds and convert between phrases and entropy.\r\n */\r\nclass Mnemonic {\r\n    /**\r\n     *  The mnemonic phrase of 12, 15, 18, 21 or 24 words.\r\n     *\r\n     *  Use the [[wordlist]] ``split`` method to get the individual words.\r\n     */\r\n    phrase;\r\n    /**\r\n     *  The password used for this mnemonic. If no password is used this\r\n     *  is the empty string (i.e. ``\"\"``) as per the specification.\r\n     */\r\n    password;\r\n    /**\r\n     *  The wordlist for this mnemonic.\r\n     */\r\n    wordlist;\r\n    /**\r\n     *  The underlying entropy which the mnemonic encodes.\r\n     */\r\n    entropy;\r\n    /**\r\n     *  @private\r\n     */\r\n    constructor(guard, entropy, phrase, password, wordlist) {\r\n        if (password == null) {\r\n            password = \"\";\r\n        }\r\n        if (wordlist == null) {\r\n            wordlist = _wordlists_lang_en_js__WEBPACK_IMPORTED_MODULE_1__.LangEn.wordlist();\r\n        }\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertPrivate)(guard, _guard, \"Mnemonic\");\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, { phrase, password, wordlist, entropy });\r\n    }\r\n    /**\r\n     *  Returns the seed for the mnemonic.\r\n     */\r\n    computeSeed() {\r\n        const salt = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toUtf8Bytes)(\"mnemonic\" + this.password, \"NFKD\");\r\n        return (0,_crypto_index_js__WEBPACK_IMPORTED_MODULE_2__.pbkdf2)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toUtf8Bytes)(this.phrase, \"NFKD\"), salt, 2048, 64, \"sha512\");\r\n    }\r\n    /**\r\n     *  Creates a new Mnemonic for the %%phrase%%.\r\n     *\r\n     *  The default %%password%% is the empty string and the default\r\n     *  wordlist is the [English wordlists](LangEn).\r\n     */\r\n    static fromPhrase(phrase, password, wordlist) {\r\n        // Normalize the case and space; throws if invalid\r\n        const entropy = mnemonicToEntropy(phrase, wordlist);\r\n        phrase = entropyToMnemonic((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(entropy), wordlist);\r\n        return new Mnemonic(_guard, entropy, phrase, password, wordlist);\r\n    }\r\n    /**\r\n     *  Create a new **Mnemonic** from the %%entropy%%.\r\n     *\r\n     *  The default %%password%% is the empty string and the default\r\n     *  wordlist is the [English wordlists](LangEn).\r\n     */\r\n    static fromEntropy(_entropy, password, wordlist) {\r\n        const entropy = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(_entropy, \"entropy\");\r\n        const phrase = entropyToMnemonic(entropy, wordlist);\r\n        return new Mnemonic(_guard, (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.hexlify)(entropy), phrase, password, wordlist);\r\n    }\r\n    /**\r\n     *  Returns the phrase for %%mnemonic%%.\r\n     */\r\n    static entropyToPhrase(_entropy, wordlist) {\r\n        const entropy = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytes)(_entropy, \"entropy\");\r\n        return entropyToMnemonic(entropy, wordlist);\r\n    }\r\n    /**\r\n     *  Returns the entropy for %%phrase%%.\r\n     */\r\n    static phraseToEntropy(phrase, wordlist) {\r\n        return mnemonicToEntropy(phrase, wordlist);\r\n    }\r\n    /**\r\n     *  Returns true if %%phrase%% is a valid [[link-bip-39]] phrase.\r\n     *\r\n     *  This checks all the provided words belong to the %%wordlist%%,\r\n     *  that the length is valid and the checksum is correct.\r\n     */\r\n    static isValidMnemonic(phrase, wordlist) {\r\n        try {\r\n            mnemonicToEntropy(phrase, wordlist);\r\n            return true;\r\n        }\r\n        catch (error) { }\r\n        return false;\r\n    }\r\n}\r\n//# sourceMappingURL=mnemonic.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/wallet/mnemonic.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/wallet/utils.js":
/*!*****************************************************!*\
  !*** ./node_modules/ethers/lib.esm/wallet/utils.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getPassword: () => (/* binding */ getPassword),\n/* harmony export */   looseArrayify: () => (/* binding */ looseArrayify),\n/* harmony export */   spelunk: () => (/* binding */ spelunk),\n/* harmony export */   zpad: () => (/* binding */ zpad)\n/* harmony export */ });\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/**\r\n *  @_ignore\r\n */\r\n\r\nfunction looseArrayify(hexString) {\r\n    if (typeof (hexString) === \"string\" && !hexString.startsWith(\"0x\")) {\r\n        hexString = \"0x\" + hexString;\r\n    }\r\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytesCopy)(hexString);\r\n}\r\nfunction zpad(value, length) {\r\n    value = String(value);\r\n    while (value.length < length) {\r\n        value = '0' + value;\r\n    }\r\n    return value;\r\n}\r\nfunction getPassword(password) {\r\n    if (typeof (password) === 'string') {\r\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.toUtf8Bytes)(password, \"NFKC\");\r\n    }\r\n    return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.getBytesCopy)(password);\r\n}\r\nfunction spelunk(object, _path) {\r\n    const match = _path.match(/^([a-z0-9$_.-]*)(:([a-z]+))?(!)?$/i);\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(match != null, \"invalid path\", \"path\", _path);\r\n    const path = match[1];\r\n    const type = match[3];\r\n    const reqd = (match[4] === \"!\");\r\n    let cur = object;\r\n    for (const comp of path.toLowerCase().split('.')) {\r\n        // Search for a child object with a case-insensitive matching key\r\n        if (Array.isArray(cur)) {\r\n            if (!comp.match(/^[0-9]+$/)) {\r\n                break;\r\n            }\r\n            cur = cur[parseInt(comp)];\r\n        }\r\n        else if (typeof (cur) === \"object\") {\r\n            let found = null;\r\n            for (const key in cur) {\r\n                if (key.toLowerCase() === comp) {\r\n                    found = cur[key];\r\n                    break;\r\n                }\r\n            }\r\n            cur = found;\r\n        }\r\n        else {\r\n            cur = null;\r\n        }\r\n        if (cur == null) {\r\n            break;\r\n        }\r\n    }\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(!reqd || cur != null, \"missing required value\", \"path\", path);\r\n    if (type && cur != null) {\r\n        if (type === \"int\") {\r\n            if (typeof (cur) === \"string\" && cur.match(/^-?[0-9]+$/)) {\r\n                return parseInt(cur);\r\n            }\r\n            else if (Number.isSafeInteger(cur)) {\r\n                return cur;\r\n            }\r\n        }\r\n        if (type === \"number\") {\r\n            if (typeof (cur) === \"string\" && cur.match(/^-?[0-9.]*$/)) {\r\n                return parseFloat(cur);\r\n            }\r\n        }\r\n        if (type === \"data\") {\r\n            if (typeof (cur) === \"string\") {\r\n                return looseArrayify(cur);\r\n            }\r\n        }\r\n        if (type === \"array\" && Array.isArray(cur)) {\r\n            return cur;\r\n        }\r\n        if (type === typeof (cur)) {\r\n            return cur;\r\n        }\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(false, `wrong type found for ${type} `, \"path\", path);\r\n    }\r\n    return cur;\r\n}\r\n/*\r\nexport function follow(object: any, path: string): null | string {\r\n    let currentChild = object;\r\n\r\n    for (const comp of path.toLowerCase().split('/')) {\r\n\r\n        // Search for a child object with a case-insensitive matching key\r\n        let matchingChild = null;\r\n        for (const key in currentChild) {\r\n             if (key.toLowerCase() === comp) {\r\n                 matchingChild = currentChild[key];\r\n                 break;\r\n             }\r\n        }\r\n\r\n        if (matchingChild === null) { return null; }\r\n\r\n        currentChild = matchingChild;\r\n    }\r\n\r\n    return currentChild;\r\n}\r\n\r\n// \"path/to/something:type!\"\r\nexport function followRequired(data: any, path: string): string {\r\n    const value = follow(data, path);\r\n    if (value != null) { return value; }\r\n    return logger.throwArgumentError(\"invalid value\", `data:${ path }`,\r\n    JSON.stringify(data));\r\n}\r\n*/\r\n// See: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)\r\n/*\r\nexport function uuidV4(randomBytes: BytesLike): string {\r\n    const bytes = getBytes(randomBytes, \"randomBytes\");\r\n\r\n    // Section: 4.1.3:\r\n    // - time_hi_and_version[12:16] = 0b0100\r\n    bytes[6] = (bytes[6] & 0x0f) | 0x40;\r\n\r\n    // Section 4.4\r\n    // - clock_seq_hi_and_reserved[6] = 0b0\r\n    // - clock_seq_hi_and_reserved[7] = 0b1\r\n    bytes[8] = (bytes[8] & 0x3f) | 0x80;\r\n\r\n    const value = hexlify(bytes);\r\n\r\n    return [\r\n       value.substring(2, 10),\r\n       value.substring(10, 14),\r\n       value.substring(14, 18),\r\n       value.substring(18, 22),\r\n       value.substring(22, 34),\r\n    ].join(\"-\");\r\n}\r\n*/\r\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS93YWxsZXQvdXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDOEU7QUFDdkU7QUFDUDtBQUNBO0FBQ0E7QUFDQSxXQUFXLDZEQUFZO0FBQ3ZCO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsZUFBZSw0REFBVztBQUMxQjtBQUNBLFdBQVcsNkRBQVk7QUFDdkI7QUFDTztBQUNQO0FBQ0EsSUFBSSwrREFBYztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSwrREFBYztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsK0RBQWMsZ0NBQWdDLE1BQU07QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCLCtEQUErRCxNQUFNO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkQ6XFxEb19hbjJcXGxlbmRodWJfdjJcXGxlbmRodWItZnJvbnRlbmQtbmV4dGpzXFxub2RlX21vZHVsZXNcXGV0aGVyc1xcbGliLmVzbVxcd2FsbGV0XFx1dGlscy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogIEBfaWdub3JlXHJcbiAqL1xyXG5pbXBvcnQgeyBnZXRCeXRlc0NvcHksIGFzc2VydEFyZ3VtZW50LCB0b1V0ZjhCeXRlcyB9IGZyb20gXCIuLi91dGlscy9pbmRleC5qc1wiO1xyXG5leHBvcnQgZnVuY3Rpb24gbG9vc2VBcnJheWlmeShoZXhTdHJpbmcpIHtcclxuICAgIGlmICh0eXBlb2YgKGhleFN0cmluZykgPT09IFwic3RyaW5nXCIgJiYgIWhleFN0cmluZy5zdGFydHNXaXRoKFwiMHhcIikpIHtcclxuICAgICAgICBoZXhTdHJpbmcgPSBcIjB4XCIgKyBoZXhTdHJpbmc7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZ2V0Qnl0ZXNDb3B5KGhleFN0cmluZyk7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIHpwYWQodmFsdWUsIGxlbmd0aCkge1xyXG4gICAgdmFsdWUgPSBTdHJpbmcodmFsdWUpO1xyXG4gICAgd2hpbGUgKHZhbHVlLmxlbmd0aCA8IGxlbmd0aCkge1xyXG4gICAgICAgIHZhbHVlID0gJzAnICsgdmFsdWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFBhc3N3b3JkKHBhc3N3b3JkKSB7XHJcbiAgICBpZiAodHlwZW9mIChwYXNzd29yZCkgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgcmV0dXJuIHRvVXRmOEJ5dGVzKHBhc3N3b3JkLCBcIk5GS0NcIik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZ2V0Qnl0ZXNDb3B5KHBhc3N3b3JkKTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gc3BlbHVuayhvYmplY3QsIF9wYXRoKSB7XHJcbiAgICBjb25zdCBtYXRjaCA9IF9wYXRoLm1hdGNoKC9eKFthLXowLTkkXy4tXSopKDooW2Etel0rKSk/KCEpPyQvaSk7XHJcbiAgICBhc3NlcnRBcmd1bWVudChtYXRjaCAhPSBudWxsLCBcImludmFsaWQgcGF0aFwiLCBcInBhdGhcIiwgX3BhdGgpO1xyXG4gICAgY29uc3QgcGF0aCA9IG1hdGNoWzFdO1xyXG4gICAgY29uc3QgdHlwZSA9IG1hdGNoWzNdO1xyXG4gICAgY29uc3QgcmVxZCA9IChtYXRjaFs0XSA9PT0gXCIhXCIpO1xyXG4gICAgbGV0IGN1ciA9IG9iamVjdDtcclxuICAgIGZvciAoY29uc3QgY29tcCBvZiBwYXRoLnRvTG93ZXJDYXNlKCkuc3BsaXQoJy4nKSkge1xyXG4gICAgICAgIC8vIFNlYXJjaCBmb3IgYSBjaGlsZCBvYmplY3Qgd2l0aCBhIGNhc2UtaW5zZW5zaXRpdmUgbWF0Y2hpbmcga2V5XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY3VyKSkge1xyXG4gICAgICAgICAgICBpZiAoIWNvbXAubWF0Y2goL15bMC05XSskLykpIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGN1ciA9IGN1cltwYXJzZUludChjb21wKV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiAoY3VyKSA9PT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICBsZXQgZm91bmQgPSBudWxsO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBjdXIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChrZXkudG9Mb3dlckNhc2UoKSA9PT0gY29tcCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvdW5kID0gY3VyW2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY3VyID0gZm91bmQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjdXIgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY3VyID09IG51bGwpIHtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgYXNzZXJ0QXJndW1lbnQoIXJlcWQgfHwgY3VyICE9IG51bGwsIFwibWlzc2luZyByZXF1aXJlZCB2YWx1ZVwiLCBcInBhdGhcIiwgcGF0aCk7XHJcbiAgICBpZiAodHlwZSAmJiBjdXIgIT0gbnVsbCkge1xyXG4gICAgICAgIGlmICh0eXBlID09PSBcImludFwiKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgKGN1cikgPT09IFwic3RyaW5nXCIgJiYgY3VyLm1hdGNoKC9eLT9bMC05XSskLykpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUludChjdXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKE51bWJlci5pc1NhZmVJbnRlZ2VyKGN1cikpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjdXI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGUgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiAoY3VyKSA9PT0gXCJzdHJpbmdcIiAmJiBjdXIubWF0Y2goL14tP1swLTkuXSokLykpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KGN1cik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGUgPT09IFwiZGF0YVwiKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgKGN1cikgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBsb29zZUFycmF5aWZ5KGN1cik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGUgPT09IFwiYXJyYXlcIiAmJiBBcnJheS5pc0FycmF5KGN1cikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGN1cjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGUgPT09IHR5cGVvZiAoY3VyKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gY3VyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhc3NlcnRBcmd1bWVudChmYWxzZSwgYHdyb25nIHR5cGUgZm91bmQgZm9yICR7dHlwZX0gYCwgXCJwYXRoXCIsIHBhdGgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGN1cjtcclxufVxyXG4vKlxyXG5leHBvcnQgZnVuY3Rpb24gZm9sbG93KG9iamVjdDogYW55LCBwYXRoOiBzdHJpbmcpOiBudWxsIHwgc3RyaW5nIHtcclxuICAgIGxldCBjdXJyZW50Q2hpbGQgPSBvYmplY3Q7XHJcblxyXG4gICAgZm9yIChjb25zdCBjb21wIG9mIHBhdGgudG9Mb3dlckNhc2UoKS5zcGxpdCgnLycpKSB7XHJcblxyXG4gICAgICAgIC8vIFNlYXJjaCBmb3IgYSBjaGlsZCBvYmplY3Qgd2l0aCBhIGNhc2UtaW5zZW5zaXRpdmUgbWF0Y2hpbmcga2V5XHJcbiAgICAgICAgbGV0IG1hdGNoaW5nQ2hpbGQgPSBudWxsO1xyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGN1cnJlbnRDaGlsZCkge1xyXG4gICAgICAgICAgICAgaWYgKGtleS50b0xvd2VyQ2FzZSgpID09PSBjb21wKSB7XHJcbiAgICAgICAgICAgICAgICAgbWF0Y2hpbmdDaGlsZCA9IGN1cnJlbnRDaGlsZFtrZXldO1xyXG4gICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG1hdGNoaW5nQ2hpbGQgPT09IG51bGwpIHsgcmV0dXJuIG51bGw7IH1cclxuXHJcbiAgICAgICAgY3VycmVudENoaWxkID0gbWF0Y2hpbmdDaGlsZDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY3VycmVudENoaWxkO1xyXG59XHJcblxyXG4vLyBcInBhdGgvdG8vc29tZXRoaW5nOnR5cGUhXCJcclxuZXhwb3J0IGZ1bmN0aW9uIGZvbGxvd1JlcXVpcmVkKGRhdGE6IGFueSwgcGF0aDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IHZhbHVlID0gZm9sbG93KGRhdGEsIHBhdGgpO1xyXG4gICAgaWYgKHZhbHVlICE9IG51bGwpIHsgcmV0dXJuIHZhbHVlOyB9XHJcbiAgICByZXR1cm4gbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgdmFsdWVcIiwgYGRhdGE6JHsgcGF0aCB9YCxcclxuICAgIEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcclxufVxyXG4qL1xyXG4vLyBTZWU6IGh0dHBzOi8vd3d3LmlldGYub3JnL3JmYy9yZmM0MTIyLnR4dCAoU2VjdGlvbiA0LjQpXHJcbi8qXHJcbmV4cG9ydCBmdW5jdGlvbiB1dWlkVjQocmFuZG9tQnl0ZXM6IEJ5dGVzTGlrZSk6IHN0cmluZyB7XHJcbiAgICBjb25zdCBieXRlcyA9IGdldEJ5dGVzKHJhbmRvbUJ5dGVzLCBcInJhbmRvbUJ5dGVzXCIpO1xyXG5cclxuICAgIC8vIFNlY3Rpb246IDQuMS4zOlxyXG4gICAgLy8gLSB0aW1lX2hpX2FuZF92ZXJzaW9uWzEyOjE2XSA9IDBiMDEwMFxyXG4gICAgYnl0ZXNbNl0gPSAoYnl0ZXNbNl0gJiAweDBmKSB8IDB4NDA7XHJcblxyXG4gICAgLy8gU2VjdGlvbiA0LjRcclxuICAgIC8vIC0gY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZFs2XSA9IDBiMFxyXG4gICAgLy8gLSBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkWzddID0gMGIxXHJcbiAgICBieXRlc1s4XSA9IChieXRlc1s4XSAmIDB4M2YpIHwgMHg4MDtcclxuXHJcbiAgICBjb25zdCB2YWx1ZSA9IGhleGxpZnkoYnl0ZXMpO1xyXG5cclxuICAgIHJldHVybiBbXHJcbiAgICAgICB2YWx1ZS5zdWJzdHJpbmcoMiwgMTApLFxyXG4gICAgICAgdmFsdWUuc3Vic3RyaW5nKDEwLCAxNCksXHJcbiAgICAgICB2YWx1ZS5zdWJzdHJpbmcoMTQsIDE4KSxcclxuICAgICAgIHZhbHVlLnN1YnN0cmluZygxOCwgMjIpLFxyXG4gICAgICAgdmFsdWUuc3Vic3RyaW5nKDIyLCAzNCksXHJcbiAgICBdLmpvaW4oXCItXCIpO1xyXG59XHJcbiovXHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/wallet/utils.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/wallet/wallet.js":
/*!******************************************************!*\
  !*** ./node_modules/ethers/lib.esm/wallet/wallet.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Wallet: () => (/* binding */ Wallet)\n/* harmony export */ });\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../crypto/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/crypto/index.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/* harmony import */ var _base_wallet_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base-wallet.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/wallet/base-wallet.js\");\n/* harmony import */ var _hdwallet_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./hdwallet.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/wallet/hdwallet.js\");\n/* harmony import */ var _json_crowdsale_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./json-crowdsale.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/wallet/json-crowdsale.js\");\n/* harmony import */ var _json_keystore_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./json-keystore.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/wallet/json-keystore.js\");\n/* harmony import */ var _mnemonic_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./mnemonic.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/wallet/mnemonic.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction stall(duration) {\r\n    return new Promise((resolve) => { setTimeout(() => { resolve(); }, duration); });\r\n}\r\n/**\r\n *  A **Wallet** manages a single private key which is used to sign\r\n *  transactions, messages and other common payloads.\r\n *\r\n *  This class is generally the main entry point for developers\r\n *  that wish to use a private key directly, as it can create\r\n *  instances from a large variety of common sources, including\r\n *  raw private key, [[link-bip-39]] mnemonics and encrypte JSON\r\n *  wallets.\r\n */\r\nclass Wallet extends _base_wallet_js__WEBPACK_IMPORTED_MODULE_0__.BaseWallet {\r\n    /**\r\n     *  Create a new wallet for the private %%key%%, optionally connected\r\n     *  to %%provider%%.\r\n     */\r\n    constructor(key, provider) {\r\n        if (typeof (key) === \"string\" && !key.startsWith(\"0x\")) {\r\n            key = \"0x\" + key;\r\n        }\r\n        let signingKey = (typeof (key) === \"string\") ? new _crypto_index_js__WEBPACK_IMPORTED_MODULE_1__.SigningKey(key) : key;\r\n        super(signingKey, provider);\r\n    }\r\n    connect(provider) {\r\n        return new Wallet(this.signingKey, provider);\r\n    }\r\n    /**\r\n     *  Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with\r\n     *  %%password%%.\r\n     *\r\n     *  If %%progressCallback%% is specified, it will receive periodic\r\n     *  updates as the encryption process progreses.\r\n     */\r\n    async encrypt(password, progressCallback) {\r\n        const account = { address: this.address, privateKey: this.privateKey };\r\n        return await (0,_json_keystore_js__WEBPACK_IMPORTED_MODULE_2__.encryptKeystoreJson)(account, password, { progressCallback });\r\n    }\r\n    /**\r\n     *  Returns a [JSON Keystore Wallet](json-wallets) encryped with\r\n     *  %%password%%.\r\n     *\r\n     *  It is preferred to use the [async version](encrypt) instead,\r\n     *  which allows a [[ProgressCallback]] to keep the user informed.\r\n     *\r\n     *  This method will block the event loop (freezing all UI) until\r\n     *  it is complete, which may be a non-trivial duration.\r\n     */\r\n    encryptSync(password) {\r\n        const account = { address: this.address, privateKey: this.privateKey };\r\n        return (0,_json_keystore_js__WEBPACK_IMPORTED_MODULE_2__.encryptKeystoreJsonSync)(account, password);\r\n    }\r\n    static #fromAccount(account) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertArgument)(account, \"invalid JSON wallet\", \"json\", \"[ REDACTED ]\");\r\n        if (\"mnemonic\" in account && account.mnemonic && account.mnemonic.locale === \"en\") {\r\n            const mnemonic = _mnemonic_js__WEBPACK_IMPORTED_MODULE_4__.Mnemonic.fromEntropy(account.mnemonic.entropy);\r\n            const wallet = _hdwallet_js__WEBPACK_IMPORTED_MODULE_5__.HDNodeWallet.fromMnemonic(mnemonic, account.mnemonic.path);\r\n            if (wallet.address === account.address && wallet.privateKey === account.privateKey) {\r\n                return wallet;\r\n            }\r\n            console.log(\"WARNING: JSON mismatch address/privateKey != mnemonic; fallback onto private key\");\r\n        }\r\n        const wallet = new Wallet(account.privateKey);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertArgument)(wallet.address === account.address, \"address/privateKey mismatch\", \"json\", \"[ REDACTED ]\");\r\n        return wallet;\r\n    }\r\n    /**\r\n     *  Creates (asynchronously) a **Wallet** by decrypting the %%json%%\r\n     *  with %%password%%.\r\n     *\r\n     *  If %%progress%% is provided, it is called periodically during\r\n     *  decryption so that any UI can be updated.\r\n     */\r\n    static async fromEncryptedJson(json, password, progress) {\r\n        let account = null;\r\n        if ((0,_json_keystore_js__WEBPACK_IMPORTED_MODULE_2__.isKeystoreJson)(json)) {\r\n            account = await (0,_json_keystore_js__WEBPACK_IMPORTED_MODULE_2__.decryptKeystoreJson)(json, password, progress);\r\n        }\r\n        else if ((0,_json_crowdsale_js__WEBPACK_IMPORTED_MODULE_6__.isCrowdsaleJson)(json)) {\r\n            if (progress) {\r\n                progress(0);\r\n                await stall(0);\r\n            }\r\n            account = (0,_json_crowdsale_js__WEBPACK_IMPORTED_MODULE_6__.decryptCrowdsaleJson)(json, password);\r\n            if (progress) {\r\n                progress(1);\r\n                await stall(0);\r\n            }\r\n        }\r\n        return Wallet.#fromAccount(account);\r\n    }\r\n    /**\r\n     *  Creates a **Wallet** by decrypting the %%json%% with %%password%%.\r\n     *\r\n     *  The [[fromEncryptedJson]] method is preferred, as this method\r\n     *  will lock up and freeze the UI during decryption, which may take\r\n     *  some time.\r\n     */\r\n    static fromEncryptedJsonSync(json, password) {\r\n        let account = null;\r\n        if ((0,_json_keystore_js__WEBPACK_IMPORTED_MODULE_2__.isKeystoreJson)(json)) {\r\n            account = (0,_json_keystore_js__WEBPACK_IMPORTED_MODULE_2__.decryptKeystoreJsonSync)(json, password);\r\n        }\r\n        else if ((0,_json_crowdsale_js__WEBPACK_IMPORTED_MODULE_6__.isCrowdsaleJson)(json)) {\r\n            account = (0,_json_crowdsale_js__WEBPACK_IMPORTED_MODULE_6__.decryptCrowdsaleJson)(json, password);\r\n        }\r\n        else {\r\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertArgument)(false, \"invalid JSON wallet\", \"json\", \"[ REDACTED ]\");\r\n        }\r\n        return Wallet.#fromAccount(account);\r\n    }\r\n    /**\r\n     *  Creates a new random [[HDNodeWallet]] using the available\r\n     *  [cryptographic random source](randomBytes).\r\n     *\r\n     *  If there is no crytographic random source, this will throw.\r\n     */\r\n    static createRandom(provider) {\r\n        const wallet = _hdwallet_js__WEBPACK_IMPORTED_MODULE_5__.HDNodeWallet.createRandom();\r\n        if (provider) {\r\n            return wallet.connect(provider);\r\n        }\r\n        return wallet;\r\n    }\r\n    /**\r\n     *  Creates a [[HDNodeWallet]] for %%phrase%%.\r\n     */\r\n    static fromPhrase(phrase, provider) {\r\n        const wallet = _hdwallet_js__WEBPACK_IMPORTED_MODULE_5__.HDNodeWallet.fromPhrase(phrase);\r\n        if (provider) {\r\n            return wallet.connect(provider);\r\n        }\r\n        return wallet;\r\n    }\r\n}\r\n//# sourceMappingURL=wallet.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/wallet/wallet.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/wordlists/bit-reader.js":
/*!*************************************************************!*\
  !*** ./node_modules/ethers/lib.esm/wordlists/bit-reader.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeBits: () => (/* binding */ decodeBits)\n/* harmony export */ });\nconst Base64 = \")!@#$%^&*(ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_\";\r\n/**\r\n *  @_ignore\r\n */\r\nfunction decodeBits(width, data) {\r\n    const maxValue = (1 << width) - 1;\r\n    const result = [];\r\n    let accum = 0, bits = 0, flood = 0;\r\n    for (let i = 0; i < data.length; i++) {\r\n        // Accumulate 6 bits of data\r\n        accum = ((accum << 6) | Base64.indexOf(data[i]));\r\n        bits += 6;\r\n        // While we have enough for a word...\r\n        while (bits >= width) {\r\n            // ...read the word\r\n            const value = (accum >> (bits - width));\r\n            accum &= (1 << (bits - width)) - 1;\r\n            bits -= width;\r\n            // A value of 0 indicates we exceeded maxValue, it\r\n            // floods over into the next value\r\n            if (value === 0) {\r\n                flood += maxValue;\r\n            }\r\n            else {\r\n                result.push(value + flood);\r\n                flood = 0;\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}\r\n//# sourceMappingURL=bit-reader.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS93b3JkbGlzdHMvYml0LXJlYWRlci5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixpQkFBaUI7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiRDpcXERvX2FuMlxcbGVuZGh1Yl92MlxcbGVuZGh1Yi1mcm9udGVuZC1uZXh0anNcXG5vZGVfbW9kdWxlc1xcZXRoZXJzXFxsaWIuZXNtXFx3b3JkbGlzdHNcXGJpdC1yZWFkZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQmFzZTY0ID0gXCIpIUAjJCVeJiooQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ei1fXCI7XHJcbi8qKlxyXG4gKiAgQF9pZ25vcmVcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVCaXRzKHdpZHRoLCBkYXRhKSB7XHJcbiAgICBjb25zdCBtYXhWYWx1ZSA9ICgxIDw8IHdpZHRoKSAtIDE7XHJcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcclxuICAgIGxldCBhY2N1bSA9IDAsIGJpdHMgPSAwLCBmbG9vZCA9IDA7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAvLyBBY2N1bXVsYXRlIDYgYml0cyBvZiBkYXRhXHJcbiAgICAgICAgYWNjdW0gPSAoKGFjY3VtIDw8IDYpIHwgQmFzZTY0LmluZGV4T2YoZGF0YVtpXSkpO1xyXG4gICAgICAgIGJpdHMgKz0gNjtcclxuICAgICAgICAvLyBXaGlsZSB3ZSBoYXZlIGVub3VnaCBmb3IgYSB3b3JkLi4uXHJcbiAgICAgICAgd2hpbGUgKGJpdHMgPj0gd2lkdGgpIHtcclxuICAgICAgICAgICAgLy8gLi4ucmVhZCB0aGUgd29yZFxyXG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IChhY2N1bSA+PiAoYml0cyAtIHdpZHRoKSk7XHJcbiAgICAgICAgICAgIGFjY3VtICY9ICgxIDw8IChiaXRzIC0gd2lkdGgpKSAtIDE7XHJcbiAgICAgICAgICAgIGJpdHMgLT0gd2lkdGg7XHJcbiAgICAgICAgICAgIC8vIEEgdmFsdWUgb2YgMCBpbmRpY2F0ZXMgd2UgZXhjZWVkZWQgbWF4VmFsdWUsIGl0XHJcbiAgICAgICAgICAgIC8vIGZsb29kcyBvdmVyIGludG8gdGhlIG5leHQgdmFsdWVcclxuICAgICAgICAgICAgaWYgKHZhbHVlID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBmbG9vZCArPSBtYXhWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlICsgZmxvb2QpO1xyXG4gICAgICAgICAgICAgICAgZmxvb2QgPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1iaXQtcmVhZGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/wordlists/bit-reader.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/wordlists/decode-owl.js":
/*!*************************************************************!*\
  !*** ./node_modules/ethers/lib.esm/wordlists/decode-owl.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   decodeOwl: () => (/* binding */ decodeOwl)\n/* harmony export */ });\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n\r\nconst subsChrs = \" !#$%&'()*+,-./<=>?@[]^_`{|}~\";\r\nconst Word = /^[a-z]*$/i;\r\nfunction unfold(words, sep) {\r\n    let initial = 97;\r\n    return words.reduce((accum, word) => {\r\n        if (word === sep) {\r\n            initial++;\r\n        }\r\n        else if (word.match(Word)) {\r\n            accum.push(String.fromCharCode(initial) + word);\r\n        }\r\n        else {\r\n            initial = 97;\r\n            accum.push(word);\r\n        }\r\n        return accum;\r\n    }, []);\r\n}\r\n/**\r\n *  @_ignore\r\n */\r\nfunction decode(data, subs) {\r\n    // Replace all the substitutions with their expanded form\r\n    for (let i = subsChrs.length - 1; i >= 0; i--) {\r\n        data = data.split(subsChrs[i]).join(subs.substring(2 * i, 2 * i + 2));\r\n    }\r\n    // Get all tle clumps; each suffix, first-increment and second-increment\r\n    const clumps = [];\r\n    const leftover = data.replace(/(:|([0-9])|([A-Z][a-z]*))/g, (all, item, semi, word) => {\r\n        if (semi) {\r\n            for (let i = parseInt(semi); i >= 0; i--) {\r\n                clumps.push(\";\");\r\n            }\r\n        }\r\n        else {\r\n            clumps.push(item.toLowerCase());\r\n        }\r\n        return \"\";\r\n    });\r\n    /* c8 ignore start */\r\n    if (leftover) {\r\n        throw new Error(`leftovers: ${JSON.stringify(leftover)}`);\r\n    }\r\n    /* c8 ignore stop */\r\n    return unfold(unfold(clumps, \";\"), \":\");\r\n}\r\n/**\r\n *  @_ignore\r\n */\r\nfunction decodeOwl(data) {\r\n    (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.assertArgument)(data[0] === \"0\", \"unsupported auwl data\", \"data\", data);\r\n    return decode(data.substring(1 + 2 * subsChrs.length), data.substring(1, 1 + 2 * subsChrs.length));\r\n}\r\n//# sourceMappingURL=decode-owl.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS93b3JkbGlzdHMvZGVjb2RlLW93bC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBbUQ7QUFDbkQsNENBQTRDLEVBQUU7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLHNDQUFzQyxRQUFRO0FBQzlDO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLFFBQVE7QUFDakQsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0Esc0NBQXNDLHlCQUF5QjtBQUMvRDtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxJQUFJLCtEQUFjO0FBQ2xCO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiRDpcXERvX2FuMlxcbGVuZGh1Yl92MlxcbGVuZGh1Yi1mcm9udGVuZC1uZXh0anNcXG5vZGVfbW9kdWxlc1xcZXRoZXJzXFxsaWIuZXNtXFx3b3JkbGlzdHNcXGRlY29kZS1vd2wuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXNzZXJ0QXJndW1lbnQgfSBmcm9tIFwiLi4vdXRpbHMvaW5kZXguanNcIjtcclxuY29uc3Qgc3Vic0NocnMgPSBcIiAhIyQlJicoKSorLC0uLzw9Pj9AW11eX2B7fH1+XCI7XHJcbmNvbnN0IFdvcmQgPSAvXlthLXpdKiQvaTtcclxuZnVuY3Rpb24gdW5mb2xkKHdvcmRzLCBzZXApIHtcclxuICAgIGxldCBpbml0aWFsID0gOTc7XHJcbiAgICByZXR1cm4gd29yZHMucmVkdWNlKChhY2N1bSwgd29yZCkgPT4ge1xyXG4gICAgICAgIGlmICh3b3JkID09PSBzZXApIHtcclxuICAgICAgICAgICAgaW5pdGlhbCsrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh3b3JkLm1hdGNoKFdvcmQpKSB7XHJcbiAgICAgICAgICAgIGFjY3VtLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShpbml0aWFsKSArIHdvcmQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaW5pdGlhbCA9IDk3O1xyXG4gICAgICAgICAgICBhY2N1bS5wdXNoKHdvcmQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYWNjdW07XHJcbiAgICB9LCBbXSk7XHJcbn1cclxuLyoqXHJcbiAqICBAX2lnbm9yZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZShkYXRhLCBzdWJzKSB7XHJcbiAgICAvLyBSZXBsYWNlIGFsbCB0aGUgc3Vic3RpdHV0aW9ucyB3aXRoIHRoZWlyIGV4cGFuZGVkIGZvcm1cclxuICAgIGZvciAobGV0IGkgPSBzdWJzQ2hycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgIGRhdGEgPSBkYXRhLnNwbGl0KHN1YnNDaHJzW2ldKS5qb2luKHN1YnMuc3Vic3RyaW5nKDIgKiBpLCAyICogaSArIDIpKTtcclxuICAgIH1cclxuICAgIC8vIEdldCBhbGwgdGxlIGNsdW1wczsgZWFjaCBzdWZmaXgsIGZpcnN0LWluY3JlbWVudCBhbmQgc2Vjb25kLWluY3JlbWVudFxyXG4gICAgY29uc3QgY2x1bXBzID0gW107XHJcbiAgICBjb25zdCBsZWZ0b3ZlciA9IGRhdGEucmVwbGFjZSgvKDp8KFswLTldKXwoW0EtWl1bYS16XSopKS9nLCAoYWxsLCBpdGVtLCBzZW1pLCB3b3JkKSA9PiB7XHJcbiAgICAgICAgaWYgKHNlbWkpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IHBhcnNlSW50KHNlbWkpOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgICAgICAgICAgY2x1bXBzLnB1c2goXCI7XCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjbHVtcHMucHVzaChpdGVtLnRvTG93ZXJDYXNlKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gXCJcIjtcclxuICAgIH0pO1xyXG4gICAgLyogYzggaWdub3JlIHN0YXJ0ICovXHJcbiAgICBpZiAobGVmdG92ZXIpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGxlZnRvdmVyczogJHtKU09OLnN0cmluZ2lmeShsZWZ0b3Zlcil9YCk7XHJcbiAgICB9XHJcbiAgICAvKiBjOCBpZ25vcmUgc3RvcCAqL1xyXG4gICAgcmV0dXJuIHVuZm9sZCh1bmZvbGQoY2x1bXBzLCBcIjtcIiksIFwiOlwiKTtcclxufVxyXG4vKipcclxuICogIEBfaWdub3JlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlT3dsKGRhdGEpIHtcclxuICAgIGFzc2VydEFyZ3VtZW50KGRhdGFbMF0gPT09IFwiMFwiLCBcInVuc3VwcG9ydGVkIGF1d2wgZGF0YVwiLCBcImRhdGFcIiwgZGF0YSk7XHJcbiAgICByZXR1cm4gZGVjb2RlKGRhdGEuc3Vic3RyaW5nKDEgKyAyICogc3Vic0NocnMubGVuZ3RoKSwgZGF0YS5zdWJzdHJpbmcoMSwgMSArIDIgKiBzdWJzQ2hycy5sZW5ndGgpKTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWNvZGUtb3dsLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/wordlists/decode-owl.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/wordlists/decode-owla.js":
/*!**************************************************************!*\
  !*** ./node_modules/ethers/lib.esm/wordlists/decode-owla.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeOwlA: () => (/* binding */ decodeOwlA)\n/* harmony export */ });\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/* harmony import */ var _bit_reader_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bit-reader.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/wordlists/bit-reader.js\");\n/* harmony import */ var _decode_owl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./decode-owl.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/wordlists/decode-owl.js\");\n\r\n\r\n\r\n/**\r\n *  @_ignore\r\n */\r\nfunction decodeOwlA(data, accents) {\r\n    let words = (0,_decode_owl_js__WEBPACK_IMPORTED_MODULE_0__.decodeOwl)(data).join(\",\");\r\n    // Inject the accents\r\n    accents.split(/,/g).forEach((accent) => {\r\n        const match = accent.match(/^([a-z]*)([0-9]+)([0-9])(.*)$/);\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.assertArgument)(match !== null, \"internal error parsing accents\", \"accents\", accents);\r\n        let posOffset = 0;\r\n        const positions = (0,_bit_reader_js__WEBPACK_IMPORTED_MODULE_2__.decodeBits)(parseInt(match[3]), match[4]);\r\n        const charCode = parseInt(match[2]);\r\n        const regex = new RegExp(`([${match[1]}])`, \"g\");\r\n        words = words.replace(regex, (all, letter) => {\r\n            const rem = --positions[posOffset];\r\n            if (rem === 0) {\r\n                letter = String.fromCharCode(letter.charCodeAt(0), charCode);\r\n                posOffset++;\r\n            }\r\n            return letter;\r\n        });\r\n    });\r\n    return words.split(\",\");\r\n}\r\n//# sourceMappingURL=decode-owla.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS93b3JkbGlzdHMvZGVjb2RlLW93bGEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFtRDtBQUNOO0FBQ0Q7QUFDNUM7QUFDQTtBQUNBO0FBQ087QUFDUCxnQkFBZ0IseURBQVM7QUFDekI7QUFDQTtBQUNBO0FBQ0EsUUFBUSwrREFBYztBQUN0QjtBQUNBLDBCQUEwQiwwREFBVTtBQUNwQztBQUNBLHNDQUFzQyxTQUFTO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkQ6XFxEb19hbjJcXGxlbmRodWJfdjJcXGxlbmRodWItZnJvbnRlbmQtbmV4dGpzXFxub2RlX21vZHVsZXNcXGV0aGVyc1xcbGliLmVzbVxcd29yZGxpc3RzXFxkZWNvZGUtb3dsYS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhc3NlcnRBcmd1bWVudCB9IGZyb20gXCIuLi91dGlscy9pbmRleC5qc1wiO1xyXG5pbXBvcnQgeyBkZWNvZGVCaXRzIH0gZnJvbSBcIi4vYml0LXJlYWRlci5qc1wiO1xyXG5pbXBvcnQgeyBkZWNvZGVPd2wgfSBmcm9tIFwiLi9kZWNvZGUtb3dsLmpzXCI7XHJcbi8qKlxyXG4gKiAgQF9pZ25vcmVcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVPd2xBKGRhdGEsIGFjY2VudHMpIHtcclxuICAgIGxldCB3b3JkcyA9IGRlY29kZU93bChkYXRhKS5qb2luKFwiLFwiKTtcclxuICAgIC8vIEluamVjdCB0aGUgYWNjZW50c1xyXG4gICAgYWNjZW50cy5zcGxpdCgvLC9nKS5mb3JFYWNoKChhY2NlbnQpID0+IHtcclxuICAgICAgICBjb25zdCBtYXRjaCA9IGFjY2VudC5tYXRjaCgvXihbYS16XSopKFswLTldKykoWzAtOV0pKC4qKSQvKTtcclxuICAgICAgICBhc3NlcnRBcmd1bWVudChtYXRjaCAhPT0gbnVsbCwgXCJpbnRlcm5hbCBlcnJvciBwYXJzaW5nIGFjY2VudHNcIiwgXCJhY2NlbnRzXCIsIGFjY2VudHMpO1xyXG4gICAgICAgIGxldCBwb3NPZmZzZXQgPSAwO1xyXG4gICAgICAgIGNvbnN0IHBvc2l0aW9ucyA9IGRlY29kZUJpdHMocGFyc2VJbnQobWF0Y2hbM10pLCBtYXRjaFs0XSk7XHJcbiAgICAgICAgY29uc3QgY2hhckNvZGUgPSBwYXJzZUludChtYXRjaFsyXSk7XHJcbiAgICAgICAgY29uc3QgcmVnZXggPSBuZXcgUmVnRXhwKGAoWyR7bWF0Y2hbMV19XSlgLCBcImdcIik7XHJcbiAgICAgICAgd29yZHMgPSB3b3Jkcy5yZXBsYWNlKHJlZ2V4LCAoYWxsLCBsZXR0ZXIpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcmVtID0gLS1wb3NpdGlvbnNbcG9zT2Zmc2V0XTtcclxuICAgICAgICAgICAgaWYgKHJlbSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgbGV0dGVyID0gU3RyaW5nLmZyb21DaGFyQ29kZShsZXR0ZXIuY2hhckNvZGVBdCgwKSwgY2hhckNvZGUpO1xyXG4gICAgICAgICAgICAgICAgcG9zT2Zmc2V0Kys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGxldHRlcjtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHdvcmRzLnNwbGl0KFwiLFwiKTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWNvZGUtb3dsYS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/wordlists/decode-owla.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/wordlists/index.js":
/*!********************************************************!*\
  !*** ./node_modules/ethers/lib.esm/wordlists/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LangEn: () => (/* reexport safe */ _lang_en_js__WEBPACK_IMPORTED_MODULE_1__.LangEn),\n/* harmony export */   Wordlist: () => (/* reexport safe */ _wordlist_js__WEBPACK_IMPORTED_MODULE_0__.Wordlist),\n/* harmony export */   WordlistOwl: () => (/* reexport safe */ _wordlist_owl_js__WEBPACK_IMPORTED_MODULE_2__.WordlistOwl),\n/* harmony export */   WordlistOwlA: () => (/* reexport safe */ _wordlist_owla_js__WEBPACK_IMPORTED_MODULE_3__.WordlistOwlA),\n/* harmony export */   wordlists: () => (/* reexport safe */ _wordlists_js__WEBPACK_IMPORTED_MODULE_4__.wordlists)\n/* harmony export */ });\n/* harmony import */ var _wordlist_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wordlist.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/wordlists/wordlist.js\");\n/* harmony import */ var _lang_en_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lang-en.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/wordlists/lang-en.js\");\n/* harmony import */ var _wordlist_owl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./wordlist-owl.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/wordlists/wordlist-owl.js\");\n/* harmony import */ var _wordlist_owla_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./wordlist-owla.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/wordlists/wordlist-owla.js\");\n/* harmony import */ var _wordlists_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./wordlists.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/wordlists/wordlists-browser.js\");\n/**\r\n *  A Wordlist is a set of 2048 words used to encode private keys\r\n *  (or other binary data) that is easier for humans to write down,\r\n *  transcribe and dictate.\r\n *\r\n *  The [[link-bip-39]] standard includes several checksum bits,\r\n *  depending on the size of the mnemonic phrase.\r\n *\r\n *  A mnemonic phrase may be 12, 15, 18, 21 or 24 words long. For\r\n *  most purposes 12 word mnemonics should be used, as including\r\n *  additional words increases the difficulty and potential for\r\n *  mistakes and does not offer any effective improvement on security.\r\n *\r\n *  There are a variety of [[link-bip39-wordlists]] for different\r\n *  languages, but for maximal compatibility, the\r\n *  [English Wordlist](LangEn) is recommended.\r\n *\r\n *  @_section: api/wordlists:Wordlists [about-wordlists]\r\n */\r\n\r\n\r\n\r\n\r\n\r\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS93b3JkbGlzdHMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3lDO0FBQ0g7QUFDVTtBQUNFO0FBQ1A7QUFDM0MiLCJzb3VyY2VzIjpbIkQ6XFxEb19hbjJcXGxlbmRodWJfdjJcXGxlbmRodWItZnJvbnRlbmQtbmV4dGpzXFxub2RlX21vZHVsZXNcXGV0aGVyc1xcbGliLmVzbVxcd29yZGxpc3RzXFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogIEEgV29yZGxpc3QgaXMgYSBzZXQgb2YgMjA0OCB3b3JkcyB1c2VkIHRvIGVuY29kZSBwcml2YXRlIGtleXNcclxuICogIChvciBvdGhlciBiaW5hcnkgZGF0YSkgdGhhdCBpcyBlYXNpZXIgZm9yIGh1bWFucyB0byB3cml0ZSBkb3duLFxyXG4gKiAgdHJhbnNjcmliZSBhbmQgZGljdGF0ZS5cclxuICpcclxuICogIFRoZSBbW2xpbmstYmlwLTM5XV0gc3RhbmRhcmQgaW5jbHVkZXMgc2V2ZXJhbCBjaGVja3N1bSBiaXRzLFxyXG4gKiAgZGVwZW5kaW5nIG9uIHRoZSBzaXplIG9mIHRoZSBtbmVtb25pYyBwaHJhc2UuXHJcbiAqXHJcbiAqICBBIG1uZW1vbmljIHBocmFzZSBtYXkgYmUgMTIsIDE1LCAxOCwgMjEgb3IgMjQgd29yZHMgbG9uZy4gRm9yXHJcbiAqICBtb3N0IHB1cnBvc2VzIDEyIHdvcmQgbW5lbW9uaWNzIHNob3VsZCBiZSB1c2VkLCBhcyBpbmNsdWRpbmdcclxuICogIGFkZGl0aW9uYWwgd29yZHMgaW5jcmVhc2VzIHRoZSBkaWZmaWN1bHR5IGFuZCBwb3RlbnRpYWwgZm9yXHJcbiAqICBtaXN0YWtlcyBhbmQgZG9lcyBub3Qgb2ZmZXIgYW55IGVmZmVjdGl2ZSBpbXByb3ZlbWVudCBvbiBzZWN1cml0eS5cclxuICpcclxuICogIFRoZXJlIGFyZSBhIHZhcmlldHkgb2YgW1tsaW5rLWJpcDM5LXdvcmRsaXN0c11dIGZvciBkaWZmZXJlbnRcclxuICogIGxhbmd1YWdlcywgYnV0IGZvciBtYXhpbWFsIGNvbXBhdGliaWxpdHksIHRoZVxyXG4gKiAgW0VuZ2xpc2ggV29yZGxpc3RdKExhbmdFbikgaXMgcmVjb21tZW5kZWQuXHJcbiAqXHJcbiAqICBAX3NlY3Rpb246IGFwaS93b3JkbGlzdHM6V29yZGxpc3RzIFthYm91dC13b3JkbGlzdHNdXHJcbiAqL1xyXG5leHBvcnQgeyBXb3JkbGlzdCB9IGZyb20gXCIuL3dvcmRsaXN0LmpzXCI7XHJcbmV4cG9ydCB7IExhbmdFbiB9IGZyb20gXCIuL2xhbmctZW4uanNcIjtcclxuZXhwb3J0IHsgV29yZGxpc3RPd2wgfSBmcm9tIFwiLi93b3JkbGlzdC1vd2wuanNcIjtcclxuZXhwb3J0IHsgV29yZGxpc3RPd2xBIH0gZnJvbSBcIi4vd29yZGxpc3Qtb3dsYS5qc1wiO1xyXG5leHBvcnQgeyB3b3JkbGlzdHMgfSBmcm9tIFwiLi93b3JkbGlzdHMuanNcIjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/wordlists/index.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/wordlists/lang-en.js":
/*!**********************************************************!*\
  !*** ./node_modules/ethers/lib.esm/wordlists/lang-en.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LangEn: () => (/* binding */ LangEn)\n/* harmony export */ });\n/* harmony import */ var _wordlist_owl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wordlist-owl.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/wordlists/wordlist-owl.js\");\n\r\nconst words = \"0erleonalorenseinceregesticitStanvetearctssi#ch2Athck&tneLl0And#Il.yLeOutO=S|S%b/ra@SurdU'0Ce[Cid|CountCu'Hie=IdOu,-Qui*Ro[TT]T%T*[Tu$0AptDD-tD*[Ju,M.UltV<)Vi)0Rob-0FairF%dRaid0A(EEntRee0Ead0MRRp%tS!_rmBumCoholErtI&LLeyLowMo,O}PhaReadySoT Ways0A>urAz(gOngOuntU'd0Aly,Ch%Ci|G G!GryIm$K!Noun)Nu$O` Sw T&naTiqueXietyY1ArtOlogyPe?P!Pro=Ril1ChCt-EaEnaGueMMedM%MyOundR<+Re,Ri=RowTTefa@Ti,Tw%k0KPe@SaultSetSi,SumeThma0H!>OmTa{T&dT.udeTra@0Ct]D.Gu,NtTh%ToTumn0Era+OcadoOid0AkeA*AyEsomeFulKw?d0Is:ByChel%C#D+GL<)Lc#y~MbooN<aNn RRelyRga(R*lSeS-SketTt!3A^AnAutyCau'ComeEfF%eG(Ha=H(dLie=LowLtN^Nef./TrayTt Twe&Y#d3Cyc!DKeNdOlogyRdR`Tt _{AdeAmeAnketA,EakE[IndOodO[omOu'UeUrUsh_rdAtDyIlMbNeNusOkO,Rd R(gRrowSsTtomUn)XY_{etA(AndA[A=EadEezeI{Id+IefIghtIngIskOccoliOk&OnzeOomO` OwnUsh2Bb!DdyD+tFf$oIldLbLkL!tNd!Nk Rd&Rg R,SS(e[SyTt Y Zz:Bba+B(B!CtusGeKe~LmM aMpNN$N)lNdyNn#NoeNvasNy#Pab!P.$Pta(RRb#RdRgoRpetRryRtSeShS(o/!Su$TT$ogT^Teg%yTt!UghtU'Ut]Ve3Il(gL yM|NsusNturyRe$Rta(_irAlkAmp]An+AosApt Ar+A'AtEapE{Ee'EfErryE,I{&IefIldIm}yOi)Oo'R#-U{!UnkUrn0G?Nnam#Rc!Tiz&TyVil_imApArifyAwAyE<ErkEv I{I|IffImbIn-IpO{OgO'O`OudOwnUbUmpU, Ut^_^A,C#utDeFfeeIlInL!@L%LumnMb(eMeMf%tM-Mm#Mp<yNc tNdu@NfirmNg*[N}@Nsid NtrolNv()OkOlPp PyR$ReRnR*@/Tt#U^UntryUp!Ur'Us(V Yo>_{Ad!AftAmA}AshAt AwlAzyEamEd.EekEwI{etImeIspIt-OpO[Ou^OwdUci$UelUi'Umb!Un^UshYY,$2BeLtu*PPbo?dRiousRr|Rta(R=Sh]/omTe3C!:DMa+MpN)Ng R(gShUght WnY3AlBa>BrisCadeCemb CideCl(eC%a>C*a'ErF&'F(eFyG*eLayLiv M<dMi'Ni$Nti,NyP?tP&dPos.P`PutyRi=ScribeS tSignSkSpair/royTailTe@VelopVi)Vo>3AgramAlAm#dAryCeE'lEtFf G.$Gn.yLemmaNn NosaurRe@RtSag*eScov Sea'ShSmi[S%d Splay/<)V tVideV%)Zzy5Ct%Cum|G~Lph(Ma(Na>NkeyN%OrSeUb!Ve_ftAg#AmaA,-AwEamE[IftIllInkIpI=OpUmY2CkMbNeR(g/T^Ty1Arf1Nam-:G G!RlyRnR`Sily/Sy1HoOlogyOnomy0GeItUca>1F%t0G1GhtTh 2BowD E@r-Eg<tEm|Eph<tEvat%I>Se0B?kBodyBra)Er+Ot]PloyPow Pty0Ab!A@DD![D%'EmyErgyF%)Ga+G(eH<)JoyLi,OughR-hRollSu*T Ti*TryVelope1Isode0U$Uip0AA'OdeOs]R%Upt0CapeSayS&)Ta>0Ern$H-s1Id&)IlOkeOl=1A@Amp!Ce[Ch<+C.eCludeCu'Ecu>Erci'Hau,Hib.I!I,ItOt-P<dPe@Pi*Pla(Po'P*[T&dTra0EEbrow:Br-CeCultyDeIntI`~L'MeMilyMousNNcyNtasyRmSh]TT$Th TigueUltV%.e3Atu*Bru?yD $EEdElMa!N)/iv$T^V W3B Ct]EldGu*LeLmLt N$NdNeNg NishReRmR,Sc$ShTT}[X_gAmeAshAtAv%EeIghtIpOatO{O%Ow UidUshY_mCusGIlLd~owOdOtR)Re,R+tRkRtu}RumRw?dSsil/ UndX_gi!AmeEqu|EshI&dIn+OgOntO,OwnOz&U.2ElNNnyRna)RyTu*:D+tInLaxy~ yMePRa+Rba+Rd&Rl-Rm|SSpTeTh U+Ze3N $NiusN*Nt!Nu(e/u*2O,0AntFtGg!Ng RaffeRlVe_dAn)A*A[IdeImp'ObeOomOryO=OwUe_tDde[LdOdO'RillaSpelSsipV nWn_bA)A(AntApeA[Av.yEatE&IdIefItOc yOupOwUnt_rdE[IdeIltIt?N3M:B.IrLfMm M, NdPpyRb%RdRshR=,TVeWkZ?d3AdAl`ArtAvyD+hogIght~oLmetLpNRo3Dd&Gh~NtPRe/%y5BbyCkeyLdLeLiday~owMeNeyOdPeRnRr%R'Sp.$/TelUrV 5BGeM<Mb!M%Nd*dNgryNtRd!RryRtSb<d3Brid:1EOn0EaEntifyLe2N%e4LLeg$L}[0A+Ita>M&'Mu}Pa@Po'Pro=Pul'0ChCludeComeC*a'DexD-a>Do%Du,ryF<tFl-tF%mHa!H .Iti$Je@JuryMa>N Noc|PutQuiryS<eSe@SideSpi*/$lTa@T e,ToVe,V.eVol=3On0L<dOla>Sue0Em1Ory:CketGu?RZz3AlousAns~yWel9BInKeUr}yY5D+I)MpNg!Ni%Nk/:Ng?oo3EnEpT^upY3CkDD}yNdNgdomSsTT^&TeTt&Wi4EeIfeO{Ow:BBelB%Dd DyKeMpNgua+PtopR+T T(UghUndryVaWWnWsu.Y Zy3Ad AfArnA=Ctu*FtGG$G&dIsu*M#NdNg`NsOp?dSs#Tt Vel3ArB tyBr?yC&'FeFtGhtKeMbM.NkOnQuid/Tt!VeZ?d5AdAnB, C$CkG-NelyNgOpTt yUdUn+VeY$5CkyGga+Mb N?N^Xury3R-s:Ch(eDG-G}tIdIlInJ%KeMm$NNa+Nda>NgoNs]Nu$P!Rb!R^Rg(R(eRketRria+SkSs/ T^T i$ThTrixTt XimumZe3AdowAnAsu*AtCh<-D$DiaLodyLtMb M%yNt]NuRcyR+R.RryShSsa+T$Thod3Dd!DnightLk~]M-NdNimumN%Nu>Rac!Rr%S ySs/akeXXedXtu*5Bi!DelDifyMM|N.%NkeyN, N`OnR$ReRn(gSqu.oTh T]T%Unta(U'VeVie5ChFf(LeLtiplySc!SeumShroomS-/Tu$3Self/ yTh:I=MePk(Rrow/yT]Tu*3ArCkEdGati=G!@I` PhewR=/TTw%kUtr$V WsXt3CeGht5B!I'M(eeOd!Rm$R`SeTab!TeTh(gTi)VelW5C!?Mb R'T:K0EyJe@Li+Scu*S =Ta(Vious0CurE<Tob 0Or1FF Fi)T&2L1Ay0DI=Ymp-0It0CeEI#L(eLy1EnEraIn]Po'T]1An+B.Ch?dD D(?yG<I|Ig($Ph<0Tr-h0H 0Tdo%T TputTside0AlEnEr0NN 0Yg&0/ 0O}:CtDd!GeIrLa)LmNdaNelN-N` P RadeR|RkRrotRtySsT^ThTi|TrolTt nU'VeYm|3A)AnutArAs<tL-<NN$tyNcilOp!Pp Rfe@Rm.Rs#T2O}OtoRa'Ys-$0AnoCn-Ctu*E)GGe#~LotNkO} Pe/olT^Zza_)A}tA,-A>AyEa'Ed+U{UgUn+2EmEtIntL?LeLi)NdNyOlPul?Rt]S.]Ssib!/TatoTt yV tyWd W _@i)Ai'Ed-tEf Epa*Es|EttyEv|I)IdeIm?yIntI%.yIs#Iva>IzeOb!mO)[Odu)Of.OgramOje@Omo>OofOp tyOsp O>@OudOvide2Bl-Dd(g~LpL'Mpk(N^PilPpyR^a'R.yRpo'R'ShTZz!3Ramid:99Al.yAntumArt E,]I{ItIzO>:Bb.Cco#CeCkD?DioIlInI'~yMpN^NdomN+PidReTeTh V&WZ%3AdyAlAs#BelBuildC$lCei=CipeC%dCyc!Du)F!@F%mFu'G]G*tGul?Je@LaxLea'LiefLyMa(Memb M(dMo=Nd NewNtOp&PairPeatPla)P%tQui*ScueSemb!Si,Sour)Sp#'SultTi*T*atTurnUn]Ve$ViewW?d2Y`m0BBb#CeChDeD+F!GhtGidNgOtPp!SkTu$V$V 5AdA,BotBu,CketM<)OfOkieOmSeTa>UghUndU>Y$5Bb DeGLeNNwayR$:DDd!D}[FeIlLadLm#L#LtLu>MeMp!NdTisfyToshiU)Usa+VeY1A!AnA*Att E}HemeHoolI&)I[%sOrp]OutRapRe&RiptRub1AAr^As#AtC#dC*tCt]Cur.yEdEkGm|Le@~M(?Ni%N'Nt&)RiesRvi)Ss]Tt!TupV&_dowAftAllowA*EdEllEriffIeldIftI}IpIv O{OeOotOpOrtOuld O=RimpRugUff!Y0Bl(gCkDeE+GhtGnL|Lk~yLv Mil?Mp!N)NgR&/ Tua>XZe1A>Et^IIllInIrtUll0AbAmEepEnd I)IdeIghtImOg<OtOwUsh0AllArtI!OkeOo`0A{AkeApIffOw0ApCc Ci$CkDaFtL?Ldi LidLut]L=Me#eNgOnRryRtUlUndUpUr)U`0A)A*Ati$AwnEakEci$EedEllEndH eI)Id IkeInIr.L.OilOns%O#OrtOtRayReadR(gY0Ua*UeezeUir*l_b!AdiumAffA+AirsAmpAndArtA>AyEakEelEmEpE*oI{IllIngO{Oma^O}OolOryO=Ra>gyReetRikeR#gRugg!Ud|UffUmb!Y!0Bje@Bm.BwayC)[ChDd&Ff G?G+,ItMm NNnyN'tP PplyP*meReRfa)R+Rpri'RroundR=ySpe@/a(1AllowAmpApArmE?EetIftImIngIt^Ord1MbolMptomRup/em:B!Ck!GIlL|LkNkPeR+tSk/eTtooXi3A^Am~NN<tNnisNtRm/Xt_nkAtEmeEnE%yE*EyIngIsOughtReeRi=RowUmbUnd 0CketDeG LtMb MeNyPRedSsueT!5A,BaccoDayDdl EGe` I!tK&MatoM%rowNeNgueNightOlO`PP-Pp!R^RnadoRtoi'SsT$Uri,W?dW WnY_{AdeAff-Ag-A(Ansf ApAshA=lAyEatEeEndI$IbeI{Igg ImIpOphyOub!U{UeUlyUmpetU,U`Y2BeIt]Mb!NaN}lRkeyRnRt!1El=EntyI)InI,O1PeP-$:5Ly5B*lla0Ab!Awa*C!Cov D DoFairFoldHappyIf%mIqueItIv 'KnownLo{TilUsu$Veil1Da>GradeHoldOnP Set1B<Ge0A+EEdEfulE![U$0Il.y:C<tCuumGueLidL!yL=NNishP%Rious/Ult3H-!L=tNd%Ntu*NueRbRifyRs]RyS'lT <3Ab!Br<tCiousCt%yDeoEw~a+Nta+Ol(Rtu$RusSaS.Su$T$Vid5C$I)IdLc<oLumeTeYa+:GeG#ItLk~LnutNtRfa*RmRri%ShSp/eT VeY3Al`Ap#ArA'lA` BDd(gEk&dIrdLcome/T_!AtEatEelEnE*IpIsp 0DeD`FeLd~NNdowNeNgNkNn Nt ReSdomSeShT}[5LfM<Nd OdOlRdRkRldRryR`_pE{E,!I,I>Ong::Rd3Ar~ow9UUngU`:3BraRo9NeO\";\r\nconst checksum = \"0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60\";\r\nlet wordlist = null;\r\n/**\r\n *  The [[link-bip39-en]] for [mnemonic phrases](link-bip-39).\r\n *\r\n *  @_docloc: api/wordlists\r\n */\r\nclass LangEn extends _wordlist_owl_js__WEBPACK_IMPORTED_MODULE_0__.WordlistOwl {\r\n    /**\r\n     *  Creates a new instance of the English language Wordlist.\r\n     *\r\n     *  This should be unnecessary most of the time as the exported\r\n     *  [[langEn]] should suffice.\r\n     *\r\n     *  @_ignore:\r\n     */\r\n    constructor() { super(\"en\", words, checksum); }\r\n    /**\r\n     *  Returns a singleton instance of a ``LangEn``, creating it\r\n     *  if this is the first time being called.\r\n     */\r\n    static wordlist() {\r\n        if (wordlist == null) {\r\n            wordlist = new LangEn();\r\n        }\r\n        return wordlist;\r\n    }\r\n}\r\n//# sourceMappingURL=lang-en.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS93b3JkbGlzdHMvbGFuZy1lbi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFnRDtBQUNoRCxrUEFBa1AsZ01BQWdNLDhNQUE4TSxpRkFBaUYsb0JBQW9CLHlRQUF5USxhQUFhLFVBQVUsWUFBWSxtREFBbUQsZUFBZSx3RkFBd0YsNERBQTRELFVBQVUseUJBQXlCLGk0QkFBaTRCLDRCQUE0QiwyQ0FBMkMsMGRBQTBkLGNBQWMsb0xBQW9MLHdDQUF3Qyw2QkFBNkIsdU5BQXVOLHlqQkFBeWpCLGdIQUFnSCxvQ0FBb0MsY0FBYyxnQkFBZ0IsME9BQTBPLHNVQUFzVSx5REFBeUQsc0lBQXNJLE9BQU8saUpBQWlKLG1NQUFtTSxRQUFRLE1BQU0sd1hBQXdYLDBDQUEwQyxrQkFBa0IsNEJBQTRCLDhGQUE4RixzVUFBc1UsNkJBQTZCO0FBQzkxTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLHFCQUFxQix5REFBVztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiRDpcXERvX2FuMlxcbGVuZGh1Yl92MlxcbGVuZGh1Yi1mcm9udGVuZC1uZXh0anNcXG5vZGVfbW9kdWxlc1xcZXRoZXJzXFxsaWIuZXNtXFx3b3JkbGlzdHNcXGxhbmctZW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgV29yZGxpc3RPd2wgfSBmcm9tIFwiLi93b3JkbGlzdC1vd2wuanNcIjtcclxuY29uc3Qgd29yZHMgPSBcIjBlcmxlb25hbG9yZW5zZWluY2VyZWdlc3RpY2l0U3RhbnZldGVhcmN0c3NpI2NoMkF0aGNrJnRuZUxsMEFuZCNJbC55TGVPdXRPPVN8UyViL3JhQFN1cmRVJzBDZVtDaWR8Q291bnRDdSdIaWU9SWRPdSwtUXVpKlJvW1RUXVQlVCpbVHUkMEFwdERELXREKltKdSxNLlVsdFY8KVZpKTBSb2ItMEZhaXJGJWRSYWlkMEEoRUVudFJlZTBFYWQwTVJScCV0UyFfcm1CdW1Db2hvbEVydEkmTExleUxvd01vLE99UGhhUmVhZHlTb1QgV2F5czBBPnVyQXooZ09uZ091bnRVJ2QwQWx5LENoJUNpfEcgRyFHcnlJbSRLIU5vdW4pTnUkT2AgU3cgVCZuYVRpcXVlWGlldHlZMUFydE9sb2d5UGU/UCFQcm89UmlsMUNoQ3QtRWFFbmFHdWVNTWVkTSVNeU91bmRSPCtSZSxSaT1Sb3dUVGVmYUBUaSxUdyVrMEtQZUBTYXVsdFNldFNpLFN1bWVUaG1hMEghPk9tVGF7VCZkVC51ZGVUcmFAMEN0XUQuR3UsTnRUaCVUb1R1bW4wRXJhK09jYWRvT2lkMEFrZUEqQXlFc29tZUZ1bEt3P2QwSXM6QnlDaGVsJUMjRCtHTDwpTGMjeX5NYm9vTjxhTm4gUlJlbHlSZ2EoUipsU2VTLVNrZXRUdCEzQV5BbkF1dHlDYXUnQ29tZUVmRiVlRyhIYT1IKGRMaWU9TG93THROXk5lZi4vVHJheVR0IFR3ZSZZI2QzQ3ljIURLZU5kT2xvZ3lSZFJgVHQgX3tBZGVBbWVBbmtldEEsRWFrRVtJbmRPb2RPW29tT3UnVWVVclVzaF9yZEF0RHlJbE1iTmVOdXNPa08sUmQgUihnUnJvd1NzVHRvbVVuKVhZX3tldEEoQW5kQVtBPUVhZEVlemVJe0lkK0llZklnaHRJbmdJc2tPY2NvbGlPayZPbnplT29tT2AgT3duVXNoMkJiIURkeUQrdEZmJG9JbGRMYkxrTCF0TmQhTmsgUmQmUmcgUixTUyhlW1N5VHQgWSBaejpCYmErQihCIUN0dXNHZUtlfkxtTSBhTXBOTiROKWxOZHlObiNOb2VOdmFzTnkjUGFiIVAuJFB0YShSUmIjUmRSZ29ScGV0UnJ5UnRTZVNoUyhvLyFTdSRUVCRvZ1ReVGVnJXlUdCFVZ2h0VSdVdF1WZTNJbChnTCB5TXxOc3VzTnR1cnlSZSRSdGEoX2lyQWxrQW1wXUFuK0Fvc0FwdCBBcitBJ0F0RWFwRXtFZSdFZkVycnlFLEl7JkllZklsZEltfXlPaSlPbydSIy1VeyFVbmtVcm4wRz9ObmFtI1JjIVRpeiZUeVZpbF9pbUFwQXJpZnlBd0F5RTxFcmtFdiBJe0l8SWZmSW1iSW4tSXBPe09nTydPYE91ZE93blViVW1wVSwgVXReX15BLEMjdXREZUZmZWVJbEluTCFATCVMdW1uTWIoZU1lTWYldE0tTW0jTXA8eU5jIHROZHVATmZpcm1OZypbTn1ATnNpZCBOdHJvbE52KClPa09sUHAgUHlSJFJlUm5SKkAvVHQjVV5VbnRyeVVwIVVyJ1VzKFYgWW8+X3tBZCFBZnRBbUF9QXNoQXQgQXdsQXp5RWFtRWQuRWVrRXdJe2V0SW1lSXNwSXQtT3BPW091Xk93ZFVjaSRVZWxVaSdVbWIhVW5eVXNoWVksJDJCZUx0dSpQUGJvP2RSaW91c1JyfFJ0YShSPVNoXS9vbVRlM0MhOkRNYStNcE4pTmcgUihnU2hVZ2h0IFduWTNBbEJhPkJyaXNDYWRlQ2VtYiBDaWRlQ2woZUMlYT5DKmEnRXJGJidGKGVGeUcqZUxheUxpdiBNPGRNaSdOaSROdGksTnlQP3RQJmRQb3MuUGBQdXR5Umk9U2NyaWJlUyB0U2lnblNrU3BhaXIvcm95VGFpbFRlQFZlbG9wVmkpVm8+M0FncmFtQWxBbSNkQXJ5Q2VFJ2xFdEZmIEcuJEduLnlMZW1tYU5uIE5vc2F1clJlQFJ0U2FnKmVTY292IFNlYSdTaFNtaVtTJWQgU3BsYXkvPClWIHRWaWRlViUpWnp5NUN0JUN1bXxHfkxwaChNYShOYT5Oa2V5TiVPclNlVWIhVmVfZnRBZyNBbWFBLC1Bd0VhbUVbSWZ0SWxsSW5rSXBJPU9wVW1ZMkNrTWJOZVIoZy9UXlR5MUFyZjFOYW0tOkcgRyFSbHlSblJgU2lseS9TeTFIb09sb2d5T25vbXkwR2VJdFVjYT4xRiV0MEcxR2h0VGggMkJvd0QgRUByLUVnPHRFbXxFcGg8dEV2YXQlST5TZTBCP2tCb2R5QnJhKUVyK090XVBsb3lQb3cgUHR5MEFiIUFAREQhW0QlJ0VteUVyZ3lGJSlHYStHKGVIPClKb3lMaSxPdWdoUi1oUm9sbFN1KlQgVGkqVHJ5VmVsb3BlMUlzb2RlMFUkVWlwMEFBJ09kZU9zXVIlVXB0MENhcGVTYXlTJilUYT4wRXJuJEgtczFJZCYpSWxPa2VPbD0xQUBBbXAhQ2VbQ2g8K0MuZUNsdWRlQ3UnRWN1PkVyY2knSGF1LEhpYi5JIUksSXRPdC1QPGRQZUBQaSpQbGEoUG8nUCpbVCZkVHJhMEVFYnJvdzpCci1DZUN1bHR5RGVJbnRJYH5MJ01lTWlseU1vdXNOTmN5TnRhc3lSbVNoXVRUJFRoIFRpZ3VlVWx0ViUuZTNBdHUqQnJ1P3lEICRFRWRFbE1hIU4pL2l2JFReViBXM0IgQ3RdRWxkR3UqTGVMbUx0IE4kTmROZU5nIE5pc2hSZVJtUixTYyRTaFRUfVtYX2dBbWVBc2hBdEF2JUVlSWdodElwT2F0T3tPJU93IFVpZFVzaFlfbUN1c0dJbExkfm93T2RPdFIpUmUsUit0UmtSdHV9UnVtUnc/ZFNzaWwvIFVuZFhfZ2khQW1lRXF1fEVzaEkmZEluK09nT250TyxPd25PeiZVLjJFbE5ObnlSbmEpUnlUdSo6RCt0SW5MYXh5fiB5TWVQUmErUmJhK1JkJlJsLVJtfFNTcFRlVGggVStaZTNOICROaXVzTipOdCFOdShlL3UqMk8sMEFudEZ0R2chTmcgUmFmZmVSbFZlX2RBbilBKkFbSWRlSW1wJ09iZU9vbU9yeU89T3dVZV90RGRlW0xkT2RPJ1JpbGxhU3BlbFNzaXBWIG5Xbl9iQSlBKEFudEFwZUFbQXYueUVhdEUmSWRJZWZJdE9jIHlPdXBPd1VudF9yZEVbSWRlSWx0SXQ/TjNNOkIuSXJMZk1tIE0sIE5kUHB5UmIlUmRSc2hSPSxUVmVXa1o/ZDNBZEFsYEFydEF2eUQraG9nSWdodH5vTG1ldExwTlJvM0RkJkdofk50UFJlLyV5NUJieUNrZXlMZExlTGlkYXl+b3dNZU5leU9kUGVSblJyJVInU3AuJC9UZWxVclYgNUJHZU08TWIhTSVOZCpkTmdyeU50UmQhUnJ5UnRTYjxkM0JyaWQ6MUVPbjBFYUVudGlmeUxlMk4lZTRMTGVnJEx9WzBBK0l0YT5NJidNdX1QYUBQbydQcm89UHVsJzBDaENsdWRlQ29tZUMqYSdEZXhELWE+RG8lRHUscnlGPHRGbC10RiVtSGEhSCAuSXRpJEplQEp1cnlNYT5OIE5vY3xQdXRRdWlyeVM8ZVNlQFNpZGVTcGkqLyRsVGFAVCBlLFRvVmUsVi5lVm9sPTNPbjBMPGRPbGE+U3VlMEVtMU9yeTpDa2V0R3U/Ulp6M0Fsb3VzQW5zfnlXZWw5QkluS2VVcn15WTVEK0kpTXBOZyFOaSVOay86Tmc/b28zRW5FcFRedXBZM0NrRER9eU5kTmdkb21Tc1RUXiZUZVR0JldpNEVlSWZlT3tPdzpCQmVsQiVEZCBEeUtlTXBOZ3VhK1B0b3BSK1QgVChVZ2hVbmRyeVZhV1duV3N1LlkgWnkzQWQgQWZBcm5BPUN0dSpGdEdHJEcmZElzdSpNI05kTmdgTnNPcD9kU3MjVHQgVmVsM0FyQiB0eUJyP3lDJidGZUZ0R2h0S2VNYk0uTmtPblF1aWQvVHQhVmVaP2Q1QWRBbkIsIEMkQ2tHLU5lbHlOZ09wVHQgeVVkVW4rVmVZJDVDa3lHZ2ErTWIgTj9OXlh1cnkzUi1zOkNoKGVERy1HfXRJZElsSW5KJUtlTW0kTk5hK05kYT5OZ29Oc11OdSRQIVJiIVJeUmcoUihlUmtldFJyaWErU2tTcy8gVF5UIGkkVGhUcml4VHQgWGltdW1aZTNBZG93QW5Bc3UqQXRDaDwtRCREaWFMb2R5THRNYiBNJXlOdF1OdVJjeVIrUi5ScnlTaFNzYStUJFRob2QzRGQhRG5pZ2h0TGt+XU0tTmROaW11bU4lTnU+UmFjIVJyJVMgeVNzL2FrZVhYZWRYdHUqNUJpIURlbERpZnlNTXxOLiVOa2V5TiwgTmBPblIkUmVSbihnU3F1Lm9UaCBUXVQlVW50YShVJ1ZlVmllNUNoRmYoTGVMdGlwbHlTYyFTZXVtU2hyb29tUy0vVHUkM1NlbGYvIHlUaDpJPU1lUGsoUnJvdy95VF1UdSozQXJDa0VkR2F0aT1HIUBJYCBQaGV3Uj0vVFR3JWtVdHIkViBXc1h0M0NlR2h0NUIhSSdNKGVlT2QhUm0kUmBTZVRhYiFUZVRoKGdUaSlWZWxXNUMhP01iIFInVDpLMEV5SmVATGkrU2N1KlMgPVRhKFZpb3VzMEN1ckU8VG9iIDBPcjFGRiBGaSlUJjJMMUF5MERJPVltcC0wSXQwQ2VFSSNMKGVMeTFFbkVyYUluXVBvJ1RdMUFuK0IuQ2g/ZEQgRCg/eUc8SXxJZygkUGg8MFRyLWgwSCAwVGRvJVQgVHB1dFRzaWRlMEFsRW5FcjBOTiAwWWcmMC8gME99OkN0RGQhR2VJckxhKUxtTmRhTmVsTi1OYCBQIFJhZGVSfFJrUnJvdFJ0eVNzVF5UaFRpfFRyb2xUdCBuVSdWZVltfDNBKUFudXRBckFzPHRMLTxOTiR0eU5jaWxPcCFQcCBSZmVAUm0uUnMjVDJPfU90b1JhJ1lzLSQwQW5vQ24tQ3R1KkUpR0dlI35Mb3ROa099IFBlL29sVF5aemFfKUF9dEEsLUE+QXlFYSdFZCtVe1VnVW4rMkVtRXRJbnRMP0xlTGkpTmROeU9sUHVsP1J0XVMuXVNzaWIhL1RhdG9UdCB5ViB0eVdkIFcgX0BpKUFpJ0VkLXRFZiBFcGEqRXN8RXR0eUV2fEkpSWRlSW0/eUludEklLnlJcyNJdmE+SXplT2IhbU8pW09kdSlPZi5PZ3JhbU9qZUBPbW8+T29mT3AgdHlPc3AgTz5AT3VkT3ZpZGUyQmwtRGQoZ35McEwnTXBrKE5eUGlsUHB5Ul5hJ1IueVJwbydSJ1NoVFp6ITNSYW1pZDo5OUFsLnlBbnR1bUFydCBFLF1Je0l0SXpPPjpCYi5DY28jQ2VDa0Q/RGlvSWxJbkknfnlNcE5eTmRvbU4rUGlkUmVUZVRoIFYmV1olM0FkeUFsQXMjQmVsQnVpbGRDJGxDZWk9Q2lwZUMlZEN5YyFEdSlGIUBGJW1GdSdHXUcqdEd1bD9KZUBMYXhMZWEnTGllZkx5TWEoTWVtYiBNKGRNbz1OZCBOZXdOdE9wJlBhaXJQZWF0UGxhKVAldFF1aSpTY3VlU2VtYiFTaSxTb3VyKVNwIydTdWx0VGkqVCphdFR1cm5Vbl1WZSRWaWV3Vz9kMllgbTBCQmIjQ2VDaERlRCtGIUdodEdpZE5nT3RQcCFTa1R1JFYkViA1QWRBLEJvdEJ1LENrZXRNPClPZk9raWVPbVNlVGE+VWdoVW5kVT5ZJDVCYiBEZUdMZU5Od2F5UiQ6RERkIUR9W0ZlSWxMYWRMbSNMI0x0THU+TWVNcCFOZFRpc2Z5VG9zaGlVKVVzYStWZVkxQSFBbkEqQXR0IEV9SGVtZUhvb2xJJilJWyVzT3JwXU91dFJhcFJlJlJpcHRSdWIxQUFyXkFzI0F0QyNkQyp0Q3RdQ3VyLnlFZEVrR218TGVAfk0oP05pJU4nTnQmKVJpZXNSdmkpU3NdVHQhVHVwViZfZG93QWZ0QWxsb3dBKkVkRWxsRXJpZmZJZWxkSWZ0SX1JcEl2IE97T2VPb3RPcE9ydE91bGQgTz1SaW1wUnVnVWZmIVkwQmwoZ0NrRGVFK0dodEduTHxMa355THYgTWlsP01wIU4pTmdSJi8gVHVhPlhaZTFBPkV0XklJbGxJbklydFVsbDBBYkFtRWVwRW5kIEkpSWRlSWdodEltT2c8T3RPd1VzaDBBbGxBcnRJIU9rZU9vYDBBe0FrZUFwSWZmT3cwQXBDYyBDaSRDa0RhRnRMP0xkaSBMaWRMdXRdTD1NZSNlTmdPblJyeVJ0VWxVbmRVcFVyKVVgMEEpQSpBdGkkQXduRWFrRWNpJEVlZEVsbEVuZEggZUkpSWQgSWtlSW5Jci5MLk9pbE9ucyVPI09ydE90UmF5UmVhZFIoZ1kwVWEqVWVlemVVaXIqbF9iIUFkaXVtQWZmQStBaXJzQW1wQW5kQXJ0QT5BeUVha0VlbEVtRXBFKm9Je0lsbEluZ097T21hXk99T29sT3J5Tz1SYT5neVJlZXRSaWtlUiNnUnVnZyFVZHxVZmZVbWIhWSEwQmplQEJtLkJ3YXlDKVtDaERkJkZmIEc/RyssSXRNbSBOTm55Tid0UCBQcGx5UCptZVJlUmZhKVIrUnByaSdScm91bmRSPXlTcGVAL2EoMUFsbG93QW1wQXBBcm1FP0VldElmdEltSW5nSXReT3JkMU1ib2xNcHRvbVJ1cC9lbTpCIUNrIUdJbEx8TGtOa1BlUit0U2svZVR0b29YaTNBXkFtfk5OPHRObmlzTnRSbS9YdF9ua0F0RW1lRW5FJXlFKkV5SW5nSXNPdWdodFJlZVJpPVJvd1VtYlVuZCAwQ2tldERlRyBMdE1iIE1lTnlQUmVkU3N1ZVQhNUEsQmFjY29EYXlEZGwgRUdlYCBJIXRLJk1hdG9NJXJvd05lTmd1ZU5pZ2h0T2xPYFBQLVBwIVJeUm5hZG9SdG9pJ1NzVCRVcmksVz9kVyBXbllfe0FkZUFmZi1BZy1BKEFuc2YgQXBBc2hBPWxBeUVhdEVlRW5kSSRJYmVJe0lnZyBJbUlwT3BoeU91YiFVe1VlVWx5VW1wZXRVLFVgWTJCZUl0XU1iIU5hTn1sUmtleVJuUnQhMUVsPUVudHlJKUluSSxPMVBlUC0kOjVMeTVCKmxsYTBBYiFBd2EqQyFDb3YgRCBEb0ZhaXJGb2xkSGFwcHlJZiVtSXF1ZUl0SXYgJ0tub3duTG97VGlsVXN1JFZlaWwxRGE+R3JhZGVIb2xkT25QIFNldDFCPEdlMEErRUVkRWZ1bEUhW1UkMElsLnk6Qzx0Q3V1bUd1ZUxpZEwheUw9Tk5pc2hQJVJpb3VzL1VsdDNILSFMPXROZCVOdHUqTnVlUmJSaWZ5UnNdUnlTJ2xUIDwzQWIhQnI8dENpb3VzQ3QleURlb0V3fmErTnRhK09sKFJ0dSRSdXNTYVMuU3UkVCRWaWQ1QyRJKUlkTGM8b0x1bWVUZVlhKzpHZUcjSXRMa35MbnV0TnRSZmEqUm1ScmklU2hTcC9lVCBWZVkzQWxgQXAjQXJBJ2xBYCBCRGQoZ0VrJmRJcmRMY29tZS9UXyFBdEVhdEVlbEVuRSpJcElzcCAwRGVEYEZlTGR+Tk5kb3dOZU5nTmtObiBOdCBSZVNkb21TZVNoVH1bNUxmTTxOZCBPZE9sUmRSa1JsZFJyeVJgX3BFe0UsIUksST5Pbmc6OlJkM0Fyfm93OVVVbmdVYDozQnJhUm85TmVPXCI7XHJcbmNvbnN0IGNoZWNrc3VtID0gXCIweDNjOGFjYzFlN2IwOGQ4ZTc2ZjlmZGEwMTVlZjQ4ZGM4YzcxMGE3M2NiN2UwZjc3YjJjMThhOWI1YTdhZGRlNjBcIjtcclxubGV0IHdvcmRsaXN0ID0gbnVsbDtcclxuLyoqXHJcbiAqICBUaGUgW1tsaW5rLWJpcDM5LWVuXV0gZm9yIFttbmVtb25pYyBwaHJhc2VzXShsaW5rLWJpcC0zOSkuXHJcbiAqXHJcbiAqICBAX2RvY2xvYzogYXBpL3dvcmRsaXN0c1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIExhbmdFbiBleHRlbmRzIFdvcmRsaXN0T3dsIHtcclxuICAgIC8qKlxyXG4gICAgICogIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIEVuZ2xpc2ggbGFuZ3VhZ2UgV29yZGxpc3QuXHJcbiAgICAgKlxyXG4gICAgICogIFRoaXMgc2hvdWxkIGJlIHVubmVjZXNzYXJ5IG1vc3Qgb2YgdGhlIHRpbWUgYXMgdGhlIGV4cG9ydGVkXHJcbiAgICAgKiAgW1tsYW5nRW5dXSBzaG91bGQgc3VmZmljZS5cclxuICAgICAqXHJcbiAgICAgKiAgQF9pZ25vcmU6XHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKCkgeyBzdXBlcihcImVuXCIsIHdvcmRzLCBjaGVja3N1bSk7IH1cclxuICAgIC8qKlxyXG4gICAgICogIFJldHVybnMgYSBzaW5nbGV0b24gaW5zdGFuY2Ugb2YgYSBgYExhbmdFbmBgLCBjcmVhdGluZyBpdFxyXG4gICAgICogIGlmIHRoaXMgaXMgdGhlIGZpcnN0IHRpbWUgYmVpbmcgY2FsbGVkLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgd29yZGxpc3QoKSB7XHJcbiAgICAgICAgaWYgKHdvcmRsaXN0ID09IG51bGwpIHtcclxuICAgICAgICAgICAgd29yZGxpc3QgPSBuZXcgTGFuZ0VuKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB3b3JkbGlzdDtcclxuICAgIH1cclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1sYW5nLWVuLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/wordlists/lang-en.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/wordlists/wordlist-owl.js":
/*!***************************************************************!*\
  !*** ./node_modules/ethers/lib.esm/wordlists/wordlist-owl.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WordlistOwl: () => (/* binding */ WordlistOwl)\n/* harmony export */ });\n/* harmony import */ var _hash_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../hash/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/hash/index.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n/* harmony import */ var _decode_owl_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./decode-owl.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/wordlists/decode-owl.js\");\n/* harmony import */ var _wordlist_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wordlist.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/wordlists/wordlist.js\");\n// Use the encode-latin.js script to create the necessary\r\n// data files to be consumed by this class\r\n\r\n\r\n\r\n\r\n/**\r\n *  An OWL format Wordlist is an encoding method that exploits\r\n *  the general locality of alphabetically sorted words to\r\n *  achieve a simple but effective means of compression.\r\n *\r\n *  This class is generally not useful to most developers as\r\n *  it is used mainly internally to keep Wordlists for languages\r\n *  based on ASCII-7 small.\r\n *\r\n *  If necessary, there are tools within the ``generation/`` folder\r\n *  to create the necessary data.\r\n */\r\nclass WordlistOwl extends _wordlist_js__WEBPACK_IMPORTED_MODULE_0__.Wordlist {\r\n    #data;\r\n    #checksum;\r\n    /**\r\n     *  Creates a new Wordlist for %%locale%% using the OWL %%data%%\r\n     *  and validated against the %%checksum%%.\r\n     */\r\n    constructor(locale, data, checksum) {\r\n        super(locale);\r\n        this.#data = data;\r\n        this.#checksum = checksum;\r\n        this.#words = null;\r\n    }\r\n    /**\r\n     *  The OWL-encoded data.\r\n     */\r\n    get _data() { return this.#data; }\r\n    /**\r\n     *  Decode all the words for the wordlist.\r\n     */\r\n    _decodeWords() {\r\n        return (0,_decode_owl_js__WEBPACK_IMPORTED_MODULE_1__.decodeOwl)(this.#data);\r\n    }\r\n    #words;\r\n    #loadWords() {\r\n        if (this.#words == null) {\r\n            const words = this._decodeWords();\r\n            // Verify the computed list matches the official list\r\n            const checksum = (0,_hash_index_js__WEBPACK_IMPORTED_MODULE_2__.id)(words.join(\"\\n\") + \"\\n\");\r\n            /* c8 ignore start */\r\n            if (checksum !== this.#checksum) {\r\n                throw new Error(`BIP39 Wordlist for ${this.locale} FAILED`);\r\n            }\r\n            /* c8 ignore stop */\r\n            this.#words = words;\r\n        }\r\n        return this.#words;\r\n    }\r\n    getWord(index) {\r\n        const words = this.#loadWords();\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.assertArgument)(index >= 0 && index < words.length, `invalid word index: ${index}`, \"index\", index);\r\n        return words[index];\r\n    }\r\n    getWordIndex(word) {\r\n        return this.#loadWords().indexOf(word);\r\n    }\r\n}\r\n//# sourceMappingURL=wordlist-owl.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS93b3JkbGlzdHMvd29yZGxpc3Qtb3dsLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNzQztBQUNhO0FBQ1A7QUFDSDtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTywwQkFBMEIsa0RBQVE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSx5REFBUztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsa0RBQUU7QUFDL0I7QUFDQTtBQUNBLHNEQUFzRCxhQUFhO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLCtEQUFjLDREQUE0RCxNQUFNO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJEOlxcRG9fYW4yXFxsZW5kaHViX3YyXFxsZW5kaHViLWZyb250ZW5kLW5leHRqc1xcbm9kZV9tb2R1bGVzXFxldGhlcnNcXGxpYi5lc21cXHdvcmRsaXN0c1xcd29yZGxpc3Qtb3dsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFVzZSB0aGUgZW5jb2RlLWxhdGluLmpzIHNjcmlwdCB0byBjcmVhdGUgdGhlIG5lY2Vzc2FyeVxyXG4vLyBkYXRhIGZpbGVzIHRvIGJlIGNvbnN1bWVkIGJ5IHRoaXMgY2xhc3NcclxuaW1wb3J0IHsgaWQgfSBmcm9tIFwiLi4vaGFzaC9pbmRleC5qc1wiO1xyXG5pbXBvcnQgeyBhc3NlcnRBcmd1bWVudCB9IGZyb20gXCIuLi91dGlscy9pbmRleC5qc1wiO1xyXG5pbXBvcnQgeyBkZWNvZGVPd2wgfSBmcm9tIFwiLi9kZWNvZGUtb3dsLmpzXCI7XHJcbmltcG9ydCB7IFdvcmRsaXN0IH0gZnJvbSBcIi4vd29yZGxpc3QuanNcIjtcclxuLyoqXHJcbiAqICBBbiBPV0wgZm9ybWF0IFdvcmRsaXN0IGlzIGFuIGVuY29kaW5nIG1ldGhvZCB0aGF0IGV4cGxvaXRzXHJcbiAqICB0aGUgZ2VuZXJhbCBsb2NhbGl0eSBvZiBhbHBoYWJldGljYWxseSBzb3J0ZWQgd29yZHMgdG9cclxuICogIGFjaGlldmUgYSBzaW1wbGUgYnV0IGVmZmVjdGl2ZSBtZWFucyBvZiBjb21wcmVzc2lvbi5cclxuICpcclxuICogIFRoaXMgY2xhc3MgaXMgZ2VuZXJhbGx5IG5vdCB1c2VmdWwgdG8gbW9zdCBkZXZlbG9wZXJzIGFzXHJcbiAqICBpdCBpcyB1c2VkIG1haW5seSBpbnRlcm5hbGx5IHRvIGtlZXAgV29yZGxpc3RzIGZvciBsYW5ndWFnZXNcclxuICogIGJhc2VkIG9uIEFTQ0lJLTcgc21hbGwuXHJcbiAqXHJcbiAqICBJZiBuZWNlc3NhcnksIHRoZXJlIGFyZSB0b29scyB3aXRoaW4gdGhlIGBgZ2VuZXJhdGlvbi9gYCBmb2xkZXJcclxuICogIHRvIGNyZWF0ZSB0aGUgbmVjZXNzYXJ5IGRhdGEuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgV29yZGxpc3RPd2wgZXh0ZW5kcyBXb3JkbGlzdCB7XHJcbiAgICAjZGF0YTtcclxuICAgICNjaGVja3N1bTtcclxuICAgIC8qKlxyXG4gICAgICogIENyZWF0ZXMgYSBuZXcgV29yZGxpc3QgZm9yICUlbG9jYWxlJSUgdXNpbmcgdGhlIE9XTCAlJWRhdGElJVxyXG4gICAgICogIGFuZCB2YWxpZGF0ZWQgYWdhaW5zdCB0aGUgJSVjaGVja3N1bSUlLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcihsb2NhbGUsIGRhdGEsIGNoZWNrc3VtKSB7XHJcbiAgICAgICAgc3VwZXIobG9jYWxlKTtcclxuICAgICAgICB0aGlzLiNkYXRhID0gZGF0YTtcclxuICAgICAgICB0aGlzLiNjaGVja3N1bSA9IGNoZWNrc3VtO1xyXG4gICAgICAgIHRoaXMuI3dvcmRzID0gbnVsbDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogIFRoZSBPV0wtZW5jb2RlZCBkYXRhLlxyXG4gICAgICovXHJcbiAgICBnZXQgX2RhdGEoKSB7IHJldHVybiB0aGlzLiNkYXRhOyB9XHJcbiAgICAvKipcclxuICAgICAqICBEZWNvZGUgYWxsIHRoZSB3b3JkcyBmb3IgdGhlIHdvcmRsaXN0LlxyXG4gICAgICovXHJcbiAgICBfZGVjb2RlV29yZHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIGRlY29kZU93bCh0aGlzLiNkYXRhKTtcclxuICAgIH1cclxuICAgICN3b3JkcztcclxuICAgICNsb2FkV29yZHMoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuI3dvcmRzID09IG51bGwpIHtcclxuICAgICAgICAgICAgY29uc3Qgd29yZHMgPSB0aGlzLl9kZWNvZGVXb3JkcygpO1xyXG4gICAgICAgICAgICAvLyBWZXJpZnkgdGhlIGNvbXB1dGVkIGxpc3QgbWF0Y2hlcyB0aGUgb2ZmaWNpYWwgbGlzdFxyXG4gICAgICAgICAgICBjb25zdCBjaGVja3N1bSA9IGlkKHdvcmRzLmpvaW4oXCJcXG5cIikgKyBcIlxcblwiKTtcclxuICAgICAgICAgICAgLyogYzggaWdub3JlIHN0YXJ0ICovXHJcbiAgICAgICAgICAgIGlmIChjaGVja3N1bSAhPT0gdGhpcy4jY2hlY2tzdW0pIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQklQMzkgV29yZGxpc3QgZm9yICR7dGhpcy5sb2NhbGV9IEZBSUxFRGApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8qIGM4IGlnbm9yZSBzdG9wICovXHJcbiAgICAgICAgICAgIHRoaXMuI3dvcmRzID0gd29yZHM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLiN3b3JkcztcclxuICAgIH1cclxuICAgIGdldFdvcmQoaW5kZXgpIHtcclxuICAgICAgICBjb25zdCB3b3JkcyA9IHRoaXMuI2xvYWRXb3JkcygpO1xyXG4gICAgICAgIGFzc2VydEFyZ3VtZW50KGluZGV4ID49IDAgJiYgaW5kZXggPCB3b3Jkcy5sZW5ndGgsIGBpbnZhbGlkIHdvcmQgaW5kZXg6ICR7aW5kZXh9YCwgXCJpbmRleFwiLCBpbmRleCk7XHJcbiAgICAgICAgcmV0dXJuIHdvcmRzW2luZGV4XTtcclxuICAgIH1cclxuICAgIGdldFdvcmRJbmRleCh3b3JkKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuI2xvYWRXb3JkcygpLmluZGV4T2Yod29yZCk7XHJcbiAgICB9XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d29yZGxpc3Qtb3dsLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/wordlists/wordlist-owl.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/wordlists/wordlist-owla.js":
/*!****************************************************************!*\
  !*** ./node_modules/ethers/lib.esm/wordlists/wordlist-owla.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WordlistOwlA: () => (/* binding */ WordlistOwlA)\n/* harmony export */ });\n/* harmony import */ var _wordlist_owl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wordlist-owl.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/wordlists/wordlist-owl.js\");\n/* harmony import */ var _decode_owla_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./decode-owla.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/wordlists/decode-owla.js\");\n\r\n\r\n/**\r\n *  An OWL-A format Wordlist extends the OWL format to add an\r\n *  overlay onto an OWL format Wordlist to support diacritic\r\n *  marks.\r\n *\r\n *  This class is generally not useful to most developers as\r\n *  it is used mainly internally to keep Wordlists for languages\r\n *  based on latin-1 small.\r\n *\r\n *  If necessary, there are tools within the ``generation/`` folder\r\n *  to create the necessary data.\r\n */\r\nclass WordlistOwlA extends _wordlist_owl_js__WEBPACK_IMPORTED_MODULE_0__.WordlistOwl {\r\n    #accent;\r\n    /**\r\n     *  Creates a new Wordlist for %%locale%% using the OWLA %%data%%\r\n     *  and %%accent%% data and validated against the %%checksum%%.\r\n     */\r\n    constructor(locale, data, accent, checksum) {\r\n        super(locale, data, checksum);\r\n        this.#accent = accent;\r\n    }\r\n    /**\r\n     *  The OWLA-encoded accent data.\r\n     */\r\n    get _accent() { return this.#accent; }\r\n    /**\r\n     *  Decode all the words for the wordlist.\r\n     */\r\n    _decodeWords() {\r\n        return (0,_decode_owla_js__WEBPACK_IMPORTED_MODULE_1__.decodeOwlA)(this._data, this._accent);\r\n    }\r\n}\r\n//# sourceMappingURL=wordlist-owla.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS93b3JkbGlzdHMvd29yZGxpc3Qtb3dsYS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBZ0Q7QUFDRjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTywyQkFBMkIseURBQVc7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSwyREFBVTtBQUN6QjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkQ6XFxEb19hbjJcXGxlbmRodWJfdjJcXGxlbmRodWItZnJvbnRlbmQtbmV4dGpzXFxub2RlX21vZHVsZXNcXGV0aGVyc1xcbGliLmVzbVxcd29yZGxpc3RzXFx3b3JkbGlzdC1vd2xhLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFdvcmRsaXN0T3dsIH0gZnJvbSBcIi4vd29yZGxpc3Qtb3dsLmpzXCI7XHJcbmltcG9ydCB7IGRlY29kZU93bEEgfSBmcm9tIFwiLi9kZWNvZGUtb3dsYS5qc1wiO1xyXG4vKipcclxuICogIEFuIE9XTC1BIGZvcm1hdCBXb3JkbGlzdCBleHRlbmRzIHRoZSBPV0wgZm9ybWF0IHRvIGFkZCBhblxyXG4gKiAgb3ZlcmxheSBvbnRvIGFuIE9XTCBmb3JtYXQgV29yZGxpc3QgdG8gc3VwcG9ydCBkaWFjcml0aWNcclxuICogIG1hcmtzLlxyXG4gKlxyXG4gKiAgVGhpcyBjbGFzcyBpcyBnZW5lcmFsbHkgbm90IHVzZWZ1bCB0byBtb3N0IGRldmVsb3BlcnMgYXNcclxuICogIGl0IGlzIHVzZWQgbWFpbmx5IGludGVybmFsbHkgdG8ga2VlcCBXb3JkbGlzdHMgZm9yIGxhbmd1YWdlc1xyXG4gKiAgYmFzZWQgb24gbGF0aW4tMSBzbWFsbC5cclxuICpcclxuICogIElmIG5lY2Vzc2FyeSwgdGhlcmUgYXJlIHRvb2xzIHdpdGhpbiB0aGUgYGBnZW5lcmF0aW9uL2BgIGZvbGRlclxyXG4gKiAgdG8gY3JlYXRlIHRoZSBuZWNlc3NhcnkgZGF0YS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBXb3JkbGlzdE93bEEgZXh0ZW5kcyBXb3JkbGlzdE93bCB7XHJcbiAgICAjYWNjZW50O1xyXG4gICAgLyoqXHJcbiAgICAgKiAgQ3JlYXRlcyBhIG5ldyBXb3JkbGlzdCBmb3IgJSVsb2NhbGUlJSB1c2luZyB0aGUgT1dMQSAlJWRhdGElJVxyXG4gICAgICogIGFuZCAlJWFjY2VudCUlIGRhdGEgYW5kIHZhbGlkYXRlZCBhZ2FpbnN0IHRoZSAlJWNoZWNrc3VtJSUuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKGxvY2FsZSwgZGF0YSwgYWNjZW50LCBjaGVja3N1bSkge1xyXG4gICAgICAgIHN1cGVyKGxvY2FsZSwgZGF0YSwgY2hlY2tzdW0pO1xyXG4gICAgICAgIHRoaXMuI2FjY2VudCA9IGFjY2VudDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogIFRoZSBPV0xBLWVuY29kZWQgYWNjZW50IGRhdGEuXHJcbiAgICAgKi9cclxuICAgIGdldCBfYWNjZW50KCkgeyByZXR1cm4gdGhpcy4jYWNjZW50OyB9XHJcbiAgICAvKipcclxuICAgICAqICBEZWNvZGUgYWxsIHRoZSB3b3JkcyBmb3IgdGhlIHdvcmRsaXN0LlxyXG4gICAgICovXHJcbiAgICBfZGVjb2RlV29yZHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIGRlY29kZU93bEEodGhpcy5fZGF0YSwgdGhpcy5fYWNjZW50KTtcclxuICAgIH1cclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD13b3JkbGlzdC1vd2xhLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/wordlists/wordlist-owla.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/wordlists/wordlist.js":
/*!***********************************************************!*\
  !*** ./node_modules/ethers/lib.esm/wordlists/wordlist.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Wordlist: () => (/* binding */ Wordlist)\n/* harmony export */ });\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/utils/index.js\");\n\r\n/**\r\n *  A Wordlist represents a collection of language-specific\r\n *  words used to encode and devoce [[link-bip-39]] encoded data\r\n *  by mapping words to 11-bit values and vice versa.\r\n */\r\nclass Wordlist {\r\n    locale;\r\n    /**\r\n     *  Creates a new Wordlist instance.\r\n     *\r\n     *  Sub-classes MUST call this if they provide their own constructor,\r\n     *  passing in the locale string of the language.\r\n     *\r\n     *  Generally there is no need to create instances of a Wordlist,\r\n     *  since each language-specific Wordlist creates an instance and\r\n     *  there is no state kept internally, so they are safe to share.\r\n     */\r\n    constructor(locale) {\r\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_0__.defineProperties)(this, { locale });\r\n    }\r\n    /**\r\n     *  Sub-classes may override this to provide a language-specific\r\n     *  method for spliting %%phrase%% into individual words.\r\n     *\r\n     *  By default, %%phrase%% is split using any sequences of\r\n     *  white-space as defined by regular expressions (i.e. ``/\\s+/``).\r\n     */\r\n    split(phrase) {\r\n        return phrase.toLowerCase().split(/\\s+/g);\r\n    }\r\n    /**\r\n     *  Sub-classes may override this to provider a language-specific\r\n     *  method for joining %%words%% into a phrase.\r\n     *\r\n     *  By default, %%words%% are joined by a single space.\r\n     */\r\n    join(words) {\r\n        return words.join(\" \");\r\n    }\r\n}\r\n//# sourceMappingURL=wordlist.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS93b3JkbGlzdHMvd29yZGxpc3QuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBcUQ7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxpRUFBZ0IsU0FBUyxRQUFRO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJEOlxcRG9fYW4yXFxsZW5kaHViX3YyXFxsZW5kaHViLWZyb250ZW5kLW5leHRqc1xcbm9kZV9tb2R1bGVzXFxldGhlcnNcXGxpYi5lc21cXHdvcmRsaXN0c1xcd29yZGxpc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVmaW5lUHJvcGVydGllcyB9IGZyb20gXCIuLi91dGlscy9pbmRleC5qc1wiO1xyXG4vKipcclxuICogIEEgV29yZGxpc3QgcmVwcmVzZW50cyBhIGNvbGxlY3Rpb24gb2YgbGFuZ3VhZ2Utc3BlY2lmaWNcclxuICogIHdvcmRzIHVzZWQgdG8gZW5jb2RlIGFuZCBkZXZvY2UgW1tsaW5rLWJpcC0zOV1dIGVuY29kZWQgZGF0YVxyXG4gKiAgYnkgbWFwcGluZyB3b3JkcyB0byAxMS1iaXQgdmFsdWVzIGFuZCB2aWNlIHZlcnNhLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFdvcmRsaXN0IHtcclxuICAgIGxvY2FsZTtcclxuICAgIC8qKlxyXG4gICAgICogIENyZWF0ZXMgYSBuZXcgV29yZGxpc3QgaW5zdGFuY2UuXHJcbiAgICAgKlxyXG4gICAgICogIFN1Yi1jbGFzc2VzIE1VU1QgY2FsbCB0aGlzIGlmIHRoZXkgcHJvdmlkZSB0aGVpciBvd24gY29uc3RydWN0b3IsXHJcbiAgICAgKiAgcGFzc2luZyBpbiB0aGUgbG9jYWxlIHN0cmluZyBvZiB0aGUgbGFuZ3VhZ2UuXHJcbiAgICAgKlxyXG4gICAgICogIEdlbmVyYWxseSB0aGVyZSBpcyBubyBuZWVkIHRvIGNyZWF0ZSBpbnN0YW5jZXMgb2YgYSBXb3JkbGlzdCxcclxuICAgICAqICBzaW5jZSBlYWNoIGxhbmd1YWdlLXNwZWNpZmljIFdvcmRsaXN0IGNyZWF0ZXMgYW4gaW5zdGFuY2UgYW5kXHJcbiAgICAgKiAgdGhlcmUgaXMgbm8gc3RhdGUga2VwdCBpbnRlcm5hbGx5LCBzbyB0aGV5IGFyZSBzYWZlIHRvIHNoYXJlLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcihsb2NhbGUpIHtcclxuICAgICAgICBkZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHsgbG9jYWxlIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAgU3ViLWNsYXNzZXMgbWF5IG92ZXJyaWRlIHRoaXMgdG8gcHJvdmlkZSBhIGxhbmd1YWdlLXNwZWNpZmljXHJcbiAgICAgKiAgbWV0aG9kIGZvciBzcGxpdGluZyAlJXBocmFzZSUlIGludG8gaW5kaXZpZHVhbCB3b3Jkcy5cclxuICAgICAqXHJcbiAgICAgKiAgQnkgZGVmYXVsdCwgJSVwaHJhc2UlJSBpcyBzcGxpdCB1c2luZyBhbnkgc2VxdWVuY2VzIG9mXHJcbiAgICAgKiAgd2hpdGUtc3BhY2UgYXMgZGVmaW5lZCBieSByZWd1bGFyIGV4cHJlc3Npb25zIChpLmUuIGBgL1xccysvYGApLlxyXG4gICAgICovXHJcbiAgICBzcGxpdChwaHJhc2UpIHtcclxuICAgICAgICByZXR1cm4gcGhyYXNlLnRvTG93ZXJDYXNlKCkuc3BsaXQoL1xccysvZyk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqICBTdWItY2xhc3NlcyBtYXkgb3ZlcnJpZGUgdGhpcyB0byBwcm92aWRlciBhIGxhbmd1YWdlLXNwZWNpZmljXHJcbiAgICAgKiAgbWV0aG9kIGZvciBqb2luaW5nICUld29yZHMlJSBpbnRvIGEgcGhyYXNlLlxyXG4gICAgICpcclxuICAgICAqICBCeSBkZWZhdWx0LCAlJXdvcmRzJSUgYXJlIGpvaW5lZCBieSBhIHNpbmdsZSBzcGFjZS5cclxuICAgICAqL1xyXG4gICAgam9pbih3b3Jkcykge1xyXG4gICAgICAgIHJldHVybiB3b3Jkcy5qb2luKFwiIFwiKTtcclxuICAgIH1cclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD13b3JkbGlzdC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/wordlists/wordlist.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ethers/lib.esm/wordlists/wordlists-browser.js":
/*!********************************************************************!*\
  !*** ./node_modules/ethers/lib.esm/wordlists/wordlists-browser.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   wordlists: () => (/* binding */ wordlists)\n/* harmony export */ });\n/* harmony import */ var _lang_en_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lang-en.js */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/wordlists/lang-en.js\");\n\r\nconst wordlists = {\r\n    en: _lang_en_js__WEBPACK_IMPORTED_MODULE_0__.LangEn.wordlist(),\r\n};\r\n//# sourceMappingURL=wordlists-browser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS93b3JkbGlzdHMvd29yZGxpc3RzLWJyb3dzZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBc0M7QUFDL0I7QUFDUCxRQUFRLCtDQUFNO0FBQ2Q7QUFDQSIsInNvdXJjZXMiOlsiRDpcXERvX2FuMlxcbGVuZGh1Yl92MlxcbGVuZGh1Yi1mcm9udGVuZC1uZXh0anNcXG5vZGVfbW9kdWxlc1xcZXRoZXJzXFxsaWIuZXNtXFx3b3JkbGlzdHNcXHdvcmRsaXN0cy1icm93c2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExhbmdFbiB9IGZyb20gXCIuL2xhbmctZW4uanNcIjtcclxuZXhwb3J0IGNvbnN0IHdvcmRsaXN0cyA9IHtcclxuICAgIGVuOiBMYW5nRW4ud29yZGxpc3QoKSxcclxufTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d29yZGxpc3RzLWJyb3dzZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ethers/lib.esm/wordlists/wordlists-browser.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[8].oneOf[11].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[8].oneOf[11].use[2]!./node_modules/react-toastify/dist/ReactToastify.css":
/*!******************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[8].oneOf[11].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[8].oneOf[11].use[2]!./node_modules/react-toastify/dist/ReactToastify.css ***!
  \******************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _next_dist_build_webpack_loaders_css_loader_src_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../next/dist/build/webpack/loaders/css-loader/src/runtime/api.js */ \"(pages-dir-browser)/./node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/api.js\");\n/* harmony import */ var _next_dist_build_webpack_loaders_css_loader_src_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_next_dist_build_webpack_loaders_css_loader_src_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__);\n// Imports\n\nvar ___CSS_LOADER_EXPORT___ = _next_dist_build_webpack_loaders_css_loader_src_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default()(true);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \":root {\\r\\n  --toastify-color-light: #fff;\\r\\n  --toastify-color-dark: #121212;\\r\\n  --toastify-color-info: #3498db;\\r\\n  --toastify-color-success: #07bc0c;\\r\\n  --toastify-color-warning: #f1c40f;\\r\\n  --toastify-color-error: #e74c3c;\\r\\n  --toastify-color-transparent: rgba(255, 255, 255, 0.7);\\r\\n  --toastify-icon-color-info: var(--toastify-color-info);\\r\\n  --toastify-icon-color-success: var(--toastify-color-success);\\r\\n  --toastify-icon-color-warning: var(--toastify-color-warning);\\r\\n  --toastify-icon-color-error: var(--toastify-color-error);\\r\\n  --toastify-toast-width: 320px;\\r\\n  --toastify-toast-background: #fff;\\r\\n  --toastify-toast-min-height: 64px;\\r\\n  --toastify-toast-max-height: 800px;\\r\\n  --toastify-font-family: sans-serif;\\r\\n  --toastify-z-index: 9999;\\r\\n  --toastify-text-color-light: #757575;\\r\\n  --toastify-text-color-dark: #fff;\\r\\n  --toastify-text-color-info: #fff;\\r\\n  --toastify-text-color-success: #fff;\\r\\n  --toastify-text-color-warning: #fff;\\r\\n  --toastify-text-color-error: #fff;\\r\\n  --toastify-spinner-color: #616161;\\r\\n  --toastify-spinner-color-empty-area: #e0e0e0;\\r\\n  --toastify-color-progress-light: linear-gradient(\\r\\n    to right,\\r\\n    #4cd964,\\r\\n    #5ac8fa,\\r\\n    #007aff,\\r\\n    #34aadc,\\r\\n    #5856d6,\\r\\n    #ff2d55\\r\\n  );\\r\\n  --toastify-color-progress-dark: #bb86fc;\\r\\n  --toastify-color-progress-info: var(--toastify-color-info);\\r\\n  --toastify-color-progress-success: var(--toastify-color-success);\\r\\n  --toastify-color-progress-warning: var(--toastify-color-warning);\\r\\n  --toastify-color-progress-error: var(--toastify-color-error);\\r\\n}\\r\\n\\r\\n.Toastify__toast-container {\\r\\n  z-index: var(--toastify-z-index);\\r\\n  -webkit-transform: translate3d(0, 0, var(--toastify-z-index));\\r\\n  position: fixed;\\r\\n  padding: 4px;\\r\\n  width: var(--toastify-toast-width);\\r\\n  box-sizing: border-box;\\r\\n  color: #fff;\\r\\n}\\r\\n.Toastify__toast-container--top-left {\\r\\n  top: 1em;\\r\\n  left: 1em;\\r\\n}\\r\\n.Toastify__toast-container--top-center {\\r\\n  top: 1em;\\r\\n  left: 50%;\\r\\n  transform: translateX(-50%);\\r\\n}\\r\\n.Toastify__toast-container--top-right {\\r\\n  top: 1em;\\r\\n  right: 1em;\\r\\n}\\r\\n.Toastify__toast-container--bottom-left {\\r\\n  bottom: 1em;\\r\\n  left: 1em;\\r\\n}\\r\\n.Toastify__toast-container--bottom-center {\\r\\n  bottom: 1em;\\r\\n  left: 50%;\\r\\n  transform: translateX(-50%);\\r\\n}\\r\\n.Toastify__toast-container--bottom-right {\\r\\n  bottom: 1em;\\r\\n  right: 1em;\\r\\n}\\r\\n\\r\\n@media only screen and (max-width : 480px) {\\r\\n  .Toastify__toast-container {\\r\\n    width: 100vw;\\r\\n    padding: 0;\\r\\n    left: 0;\\r\\n    margin: 0;\\r\\n  }\\r\\n  .Toastify__toast-container--top-left, .Toastify__toast-container--top-center, .Toastify__toast-container--top-right {\\r\\n    top: 0;\\r\\n    transform: translateX(0);\\r\\n  }\\r\\n  .Toastify__toast-container--bottom-left, .Toastify__toast-container--bottom-center, .Toastify__toast-container--bottom-right {\\r\\n    bottom: 0;\\r\\n    transform: translateX(0);\\r\\n  }\\r\\n  .Toastify__toast-container--rtl {\\r\\n    right: 0;\\r\\n    left: initial;\\r\\n  }\\r\\n}\\r\\n.Toastify__toast {\\r\\n  position: relative;\\r\\n  min-height: var(--toastify-toast-min-height);\\r\\n  box-sizing: border-box;\\r\\n  margin-bottom: 1rem;\\r\\n  padding: 8px;\\r\\n  border-radius: 4px;\\r\\n  box-shadow: 0 1px 10px 0 rgba(0, 0, 0, 0.1), 0 2px 15px 0 rgba(0, 0, 0, 0.05);\\r\\n  display: flex;\\r\\n  justify-content: space-between;\\r\\n  max-height: var(--toastify-toast-max-height);\\r\\n  overflow: hidden;\\r\\n  font-family: var(--toastify-font-family);\\r\\n  cursor: default;\\r\\n  direction: ltr;\\r\\n  /* webkit only issue #791 */\\r\\n  z-index: 0;\\r\\n}\\r\\n.Toastify__toast--rtl {\\r\\n  direction: rtl;\\r\\n}\\r\\n.Toastify__toast--close-on-click {\\r\\n  cursor: pointer;\\r\\n}\\r\\n.Toastify__toast-body {\\r\\n  margin: auto 0;\\r\\n  flex: 1 1 auto;\\r\\n  padding: 6px;\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n}\\r\\n.Toastify__toast-body > div:last-child {\\r\\n  word-break: break-word;\\r\\n  flex: 1;\\r\\n}\\r\\n.Toastify__toast-icon {\\r\\n  margin-inline-end: 10px;\\r\\n  width: 20px;\\r\\n  flex-shrink: 0;\\r\\n  display: flex;\\r\\n}\\r\\n\\r\\n.Toastify--animate {\\r\\n  animation-fill-mode: both;\\r\\n  animation-duration: 0.7s;\\r\\n}\\r\\n\\r\\n.Toastify--animate-icon {\\r\\n  animation-fill-mode: both;\\r\\n  animation-duration: 0.3s;\\r\\n}\\r\\n\\r\\n@media only screen and (max-width : 480px) {\\r\\n  .Toastify__toast {\\r\\n    margin-bottom: 0;\\r\\n    border-radius: 0;\\r\\n  }\\r\\n}\\r\\n.Toastify__toast-theme--dark {\\r\\n  background: var(--toastify-color-dark);\\r\\n  color: var(--toastify-text-color-dark);\\r\\n}\\r\\n.Toastify__toast-theme--light {\\r\\n  background: var(--toastify-color-light);\\r\\n  color: var(--toastify-text-color-light);\\r\\n}\\r\\n.Toastify__toast-theme--colored.Toastify__toast--default {\\r\\n  background: var(--toastify-color-light);\\r\\n  color: var(--toastify-text-color-light);\\r\\n}\\r\\n.Toastify__toast-theme--colored.Toastify__toast--info {\\r\\n  color: var(--toastify-text-color-info);\\r\\n  background: var(--toastify-color-info);\\r\\n}\\r\\n.Toastify__toast-theme--colored.Toastify__toast--success {\\r\\n  color: var(--toastify-text-color-success);\\r\\n  background: var(--toastify-color-success);\\r\\n}\\r\\n.Toastify__toast-theme--colored.Toastify__toast--warning {\\r\\n  color: var(--toastify-text-color-warning);\\r\\n  background: var(--toastify-color-warning);\\r\\n}\\r\\n.Toastify__toast-theme--colored.Toastify__toast--error {\\r\\n  color: var(--toastify-text-color-error);\\r\\n  background: var(--toastify-color-error);\\r\\n}\\r\\n\\r\\n.Toastify__progress-bar-theme--light {\\r\\n  background: var(--toastify-color-progress-light);\\r\\n}\\r\\n.Toastify__progress-bar-theme--dark {\\r\\n  background: var(--toastify-color-progress-dark);\\r\\n}\\r\\n.Toastify__progress-bar--info {\\r\\n  background: var(--toastify-color-progress-info);\\r\\n}\\r\\n.Toastify__progress-bar--success {\\r\\n  background: var(--toastify-color-progress-success);\\r\\n}\\r\\n.Toastify__progress-bar--warning {\\r\\n  background: var(--toastify-color-progress-warning);\\r\\n}\\r\\n.Toastify__progress-bar--error {\\r\\n  background: var(--toastify-color-progress-error);\\r\\n}\\r\\n.Toastify__progress-bar-theme--colored.Toastify__progress-bar--info, .Toastify__progress-bar-theme--colored.Toastify__progress-bar--success, .Toastify__progress-bar-theme--colored.Toastify__progress-bar--warning, .Toastify__progress-bar-theme--colored.Toastify__progress-bar--error {\\r\\n  background: var(--toastify-color-transparent);\\r\\n}\\r\\n\\r\\n.Toastify__close-button {\\r\\n  color: #fff;\\r\\n  background: transparent;\\r\\n  outline: none;\\r\\n  border: none;\\r\\n  padding: 0;\\r\\n  cursor: pointer;\\r\\n  opacity: 0.7;\\r\\n  transition: 0.3s ease;\\r\\n  align-self: flex-start;\\r\\n}\\r\\n.Toastify__close-button--light {\\r\\n  color: #000;\\r\\n  opacity: 0.3;\\r\\n}\\r\\n.Toastify__close-button > svg {\\r\\n  fill: currentColor;\\r\\n  height: 16px;\\r\\n  width: 14px;\\r\\n}\\r\\n.Toastify__close-button:hover, .Toastify__close-button:focus {\\r\\n  opacity: 1;\\r\\n}\\r\\n\\r\\n@keyframes Toastify__trackProgress {\\r\\n  0% {\\r\\n    transform: scaleX(1);\\r\\n  }\\r\\n  100% {\\r\\n    transform: scaleX(0);\\r\\n  }\\r\\n}\\r\\n.Toastify__progress-bar {\\r\\n  position: absolute;\\r\\n  bottom: 0;\\r\\n  left: 0;\\r\\n  width: 100%;\\r\\n  height: 5px;\\r\\n  z-index: var(--toastify-z-index);\\r\\n  opacity: 0.7;\\r\\n  transform-origin: left;\\r\\n}\\r\\n.Toastify__progress-bar--animated {\\r\\n  animation: Toastify__trackProgress linear 1 forwards;\\r\\n}\\r\\n.Toastify__progress-bar--controlled {\\r\\n  transition: transform 0.2s;\\r\\n}\\r\\n.Toastify__progress-bar--rtl {\\r\\n  right: 0;\\r\\n  left: initial;\\r\\n  transform-origin: right;\\r\\n}\\r\\n\\r\\n.Toastify__spinner {\\r\\n  width: 20px;\\r\\n  height: 20px;\\r\\n  box-sizing: border-box;\\r\\n  border: 2px solid;\\r\\n  border-radius: 100%;\\r\\n  border-color: var(--toastify-spinner-color-empty-area);\\r\\n  border-right-color: var(--toastify-spinner-color);\\r\\n  animation: Toastify__spin 0.65s linear infinite;\\r\\n}\\r\\n\\r\\n@keyframes Toastify__bounceInRight {\\r\\n  from, 60%, 75%, 90%, to {\\r\\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\\r\\n  }\\r\\n  from {\\r\\n    opacity: 0;\\r\\n    transform: translate3d(3000px, 0, 0);\\r\\n  }\\r\\n  60% {\\r\\n    opacity: 1;\\r\\n    transform: translate3d(-25px, 0, 0);\\r\\n  }\\r\\n  75% {\\r\\n    transform: translate3d(10px, 0, 0);\\r\\n  }\\r\\n  90% {\\r\\n    transform: translate3d(-5px, 0, 0);\\r\\n  }\\r\\n  to {\\r\\n    transform: none;\\r\\n  }\\r\\n}\\r\\n@keyframes Toastify__bounceOutRight {\\r\\n  20% {\\r\\n    opacity: 1;\\r\\n    transform: translate3d(-20px, 0, 0);\\r\\n  }\\r\\n  to {\\r\\n    opacity: 0;\\r\\n    transform: translate3d(2000px, 0, 0);\\r\\n  }\\r\\n}\\r\\n@keyframes Toastify__bounceInLeft {\\r\\n  from, 60%, 75%, 90%, to {\\r\\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\\r\\n  }\\r\\n  0% {\\r\\n    opacity: 0;\\r\\n    transform: translate3d(-3000px, 0, 0);\\r\\n  }\\r\\n  60% {\\r\\n    opacity: 1;\\r\\n    transform: translate3d(25px, 0, 0);\\r\\n  }\\r\\n  75% {\\r\\n    transform: translate3d(-10px, 0, 0);\\r\\n  }\\r\\n  90% {\\r\\n    transform: translate3d(5px, 0, 0);\\r\\n  }\\r\\n  to {\\r\\n    transform: none;\\r\\n  }\\r\\n}\\r\\n@keyframes Toastify__bounceOutLeft {\\r\\n  20% {\\r\\n    opacity: 1;\\r\\n    transform: translate3d(20px, 0, 0);\\r\\n  }\\r\\n  to {\\r\\n    opacity: 0;\\r\\n    transform: translate3d(-2000px, 0, 0);\\r\\n  }\\r\\n}\\r\\n@keyframes Toastify__bounceInUp {\\r\\n  from, 60%, 75%, 90%, to {\\r\\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\\r\\n  }\\r\\n  from {\\r\\n    opacity: 0;\\r\\n    transform: translate3d(0, 3000px, 0);\\r\\n  }\\r\\n  60% {\\r\\n    opacity: 1;\\r\\n    transform: translate3d(0, -20px, 0);\\r\\n  }\\r\\n  75% {\\r\\n    transform: translate3d(0, 10px, 0);\\r\\n  }\\r\\n  90% {\\r\\n    transform: translate3d(0, -5px, 0);\\r\\n  }\\r\\n  to {\\r\\n    transform: translate3d(0, 0, 0);\\r\\n  }\\r\\n}\\r\\n@keyframes Toastify__bounceOutUp {\\r\\n  20% {\\r\\n    transform: translate3d(0, -10px, 0);\\r\\n  }\\r\\n  40%, 45% {\\r\\n    opacity: 1;\\r\\n    transform: translate3d(0, 20px, 0);\\r\\n  }\\r\\n  to {\\r\\n    opacity: 0;\\r\\n    transform: translate3d(0, -2000px, 0);\\r\\n  }\\r\\n}\\r\\n@keyframes Toastify__bounceInDown {\\r\\n  from, 60%, 75%, 90%, to {\\r\\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\\r\\n  }\\r\\n  0% {\\r\\n    opacity: 0;\\r\\n    transform: translate3d(0, -3000px, 0);\\r\\n  }\\r\\n  60% {\\r\\n    opacity: 1;\\r\\n    transform: translate3d(0, 25px, 0);\\r\\n  }\\r\\n  75% {\\r\\n    transform: translate3d(0, -10px, 0);\\r\\n  }\\r\\n  90% {\\r\\n    transform: translate3d(0, 5px, 0);\\r\\n  }\\r\\n  to {\\r\\n    transform: none;\\r\\n  }\\r\\n}\\r\\n@keyframes Toastify__bounceOutDown {\\r\\n  20% {\\r\\n    transform: translate3d(0, 10px, 0);\\r\\n  }\\r\\n  40%, 45% {\\r\\n    opacity: 1;\\r\\n    transform: translate3d(0, -20px, 0);\\r\\n  }\\r\\n  to {\\r\\n    opacity: 0;\\r\\n    transform: translate3d(0, 2000px, 0);\\r\\n  }\\r\\n}\\r\\n.Toastify__bounce-enter--top-left, .Toastify__bounce-enter--bottom-left {\\r\\n  animation-name: Toastify__bounceInLeft;\\r\\n}\\r\\n.Toastify__bounce-enter--top-right, .Toastify__bounce-enter--bottom-right {\\r\\n  animation-name: Toastify__bounceInRight;\\r\\n}\\r\\n.Toastify__bounce-enter--top-center {\\r\\n  animation-name: Toastify__bounceInDown;\\r\\n}\\r\\n.Toastify__bounce-enter--bottom-center {\\r\\n  animation-name: Toastify__bounceInUp;\\r\\n}\\r\\n\\r\\n.Toastify__bounce-exit--top-left, .Toastify__bounce-exit--bottom-left {\\r\\n  animation-name: Toastify__bounceOutLeft;\\r\\n}\\r\\n.Toastify__bounce-exit--top-right, .Toastify__bounce-exit--bottom-right {\\r\\n  animation-name: Toastify__bounceOutRight;\\r\\n}\\r\\n.Toastify__bounce-exit--top-center {\\r\\n  animation-name: Toastify__bounceOutUp;\\r\\n}\\r\\n.Toastify__bounce-exit--bottom-center {\\r\\n  animation-name: Toastify__bounceOutDown;\\r\\n}\\r\\n\\r\\n@keyframes Toastify__zoomIn {\\r\\n  from {\\r\\n    opacity: 0;\\r\\n    transform: scale3d(0.3, 0.3, 0.3);\\r\\n  }\\r\\n  50% {\\r\\n    opacity: 1;\\r\\n  }\\r\\n}\\r\\n@keyframes Toastify__zoomOut {\\r\\n  from {\\r\\n    opacity: 1;\\r\\n  }\\r\\n  50% {\\r\\n    opacity: 0;\\r\\n    transform: scale3d(0.3, 0.3, 0.3);\\r\\n  }\\r\\n  to {\\r\\n    opacity: 0;\\r\\n  }\\r\\n}\\r\\n.Toastify__zoom-enter {\\r\\n  animation-name: Toastify__zoomIn;\\r\\n}\\r\\n\\r\\n.Toastify__zoom-exit {\\r\\n  animation-name: Toastify__zoomOut;\\r\\n}\\r\\n\\r\\n@keyframes Toastify__flipIn {\\r\\n  from {\\r\\n    transform: perspective(400px) rotate3d(1, 0, 0, 90deg);\\r\\n    animation-timing-function: ease-in;\\r\\n    opacity: 0;\\r\\n  }\\r\\n  40% {\\r\\n    transform: perspective(400px) rotate3d(1, 0, 0, -20deg);\\r\\n    animation-timing-function: ease-in;\\r\\n  }\\r\\n  60% {\\r\\n    transform: perspective(400px) rotate3d(1, 0, 0, 10deg);\\r\\n    opacity: 1;\\r\\n  }\\r\\n  80% {\\r\\n    transform: perspective(400px) rotate3d(1, 0, 0, -5deg);\\r\\n  }\\r\\n  to {\\r\\n    transform: perspective(400px);\\r\\n  }\\r\\n}\\r\\n@keyframes Toastify__flipOut {\\r\\n  from {\\r\\n    transform: perspective(400px);\\r\\n  }\\r\\n  30% {\\r\\n    transform: perspective(400px) rotate3d(1, 0, 0, -20deg);\\r\\n    opacity: 1;\\r\\n  }\\r\\n  to {\\r\\n    transform: perspective(400px) rotate3d(1, 0, 0, 90deg);\\r\\n    opacity: 0;\\r\\n  }\\r\\n}\\r\\n.Toastify__flip-enter {\\r\\n  animation-name: Toastify__flipIn;\\r\\n}\\r\\n\\r\\n.Toastify__flip-exit {\\r\\n  animation-name: Toastify__flipOut;\\r\\n}\\r\\n\\r\\n@keyframes Toastify__slideInRight {\\r\\n  from {\\r\\n    transform: translate3d(110%, 0, 0);\\r\\n    visibility: visible;\\r\\n  }\\r\\n  to {\\r\\n    transform: translate3d(0, 0, 0);\\r\\n  }\\r\\n}\\r\\n@keyframes Toastify__slideInLeft {\\r\\n  from {\\r\\n    transform: translate3d(-110%, 0, 0);\\r\\n    visibility: visible;\\r\\n  }\\r\\n  to {\\r\\n    transform: translate3d(0, 0, 0);\\r\\n  }\\r\\n}\\r\\n@keyframes Toastify__slideInUp {\\r\\n  from {\\r\\n    transform: translate3d(0, 110%, 0);\\r\\n    visibility: visible;\\r\\n  }\\r\\n  to {\\r\\n    transform: translate3d(0, 0, 0);\\r\\n  }\\r\\n}\\r\\n@keyframes Toastify__slideInDown {\\r\\n  from {\\r\\n    transform: translate3d(0, -110%, 0);\\r\\n    visibility: visible;\\r\\n  }\\r\\n  to {\\r\\n    transform: translate3d(0, 0, 0);\\r\\n  }\\r\\n}\\r\\n@keyframes Toastify__slideOutRight {\\r\\n  from {\\r\\n    transform: translate3d(0, 0, 0);\\r\\n  }\\r\\n  to {\\r\\n    visibility: hidden;\\r\\n    transform: translate3d(110%, 0, 0);\\r\\n  }\\r\\n}\\r\\n@keyframes Toastify__slideOutLeft {\\r\\n  from {\\r\\n    transform: translate3d(0, 0, 0);\\r\\n  }\\r\\n  to {\\r\\n    visibility: hidden;\\r\\n    transform: translate3d(-110%, 0, 0);\\r\\n  }\\r\\n}\\r\\n@keyframes Toastify__slideOutDown {\\r\\n  from {\\r\\n    transform: translate3d(0, 0, 0);\\r\\n  }\\r\\n  to {\\r\\n    visibility: hidden;\\r\\n    transform: translate3d(0, 500px, 0);\\r\\n  }\\r\\n}\\r\\n@keyframes Toastify__slideOutUp {\\r\\n  from {\\r\\n    transform: translate3d(0, 0, 0);\\r\\n  }\\r\\n  to {\\r\\n    visibility: hidden;\\r\\n    transform: translate3d(0, -500px, 0);\\r\\n  }\\r\\n}\\r\\n.Toastify__slide-enter--top-left, .Toastify__slide-enter--bottom-left {\\r\\n  animation-name: Toastify__slideInLeft;\\r\\n}\\r\\n.Toastify__slide-enter--top-right, .Toastify__slide-enter--bottom-right {\\r\\n  animation-name: Toastify__slideInRight;\\r\\n}\\r\\n.Toastify__slide-enter--top-center {\\r\\n  animation-name: Toastify__slideInDown;\\r\\n}\\r\\n.Toastify__slide-enter--bottom-center {\\r\\n  animation-name: Toastify__slideInUp;\\r\\n}\\r\\n\\r\\n.Toastify__slide-exit--top-left, .Toastify__slide-exit--bottom-left {\\r\\n  animation-name: Toastify__slideOutLeft;\\r\\n}\\r\\n.Toastify__slide-exit--top-right, .Toastify__slide-exit--bottom-right {\\r\\n  animation-name: Toastify__slideOutRight;\\r\\n}\\r\\n.Toastify__slide-exit--top-center {\\r\\n  animation-name: Toastify__slideOutUp;\\r\\n}\\r\\n.Toastify__slide-exit--bottom-center {\\r\\n  animation-name: Toastify__slideOutDown;\\r\\n}\\r\\n\\r\\n@keyframes Toastify__spin {\\r\\n  from {\\r\\n    transform: rotate(0deg);\\r\\n  }\\r\\n  to {\\r\\n    transform: rotate(360deg);\\r\\n  }\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=ReactToastify.css.map */\", \"\",{\"version\":3,\"sources\":[\"webpack://node_modules/react-toastify/scss/_variables.scss\",\"webpack://node_modules/react-toastify/dist/ReactToastify.css\",\"webpack://node_modules/react-toastify/scss/_toastContainer.scss\",\"webpack://node_modules/react-toastify/scss/_toast.scss\",\"webpack://node_modules/react-toastify/scss/_theme.scss\",\"webpack://node_modules/react-toastify/scss/_closeButton.scss\",\"webpack://node_modules/react-toastify/scss/_progressBar.scss\",\"webpack://node_modules/react-toastify/scss/_icons.scss\",\"webpack://node_modules/react-toastify/scss/animations/_bounce.scss\",\"webpack://node_modules/react-toastify/scss/animations/_zoom.scss\",\"webpack://node_modules/react-toastify/scss/animations/_flip.scss\",\"webpack://node_modules/react-toastify/scss/animations/_slide.scss\",\"webpack://node_modules/react-toastify/scss/animations/_spin.scss\"],\"names\":[],\"mappings\":\"AAGA;EACE,4BAAA;EACA,8BAAA;EACA,8BAAA;EACA,iCAAA;EACA,iCAAA;EACA,+BAAA;EACA,sDAAA;EAEA,sDAAA;EACA,4DAAA;EACA,4DAAA;EACA,wDAAA;EAEA,6BAAA;EACA,iCAAA;EACA,iCAAA;EACA,kCAAA;EACA,kCAAA;EACA,wBAAA;EAEA,oCAAA;EACA,gCAAA;EAGA,gCAAA;EACA,mCAAA;EACA,mCAAA;EACA,iCAAA;EAEA,iCAAA;EACA,4CAAA;EAGA;;;;;;;;GAAA;EAUA,uCAAA;EACA,0DAAA;EACA,gEAAA;EACA,gEAAA;EACA,4DAAA;ACXF;;ACxCA;EACE,gCAAA;EACA,6DAAA;EACA,eAAA;EACA,YAAA;EACA,kCAAA;EACA,sBAAA;EACA,WAAA;AD2CF;AC1CE;EACE,QAAA;EACA,SAAA;AD4CJ;AC1CE;EACE,QAAA;EACA,SAAA;EACA,2BAAA;AD4CJ;AC1CE;EACE,QAAA;EACA,UAAA;AD4CJ;AC1CE;EACE,WAAA;EACA,SAAA;AD4CJ;AC1CE;EACE,WAAA;EACA,SAAA;EACA,2BAAA;AD4CJ;AC1CE;EACE,WAAA;EACA,UAAA;AD4CJ;;ACxCA;EACE;IACE,YAAA;IACA,UAAA;IACA,OAAA;IACA,SAAA;ED2CF;EC1CE;IAGE,MAAA;IACA,wBAAA;ED0CJ;ECxCE;IAGE,SAAA;IACA,wBAAA;EDwCJ;ECtCE;IACE,QAAA;IACA,aAAA;EDwCJ;AACF;AEjGA;EACE,kBAAA;EACA,4CAAA;EACA,sBAAA;EACA,mBAAA;EACA,YAAA;EACA,kBAAA;EACA,6EAAA;EACA,aAAA;EACA,8BAAA;EACA,4CAAA;EACA,gBAAA;EACA,wCAAA;EACA,eAAA;EACA,cAAA;EACA,2BAAA;EACA,UAAA;AFmGF;AElGE;EACE,cAAA;AFoGJ;AElGE;EACE,eAAA;AFoGJ;AElGE;EACE,cAAA;EACA,cAAA;EACA,YAAA;EACA,aAAA;EACA,mBAAA;AFoGJ;AEnGI;EACE,sBAAA;EACA,OAAA;AFqGN;AElGE;EACE,uBAAA;EACA,WAAA;EACA,cAAA;EACA,aAAA;AFoGJ;;AEhGA;EACE,yBAAA;EACA,wBAAA;AFmGF;;AEhGA;EACE,yBAAA;EACA,wBAAA;AFmGF;;AEhGA;EACE;IACE,gBAAA;IACA,gBAAA;EFmGF;AACF;AG1JE;EACE,sCAAA;EACA,sCAAA;AH4JJ;AG1JE;EACE,uCAAA;EACA,uCAAA;AH4JJ;AG1JE;EACE,uCAAA;EACA,uCAAA;AH4JJ;AG1JE;EACE,sCAAA;EACA,sCAAA;AH4JJ;AG1JE;EACE,yCAAA;EACA,yCAAA;AH4JJ;AG1JE;EACE,yCAAA;EACA,yCAAA;AH4JJ;AG1JE;EACE,uCAAA;EACA,uCAAA;AH4JJ;;AGvJE;EACE,gDAAA;AH0JJ;AGxJE;EACE,+CAAA;AH0JJ;AGxJE;EACE,+CAAA;AH0JJ;AGxJE;EACE,kDAAA;AH0JJ;AGxJE;EACE,kDAAA;AH0JJ;AGxJE;EACE,gDAAA;AH0JJ;AGxJE;EAIE,6CAAA;AHuJJ;;AI7MA;EACE,WAAA;EACA,uBAAA;EACA,aAAA;EACA,YAAA;EACA,UAAA;EACA,eAAA;EACA,YAAA;EACA,qBAAA;EACA,sBAAA;AJgNF;AI9ME;EACE,WAAA;EACA,YAAA;AJgNJ;AI7ME;EACE,kBAAA;EACA,YAAA;EACA,WAAA;AJ+MJ;AI5ME;EAEE,UAAA;AJ6MJ;;AKrOA;EACE;IACE,oBAAA;ELwOF;EKtOA;IACE,oBAAA;ELwOF;AACF;AKrOA;EACE,kBAAA;EACA,SAAA;EACA,OAAA;EACA,WAAA;EACA,WAAA;EACA,gCAAA;EACA,YAAA;EACA,sBAAA;ALuOF;AKrOE;EACE,oDAAA;ALuOJ;AKpOE;EACE,0BAAA;ALsOJ;AKnOE;EACE,QAAA;EACA,aAAA;EACA,uBAAA;ALqOJ;;AMnQA;EACE,WAAA;EACA,YAAA;EACA,sBAAA;EACA,iBAAA;EACA,mBAAA;EACA,sDAAA;EACA,iDAAA;EACA,+CAAA;ANsQF;;AO1QA;EACE;IAJA,8DAAA;EPkRA;EOvQA;IACE,UAAA;IACA,oCAAA;EPyQF;EOvQA;IACE,UAAA;IACA,mCAAA;EPyQF;EOvQA;IACE,kCAAA;EPyQF;EOvQA;IACE,kCAAA;EPyQF;EOvQA;IACE,eAAA;EPyQF;AACF;AOtQA;EACE;IACE,UAAA;IACA,mCAAA;EPwQF;EOtQA;IACE,UAAA;IACA,oCAAA;EPwQF;AACF;AOrQA;EACE;IA1CA,8DAAA;EPkTA;EOjQA;IACE,UAAA;IACA,qCAAA;EPmQF;EOjQA;IACE,UAAA;IACA,kCAAA;EPmQF;EOjQA;IACE,mCAAA;EPmQF;EOjQA;IACE,iCAAA;EPmQF;EOjQA;IACE,eAAA;EPmQF;AACF;AOhQA;EACE;IACE,UAAA;IACA,kCAAA;EPkQF;EOhQA;IACE,UAAA;IACA,qCAAA;EPkQF;AACF;AO/PA;EACE;IAhFA,8DAAA;EPkVA;EO3PA;IACE,UAAA;IACA,oCAAA;EP6PF;EO3PA;IACE,UAAA;IACA,mCAAA;EP6PF;EO3PA;IACE,kCAAA;EP6PF;EO3PA;IACE,kCAAA;EP6PF;EO3PA;IACE,+BAAA;EP6PF;AACF;AO1PA;EACE;IACE,mCAAA;EP4PF;EO1PA;IAEE,UAAA;IACA,kCAAA;EP2PF;EOzPA;IACE,UAAA;IACA,qCAAA;EP2PF;AACF;AOxPA;EACE;IA1HA,8DAAA;EPqXA;EOpPA;IACE,UAAA;IACA,qCAAA;EPsPF;EOpPA;IACE,UAAA;IACA,kCAAA;EPsPF;EOpPA;IACE,mCAAA;EPsPF;EOpPA;IACE,iCAAA;EPsPF;EOpPA;IACE,eAAA;EPsPF;AACF;AOnPA;EACE;IACE,kCAAA;EPqPF;EOnPA;IAEE,UAAA;IACA,mCAAA;EPoPF;EOlPA;IACE,UAAA;IACA,oCAAA;EPoPF;AACF;AOhPE;EAEE,sCAAA;APiPJ;AO/OE;EAEE,uCAAA;APgPJ;AO9OE;EACE,sCAAA;APgPJ;AO9OE;EACE,oCAAA;APgPJ;;AO3OE;EAEE,uCAAA;AP6OJ;AO3OE;EAEE,wCAAA;AP4OJ;AO1OE;EACE,qCAAA;AP4OJ;AO1OE;EACE,uCAAA;AP4OJ;;AQ9aA;EACE;IACE,UAAA;IACA,iCAAA;ERibF;EQ/aA;IACE,UAAA;ERibF;AACF;AQ9aA;EACE;IACE,UAAA;ERgbF;EQ9aA;IACE,UAAA;IACA,iCAAA;ERgbF;EQ9aA;IACE,UAAA;ERgbF;AACF;AQ7aA;EACE,gCAAA;AR+aF;;AQ5aA;EACE,iCAAA;AR+aF;;AS3cA;EACE;IACE,sDAAA;IACA,kCAAA;IACA,UAAA;ET8cF;ES5cA;IACE,uDAAA;IACA,kCAAA;ET8cF;ES5cA;IACE,sDAAA;IACA,UAAA;ET8cF;ES5cA;IACE,sDAAA;ET8cF;ES5cA;IACE,6BAAA;ET8cF;AACF;AS3cA;EACE;IACE,6BAAA;ET6cF;ES3cA;IACE,uDAAA;IACA,UAAA;ET6cF;ES3cA;IACE,sDAAA;IACA,UAAA;ET6cF;AACF;AS1cA;EACE,gCAAA;AT4cF;;ASzcA;EACE,iCAAA;AT4cF;;AUjfA;EACE;IACE,kCAAA;IACA,mBAAA;EVofF;EUlfA;IARA,+BAAA;EV6fA;AACF;AUjfA;EACE;IACE,mCAAA;IACA,mBAAA;EVmfF;EUjfA;IAlBA,+BAAA;EVsgBA;AACF;AUhfA;EACE;IACE,kCAAA;IACA,mBAAA;EVkfF;EUhfA;IA5BA,+BAAA;EV+gBA;AACF;AU/eA;EACE;IACE,mCAAA;IACA,mBAAA;EVifF;EU/eA;IAtCA,+BAAA;EVwhBA;AACF;AU9eA;EACE;IA5CA,+BAAA;EV6hBA;EU9eA;IACE,kBAAA;IACA,kCAAA;EVgfF;AACF;AU7eA;EACE;IAtDA,+BAAA;EVsiBA;EU7eA;IACE,kBAAA;IACA,mCAAA;EV+eF;AACF;AU5eA;EACE;IAhEA,+BAAA;EV+iBA;EU5eA;IACE,kBAAA;IACA,mCAAA;EV8eF;AACF;AU3eA;EACE;IA1EA,+BAAA;EVwjBA;EU3eA;IACE,kBAAA;IACA,oCAAA;EV6eF;AACF;AUzeE;EAEE,qCAAA;AV0eJ;AUxeE;EAEE,sCAAA;AVyeJ;AUveE;EACE,qCAAA;AVyeJ;AUveE;EACE,mCAAA;AVyeJ;;AUpeE;EAEE,sCAAA;AVseJ;AUpeE;EAEE,uCAAA;AVqeJ;AUneE;EACE,oCAAA;AVqeJ;AUneE;EACE,sCAAA;AVqeJ;;AWvlBA;EACE;IACE,uBAAA;EX0lBF;EWxlBA;IACE,yBAAA;EX0lBF;AACF;;AAYA,4CAA4C\",\"sourceRoot\":\"\"}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[8].oneOf[11].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[8].oneOf[11].use[2]!./node_modules/react-toastify/dist/ReactToastify.css\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[8].oneOf[13].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[8].oneOf[13].use[2]!./src/styles/globals.css":
/*!**************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[8].oneOf[13].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[8].oneOf[13].use[2]!./src/styles/globals.css ***!
  \**************************************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_next_dist_build_webpack_loaders_css_loader_src_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/api.js */ \"(pages-dir-browser)/./node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/api.js\");\n/* harmony import */ var _node_modules_next_dist_build_webpack_loaders_css_loader_src_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_next_dist_build_webpack_loaders_css_loader_src_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__);\n// Imports\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_next_dist_build_webpack_loaders_css_loader_src_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default()(true);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"*, ::before, ::after {\\r\\n  --tw-border-spacing-x: 0;\\r\\n  --tw-border-spacing-y: 0;\\r\\n  --tw-translate-x: 0;\\r\\n  --tw-translate-y: 0;\\r\\n  --tw-rotate: 0;\\r\\n  --tw-skew-x: 0;\\r\\n  --tw-skew-y: 0;\\r\\n  --tw-scale-x: 1;\\r\\n  --tw-scale-y: 1;\\r\\n  --tw-pan-x:  ;\\r\\n  --tw-pan-y:  ;\\r\\n  --tw-pinch-zoom:  ;\\r\\n  --tw-scroll-snap-strictness: proximity;\\r\\n  --tw-gradient-from-position:  ;\\r\\n  --tw-gradient-via-position:  ;\\r\\n  --tw-gradient-to-position:  ;\\r\\n  --tw-ordinal:  ;\\r\\n  --tw-slashed-zero:  ;\\r\\n  --tw-numeric-figure:  ;\\r\\n  --tw-numeric-spacing:  ;\\r\\n  --tw-numeric-fraction:  ;\\r\\n  --tw-ring-inset:  ;\\r\\n  --tw-ring-offset-width: 0px;\\r\\n  --tw-ring-offset-color: #fff;\\r\\n  --tw-ring-color: rgb(59 130 246 / 0.5);\\r\\n  --tw-ring-offset-shadow: 0 0 #0000;\\r\\n  --tw-ring-shadow: 0 0 #0000;\\r\\n  --tw-shadow: 0 0 #0000;\\r\\n  --tw-shadow-colored: 0 0 #0000;\\r\\n  --tw-blur:  ;\\r\\n  --tw-brightness:  ;\\r\\n  --tw-contrast:  ;\\r\\n  --tw-grayscale:  ;\\r\\n  --tw-hue-rotate:  ;\\r\\n  --tw-invert:  ;\\r\\n  --tw-saturate:  ;\\r\\n  --tw-sepia:  ;\\r\\n  --tw-drop-shadow:  ;\\r\\n  --tw-backdrop-blur:  ;\\r\\n  --tw-backdrop-brightness:  ;\\r\\n  --tw-backdrop-contrast:  ;\\r\\n  --tw-backdrop-grayscale:  ;\\r\\n  --tw-backdrop-hue-rotate:  ;\\r\\n  --tw-backdrop-invert:  ;\\r\\n  --tw-backdrop-opacity:  ;\\r\\n  --tw-backdrop-saturate:  ;\\r\\n  --tw-backdrop-sepia:  ;\\r\\n  --tw-contain-size:  ;\\r\\n  --tw-contain-layout:  ;\\r\\n  --tw-contain-paint:  ;\\r\\n  --tw-contain-style:  ;\\r\\n}\\r\\n\\r\\n::backdrop {\\r\\n  --tw-border-spacing-x: 0;\\r\\n  --tw-border-spacing-y: 0;\\r\\n  --tw-translate-x: 0;\\r\\n  --tw-translate-y: 0;\\r\\n  --tw-rotate: 0;\\r\\n  --tw-skew-x: 0;\\r\\n  --tw-skew-y: 0;\\r\\n  --tw-scale-x: 1;\\r\\n  --tw-scale-y: 1;\\r\\n  --tw-pan-x:  ;\\r\\n  --tw-pan-y:  ;\\r\\n  --tw-pinch-zoom:  ;\\r\\n  --tw-scroll-snap-strictness: proximity;\\r\\n  --tw-gradient-from-position:  ;\\r\\n  --tw-gradient-via-position:  ;\\r\\n  --tw-gradient-to-position:  ;\\r\\n  --tw-ordinal:  ;\\r\\n  --tw-slashed-zero:  ;\\r\\n  --tw-numeric-figure:  ;\\r\\n  --tw-numeric-spacing:  ;\\r\\n  --tw-numeric-fraction:  ;\\r\\n  --tw-ring-inset:  ;\\r\\n  --tw-ring-offset-width: 0px;\\r\\n  --tw-ring-offset-color: #fff;\\r\\n  --tw-ring-color: rgb(59 130 246 / 0.5);\\r\\n  --tw-ring-offset-shadow: 0 0 #0000;\\r\\n  --tw-ring-shadow: 0 0 #0000;\\r\\n  --tw-shadow: 0 0 #0000;\\r\\n  --tw-shadow-colored: 0 0 #0000;\\r\\n  --tw-blur:  ;\\r\\n  --tw-brightness:  ;\\r\\n  --tw-contrast:  ;\\r\\n  --tw-grayscale:  ;\\r\\n  --tw-hue-rotate:  ;\\r\\n  --tw-invert:  ;\\r\\n  --tw-saturate:  ;\\r\\n  --tw-sepia:  ;\\r\\n  --tw-drop-shadow:  ;\\r\\n  --tw-backdrop-blur:  ;\\r\\n  --tw-backdrop-brightness:  ;\\r\\n  --tw-backdrop-contrast:  ;\\r\\n  --tw-backdrop-grayscale:  ;\\r\\n  --tw-backdrop-hue-rotate:  ;\\r\\n  --tw-backdrop-invert:  ;\\r\\n  --tw-backdrop-opacity:  ;\\r\\n  --tw-backdrop-saturate:  ;\\r\\n  --tw-backdrop-sepia:  ;\\r\\n  --tw-contain-size:  ;\\r\\n  --tw-contain-layout:  ;\\r\\n  --tw-contain-paint:  ;\\r\\n  --tw-contain-style:  ;\\r\\n}/*\\r\\n! tailwindcss v3.4.17 | MIT License | https://tailwindcss.com\\r\\n*//*\\r\\n1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)\\r\\n2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)\\r\\n*/\\r\\n\\r\\n*,\\r\\n::before,\\r\\n::after {\\r\\n  box-sizing: border-box; /* 1 */\\r\\n  border-width: 0; /* 2 */\\r\\n  border-style: solid; /* 2 */\\r\\n  border-color: #e5e7eb; /* 2 */\\r\\n}\\r\\n\\r\\n::before,\\r\\n::after {\\r\\n  --tw-content: '';\\r\\n}\\r\\n\\r\\n/*\\r\\n1. Use a consistent sensible line-height in all browsers.\\r\\n2. Prevent adjustments of font size after orientation changes in iOS.\\r\\n3. Use a more readable tab size.\\r\\n4. Use the user's configured `sans` font-family by default.\\r\\n5. Use the user's configured `sans` font-feature-settings by default.\\r\\n6. Use the user's configured `sans` font-variation-settings by default.\\r\\n7. Disable tap highlights on iOS\\r\\n*/\\r\\n\\r\\nhtml,\\r\\n:host {\\r\\n  line-height: 1.5; /* 1 */\\r\\n  -webkit-text-size-adjust: 100%; /* 2 */\\r\\n  -moz-tab-size: 4; /* 3 */\\r\\n  -o-tab-size: 4;\\r\\n     tab-size: 4; /* 3 */\\r\\n  font-family: ui-sans-serif, system-ui, sans-serif, \\\"Apple Color Emoji\\\", \\\"Segoe UI Emoji\\\", \\\"Segoe UI Symbol\\\", \\\"Noto Color Emoji\\\"; /* 4 */\\r\\n  font-feature-settings: normal; /* 5 */\\r\\n  font-variation-settings: normal; /* 6 */\\r\\n  -webkit-tap-highlight-color: transparent; /* 7 */\\r\\n}\\r\\n\\r\\n/*\\r\\n1. Remove the margin in all browsers.\\r\\n2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.\\r\\n*/\\r\\n\\r\\nbody {\\r\\n  margin: 0; /* 1 */\\r\\n  line-height: inherit; /* 2 */\\r\\n}\\r\\n\\r\\n/*\\r\\n1. Add the correct height in Firefox.\\r\\n2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)\\r\\n3. Ensure horizontal rules are visible by default.\\r\\n*/\\r\\n\\r\\nhr {\\r\\n  height: 0; /* 1 */\\r\\n  color: inherit; /* 2 */\\r\\n  border-top-width: 1px; /* 3 */\\r\\n}\\r\\n\\r\\n/*\\r\\nAdd the correct text decoration in Chrome, Edge, and Safari.\\r\\n*/\\r\\n\\r\\nabbr:where([title]) {\\r\\n  -webkit-text-decoration: underline dotted;\\r\\n          text-decoration: underline dotted;\\r\\n}\\r\\n\\r\\n/*\\r\\nRemove the default font size and weight for headings.\\r\\n*/\\r\\n\\r\\nh1,\\r\\nh2,\\r\\nh3,\\r\\nh4,\\r\\nh5,\\r\\nh6 {\\r\\n  font-size: inherit;\\r\\n  font-weight: inherit;\\r\\n}\\r\\n\\r\\n/*\\r\\nReset links to optimize for opt-in styling instead of opt-out.\\r\\n*/\\r\\n\\r\\na {\\r\\n  color: inherit;\\r\\n  text-decoration: inherit;\\r\\n}\\r\\n\\r\\n/*\\r\\nAdd the correct font weight in Edge and Safari.\\r\\n*/\\r\\n\\r\\nb,\\r\\nstrong {\\r\\n  font-weight: bolder;\\r\\n}\\r\\n\\r\\n/*\\r\\n1. Use the user's configured `mono` font-family by default.\\r\\n2. Use the user's configured `mono` font-feature-settings by default.\\r\\n3. Use the user's configured `mono` font-variation-settings by default.\\r\\n4. Correct the odd `em` font sizing in all browsers.\\r\\n*/\\r\\n\\r\\ncode,\\r\\nkbd,\\r\\nsamp,\\r\\npre {\\r\\n  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \\\"Liberation Mono\\\", \\\"Courier New\\\", monospace; /* 1 */\\r\\n  font-feature-settings: normal; /* 2 */\\r\\n  font-variation-settings: normal; /* 3 */\\r\\n  font-size: 1em; /* 4 */\\r\\n}\\r\\n\\r\\n/*\\r\\nAdd the correct font size in all browsers.\\r\\n*/\\r\\n\\r\\nsmall {\\r\\n  font-size: 80%;\\r\\n}\\r\\n\\r\\n/*\\r\\nPrevent `sub` and `sup` elements from affecting the line height in all browsers.\\r\\n*/\\r\\n\\r\\nsub,\\r\\nsup {\\r\\n  font-size: 75%;\\r\\n  line-height: 0;\\r\\n  position: relative;\\r\\n  vertical-align: baseline;\\r\\n}\\r\\n\\r\\nsub {\\r\\n  bottom: -0.25em;\\r\\n}\\r\\n\\r\\nsup {\\r\\n  top: -0.5em;\\r\\n}\\r\\n\\r\\n/*\\r\\n1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)\\r\\n2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)\\r\\n3. Remove gaps between table borders by default.\\r\\n*/\\r\\n\\r\\ntable {\\r\\n  text-indent: 0; /* 1 */\\r\\n  border-color: inherit; /* 2 */\\r\\n  border-collapse: collapse; /* 3 */\\r\\n}\\r\\n\\r\\n/*\\r\\n1. Change the font styles in all browsers.\\r\\n2. Remove the margin in Firefox and Safari.\\r\\n3. Remove default padding in all browsers.\\r\\n*/\\r\\n\\r\\nbutton,\\r\\ninput,\\r\\noptgroup,\\r\\nselect,\\r\\ntextarea {\\r\\n  font-family: inherit; /* 1 */\\r\\n  font-feature-settings: inherit; /* 1 */\\r\\n  font-variation-settings: inherit; /* 1 */\\r\\n  font-size: 100%; /* 1 */\\r\\n  font-weight: inherit; /* 1 */\\r\\n  line-height: inherit; /* 1 */\\r\\n  letter-spacing: inherit; /* 1 */\\r\\n  color: inherit; /* 1 */\\r\\n  margin: 0; /* 2 */\\r\\n  padding: 0; /* 3 */\\r\\n}\\r\\n\\r\\n/*\\r\\nRemove the inheritance of text transform in Edge and Firefox.\\r\\n*/\\r\\n\\r\\nbutton,\\r\\nselect {\\r\\n  text-transform: none;\\r\\n}\\r\\n\\r\\n/*\\r\\n1. Correct the inability to style clickable types in iOS and Safari.\\r\\n2. Remove default button styles.\\r\\n*/\\r\\n\\r\\nbutton,\\r\\ninput:where([type='button']),\\r\\ninput:where([type='reset']),\\r\\ninput:where([type='submit']) {\\r\\n  -webkit-appearance: button; /* 1 */\\r\\n  background-color: transparent; /* 2 */\\r\\n  background-image: none; /* 2 */\\r\\n}\\r\\n\\r\\n/*\\r\\nUse the modern Firefox focus style for all focusable elements.\\r\\n*/\\r\\n\\r\\n:-moz-focusring {\\r\\n  outline: auto;\\r\\n}\\r\\n\\r\\n/*\\r\\nRemove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)\\r\\n*/\\r\\n\\r\\n:-moz-ui-invalid {\\r\\n  box-shadow: none;\\r\\n}\\r\\n\\r\\n/*\\r\\nAdd the correct vertical alignment in Chrome and Firefox.\\r\\n*/\\r\\n\\r\\nprogress {\\r\\n  vertical-align: baseline;\\r\\n}\\r\\n\\r\\n/*\\r\\nCorrect the cursor style of increment and decrement buttons in Safari.\\r\\n*/\\r\\n\\r\\n::-webkit-inner-spin-button,\\r\\n::-webkit-outer-spin-button {\\r\\n  height: auto;\\r\\n}\\r\\n\\r\\n/*\\r\\n1. Correct the odd appearance in Chrome and Safari.\\r\\n2. Correct the outline style in Safari.\\r\\n*/\\r\\n\\r\\n[type='search'] {\\r\\n  -webkit-appearance: textfield; /* 1 */\\r\\n  outline-offset: -2px; /* 2 */\\r\\n}\\r\\n\\r\\n/*\\r\\nRemove the inner padding in Chrome and Safari on macOS.\\r\\n*/\\r\\n\\r\\n::-webkit-search-decoration {\\r\\n  -webkit-appearance: none;\\r\\n}\\r\\n\\r\\n/*\\r\\n1. Correct the inability to style clickable types in iOS and Safari.\\r\\n2. Change font properties to `inherit` in Safari.\\r\\n*/\\r\\n\\r\\n::-webkit-file-upload-button {\\r\\n  -webkit-appearance: button; /* 1 */\\r\\n  font: inherit; /* 2 */\\r\\n}\\r\\n\\r\\n/*\\r\\nAdd the correct display in Chrome and Safari.\\r\\n*/\\r\\n\\r\\nsummary {\\r\\n  display: list-item;\\r\\n}\\r\\n\\r\\n/*\\r\\nRemoves the default spacing and border for appropriate elements.\\r\\n*/\\r\\n\\r\\nblockquote,\\r\\ndl,\\r\\ndd,\\r\\nh1,\\r\\nh2,\\r\\nh3,\\r\\nh4,\\r\\nh5,\\r\\nh6,\\r\\nhr,\\r\\nfigure,\\r\\np,\\r\\npre {\\r\\n  margin: 0;\\r\\n}\\r\\n\\r\\nfieldset {\\r\\n  margin: 0;\\r\\n  padding: 0;\\r\\n}\\r\\n\\r\\nlegend {\\r\\n  padding: 0;\\r\\n}\\r\\n\\r\\nol,\\r\\nul,\\r\\nmenu {\\r\\n  list-style: none;\\r\\n  margin: 0;\\r\\n  padding: 0;\\r\\n}\\r\\n\\r\\n/*\\r\\nReset default styling for dialogs.\\r\\n*/\\r\\ndialog {\\r\\n  padding: 0;\\r\\n}\\r\\n\\r\\n/*\\r\\nPrevent resizing textareas horizontally by default.\\r\\n*/\\r\\n\\r\\ntextarea {\\r\\n  resize: vertical;\\r\\n}\\r\\n\\r\\n/*\\r\\n1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)\\r\\n2. Set the default placeholder color to the user's configured gray 400 color.\\r\\n*/\\r\\n\\r\\ninput::-moz-placeholder, textarea::-moz-placeholder {\\r\\n  opacity: 1; /* 1 */\\r\\n  color: #9ca3af; /* 2 */\\r\\n}\\r\\n\\r\\ninput::placeholder,\\r\\ntextarea::placeholder {\\r\\n  opacity: 1; /* 1 */\\r\\n  color: #9ca3af; /* 2 */\\r\\n}\\r\\n\\r\\n/*\\r\\nSet the default cursor for buttons.\\r\\n*/\\r\\n\\r\\nbutton,\\r\\n[role=\\\"button\\\"] {\\r\\n  cursor: pointer;\\r\\n}\\r\\n\\r\\n/*\\r\\nMake sure disabled buttons don't get the pointer cursor.\\r\\n*/\\r\\n:disabled {\\r\\n  cursor: default;\\r\\n}\\r\\n\\r\\n/*\\r\\n1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)\\r\\n2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)\\r\\n   This can trigger a poorly considered lint error in some tools but is included by design.\\r\\n*/\\r\\n\\r\\nimg,\\r\\nsvg,\\r\\nvideo,\\r\\ncanvas,\\r\\naudio,\\r\\niframe,\\r\\nembed,\\r\\nobject {\\r\\n  display: block; /* 1 */\\r\\n  vertical-align: middle; /* 2 */\\r\\n}\\r\\n\\r\\n/*\\r\\nConstrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)\\r\\n*/\\r\\n\\r\\nimg,\\r\\nvideo {\\r\\n  max-width: 100%;\\r\\n  height: auto;\\r\\n}\\r\\n\\r\\n/* Make elements with the HTML hidden attribute stay hidden by default */\\r\\n[hidden]:where(:not([hidden=\\\"until-found\\\"])) {\\r\\n  display: none;\\r\\n}\\r\\n.container {\\r\\n  width: 100%;\\r\\n}\\r\\n@media (min-width: 640px) {\\r\\n\\r\\n  .container {\\r\\n    max-width: 640px;\\r\\n  }\\r\\n}\\r\\n@media (min-width: 768px) {\\r\\n\\r\\n  .container {\\r\\n    max-width: 768px;\\r\\n  }\\r\\n}\\r\\n@media (min-width: 1024px) {\\r\\n\\r\\n  .container {\\r\\n    max-width: 1024px;\\r\\n  }\\r\\n}\\r\\n@media (min-width: 1280px) {\\r\\n\\r\\n  .container {\\r\\n    max-width: 1280px;\\r\\n  }\\r\\n}\\r\\n@media (min-width: 1536px) {\\r\\n\\r\\n  .container {\\r\\n    max-width: 1536px;\\r\\n  }\\r\\n}\\r\\n.fixed {\\r\\n  position: fixed;\\r\\n}\\r\\n.absolute {\\r\\n  position: absolute;\\r\\n}\\r\\n.relative {\\r\\n  position: relative;\\r\\n}\\r\\n.sticky {\\r\\n  position: sticky;\\r\\n}\\r\\n.inset-0 {\\r\\n  inset: 0px;\\r\\n}\\r\\n.right-2 {\\r\\n  right: 0.5rem;\\r\\n}\\r\\n.right-4 {\\r\\n  right: 1rem;\\r\\n}\\r\\n.top-0 {\\r\\n  top: 0px;\\r\\n}\\r\\n.top-1\\\\/2 {\\r\\n  top: 50%;\\r\\n}\\r\\n.top-4 {\\r\\n  top: 1rem;\\r\\n}\\r\\n.z-50 {\\r\\n  z-index: 50;\\r\\n}\\r\\n.mx-auto {\\r\\n  margin-left: auto;\\r\\n  margin-right: auto;\\r\\n}\\r\\n.mb-1 {\\r\\n  margin-bottom: 0.25rem;\\r\\n}\\r\\n.mb-2 {\\r\\n  margin-bottom: 0.5rem;\\r\\n}\\r\\n.mb-4 {\\r\\n  margin-bottom: 1rem;\\r\\n}\\r\\n.mb-6 {\\r\\n  margin-bottom: 1.5rem;\\r\\n}\\r\\n.mt-1 {\\r\\n  margin-top: 0.25rem;\\r\\n}\\r\\n.mt-2 {\\r\\n  margin-top: 0.5rem;\\r\\n}\\r\\n.mt-3 {\\r\\n  margin-top: 0.75rem;\\r\\n}\\r\\n.flex {\\r\\n  display: flex;\\r\\n}\\r\\n.inline-flex {\\r\\n  display: inline-flex;\\r\\n}\\r\\n.grid {\\r\\n  display: grid;\\r\\n}\\r\\n.hidden {\\r\\n  display: none;\\r\\n}\\r\\n.h-10 {\\r\\n  height: 2.5rem;\\r\\n}\\r\\n.h-11 {\\r\\n  height: 2.75rem;\\r\\n}\\r\\n.h-12 {\\r\\n  height: 3rem;\\r\\n}\\r\\n.h-16 {\\r\\n  height: 4rem;\\r\\n}\\r\\n.h-4 {\\r\\n  height: 1rem;\\r\\n}\\r\\n.h-6 {\\r\\n  height: 1.5rem;\\r\\n}\\r\\n.h-8 {\\r\\n  height: 2rem;\\r\\n}\\r\\n.h-80 {\\r\\n  height: 20rem;\\r\\n}\\r\\n.h-9 {\\r\\n  height: 2.25rem;\\r\\n}\\r\\n.h-full {\\r\\n  height: 100%;\\r\\n}\\r\\n.min-h-screen {\\r\\n  min-height: 100vh;\\r\\n}\\r\\n.w-10 {\\r\\n  width: 2.5rem;\\r\\n}\\r\\n.w-12 {\\r\\n  width: 3rem;\\r\\n}\\r\\n.w-16 {\\r\\n  width: 4rem;\\r\\n}\\r\\n.w-4 {\\r\\n  width: 1rem;\\r\\n}\\r\\n.w-6 {\\r\\n  width: 1.5rem;\\r\\n}\\r\\n.w-8 {\\r\\n  width: 2rem;\\r\\n}\\r\\n.w-80 {\\r\\n  width: 20rem;\\r\\n}\\r\\n.w-full {\\r\\n  width: 100%;\\r\\n}\\r\\n.max-w-2xl {\\r\\n  max-width: 42rem;\\r\\n}\\r\\n.max-w-md {\\r\\n  max-width: 28rem;\\r\\n}\\r\\n.flex-1 {\\r\\n  flex: 1 1 0%;\\r\\n}\\r\\n.-translate-y-1\\\\/2 {\\r\\n  --tw-translate-y: -50%;\\r\\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\r\\n}\\r\\n.translate-x-0 {\\r\\n  --tw-translate-x: 0px;\\r\\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\r\\n}\\r\\n.translate-x-full {\\r\\n  --tw-translate-x: 100%;\\r\\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\r\\n}\\r\\n.transform {\\r\\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\\r\\n}\\r\\n@keyframes spin {\\r\\n\\r\\n  to {\\r\\n    transform: rotate(360deg);\\r\\n  }\\r\\n}\\r\\n.animate-spin {\\r\\n  animation: spin 1s linear infinite;\\r\\n}\\r\\n.cursor-not-allowed {\\r\\n  cursor: not-allowed;\\r\\n}\\r\\n.grid-cols-1 {\\r\\n  grid-template-columns: repeat(1, minmax(0, 1fr));\\r\\n}\\r\\n.grid-cols-2 {\\r\\n  grid-template-columns: repeat(2, minmax(0, 1fr));\\r\\n}\\r\\n.grid-cols-3 {\\r\\n  grid-template-columns: repeat(3, minmax(0, 1fr));\\r\\n}\\r\\n.flex-col {\\r\\n  flex-direction: column;\\r\\n}\\r\\n.items-start {\\r\\n  align-items: flex-start;\\r\\n}\\r\\n.items-center {\\r\\n  align-items: center;\\r\\n}\\r\\n.justify-center {\\r\\n  justify-content: center;\\r\\n}\\r\\n.justify-between {\\r\\n  justify-content: space-between;\\r\\n}\\r\\n.gap-2 {\\r\\n  gap: 0.5rem;\\r\\n}\\r\\n.gap-4 {\\r\\n  gap: 1rem;\\r\\n}\\r\\n.gap-6 {\\r\\n  gap: 1.5rem;\\r\\n}\\r\\n.space-x-2 > :not([hidden]) ~ :not([hidden]) {\\r\\n  --tw-space-x-reverse: 0;\\r\\n  margin-right: calc(0.5rem * var(--tw-space-x-reverse));\\r\\n  margin-left: calc(0.5rem * calc(1 - var(--tw-space-x-reverse)));\\r\\n}\\r\\n.space-x-3 > :not([hidden]) ~ :not([hidden]) {\\r\\n  --tw-space-x-reverse: 0;\\r\\n  margin-right: calc(0.75rem * var(--tw-space-x-reverse));\\r\\n  margin-left: calc(0.75rem * calc(1 - var(--tw-space-x-reverse)));\\r\\n}\\r\\n.space-x-4 > :not([hidden]) ~ :not([hidden]) {\\r\\n  --tw-space-x-reverse: 0;\\r\\n  margin-right: calc(1rem * var(--tw-space-x-reverse));\\r\\n  margin-left: calc(1rem * calc(1 - var(--tw-space-x-reverse)));\\r\\n}\\r\\n.space-y-1 > :not([hidden]) ~ :not([hidden]) {\\r\\n  --tw-space-y-reverse: 0;\\r\\n  margin-top: calc(0.25rem * calc(1 - var(--tw-space-y-reverse)));\\r\\n  margin-bottom: calc(0.25rem * var(--tw-space-y-reverse));\\r\\n}\\r\\n.space-y-1\\\\.5 > :not([hidden]) ~ :not([hidden]) {\\r\\n  --tw-space-y-reverse: 0;\\r\\n  margin-top: calc(0.375rem * calc(1 - var(--tw-space-y-reverse)));\\r\\n  margin-bottom: calc(0.375rem * var(--tw-space-y-reverse));\\r\\n}\\r\\n.space-y-2 > :not([hidden]) ~ :not([hidden]) {\\r\\n  --tw-space-y-reverse: 0;\\r\\n  margin-top: calc(0.5rem * calc(1 - var(--tw-space-y-reverse)));\\r\\n  margin-bottom: calc(0.5rem * var(--tw-space-y-reverse));\\r\\n}\\r\\n.space-y-3 > :not([hidden]) ~ :not([hidden]) {\\r\\n  --tw-space-y-reverse: 0;\\r\\n  margin-top: calc(0.75rem * calc(1 - var(--tw-space-y-reverse)));\\r\\n  margin-bottom: calc(0.75rem * var(--tw-space-y-reverse));\\r\\n}\\r\\n.space-y-6 > :not([hidden]) ~ :not([hidden]) {\\r\\n  --tw-space-y-reverse: 0;\\r\\n  margin-top: calc(1.5rem * calc(1 - var(--tw-space-y-reverse)));\\r\\n  margin-bottom: calc(1.5rem * var(--tw-space-y-reverse));\\r\\n}\\r\\n.space-y-8 > :not([hidden]) ~ :not([hidden]) {\\r\\n  --tw-space-y-reverse: 0;\\r\\n  margin-top: calc(2rem * calc(1 - var(--tw-space-y-reverse)));\\r\\n  margin-bottom: calc(2rem * var(--tw-space-y-reverse));\\r\\n}\\r\\n.overflow-hidden {\\r\\n  overflow: hidden;\\r\\n}\\r\\n.whitespace-nowrap {\\r\\n  white-space: nowrap;\\r\\n}\\r\\n.rounded-full {\\r\\n  border-radius: 9999px;\\r\\n}\\r\\n.rounded-lg {\\r\\n  border-radius: 0.5rem;\\r\\n}\\r\\n.rounded-md {\\r\\n  border-radius: 0.375rem;\\r\\n}\\r\\n.rounded-xl {\\r\\n  border-radius: 0.75rem;\\r\\n}\\r\\n.border {\\r\\n  border-width: 1px;\\r\\n}\\r\\n.border-0 {\\r\\n  border-width: 0px;\\r\\n}\\r\\n.border-2 {\\r\\n  border-width: 2px;\\r\\n}\\r\\n.border-4 {\\r\\n  border-width: 4px;\\r\\n}\\r\\n.border-b {\\r\\n  border-bottom-width: 1px;\\r\\n}\\r\\n.border-l-4 {\\r\\n  border-left-width: 4px;\\r\\n}\\r\\n.border-blue-200 {\\r\\n  --tw-border-opacity: 1;\\r\\n  border-color: rgb(191 219 254 / var(--tw-border-opacity, 1));\\r\\n}\\r\\n.border-blue-500 {\\r\\n  --tw-border-opacity: 1;\\r\\n  border-color: rgb(59 130 246 / var(--tw-border-opacity, 1));\\r\\n}\\r\\n.border-current {\\r\\n  border-color: currentColor;\\r\\n}\\r\\n.border-gray-200 {\\r\\n  --tw-border-opacity: 1;\\r\\n  border-color: rgb(229 231 235 / var(--tw-border-opacity, 1));\\r\\n}\\r\\n.border-gray-300 {\\r\\n  --tw-border-opacity: 1;\\r\\n  border-color: rgb(209 213 219 / var(--tw-border-opacity, 1));\\r\\n}\\r\\n.border-green-200 {\\r\\n  --tw-border-opacity: 1;\\r\\n  border-color: rgb(187 247 208 / var(--tw-border-opacity, 1));\\r\\n}\\r\\n.border-green-500 {\\r\\n  --tw-border-opacity: 1;\\r\\n  border-color: rgb(34 197 94 / var(--tw-border-opacity, 1));\\r\\n}\\r\\n.border-indigo-200 {\\r\\n  --tw-border-opacity: 1;\\r\\n  border-color: rgb(199 210 254 / var(--tw-border-opacity, 1));\\r\\n}\\r\\n.border-red-200 {\\r\\n  --tw-border-opacity: 1;\\r\\n  border-color: rgb(254 202 202 / var(--tw-border-opacity, 1));\\r\\n}\\r\\n.border-red-500 {\\r\\n  --tw-border-opacity: 1;\\r\\n  border-color: rgb(239 68 68 / var(--tw-border-opacity, 1));\\r\\n}\\r\\n.border-white {\\r\\n  --tw-border-opacity: 1;\\r\\n  border-color: rgb(255 255 255 / var(--tw-border-opacity, 1));\\r\\n}\\r\\n.border-yellow-200 {\\r\\n  --tw-border-opacity: 1;\\r\\n  border-color: rgb(254 240 138 / var(--tw-border-opacity, 1));\\r\\n}\\r\\n.border-t-transparent {\\r\\n  border-top-color: transparent;\\r\\n}\\r\\n.bg-background {\\r\\n  background-color: var(--background);\\r\\n}\\r\\n.bg-black\\\\/50 {\\r\\n  background-color: rgb(0 0 0 / 0.5);\\r\\n}\\r\\n.bg-blue-50 {\\r\\n  --tw-bg-opacity: 1;\\r\\n  background-color: rgb(239 246 255 / var(--tw-bg-opacity, 1));\\r\\n}\\r\\n.bg-gray-300 {\\r\\n  --tw-bg-opacity: 1;\\r\\n  background-color: rgb(209 213 219 / var(--tw-bg-opacity, 1));\\r\\n}\\r\\n.bg-gray-400 {\\r\\n  --tw-bg-opacity: 1;\\r\\n  background-color: rgb(156 163 175 / var(--tw-bg-opacity, 1));\\r\\n}\\r\\n.bg-gray-50 {\\r\\n  --tw-bg-opacity: 1;\\r\\n  background-color: rgb(249 250 251 / var(--tw-bg-opacity, 1));\\r\\n}\\r\\n.bg-green-50 {\\r\\n  --tw-bg-opacity: 1;\\r\\n  background-color: rgb(240 253 244 / var(--tw-bg-opacity, 1));\\r\\n}\\r\\n.bg-green-500 {\\r\\n  --tw-bg-opacity: 1;\\r\\n  background-color: rgb(34 197 94 / var(--tw-bg-opacity, 1));\\r\\n}\\r\\n.bg-purple-50 {\\r\\n  --tw-bg-opacity: 1;\\r\\n  background-color: rgb(250 245 255 / var(--tw-bg-opacity, 1));\\r\\n}\\r\\n.bg-red-50 {\\r\\n  --tw-bg-opacity: 1;\\r\\n  background-color: rgb(254 242 242 / var(--tw-bg-opacity, 1));\\r\\n}\\r\\n.bg-red-500 {\\r\\n  --tw-bg-opacity: 1;\\r\\n  background-color: rgb(239 68 68 / var(--tw-bg-opacity, 1));\\r\\n}\\r\\n.bg-white {\\r\\n  --tw-bg-opacity: 1;\\r\\n  background-color: rgb(255 255 255 / var(--tw-bg-opacity, 1));\\r\\n}\\r\\n.bg-white\\\\/50 {\\r\\n  background-color: rgb(255 255 255 / 0.5);\\r\\n}\\r\\n.bg-white\\\\/80 {\\r\\n  background-color: rgb(255 255 255 / 0.8);\\r\\n}\\r\\n.bg-yellow-50 {\\r\\n  --tw-bg-opacity: 1;\\r\\n  background-color: rgb(254 252 232 / var(--tw-bg-opacity, 1));\\r\\n}\\r\\n.bg-gradient-to-br {\\r\\n  background-image: linear-gradient(to bottom right, var(--tw-gradient-stops));\\r\\n}\\r\\n.bg-gradient-to-r {\\r\\n  background-image: linear-gradient(to right, var(--tw-gradient-stops));\\r\\n}\\r\\n.from-blue-50 {\\r\\n  --tw-gradient-from: #eff6ff var(--tw-gradient-from-position);\\r\\n  --tw-gradient-to: rgb(239 246 255 / 0) var(--tw-gradient-to-position);\\r\\n  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);\\r\\n}\\r\\n.from-blue-500 {\\r\\n  --tw-gradient-from: #3b82f6 var(--tw-gradient-from-position);\\r\\n  --tw-gradient-to: rgb(59 130 246 / 0) var(--tw-gradient-to-position);\\r\\n  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);\\r\\n}\\r\\n.from-blue-600 {\\r\\n  --tw-gradient-from: #2563eb var(--tw-gradient-from-position);\\r\\n  --tw-gradient-to: rgb(37 99 235 / 0) var(--tw-gradient-to-position);\\r\\n  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);\\r\\n}\\r\\n.from-green-50 {\\r\\n  --tw-gradient-from: #f0fdf4 var(--tw-gradient-from-position);\\r\\n  --tw-gradient-to: rgb(240 253 244 / 0) var(--tw-gradient-to-position);\\r\\n  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);\\r\\n}\\r\\n.from-green-500 {\\r\\n  --tw-gradient-from: #22c55e var(--tw-gradient-from-position);\\r\\n  --tw-gradient-to: rgb(34 197 94 / 0) var(--tw-gradient-to-position);\\r\\n  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);\\r\\n}\\r\\n.from-indigo-50 {\\r\\n  --tw-gradient-from: #eef2ff var(--tw-gradient-from-position);\\r\\n  --tw-gradient-to: rgb(238 242 255 / 0) var(--tw-gradient-to-position);\\r\\n  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);\\r\\n}\\r\\n.from-purple-500 {\\r\\n  --tw-gradient-from: #a855f7 var(--tw-gradient-from-position);\\r\\n  --tw-gradient-to: rgb(168 85 247 / 0) var(--tw-gradient-to-position);\\r\\n  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);\\r\\n}\\r\\n.from-red-50 {\\r\\n  --tw-gradient-from: #fef2f2 var(--tw-gradient-from-position);\\r\\n  --tw-gradient-to: rgb(254 242 242 / 0) var(--tw-gradient-to-position);\\r\\n  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);\\r\\n}\\r\\n.from-red-500 {\\r\\n  --tw-gradient-from: #ef4444 var(--tw-gradient-from-position);\\r\\n  --tw-gradient-to: rgb(239 68 68 / 0) var(--tw-gradient-to-position);\\r\\n  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);\\r\\n}\\r\\n.from-yellow-500 {\\r\\n  --tw-gradient-from: #eab308 var(--tw-gradient-from-position);\\r\\n  --tw-gradient-to: rgb(234 179 8 / 0) var(--tw-gradient-to-position);\\r\\n  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);\\r\\n}\\r\\n.via-white {\\r\\n  --tw-gradient-to: rgb(255 255 255 / 0)  var(--tw-gradient-to-position);\\r\\n  --tw-gradient-stops: var(--tw-gradient-from), #fff var(--tw-gradient-via-position), var(--tw-gradient-to);\\r\\n}\\r\\n.to-blue-600 {\\r\\n  --tw-gradient-to: #2563eb var(--tw-gradient-to-position);\\r\\n}\\r\\n.to-cyan-500 {\\r\\n  --tw-gradient-to: #06b6d4 var(--tw-gradient-to-position);\\r\\n}\\r\\n.to-emerald-50 {\\r\\n  --tw-gradient-to: #ecfdf5 var(--tw-gradient-to-position);\\r\\n}\\r\\n.to-green-600 {\\r\\n  --tw-gradient-to: #16a34a var(--tw-gradient-to-position);\\r\\n}\\r\\n.to-orange-50 {\\r\\n  --tw-gradient-to: #fff7ed var(--tw-gradient-to-position);\\r\\n}\\r\\n.to-orange-500 {\\r\\n  --tw-gradient-to: #f97316 var(--tw-gradient-to-position);\\r\\n}\\r\\n.to-pink-500 {\\r\\n  --tw-gradient-to: #ec4899 var(--tw-gradient-to-position);\\r\\n}\\r\\n.to-purple-50 {\\r\\n  --tw-gradient-to: #faf5ff var(--tw-gradient-to-position);\\r\\n}\\r\\n.to-purple-600 {\\r\\n  --tw-gradient-to: #9333ea var(--tw-gradient-to-position);\\r\\n}\\r\\n.to-red-600 {\\r\\n  --tw-gradient-to: #dc2626 var(--tw-gradient-to-position);\\r\\n}\\r\\n.to-rose-50 {\\r\\n  --tw-gradient-to: #fff1f2 var(--tw-gradient-to-position);\\r\\n}\\r\\n.bg-clip-text {\\r\\n  -webkit-background-clip: text;\\r\\n          background-clip: text;\\r\\n}\\r\\n.p-3 {\\r\\n  padding: 0.75rem;\\r\\n}\\r\\n.p-4 {\\r\\n  padding: 1rem;\\r\\n}\\r\\n.p-6 {\\r\\n  padding: 1.5rem;\\r\\n}\\r\\n.px-3 {\\r\\n  padding-left: 0.75rem;\\r\\n  padding-right: 0.75rem;\\r\\n}\\r\\n.px-4 {\\r\\n  padding-left: 1rem;\\r\\n  padding-right: 1rem;\\r\\n}\\r\\n.px-8 {\\r\\n  padding-left: 2rem;\\r\\n  padding-right: 2rem;\\r\\n}\\r\\n.py-12 {\\r\\n  padding-top: 3rem;\\r\\n  padding-bottom: 3rem;\\r\\n}\\r\\n.py-2 {\\r\\n  padding-top: 0.5rem;\\r\\n  padding-bottom: 0.5rem;\\r\\n}\\r\\n.py-4 {\\r\\n  padding-top: 1rem;\\r\\n  padding-bottom: 1rem;\\r\\n}\\r\\n.py-8 {\\r\\n  padding-top: 2rem;\\r\\n  padding-bottom: 2rem;\\r\\n}\\r\\n.pb-3 {\\r\\n  padding-bottom: 0.75rem;\\r\\n}\\r\\n.pb-4 {\\r\\n  padding-bottom: 1rem;\\r\\n}\\r\\n.pr-20 {\\r\\n  padding-right: 5rem;\\r\\n}\\r\\n.pt-0 {\\r\\n  padding-top: 0px;\\r\\n}\\r\\n.text-center {\\r\\n  text-align: center;\\r\\n}\\r\\n.text-right {\\r\\n  text-align: right;\\r\\n}\\r\\n.font-mono {\\r\\n  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \\\"Liberation Mono\\\", \\\"Courier New\\\", monospace;\\r\\n}\\r\\n.text-2xl {\\r\\n  font-size: 1.5rem;\\r\\n  line-height: 2rem;\\r\\n}\\r\\n.text-3xl {\\r\\n  font-size: 1.875rem;\\r\\n  line-height: 2.25rem;\\r\\n}\\r\\n.text-4xl {\\r\\n  font-size: 2.25rem;\\r\\n  line-height: 2.5rem;\\r\\n}\\r\\n.text-lg {\\r\\n  font-size: 1.125rem;\\r\\n  line-height: 1.75rem;\\r\\n}\\r\\n.text-sm {\\r\\n  font-size: 0.875rem;\\r\\n  line-height: 1.25rem;\\r\\n}\\r\\n.text-xl {\\r\\n  font-size: 1.25rem;\\r\\n  line-height: 1.75rem;\\r\\n}\\r\\n.text-xs {\\r\\n  font-size: 0.75rem;\\r\\n  line-height: 1rem;\\r\\n}\\r\\n.font-bold {\\r\\n  font-weight: 700;\\r\\n}\\r\\n.font-medium {\\r\\n  font-weight: 500;\\r\\n}\\r\\n.font-semibold {\\r\\n  font-weight: 600;\\r\\n}\\r\\n.leading-none {\\r\\n  line-height: 1;\\r\\n}\\r\\n.tracking-tight {\\r\\n  letter-spacing: -0.025em;\\r\\n}\\r\\n.text-black {\\r\\n  --tw-text-opacity: 1;\\r\\n  color: rgb(0 0 0 / var(--tw-text-opacity, 1));\\r\\n}\\r\\n.text-blue-600 {\\r\\n  --tw-text-opacity: 1;\\r\\n  color: rgb(37 99 235 / var(--tw-text-opacity, 1));\\r\\n}\\r\\n.text-blue-600\\\\/70 {\\r\\n  color: rgb(37 99 235 / 0.7);\\r\\n}\\r\\n.text-blue-700 {\\r\\n  --tw-text-opacity: 1;\\r\\n  color: rgb(29 78 216 / var(--tw-text-opacity, 1));\\r\\n}\\r\\n.text-blue-800 {\\r\\n  --tw-text-opacity: 1;\\r\\n  color: rgb(30 64 175 / var(--tw-text-opacity, 1));\\r\\n}\\r\\n.text-gray-400 {\\r\\n  --tw-text-opacity: 1;\\r\\n  color: rgb(156 163 175 / var(--tw-text-opacity, 1));\\r\\n}\\r\\n.text-gray-500 {\\r\\n  --tw-text-opacity: 1;\\r\\n  color: rgb(107 114 128 / var(--tw-text-opacity, 1));\\r\\n}\\r\\n.text-gray-600 {\\r\\n  --tw-text-opacity: 1;\\r\\n  color: rgb(75 85 99 / var(--tw-text-opacity, 1));\\r\\n}\\r\\n.text-gray-600\\\\/70 {\\r\\n  color: rgb(75 85 99 / 0.7);\\r\\n}\\r\\n.text-gray-700 {\\r\\n  --tw-text-opacity: 1;\\r\\n  color: rgb(55 65 81 / var(--tw-text-opacity, 1));\\r\\n}\\r\\n.text-gray-800 {\\r\\n  --tw-text-opacity: 1;\\r\\n  color: rgb(31 41 55 / var(--tw-text-opacity, 1));\\r\\n}\\r\\n.text-gray-900 {\\r\\n  --tw-text-opacity: 1;\\r\\n  color: rgb(17 24 39 / var(--tw-text-opacity, 1));\\r\\n}\\r\\n.text-green-600 {\\r\\n  --tw-text-opacity: 1;\\r\\n  color: rgb(22 163 74 / var(--tw-text-opacity, 1));\\r\\n}\\r\\n.text-green-600\\\\/70 {\\r\\n  color: rgb(22 163 74 / 0.7);\\r\\n}\\r\\n.text-green-700 {\\r\\n  --tw-text-opacity: 1;\\r\\n  color: rgb(21 128 61 / var(--tw-text-opacity, 1));\\r\\n}\\r\\n.text-green-800 {\\r\\n  --tw-text-opacity: 1;\\r\\n  color: rgb(22 101 52 / var(--tw-text-opacity, 1));\\r\\n}\\r\\n.text-indigo-800 {\\r\\n  --tw-text-opacity: 1;\\r\\n  color: rgb(55 48 163 / var(--tw-text-opacity, 1));\\r\\n}\\r\\n.text-purple-600 {\\r\\n  --tw-text-opacity: 1;\\r\\n  color: rgb(147 51 234 / var(--tw-text-opacity, 1));\\r\\n}\\r\\n.text-purple-600\\\\/70 {\\r\\n  color: rgb(147 51 234 / 0.7);\\r\\n}\\r\\n.text-red-500 {\\r\\n  --tw-text-opacity: 1;\\r\\n  color: rgb(239 68 68 / var(--tw-text-opacity, 1));\\r\\n}\\r\\n.text-red-600 {\\r\\n  --tw-text-opacity: 1;\\r\\n  color: rgb(220 38 38 / var(--tw-text-opacity, 1));\\r\\n}\\r\\n.text-red-600\\\\/70 {\\r\\n  color: rgb(220 38 38 / 0.7);\\r\\n}\\r\\n.text-red-700 {\\r\\n  --tw-text-opacity: 1;\\r\\n  color: rgb(185 28 28 / var(--tw-text-opacity, 1));\\r\\n}\\r\\n.text-red-800 {\\r\\n  --tw-text-opacity: 1;\\r\\n  color: rgb(153 27 27 / var(--tw-text-opacity, 1));\\r\\n}\\r\\n.text-transparent {\\r\\n  color: transparent;\\r\\n}\\r\\n.text-white {\\r\\n  --tw-text-opacity: 1;\\r\\n  color: rgb(255 255 255 / var(--tw-text-opacity, 1));\\r\\n}\\r\\n.text-yellow-500 {\\r\\n  --tw-text-opacity: 1;\\r\\n  color: rgb(234 179 8 / var(--tw-text-opacity, 1));\\r\\n}\\r\\n.text-yellow-600 {\\r\\n  --tw-text-opacity: 1;\\r\\n  color: rgb(202 138 4 / var(--tw-text-opacity, 1));\\r\\n}\\r\\n.text-yellow-800 {\\r\\n  --tw-text-opacity: 1;\\r\\n  color: rgb(133 77 14 / var(--tw-text-opacity, 1));\\r\\n}\\r\\n.underline-offset-4 {\\r\\n  text-underline-offset: 4px;\\r\\n}\\r\\n.opacity-0 {\\r\\n  opacity: 0;\\r\\n}\\r\\n.opacity-100 {\\r\\n  opacity: 1;\\r\\n}\\r\\n.opacity-75 {\\r\\n  opacity: 0.75;\\r\\n}\\r\\n.shadow-2xl {\\r\\n  --tw-shadow: 0 25px 50px -12px rgb(0 0 0 / 0.25);\\r\\n  --tw-shadow-colored: 0 25px 50px -12px var(--tw-shadow-color);\\r\\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\\r\\n}\\r\\n.shadow-lg {\\r\\n  --tw-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);\\r\\n  --tw-shadow-colored: 0 10px 15px -3px var(--tw-shadow-color), 0 4px 6px -4px var(--tw-shadow-color);\\r\\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\\r\\n}\\r\\n.shadow-sm {\\r\\n  --tw-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05);\\r\\n  --tw-shadow-colored: 0 1px 2px 0 var(--tw-shadow-color);\\r\\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\\r\\n}\\r\\n.outline {\\r\\n  outline-style: solid;\\r\\n}\\r\\n.ring-offset-background {\\r\\n  --tw-ring-offset-color: var(--background);\\r\\n}\\r\\n.filter {\\r\\n  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);\\r\\n}\\r\\n.backdrop-blur-sm {\\r\\n  --tw-backdrop-blur: blur(4px);\\r\\n  backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);\\r\\n}\\r\\n.transition-all {\\r\\n  transition-property: all;\\r\\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\r\\n  transition-duration: 150ms;\\r\\n}\\r\\n.transition-colors {\\r\\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;\\r\\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\\r\\n  transition-duration: 150ms;\\r\\n}\\r\\n.duration-300 {\\r\\n  transition-duration: 300ms;\\r\\n}\\r\\n\\r\\n:root {\\r\\n  --foreground-rgb: 0, 0, 0;\\r\\n  --background-start-rgb: 214, 219, 220;\\r\\n  --background-end-rgb: 255, 255, 255;\\r\\n}\\r\\n\\r\\n@media (prefers-color-scheme: dark) {\\r\\n  :root {\\r\\n    --foreground-rgb: 255, 255, 255;\\r\\n    --background-start-rgb: 0, 0, 0;\\r\\n    --background-end-rgb: 0, 0, 0;\\r\\n  }\\r\\n}\\r\\n\\r\\nbody {\\r\\n  color: rgb(var(--foreground-rgb));\\r\\n  background: linear-gradient(\\r\\n      to bottom,\\r\\n      transparent,\\r\\n      rgb(var(--background-end-rgb))\\r\\n    )\\r\\n    rgb(var(--background-start-rgb));\\r\\n}\\r\\n\\r\\n.placeholder\\\\:text-gray-400::-moz-placeholder {\\r\\n  --tw-text-opacity: 1;\\r\\n  color: rgb(156 163 175 / var(--tw-text-opacity, 1));\\r\\n}\\r\\n\\r\\n.placeholder\\\\:text-gray-400::placeholder {\\r\\n  --tw-text-opacity: 1;\\r\\n  color: rgb(156 163 175 / var(--tw-text-opacity, 1));\\r\\n}\\r\\n\\r\\n.hover\\\\:border-blue-300:hover {\\r\\n  --tw-border-opacity: 1;\\r\\n  border-color: rgb(147 197 253 / var(--tw-border-opacity, 1));\\r\\n}\\r\\n\\r\\n.hover\\\\:bg-blue-50:hover {\\r\\n  --tw-bg-opacity: 1;\\r\\n  background-color: rgb(239 246 255 / var(--tw-bg-opacity, 1));\\r\\n}\\r\\n\\r\\n.hover\\\\:bg-green-50:hover {\\r\\n  --tw-bg-opacity: 1;\\r\\n  background-color: rgb(240 253 244 / var(--tw-bg-opacity, 1));\\r\\n}\\r\\n\\r\\n.hover\\\\:from-blue-600:hover {\\r\\n  --tw-gradient-from: #2563eb var(--tw-gradient-from-position);\\r\\n  --tw-gradient-to: rgb(37 99 235 / 0) var(--tw-gradient-to-position);\\r\\n  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);\\r\\n}\\r\\n\\r\\n.hover\\\\:from-green-600:hover {\\r\\n  --tw-gradient-from: #16a34a var(--tw-gradient-from-position);\\r\\n  --tw-gradient-to: rgb(22 163 74 / 0) var(--tw-gradient-to-position);\\r\\n  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);\\r\\n}\\r\\n\\r\\n.hover\\\\:from-purple-600:hover {\\r\\n  --tw-gradient-from: #9333ea var(--tw-gradient-from-position);\\r\\n  --tw-gradient-to: rgb(147 51 234 / 0) var(--tw-gradient-to-position);\\r\\n  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);\\r\\n}\\r\\n\\r\\n.hover\\\\:from-red-600:hover {\\r\\n  --tw-gradient-from: #dc2626 var(--tw-gradient-from-position);\\r\\n  --tw-gradient-to: rgb(220 38 38 / 0) var(--tw-gradient-to-position);\\r\\n  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);\\r\\n}\\r\\n\\r\\n.hover\\\\:to-blue-700:hover {\\r\\n  --tw-gradient-to: #1d4ed8 var(--tw-gradient-to-position);\\r\\n}\\r\\n\\r\\n.hover\\\\:to-green-700:hover {\\r\\n  --tw-gradient-to: #15803d var(--tw-gradient-to-position);\\r\\n}\\r\\n\\r\\n.hover\\\\:to-purple-700:hover {\\r\\n  --tw-gradient-to: #7e22ce var(--tw-gradient-to-position);\\r\\n}\\r\\n\\r\\n.hover\\\\:to-red-700:hover {\\r\\n  --tw-gradient-to: #b91c1c var(--tw-gradient-to-position);\\r\\n}\\r\\n\\r\\n.hover\\\\:text-gray-600:hover {\\r\\n  --tw-text-opacity: 1;\\r\\n  color: rgb(75 85 99 / var(--tw-text-opacity, 1));\\r\\n}\\r\\n\\r\\n.hover\\\\:underline:hover {\\r\\n  text-decoration-line: underline;\\r\\n}\\r\\n\\r\\n.hover\\\\:shadow-lg:hover {\\r\\n  --tw-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);\\r\\n  --tw-shadow-colored: 0 10px 15px -3px var(--tw-shadow-color), 0 4px 6px -4px var(--tw-shadow-color);\\r\\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\\r\\n}\\r\\n\\r\\n.hover\\\\:shadow-xl:hover {\\r\\n  --tw-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);\\r\\n  --tw-shadow-colored: 0 20px 25px -5px var(--tw-shadow-color), 0 8px 10px -6px var(--tw-shadow-color);\\r\\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\\r\\n}\\r\\n\\r\\n.focus\\\\:border-transparent:focus {\\r\\n  border-color: transparent;\\r\\n}\\r\\n\\r\\n.focus\\\\:outline-none:focus {\\r\\n  outline: 2px solid transparent;\\r\\n  outline-offset: 2px;\\r\\n}\\r\\n\\r\\n.focus\\\\:ring-2:focus {\\r\\n  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);\\r\\n  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);\\r\\n  box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);\\r\\n}\\r\\n\\r\\n.focus\\\\:ring-blue-500:focus {\\r\\n  --tw-ring-opacity: 1;\\r\\n  --tw-ring-color: rgb(59 130 246 / var(--tw-ring-opacity, 1));\\r\\n}\\r\\n\\r\\n.focus-visible\\\\:outline-none:focus-visible {\\r\\n  outline: 2px solid transparent;\\r\\n  outline-offset: 2px;\\r\\n}\\r\\n\\r\\n.focus-visible\\\\:ring-2:focus-visible {\\r\\n  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);\\r\\n  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);\\r\\n  box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);\\r\\n}\\r\\n\\r\\n.focus-visible\\\\:ring-offset-2:focus-visible {\\r\\n  --tw-ring-offset-width: 2px;\\r\\n}\\r\\n\\r\\n.disabled\\\\:pointer-events-none:disabled {\\r\\n  pointer-events: none;\\r\\n}\\r\\n\\r\\n.disabled\\\\:cursor-not-allowed:disabled {\\r\\n  cursor: not-allowed;\\r\\n}\\r\\n\\r\\n.disabled\\\\:opacity-50:disabled {\\r\\n  opacity: 0.5;\\r\\n}\\r\\n\\r\\n.peer:disabled ~ .peer-disabled\\\\:cursor-not-allowed {\\r\\n  cursor: not-allowed;\\r\\n}\\r\\n\\r\\n.peer:disabled ~ .peer-disabled\\\\:opacity-70 {\\r\\n  opacity: 0.7;\\r\\n}\\r\\n\\r\\n@media (min-width: 640px) {\\r\\n\\r\\n  .sm\\\\:block {\\r\\n    display: block;\\r\\n  }\\r\\n}\\r\\n\\r\\n@media (min-width: 768px) {\\r\\n\\r\\n  .md\\\\:grid-cols-3 {\\r\\n    grid-template-columns: repeat(3, minmax(0, 1fr));\\r\\n  }\\r\\n}\\r\\n\\r\\n@media (min-width: 1024px) {\\r\\n\\r\\n  .lg\\\\:grid-cols-2 {\\r\\n    grid-template-columns: repeat(2, minmax(0, 1fr));\\r\\n  }\\r\\n}\\r\\n\\r\\n\\r\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://src/styles/globals.css\"],\"names\":[],\"mappings\":\"AAAA;EAAA,wBAAc;EAAd,wBAAc;EAAd,mBAAc;EAAd,mBAAc;EAAd,cAAc;EAAd,cAAc;EAAd,cAAc;EAAd,eAAc;EAAd,eAAc;EAAd,aAAc;EAAd,aAAc;EAAd,kBAAc;EAAd,sCAAc;EAAd,8BAAc;EAAd,6BAAc;EAAd,4BAAc;EAAd,eAAc;EAAd,oBAAc;EAAd,sBAAc;EAAd,uBAAc;EAAd,wBAAc;EAAd,kBAAc;EAAd,2BAAc;EAAd,4BAAc;EAAd,sCAAc;EAAd,kCAAc;EAAd,2BAAc;EAAd,sBAAc;EAAd,8BAAc;EAAd,YAAc;EAAd,kBAAc;EAAd,gBAAc;EAAd,iBAAc;EAAd,kBAAc;EAAd,cAAc;EAAd,gBAAc;EAAd,aAAc;EAAd,mBAAc;EAAd,qBAAc;EAAd,2BAAc;EAAd,yBAAc;EAAd,0BAAc;EAAd,2BAAc;EAAd,uBAAc;EAAd,wBAAc;EAAd,yBAAc;EAAd,sBAAc;EAAd,oBAAc;EAAd,sBAAc;EAAd,qBAAc;EAAd;AAAc;;AAAd;EAAA,wBAAc;EAAd,wBAAc;EAAd,mBAAc;EAAd,mBAAc;EAAd,cAAc;EAAd,cAAc;EAAd,cAAc;EAAd,eAAc;EAAd,eAAc;EAAd,aAAc;EAAd,aAAc;EAAd,kBAAc;EAAd,sCAAc;EAAd,8BAAc;EAAd,6BAAc;EAAd,4BAAc;EAAd,eAAc;EAAd,oBAAc;EAAd,sBAAc;EAAd,uBAAc;EAAd,wBAAc;EAAd,kBAAc;EAAd,2BAAc;EAAd,4BAAc;EAAd,sCAAc;EAAd,kCAAc;EAAd,2BAAc;EAAd,sBAAc;EAAd,8BAAc;EAAd,YAAc;EAAd,kBAAc;EAAd,gBAAc;EAAd,iBAAc;EAAd,kBAAc;EAAd,cAAc;EAAd,gBAAc;EAAd,aAAc;EAAd,mBAAc;EAAd,qBAAc;EAAd,2BAAc;EAAd,yBAAc;EAAd,0BAAc;EAAd,2BAAc;EAAd,uBAAc;EAAd,wBAAc;EAAd,yBAAc;EAAd,sBAAc;EAAd,oBAAc;EAAd,sBAAc;EAAd,qBAAc;EAAd;AAAc,CAAd;;CAAc,CAAd;;;CAAc;;AAAd;;;EAAA,sBAAc,EAAd,MAAc;EAAd,eAAc,EAAd,MAAc;EAAd,mBAAc,EAAd,MAAc;EAAd,qBAAc,EAAd,MAAc;AAAA;;AAAd;;EAAA,gBAAc;AAAA;;AAAd;;;;;;;;CAAc;;AAAd;;EAAA,gBAAc,EAAd,MAAc;EAAd,8BAAc,EAAd,MAAc;EAAd,gBAAc,EAAd,MAAc;EAAd,cAAc;KAAd,WAAc,EAAd,MAAc;EAAd,+HAAc,EAAd,MAAc;EAAd,6BAAc,EAAd,MAAc;EAAd,+BAAc,EAAd,MAAc;EAAd,wCAAc,EAAd,MAAc;AAAA;;AAAd;;;CAAc;;AAAd;EAAA,SAAc,EAAd,MAAc;EAAd,oBAAc,EAAd,MAAc;AAAA;;AAAd;;;;CAAc;;AAAd;EAAA,SAAc,EAAd,MAAc;EAAd,cAAc,EAAd,MAAc;EAAd,qBAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,yCAAc;UAAd,iCAAc;AAAA;;AAAd;;CAAc;;AAAd;;;;;;EAAA,kBAAc;EAAd,oBAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,cAAc;EAAd,wBAAc;AAAA;;AAAd;;CAAc;;AAAd;;EAAA,mBAAc;AAAA;;AAAd;;;;;CAAc;;AAAd;;;;EAAA,+GAAc,EAAd,MAAc;EAAd,6BAAc,EAAd,MAAc;EAAd,+BAAc,EAAd,MAAc;EAAd,cAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,cAAc;AAAA;;AAAd;;CAAc;;AAAd;;EAAA,cAAc;EAAd,cAAc;EAAd,kBAAc;EAAd,wBAAc;AAAA;;AAAd;EAAA,eAAc;AAAA;;AAAd;EAAA,WAAc;AAAA;;AAAd;;;;CAAc;;AAAd;EAAA,cAAc,EAAd,MAAc;EAAd,qBAAc,EAAd,MAAc;EAAd,yBAAc,EAAd,MAAc;AAAA;;AAAd;;;;CAAc;;AAAd;;;;;EAAA,oBAAc,EAAd,MAAc;EAAd,8BAAc,EAAd,MAAc;EAAd,gCAAc,EAAd,MAAc;EAAd,eAAc,EAAd,MAAc;EAAd,oBAAc,EAAd,MAAc;EAAd,oBAAc,EAAd,MAAc;EAAd,uBAAc,EAAd,MAAc;EAAd,cAAc,EAAd,MAAc;EAAd,SAAc,EAAd,MAAc;EAAd,UAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;;EAAA,oBAAc;AAAA;;AAAd;;;CAAc;;AAAd;;;;EAAA,0BAAc,EAAd,MAAc;EAAd,6BAAc,EAAd,MAAc;EAAd,sBAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,aAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,gBAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,wBAAc;AAAA;;AAAd;;CAAc;;AAAd;;EAAA,YAAc;AAAA;;AAAd;;;CAAc;;AAAd;EAAA,6BAAc,EAAd,MAAc;EAAd,oBAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,wBAAc;AAAA;;AAAd;;;CAAc;;AAAd;EAAA,0BAAc,EAAd,MAAc;EAAd,aAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,kBAAc;AAAA;;AAAd;;CAAc;;AAAd;;;;;;;;;;;;;EAAA,SAAc;AAAA;;AAAd;EAAA,SAAc;EAAd,UAAc;AAAA;;AAAd;EAAA,UAAc;AAAA;;AAAd;;;EAAA,gBAAc;EAAd,SAAc;EAAd,UAAc;AAAA;;AAAd;;CAAc;AAAd;EAAA,UAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,gBAAc;AAAA;;AAAd;;;CAAc;;AAAd;EAAA,UAAc,EAAd,MAAc;EAAd,cAAc,EAAd,MAAc;AAAA;;AAAd;;EAAA,UAAc,EAAd,MAAc;EAAd,cAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;;EAAA,eAAc;AAAA;;AAAd;;CAAc;AAAd;EAAA,eAAc;AAAA;;AAAd;;;;CAAc;;AAAd;;;;;;;;EAAA,cAAc,EAAd,MAAc;EAAd,sBAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;;EAAA,eAAc;EAAd,YAAc;AAAA;;AAAd,wEAAc;AAAd;EAAA,aAAc;AAAA;AACd;EAAA;AAAoB;AAApB;;EAAA;IAAA;EAAoB;AAAA;AAApB;;EAAA;IAAA;EAAoB;AAAA;AAApB;;EAAA;IAAA;EAAoB;AAAA;AAApB;;EAAA;IAAA;EAAoB;AAAA;AAApB;;EAAA;IAAA;EAAoB;AAAA;AACpB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,iBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,sBAAmB;EAAnB;AAAmB;AAAnB;EAAA,qBAAmB;EAAnB;AAAmB;AAAnB;EAAA,sBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;;EAAA;IAAA;EAAmB;AAAA;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,uBAAmB;EAAnB,sDAAmB;EAAnB;AAAmB;AAAnB;EAAA,uBAAmB;EAAnB,uDAAmB;EAAnB;AAAmB;AAAnB;EAAA,uBAAmB;EAAnB,oDAAmB;EAAnB;AAAmB;AAAnB;EAAA,uBAAmB;EAAnB,+DAAmB;EAAnB;AAAmB;AAAnB;EAAA,uBAAmB;EAAnB,gEAAmB;EAAnB;AAAmB;AAAnB;EAAA,uBAAmB;EAAnB,8DAAmB;EAAnB;AAAmB;AAAnB;EAAA,uBAAmB;EAAnB,+DAAmB;EAAnB;AAAmB;AAAnB;EAAA,uBAAmB;EAAnB,8DAAmB;EAAnB;AAAmB;AAAnB;EAAA,uBAAmB;EAAnB,4DAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,sBAAmB;EAAnB;AAAmB;AAAnB;EAAA,sBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,sBAAmB;EAAnB;AAAmB;AAAnB;EAAA,sBAAmB;EAAnB;AAAmB;AAAnB;EAAA,sBAAmB;EAAnB;AAAmB;AAAnB;EAAA,sBAAmB;EAAnB;AAAmB;AAAnB;EAAA,sBAAmB;EAAnB;AAAmB;AAAnB;EAAA,sBAAmB;EAAnB;AAAmB;AAAnB;EAAA,sBAAmB;EAAnB;AAAmB;AAAnB;EAAA,sBAAmB;EAAnB;AAAmB;AAAnB;EAAA,sBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,4DAAmB;EAAnB,qEAAmB;EAAnB;AAAmB;AAAnB;EAAA,4DAAmB;EAAnB,oEAAmB;EAAnB;AAAmB;AAAnB;EAAA,4DAAmB;EAAnB,mEAAmB;EAAnB;AAAmB;AAAnB;EAAA,4DAAmB;EAAnB,qEAAmB;EAAnB;AAAmB;AAAnB;EAAA,4DAAmB;EAAnB,mEAAmB;EAAnB;AAAmB;AAAnB;EAAA,4DAAmB;EAAnB,qEAAmB;EAAnB;AAAmB;AAAnB;EAAA,4DAAmB;EAAnB,oEAAmB;EAAnB;AAAmB;AAAnB;EAAA,4DAAmB;EAAnB,qEAAmB;EAAnB;AAAmB;AAAnB;EAAA,4DAAmB;EAAnB,mEAAmB;EAAnB;AAAmB;AAAnB;EAAA,4DAAmB;EAAnB,mEAAmB;EAAnB;AAAmB;AAAnB;EAAA,sEAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,6BAAmB;UAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,qBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,iBAAmB;EAAnB;AAAmB;AAAnB;EAAA,mBAAmB;EAAnB;AAAmB;AAAnB;EAAA,iBAAmB;EAAnB;AAAmB;AAAnB;EAAA,iBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,iBAAmB;EAAnB;AAAmB;AAAnB;EAAA,mBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,mBAAmB;EAAnB;AAAmB;AAAnB;EAAA,mBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,gDAAmB;EAAnB,6DAAmB;EAAnB;AAAmB;AAAnB;EAAA,+EAAmB;EAAnB,mGAAmB;EAAnB;AAAmB;AAAnB;EAAA,0CAAmB;EAAnB,uDAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,6BAAmB;EAAnB;AAAmB;AAAnB;EAAA,wBAAmB;EAAnB,wDAAmB;EAAnB;AAAmB;AAAnB;EAAA,+FAAmB;EAAnB,wDAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;;AAEnB;EACE,yBAAyB;EACzB,qCAAqC;EACrC,mCAAmC;AACrC;;AAEA;EACE;IACE,+BAA+B;IAC/B,+BAA+B;IAC/B,6BAA6B;EAC/B;AACF;;AAEA;EACE,iCAAiC;EACjC;;;;;oCAKkC;AACpC;;AA1BA;EAAA,oBAmCA;EAnCA;AAmCA;;AAnCA;EAAA,oBAmCA;EAnCA;AAmCA;;AAnCA;EAAA,sBAmCA;EAnCA;AAmCA;;AAnCA;EAAA,kBAmCA;EAnCA;AAmCA;;AAnCA;EAAA,kBAmCA;EAnCA;AAmCA;;AAnCA;EAAA,4DAmCA;EAnCA,mEAmCA;EAnCA;AAmCA;;AAnCA;EAAA,4DAmCA;EAnCA,mEAmCA;EAnCA;AAmCA;;AAnCA;EAAA,4DAmCA;EAnCA,oEAmCA;EAnCA;AAmCA;;AAnCA;EAAA,4DAmCA;EAnCA,mEAmCA;EAnCA;AAmCA;;AAnCA;EAAA;AAmCA;;AAnCA;EAAA;AAmCA;;AAnCA;EAAA;AAmCA;;AAnCA;EAAA;AAmCA;;AAnCA;EAAA,oBAmCA;EAnCA;AAmCA;;AAnCA;EAAA;AAmCA;;AAnCA;EAAA,+EAmCA;EAnCA,mGAmCA;EAnCA;AAmCA;;AAnCA;EAAA,gFAmCA;EAnCA,oGAmCA;EAnCA;AAmCA;;AAnCA;EAAA;AAmCA;;AAnCA;EAAA,8BAmCA;EAnCA;AAmCA;;AAnCA;EAAA,2GAmCA;EAnCA,yGAmCA;EAnCA;AAmCA;;AAnCA;EAAA,oBAmCA;EAnCA;AAmCA;;AAnCA;EAAA,8BAmCA;EAnCA;AAmCA;;AAnCA;EAAA,2GAmCA;EAnCA,yGAmCA;EAnCA;AAmCA;;AAnCA;EAAA;AAmCA;;AAnCA;EAAA;AAmCA;;AAnCA;EAAA;AAmCA;;AAnCA;EAAA;AAmCA;;AAnCA;EAAA;AAmCA;;AAnCA;EAAA;AAmCA;;AAnCA;;EAAA;IAAA;EAmCA;AAAA;;AAnCA;;EAAA;IAAA;EAmCA;AAAA;;AAnCA;;EAAA;IAAA;EAmCA;AAAA\",\"sourcesContent\":[\"@tailwind base;\\r\\n@tailwind components;\\r\\n@tailwind utilities;\\r\\n\\r\\n:root {\\r\\n  --foreground-rgb: 0, 0, 0;\\r\\n  --background-start-rgb: 214, 219, 220;\\r\\n  --background-end-rgb: 255, 255, 255;\\r\\n}\\r\\n\\r\\n@media (prefers-color-scheme: dark) {\\r\\n  :root {\\r\\n    --foreground-rgb: 255, 255, 255;\\r\\n    --background-start-rgb: 0, 0, 0;\\r\\n    --background-end-rgb: 0, 0, 0;\\r\\n  }\\r\\n}\\r\\n\\r\\nbody {\\r\\n  color: rgb(var(--foreground-rgb));\\r\\n  background: linear-gradient(\\r\\n      to bottom,\\r\\n      transparent,\\r\\n      rgb(var(--background-end-rgb))\\r\\n    )\\r\\n    rgb(var(--background-start-rgb));\\r\\n}\\r\\n\\r\\n@layer utilities {\\r\\n  .text-balance {\\r\\n    text-wrap: balance;\\r\\n  }\\r\\n}\\r\\n\\r\\n\\r\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[8].oneOf[13].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[8].oneOf[13].use[2]!./src/styles/globals.css\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/api.js":
/*!************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/api.js ***!
  \************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("/*\r\n  MIT License http://www.opensource.org/licenses/mit-license.php\r\n  Author Tobias Koppers @sokra\r\n*/ // css base code, injected by the css-loader\r\n// eslint-disable-next-line func-names\r\n\r\nmodule.exports = function(useSourceMap) {\r\n    var list = [] // return the list of modules as css string\r\n    ;\r\n    list.toString = function toString() {\r\n        return this.map(function(item) {\r\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n            var content = cssWithMappingToString(item, useSourceMap);\r\n            if (item[2]) {\r\n                return '@media '.concat(item[2], ' {').concat(content, '}');\r\n            }\r\n            return content;\r\n        }).join('');\r\n    } // import a list of modules into the list\r\n    ;\r\n    // eslint-disable-next-line func-names\r\n    // @ts-expect-error TODO: fix type\r\n    list.i = function(modules, mediaQuery, dedupe) {\r\n        if (typeof modules === 'string') {\r\n            // eslint-disable-next-line no-param-reassign\r\n            modules = [\r\n                [\r\n                    null,\r\n                    modules,\r\n                    ''\r\n                ]\r\n            ];\r\n        }\r\n        var alreadyImportedModules = {};\r\n        if (dedupe) {\r\n            for(var i = 0; i < this.length; i++){\r\n                // eslint-disable-next-line prefer-destructuring\r\n                var id = this[i][0];\r\n                if (id != null) {\r\n                    alreadyImportedModules[id] = true;\r\n                }\r\n            }\r\n        }\r\n        for(var _i = 0; _i < modules.length; _i++){\r\n            var item = [].concat(modules[_i]);\r\n            if (dedupe && alreadyImportedModules[item[0]]) {\r\n                continue;\r\n            }\r\n            if (mediaQuery) {\r\n                if (!item[2]) {\r\n                    item[2] = mediaQuery;\r\n                } else {\r\n                    item[2] = ''.concat(mediaQuery, ' and ').concat(item[2]);\r\n                }\r\n            }\r\n            list.push(item);\r\n        }\r\n    };\r\n    return list;\r\n};\r\nfunction cssWithMappingToString(item, useSourceMap) {\r\n    var content = item[1] || '' // eslint-disable-next-line prefer-destructuring\r\n    ;\r\n    var cssMapping = item[3];\r\n    if (!cssMapping) {\r\n        return content;\r\n    }\r\n    if (useSourceMap && typeof btoa === 'function') {\r\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n        var sourceMapping = toComment(cssMapping);\r\n        var sourceURLs = cssMapping.sources.map(function(source) {\r\n            return '/*# sourceURL='.concat(cssMapping.sourceRoot || '').concat(source, ' */');\r\n        });\r\n        return [\r\n            content\r\n        ].concat(sourceURLs).concat([\r\n            sourceMapping\r\n        ]).join('\\n');\r\n    }\r\n    return [\r\n        content\r\n    ].join('\\n');\r\n} // Adapted from convert-source-map (MIT)\r\nfunction toComment(sourceMap) {\r\n    // eslint-disable-next-line no-undef\r\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\r\n    var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,'.concat(base64);\r\n    return '/*# '.concat(data, ' */');\r\n}\r\n\r\n//# sourceMappingURL=api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL2Nzcy1sb2FkZXIvc3JjL3J1bnRpbWUvYXBpLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0QscUJBQXFCO0FBQ3pFO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLGlCQUFpQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixxQkFBcUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0EsdURBQXVELGNBQWM7QUFDckU7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkQ6XFxEb19hbjJcXGxlbmRodWJfdjJcXGxlbmRodWItZnJvbnRlbmQtbmV4dGpzXFxub2RlX21vZHVsZXNcXG5leHRcXGRpc3RcXGJ1aWxkXFx3ZWJwYWNrXFxsb2FkZXJzXFxjc3MtbG9hZGVyXFxzcmNcXHJ1bnRpbWVcXGFwaS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXHJcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxyXG4qLyAvLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xyXG5cInVzZSBzdHJpY3RcIjtcclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih1c2VTb3VyY2VNYXApIHtcclxuICAgIHZhciBsaXN0ID0gW10gLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xyXG4gICAgO1xyXG4gICAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbihpdGVtKSB7XHJcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdXNlLWJlZm9yZS1kZWZpbmVcclxuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XHJcbiAgICAgICAgICAgIGlmIChpdGVtWzJdKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ0BtZWRpYSAnLmNvbmNhdChpdGVtWzJdLCAnIHsnKS5jb25jYXQoY29udGVudCwgJ30nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gY29udGVudDtcclxuICAgICAgICB9KS5qb2luKCcnKTtcclxuICAgIH0gLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcclxuICAgIDtcclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXHJcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFRPRE86IGZpeCB0eXBlXHJcbiAgICBsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5LCBkZWR1cGUpIHtcclxuICAgICAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxyXG4gICAgICAgICAgICBtb2R1bGVzID0gW1xyXG4gICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgIG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgbW9kdWxlcyxcclxuICAgICAgICAgICAgICAgICAgICAnJ1xyXG4gICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICBdO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xyXG4gICAgICAgIGlmIChkZWR1cGUpIHtcclxuICAgICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXHJcbiAgICAgICAgICAgICAgICB2YXIgaWQgPSB0aGlzW2ldWzBdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspe1xyXG4gICAgICAgICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19pXSk7XHJcbiAgICAgICAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKG1lZGlhUXVlcnkpIHtcclxuICAgICAgICAgICAgICAgIGlmICghaXRlbVsyXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpdGVtWzJdID0gJycuY29uY2F0KG1lZGlhUXVlcnksICcgYW5kICcpLmNvbmNhdChpdGVtWzJdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsaXN0LnB1c2goaXRlbSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBsaXN0O1xyXG59O1xyXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xyXG4gICAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xyXG4gICAgO1xyXG4gICAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xyXG4gICAgaWYgKCFjc3NNYXBwaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XHJcbiAgICB9XHJcbiAgICBpZiAodXNlU291cmNlTWFwICYmIHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11c2UtYmVmb3JlLWRlZmluZVxyXG4gICAgICAgIHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xyXG4gICAgICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbihzb3VyY2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuICcvKiMgc291cmNlVVJMPScuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCAnJykuY29uY2F0KHNvdXJjZSwgJyAqLycpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIGNvbnRlbnRcclxuICAgICAgICBdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW1xyXG4gICAgICAgICAgICBzb3VyY2VNYXBwaW5nXHJcbiAgICAgICAgXSkuam9pbignXFxuJyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICAgIGNvbnRlbnRcclxuICAgIF0uam9pbignXFxuJyk7XHJcbn0gLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxyXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcclxuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xyXG4gICAgdmFyIGRhdGEgPSAnc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsJy5jb25jYXQoYmFzZTY0KTtcclxuICAgIHJldHVybiAnLyojICcuY29uY2F0KGRhdGEsICcgKi8nKTtcclxufVxyXG5cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/api.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=private-next-pages%2F_app&page=%2F_app!":
/*!*******************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=private-next-pages%2F_app&page=%2F_app! ***!
  \*******************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/_app\",\n      function () {\n        return __webpack_require__(/*! private-next-pages/_app */ \"(pages-dir-browser)/./src/pages/_app.tsx\");\n      }\n    ]);\n    if(true) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/_app\"])\n      });\n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtY2xpZW50LXBhZ2VzLWxvYWRlci5qcz9hYnNvbHV0ZVBhZ2VQYXRoPXByaXZhdGUtbmV4dC1wYWdlcyUyRl9hcHAmcGFnZT0lMkZfYXBwISIsIm1hcHBpbmdzIjoiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxtQkFBTyxDQUFDLHlFQUF5QjtBQUNoRDtBQUNBO0FBQ0EsT0FBTyxJQUFVO0FBQ2pCLE1BQU0sVUFBVTtBQUNoQjtBQUNBLE9BQU87QUFDUDtBQUNBIiwic291cmNlcyI6WyIiXSwic291cmNlc0NvbnRlbnQiOlsiXG4gICAgKHdpbmRvdy5fX05FWFRfUCA9IHdpbmRvdy5fX05FWFRfUCB8fCBbXSkucHVzaChbXG4gICAgICBcIi9fYXBwXCIsXG4gICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiByZXF1aXJlKFwicHJpdmF0ZS1uZXh0LXBhZ2VzL19hcHBcIik7XG4gICAgICB9XG4gICAgXSk7XG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd2luZG93Ll9fTkVYVF9QLnB1c2goW1wiL19hcHBcIl0pXG4gICAgICB9KTtcbiAgICB9XG4gICJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=private-next-pages%2F_app&page=%2F_app!\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js ***!
  \************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("/// <reference types=\"webpack/module.d.ts\" />\r\n\r\nconst isOldIE = function isOldIE() {\r\n    let memo;\r\n    return function memorize() {\r\n        if (typeof memo === 'undefined') {\r\n            // Test for IE <= 9 as proposed by Browserhacks\r\n            // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\r\n            // Tests for existence of standard globals is to allow style-loader\r\n            // to operate correctly into non-standard environments\r\n            // @see https://github.com/webpack-contrib/style-loader/issues/177\r\n            memo = Boolean(window && document && document.all && !window.atob);\r\n        }\r\n        return memo;\r\n    };\r\n}();\r\nconst getTargetElement = function() {\r\n    const memo = {};\r\n    return function memorize(target) {\r\n        if (typeof memo[target] === 'undefined') {\r\n            let styleTarget = document.querySelector(target);\r\n            // Special case to return head of iframe instead of iframe itself\r\n            if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\r\n                try {\r\n                    // This will throw an exception if access to iframe is blocked\r\n                    // due to cross-origin restrictions\r\n                    styleTarget = styleTarget.contentDocument.head;\r\n                } catch (e) {\r\n                    // istanbul ignore next\r\n                    styleTarget = null;\r\n                }\r\n            }\r\n            memo[target] = styleTarget;\r\n        }\r\n        return memo[target];\r\n    };\r\n}();\r\nconst stylesInDom = [];\r\nfunction getIndexByIdentifier(identifier) {\r\n    let result = -1;\r\n    for(let i = 0; i < stylesInDom.length; i++){\r\n        if (stylesInDom[i].identifier === identifier) {\r\n            result = i;\r\n            break;\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction modulesToDom(list, options) {\r\n    const idCountMap = {};\r\n    const identifiers = [];\r\n    for(let i = 0; i < list.length; i++){\r\n        const item = list[i];\r\n        const id = options.base ? item[0] + options.base : item[0];\r\n        const count = idCountMap[id] || 0;\r\n        const identifier = id + ' ' + count.toString();\r\n        idCountMap[id] = count + 1;\r\n        const index = getIndexByIdentifier(identifier);\r\n        const obj = {\r\n            css: item[1],\r\n            media: item[2],\r\n            sourceMap: item[3]\r\n        };\r\n        if (index !== -1) {\r\n            stylesInDom[index].references++;\r\n            stylesInDom[index].updater(obj);\r\n        } else {\r\n            stylesInDom.push({\r\n                identifier: identifier,\r\n                // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n                updater: addStyle(obj, options),\r\n                references: 1\r\n            });\r\n        }\r\n        identifiers.push(identifier);\r\n    }\r\n    return identifiers;\r\n}\r\nfunction insertStyleElement(options) {\r\n    const style = document.createElement('style');\r\n    const attributes = options.attributes || {};\r\n    if (typeof attributes.nonce === 'undefined') {\r\n        const nonce = // eslint-disable-next-line no-undef\r\n         true ? __webpack_require__.nc : 0;\r\n        if (nonce) {\r\n            attributes.nonce = nonce;\r\n        }\r\n    }\r\n    Object.keys(attributes).forEach(function(key) {\r\n        style.setAttribute(key, attributes[key]);\r\n    });\r\n    if (typeof options.insert === 'function') {\r\n        options.insert(style);\r\n    } else {\r\n        const target = getTargetElement(options.insert || 'head');\r\n        if (!target) {\r\n            throw Object.defineProperty(new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\"), \"__NEXT_ERROR_CODE\", {\r\n                value: \"E245\",\r\n                enumerable: false,\r\n                configurable: true\r\n            });\r\n        }\r\n        target.appendChild(style);\r\n    }\r\n    return style;\r\n}\r\nfunction removeStyleElement(style) {\r\n    // istanbul ignore if\r\n    if (style.parentNode === null) {\r\n        return false;\r\n    }\r\n    style.parentNode.removeChild(style);\r\n}\r\n/* istanbul ignore next  */ const replaceText = function replaceText() {\r\n    const textStore = [];\r\n    return function replace(index, replacement) {\r\n        textStore[index] = replacement;\r\n        return textStore.filter(Boolean).join('\\n');\r\n    };\r\n}();\r\nfunction applyToSingletonTag(style, index, remove, obj) {\r\n    const css = remove ? '' : obj.media ? '@media ' + obj.media + ' {' + obj.css + '}' : obj.css;\r\n    // For old IE\r\n    /* istanbul ignore if  */ if (style.styleSheet) {\r\n        style.styleSheet.cssText = replaceText(index, css);\r\n    } else {\r\n        const cssNode = document.createTextNode(css);\r\n        const childNodes = style.childNodes;\r\n        if (childNodes[index]) {\r\n            style.removeChild(childNodes[index]);\r\n        }\r\n        if (childNodes.length) {\r\n            style.insertBefore(cssNode, childNodes[index]);\r\n        } else {\r\n            style.appendChild(cssNode);\r\n        }\r\n    }\r\n}\r\nfunction applyToTag(style, _options, obj) {\r\n    let css = obj.css;\r\n    const media = obj.media;\r\n    const sourceMap = obj.sourceMap;\r\n    if (media) {\r\n        style.setAttribute('media', media);\r\n    } else {\r\n        style.removeAttribute('media');\r\n    }\r\n    if (sourceMap && typeof btoa !== 'undefined') {\r\n        css += '\\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */';\r\n    }\r\n    // For old IE\r\n    /* istanbul ignore if  */ if (style.styleSheet) {\r\n        style.styleSheet.cssText = css;\r\n    } else {\r\n        while(style.firstChild){\r\n            style.removeChild(style.firstChild);\r\n        }\r\n        style.appendChild(document.createTextNode(css));\r\n    }\r\n}\r\nlet singleton = null;\r\nlet singletonCounter = 0;\r\nfunction addStyle(obj, options) {\r\n    let style;\r\n    let update;\r\n    let remove;\r\n    if (options.singleton) {\r\n        const styleIndex = singletonCounter++;\r\n        style = singleton || (singleton = insertStyleElement(options));\r\n        update = applyToSingletonTag.bind(null, style, styleIndex, false);\r\n        remove = applyToSingletonTag.bind(null, style, styleIndex, true);\r\n    } else {\r\n        style = insertStyleElement(options);\r\n        update = applyToTag.bind(null, style, options);\r\n        remove = function() {\r\n            removeStyleElement(style);\r\n        };\r\n    }\r\n    update(obj);\r\n    return function updateStyle(newObj) {\r\n        if (newObj) {\r\n            if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {\r\n                return;\r\n            }\r\n            update(obj = newObj);\r\n        } else {\r\n            remove();\r\n        }\r\n    };\r\n}\r\nmodule.exports = function(list, options) {\r\n    options = options || {};\r\n    // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\r\n    // tags it will allow on a page\r\n    if (!options.singleton && typeof options.singleton !== 'boolean') {\r\n        options.singleton = isOldIE();\r\n    }\r\n    list = list || [];\r\n    let lastIdentifiers = modulesToDom(list, options);\r\n    return function update(newList) {\r\n        newList = newList || [];\r\n        if (Object.prototype.toString.call(newList) !== '[object Array]') {\r\n            return;\r\n        }\r\n        for(let i = 0; i < lastIdentifiers.length; i++){\r\n            const identifier = lastIdentifiers[i];\r\n            const index = getIndexByIdentifier(identifier);\r\n            stylesInDom[index].references--;\r\n        }\r\n        const newLastIdentifiers = modulesToDom(newList, options);\r\n        for(let i = 0; i < lastIdentifiers.length; i++){\r\n            const identifier = lastIdentifiers[i];\r\n            const index = getIndexByIdentifier(identifier);\r\n            if (stylesInDom[index].references === 0) {\r\n                stylesInDom[index].updater();\r\n                stylesInDom.splice(index, 1);\r\n            }\r\n        }\r\n        lastIdentifiers = newLastIdentifiers;\r\n    };\r\n};\r\n\r\n//# sourceMappingURL=injectStylesIntoStyleTag.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/react-toastify/dist/ReactToastify.css":
/*!************************************************************!*\
  !*** ./node_modules/react-toastify/dist/ReactToastify.css ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("var api = __webpack_require__(/*! !../../next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js */ \"(pages-dir-browser)/./node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js\");\n            var content = __webpack_require__(/*! !!../../next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[8].oneOf[11].use[1]!../../next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[8].oneOf[11].use[2]!./ReactToastify.css */ \"(pages-dir-browser)/./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[8].oneOf[11].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[8].oneOf[11].use[2]!./node_modules/react-toastify/dist/ReactToastify.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = function(element) {\r\n                    // By default, style-loader injects CSS into the bottom\r\n                    // of <head>. This causes ordering problems between dev\r\n                    // and prod. To fix this, we render a <noscript> tag as\r\n                    // an anchor for the styles to be placed before. These\r\n                    // styles will be applied _before_ <style jsx global>.\r\n                    // These elements should always exist. If they do not,\r\n                    // this code should fail.\r\n                    var anchorElement = document.querySelector('#__next_css__DO_NOT_USE__');\r\n                    var parentNode = anchorElement.parentNode// Normally <head>\r\n                    ;\r\n                    // Each style tag should be placed right before our\r\n                    // anchor. By inserting before and not after, we do not\r\n                    // need to track the last inserted element.\r\n                    parentNode.insertBefore(element, anchorElement);\r\n                };\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (true) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\r\n    if (!a && b || a && !b) {\r\n        return false;\r\n    }\r\n    let p;\r\n    for(p in a){\r\n        if (isNamedExport && p === 'default') {\r\n            continue;\r\n        }\r\n        if (a[p] !== b[p]) {\r\n            return false;\r\n        }\r\n    }\r\n    for(p in b){\r\n        if (isNamedExport && p === 'default') {\r\n            continue;\r\n        }\r\n        if (!a[p]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      /*! !!../../next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[8].oneOf[11].use[1]!../../next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[8].oneOf[11].use[2]!./ReactToastify.css */ \"(pages-dir-browser)/./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[8].oneOf[11].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[8].oneOf[11].use[2]!./node_modules/react-toastify/dist/ReactToastify.css\",\n      function () {\n        content = __webpack_require__(/*! !!../../next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[8].oneOf[11].use[1]!../../next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[8].oneOf[11].use[2]!./ReactToastify.css */ \"(pages-dir-browser)/./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[8].oneOf[11].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[8].oneOf[11].use[2]!./node_modules/react-toastify/dist/ReactToastify.css\");\n\n              content = content.__esModule ? content.default : content;\n\n              if (typeof content === 'string') {\n                content = [[module.id, content, '']];\n              }\n\n              if (!isEqualLocals(oldLocals, content.locals)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nmodule.exports = content.locals || {};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yZWFjdC10b2FzdGlmeS9kaXN0L1JlYWN0VG9hc3RpZnkuY3NzIiwibWFwcGluZ3MiOiJBQUFBLFVBQVUsbUJBQU8sQ0FBQyw4TkFBOEY7QUFDaEgsMEJBQTBCLG1CQUFPLENBQUMsaWhCQUFtTzs7QUFFclE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7OztBQUdBLElBQUksSUFBVTtBQUNkLHlCQUF5QixVQUFVO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJLGlCQUFpQjtBQUNyQixNQUFNLGloQkFBbU87QUFDek87QUFDQSxrQkFBa0IsbUJBQU8sQ0FBQyxpaEJBQW1POztBQUU3UDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxnQkFBZ0IsVUFBVTs7QUFFMUI7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxFQUFFLFVBQVU7QUFDWjtBQUNBLEdBQUc7QUFDSDs7QUFFQSIsInNvdXJjZXMiOlsiRDpcXERvX2FuMlxcbGVuZGh1Yl92MlxcbGVuZGh1Yi1mcm9udGVuZC1uZXh0anNcXG5vZGVfbW9kdWxlc1xccmVhY3QtdG9hc3RpZnlcXGRpc3RcXFJlYWN0VG9hc3RpZnkuY3NzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvbmV4dC1zdHlsZS1sb2FkZXIvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvY3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3J1bGVTZXRbMV0ucnVsZXNbOF0ub25lT2ZbMTFdLnVzZVsxXSEuLi8uLi9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1s4XS5vbmVPZlsxMV0udXNlWzJdIS4vUmVhY3RUb2FzdGlmeS5jc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBmdW5jdGlvbihlbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQnkgZGVmYXVsdCwgc3R5bGUtbG9hZGVyIGluamVjdHMgQ1NTIGludG8gdGhlIGJvdHRvbVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIG9mIDxoZWFkPi4gVGhpcyBjYXVzZXMgb3JkZXJpbmcgcHJvYmxlbXMgYmV0d2VlbiBkZXZcclxuICAgICAgICAgICAgICAgICAgICAvLyBhbmQgcHJvZC4gVG8gZml4IHRoaXMsIHdlIHJlbmRlciBhIDxub3NjcmlwdD4gdGFnIGFzXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYW4gYW5jaG9yIGZvciB0aGUgc3R5bGVzIHRvIGJlIHBsYWNlZCBiZWZvcmUuIFRoZXNlXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc3R5bGVzIHdpbGwgYmUgYXBwbGllZCBfYmVmb3JlXyA8c3R5bGUganN4IGdsb2JhbD4uXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlc2UgZWxlbWVudHMgc2hvdWxkIGFsd2F5cyBleGlzdC4gSWYgdGhleSBkbyBub3QsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyBjb2RlIHNob3VsZCBmYWlsLlxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhbmNob3JFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI19fbmV4dF9jc3NfX0RPX05PVF9VU0VfXycpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJlbnROb2RlID0gYW5jaG9yRWxlbWVudC5wYXJlbnROb2RlLy8gTm9ybWFsbHkgPGhlYWQ+XHJcbiAgICAgICAgICAgICAgICAgICAgO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEVhY2ggc3R5bGUgdGFnIHNob3VsZCBiZSBwbGFjZWQgcmlnaHQgYmVmb3JlIG91clxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGFuY2hvci4gQnkgaW5zZXJ0aW5nIGJlZm9yZSBhbmQgbm90IGFmdGVyLCB3ZSBkbyBub3RcclxuICAgICAgICAgICAgICAgICAgICAvLyBuZWVkIHRvIHRyYWNrIHRoZSBsYXN0IGluc2VydGVkIGVsZW1lbnQuXHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZWxlbWVudCwgYW5jaG9yRWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICB9O1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5pZiAobW9kdWxlLmhvdCkge1xuICBpZiAoIWNvbnRlbnQubG9jYWxzIHx8IG1vZHVsZS5ob3QuaW52YWxpZGF0ZSkge1xuICAgIHZhciBpc0VxdWFsTG9jYWxzID0gZnVuY3Rpb24gaXNFcXVhbExvY2FscyhhLCBiLCBpc05hbWVkRXhwb3J0KSB7XHJcbiAgICBpZiAoIWEgJiYgYiB8fCBhICYmICFiKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgbGV0IHA7XHJcbiAgICBmb3IocCBpbiBhKXtcclxuICAgICAgICBpZiAoaXNOYW1lZEV4cG9ydCAmJiBwID09PSAnZGVmYXVsdCcpIHtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhW3BdICE9PSBiW3BdKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmb3IocCBpbiBiKXtcclxuICAgICAgICBpZiAoaXNOYW1lZEV4cG9ydCAmJiBwID09PSAnZGVmYXVsdCcpIHtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghYVtwXSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn07XG4gICAgdmFyIG9sZExvY2FscyA9IGNvbnRlbnQubG9jYWxzO1xuXG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXG4gICAgICBcIiEhLi4vLi4vbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9jc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1s4XS5vbmVPZlsxMV0udXNlWzFdIS4uLy4uL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzhdLm9uZU9mWzExXS51c2VbMl0hLi9SZWFjdFRvYXN0aWZ5LmNzc1wiLFxuICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9jc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1s4XS5vbmVPZlsxMV0udXNlWzFdIS4uLy4uL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzhdLm9uZU9mWzExXS51c2VbMl0hLi9SZWFjdFRvYXN0aWZ5LmNzc1wiKTtcblxuICAgICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKCFpc0VxdWFsTG9jYWxzKG9sZExvY2FscywgY29udGVudC5sb2NhbHMpKSB7XG4gICAgICAgICAgICAgICAgbW9kdWxlLmhvdC5pbnZhbGlkYXRlKCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBvbGRMb2NhbHMgPSBjb250ZW50LmxvY2FscztcblxuICAgICAgICAgICAgICB1cGRhdGUoY29udGVudCk7XG4gICAgICB9XG4gICAgKVxuICB9XG5cbiAgbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkge1xuICAgIHVwZGF0ZSgpO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscyB8fCB7fTsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/react-toastify/dist/ReactToastify.css\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/react-toastify/dist/react-toastify.esm.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/react-toastify/dist/react-toastify.esm.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Bounce: () => (/* binding */ R),\n/* harmony export */   Flip: () => (/* binding */ $),\n/* harmony export */   Icons: () => (/* binding */ E),\n/* harmony export */   Slide: () => (/* binding */ w),\n/* harmony export */   ToastContainer: () => (/* binding */ k),\n/* harmony export */   Zoom: () => (/* binding */ x),\n/* harmony export */   collapseToast: () => (/* binding */ g),\n/* harmony export */   cssTransition: () => (/* binding */ h),\n/* harmony export */   toast: () => (/* binding */ Q),\n/* harmony export */   useToast: () => (/* binding */ _),\n/* harmony export */   useToastContainer: () => (/* binding */ C)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(pages-dir-browser)/./node_modules/react/index.js\");\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! clsx */ \"(pages-dir-browser)/./node_modules/react-toastify/node_modules/clsx/dist/clsx.m.js\");\n'use client';\r\nconst u=t=>\"number\"==typeof t&&!isNaN(t),d=t=>\"string\"==typeof t,p=t=>\"function\"==typeof t,m=t=>d(t)||p(t)?t:null,f=t=>(0,react__WEBPACK_IMPORTED_MODULE_0__.isValidElement)(t)||d(t)||p(t)||u(t);function g(t,e,n){void 0===n&&(n=300);const{scrollHeight:o,style:s}=t;requestAnimationFrame(()=>{s.minHeight=\"initial\",s.height=o+\"px\",s.transition=`all ${n}ms`,requestAnimationFrame(()=>{s.height=\"0\",s.padding=\"0\",s.margin=\"0\",setTimeout(e,n)})})}function h(e){let{enter:a,exit:r,appendPosition:i=!1,collapse:l=!0,collapseDuration:c=300}=e;return function(e){let{children:u,position:d,preventExitTransition:p,done:m,nodeRef:f,isIn:h}=e;const y=i?`${a}--${d}`:a,v=i?`${r}--${d}`:r,T=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);return (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(()=>{const t=f.current,e=y.split(\" \"),n=o=>{o.target===f.current&&(t.dispatchEvent(new Event(\"d\")),t.removeEventListener(\"animationend\",n),t.removeEventListener(\"animationcancel\",n),0===T.current&&\"animationcancel\"!==o.type&&t.classList.remove(...e))};t.classList.add(...e),t.addEventListener(\"animationend\",n),t.addEventListener(\"animationcancel\",n)},[]),(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{const t=f.current,e=()=>{t.removeEventListener(\"animationend\",e),l?g(t,m,c):m()};h||(p?e():(T.current=1,t.className+=` ${v}`,t.addEventListener(\"animationend\",e)))},[h]),react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,u)}}function y(t,e){return null!=t?{content:t.content,containerId:t.props.containerId,id:t.props.toastId,theme:t.props.theme,type:t.props.type,data:t.props.data||{},isLoading:t.props.isLoading,icon:t.props.icon,status:e}:{}}const v={list:new Map,emitQueue:new Map,on(t,e){return this.list.has(t)||this.list.set(t,[]),this.list.get(t).push(e),this},off(t,e){if(e){const n=this.list.get(t).filter(t=>t!==e);return this.list.set(t,n),this}return this.list.delete(t),this},cancelEmit(t){const e=this.emitQueue.get(t);return e&&(e.forEach(clearTimeout),this.emitQueue.delete(t)),this},emit(t){this.list.has(t)&&this.list.get(t).forEach(e=>{const n=setTimeout(()=>{e(...[].slice.call(arguments,1))},0);this.emitQueue.has(t)||this.emitQueue.set(t,[]),this.emitQueue.get(t).push(n)})}},T=e=>{let{theme:n,type:o,...s}=e;return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\",{viewBox:\"0 0 24 24\",width:\"100%\",height:\"100%\",fill:\"colored\"===n?\"currentColor\":`var(--toastify-icon-color-${o})`,...s})},E={info:function(e){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(T,{...e},react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\",{d:\"M12 0a12 12 0 1012 12A12.013 12.013 0 0012 0zm.25 5a1.5 1.5 0 11-1.5 1.5 1.5 1.5 0 011.5-1.5zm2.25 13.5h-4a1 1 0 010-2h.75a.25.25 0 00.25-.25v-4.5a.25.25 0 00-.25-.25h-.75a1 1 0 010-2h1a2 2 0 012 2v4.75a.25.25 0 00.25.25h.75a1 1 0 110 2z\"}))},warning:function(e){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(T,{...e},react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\",{d:\"M23.32 17.191L15.438 2.184C14.728.833 13.416 0 11.996 0c-1.42 0-2.733.833-3.443 2.184L.533 17.448a4.744 4.744 0 000 4.368C1.243 23.167 2.555 24 3.975 24h16.05C22.22 24 24 22.044 24 19.632c0-.904-.251-1.746-.68-2.44zm-9.622 1.46c0 1.033-.724 1.823-1.698 1.823s-1.698-.79-1.698-1.822v-.043c0-1.028.724-1.822 1.698-1.822s1.698.79 1.698 1.822v.043zm.039-12.285l-.84 8.06c-.057.581-.408.943-.897.943-.49 0-.84-.367-.896-.942l-.84-8.065c-.057-.624.25-1.095.779-1.095h1.91c.528.005.84.476.784 1.1z\"}))},success:function(e){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(T,{...e},react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\",{d:\"M12 0a12 12 0 1012 12A12.014 12.014 0 0012 0zm6.927 8.2l-6.845 9.289a1.011 1.011 0 01-1.43.188l-4.888-3.908a1 1 0 111.25-1.562l4.076 3.261 6.227-8.451a1 1 0 111.61 1.183z\"}))},error:function(e){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(T,{...e},react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\",{d:\"M11.983 0a12.206 12.206 0 00-8.51 3.653A11.8 11.8 0 000 12.207 11.779 11.779 0 0011.8 24h.214A12.111 12.111 0 0024 11.791 11.766 11.766 0 0011.983 0zM10.5 16.542a1.476 1.476 0 011.449-1.53h.027a1.527 1.527 0 011.523 1.47 1.475 1.475 0 01-1.449 1.53h-.027a1.529 1.529 0 01-1.523-1.47zM11 12.5v-6a1 1 0 012 0v6a1 1 0 11-2 0z\"}))},spinner:function(){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\",{className:\"Toastify__spinner\"})}};function C(t){const[,o]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)(t=>t+1,0),[l,c]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]),g=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null),h=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(new Map).current,T=t=>-1!==l.indexOf(t),C=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({toastKey:1,displayedToast:0,count:0,queue:[],props:t,containerId:null,isToastActive:T,getToast:t=>h.get(t)}).current;function b(t){let{containerId:e}=t;const{limit:n}=C.props;!n||e&&C.containerId!==e||(C.count-=C.queue.length,C.queue=[])}function I(t){c(e=>null==t?[]:e.filter(e=>e!==t))}function _(){const{toastContent:t,toastProps:e,staleId:n}=C.queue.shift();O(t,e,n)}function L(t,n){let{delay:s,staleId:r,...i}=n;if(!f(t)||function(t){return!g.current||C.props.enableMultiContainer&&t.containerId!==C.props.containerId||h.has(t.toastId)&&null==t.updateId}(i))return;const{toastId:l,updateId:c,data:T}=i,{props:b}=C,L=()=>I(l),N=null==c;N&&C.count++;const M={...b,style:b.toastStyle,key:C.toastKey++,...Object.fromEntries(Object.entries(i).filter(t=>{let[e,n]=t;return null!=n})),toastId:l,updateId:c,data:T,closeToast:L,isIn:!1,className:m(i.className||b.toastClassName),bodyClassName:m(i.bodyClassName||b.bodyClassName),progressClassName:m(i.progressClassName||b.progressClassName),autoClose:!i.isLoading&&(R=i.autoClose,w=b.autoClose,!1===R||u(R)&&R>0?R:w),deleteToast(){const t=y(h.get(l),\"removed\");h.delete(l),v.emit(4,t);const e=C.queue.length;if(C.count=null==l?C.count-C.displayedToast:C.count-1,C.count<0&&(C.count=0),e>0){const t=null==l?C.props.limit:1;if(1===e||1===t)C.displayedToast++,_();else{const n=t>e?e:t;C.displayedToast=n;for(let t=0;t<n;t++)_()}}else o()}};var R,w;M.iconOut=function(t){let{theme:n,type:o,isLoading:s,icon:r}=t,i=null;const l={theme:n,type:o};return!1===r||(p(r)?i=r(l):(0,react__WEBPACK_IMPORTED_MODULE_0__.isValidElement)(r)?i=(0,react__WEBPACK_IMPORTED_MODULE_0__.cloneElement)(r,l):d(r)||u(r)?i=r:s?i=E.spinner():(t=>t in E)(o)&&(i=E[o](l))),i}(M),p(i.onOpen)&&(M.onOpen=i.onOpen),p(i.onClose)&&(M.onClose=i.onClose),M.closeButton=b.closeButton,!1===i.closeButton||f(i.closeButton)?M.closeButton=i.closeButton:!0===i.closeButton&&(M.closeButton=!f(b.closeButton)||b.closeButton);let x=t;(0,react__WEBPACK_IMPORTED_MODULE_0__.isValidElement)(t)&&!d(t.type)?x=(0,react__WEBPACK_IMPORTED_MODULE_0__.cloneElement)(t,{closeToast:L,toastProps:M,data:T}):p(t)&&(x=t({closeToast:L,toastProps:M,data:T})),b.limit&&b.limit>0&&C.count>b.limit&&N?C.queue.push({toastContent:x,toastProps:M,staleId:r}):u(s)?setTimeout(()=>{O(x,M,r)},s):O(x,M,r)}function O(t,e,n){const{toastId:o}=e;n&&h.delete(n);const s={content:t,props:e};h.set(o,s),c(t=>[...t,o].filter(t=>t!==n)),v.emit(4,y(s,null==s.props.updateId?\"added\":\"updated\"))}return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>(C.containerId=t.containerId,v.cancelEmit(3).on(0,L).on(1,t=>g.current&&I(t)).on(5,b).emit(2,C),()=>{h.clear(),v.emit(3,C)}),[]),(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{C.props=t,C.isToastActive=T,C.displayedToast=l.length}),{getToastToRender:function(e){const n=new Map,o=Array.from(h.values());return t.newestOnTop&&o.reverse(),o.forEach(t=>{const{position:e}=t.props;n.has(e)||n.set(e,[]),n.get(e).push(t)}),Array.from(n,t=>e(t[0],t[1]))},containerRef:g,isToastActive:T}}function b(t){return t.targetTouches&&t.targetTouches.length>=1?t.targetTouches[0].clientX:t.clientX}function I(t){return t.targetTouches&&t.targetTouches.length>=1?t.targetTouches[0].clientY:t.clientY}function _(t){const[o,a]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1),[r,l]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1),c=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null),u=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({start:0,x:0,y:0,delta:0,removalDistance:0,canCloseOnClick:!0,canDrag:!1,boundingRect:null,didMove:!1}).current,d=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(t),{autoClose:m,pauseOnHover:f,closeToast:g,onClick:h,closeOnClick:y}=t;function v(e){if(t.draggable){\"touchstart\"===e.nativeEvent.type&&e.nativeEvent.preventDefault(),u.didMove=!1,document.addEventListener(\"mousemove\",_),document.addEventListener(\"mouseup\",L),document.addEventListener(\"touchmove\",_),document.addEventListener(\"touchend\",L);const n=c.current;u.canCloseOnClick=!0,u.canDrag=!0,u.boundingRect=n.getBoundingClientRect(),n.style.transition=\"\",u.x=b(e.nativeEvent),u.y=I(e.nativeEvent),\"x\"===t.draggableDirection?(u.start=u.x,u.removalDistance=n.offsetWidth*(t.draggablePercent/100)):(u.start=u.y,u.removalDistance=n.offsetHeight*(80===t.draggablePercent?1.5*t.draggablePercent:t.draggablePercent/100))}}function T(e){if(u.boundingRect){const{top:n,bottom:o,left:s,right:a}=u.boundingRect;\"touchend\"!==e.nativeEvent.type&&t.pauseOnHover&&u.x>=s&&u.x<=a&&u.y>=n&&u.y<=o?C():E()}}function E(){a(!0)}function C(){a(!1)}function _(e){const n=c.current;u.canDrag&&n&&(u.didMove=!0,o&&C(),u.x=b(e),u.y=I(e),u.delta=\"x\"===t.draggableDirection?u.x-u.start:u.y-u.start,u.start!==u.x&&(u.canCloseOnClick=!1),n.style.transform=`translate${t.draggableDirection}(${u.delta}px)`,n.style.opacity=\"\"+(1-Math.abs(u.delta/u.removalDistance)))}function L(){document.removeEventListener(\"mousemove\",_),document.removeEventListener(\"mouseup\",L),document.removeEventListener(\"touchmove\",_),document.removeEventListener(\"touchend\",L);const e=c.current;if(u.canDrag&&u.didMove&&e){if(u.canDrag=!1,Math.abs(u.delta)>u.removalDistance)return l(!0),void t.closeToast();e.style.transition=\"transform 0.2s, opacity 0.2s\",e.style.transform=`translate${t.draggableDirection}(0)`,e.style.opacity=\"1\"}}(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{d.current=t}),(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>(c.current&&c.current.addEventListener(\"d\",E,{once:!0}),p(t.onOpen)&&t.onOpen((0,react__WEBPACK_IMPORTED_MODULE_0__.isValidElement)(t.children)&&t.children.props),()=>{const t=d.current;p(t.onClose)&&t.onClose((0,react__WEBPACK_IMPORTED_MODULE_0__.isValidElement)(t.children)&&t.children.props)}),[]),(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>(t.pauseOnFocusLoss&&(document.hasFocus()||C(),window.addEventListener(\"focus\",E),window.addEventListener(\"blur\",C)),()=>{t.pauseOnFocusLoss&&(window.removeEventListener(\"focus\",E),window.removeEventListener(\"blur\",C))}),[t.pauseOnFocusLoss]);const O={onMouseDown:v,onTouchStart:v,onMouseUp:T,onTouchEnd:T};return m&&f&&(O.onMouseEnter=C,O.onMouseLeave=E),y&&(O.onClick=t=>{h&&h(t),u.canCloseOnClick&&g()}),{playToast:E,pauseToast:C,isRunning:o,preventExitTransition:r,toastRef:c,eventHandlers:O}}function L(e){let{closeToast:n,theme:o,ariaLabel:s=\"close\"}=e;return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\",{className:`Toastify__close-button Toastify__close-button--${o}`,type:\"button\",onClick:t=>{t.stopPropagation(),n(t)},\"aria-label\":s},react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\",{\"aria-hidden\":\"true\",viewBox:\"0 0 14 16\"},react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\",{fillRule:\"evenodd\",d:\"M7.71 8.23l3.75 3.75-1.48 1.48-3.75-3.75-3.75 3.75L1 11.98l3.75-3.75L1 4.48 2.48 3l3.75 3.75L9.98 3l1.48 1.48-3.75 3.75z\"})))}function O(e){let{delay:n,isRunning:o,closeToast:s,type:a=\"default\",hide:r,className:i,style:l,controlledProgress:u,progress:d,rtl:m,isIn:f,theme:g}=e;const h=r||u&&0===d,y={...l,animationDuration:`${n}ms`,animationPlayState:o?\"running\":\"paused\",opacity:h?0:1};u&&(y.transform=`scaleX(${d})`);const v=(0,clsx__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"Toastify__progress-bar\",u?\"Toastify__progress-bar--controlled\":\"Toastify__progress-bar--animated\",`Toastify__progress-bar-theme--${g}`,`Toastify__progress-bar--${a}`,{\"Toastify__progress-bar--rtl\":m}),T=p(i)?i({rtl:m,type:a,defaultClassName:v}):(0,clsx__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(v,i);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\",{role:\"progressbar\",\"aria-hidden\":h?\"true\":\"false\",\"aria-label\":\"notification timer\",className:T,style:y,[u&&d>=1?\"onTransitionEnd\":\"onAnimationEnd\"]:u&&d<1?null:()=>{f&&s()}})}const N=n=>{const{isRunning:o,preventExitTransition:s,toastRef:r,eventHandlers:i}=_(n),{closeButton:l,children:u,autoClose:d,onClick:m,type:f,hideProgressBar:g,closeToast:h,transition:y,position:v,className:T,style:E,bodyClassName:C,bodyStyle:b,progressClassName:I,progressStyle:N,updateId:M,role:R,progress:w,rtl:x,toastId:$,deleteToast:k,isIn:P,isLoading:B,iconOut:D,closeOnClick:A,theme:z}=n,F=(0,clsx__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"Toastify__toast\",`Toastify__toast-theme--${z}`,`Toastify__toast--${f}`,{\"Toastify__toast--rtl\":x},{\"Toastify__toast--close-on-click\":A}),H=p(T)?T({rtl:x,position:v,type:f,defaultClassName:F}):(0,clsx__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(F,T),S=!!w||!d,q={closeToast:h,type:f,theme:z};let Q=null;return!1===l||(Q=p(l)?l(q):(0,react__WEBPACK_IMPORTED_MODULE_0__.isValidElement)(l)?(0,react__WEBPACK_IMPORTED_MODULE_0__.cloneElement)(l,q):L(q)),react__WEBPACK_IMPORTED_MODULE_0__.createElement(y,{isIn:P,done:k,position:v,preventExitTransition:s,nodeRef:r},react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\",{id:$,onClick:m,className:H,...i,style:E,ref:r},react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\",{...P&&{role:R},className:p(C)?C({type:f}):(0,clsx__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"Toastify__toast-body\",C),style:b},null!=D&&react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\",{className:(0,clsx__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"Toastify__toast-icon\",{\"Toastify--animate-icon Toastify__zoom-enter\":!B})},D),react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\",null,u)),Q,react__WEBPACK_IMPORTED_MODULE_0__.createElement(O,{...M&&!S?{key:`pb-${M}`}:{},rtl:x,theme:z,delay:d,isRunning:o,isIn:P,closeToast:h,hide:g,type:f,style:N,className:I,controlledProgress:S,progress:w||0})))},M=function(t,e){return void 0===e&&(e=!1),{enter:`Toastify--animate Toastify__${t}-enter`,exit:`Toastify--animate Toastify__${t}-exit`,appendPosition:e}},R=h(M(\"bounce\",!0)),w=h(M(\"slide\",!0)),x=h(M(\"zoom\")),$=h(M(\"flip\")),k=(0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((e,n)=>{const{getToastToRender:o,containerRef:a,isToastActive:r}=C(e),{className:i,style:l,rtl:u,containerId:d}=e;function f(t){const e=(0,clsx__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"Toastify__toast-container\",`Toastify__toast-container--${t}`,{\"Toastify__toast-container--rtl\":u});return p(i)?i({position:t,rtl:u,defaultClassName:e}):(0,clsx__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(e,m(i))}return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{n&&(n.current=a.current)},[]),react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\",{ref:a,className:\"Toastify\",id:d},o((e,n)=>{const o=n.length?{...l}:{...l,pointerEvents:\"none\"};return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\",{className:f(e),style:o,key:`container-${e}`},n.map((e,o)=>{let{content:s,props:a}=e;return react__WEBPACK_IMPORTED_MODULE_0__.createElement(N,{...a,isIn:r(a.toastId),style:{...a.style,\"--nth\":o+1,\"--len\":n.length},key:`toast-${a.key}`},s)}))}))});k.displayName=\"ToastContainer\",k.defaultProps={position:\"top-right\",transition:R,autoClose:5e3,closeButton:L,pauseOnHover:!0,pauseOnFocusLoss:!0,closeOnClick:!0,draggable:!0,draggablePercent:80,draggableDirection:\"x\",role:\"alert\",theme:\"light\"};let P,B=new Map,D=[],A=1;function z(){return\"\"+A++}function F(t){return t&&(d(t.toastId)||u(t.toastId))?t.toastId:z()}function H(t,e){return B.size>0?v.emit(0,t,e):D.push({content:t,options:e}),e.toastId}function S(t,e){return{...e,type:e&&e.type||t,toastId:F(e)}}function q(t){return(e,n)=>H(e,S(t,n))}function Q(t,e){return H(t,S(\"default\",e))}Q.loading=(t,e)=>H(t,S(\"default\",{isLoading:!0,autoClose:!1,closeOnClick:!1,closeButton:!1,draggable:!1,...e})),Q.promise=function(t,e,n){let o,{pending:s,error:a,success:r}=e;s&&(o=d(s)?Q.loading(s,n):Q.loading(s.render,{...n,...s}));const i={isLoading:null,autoClose:null,closeOnClick:null,closeButton:null,draggable:null},l=(t,e,s)=>{if(null==e)return void Q.dismiss(o);const a={type:t,...i,...n,data:s},r=d(e)?{render:e}:e;return o?Q.update(o,{...a,...r}):Q(r.render,{...a,...r}),s},c=p(t)?t():t;return c.then(t=>l(\"success\",r,t)).catch(t=>l(\"error\",a,t)),c},Q.success=q(\"success\"),Q.info=q(\"info\"),Q.error=q(\"error\"),Q.warning=q(\"warning\"),Q.warn=Q.warning,Q.dark=(t,e)=>H(t,S(\"default\",{theme:\"dark\",...e})),Q.dismiss=t=>{B.size>0?v.emit(1,t):D=D.filter(e=>null!=t&&e.options.toastId!==t)},Q.clearWaitingQueue=function(t){return void 0===t&&(t={}),v.emit(5,t)},Q.isActive=t=>{let e=!1;return B.forEach(n=>{n.isToastActive&&n.isToastActive(t)&&(e=!0)}),e},Q.update=function(t,e){void 0===e&&(e={}),setTimeout(()=>{const n=function(t,e){let{containerId:n}=e;const o=B.get(n||P);return o&&o.getToast(t)}(t,e);if(n){const{props:o,content:s}=n,a={delay:100,...o,...e,toastId:e.toastId||t,updateId:z()};a.toastId!==t&&(a.staleId=t);const r=a.render||s;delete a.render,H(r,a)}},0)},Q.done=t=>{Q.update(t,{progress:1})},Q.onChange=t=>(v.on(4,t),()=>{v.off(4,t)}),Q.POSITION={TOP_LEFT:\"top-left\",TOP_RIGHT:\"top-right\",TOP_CENTER:\"top-center\",BOTTOM_LEFT:\"bottom-left\",BOTTOM_RIGHT:\"bottom-right\",BOTTOM_CENTER:\"bottom-center\"},Q.TYPE={INFO:\"info\",SUCCESS:\"success\",WARNING:\"warning\",ERROR:\"error\",DEFAULT:\"default\"},v.on(2,t=>{P=t.containerId||t,B.set(P,t),D.forEach(t=>{v.emit(0,t.content,t.options)}),D=[]}).on(3,t=>{B.delete(t.containerId||t),0===B.size&&v.off(0).off(1).off(5)});\r\n//# sourceMappingURL=react-toastify.esm.mjs.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yZWFjdC10b2FzdGlmeS9kaXN0L3JlYWN0LXRvYXN0aWZ5LmVzbS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQzhLLHVIQUF1SCxxREFBQyxzQkFBc0Isa0JBQWtCLG9CQUFvQixNQUFNLHVCQUF1QixHQUFHLDJCQUEyQiwwREFBMEQsRUFBRSwrQkFBK0Isd0RBQXdELEVBQUUsRUFBRSxjQUFjLElBQUksd0VBQXdFLEdBQUcsbUJBQW1CLElBQUksc0VBQXNFLEdBQUcsYUFBYSxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLE1BQU0sNkNBQUMsSUFBSSxPQUFPLHNEQUFDLE1BQU0sdUNBQXVDLGdOQUFnTixtR0FBbUcsS0FBSyxnREFBQyxNQUFNLHlCQUF5Qix3REFBd0Qsd0NBQXdDLEVBQUUseUNBQXlDLE1BQU0sZ0RBQWUsQ0FBQywyQ0FBVSxVQUFVLGdCQUFnQixnQkFBZ0IsZ0lBQWdJLHdEQUF3RCxJQUFJLFNBQVMsdUNBQXVDLDJFQUEyRSxVQUFVLE1BQU0sMENBQTBDLCtCQUErQixnQ0FBZ0MsZUFBZSw4QkFBOEIsa0VBQWtFLFNBQVMsK0NBQStDLHdCQUF3QixpQ0FBaUMsSUFBSSw4RUFBOEUsR0FBRyxPQUFPLElBQUksb0JBQW9CLEdBQUcsT0FBTyxnREFBZSxRQUFRLDhHQUE4RyxFQUFFLFFBQVEsRUFBRSxJQUFJLGlCQUFpQixPQUFPLGdEQUFlLElBQUksS0FBSyxDQUFDLGdEQUFlLFNBQVMsa1BBQWtQLEdBQUcscUJBQXFCLE9BQU8sZ0RBQWUsSUFBSSxLQUFLLENBQUMsZ0RBQWUsU0FBUywrZUFBK2UsR0FBRyxxQkFBcUIsT0FBTyxnREFBZSxJQUFJLEtBQUssQ0FBQyxnREFBZSxTQUFTLCtLQUErSyxHQUFHLG1CQUFtQixPQUFPLGdEQUFlLElBQUksS0FBSyxDQUFDLGdEQUFlLFNBQVMsdVVBQXVVLEdBQUcsb0JBQW9CLE9BQU8sZ0RBQWUsUUFBUSw4QkFBOEIsSUFBSSxjQUFjLFVBQVUsaURBQUMsaUJBQWlCLCtDQUFDLE9BQU8sNkNBQUMsU0FBUyw2Q0FBQywyQ0FBMkMsNkNBQUMsRUFBRSwyR0FBMkcsVUFBVSxjQUFjLElBQUksY0FBYyxHQUFHLE1BQU0sUUFBUSxTQUFTLCtEQUErRCxjQUFjLG9DQUFvQyxhQUFhLE1BQU0sc0NBQXNDLGlCQUFpQixTQUFTLGdCQUFnQixJQUFJLHVCQUF1QixHQUFHLHNCQUFzQix3SEFBd0gsV0FBVyxNQUFNLDRCQUE0QixJQUFJLFFBQVEsd0JBQXdCLGFBQWEsU0FBUyw0RkFBNEYsV0FBVyxlQUFlLHlTQUF5Uyw4QkFBOEIsd0JBQXdCLHVCQUF1QixrRkFBa0YsZ0NBQWdDLHVDQUF1QyxLQUFLLGdCQUFnQixtQkFBbUIsWUFBWSxJQUFJLFNBQVMsV0FBVyxRQUFRLHNCQUFzQixJQUFJLGtDQUFrQyxVQUFVLFNBQVMsZ0JBQWdCLDJCQUEyQixxREFBQyxNQUFNLG1EQUFDLG9FQUFvRSwyT0FBMk8sUUFBUSxxREFBQyxrQkFBa0IsbURBQUMsSUFBSSxpQ0FBaUMsY0FBYyxpQ0FBaUMsd0RBQXdELHNDQUFzQyx1QkFBdUIsU0FBUyxhQUFhLGtCQUFrQixNQUFNLFVBQVUsR0FBRyxlQUFlLFNBQVMsbUJBQW1CLG1HQUFtRyxPQUFPLGdEQUFDLDBHQUEwRyxzQkFBc0IsTUFBTSxnREFBQyxNQUFNLHNEQUFzRCxHQUFHLDZCQUE2Qix5Q0FBeUMsZ0RBQWdELE1BQU0sV0FBVyxTQUFTLHVDQUF1QyxnQ0FBZ0MsaUNBQWlDLGNBQWMsdUZBQXVGLGNBQWMsdUZBQXVGLGNBQWMsV0FBVywrQ0FBQyxXQUFXLCtDQUFDLE9BQU8sNkNBQUMsU0FBUyw2Q0FBQyxFQUFFLHFHQUFxRyxZQUFZLDZDQUFDLEtBQUssaUVBQWlFLEdBQUcsY0FBYyxnQkFBZ0IsZ1BBQWdQLGtCQUFrQixxV0FBcVcsY0FBYyxtQkFBbUIsTUFBTSw4QkFBOEIsZ0JBQWdCLHlGQUF5RixhQUFhLE1BQU0sYUFBYSxNQUFNLGNBQWMsa0JBQWtCLG9MQUFvTCxxQkFBcUIsR0FBRyxRQUFRLGlFQUFpRSxhQUFhLDZLQUE2SyxrQkFBa0IsNEJBQTRCLHFGQUFxRixnRkFBZ0YscUJBQXFCLDBCQUEwQixnREFBQyxNQUFNLFlBQVksRUFBRSxnREFBQyxtREFBbUQsUUFBUSx3QkFBd0IscURBQUMscUNBQXFDLGtCQUFrQix3QkFBd0IscURBQUMsZ0NBQWdDLE1BQU0sZ0RBQUMsK0hBQStILGlHQUFpRyx3QkFBd0IsU0FBUyx1REFBdUQsbUVBQW1FLCtCQUErQixHQUFHLHlGQUF5RixjQUFjLElBQUkseUNBQXlDLEdBQUcsT0FBTyxnREFBZSxXQUFXLDREQUE0RCxFQUFFLDRCQUE0Qix5QkFBeUIsZ0JBQWdCLENBQUMsZ0RBQWUsUUFBUSx5Q0FBeUMsQ0FBQyxnREFBZSxTQUFTLGdKQUFnSixJQUFJLGNBQWMsSUFBSSxrSUFBa0ksR0FBRyx1QkFBdUIsMEJBQTBCLEVBQUUsMkRBQTJELDBCQUEwQixFQUFFLElBQUksUUFBUSxnREFBQyxxSUFBcUksRUFBRSw2QkFBNkIsRUFBRSxHQUFHLGdDQUFnQyxZQUFZLGdDQUFnQyxFQUFFLGdEQUFDLE1BQU0sT0FBTyxnREFBZSxRQUFRLHNLQUFzSyxRQUFRLEVBQUUsWUFBWSxNQUFNLCtEQUErRCxPQUFPLGdUQUFnVCxLQUFLLGdEQUFDLDZDQUE2QyxFQUFFLHNCQUFzQixFQUFFLEdBQUcseUJBQXlCLEVBQUUsb0NBQW9DLFlBQVksMkNBQTJDLEVBQUUsZ0RBQUMsbUJBQW1CLDZCQUE2QixXQUFXLDJCQUEyQixxREFBQyxJQUFJLG1EQUFDLFlBQVksZ0RBQWUsSUFBSSwyREFBMkQsQ0FBQyxnREFBZSxRQUFRLDhDQUE4QyxDQUFDLGdEQUFlLFFBQVEsT0FBTyxPQUFPLG1CQUFtQixPQUFPLEVBQUUsZ0RBQUMsbUNBQW1DLFVBQVUsZ0RBQWUsUUFBUSxVQUFVLGdEQUFDLHlCQUF5QixpREFBaUQsRUFBRSxJQUFJLGdEQUFlLGtCQUFrQixnREFBZSxJQUFJLFVBQVUsVUFBVSxFQUFFLEVBQUUsR0FBRyw0SEFBNEgsSUFBSSxpQkFBaUIsMkJBQTJCLHFDQUFxQyxFQUFFLDRDQUE0QyxFQUFFLHlCQUF5Qix3RUFBd0UsaURBQUMsU0FBUyxNQUFNLGtEQUFrRCxPQUFPLHdDQUF3QyxHQUFHLGNBQWMsUUFBUSxnREFBQywyREFBMkQsRUFBRSxHQUFHLG1DQUFtQyxFQUFFLGVBQWUsb0NBQW9DLEVBQUUsZ0RBQUMsU0FBUyxPQUFPLGdEQUFDLE1BQU0seUJBQXlCLEtBQUssZ0RBQWUsUUFBUSxnQ0FBZ0MsV0FBVyxrQkFBa0IsS0FBSyxFQUFFLDJCQUEyQixPQUFPLGdEQUFlLFFBQVEsd0NBQXdDLEVBQUUsRUFBRSxlQUFlLElBQUksa0JBQWtCLEdBQUcsT0FBTyxnREFBZSxJQUFJLDhCQUE4Qix3Q0FBd0MsY0FBYyxNQUFNLEVBQUUsSUFBSSxHQUFHLEdBQUcsRUFBRSwrQ0FBK0Msc01BQXNNLHlCQUF5QixhQUFhLGFBQWEsY0FBYyxxREFBcUQsZ0JBQWdCLHNDQUFzQyxvQkFBb0IsWUFBWSxnQkFBZ0IsT0FBTyxxQ0FBcUMsY0FBYyx5QkFBeUIsZ0JBQWdCLDJCQUEyQixrQ0FBa0MsMkVBQTJFLDZCQUE2QixPQUFPLDRCQUE0QixHQUFHLDhDQUE4QyxVQUFVLEdBQUcsU0FBUyxnRkFBZ0YsYUFBYSxvQ0FBb0MsU0FBUyx3QkFBd0IsU0FBUyxTQUFTLEdBQUcscUJBQXFCLFVBQVUsY0FBYyxVQUFVLElBQUksY0FBYyw4REFBOEQsbUlBQW1JLGtCQUFrQixpQkFBaUIsbUVBQW1FLGlDQUFpQyx3QkFBd0IsY0FBYyxnQkFBZ0IsU0FBUyxxQkFBcUIsNENBQTRDLElBQUksd0JBQXdCLGlCQUFpQixrQkFBa0Isc0JBQXNCLElBQUksY0FBYyxHQUFHLG9CQUFvQix3QkFBd0IsTUFBTSxNQUFNLE1BQU0sa0JBQWtCLE1BQU0sdURBQXVELDZCQUE2QixvQkFBb0Isd0JBQXdCLElBQUksWUFBWSxZQUFZLFdBQVcsRUFBRSwrQkFBK0IsV0FBVyxjQUFjLHNKQUFzSixTQUFTLGdGQUFnRixZQUFZLDRDQUE0Qyw4QkFBOEIsT0FBTyxXQUFXLDhEQUE4RCxFQUEwSztBQUN2c2UiLCJzb3VyY2VzIjpbIkQ6XFxEb19hbjJcXGxlbmRodWJfdjJcXGxlbmRodWItZnJvbnRlbmQtbmV4dGpzXFxub2RlX21vZHVsZXNcXHJlYWN0LXRvYXN0aWZ5XFxkaXN0XFxyZWFjdC10b2FzdGlmeS5lc20ubWpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgY2xpZW50JztcclxuaW1wb3J0IHQse2lzVmFsaWRFbGVtZW50IGFzIGUsdXNlUmVmIGFzIG4sdXNlTGF5b3V0RWZmZWN0IGFzIG8sdXNlRWZmZWN0IGFzIHMsY2xvbmVFbGVtZW50IGFzIGEsdXNlUmVkdWNlciBhcyByLHVzZVN0YXRlIGFzIGksZm9yd2FyZFJlZiBhcyBsfWZyb21cInJlYWN0XCI7aW1wb3J0IGMgZnJvbVwiY2xzeFwiO2NvbnN0IHU9dD0+XCJudW1iZXJcIj09dHlwZW9mIHQmJiFpc05hTih0KSxkPXQ9Plwic3RyaW5nXCI9PXR5cGVvZiB0LHA9dD0+XCJmdW5jdGlvblwiPT10eXBlb2YgdCxtPXQ9PmQodCl8fHAodCk/dDpudWxsLGY9dD0+ZSh0KXx8ZCh0KXx8cCh0KXx8dSh0KTtmdW5jdGlvbiBnKHQsZSxuKXt2b2lkIDA9PT1uJiYobj0zMDApO2NvbnN0e3Njcm9sbEhlaWdodDpvLHN0eWxlOnN9PXQ7cmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpPT57cy5taW5IZWlnaHQ9XCJpbml0aWFsXCIscy5oZWlnaHQ9bytcInB4XCIscy50cmFuc2l0aW9uPWBhbGwgJHtufW1zYCxyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCk9PntzLmhlaWdodD1cIjBcIixzLnBhZGRpbmc9XCIwXCIscy5tYXJnaW49XCIwXCIsc2V0VGltZW91dChlLG4pfSl9KX1mdW5jdGlvbiBoKGUpe2xldHtlbnRlcjphLGV4aXQ6cixhcHBlbmRQb3NpdGlvbjppPSExLGNvbGxhcHNlOmw9ITAsY29sbGFwc2VEdXJhdGlvbjpjPTMwMH09ZTtyZXR1cm4gZnVuY3Rpb24oZSl7bGV0e2NoaWxkcmVuOnUscG9zaXRpb246ZCxwcmV2ZW50RXhpdFRyYW5zaXRpb246cCxkb25lOm0sbm9kZVJlZjpmLGlzSW46aH09ZTtjb25zdCB5PWk/YCR7YX0tLSR7ZH1gOmEsdj1pP2Ake3J9LS0ke2R9YDpyLFQ9bigwKTtyZXR1cm4gbygoKT0+e2NvbnN0IHQ9Zi5jdXJyZW50LGU9eS5zcGxpdChcIiBcIiksbj1vPT57by50YXJnZXQ9PT1mLmN1cnJlbnQmJih0LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwiZFwiKSksdC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYW5pbWF0aW9uZW5kXCIsbiksdC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYW5pbWF0aW9uY2FuY2VsXCIsbiksMD09PVQuY3VycmVudCYmXCJhbmltYXRpb25jYW5jZWxcIiE9PW8udHlwZSYmdC5jbGFzc0xpc3QucmVtb3ZlKC4uLmUpKX07dC5jbGFzc0xpc3QuYWRkKC4uLmUpLHQuYWRkRXZlbnRMaXN0ZW5lcihcImFuaW1hdGlvbmVuZFwiLG4pLHQuYWRkRXZlbnRMaXN0ZW5lcihcImFuaW1hdGlvbmNhbmNlbFwiLG4pfSxbXSkscygoKT0+e2NvbnN0IHQ9Zi5jdXJyZW50LGU9KCk9Pnt0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhbmltYXRpb25lbmRcIixlKSxsP2codCxtLGMpOm0oKX07aHx8KHA/ZSgpOihULmN1cnJlbnQ9MSx0LmNsYXNzTmFtZSs9YCAke3Z9YCx0LmFkZEV2ZW50TGlzdGVuZXIoXCJhbmltYXRpb25lbmRcIixlKSkpfSxbaF0pLHQuY3JlYXRlRWxlbWVudCh0LkZyYWdtZW50LG51bGwsdSl9fWZ1bmN0aW9uIHkodCxlKXtyZXR1cm4gbnVsbCE9dD97Y29udGVudDp0LmNvbnRlbnQsY29udGFpbmVySWQ6dC5wcm9wcy5jb250YWluZXJJZCxpZDp0LnByb3BzLnRvYXN0SWQsdGhlbWU6dC5wcm9wcy50aGVtZSx0eXBlOnQucHJvcHMudHlwZSxkYXRhOnQucHJvcHMuZGF0YXx8e30saXNMb2FkaW5nOnQucHJvcHMuaXNMb2FkaW5nLGljb246dC5wcm9wcy5pY29uLHN0YXR1czplfTp7fX1jb25zdCB2PXtsaXN0Om5ldyBNYXAsZW1pdFF1ZXVlOm5ldyBNYXAsb24odCxlKXtyZXR1cm4gdGhpcy5saXN0Lmhhcyh0KXx8dGhpcy5saXN0LnNldCh0LFtdKSx0aGlzLmxpc3QuZ2V0KHQpLnB1c2goZSksdGhpc30sb2ZmKHQsZSl7aWYoZSl7Y29uc3Qgbj10aGlzLmxpc3QuZ2V0KHQpLmZpbHRlcih0PT50IT09ZSk7cmV0dXJuIHRoaXMubGlzdC5zZXQodCxuKSx0aGlzfXJldHVybiB0aGlzLmxpc3QuZGVsZXRlKHQpLHRoaXN9LGNhbmNlbEVtaXQodCl7Y29uc3QgZT10aGlzLmVtaXRRdWV1ZS5nZXQodCk7cmV0dXJuIGUmJihlLmZvckVhY2goY2xlYXJUaW1lb3V0KSx0aGlzLmVtaXRRdWV1ZS5kZWxldGUodCkpLHRoaXN9LGVtaXQodCl7dGhpcy5saXN0Lmhhcyh0KSYmdGhpcy5saXN0LmdldCh0KS5mb3JFYWNoKGU9Pntjb25zdCBuPXNldFRpbWVvdXQoKCk9PntlKC4uLltdLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpKX0sMCk7dGhpcy5lbWl0UXVldWUuaGFzKHQpfHx0aGlzLmVtaXRRdWV1ZS5zZXQodCxbXSksdGhpcy5lbWl0UXVldWUuZ2V0KHQpLnB1c2gobil9KX19LFQ9ZT0+e2xldHt0aGVtZTpuLHR5cGU6bywuLi5zfT1lO3JldHVybiB0LmNyZWF0ZUVsZW1lbnQoXCJzdmdcIix7dmlld0JveDpcIjAgMCAyNCAyNFwiLHdpZHRoOlwiMTAwJVwiLGhlaWdodDpcIjEwMCVcIixmaWxsOlwiY29sb3JlZFwiPT09bj9cImN1cnJlbnRDb2xvclwiOmB2YXIoLS10b2FzdGlmeS1pY29uLWNvbG9yLSR7b30pYCwuLi5zfSl9LEU9e2luZm86ZnVuY3Rpb24oZSl7cmV0dXJuIHQuY3JlYXRlRWxlbWVudChULHsuLi5lfSx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIse2Q6XCJNMTIgMGExMiAxMiAwIDEwMTIgMTJBMTIuMDEzIDEyLjAxMyAwIDAwMTIgMHptLjI1IDVhMS41IDEuNSAwIDExLTEuNSAxLjUgMS41IDEuNSAwIDAxMS41LTEuNXptMi4yNSAxMy41aC00YTEgMSAwIDAxMC0yaC43NWEuMjUuMjUgMCAwMC4yNS0uMjV2LTQuNWEuMjUuMjUgMCAwMC0uMjUtLjI1aC0uNzVhMSAxIDAgMDEwLTJoMWEyIDIgMCAwMTIgMnY0Ljc1YS4yNS4yNSAwIDAwLjI1LjI1aC43NWExIDEgMCAxMTAgMnpcIn0pKX0sd2FybmluZzpmdW5jdGlvbihlKXtyZXR1cm4gdC5jcmVhdGVFbGVtZW50KFQsey4uLmV9LHQuY3JlYXRlRWxlbWVudChcInBhdGhcIix7ZDpcIk0yMy4zMiAxNy4xOTFMMTUuNDM4IDIuMTg0QzE0LjcyOC44MzMgMTMuNDE2IDAgMTEuOTk2IDBjLTEuNDIgMC0yLjczMy44MzMtMy40NDMgMi4xODRMLjUzMyAxNy40NDhhNC43NDQgNC43NDQgMCAwMDAgNC4zNjhDMS4yNDMgMjMuMTY3IDIuNTU1IDI0IDMuOTc1IDI0aDE2LjA1QzIyLjIyIDI0IDI0IDIyLjA0NCAyNCAxOS42MzJjMC0uOTA0LS4yNTEtMS43NDYtLjY4LTIuNDR6bS05LjYyMiAxLjQ2YzAgMS4wMzMtLjcyNCAxLjgyMy0xLjY5OCAxLjgyM3MtMS42OTgtLjc5LTEuNjk4LTEuODIydi0uMDQzYzAtMS4wMjguNzI0LTEuODIyIDEuNjk4LTEuODIyczEuNjk4Ljc5IDEuNjk4IDEuODIydi4wNDN6bS4wMzktMTIuMjg1bC0uODQgOC4wNmMtLjA1Ny41ODEtLjQwOC45NDMtLjg5Ny45NDMtLjQ5IDAtLjg0LS4zNjctLjg5Ni0uOTQybC0uODQtOC4wNjVjLS4wNTctLjYyNC4yNS0xLjA5NS43NzktMS4wOTVoMS45MWMuNTI4LjAwNS44NC40NzYuNzg0IDEuMXpcIn0pKX0sc3VjY2VzczpmdW5jdGlvbihlKXtyZXR1cm4gdC5jcmVhdGVFbGVtZW50KFQsey4uLmV9LHQuY3JlYXRlRWxlbWVudChcInBhdGhcIix7ZDpcIk0xMiAwYTEyIDEyIDAgMTAxMiAxMkExMi4wMTQgMTIuMDE0IDAgMDAxMiAwem02LjkyNyA4LjJsLTYuODQ1IDkuMjg5YTEuMDExIDEuMDExIDAgMDEtMS40My4xODhsLTQuODg4LTMuOTA4YTEgMSAwIDExMS4yNS0xLjU2Mmw0LjA3NiAzLjI2MSA2LjIyNy04LjQ1MWExIDEgMCAxMTEuNjEgMS4xODN6XCJ9KSl9LGVycm9yOmZ1bmN0aW9uKGUpe3JldHVybiB0LmNyZWF0ZUVsZW1lbnQoVCx7Li4uZX0sdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLHtkOlwiTTExLjk4MyAwYTEyLjIwNiAxMi4yMDYgMCAwMC04LjUxIDMuNjUzQTExLjggMTEuOCAwIDAwMCAxMi4yMDcgMTEuNzc5IDExLjc3OSAwIDAwMTEuOCAyNGguMjE0QTEyLjExMSAxMi4xMTEgMCAwMDI0IDExLjc5MSAxMS43NjYgMTEuNzY2IDAgMDAxMS45ODMgMHpNMTAuNSAxNi41NDJhMS40NzYgMS40NzYgMCAwMTEuNDQ5LTEuNTNoLjAyN2ExLjUyNyAxLjUyNyAwIDAxMS41MjMgMS40NyAxLjQ3NSAxLjQ3NSAwIDAxLTEuNDQ5IDEuNTNoLS4wMjdhMS41MjkgMS41MjkgMCAwMS0xLjUyMy0xLjQ3ek0xMSAxMi41di02YTEgMSAwIDAxMiAwdjZhMSAxIDAgMTEtMiAwelwifSkpfSxzcGlubmVyOmZ1bmN0aW9uKCl7cmV0dXJuIHQuY3JlYXRlRWxlbWVudChcImRpdlwiLHtjbGFzc05hbWU6XCJUb2FzdGlmeV9fc3Bpbm5lclwifSl9fTtmdW5jdGlvbiBDKHQpe2NvbnN0WyxvXT1yKHQ9PnQrMSwwKSxbbCxjXT1pKFtdKSxnPW4obnVsbCksaD1uKG5ldyBNYXApLmN1cnJlbnQsVD10PT4tMSE9PWwuaW5kZXhPZih0KSxDPW4oe3RvYXN0S2V5OjEsZGlzcGxheWVkVG9hc3Q6MCxjb3VudDowLHF1ZXVlOltdLHByb3BzOnQsY29udGFpbmVySWQ6bnVsbCxpc1RvYXN0QWN0aXZlOlQsZ2V0VG9hc3Q6dD0+aC5nZXQodCl9KS5jdXJyZW50O2Z1bmN0aW9uIGIodCl7bGV0e2NvbnRhaW5lcklkOmV9PXQ7Y29uc3R7bGltaXQ6bn09Qy5wcm9wczshbnx8ZSYmQy5jb250YWluZXJJZCE9PWV8fChDLmNvdW50LT1DLnF1ZXVlLmxlbmd0aCxDLnF1ZXVlPVtdKX1mdW5jdGlvbiBJKHQpe2MoZT0+bnVsbD09dD9bXTplLmZpbHRlcihlPT5lIT09dCkpfWZ1bmN0aW9uIF8oKXtjb25zdHt0b2FzdENvbnRlbnQ6dCx0b2FzdFByb3BzOmUsc3RhbGVJZDpufT1DLnF1ZXVlLnNoaWZ0KCk7Tyh0LGUsbil9ZnVuY3Rpb24gTCh0LG4pe2xldHtkZWxheTpzLHN0YWxlSWQ6ciwuLi5pfT1uO2lmKCFmKHQpfHxmdW5jdGlvbih0KXtyZXR1cm4hZy5jdXJyZW50fHxDLnByb3BzLmVuYWJsZU11bHRpQ29udGFpbmVyJiZ0LmNvbnRhaW5lcklkIT09Qy5wcm9wcy5jb250YWluZXJJZHx8aC5oYXModC50b2FzdElkKSYmbnVsbD09dC51cGRhdGVJZH0oaSkpcmV0dXJuO2NvbnN0e3RvYXN0SWQ6bCx1cGRhdGVJZDpjLGRhdGE6VH09aSx7cHJvcHM6Yn09QyxMPSgpPT5JKGwpLE49bnVsbD09YztOJiZDLmNvdW50Kys7Y29uc3QgTT17Li4uYixzdHlsZTpiLnRvYXN0U3R5bGUsa2V5OkMudG9hc3RLZXkrKywuLi5PYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMoaSkuZmlsdGVyKHQ9PntsZXRbZSxuXT10O3JldHVybiBudWxsIT1ufSkpLHRvYXN0SWQ6bCx1cGRhdGVJZDpjLGRhdGE6VCxjbG9zZVRvYXN0OkwsaXNJbjohMSxjbGFzc05hbWU6bShpLmNsYXNzTmFtZXx8Yi50b2FzdENsYXNzTmFtZSksYm9keUNsYXNzTmFtZTptKGkuYm9keUNsYXNzTmFtZXx8Yi5ib2R5Q2xhc3NOYW1lKSxwcm9ncmVzc0NsYXNzTmFtZTptKGkucHJvZ3Jlc3NDbGFzc05hbWV8fGIucHJvZ3Jlc3NDbGFzc05hbWUpLGF1dG9DbG9zZTohaS5pc0xvYWRpbmcmJihSPWkuYXV0b0Nsb3NlLHc9Yi5hdXRvQ2xvc2UsITE9PT1SfHx1KFIpJiZSPjA/Ujp3KSxkZWxldGVUb2FzdCgpe2NvbnN0IHQ9eShoLmdldChsKSxcInJlbW92ZWRcIik7aC5kZWxldGUobCksdi5lbWl0KDQsdCk7Y29uc3QgZT1DLnF1ZXVlLmxlbmd0aDtpZihDLmNvdW50PW51bGw9PWw/Qy5jb3VudC1DLmRpc3BsYXllZFRvYXN0OkMuY291bnQtMSxDLmNvdW50PDAmJihDLmNvdW50PTApLGU+MCl7Y29uc3QgdD1udWxsPT1sP0MucHJvcHMubGltaXQ6MTtpZigxPT09ZXx8MT09PXQpQy5kaXNwbGF5ZWRUb2FzdCsrLF8oKTtlbHNle2NvbnN0IG49dD5lP2U6dDtDLmRpc3BsYXllZFRvYXN0PW47Zm9yKGxldCB0PTA7dDxuO3QrKylfKCl9fWVsc2UgbygpfX07dmFyIFIsdztNLmljb25PdXQ9ZnVuY3Rpb24odCl7bGV0e3RoZW1lOm4sdHlwZTpvLGlzTG9hZGluZzpzLGljb246cn09dCxpPW51bGw7Y29uc3QgbD17dGhlbWU6bix0eXBlOm99O3JldHVybiExPT09cnx8KHAocik/aT1yKGwpOmUocik/aT1hKHIsbCk6ZChyKXx8dShyKT9pPXI6cz9pPUUuc3Bpbm5lcigpOih0PT50IGluIEUpKG8pJiYoaT1FW29dKGwpKSksaX0oTSkscChpLm9uT3BlbikmJihNLm9uT3Blbj1pLm9uT3BlbikscChpLm9uQ2xvc2UpJiYoTS5vbkNsb3NlPWkub25DbG9zZSksTS5jbG9zZUJ1dHRvbj1iLmNsb3NlQnV0dG9uLCExPT09aS5jbG9zZUJ1dHRvbnx8ZihpLmNsb3NlQnV0dG9uKT9NLmNsb3NlQnV0dG9uPWkuY2xvc2VCdXR0b246ITA9PT1pLmNsb3NlQnV0dG9uJiYoTS5jbG9zZUJ1dHRvbj0hZihiLmNsb3NlQnV0dG9uKXx8Yi5jbG9zZUJ1dHRvbik7bGV0IHg9dDtlKHQpJiYhZCh0LnR5cGUpP3g9YSh0LHtjbG9zZVRvYXN0OkwsdG9hc3RQcm9wczpNLGRhdGE6VH0pOnAodCkmJih4PXQoe2Nsb3NlVG9hc3Q6TCx0b2FzdFByb3BzOk0sZGF0YTpUfSkpLGIubGltaXQmJmIubGltaXQ+MCYmQy5jb3VudD5iLmxpbWl0JiZOP0MucXVldWUucHVzaCh7dG9hc3RDb250ZW50OngsdG9hc3RQcm9wczpNLHN0YWxlSWQ6cn0pOnUocyk/c2V0VGltZW91dCgoKT0+e08oeCxNLHIpfSxzKTpPKHgsTSxyKX1mdW5jdGlvbiBPKHQsZSxuKXtjb25zdHt0b2FzdElkOm99PWU7biYmaC5kZWxldGUobik7Y29uc3Qgcz17Y29udGVudDp0LHByb3BzOmV9O2guc2V0KG8scyksYyh0PT5bLi4udCxvXS5maWx0ZXIodD0+dCE9PW4pKSx2LmVtaXQoNCx5KHMsbnVsbD09cy5wcm9wcy51cGRhdGVJZD9cImFkZGVkXCI6XCJ1cGRhdGVkXCIpKX1yZXR1cm4gcygoKT0+KEMuY29udGFpbmVySWQ9dC5jb250YWluZXJJZCx2LmNhbmNlbEVtaXQoMykub24oMCxMKS5vbigxLHQ9PmcuY3VycmVudCYmSSh0KSkub24oNSxiKS5lbWl0KDIsQyksKCk9PntoLmNsZWFyKCksdi5lbWl0KDMsQyl9KSxbXSkscygoKT0+e0MucHJvcHM9dCxDLmlzVG9hc3RBY3RpdmU9VCxDLmRpc3BsYXllZFRvYXN0PWwubGVuZ3RofSkse2dldFRvYXN0VG9SZW5kZXI6ZnVuY3Rpb24oZSl7Y29uc3Qgbj1uZXcgTWFwLG89QXJyYXkuZnJvbShoLnZhbHVlcygpKTtyZXR1cm4gdC5uZXdlc3RPblRvcCYmby5yZXZlcnNlKCksby5mb3JFYWNoKHQ9Pntjb25zdHtwb3NpdGlvbjplfT10LnByb3BzO24uaGFzKGUpfHxuLnNldChlLFtdKSxuLmdldChlKS5wdXNoKHQpfSksQXJyYXkuZnJvbShuLHQ9PmUodFswXSx0WzFdKSl9LGNvbnRhaW5lclJlZjpnLGlzVG9hc3RBY3RpdmU6VH19ZnVuY3Rpb24gYih0KXtyZXR1cm4gdC50YXJnZXRUb3VjaGVzJiZ0LnRhcmdldFRvdWNoZXMubGVuZ3RoPj0xP3QudGFyZ2V0VG91Y2hlc1swXS5jbGllbnRYOnQuY2xpZW50WH1mdW5jdGlvbiBJKHQpe3JldHVybiB0LnRhcmdldFRvdWNoZXMmJnQudGFyZ2V0VG91Y2hlcy5sZW5ndGg+PTE/dC50YXJnZXRUb3VjaGVzWzBdLmNsaWVudFk6dC5jbGllbnRZfWZ1bmN0aW9uIF8odCl7Y29uc3RbbyxhXT1pKCExKSxbcixsXT1pKCExKSxjPW4obnVsbCksdT1uKHtzdGFydDowLHg6MCx5OjAsZGVsdGE6MCxyZW1vdmFsRGlzdGFuY2U6MCxjYW5DbG9zZU9uQ2xpY2s6ITAsY2FuRHJhZzohMSxib3VuZGluZ1JlY3Q6bnVsbCxkaWRNb3ZlOiExfSkuY3VycmVudCxkPW4odCkse2F1dG9DbG9zZTptLHBhdXNlT25Ib3ZlcjpmLGNsb3NlVG9hc3Q6ZyxvbkNsaWNrOmgsY2xvc2VPbkNsaWNrOnl9PXQ7ZnVuY3Rpb24gdihlKXtpZih0LmRyYWdnYWJsZSl7XCJ0b3VjaHN0YXJ0XCI9PT1lLm5hdGl2ZUV2ZW50LnR5cGUmJmUubmF0aXZlRXZlbnQucHJldmVudERlZmF1bHQoKSx1LmRpZE1vdmU9ITEsZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLF8pLGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsTCksZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLF8pLGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLEwpO2NvbnN0IG49Yy5jdXJyZW50O3UuY2FuQ2xvc2VPbkNsaWNrPSEwLHUuY2FuRHJhZz0hMCx1LmJvdW5kaW5nUmVjdD1uLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLG4uc3R5bGUudHJhbnNpdGlvbj1cIlwiLHUueD1iKGUubmF0aXZlRXZlbnQpLHUueT1JKGUubmF0aXZlRXZlbnQpLFwieFwiPT09dC5kcmFnZ2FibGVEaXJlY3Rpb24/KHUuc3RhcnQ9dS54LHUucmVtb3ZhbERpc3RhbmNlPW4ub2Zmc2V0V2lkdGgqKHQuZHJhZ2dhYmxlUGVyY2VudC8xMDApKToodS5zdGFydD11LnksdS5yZW1vdmFsRGlzdGFuY2U9bi5vZmZzZXRIZWlnaHQqKDgwPT09dC5kcmFnZ2FibGVQZXJjZW50PzEuNSp0LmRyYWdnYWJsZVBlcmNlbnQ6dC5kcmFnZ2FibGVQZXJjZW50LzEwMCkpfX1mdW5jdGlvbiBUKGUpe2lmKHUuYm91bmRpbmdSZWN0KXtjb25zdHt0b3A6bixib3R0b206byxsZWZ0OnMscmlnaHQ6YX09dS5ib3VuZGluZ1JlY3Q7XCJ0b3VjaGVuZFwiIT09ZS5uYXRpdmVFdmVudC50eXBlJiZ0LnBhdXNlT25Ib3ZlciYmdS54Pj1zJiZ1Lng8PWEmJnUueT49biYmdS55PD1vP0MoKTpFKCl9fWZ1bmN0aW9uIEUoKXthKCEwKX1mdW5jdGlvbiBDKCl7YSghMSl9ZnVuY3Rpb24gXyhlKXtjb25zdCBuPWMuY3VycmVudDt1LmNhbkRyYWcmJm4mJih1LmRpZE1vdmU9ITAsbyYmQygpLHUueD1iKGUpLHUueT1JKGUpLHUuZGVsdGE9XCJ4XCI9PT10LmRyYWdnYWJsZURpcmVjdGlvbj91LngtdS5zdGFydDp1LnktdS5zdGFydCx1LnN0YXJ0IT09dS54JiYodS5jYW5DbG9zZU9uQ2xpY2s9ITEpLG4uc3R5bGUudHJhbnNmb3JtPWB0cmFuc2xhdGUke3QuZHJhZ2dhYmxlRGlyZWN0aW9ufSgke3UuZGVsdGF9cHgpYCxuLnN0eWxlLm9wYWNpdHk9XCJcIisoMS1NYXRoLmFicyh1LmRlbHRhL3UucmVtb3ZhbERpc3RhbmNlKSkpfWZ1bmN0aW9uIEwoKXtkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsXyksZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIixMKSxkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsXyksZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsTCk7Y29uc3QgZT1jLmN1cnJlbnQ7aWYodS5jYW5EcmFnJiZ1LmRpZE1vdmUmJmUpe2lmKHUuY2FuRHJhZz0hMSxNYXRoLmFicyh1LmRlbHRhKT51LnJlbW92YWxEaXN0YW5jZSlyZXR1cm4gbCghMCksdm9pZCB0LmNsb3NlVG9hc3QoKTtlLnN0eWxlLnRyYW5zaXRpb249XCJ0cmFuc2Zvcm0gMC4ycywgb3BhY2l0eSAwLjJzXCIsZS5zdHlsZS50cmFuc2Zvcm09YHRyYW5zbGF0ZSR7dC5kcmFnZ2FibGVEaXJlY3Rpb259KDApYCxlLnN0eWxlLm9wYWNpdHk9XCIxXCJ9fXMoKCk9PntkLmN1cnJlbnQ9dH0pLHMoKCk9PihjLmN1cnJlbnQmJmMuY3VycmVudC5hZGRFdmVudExpc3RlbmVyKFwiZFwiLEUse29uY2U6ITB9KSxwKHQub25PcGVuKSYmdC5vbk9wZW4oZSh0LmNoaWxkcmVuKSYmdC5jaGlsZHJlbi5wcm9wcyksKCk9Pntjb25zdCB0PWQuY3VycmVudDtwKHQub25DbG9zZSkmJnQub25DbG9zZShlKHQuY2hpbGRyZW4pJiZ0LmNoaWxkcmVuLnByb3BzKX0pLFtdKSxzKCgpPT4odC5wYXVzZU9uRm9jdXNMb3NzJiYoZG9jdW1lbnQuaGFzRm9jdXMoKXx8QygpLHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNcIixFKSx3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIixDKSksKCk9Pnt0LnBhdXNlT25Gb2N1c0xvc3MmJih3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsRSksd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJibHVyXCIsQykpfSksW3QucGF1c2VPbkZvY3VzTG9zc10pO2NvbnN0IE89e29uTW91c2VEb3duOnYsb25Ub3VjaFN0YXJ0OnYsb25Nb3VzZVVwOlQsb25Ub3VjaEVuZDpUfTtyZXR1cm4gbSYmZiYmKE8ub25Nb3VzZUVudGVyPUMsTy5vbk1vdXNlTGVhdmU9RSkseSYmKE8ub25DbGljaz10PT57aCYmaCh0KSx1LmNhbkNsb3NlT25DbGljayYmZygpfSkse3BsYXlUb2FzdDpFLHBhdXNlVG9hc3Q6Qyxpc1J1bm5pbmc6byxwcmV2ZW50RXhpdFRyYW5zaXRpb246cix0b2FzdFJlZjpjLGV2ZW50SGFuZGxlcnM6T319ZnVuY3Rpb24gTChlKXtsZXR7Y2xvc2VUb2FzdDpuLHRoZW1lOm8sYXJpYUxhYmVsOnM9XCJjbG9zZVwifT1lO3JldHVybiB0LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIix7Y2xhc3NOYW1lOmBUb2FzdGlmeV9fY2xvc2UtYnV0dG9uIFRvYXN0aWZ5X19jbG9zZS1idXR0b24tLSR7b31gLHR5cGU6XCJidXR0b25cIixvbkNsaWNrOnQ9Pnt0LnN0b3BQcm9wYWdhdGlvbigpLG4odCl9LFwiYXJpYS1sYWJlbFwiOnN9LHQuY3JlYXRlRWxlbWVudChcInN2Z1wiLHtcImFyaWEtaGlkZGVuXCI6XCJ0cnVlXCIsdmlld0JveDpcIjAgMCAxNCAxNlwifSx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIse2ZpbGxSdWxlOlwiZXZlbm9kZFwiLGQ6XCJNNy43MSA4LjIzbDMuNzUgMy43NS0xLjQ4IDEuNDgtMy43NS0zLjc1LTMuNzUgMy43NUwxIDExLjk4bDMuNzUtMy43NUwxIDQuNDggMi40OCAzbDMuNzUgMy43NUw5Ljk4IDNsMS40OCAxLjQ4LTMuNzUgMy43NXpcIn0pKSl9ZnVuY3Rpb24gTyhlKXtsZXR7ZGVsYXk6bixpc1J1bm5pbmc6byxjbG9zZVRvYXN0OnMsdHlwZTphPVwiZGVmYXVsdFwiLGhpZGU6cixjbGFzc05hbWU6aSxzdHlsZTpsLGNvbnRyb2xsZWRQcm9ncmVzczp1LHByb2dyZXNzOmQscnRsOm0saXNJbjpmLHRoZW1lOmd9PWU7Y29uc3QgaD1yfHx1JiYwPT09ZCx5PXsuLi5sLGFuaW1hdGlvbkR1cmF0aW9uOmAke259bXNgLGFuaW1hdGlvblBsYXlTdGF0ZTpvP1wicnVubmluZ1wiOlwicGF1c2VkXCIsb3BhY2l0eTpoPzA6MX07dSYmKHkudHJhbnNmb3JtPWBzY2FsZVgoJHtkfSlgKTtjb25zdCB2PWMoXCJUb2FzdGlmeV9fcHJvZ3Jlc3MtYmFyXCIsdT9cIlRvYXN0aWZ5X19wcm9ncmVzcy1iYXItLWNvbnRyb2xsZWRcIjpcIlRvYXN0aWZ5X19wcm9ncmVzcy1iYXItLWFuaW1hdGVkXCIsYFRvYXN0aWZ5X19wcm9ncmVzcy1iYXItdGhlbWUtLSR7Z31gLGBUb2FzdGlmeV9fcHJvZ3Jlc3MtYmFyLS0ke2F9YCx7XCJUb2FzdGlmeV9fcHJvZ3Jlc3MtYmFyLS1ydGxcIjptfSksVD1wKGkpP2koe3J0bDptLHR5cGU6YSxkZWZhdWx0Q2xhc3NOYW1lOnZ9KTpjKHYsaSk7cmV0dXJuIHQuY3JlYXRlRWxlbWVudChcImRpdlwiLHtyb2xlOlwicHJvZ3Jlc3NiYXJcIixcImFyaWEtaGlkZGVuXCI6aD9cInRydWVcIjpcImZhbHNlXCIsXCJhcmlhLWxhYmVsXCI6XCJub3RpZmljYXRpb24gdGltZXJcIixjbGFzc05hbWU6VCxzdHlsZTp5LFt1JiZkPj0xP1wib25UcmFuc2l0aW9uRW5kXCI6XCJvbkFuaW1hdGlvbkVuZFwiXTp1JiZkPDE/bnVsbDooKT0+e2YmJnMoKX19KX1jb25zdCBOPW49Pntjb25zdHtpc1J1bm5pbmc6byxwcmV2ZW50RXhpdFRyYW5zaXRpb246cyx0b2FzdFJlZjpyLGV2ZW50SGFuZGxlcnM6aX09XyhuKSx7Y2xvc2VCdXR0b246bCxjaGlsZHJlbjp1LGF1dG9DbG9zZTpkLG9uQ2xpY2s6bSx0eXBlOmYsaGlkZVByb2dyZXNzQmFyOmcsY2xvc2VUb2FzdDpoLHRyYW5zaXRpb246eSxwb3NpdGlvbjp2LGNsYXNzTmFtZTpULHN0eWxlOkUsYm9keUNsYXNzTmFtZTpDLGJvZHlTdHlsZTpiLHByb2dyZXNzQ2xhc3NOYW1lOkkscHJvZ3Jlc3NTdHlsZTpOLHVwZGF0ZUlkOk0scm9sZTpSLHByb2dyZXNzOncscnRsOngsdG9hc3RJZDokLGRlbGV0ZVRvYXN0OmssaXNJbjpQLGlzTG9hZGluZzpCLGljb25PdXQ6RCxjbG9zZU9uQ2xpY2s6QSx0aGVtZTp6fT1uLEY9YyhcIlRvYXN0aWZ5X190b2FzdFwiLGBUb2FzdGlmeV9fdG9hc3QtdGhlbWUtLSR7en1gLGBUb2FzdGlmeV9fdG9hc3QtLSR7Zn1gLHtcIlRvYXN0aWZ5X190b2FzdC0tcnRsXCI6eH0se1wiVG9hc3RpZnlfX3RvYXN0LS1jbG9zZS1vbi1jbGlja1wiOkF9KSxIPXAoVCk/VCh7cnRsOngscG9zaXRpb246dix0eXBlOmYsZGVmYXVsdENsYXNzTmFtZTpGfSk6YyhGLFQpLFM9ISF3fHwhZCxxPXtjbG9zZVRvYXN0OmgsdHlwZTpmLHRoZW1lOnp9O2xldCBRPW51bGw7cmV0dXJuITE9PT1sfHwoUT1wKGwpP2wocSk6ZShsKT9hKGwscSk6TChxKSksdC5jcmVhdGVFbGVtZW50KHkse2lzSW46UCxkb25lOmsscG9zaXRpb246dixwcmV2ZW50RXhpdFRyYW5zaXRpb246cyxub2RlUmVmOnJ9LHQuY3JlYXRlRWxlbWVudChcImRpdlwiLHtpZDokLG9uQ2xpY2s6bSxjbGFzc05hbWU6SCwuLi5pLHN0eWxlOkUscmVmOnJ9LHQuY3JlYXRlRWxlbWVudChcImRpdlwiLHsuLi5QJiZ7cm9sZTpSfSxjbGFzc05hbWU6cChDKT9DKHt0eXBlOmZ9KTpjKFwiVG9hc3RpZnlfX3RvYXN0LWJvZHlcIixDKSxzdHlsZTpifSxudWxsIT1EJiZ0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIix7Y2xhc3NOYW1lOmMoXCJUb2FzdGlmeV9fdG9hc3QtaWNvblwiLHtcIlRvYXN0aWZ5LS1hbmltYXRlLWljb24gVG9hc3RpZnlfX3pvb20tZW50ZXJcIjohQn0pfSxEKSx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIixudWxsLHUpKSxRLHQuY3JlYXRlRWxlbWVudChPLHsuLi5NJiYhUz97a2V5OmBwYi0ke019YH06e30scnRsOngsdGhlbWU6eixkZWxheTpkLGlzUnVubmluZzpvLGlzSW46UCxjbG9zZVRvYXN0OmgsaGlkZTpnLHR5cGU6ZixzdHlsZTpOLGNsYXNzTmFtZTpJLGNvbnRyb2xsZWRQcm9ncmVzczpTLHByb2dyZXNzOnd8fDB9KSkpfSxNPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHZvaWQgMD09PWUmJihlPSExKSx7ZW50ZXI6YFRvYXN0aWZ5LS1hbmltYXRlIFRvYXN0aWZ5X18ke3R9LWVudGVyYCxleGl0OmBUb2FzdGlmeS0tYW5pbWF0ZSBUb2FzdGlmeV9fJHt0fS1leGl0YCxhcHBlbmRQb3NpdGlvbjplfX0sUj1oKE0oXCJib3VuY2VcIiwhMCkpLHc9aChNKFwic2xpZGVcIiwhMCkpLHg9aChNKFwiem9vbVwiKSksJD1oKE0oXCJmbGlwXCIpKSxrPWwoKGUsbik9Pntjb25zdHtnZXRUb2FzdFRvUmVuZGVyOm8sY29udGFpbmVyUmVmOmEsaXNUb2FzdEFjdGl2ZTpyfT1DKGUpLHtjbGFzc05hbWU6aSxzdHlsZTpsLHJ0bDp1LGNvbnRhaW5lcklkOmR9PWU7ZnVuY3Rpb24gZih0KXtjb25zdCBlPWMoXCJUb2FzdGlmeV9fdG9hc3QtY29udGFpbmVyXCIsYFRvYXN0aWZ5X190b2FzdC1jb250YWluZXItLSR7dH1gLHtcIlRvYXN0aWZ5X190b2FzdC1jb250YWluZXItLXJ0bFwiOnV9KTtyZXR1cm4gcChpKT9pKHtwb3NpdGlvbjp0LHJ0bDp1LGRlZmF1bHRDbGFzc05hbWU6ZX0pOmMoZSxtKGkpKX1yZXR1cm4gcygoKT0+e24mJihuLmN1cnJlbnQ9YS5jdXJyZW50KX0sW10pLHQuY3JlYXRlRWxlbWVudChcImRpdlwiLHtyZWY6YSxjbGFzc05hbWU6XCJUb2FzdGlmeVwiLGlkOmR9LG8oKGUsbik9Pntjb25zdCBvPW4ubGVuZ3RoP3suLi5sfTp7Li4ubCxwb2ludGVyRXZlbnRzOlwibm9uZVwifTtyZXR1cm4gdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIse2NsYXNzTmFtZTpmKGUpLHN0eWxlOm8sa2V5OmBjb250YWluZXItJHtlfWB9LG4ubWFwKChlLG8pPT57bGV0e2NvbnRlbnQ6cyxwcm9wczphfT1lO3JldHVybiB0LmNyZWF0ZUVsZW1lbnQoTix7Li4uYSxpc0luOnIoYS50b2FzdElkKSxzdHlsZTp7Li4uYS5zdHlsZSxcIi0tbnRoXCI6bysxLFwiLS1sZW5cIjpuLmxlbmd0aH0sa2V5OmB0b2FzdC0ke2Eua2V5fWB9LHMpfSkpfSkpfSk7ay5kaXNwbGF5TmFtZT1cIlRvYXN0Q29udGFpbmVyXCIsay5kZWZhdWx0UHJvcHM9e3Bvc2l0aW9uOlwidG9wLXJpZ2h0XCIsdHJhbnNpdGlvbjpSLGF1dG9DbG9zZTo1ZTMsY2xvc2VCdXR0b246TCxwYXVzZU9uSG92ZXI6ITAscGF1c2VPbkZvY3VzTG9zczohMCxjbG9zZU9uQ2xpY2s6ITAsZHJhZ2dhYmxlOiEwLGRyYWdnYWJsZVBlcmNlbnQ6ODAsZHJhZ2dhYmxlRGlyZWN0aW9uOlwieFwiLHJvbGU6XCJhbGVydFwiLHRoZW1lOlwibGlnaHRcIn07bGV0IFAsQj1uZXcgTWFwLEQ9W10sQT0xO2Z1bmN0aW9uIHooKXtyZXR1cm5cIlwiK0ErK31mdW5jdGlvbiBGKHQpe3JldHVybiB0JiYoZCh0LnRvYXN0SWQpfHx1KHQudG9hc3RJZCkpP3QudG9hc3RJZDp6KCl9ZnVuY3Rpb24gSCh0LGUpe3JldHVybiBCLnNpemU+MD92LmVtaXQoMCx0LGUpOkQucHVzaCh7Y29udGVudDp0LG9wdGlvbnM6ZX0pLGUudG9hc3RJZH1mdW5jdGlvbiBTKHQsZSl7cmV0dXJuey4uLmUsdHlwZTplJiZlLnR5cGV8fHQsdG9hc3RJZDpGKGUpfX1mdW5jdGlvbiBxKHQpe3JldHVybihlLG4pPT5IKGUsUyh0LG4pKX1mdW5jdGlvbiBRKHQsZSl7cmV0dXJuIEgodCxTKFwiZGVmYXVsdFwiLGUpKX1RLmxvYWRpbmc9KHQsZSk9PkgodCxTKFwiZGVmYXVsdFwiLHtpc0xvYWRpbmc6ITAsYXV0b0Nsb3NlOiExLGNsb3NlT25DbGljazohMSxjbG9zZUJ1dHRvbjohMSxkcmFnZ2FibGU6ITEsLi4uZX0pKSxRLnByb21pc2U9ZnVuY3Rpb24odCxlLG4pe2xldCBvLHtwZW5kaW5nOnMsZXJyb3I6YSxzdWNjZXNzOnJ9PWU7cyYmKG89ZChzKT9RLmxvYWRpbmcocyxuKTpRLmxvYWRpbmcocy5yZW5kZXIsey4uLm4sLi4uc30pKTtjb25zdCBpPXtpc0xvYWRpbmc6bnVsbCxhdXRvQ2xvc2U6bnVsbCxjbG9zZU9uQ2xpY2s6bnVsbCxjbG9zZUJ1dHRvbjpudWxsLGRyYWdnYWJsZTpudWxsfSxsPSh0LGUscyk9PntpZihudWxsPT1lKXJldHVybiB2b2lkIFEuZGlzbWlzcyhvKTtjb25zdCBhPXt0eXBlOnQsLi4uaSwuLi5uLGRhdGE6c30scj1kKGUpP3tyZW5kZXI6ZX06ZTtyZXR1cm4gbz9RLnVwZGF0ZShvLHsuLi5hLC4uLnJ9KTpRKHIucmVuZGVyLHsuLi5hLC4uLnJ9KSxzfSxjPXAodCk/dCgpOnQ7cmV0dXJuIGMudGhlbih0PT5sKFwic3VjY2Vzc1wiLHIsdCkpLmNhdGNoKHQ9PmwoXCJlcnJvclwiLGEsdCkpLGN9LFEuc3VjY2Vzcz1xKFwic3VjY2Vzc1wiKSxRLmluZm89cShcImluZm9cIiksUS5lcnJvcj1xKFwiZXJyb3JcIiksUS53YXJuaW5nPXEoXCJ3YXJuaW5nXCIpLFEud2Fybj1RLndhcm5pbmcsUS5kYXJrPSh0LGUpPT5IKHQsUyhcImRlZmF1bHRcIix7dGhlbWU6XCJkYXJrXCIsLi4uZX0pKSxRLmRpc21pc3M9dD0+e0Iuc2l6ZT4wP3YuZW1pdCgxLHQpOkQ9RC5maWx0ZXIoZT0+bnVsbCE9dCYmZS5vcHRpb25zLnRvYXN0SWQhPT10KX0sUS5jbGVhcldhaXRpbmdRdWV1ZT1mdW5jdGlvbih0KXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9e30pLHYuZW1pdCg1LHQpfSxRLmlzQWN0aXZlPXQ9PntsZXQgZT0hMTtyZXR1cm4gQi5mb3JFYWNoKG49PntuLmlzVG9hc3RBY3RpdmUmJm4uaXNUb2FzdEFjdGl2ZSh0KSYmKGU9ITApfSksZX0sUS51cGRhdGU9ZnVuY3Rpb24odCxlKXt2b2lkIDA9PT1lJiYoZT17fSksc2V0VGltZW91dCgoKT0+e2NvbnN0IG49ZnVuY3Rpb24odCxlKXtsZXR7Y29udGFpbmVySWQ6bn09ZTtjb25zdCBvPUIuZ2V0KG58fFApO3JldHVybiBvJiZvLmdldFRvYXN0KHQpfSh0LGUpO2lmKG4pe2NvbnN0e3Byb3BzOm8sY29udGVudDpzfT1uLGE9e2RlbGF5OjEwMCwuLi5vLC4uLmUsdG9hc3RJZDplLnRvYXN0SWR8fHQsdXBkYXRlSWQ6eigpfTthLnRvYXN0SWQhPT10JiYoYS5zdGFsZUlkPXQpO2NvbnN0IHI9YS5yZW5kZXJ8fHM7ZGVsZXRlIGEucmVuZGVyLEgocixhKX19LDApfSxRLmRvbmU9dD0+e1EudXBkYXRlKHQse3Byb2dyZXNzOjF9KX0sUS5vbkNoYW5nZT10PT4odi5vbig0LHQpLCgpPT57di5vZmYoNCx0KX0pLFEuUE9TSVRJT049e1RPUF9MRUZUOlwidG9wLWxlZnRcIixUT1BfUklHSFQ6XCJ0b3AtcmlnaHRcIixUT1BfQ0VOVEVSOlwidG9wLWNlbnRlclwiLEJPVFRPTV9MRUZUOlwiYm90dG9tLWxlZnRcIixCT1RUT01fUklHSFQ6XCJib3R0b20tcmlnaHRcIixCT1RUT01fQ0VOVEVSOlwiYm90dG9tLWNlbnRlclwifSxRLlRZUEU9e0lORk86XCJpbmZvXCIsU1VDQ0VTUzpcInN1Y2Nlc3NcIixXQVJOSU5HOlwid2FybmluZ1wiLEVSUk9SOlwiZXJyb3JcIixERUZBVUxUOlwiZGVmYXVsdFwifSx2Lm9uKDIsdD0+e1A9dC5jb250YWluZXJJZHx8dCxCLnNldChQLHQpLEQuZm9yRWFjaCh0PT57di5lbWl0KDAsdC5jb250ZW50LHQub3B0aW9ucyl9KSxEPVtdfSkub24oMyx0PT57Qi5kZWxldGUodC5jb250YWluZXJJZHx8dCksMD09PUIuc2l6ZSYmdi5vZmYoMCkub2ZmKDEpLm9mZig1KX0pO2V4cG9ydHtSIGFzIEJvdW5jZSwkIGFzIEZsaXAsRSBhcyBJY29ucyx3IGFzIFNsaWRlLGsgYXMgVG9hc3RDb250YWluZXIseCBhcyBab29tLGcgYXMgY29sbGFwc2VUb2FzdCxoIGFzIGNzc1RyYW5zaXRpb24sUSBhcyB0b2FzdCxfIGFzIHVzZVRvYXN0LEMgYXMgdXNlVG9hc3RDb250YWluZXJ9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdC10b2FzdGlmeS5lc20ubWpzLm1hcFxyXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/react-toastify/dist/react-toastify.esm.mjs\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/react-toastify/node_modules/clsx/dist/clsx.m.js":
/*!**********************************************************************!*\
  !*** ./node_modules/react-toastify/node_modules/clsx/dist/clsx.m.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clsx: () => (/* binding */ clsx),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f);else for(t in e)e[t]&&(n&&(n+=\" \"),n+=t);return n}function clsx(){for(var e,t,f=0,n=\"\";f<arguments.length;)(e=arguments[f++])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (clsx);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yZWFjdC10b2FzdGlmeS9ub2RlX21vZHVsZXMvY2xzeC9kaXN0L2Nsc3gubS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLGNBQWMsYUFBYSwrQ0FBK0MsdURBQXVELFdBQVcsMENBQTBDLHlDQUF5QyxTQUFnQixnQkFBZ0IscUJBQXFCLG1CQUFtQixrREFBa0QsU0FBUyxpRUFBZSxJQUFJIiwic291cmNlcyI6WyJEOlxcRG9fYW4yXFxsZW5kaHViX3YyXFxsZW5kaHViLWZyb250ZW5kLW5leHRqc1xcbm9kZV9tb2R1bGVzXFxyZWFjdC10b2FzdGlmeVxcbm9kZV9tb2R1bGVzXFxjbHN4XFxkaXN0XFxjbHN4Lm0uanMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gcihlKXt2YXIgdCxmLG49XCJcIjtpZihcInN0cmluZ1wiPT10eXBlb2YgZXx8XCJudW1iZXJcIj09dHlwZW9mIGUpbis9ZTtlbHNlIGlmKFwib2JqZWN0XCI9PXR5cGVvZiBlKWlmKEFycmF5LmlzQXJyYXkoZSkpZm9yKHQ9MDt0PGUubGVuZ3RoO3QrKyllW3RdJiYoZj1yKGVbdF0pKSYmKG4mJihuKz1cIiBcIiksbis9Zik7ZWxzZSBmb3IodCBpbiBlKWVbdF0mJihuJiYobis9XCIgXCIpLG4rPXQpO3JldHVybiBufWV4cG9ydCBmdW5jdGlvbiBjbHN4KCl7Zm9yKHZhciBlLHQsZj0wLG49XCJcIjtmPGFyZ3VtZW50cy5sZW5ndGg7KShlPWFyZ3VtZW50c1tmKytdKSYmKHQ9cihlKSkmJihuJiYobis9XCIgXCIpLG4rPXQpO3JldHVybiBufWV4cG9ydCBkZWZhdWx0IGNsc3g7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/react-toastify/node_modules/clsx/dist/clsx.m.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/react/cjs/react-jsx-dev-runtime.development.js":
/*!*********************************************************************!*\
  !*** ./node_modules/react/cjs/react-jsx-dev-runtime.development.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("/**\r\n * @license React\r\n * react-jsx-dev-runtime.development.js\r\n *\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\n\r\n\r\nif (true) {\r\n  (function() {\r\n'use strict';\r\n\r\nvar React = __webpack_require__(/*! react */ \"(pages-dir-browser)/./node_modules/react/index.js\");\r\n\r\n// ATTENTION\r\n// When adding new symbols to this file,\r\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\r\n// The Symbol used to tag the ReactElement-like types.\r\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\r\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\r\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\r\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\r\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\r\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider');\r\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\r\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\r\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\r\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\r\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\r\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\r\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\r\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\r\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\r\nfunction getIteratorFn(maybeIterable) {\r\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\r\n    return null;\r\n  }\r\n\r\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\r\n\r\n  if (typeof maybeIterator === 'function') {\r\n    return maybeIterator;\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\r\n\r\nfunction error(format) {\r\n  {\r\n    {\r\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\r\n        args[_key2 - 1] = arguments[_key2];\r\n      }\r\n\r\n      printWarning('error', format, args);\r\n    }\r\n  }\r\n}\r\n\r\nfunction printWarning(level, format, args) {\r\n  // When changing this logic, you might want to also\r\n  // update consoleWithStackDev.www.js as well.\r\n  {\r\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\r\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\r\n\r\n    if (stack !== '') {\r\n      format += '%s';\r\n      args = args.concat([stack]);\r\n    } // eslint-disable-next-line react-internal/safe-string-coercion\r\n\r\n\r\n    var argsWithFormat = args.map(function (item) {\r\n      return String(item);\r\n    }); // Careful: RN currently depends on this prefix\r\n\r\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\r\n    // breaks IE9: https://github.com/facebook/react/issues/13610\r\n    // eslint-disable-next-line react-internal/no-production-logging\r\n\r\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\r\n  }\r\n}\r\n\r\n// -----------------------------------------------------------------------------\r\n\r\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\r\nvar enableCacheElement = false;\r\nvar enableTransitionTracing = false; // No known bugs, but needs performance testing\r\n\r\nvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\r\n// stuff. Intended to enable React core members to more easily debug scheduling\r\n// issues in DEV builds.\r\n\r\nvar enableDebugTracing = false; // Track which Fiber(s) schedule render work.\r\n\r\nvar REACT_MODULE_REFERENCE;\r\n\r\n{\r\n  REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');\r\n}\r\n\r\nfunction isValidElementType(type) {\r\n  if (typeof type === 'string' || typeof type === 'function') {\r\n    return true;\r\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\r\n\r\n\r\n  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {\r\n    return true;\r\n  }\r\n\r\n  if (typeof type === 'object' && type !== null) {\r\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\r\n    // types supported by any Flight configuration anywhere since\r\n    // we don't know which Flight build this will end up being used\r\n    // with.\r\n    type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction getWrappedName(outerType, innerType, wrapperName) {\r\n  var displayName = outerType.displayName;\r\n\r\n  if (displayName) {\r\n    return displayName;\r\n  }\r\n\r\n  var functionName = innerType.displayName || innerType.name || '';\r\n  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\r\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\r\n\r\n\r\nfunction getContextName(type) {\r\n  return type.displayName || 'Context';\r\n} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\r\n\r\n\r\nfunction getComponentNameFromType(type) {\r\n  if (type == null) {\r\n    // Host root, text node or just invalid type.\r\n    return null;\r\n  }\r\n\r\n  {\r\n    if (typeof type.tag === 'number') {\r\n      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\r\n    }\r\n  }\r\n\r\n  if (typeof type === 'function') {\r\n    return type.displayName || type.name || null;\r\n  }\r\n\r\n  if (typeof type === 'string') {\r\n    return type;\r\n  }\r\n\r\n  switch (type) {\r\n    case REACT_FRAGMENT_TYPE:\r\n      return 'Fragment';\r\n\r\n    case REACT_PORTAL_TYPE:\r\n      return 'Portal';\r\n\r\n    case REACT_PROFILER_TYPE:\r\n      return 'Profiler';\r\n\r\n    case REACT_STRICT_MODE_TYPE:\r\n      return 'StrictMode';\r\n\r\n    case REACT_SUSPENSE_TYPE:\r\n      return 'Suspense';\r\n\r\n    case REACT_SUSPENSE_LIST_TYPE:\r\n      return 'SuspenseList';\r\n\r\n  }\r\n\r\n  if (typeof type === 'object') {\r\n    switch (type.$$typeof) {\r\n      case REACT_CONTEXT_TYPE:\r\n        var context = type;\r\n        return getContextName(context) + '.Consumer';\r\n\r\n      case REACT_PROVIDER_TYPE:\r\n        var provider = type;\r\n        return getContextName(provider._context) + '.Provider';\r\n\r\n      case REACT_FORWARD_REF_TYPE:\r\n        return getWrappedName(type, type.render, 'ForwardRef');\r\n\r\n      case REACT_MEMO_TYPE:\r\n        var outerName = type.displayName || null;\r\n\r\n        if (outerName !== null) {\r\n          return outerName;\r\n        }\r\n\r\n        return getComponentNameFromType(type.type) || 'Memo';\r\n\r\n      case REACT_LAZY_TYPE:\r\n        {\r\n          var lazyComponent = type;\r\n          var payload = lazyComponent._payload;\r\n          var init = lazyComponent._init;\r\n\r\n          try {\r\n            return getComponentNameFromType(init(payload));\r\n          } catch (x) {\r\n            return null;\r\n          }\r\n        }\r\n\r\n      // eslint-disable-next-line no-fallthrough\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nvar assign = Object.assign;\r\n\r\n// Helpers to patch console.logs to avoid logging during side-effect free\r\n// replaying on render function. This currently only patches the object\r\n// lazily which won't cover if the log function was extracted eagerly.\r\n// We could also eagerly patch the method.\r\nvar disabledDepth = 0;\r\nvar prevLog;\r\nvar prevInfo;\r\nvar prevWarn;\r\nvar prevError;\r\nvar prevGroup;\r\nvar prevGroupCollapsed;\r\nvar prevGroupEnd;\r\n\r\nfunction disabledLog() {}\r\n\r\ndisabledLog.__reactDisabledLog = true;\r\nfunction disableLogs() {\r\n  {\r\n    if (disabledDepth === 0) {\r\n      /* eslint-disable react-internal/no-production-logging */\r\n      prevLog = console.log;\r\n      prevInfo = console.info;\r\n      prevWarn = console.warn;\r\n      prevError = console.error;\r\n      prevGroup = console.group;\r\n      prevGroupCollapsed = console.groupCollapsed;\r\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\r\n\r\n      var props = {\r\n        configurable: true,\r\n        enumerable: true,\r\n        value: disabledLog,\r\n        writable: true\r\n      }; // $FlowFixMe Flow thinks console is immutable.\r\n\r\n      Object.defineProperties(console, {\r\n        info: props,\r\n        log: props,\r\n        warn: props,\r\n        error: props,\r\n        group: props,\r\n        groupCollapsed: props,\r\n        groupEnd: props\r\n      });\r\n      /* eslint-enable react-internal/no-production-logging */\r\n    }\r\n\r\n    disabledDepth++;\r\n  }\r\n}\r\nfunction reenableLogs() {\r\n  {\r\n    disabledDepth--;\r\n\r\n    if (disabledDepth === 0) {\r\n      /* eslint-disable react-internal/no-production-logging */\r\n      var props = {\r\n        configurable: true,\r\n        enumerable: true,\r\n        writable: true\r\n      }; // $FlowFixMe Flow thinks console is immutable.\r\n\r\n      Object.defineProperties(console, {\r\n        log: assign({}, props, {\r\n          value: prevLog\r\n        }),\r\n        info: assign({}, props, {\r\n          value: prevInfo\r\n        }),\r\n        warn: assign({}, props, {\r\n          value: prevWarn\r\n        }),\r\n        error: assign({}, props, {\r\n          value: prevError\r\n        }),\r\n        group: assign({}, props, {\r\n          value: prevGroup\r\n        }),\r\n        groupCollapsed: assign({}, props, {\r\n          value: prevGroupCollapsed\r\n        }),\r\n        groupEnd: assign({}, props, {\r\n          value: prevGroupEnd\r\n        })\r\n      });\r\n      /* eslint-enable react-internal/no-production-logging */\r\n    }\r\n\r\n    if (disabledDepth < 0) {\r\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\r\n    }\r\n  }\r\n}\r\n\r\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\r\nvar prefix;\r\nfunction describeBuiltInComponentFrame(name, source, ownerFn) {\r\n  {\r\n    if (prefix === undefined) {\r\n      // Extract the VM specific prefix used by each line.\r\n      try {\r\n        throw Error();\r\n      } catch (x) {\r\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\r\n        prefix = match && match[1] || '';\r\n      }\r\n    } // We use the prefix to ensure our stacks line up with native stack frames.\r\n\r\n\r\n    return '\\n' + prefix + name;\r\n  }\r\n}\r\nvar reentry = false;\r\nvar componentFrameCache;\r\n\r\n{\r\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\r\n  componentFrameCache = new PossiblyWeakMap();\r\n}\r\n\r\nfunction describeNativeComponentFrame(fn, construct) {\r\n  // If something asked for a stack inside a fake render, it should get ignored.\r\n  if ( !fn || reentry) {\r\n    return '';\r\n  }\r\n\r\n  {\r\n    var frame = componentFrameCache.get(fn);\r\n\r\n    if (frame !== undefined) {\r\n      return frame;\r\n    }\r\n  }\r\n\r\n  var control;\r\n  reentry = true;\r\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.\r\n\r\n  Error.prepareStackTrace = undefined;\r\n  var previousDispatcher;\r\n\r\n  {\r\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\r\n    // for warnings.\r\n\r\n    ReactCurrentDispatcher.current = null;\r\n    disableLogs();\r\n  }\r\n\r\n  try {\r\n    // This should throw.\r\n    if (construct) {\r\n      // Something should be setting the props in the constructor.\r\n      var Fake = function () {\r\n        throw Error();\r\n      }; // $FlowFixMe\r\n\r\n\r\n      Object.defineProperty(Fake.prototype, 'props', {\r\n        set: function () {\r\n          // We use a throwing setter instead of frozen or non-writable props\r\n          // because that won't throw in a non-strict mode function.\r\n          throw Error();\r\n        }\r\n      });\r\n\r\n      if (typeof Reflect === 'object' && Reflect.construct) {\r\n        // We construct a different control for this case to include any extra\r\n        // frames added by the construct call.\r\n        try {\r\n          Reflect.construct(Fake, []);\r\n        } catch (x) {\r\n          control = x;\r\n        }\r\n\r\n        Reflect.construct(fn, [], Fake);\r\n      } else {\r\n        try {\r\n          Fake.call();\r\n        } catch (x) {\r\n          control = x;\r\n        }\r\n\r\n        fn.call(Fake.prototype);\r\n      }\r\n    } else {\r\n      try {\r\n        throw Error();\r\n      } catch (x) {\r\n        control = x;\r\n      }\r\n\r\n      fn();\r\n    }\r\n  } catch (sample) {\r\n    // This is inlined manually because closure doesn't do it for us.\r\n    if (sample && control && typeof sample.stack === 'string') {\r\n      // This extracts the first frame from the sample that isn't also in the control.\r\n      // Skipping one frame that we assume is the frame that calls the two.\r\n      var sampleLines = sample.stack.split('\\n');\r\n      var controlLines = control.stack.split('\\n');\r\n      var s = sampleLines.length - 1;\r\n      var c = controlLines.length - 1;\r\n\r\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\r\n        // We expect at least one stack frame to be shared.\r\n        // Typically this will be the root most one. However, stack frames may be\r\n        // cut off due to maximum stack limits. In this case, one maybe cut off\r\n        // earlier than the other. We assume that the sample is longer or the same\r\n        // and there for cut off earlier. So we should find the root most frame in\r\n        // the sample somewhere in the control.\r\n        c--;\r\n      }\r\n\r\n      for (; s >= 1 && c >= 0; s--, c--) {\r\n        // Next we find the first one that isn't the same which should be the\r\n        // frame that called our sample function and the control.\r\n        if (sampleLines[s] !== controlLines[c]) {\r\n          // In V8, the first line is describing the message but other VMs don't.\r\n          // If we're about to return the first line, and the control is also on the same\r\n          // line, that's a pretty good indicator that our sample threw at same line as\r\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\r\n          // This can happen if you passed a class to function component, or non-function.\r\n          if (s !== 1 || c !== 1) {\r\n            do {\r\n              s--;\r\n              c--; // We may still have similar intermediate frames from the construct call.\r\n              // The next one that isn't the same should be our match though.\r\n\r\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\r\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\r\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\r\n                // but we have a user-provided \"displayName\"\r\n                // splice it in to make the stack more readable.\r\n\r\n\r\n                if (fn.displayName && _frame.includes('<anonymous>')) {\r\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\r\n                }\r\n\r\n                {\r\n                  if (typeof fn === 'function') {\r\n                    componentFrameCache.set(fn, _frame);\r\n                  }\r\n                } // Return the line we found.\r\n\r\n\r\n                return _frame;\r\n              }\r\n            } while (s >= 1 && c >= 0);\r\n          }\r\n\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  } finally {\r\n    reentry = false;\r\n\r\n    {\r\n      ReactCurrentDispatcher.current = previousDispatcher;\r\n      reenableLogs();\r\n    }\r\n\r\n    Error.prepareStackTrace = previousPrepareStackTrace;\r\n  } // Fallback to just using the name if we couldn't make it throw.\r\n\r\n\r\n  var name = fn ? fn.displayName || fn.name : '';\r\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\r\n\r\n  {\r\n    if (typeof fn === 'function') {\r\n      componentFrameCache.set(fn, syntheticFrame);\r\n    }\r\n  }\r\n\r\n  return syntheticFrame;\r\n}\r\nfunction describeFunctionComponentFrame(fn, source, ownerFn) {\r\n  {\r\n    return describeNativeComponentFrame(fn, false);\r\n  }\r\n}\r\n\r\nfunction shouldConstruct(Component) {\r\n  var prototype = Component.prototype;\r\n  return !!(prototype && prototype.isReactComponent);\r\n}\r\n\r\nfunction describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\r\n\r\n  if (type == null) {\r\n    return '';\r\n  }\r\n\r\n  if (typeof type === 'function') {\r\n    {\r\n      return describeNativeComponentFrame(type, shouldConstruct(type));\r\n    }\r\n  }\r\n\r\n  if (typeof type === 'string') {\r\n    return describeBuiltInComponentFrame(type);\r\n  }\r\n\r\n  switch (type) {\r\n    case REACT_SUSPENSE_TYPE:\r\n      return describeBuiltInComponentFrame('Suspense');\r\n\r\n    case REACT_SUSPENSE_LIST_TYPE:\r\n      return describeBuiltInComponentFrame('SuspenseList');\r\n  }\r\n\r\n  if (typeof type === 'object') {\r\n    switch (type.$$typeof) {\r\n      case REACT_FORWARD_REF_TYPE:\r\n        return describeFunctionComponentFrame(type.render);\r\n\r\n      case REACT_MEMO_TYPE:\r\n        // Memo may contain any component type so we recursively resolve it.\r\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\r\n\r\n      case REACT_LAZY_TYPE:\r\n        {\r\n          var lazyComponent = type;\r\n          var payload = lazyComponent._payload;\r\n          var init = lazyComponent._init;\r\n\r\n          try {\r\n            // Lazy may contain any component type so we recursively resolve it.\r\n            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\r\n          } catch (x) {}\r\n        }\r\n    }\r\n  }\r\n\r\n  return '';\r\n}\r\n\r\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\r\n\r\nvar loggedTypeFailures = {};\r\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\r\n\r\nfunction setCurrentlyValidatingElement(element) {\r\n  {\r\n    if (element) {\r\n      var owner = element._owner;\r\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\r\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\r\n    } else {\r\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\r\n    }\r\n  }\r\n}\r\n\r\nfunction checkPropTypes(typeSpecs, values, location, componentName, element) {\r\n  {\r\n    // $FlowFixMe This is okay but Flow doesn't know it.\r\n    var has = Function.call.bind(hasOwnProperty);\r\n\r\n    for (var typeSpecName in typeSpecs) {\r\n      if (has(typeSpecs, typeSpecName)) {\r\n        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\r\n        // fail the render phase where it didn't fail before. So we log it.\r\n        // After these have been cleaned up, we'll let them throw.\r\n\r\n        try {\r\n          // This is intentionally an invariant that gets caught. It's the same\r\n          // behavior as without this statement except with a better message.\r\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\r\n            // eslint-disable-next-line react-internal/prod-error-codes\r\n            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\r\n            err.name = 'Invariant Violation';\r\n            throw err;\r\n          }\r\n\r\n          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\r\n        } catch (ex) {\r\n          error$1 = ex;\r\n        }\r\n\r\n        if (error$1 && !(error$1 instanceof Error)) {\r\n          setCurrentlyValidatingElement(element);\r\n\r\n          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\r\n\r\n          setCurrentlyValidatingElement(null);\r\n        }\r\n\r\n        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\r\n          // Only monitor this failure once because there tends to be a lot of the\r\n          // same error.\r\n          loggedTypeFailures[error$1.message] = true;\r\n          setCurrentlyValidatingElement(element);\r\n\r\n          error('Failed %s type: %s', location, error$1.message);\r\n\r\n          setCurrentlyValidatingElement(null);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\r\n\r\nfunction isArray(a) {\r\n  return isArrayImpl(a);\r\n}\r\n\r\n/*\r\n * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol\r\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\r\n *\r\n * The functions in this module will throw an easier-to-understand,\r\n * easier-to-debug exception with a clear errors message message explaining the\r\n * problem. (Instead of a confusing exception thrown inside the implementation\r\n * of the `value` object).\r\n */\r\n// $FlowFixMe only called in DEV, so void return is not possible.\r\nfunction typeName(value) {\r\n  {\r\n    // toStringTag is needed for namespaced types like Temporal.Instant\r\n    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\r\n    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';\r\n    return type;\r\n  }\r\n} // $FlowFixMe only called in DEV, so void return is not possible.\r\n\r\n\r\nfunction willCoercionThrow(value) {\r\n  {\r\n    try {\r\n      testStringCoercion(value);\r\n      return false;\r\n    } catch (e) {\r\n      return true;\r\n    }\r\n  }\r\n}\r\n\r\nfunction testStringCoercion(value) {\r\n  // If you ended up here by following an exception call stack, here's what's\r\n  // happened: you supplied an object or symbol value to React (as a prop, key,\r\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\r\n  // coerce it to a string using `'' + value`, an exception was thrown.\r\n  //\r\n  // The most common types that will cause this exception are `Symbol` instances\r\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\r\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\r\n  // exception. (Library authors do this to prevent users from using built-in\r\n  // numeric operators like `+` or comparison operators like `>=` because custom\r\n  // methods are needed to perform accurate arithmetic or comparison.)\r\n  //\r\n  // To fix the problem, coerce this object or symbol value to a string before\r\n  // passing it to React. The most reliable way is usually `String(value)`.\r\n  //\r\n  // To find which value is throwing, check the browser or debugger console.\r\n  // Before this exception was thrown, there should be `console.error` output\r\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\r\n  // problem and how that type was used: key, atrribute, input value prop, etc.\r\n  // In most cases, this console output also shows the component and its\r\n  // ancestor components where the exception happened.\r\n  //\r\n  // eslint-disable-next-line react-internal/safe-string-coercion\r\n  return '' + value;\r\n}\r\nfunction checkKeyStringCoercion(value) {\r\n  {\r\n    if (willCoercionThrow(value)) {\r\n      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));\r\n\r\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\r\n    }\r\n  }\r\n}\r\n\r\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\r\nvar RESERVED_PROPS = {\r\n  key: true,\r\n  ref: true,\r\n  __self: true,\r\n  __source: true\r\n};\r\nvar specialPropKeyWarningShown;\r\nvar specialPropRefWarningShown;\r\nvar didWarnAboutStringRefs;\r\n\r\n{\r\n  didWarnAboutStringRefs = {};\r\n}\r\n\r\nfunction hasValidRef(config) {\r\n  {\r\n    if (hasOwnProperty.call(config, 'ref')) {\r\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\r\n\r\n      if (getter && getter.isReactWarning) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  return config.ref !== undefined;\r\n}\r\n\r\nfunction hasValidKey(config) {\r\n  {\r\n    if (hasOwnProperty.call(config, 'key')) {\r\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\r\n\r\n      if (getter && getter.isReactWarning) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  return config.key !== undefined;\r\n}\r\n\r\nfunction warnIfStringRefCannotBeAutoConverted(config, self) {\r\n  {\r\n    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {\r\n      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);\r\n\r\n      if (!didWarnAboutStringRefs[componentName]) {\r\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);\r\n\r\n        didWarnAboutStringRefs[componentName] = true;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction defineKeyPropWarningGetter(props, displayName) {\r\n  {\r\n    var warnAboutAccessingKey = function () {\r\n      if (!specialPropKeyWarningShown) {\r\n        specialPropKeyWarningShown = true;\r\n\r\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\r\n      }\r\n    };\r\n\r\n    warnAboutAccessingKey.isReactWarning = true;\r\n    Object.defineProperty(props, 'key', {\r\n      get: warnAboutAccessingKey,\r\n      configurable: true\r\n    });\r\n  }\r\n}\r\n\r\nfunction defineRefPropWarningGetter(props, displayName) {\r\n  {\r\n    var warnAboutAccessingRef = function () {\r\n      if (!specialPropRefWarningShown) {\r\n        specialPropRefWarningShown = true;\r\n\r\n        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\r\n      }\r\n    };\r\n\r\n    warnAboutAccessingRef.isReactWarning = true;\r\n    Object.defineProperty(props, 'ref', {\r\n      get: warnAboutAccessingRef,\r\n      configurable: true\r\n    });\r\n  }\r\n}\r\n/**\r\n * Factory method to create a new React element. This no longer adheres to\r\n * the class pattern, so do not use new to call it. Also, instanceof check\r\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\r\n * if something is a React Element.\r\n *\r\n * @param {*} type\r\n * @param {*} props\r\n * @param {*} key\r\n * @param {string|object} ref\r\n * @param {*} owner\r\n * @param {*} self A *temporary* helper to detect places where `this` is\r\n * different from the `owner` when React.createElement is called, so that we\r\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\r\n * functions, and as long as `this` and owner are the same, there will be no\r\n * change in behavior.\r\n * @param {*} source An annotation object (added by a transpiler or otherwise)\r\n * indicating filename, line number, and/or other information.\r\n * @internal\r\n */\r\n\r\n\r\nvar ReactElement = function (type, key, ref, self, source, owner, props) {\r\n  var element = {\r\n    // This tag allows us to uniquely identify this as a React Element\r\n    $$typeof: REACT_ELEMENT_TYPE,\r\n    // Built-in properties that belong on the element\r\n    type: type,\r\n    key: key,\r\n    ref: ref,\r\n    props: props,\r\n    // Record the component responsible for creating this element.\r\n    _owner: owner\r\n  };\r\n\r\n  {\r\n    // The validation flag is currently mutative. We put it on\r\n    // an external backing store so that we can freeze the whole object.\r\n    // This can be replaced with a WeakMap once they are implemented in\r\n    // commonly used development environments.\r\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\r\n    // the validation flag non-enumerable (where possible, which should\r\n    // include every environment we run tests in), so the test framework\r\n    // ignores it.\r\n\r\n    Object.defineProperty(element._store, 'validated', {\r\n      configurable: false,\r\n      enumerable: false,\r\n      writable: true,\r\n      value: false\r\n    }); // self and source are DEV only properties.\r\n\r\n    Object.defineProperty(element, '_self', {\r\n      configurable: false,\r\n      enumerable: false,\r\n      writable: false,\r\n      value: self\r\n    }); // Two elements created in two different places should be considered\r\n    // equal for testing purposes and therefore we hide it from enumeration.\r\n\r\n    Object.defineProperty(element, '_source', {\r\n      configurable: false,\r\n      enumerable: false,\r\n      writable: false,\r\n      value: source\r\n    });\r\n\r\n    if (Object.freeze) {\r\n      Object.freeze(element.props);\r\n      Object.freeze(element);\r\n    }\r\n  }\r\n\r\n  return element;\r\n};\r\n/**\r\n * https://github.com/reactjs/rfcs/pull/107\r\n * @param {*} type\r\n * @param {object} props\r\n * @param {string} key\r\n */\r\n\r\nfunction jsxDEV(type, config, maybeKey, source, self) {\r\n  {\r\n    var propName; // Reserved names are extracted\r\n\r\n    var props = {};\r\n    var key = null;\r\n    var ref = null; // Currently, key can be spread in as a prop. This causes a potential\r\n    // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\r\n    // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\r\n    // but as an intermediary step, we will use jsxDEV for everything except\r\n    // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\r\n    // key is explicitly declared to be undefined or not.\r\n\r\n    if (maybeKey !== undefined) {\r\n      {\r\n        checkKeyStringCoercion(maybeKey);\r\n      }\r\n\r\n      key = '' + maybeKey;\r\n    }\r\n\r\n    if (hasValidKey(config)) {\r\n      {\r\n        checkKeyStringCoercion(config.key);\r\n      }\r\n\r\n      key = '' + config.key;\r\n    }\r\n\r\n    if (hasValidRef(config)) {\r\n      ref = config.ref;\r\n      warnIfStringRefCannotBeAutoConverted(config, self);\r\n    } // Remaining properties are added to a new props object\r\n\r\n\r\n    for (propName in config) {\r\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\r\n        props[propName] = config[propName];\r\n      }\r\n    } // Resolve default props\r\n\r\n\r\n    if (type && type.defaultProps) {\r\n      var defaultProps = type.defaultProps;\r\n\r\n      for (propName in defaultProps) {\r\n        if (props[propName] === undefined) {\r\n          props[propName] = defaultProps[propName];\r\n        }\r\n      }\r\n    }\r\n\r\n    if (key || ref) {\r\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\r\n\r\n      if (key) {\r\n        defineKeyPropWarningGetter(props, displayName);\r\n      }\r\n\r\n      if (ref) {\r\n        defineRefPropWarningGetter(props, displayName);\r\n      }\r\n    }\r\n\r\n    return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\r\n  }\r\n}\r\n\r\nvar ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\r\nvar ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\r\n\r\nfunction setCurrentlyValidatingElement$1(element) {\r\n  {\r\n    if (element) {\r\n      var owner = element._owner;\r\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\r\n      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\r\n    } else {\r\n      ReactDebugCurrentFrame$1.setExtraStackFrame(null);\r\n    }\r\n  }\r\n}\r\n\r\nvar propTypesMisspellWarningShown;\r\n\r\n{\r\n  propTypesMisspellWarningShown = false;\r\n}\r\n/**\r\n * Verifies the object is a ReactElement.\r\n * See https://reactjs.org/docs/react-api.html#isvalidelement\r\n * @param {?object} object\r\n * @return {boolean} True if `object` is a ReactElement.\r\n * @final\r\n */\r\n\r\n\r\nfunction isValidElement(object) {\r\n  {\r\n    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\r\n  }\r\n}\r\n\r\nfunction getDeclarationErrorAddendum() {\r\n  {\r\n    if (ReactCurrentOwner$1.current) {\r\n      var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);\r\n\r\n      if (name) {\r\n        return '\\n\\nCheck the render method of `' + name + '`.';\r\n      }\r\n    }\r\n\r\n    return '';\r\n  }\r\n}\r\n\r\nfunction getSourceInfoErrorAddendum(source) {\r\n  {\r\n    if (source !== undefined) {\r\n      var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\r\n      var lineNumber = source.lineNumber;\r\n      return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\r\n    }\r\n\r\n    return '';\r\n  }\r\n}\r\n/**\r\n * Warn if there's no key explicitly set on dynamic arrays of children or\r\n * object keys are not valid. This allows us to keep track of children between\r\n * updates.\r\n */\r\n\r\n\r\nvar ownerHasKeyUseWarning = {};\r\n\r\nfunction getCurrentComponentErrorInfo(parentType) {\r\n  {\r\n    var info = getDeclarationErrorAddendum();\r\n\r\n    if (!info) {\r\n      var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\r\n\r\n      if (parentName) {\r\n        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\r\n      }\r\n    }\r\n\r\n    return info;\r\n  }\r\n}\r\n/**\r\n * Warn if the element doesn't have an explicit key assigned to it.\r\n * This element is in an array. The array could grow and shrink or be\r\n * reordered. All children that haven't already been validated are required to\r\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\r\n * will only be shown once.\r\n *\r\n * @internal\r\n * @param {ReactElement} element Element that requires a key.\r\n * @param {*} parentType element's parent's type.\r\n */\r\n\r\n\r\nfunction validateExplicitKey(element, parentType) {\r\n  {\r\n    if (!element._store || element._store.validated || element.key != null) {\r\n      return;\r\n    }\r\n\r\n    element._store.validated = true;\r\n    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\r\n\r\n    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\r\n      return;\r\n    }\r\n\r\n    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\r\n    // property, it may be the creator of the child that's responsible for\r\n    // assigning it a key.\r\n\r\n    var childOwner = '';\r\n\r\n    if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {\r\n      // Give the component that originally created this child.\r\n      childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\r\n    }\r\n\r\n    setCurrentlyValidatingElement$1(element);\r\n\r\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\r\n\r\n    setCurrentlyValidatingElement$1(null);\r\n  }\r\n}\r\n/**\r\n * Ensure that every element either is passed in a static location, in an\r\n * array with an explicit keys property defined, or in an object literal\r\n * with valid key property.\r\n *\r\n * @internal\r\n * @param {ReactNode} node Statically passed child of any type.\r\n * @param {*} parentType node's parent's type.\r\n */\r\n\r\n\r\nfunction validateChildKeys(node, parentType) {\r\n  {\r\n    if (typeof node !== 'object') {\r\n      return;\r\n    }\r\n\r\n    if (isArray(node)) {\r\n      for (var i = 0; i < node.length; i++) {\r\n        var child = node[i];\r\n\r\n        if (isValidElement(child)) {\r\n          validateExplicitKey(child, parentType);\r\n        }\r\n      }\r\n    } else if (isValidElement(node)) {\r\n      // This element was passed in a valid location.\r\n      if (node._store) {\r\n        node._store.validated = true;\r\n      }\r\n    } else if (node) {\r\n      var iteratorFn = getIteratorFn(node);\r\n\r\n      if (typeof iteratorFn === 'function') {\r\n        // Entry iterators used to provide implicit keys,\r\n        // but now we print a separate warning for them later.\r\n        if (iteratorFn !== node.entries) {\r\n          var iterator = iteratorFn.call(node);\r\n          var step;\r\n\r\n          while (!(step = iterator.next()).done) {\r\n            if (isValidElement(step.value)) {\r\n              validateExplicitKey(step.value, parentType);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n/**\r\n * Given an element, validate that its props follow the propTypes definition,\r\n * provided by the type.\r\n *\r\n * @param {ReactElement} element\r\n */\r\n\r\n\r\nfunction validatePropTypes(element) {\r\n  {\r\n    var type = element.type;\r\n\r\n    if (type === null || type === undefined || typeof type === 'string') {\r\n      return;\r\n    }\r\n\r\n    var propTypes;\r\n\r\n    if (typeof type === 'function') {\r\n      propTypes = type.propTypes;\r\n    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\r\n    // Inner props are checked in the reconciler.\r\n    type.$$typeof === REACT_MEMO_TYPE)) {\r\n      propTypes = type.propTypes;\r\n    } else {\r\n      return;\r\n    }\r\n\r\n    if (propTypes) {\r\n      // Intentionally inside to avoid triggering lazy initializers:\r\n      var name = getComponentNameFromType(type);\r\n      checkPropTypes(propTypes, element.props, 'prop', name, element);\r\n    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\r\n      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\r\n\r\n      var _name = getComponentNameFromType(type);\r\n\r\n      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');\r\n    }\r\n\r\n    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {\r\n      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');\r\n    }\r\n  }\r\n}\r\n/**\r\n * Given a fragment, validate that it can only be provided with fragment props\r\n * @param {ReactElement} fragment\r\n */\r\n\r\n\r\nfunction validateFragmentProps(fragment) {\r\n  {\r\n    var keys = Object.keys(fragment.props);\r\n\r\n    for (var i = 0; i < keys.length; i++) {\r\n      var key = keys[i];\r\n\r\n      if (key !== 'children' && key !== 'key') {\r\n        setCurrentlyValidatingElement$1(fragment);\r\n\r\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\r\n\r\n        setCurrentlyValidatingElement$1(null);\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (fragment.ref !== null) {\r\n      setCurrentlyValidatingElement$1(fragment);\r\n\r\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\r\n\r\n      setCurrentlyValidatingElement$1(null);\r\n    }\r\n  }\r\n}\r\n\r\nfunction jsxWithValidation(type, props, key, isStaticChildren, source, self) {\r\n  {\r\n    var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\r\n    // succeed and there will likely be errors in render.\r\n\r\n    if (!validType) {\r\n      var info = '';\r\n\r\n      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\r\n        info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\r\n      }\r\n\r\n      var sourceInfo = getSourceInfoErrorAddendum(source);\r\n\r\n      if (sourceInfo) {\r\n        info += sourceInfo;\r\n      } else {\r\n        info += getDeclarationErrorAddendum();\r\n      }\r\n\r\n      var typeString;\r\n\r\n      if (type === null) {\r\n        typeString = 'null';\r\n      } else if (isArray(type)) {\r\n        typeString = 'array';\r\n      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\r\n        typeString = \"<\" + (getComponentNameFromType(type.type) || 'Unknown') + \" />\";\r\n        info = ' Did you accidentally export a JSX literal instead of a component?';\r\n      } else {\r\n        typeString = typeof type;\r\n      }\r\n\r\n      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\r\n    }\r\n\r\n    var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\r\n    // TODO: Drop this when these are no longer allowed as the type argument.\r\n\r\n    if (element == null) {\r\n      return element;\r\n    } // Skip key warning if the type isn't valid since our key validation logic\r\n    // doesn't expect a non-string/function type and can throw confusing errors.\r\n    // We don't want exception behavior to differ between dev and prod.\r\n    // (Rendering will throw with a helpful message and as soon as the type is\r\n    // fixed, the key warnings will appear.)\r\n\r\n\r\n    if (validType) {\r\n      var children = props.children;\r\n\r\n      if (children !== undefined) {\r\n        if (isStaticChildren) {\r\n          if (isArray(children)) {\r\n            for (var i = 0; i < children.length; i++) {\r\n              validateChildKeys(children[i], type);\r\n            }\r\n\r\n            if (Object.freeze) {\r\n              Object.freeze(children);\r\n            }\r\n          } else {\r\n            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');\r\n          }\r\n        } else {\r\n          validateChildKeys(children, type);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (type === REACT_FRAGMENT_TYPE) {\r\n      validateFragmentProps(element);\r\n    } else {\r\n      validatePropTypes(element);\r\n    }\r\n\r\n    return element;\r\n  }\r\n} // These two functions exist to still get child warnings in dev\r\n\r\nvar jsxDEV$1 =  jsxWithValidation ;\r\n\r\nexports.Fragment = REACT_FRAGMENT_TYPE;\r\nexports.jsxDEV = jsxDEV$1;\r\n  })();\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/react/jsx-dev-runtime.js":
/*!***********************************************!*\
  !*** ./node_modules/react/jsx-dev-runtime.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\r\n\r\nif (false) {} else {\r\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(pages-dir-browser)/./node_modules/react/cjs/react-jsx-dev-runtime.development.js\");\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yZWFjdC9qc3gtZGV2LXJ1bnRpbWUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSwyS0FBc0U7QUFDeEUiLCJzb3VyY2VzIjpbIkQ6XFxEb19hbjJcXGxlbmRodWJfdjJcXGxlbmRodWItZnJvbnRlbmQtbmV4dGpzXFxub2RlX21vZHVsZXNcXHJlYWN0XFxqc3gtZGV2LXJ1bnRpbWUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5cclxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcclxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1kZXYtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qcycpO1xyXG59IGVsc2Uge1xyXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XHJcbn1cclxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/react/jsx-dev-runtime.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./src/abis/DAIToken.json":
/*!********************************!*\
  !*** ./src/abis/DAIToken.json ***!
  \********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"abi":[{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}]}');

/***/ }),

/***/ "(pages-dir-browser)/./src/abis/LendingHelper.json":
/*!*************************************!*\
  !*** ./src/abis/LendingHelper.json ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"abi":[{"inputs":[{"internalType":"address","name":"asset","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"getAmountInUSD","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"getTokensPerUSDAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}]}');

/***/ }),

/***/ "(pages-dir-browser)/./src/abis/LendingPool.json":
/*!***********************************!*\
  !*** ./src/abis/LendingPool.json ***!
  \***********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"abi":[{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"getAccountData","outputs":[{"internalType":"uint256","name":"collateralValue1e18","type":"uint256"},{"internalType":"uint256","name":"debtValue1e18","type":"uint256"},{"internalType":"uint256","name":"healthFactor1e18","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"asset","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"lend","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"asset","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"asset","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"borrow","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"asset","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"repay","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"getLenderAssets","outputs":[{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"lentQty","type":"uint256"},{"internalType":"uint256","name":"lentApy","type":"uint256"}],"internalType":"struct LendingPool.LenderAsset[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"getBorrowerAssets","outputs":[{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"borrowQty","type":"uint256"},{"internalType":"uint256","name":"borrowApy","type":"uint256"}],"internalType":"struct LendingPool.BorrowerAsset[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"getAssetsToBorrow","outputs":[{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"borrowQty","type":"uint256"},{"internalType":"uint256","name":"borrowApy","type":"uint256"}],"internalType":"struct LendingPool.BorrowerAsset[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"assetType","type":"uint256"}],"name":"getUserTotalAvailableBalanceInUSD","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"address","name":"asset","type":"address"}],"name":"getUserReserve","outputs":[{"components":[{"components":[{"internalType":"uint128","name":"principal","type":"uint128"},{"internalType":"uint128","name":"index","type":"uint128"}],"internalType":"struct LendingPool.UserReserveData","name":"supply","type":"tuple"},{"components":[{"internalType":"uint128","name":"principal","type":"uint128"},{"internalType":"uint128","name":"index","type":"uint128"}],"internalType":"struct LendingPool.UserReserveData","name":"borrow","type":"tuple"}],"internalType":"struct LendingPool.UserReserve","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"asset","type":"address"}],"name":"accruePublic","outputs":[],"stateMutability":"nonpayable","type":"function"}]}');

/***/ }),

/***/ "(pages-dir-browser)/./src/abis/index.js":
/*!***************************!*\
  !*** ./src/abis/index.js ***!
  \***************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\nconst TokenABI = __webpack_require__(/*! ./DAIToken.json */ \"(pages-dir-browser)/./src/abis/DAIToken.json\");\nconst LendingPoolABI = __webpack_require__(/*! ./LendingPool.json */ \"(pages-dir-browser)/./src/abis/LendingPool.json\");\nconst LendingHelperABI = __webpack_require__(/*! ./LendingHelper.json */ \"(pages-dir-browser)/./src/abis/LendingHelper.json\");\nmodule.exports = {\n    TokenABI,\n    LendingPoolABI,\n    LendingHelperABI\n};\n\n\n;\r\n    // Wrapped in an IIFE to avoid polluting the global scope\r\n    ;\r\n    (function () {\r\n        var _a, _b;\r\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\r\n        // to extract CSS. For backwards compatibility, we need to check we're in a\r\n        // browser context before continuing.\r\n        if (typeof self !== 'undefined' &&\r\n            // AMP / No-JS mode does not inject these helpers:\r\n            '$RefreshHelpers$' in self) {\r\n            // @ts-ignore __webpack_module__ is global\r\n            var currentExports = module.exports;\r\n            // @ts-ignore __webpack_module__ is global\r\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\r\n            // This cannot happen in MainTemplate because the exports mismatch between\r\n            // templating and execution.\r\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\r\n            // A module can be accepted automatically based on its exports, e.g. when\r\n            // it is a Refresh Boundary.\r\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\r\n                // Save the previous exports signature on update so we can compare the boundary\r\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\r\n                module.hot.dispose(function (data) {\r\n                    data.prevSignature =\r\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\r\n                });\r\n                // Unconditionally accept an update to this module, we'll check if it's\r\n                // still a Refresh Boundary later.\r\n                // @ts-ignore importMeta is replaced in the loader\r\n                module.hot.accept();\r\n                // This field is set when the previous version of this module was a\r\n                // Refresh Boundary, letting us know we need to check for invalidation or\r\n                // enqueue an update.\r\n                if (prevSignature !== null) {\r\n                    // A boundary can become ineligible if its exports are incompatible\r\n                    // with the previous exports.\r\n                    //\r\n                    // For example, if you add/remove/change exports, we'll want to\r\n                    // re-execute the importing modules, and force those components to\r\n                    // re-render. Similarly, if you convert a class component to a\r\n                    // function, we want to invalidate the boundary.\r\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\r\n                        module.hot.invalidate();\r\n                    }\r\n                    else {\r\n                        self.$RefreshHelpers$.scheduleUpdate();\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // Since we just executed the code for the module, it's possible that the\r\n                // new exports made it ineligible for being a boundary.\r\n                // We only care about the case when we were _previously_ a boundary,\r\n                // because we already accepted this update (accidental side effect).\r\n                var isNoLongerABoundary = prevSignature !== null;\r\n                if (isNoLongerABoundary) {\r\n                    module.hot.invalidate();\r\n                }\r\n            }\r\n        }\r\n    })();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL3NyYy9hYmlzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNQSxXQUFXQyxtQkFBT0EsQ0FBQyxxRUFBaUI7QUFDMUMsTUFBTUMsaUJBQWlCRCxtQkFBT0EsQ0FBQywyRUFBb0I7QUFDbkQsTUFBTUUsbUJBQW1CRixtQkFBT0EsQ0FBQywrRUFBc0I7QUFFdkRHLE9BQU9DLE9BQU8sR0FBRztJQUNmTDtJQUNBRTtJQUNBQztBQUNGIiwic291cmNlcyI6WyJEOlxcRG9fYW4yXFxsZW5kaHViX3YyXFxsZW5kaHViLWZyb250ZW5kLW5leHRqc1xcc3JjXFxhYmlzXFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBUb2tlbkFCSSA9IHJlcXVpcmUoJy4vREFJVG9rZW4uanNvbicpO1xyXG5jb25zdCBMZW5kaW5nUG9vbEFCSSA9IHJlcXVpcmUoJy4vTGVuZGluZ1Bvb2wuanNvbicpO1xyXG5jb25zdCBMZW5kaW5nSGVscGVyQUJJID0gcmVxdWlyZSgnLi9MZW5kaW5nSGVscGVyLmpzb24nKTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gIFRva2VuQUJJLFxyXG4gIExlbmRpbmdQb29sQUJJLFxyXG4gIExlbmRpbmdIZWxwZXJBQkksXHJcbn07XHJcblxyXG5cclxuIl0sIm5hbWVzIjpbIlRva2VuQUJJIiwicmVxdWlyZSIsIkxlbmRpbmdQb29sQUJJIiwiTGVuZGluZ0hlbHBlckFCSSIsIm1vZHVsZSIsImV4cG9ydHMiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./src/abis/index.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./src/addresses.js":
/*!**************************!*\
  !*** ./src/addresses.js ***!
  \**************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DAIAddress: () => (/* binding */ DAIAddress),\n/* harmony export */   ETHAddress: () => (/* binding */ ETHAddress),\n/* harmony export */   InterestRateModelAddress: () => (/* binding */ InterestRateModelAddress),\n/* harmony export */   LINKAddress: () => (/* binding */ LINKAddress),\n/* harmony export */   LendingHelperAddress: () => (/* binding */ LendingHelperAddress),\n/* harmony export */   LendingPoolAddress: () => (/* binding */ LendingPoolAddress),\n/* harmony export */   MockV3AggregatorAddress: () => (/* binding */ MockV3AggregatorAddress),\n/* harmony export */   PriceOracleAddress: () => (/* binding */ PriceOracleAddress),\n/* harmony export */   USDCAddress: () => (/* binding */ USDCAddress),\n/* harmony export */   WETHAddress: () => (/* binding */ WETHAddress)\n/* harmony export */ });\n// Contract addresses (auto-updated by deploy script)\nconst ETHAddress = \"0x0000000000000000000000000000000000000000\";\nconst LendingPoolAddress = \"0x6A390857c83B00c915101ba92e85390F3D092Da4\";\nconst InterestRateModelAddress = \"0x886B0BCCAa9787e6253A34FCbb0B0C41515fC1ad\";\nconst LendingHelperAddress = \"0x0000000000000000000000000000000000000000\"; // Not deployed\nconst WETHAddress = \"0x5dbaA510902A078Fb07D828a779b4a1CCD931FCe\";\nconst DAIAddress = \"0xA9333DE801626733a8C4996F0A55C279817c1481\";\nconst USDCAddress = \"0xE69772C639d168EF8e252C17EB591E43E5B0D914\";\nconst LINKAddress = \"0xa24b76c2BE9B2AA65048Acc1dAF7be920d2AEf29\";\nconst PriceOracleAddress = \"0xd49Ffcb8507478C3b35886a0A6F7a0C75eC730e0\";\nconst MockV3AggregatorAddress = \"0x3814c61Cdd91708fc8391AF266Bf1e28CB2a43a5\";\n\n\n;\r\n    // Wrapped in an IIFE to avoid polluting the global scope\r\n    ;\r\n    (function () {\r\n        var _a, _b;\r\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\r\n        // to extract CSS. For backwards compatibility, we need to check we're in a\r\n        // browser context before continuing.\r\n        if (typeof self !== 'undefined' &&\r\n            // AMP / No-JS mode does not inject these helpers:\r\n            '$RefreshHelpers$' in self) {\r\n            // @ts-ignore __webpack_module__ is global\r\n            var currentExports = module.exports;\r\n            // @ts-ignore __webpack_module__ is global\r\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\r\n            // This cannot happen in MainTemplate because the exports mismatch between\r\n            // templating and execution.\r\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\r\n            // A module can be accepted automatically based on its exports, e.g. when\r\n            // it is a Refresh Boundary.\r\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\r\n                // Save the previous exports signature on update so we can compare the boundary\r\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\r\n                module.hot.dispose(function (data) {\r\n                    data.prevSignature =\r\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\r\n                });\r\n                // Unconditionally accept an update to this module, we'll check if it's\r\n                // still a Refresh Boundary later.\r\n                // @ts-ignore importMeta is replaced in the loader\r\n                module.hot.accept();\r\n                // This field is set when the previous version of this module was a\r\n                // Refresh Boundary, letting us know we need to check for invalidation or\r\n                // enqueue an update.\r\n                if (prevSignature !== null) {\r\n                    // A boundary can become ineligible if its exports are incompatible\r\n                    // with the previous exports.\r\n                    //\r\n                    // For example, if you add/remove/change exports, we'll want to\r\n                    // re-execute the importing modules, and force those components to\r\n                    // re-render. Similarly, if you convert a class component to a\r\n                    // function, we want to invalidate the boundary.\r\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\r\n                        module.hot.invalidate();\r\n                    }\r\n                    else {\r\n                        self.$RefreshHelpers$.scheduleUpdate();\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // Since we just executed the code for the module, it's possible that the\r\n                // new exports made it ineligible for being a boundary.\r\n                // We only care about the case when we were _previously_ a boundary,\r\n                // because we already accepted this update (accidental side effect).\r\n                var isNoLongerABoundary = prevSignature !== null;\r\n                if (isNoLongerABoundary) {\r\n                    module.hot.invalidate();\r\n                }\r\n            }\r\n        }\r\n    })();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL3NyYy9hZGRyZXNzZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBLHFEQUFxRDtBQUM5QyxNQUFNQSxhQUFhLDZDQUE2QztBQUNoRSxNQUFNQyxxQkFBcUIsNkNBQTZDO0FBQ3hFLE1BQU1DLDJCQUEyQiw2Q0FBNkM7QUFDOUUsTUFBTUMsdUJBQXVCLDZDQUE2QyxDQUFDLGVBQWU7QUFDMUYsTUFBTUMsY0FBYyw2Q0FBNkM7QUFDakUsTUFBTUMsYUFBYSw2Q0FBNkM7QUFDaEUsTUFBTUMsY0FBYyw2Q0FBNkM7QUFDakUsTUFBTUMsY0FBYyw2Q0FBNkM7QUFDakUsTUFBTUMscUJBQXFCLDZDQUE2QztBQUN4RSxNQUFNQywwQkFBMEIsNkNBQTZDIiwic291cmNlcyI6WyJEOlxcRG9fYW4yXFxsZW5kaHViX3YyXFxsZW5kaHViLWZyb250ZW5kLW5leHRqc1xcc3JjXFxhZGRyZXNzZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29udHJhY3QgYWRkcmVzc2VzIChhdXRvLXVwZGF0ZWQgYnkgZGVwbG95IHNjcmlwdClcbmV4cG9ydCBjb25zdCBFVEhBZGRyZXNzID0gXCIweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIjtcbmV4cG9ydCBjb25zdCBMZW5kaW5nUG9vbEFkZHJlc3MgPSBcIjB4NkEzOTA4NTdjODNCMDBjOTE1MTAxYmE5MmU4NTM5MEYzRDA5MkRhNFwiO1xuZXhwb3J0IGNvbnN0IEludGVyZXN0UmF0ZU1vZGVsQWRkcmVzcyA9IFwiMHg4ODZCMEJDQ0FhOTc4N2U2MjUzQTM0RkNiYjBCMEM0MTUxNWZDMWFkXCI7XG5leHBvcnQgY29uc3QgTGVuZGluZ0hlbHBlckFkZHJlc3MgPSBcIjB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiOyAvLyBOb3QgZGVwbG95ZWRcbmV4cG9ydCBjb25zdCBXRVRIQWRkcmVzcyA9IFwiMHg1ZGJhQTUxMDkwMkEwNzhGYjA3RDgyOGE3NzliNGExQ0NEOTMxRkNlXCI7XG5leHBvcnQgY29uc3QgREFJQWRkcmVzcyA9IFwiMHhBOTMzM0RFODAxNjI2NzMzYThDNDk5NkYwQTU1QzI3OTgxN2MxNDgxXCI7XG5leHBvcnQgY29uc3QgVVNEQ0FkZHJlc3MgPSBcIjB4RTY5NzcyQzYzOWQxNjhFRjhlMjUyQzE3RUI1OTFFNDNFNUIwRDkxNFwiO1xuZXhwb3J0IGNvbnN0IExJTktBZGRyZXNzID0gXCIweGEyNGI3NmMyQkU5QjJBQTY1MDQ4QWNjMWRBRjdiZTkyMGQyQUVmMjlcIjtcbmV4cG9ydCBjb25zdCBQcmljZU9yYWNsZUFkZHJlc3MgPSBcIjB4ZDQ5RmZjYjg1MDc0NzhDM2IzNTg4NmEwQTZGN2EwQzc1ZUM3MzBlMFwiO1xuZXhwb3J0IGNvbnN0IE1vY2tWM0FnZ3JlZ2F0b3JBZGRyZXNzID0gXCIweDM4MTRjNjFDZGQ5MTcwOGZjODM5MUFGMjY2QmYxZTI4Q0IyYTQzYTVcIjtcbiJdLCJuYW1lcyI6WyJFVEhBZGRyZXNzIiwiTGVuZGluZ1Bvb2xBZGRyZXNzIiwiSW50ZXJlc3RSYXRlTW9kZWxBZGRyZXNzIiwiTGVuZGluZ0hlbHBlckFkZHJlc3MiLCJXRVRIQWRkcmVzcyIsIkRBSUFkZHJlc3MiLCJVU0RDQWRkcmVzcyIsIkxJTktBZGRyZXNzIiwiUHJpY2VPcmFjbGVBZGRyZXNzIiwiTW9ja1YzQWdncmVnYXRvckFkZHJlc3MiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./src/addresses.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./src/config/abis.ts":
/*!****************************!*\
  !*** ./src/config/abis.ts ***!
  \****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ERC20_ABI: () => (/* binding */ ERC20_ABI),\n/* harmony export */   INTEREST_RATE_MODEL_ABI: () => (/* binding */ INTEREST_RATE_MODEL_ABI),\n/* harmony export */   ORACLE_ABI: () => (/* binding */ ORACLE_ABI),\n/* harmony export */   POOL_ABI: () => (/* binding */ POOL_ABI)\n/* harmony export */ });\n// Contract ABIs for LendHub v2\nconst POOL_ABI = [\n    // View functions\n    'function getAccountData(address user) external view returns (uint256 collateralValue1e18, uint256 debtValue1e18, uint256 healthFactor1e18)',\n    'function getReserveData(address asset) external view returns (uint256 reserveCash, uint256 totalDebt, uint256 utilizationWad, uint256 liquidityRateRayPerSec, uint256 variableBorrowRateRayPerSec, uint256 liquidityIndexRay, uint256 variableBorrowIndexRay, uint8 decimals, bool isBorrowable, uint16 liquidationThreshold, uint16 ltv, uint16 reserveFactor, uint16 liquidationBonus, uint16 closeFactor)',\n    'function getUserReserveData(address user, address asset) external view returns (uint256 supplyBalance1e18, uint256 borrowBalance1e18, bool isCollateral)',\n    'function reserves(address asset) external view returns (uint256 reserveCash, uint256 totalDebt, uint256 utilizationWad, uint256 liquidityRateRayPerSec, uint256 variableBorrowRateRayPerSec, uint256 liquidityIndexRay, uint256 variableBorrowIndexRay, uint8 decimals, bool isBorrowable, uint16 liquidationThreshold, uint16 ltv, uint16 reserveFactor, uint16 liquidationBonus, uint16 closeFactor)',\n    'function userReserves(address user, address asset) external view returns (uint256 supplyBalance1e18, uint256 borrowBalance1e18, bool isCollateral)',\n    // Write functions\n    'function lend(address asset, uint256 amount) external',\n    'function withdraw(address asset, uint256 amount) external',\n    'function borrow(address asset, uint256 amount) external',\n    'function repay(address asset, uint256 amount, address onBehalfOf) external returns (uint256)',\n    'function liquidationCall(address debtAsset, address collateralAsset, address user, uint256 debtAmount) external',\n    'function accruePublic(address asset) external',\n    // Events\n    'event ReserveDataUpdated(address indexed asset, uint256 utilizationWad, uint256 liquidityRateRayPerSec, uint256 variableBorrowRateRayPerSec, uint256 liquidityIndexRay, uint256 variableBorrowIndexRay)',\n    'event Supplied(address indexed user, address indexed asset, uint256 amount)',\n    'event Withdrawn(address indexed user, address indexed asset, uint256 amount)',\n    'event Borrowed(address indexed user, address indexed asset, uint256 amount)',\n    'event Repaid(address indexed user, address indexed onBehalfOf, address indexed asset, uint256 amount)',\n    'event Liquidated(address indexed liquidator, address indexed user, address indexed debtAsset, address indexed collateralAsset, uint256 debtAmount, uint256 collateralAmount)'\n];\nconst ERC20_ABI = [\n    // View functions\n    'function balanceOf(address owner) external view returns (uint256)',\n    'function allowance(address owner, address spender) external view returns (uint256)',\n    'function decimals() external view returns (uint8)',\n    'function symbol() external view returns (string)',\n    'function name() external view returns (string)',\n    'function totalSupply() external view returns (uint256)',\n    // Write functions\n    'function approve(address spender, uint256 amount) external returns (bool)',\n    'function transfer(address to, uint256 amount) external returns (bool)',\n    'function transferFrom(address from, address to, uint256 amount) external returns (bool)',\n    // Events\n    'event Transfer(address indexed from, address indexed to, uint256 value)',\n    'event Approval(address indexed owner, address indexed spender, uint256 value)'\n];\nconst ORACLE_ABI = [\n    // View functions\n    'function getAssetPrice1e18(address asset) external view returns (uint256)',\n    'function getAssetPrice(address asset) external view returns (uint256)',\n    // Write functions (for testing)\n    'function setAssetPrice(address asset, uint256 price) external',\n    // Events\n    'event AssetPriceUpdated(address indexed asset, uint256 oldPrice, uint256 newPrice)'\n];\n// Interest Rate Model ABI (if needed)\nconst INTEREST_RATE_MODEL_ABI = [\n    'function getBorrowRate(uint256 cash, uint256 borrows, uint256 reserves) external view returns (uint256)',\n    'function getSupplyRate(uint256 cash, uint256 borrows, uint256 reserves, uint256 reserveFactorMantissa) external view returns (uint256)'\n];\n\n\n;\r\n    // Wrapped in an IIFE to avoid polluting the global scope\r\n    ;\r\n    (function () {\r\n        var _a, _b;\r\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\r\n        // to extract CSS. For backwards compatibility, we need to check we're in a\r\n        // browser context before continuing.\r\n        if (typeof self !== 'undefined' &&\r\n            // AMP / No-JS mode does not inject these helpers:\r\n            '$RefreshHelpers$' in self) {\r\n            // @ts-ignore __webpack_module__ is global\r\n            var currentExports = module.exports;\r\n            // @ts-ignore __webpack_module__ is global\r\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\r\n            // This cannot happen in MainTemplate because the exports mismatch between\r\n            // templating and execution.\r\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\r\n            // A module can be accepted automatically based on its exports, e.g. when\r\n            // it is a Refresh Boundary.\r\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\r\n                // Save the previous exports signature on update so we can compare the boundary\r\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\r\n                module.hot.dispose(function (data) {\r\n                    data.prevSignature =\r\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\r\n                });\r\n                // Unconditionally accept an update to this module, we'll check if it's\r\n                // still a Refresh Boundary later.\r\n                // @ts-ignore importMeta is replaced in the loader\r\n                module.hot.accept();\r\n                // This field is set when the previous version of this module was a\r\n                // Refresh Boundary, letting us know we need to check for invalidation or\r\n                // enqueue an update.\r\n                if (prevSignature !== null) {\r\n                    // A boundary can become ineligible if its exports are incompatible\r\n                    // with the previous exports.\r\n                    //\r\n                    // For example, if you add/remove/change exports, we'll want to\r\n                    // re-execute the importing modules, and force those components to\r\n                    // re-render. Similarly, if you convert a class component to a\r\n                    // function, we want to invalidate the boundary.\r\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\r\n                        module.hot.invalidate();\r\n                    }\r\n                    else {\r\n                        self.$RefreshHelpers$.scheduleUpdate();\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // Since we just executed the code for the module, it's possible that the\r\n                // new exports made it ineligible for being a boundary.\r\n                // We only care about the case when we were _previously_ a boundary,\r\n                // because we already accepted this update (accidental side effect).\r\n                var isNoLongerABoundary = prevSignature !== null;\r\n                if (isNoLongerABoundary) {\r\n                    module.hot.invalidate();\r\n                }\r\n            }\r\n        }\r\n    })();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL3NyYy9jb25maWcvYWJpcy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsK0JBQStCO0FBRXhCLE1BQU1BLFdBQVc7SUFDdEIsaUJBQWlCO0lBQ2pCO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFFQSxrQkFBa0I7SUFDbEI7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBRUEsU0FBUztJQUNUO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtDQUNELENBQVU7QUFFSixNQUFNQyxZQUFZO0lBQ3ZCLGlCQUFpQjtJQUNqQjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFFQSxrQkFBa0I7SUFDbEI7SUFDQTtJQUNBO0lBRUEsU0FBUztJQUNUO0lBQ0E7Q0FDRCxDQUFVO0FBRUosTUFBTUMsYUFBYTtJQUN4QixpQkFBaUI7SUFDakI7SUFDQTtJQUVBLGdDQUFnQztJQUNoQztJQUVBLFNBQVM7SUFDVDtDQUNELENBQVU7QUFFWCxzQ0FBc0M7QUFDL0IsTUFBTUMsMEJBQTBCO0lBQ3JDO0lBQ0E7Q0FDRCxDQUFVIiwic291cmNlcyI6WyJEOlxcRG9fYW4yXFxsZW5kaHViX3YyXFxsZW5kaHViLWZyb250ZW5kLW5leHRqc1xcc3JjXFxjb25maWdcXGFiaXMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29udHJhY3QgQUJJcyBmb3IgTGVuZEh1YiB2MlxyXG5cclxuZXhwb3J0IGNvbnN0IFBPT0xfQUJJID0gW1xyXG4gIC8vIFZpZXcgZnVuY3Rpb25zXHJcbiAgJ2Z1bmN0aW9uIGdldEFjY291bnREYXRhKGFkZHJlc3MgdXNlcikgZXh0ZXJuYWwgdmlldyByZXR1cm5zICh1aW50MjU2IGNvbGxhdGVyYWxWYWx1ZTFlMTgsIHVpbnQyNTYgZGVidFZhbHVlMWUxOCwgdWludDI1NiBoZWFsdGhGYWN0b3IxZTE4KScsXHJcbiAgJ2Z1bmN0aW9uIGdldFJlc2VydmVEYXRhKGFkZHJlc3MgYXNzZXQpIGV4dGVybmFsIHZpZXcgcmV0dXJucyAodWludDI1NiByZXNlcnZlQ2FzaCwgdWludDI1NiB0b3RhbERlYnQsIHVpbnQyNTYgdXRpbGl6YXRpb25XYWQsIHVpbnQyNTYgbGlxdWlkaXR5UmF0ZVJheVBlclNlYywgdWludDI1NiB2YXJpYWJsZUJvcnJvd1JhdGVSYXlQZXJTZWMsIHVpbnQyNTYgbGlxdWlkaXR5SW5kZXhSYXksIHVpbnQyNTYgdmFyaWFibGVCb3Jyb3dJbmRleFJheSwgdWludDggZGVjaW1hbHMsIGJvb2wgaXNCb3Jyb3dhYmxlLCB1aW50MTYgbGlxdWlkYXRpb25UaHJlc2hvbGQsIHVpbnQxNiBsdHYsIHVpbnQxNiByZXNlcnZlRmFjdG9yLCB1aW50MTYgbGlxdWlkYXRpb25Cb251cywgdWludDE2IGNsb3NlRmFjdG9yKScsXHJcbiAgJ2Z1bmN0aW9uIGdldFVzZXJSZXNlcnZlRGF0YShhZGRyZXNzIHVzZXIsIGFkZHJlc3MgYXNzZXQpIGV4dGVybmFsIHZpZXcgcmV0dXJucyAodWludDI1NiBzdXBwbHlCYWxhbmNlMWUxOCwgdWludDI1NiBib3Jyb3dCYWxhbmNlMWUxOCwgYm9vbCBpc0NvbGxhdGVyYWwpJyxcclxuICAnZnVuY3Rpb24gcmVzZXJ2ZXMoYWRkcmVzcyBhc3NldCkgZXh0ZXJuYWwgdmlldyByZXR1cm5zICh1aW50MjU2IHJlc2VydmVDYXNoLCB1aW50MjU2IHRvdGFsRGVidCwgdWludDI1NiB1dGlsaXphdGlvbldhZCwgdWludDI1NiBsaXF1aWRpdHlSYXRlUmF5UGVyU2VjLCB1aW50MjU2IHZhcmlhYmxlQm9ycm93UmF0ZVJheVBlclNlYywgdWludDI1NiBsaXF1aWRpdHlJbmRleFJheSwgdWludDI1NiB2YXJpYWJsZUJvcnJvd0luZGV4UmF5LCB1aW50OCBkZWNpbWFscywgYm9vbCBpc0JvcnJvd2FibGUsIHVpbnQxNiBsaXF1aWRhdGlvblRocmVzaG9sZCwgdWludDE2IGx0diwgdWludDE2IHJlc2VydmVGYWN0b3IsIHVpbnQxNiBsaXF1aWRhdGlvbkJvbnVzLCB1aW50MTYgY2xvc2VGYWN0b3IpJyxcclxuICAnZnVuY3Rpb24gdXNlclJlc2VydmVzKGFkZHJlc3MgdXNlciwgYWRkcmVzcyBhc3NldCkgZXh0ZXJuYWwgdmlldyByZXR1cm5zICh1aW50MjU2IHN1cHBseUJhbGFuY2UxZTE4LCB1aW50MjU2IGJvcnJvd0JhbGFuY2UxZTE4LCBib29sIGlzQ29sbGF0ZXJhbCknLFxyXG4gIFxyXG4gIC8vIFdyaXRlIGZ1bmN0aW9uc1xyXG4gICdmdW5jdGlvbiBsZW5kKGFkZHJlc3MgYXNzZXQsIHVpbnQyNTYgYW1vdW50KSBleHRlcm5hbCcsXHJcbiAgJ2Z1bmN0aW9uIHdpdGhkcmF3KGFkZHJlc3MgYXNzZXQsIHVpbnQyNTYgYW1vdW50KSBleHRlcm5hbCcsXHJcbiAgJ2Z1bmN0aW9uIGJvcnJvdyhhZGRyZXNzIGFzc2V0LCB1aW50MjU2IGFtb3VudCkgZXh0ZXJuYWwnLFxyXG4gICdmdW5jdGlvbiByZXBheShhZGRyZXNzIGFzc2V0LCB1aW50MjU2IGFtb3VudCwgYWRkcmVzcyBvbkJlaGFsZk9mKSBleHRlcm5hbCByZXR1cm5zICh1aW50MjU2KScsXHJcbiAgJ2Z1bmN0aW9uIGxpcXVpZGF0aW9uQ2FsbChhZGRyZXNzIGRlYnRBc3NldCwgYWRkcmVzcyBjb2xsYXRlcmFsQXNzZXQsIGFkZHJlc3MgdXNlciwgdWludDI1NiBkZWJ0QW1vdW50KSBleHRlcm5hbCcsXHJcbiAgJ2Z1bmN0aW9uIGFjY3J1ZVB1YmxpYyhhZGRyZXNzIGFzc2V0KSBleHRlcm5hbCcsXHJcbiAgXHJcbiAgLy8gRXZlbnRzXHJcbiAgJ2V2ZW50IFJlc2VydmVEYXRhVXBkYXRlZChhZGRyZXNzIGluZGV4ZWQgYXNzZXQsIHVpbnQyNTYgdXRpbGl6YXRpb25XYWQsIHVpbnQyNTYgbGlxdWlkaXR5UmF0ZVJheVBlclNlYywgdWludDI1NiB2YXJpYWJsZUJvcnJvd1JhdGVSYXlQZXJTZWMsIHVpbnQyNTYgbGlxdWlkaXR5SW5kZXhSYXksIHVpbnQyNTYgdmFyaWFibGVCb3Jyb3dJbmRleFJheSknLFxyXG4gICdldmVudCBTdXBwbGllZChhZGRyZXNzIGluZGV4ZWQgdXNlciwgYWRkcmVzcyBpbmRleGVkIGFzc2V0LCB1aW50MjU2IGFtb3VudCknLFxyXG4gICdldmVudCBXaXRoZHJhd24oYWRkcmVzcyBpbmRleGVkIHVzZXIsIGFkZHJlc3MgaW5kZXhlZCBhc3NldCwgdWludDI1NiBhbW91bnQpJyxcclxuICAnZXZlbnQgQm9ycm93ZWQoYWRkcmVzcyBpbmRleGVkIHVzZXIsIGFkZHJlc3MgaW5kZXhlZCBhc3NldCwgdWludDI1NiBhbW91bnQpJyxcclxuICAnZXZlbnQgUmVwYWlkKGFkZHJlc3MgaW5kZXhlZCB1c2VyLCBhZGRyZXNzIGluZGV4ZWQgb25CZWhhbGZPZiwgYWRkcmVzcyBpbmRleGVkIGFzc2V0LCB1aW50MjU2IGFtb3VudCknLFxyXG4gICdldmVudCBMaXF1aWRhdGVkKGFkZHJlc3MgaW5kZXhlZCBsaXF1aWRhdG9yLCBhZGRyZXNzIGluZGV4ZWQgdXNlciwgYWRkcmVzcyBpbmRleGVkIGRlYnRBc3NldCwgYWRkcmVzcyBpbmRleGVkIGNvbGxhdGVyYWxBc3NldCwgdWludDI1NiBkZWJ0QW1vdW50LCB1aW50MjU2IGNvbGxhdGVyYWxBbW91bnQpJyxcclxuXSBhcyBjb25zdDtcclxuXHJcbmV4cG9ydCBjb25zdCBFUkMyMF9BQkkgPSBbXHJcbiAgLy8gVmlldyBmdW5jdGlvbnNcclxuICAnZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgb3duZXIpIGV4dGVybmFsIHZpZXcgcmV0dXJucyAodWludDI1NiknLFxyXG4gICdmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBleHRlcm5hbCB2aWV3IHJldHVybnMgKHVpbnQyNTYpJyxcclxuICAnZnVuY3Rpb24gZGVjaW1hbHMoKSBleHRlcm5hbCB2aWV3IHJldHVybnMgKHVpbnQ4KScsXHJcbiAgJ2Z1bmN0aW9uIHN5bWJvbCgpIGV4dGVybmFsIHZpZXcgcmV0dXJucyAoc3RyaW5nKScsXHJcbiAgJ2Z1bmN0aW9uIG5hbWUoKSBleHRlcm5hbCB2aWV3IHJldHVybnMgKHN0cmluZyknLFxyXG4gICdmdW5jdGlvbiB0b3RhbFN1cHBseSgpIGV4dGVybmFsIHZpZXcgcmV0dXJucyAodWludDI1NiknLFxyXG4gIFxyXG4gIC8vIFdyaXRlIGZ1bmN0aW9uc1xyXG4gICdmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludDI1NiBhbW91bnQpIGV4dGVybmFsIHJldHVybnMgKGJvb2wpJyxcclxuICAnZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludDI1NiBhbW91bnQpIGV4dGVybmFsIHJldHVybnMgKGJvb2wpJyxcclxuICAnZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiBhbW91bnQpIGV4dGVybmFsIHJldHVybnMgKGJvb2wpJyxcclxuICBcclxuICAvLyBFdmVudHNcclxuICAnZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSknLFxyXG4gICdldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKScsXHJcbl0gYXMgY29uc3Q7XHJcblxyXG5leHBvcnQgY29uc3QgT1JBQ0xFX0FCSSA9IFtcclxuICAvLyBWaWV3IGZ1bmN0aW9uc1xyXG4gICdmdW5jdGlvbiBnZXRBc3NldFByaWNlMWUxOChhZGRyZXNzIGFzc2V0KSBleHRlcm5hbCB2aWV3IHJldHVybnMgKHVpbnQyNTYpJyxcclxuICAnZnVuY3Rpb24gZ2V0QXNzZXRQcmljZShhZGRyZXNzIGFzc2V0KSBleHRlcm5hbCB2aWV3IHJldHVybnMgKHVpbnQyNTYpJyxcclxuICBcclxuICAvLyBXcml0ZSBmdW5jdGlvbnMgKGZvciB0ZXN0aW5nKVxyXG4gICdmdW5jdGlvbiBzZXRBc3NldFByaWNlKGFkZHJlc3MgYXNzZXQsIHVpbnQyNTYgcHJpY2UpIGV4dGVybmFsJyxcclxuICBcclxuICAvLyBFdmVudHNcclxuICAnZXZlbnQgQXNzZXRQcmljZVVwZGF0ZWQoYWRkcmVzcyBpbmRleGVkIGFzc2V0LCB1aW50MjU2IG9sZFByaWNlLCB1aW50MjU2IG5ld1ByaWNlKScsXHJcbl0gYXMgY29uc3Q7XHJcblxyXG4vLyBJbnRlcmVzdCBSYXRlIE1vZGVsIEFCSSAoaWYgbmVlZGVkKVxyXG5leHBvcnQgY29uc3QgSU5URVJFU1RfUkFURV9NT0RFTF9BQkkgPSBbXHJcbiAgJ2Z1bmN0aW9uIGdldEJvcnJvd1JhdGUodWludDI1NiBjYXNoLCB1aW50MjU2IGJvcnJvd3MsIHVpbnQyNTYgcmVzZXJ2ZXMpIGV4dGVybmFsIHZpZXcgcmV0dXJucyAodWludDI1NiknLFxyXG4gICdmdW5jdGlvbiBnZXRTdXBwbHlSYXRlKHVpbnQyNTYgY2FzaCwgdWludDI1NiBib3Jyb3dzLCB1aW50MjU2IHJlc2VydmVzLCB1aW50MjU2IHJlc2VydmVGYWN0b3JNYW50aXNzYSkgZXh0ZXJuYWwgdmlldyByZXR1cm5zICh1aW50MjU2KScsXHJcbl0gYXMgY29uc3Q7XHJcbiJdLCJuYW1lcyI6WyJQT09MX0FCSSIsIkVSQzIwX0FCSSIsIk9SQUNMRV9BQkkiLCJJTlRFUkVTVF9SQVRFX01PREVMX0FCSSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./src/config/abis.ts\n"));

/***/ }),

/***/ "(pages-dir-browser)/./src/config/contracts.ts":
/*!*********************************!*\
  !*** ./src/config/contracts.ts ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CONFIG: () => (/* binding */ CONFIG),\n/* harmony export */   NETWORK_CONFIG: () => (/* binding */ NETWORK_CONFIG),\n/* harmony export */   getTokenByAddress: () => (/* binding */ getTokenByAddress),\n/* harmony export */   getTokenBySymbol: () => (/* binding */ getTokenBySymbol),\n/* harmony export */   isTokenBorrowable: () => (/* binding */ isTokenBorrowable),\n/* harmony export */   isTokenCollateral: () => (/* binding */ isTokenCollateral)\n/* harmony export */ });\n/* harmony import */ var _addresses__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../addresses */ \"(pages-dir-browser)/./src/addresses.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(pages-dir-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n\n// Contract configuration from environment variables\nconst CONFIG = {\n    RPC_URL: \"http://localhost:8545\" || 0,\n    CHAIN_ID: parseInt(\"1337\" || 0, 10),\n    CHAIN_ID_HEX: process.env.NEXT_PUBLIC_CHAIN_ID_HEX || '0x539',\n    // Contract addresses (auto-imported from addresses.js)\n    LENDING_POOL: _addresses__WEBPACK_IMPORTED_MODULE_0__.LendingPoolAddress,\n    PRICE_ORACLE: _addresses__WEBPACK_IMPORTED_MODULE_0__.PriceOracleAddress,\n    WETH: _addresses__WEBPACK_IMPORTED_MODULE_0__.WETHAddress,\n    // Token configuration\n    TOKENS: [\n        {\n            address: '0x0000000000000000000000000000000000000000',\n            symbol: 'ETH',\n            name: 'Ethereum',\n            decimals: 18,\n            isBorrowable: false,\n            isCollateral: false,\n            isNative: true\n        },\n        {\n            address: _addresses__WEBPACK_IMPORTED_MODULE_0__.WETHAddress,\n            symbol: 'WETH',\n            name: 'Wrapped Ethereum',\n            decimals: 18,\n            isBorrowable: false,\n            isCollateral: true\n        },\n        {\n            address: _addresses__WEBPACK_IMPORTED_MODULE_0__.DAIAddress,\n            symbol: 'DAI',\n            name: 'Dai Stablecoin',\n            decimals: 18,\n            isBorrowable: true,\n            isCollateral: false\n        },\n        {\n            address: _addresses__WEBPACK_IMPORTED_MODULE_0__.USDCAddress,\n            symbol: 'USDC',\n            name: 'USD Coin',\n            decimals: 6,\n            isBorrowable: true,\n            isCollateral: false\n        },\n        {\n            address: _addresses__WEBPACK_IMPORTED_MODULE_0__.LINKAddress,\n            symbol: 'LINK',\n            name: 'Chainlink',\n            decimals: 18,\n            isBorrowable: true,\n            isCollateral: false\n        }\n    ]\n};\n// Network configuration\nconst NETWORK_CONFIG = {\n    chainId: CONFIG.CHAIN_ID,\n    chainName: 'Ganache Local',\n    nativeCurrency: {\n        name: 'Ethereum',\n        symbol: 'ETH',\n        decimals: 18\n    },\n    rpcUrls: [\n        CONFIG.RPC_URL\n    ],\n    blockExplorerUrls: null\n};\n// Helper functions\nfunction getTokenByAddress(address) {\n    return CONFIG.TOKENS.find((token)=>token.address.toLowerCase() === address.toLowerCase());\n}\nfunction getTokenBySymbol(symbol) {\n    return CONFIG.TOKENS.find((token)=>token.symbol.toLowerCase() === symbol.toLowerCase());\n}\nfunction isTokenBorrowable(address) {\n    const token = getTokenByAddress(address);\n    return (token === null || token === void 0 ? void 0 : token.isBorrowable) || false;\n}\nfunction isTokenCollateral(address) {\n    const token = getTokenByAddress(address);\n    return (token === null || token === void 0 ? void 0 : token.isCollateral) || false;\n}\n\n\n;\r\n    // Wrapped in an IIFE to avoid polluting the global scope\r\n    ;\r\n    (function () {\r\n        var _a, _b;\r\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\r\n        // to extract CSS. For backwards compatibility, we need to check we're in a\r\n        // browser context before continuing.\r\n        if (typeof self !== 'undefined' &&\r\n            // AMP / No-JS mode does not inject these helpers:\r\n            '$RefreshHelpers$' in self) {\r\n            // @ts-ignore __webpack_module__ is global\r\n            var currentExports = module.exports;\r\n            // @ts-ignore __webpack_module__ is global\r\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\r\n            // This cannot happen in MainTemplate because the exports mismatch between\r\n            // templating and execution.\r\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\r\n            // A module can be accepted automatically based on its exports, e.g. when\r\n            // it is a Refresh Boundary.\r\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\r\n                // Save the previous exports signature on update so we can compare the boundary\r\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\r\n                module.hot.dispose(function (data) {\r\n                    data.prevSignature =\r\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\r\n                });\r\n                // Unconditionally accept an update to this module, we'll check if it's\r\n                // still a Refresh Boundary later.\r\n                // @ts-ignore importMeta is replaced in the loader\r\n                module.hot.accept();\r\n                // This field is set when the previous version of this module was a\r\n                // Refresh Boundary, letting us know we need to check for invalidation or\r\n                // enqueue an update.\r\n                if (prevSignature !== null) {\r\n                    // A boundary can become ineligible if its exports are incompatible\r\n                    // with the previous exports.\r\n                    //\r\n                    // For example, if you add/remove/change exports, we'll want to\r\n                    // re-execute the importing modules, and force those components to\r\n                    // re-render. Similarly, if you convert a class component to a\r\n                    // function, we want to invalidate the boundary.\r\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\r\n                        module.hot.invalidate();\r\n                    }\r\n                    else {\r\n                        self.$RefreshHelpers$.scheduleUpdate();\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // Since we just executed the code for the module, it's possible that the\r\n                // new exports made it ineligible for being a boundary.\r\n                // We only care about the case when we were _previously_ a boundary,\r\n                // because we already accepted this update (accidental side effect).\r\n                var isNoLongerABoundary = prevSignature !== null;\r\n                if (isNoLongerABoundary) {\r\n                    module.hot.invalidate();\r\n                }\r\n            }\r\n        }\r\n    })();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL3NyYy9jb25maWcvY29udHJhY3RzLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBT3NCO0FBRXRCLG9EQUFvRDtBQUM3QyxNQUFNTSxTQUFTO0lBQ3BCQyxTQUFTQyx1QkFBK0IsSUFBSSxDQUF1QjtJQUNuRUcsVUFBVUMsU0FBU0osTUFBZ0MsSUFBSSxDQUFNLEVBQUU7SUFDL0RNLGNBQWNOLE9BQU9BLENBQUNDLEdBQUcsQ0FBQ00sd0JBQXdCLElBQUk7SUFFdEQsdURBQXVEO0lBQ3ZEQyxjQUFjaEIsMERBQWtCQTtJQUNoQ2lCLGNBQWNoQiwwREFBa0JBO0lBQ2hDaUIsTUFBTWhCLG1EQUFXQTtJQUVqQixzQkFBc0I7SUFDdEJpQixRQUFRO1FBQ047WUFDRUMsU0FBUztZQUNUQyxRQUFRO1lBQ1JDLE1BQU07WUFDTkMsVUFBVTtZQUNWQyxjQUFjO1lBQ2RDLGNBQWM7WUFDZEMsVUFBVTtRQUNaO1FBQ0E7WUFDRU4sU0FBU2xCLG1EQUFXQTtZQUNwQm1CLFFBQVE7WUFDUkMsTUFBTTtZQUNOQyxVQUFVO1lBQ1ZDLGNBQWM7WUFDZEMsY0FBYztRQUNoQjtRQUNBO1lBQ0VMLFNBQVNqQixrREFBVUE7WUFDbkJrQixRQUFRO1lBQ1JDLE1BQU07WUFDTkMsVUFBVTtZQUNWQyxjQUFjO1lBQ2RDLGNBQWM7UUFDaEI7UUFDQTtZQUNFTCxTQUFTaEIsbURBQVdBO1lBQ3BCaUIsUUFBUTtZQUNSQyxNQUFNO1lBQ05DLFVBQVU7WUFDVkMsY0FBYztZQUNkQyxjQUFjO1FBQ2hCO1FBQ0E7WUFDRUwsU0FBU2YsbURBQVdBO1lBQ3BCZ0IsUUFBUTtZQUNSQyxNQUFNO1lBQ05DLFVBQVU7WUFDVkMsY0FBYztZQUNkQyxjQUFjO1FBQ2hCO0tBQ0Q7QUFDSCxFQUFXO0FBRVgsd0JBQXdCO0FBQ2pCLE1BQU1FLGlCQUFpQjtJQUM1QkMsU0FBU3RCLE9BQU9LLFFBQVE7SUFDeEJrQixXQUFXO0lBQ1hDLGdCQUFnQjtRQUNkUixNQUFNO1FBQ05ELFFBQVE7UUFDUkUsVUFBVTtJQUNaO0lBQ0FRLFNBQVM7UUFBQ3pCLE9BQU9DLE9BQU87S0FBQztJQUN6QnlCLG1CQUFtQjtBQUNyQixFQUFFO0FBRUYsbUJBQW1CO0FBQ1osU0FBU0Msa0JBQWtCYixPQUFlO0lBQy9DLE9BQU9kLE9BQU9hLE1BQU0sQ0FBQ2UsSUFBSSxDQUFDQyxDQUFBQSxRQUN4QkEsTUFBTWYsT0FBTyxDQUFDZ0IsV0FBVyxPQUFPaEIsUUFBUWdCLFdBQVc7QUFFdkQ7QUFFTyxTQUFTQyxpQkFBaUJoQixNQUFjO0lBQzdDLE9BQU9mLE9BQU9hLE1BQU0sQ0FBQ2UsSUFBSSxDQUFDQyxDQUFBQSxRQUN4QkEsTUFBTWQsTUFBTSxDQUFDZSxXQUFXLE9BQU9mLE9BQU9lLFdBQVc7QUFFckQ7QUFFTyxTQUFTRSxrQkFBa0JsQixPQUFlO0lBQy9DLE1BQU1lLFFBQVFGLGtCQUFrQmI7SUFDaEMsT0FBT2UsQ0FBQUEsa0JBQUFBLDRCQUFBQSxNQUFPWCxZQUFZLEtBQUk7QUFDaEM7QUFFTyxTQUFTZSxrQkFBa0JuQixPQUFlO0lBQy9DLE1BQU1lLFFBQVFGLGtCQUFrQmI7SUFDaEMsT0FBT2UsQ0FBQUEsa0JBQUFBLDRCQUFBQSxNQUFPVixZQUFZLEtBQUk7QUFDaEMiLCJzb3VyY2VzIjpbIkQ6XFxEb19hbjJcXGxlbmRodWJfdjJcXGxlbmRodWItZnJvbnRlbmQtbmV4dGpzXFxzcmNcXGNvbmZpZ1xcY29udHJhY3RzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFxuICBMZW5kaW5nUG9vbEFkZHJlc3MsIFxuICBQcmljZU9yYWNsZUFkZHJlc3MsIFxuICBXRVRIQWRkcmVzcywgXG4gIERBSUFkZHJlc3MsIFxuICBVU0RDQWRkcmVzcywgXG4gIExJTktBZGRyZXNzIFxufSBmcm9tICcuLi9hZGRyZXNzZXMnO1xuXG4vLyBDb250cmFjdCBjb25maWd1cmF0aW9uIGZyb20gZW52aXJvbm1lbnQgdmFyaWFibGVzXG5leHBvcnQgY29uc3QgQ09ORklHID0ge1xuICBSUENfVVJMOiBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19SUENfVVJMIHx8ICdodHRwOi8vMTI3LjAuMC4xOjc1NDUnLFxuICBDSEFJTl9JRDogcGFyc2VJbnQocHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQ0hBSU5fSUQgfHwgJzEzMzcnLCAxMCksIC8vIDEzMzdcbiAgQ0hBSU5fSURfSEVYOiBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19DSEFJTl9JRF9IRVggfHwgJzB4NTM5JyxcbiAgXG4gIC8vIENvbnRyYWN0IGFkZHJlc3NlcyAoYXV0by1pbXBvcnRlZCBmcm9tIGFkZHJlc3Nlcy5qcylcbiAgTEVORElOR19QT09MOiBMZW5kaW5nUG9vbEFkZHJlc3MsXG4gIFBSSUNFX09SQUNMRTogUHJpY2VPcmFjbGVBZGRyZXNzLFxuICBXRVRIOiBXRVRIQWRkcmVzcyxcbiAgXG4gIC8vIFRva2VuIGNvbmZpZ3VyYXRpb25cbiAgVE9LRU5TOiBbXG4gICAge1xuICAgICAgYWRkcmVzczogJzB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsIC8vIEVUSCBuYXRpdmUgdG9rZW5cbiAgICAgIHN5bWJvbDogJ0VUSCcsXG4gICAgICBuYW1lOiAnRXRoZXJldW0nLFxuICAgICAgZGVjaW1hbHM6IDE4LFxuICAgICAgaXNCb3Jyb3dhYmxlOiBmYWxzZSxcbiAgICAgIGlzQ29sbGF0ZXJhbDogZmFsc2UsXG4gICAgICBpc05hdGl2ZTogdHJ1ZSxcbiAgICB9LFxuICAgIHtcbiAgICAgIGFkZHJlc3M6IFdFVEhBZGRyZXNzLCAvLyBBdXRvLWltcG9ydGVkIGZyb20gYWRkcmVzc2VzLmpzXG4gICAgICBzeW1ib2w6ICdXRVRIJyxcbiAgICAgIG5hbWU6ICdXcmFwcGVkIEV0aGVyZXVtJyxcbiAgICAgIGRlY2ltYWxzOiAxOCxcbiAgICAgIGlzQm9ycm93YWJsZTogZmFsc2UsXG4gICAgICBpc0NvbGxhdGVyYWw6IHRydWUsXG4gICAgfSxcbiAgICB7XG4gICAgICBhZGRyZXNzOiBEQUlBZGRyZXNzLCAvLyBBdXRvLWltcG9ydGVkIGZyb20gYWRkcmVzc2VzLmpzXG4gICAgICBzeW1ib2w6ICdEQUknLFxuICAgICAgbmFtZTogJ0RhaSBTdGFibGVjb2luJyxcbiAgICAgIGRlY2ltYWxzOiAxOCxcbiAgICAgIGlzQm9ycm93YWJsZTogdHJ1ZSxcbiAgICAgIGlzQ29sbGF0ZXJhbDogZmFsc2UsXG4gICAgfSxcbiAgICB7XG4gICAgICBhZGRyZXNzOiBVU0RDQWRkcmVzcywgLy8gQXV0by1pbXBvcnRlZCBmcm9tIGFkZHJlc3Nlcy5qc1xuICAgICAgc3ltYm9sOiAnVVNEQycsXG4gICAgICBuYW1lOiAnVVNEIENvaW4nLFxuICAgICAgZGVjaW1hbHM6IDYsXG4gICAgICBpc0JvcnJvd2FibGU6IHRydWUsXG4gICAgICBpc0NvbGxhdGVyYWw6IGZhbHNlLFxuICAgIH0sXG4gICAge1xuICAgICAgYWRkcmVzczogTElOS0FkZHJlc3MsIC8vIEF1dG8taW1wb3J0ZWQgZnJvbSBhZGRyZXNzZXMuanNcbiAgICAgIHN5bWJvbDogJ0xJTksnLFxuICAgICAgbmFtZTogJ0NoYWlubGluaycsXG4gICAgICBkZWNpbWFsczogMTgsXG4gICAgICBpc0JvcnJvd2FibGU6IHRydWUsXG4gICAgICBpc0NvbGxhdGVyYWw6IGZhbHNlLFxuICAgIH0sXG4gIF0sXG59IGFzIGNvbnN0O1xuXG4vLyBOZXR3b3JrIGNvbmZpZ3VyYXRpb25cbmV4cG9ydCBjb25zdCBORVRXT1JLX0NPTkZJRyA9IHtcbiAgY2hhaW5JZDogQ09ORklHLkNIQUlOX0lELFxuICBjaGFpbk5hbWU6ICdHYW5hY2hlIExvY2FsJyxcbiAgbmF0aXZlQ3VycmVuY3k6IHtcbiAgICBuYW1lOiAnRXRoZXJldW0nLFxuICAgIHN5bWJvbDogJ0VUSCcsXG4gICAgZGVjaW1hbHM6IDE4LFxuICB9LFxuICBycGNVcmxzOiBbQ09ORklHLlJQQ19VUkxdLFxuICBibG9ja0V4cGxvcmVyVXJsczogbnVsbCxcbn07XG5cbi8vIEhlbHBlciBmdW5jdGlvbnNcbmV4cG9ydCBmdW5jdGlvbiBnZXRUb2tlbkJ5QWRkcmVzcyhhZGRyZXNzOiBzdHJpbmcpIHtcbiAgcmV0dXJuIENPTkZJRy5UT0tFTlMuZmluZCh0b2tlbiA9PiBcbiAgICB0b2tlbi5hZGRyZXNzLnRvTG93ZXJDYXNlKCkgPT09IGFkZHJlc3MudG9Mb3dlckNhc2UoKVxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VG9rZW5CeVN5bWJvbChzeW1ib2w6IHN0cmluZykge1xuICByZXR1cm4gQ09ORklHLlRPS0VOUy5maW5kKHRva2VuID0+IFxuICAgIHRva2VuLnN5bWJvbC50b0xvd2VyQ2FzZSgpID09PSBzeW1ib2wudG9Mb3dlckNhc2UoKVxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNUb2tlbkJvcnJvd2FibGUoYWRkcmVzczogc3RyaW5nKTogYm9vbGVhbiB7XG4gIGNvbnN0IHRva2VuID0gZ2V0VG9rZW5CeUFkZHJlc3MoYWRkcmVzcyk7XG4gIHJldHVybiB0b2tlbj8uaXNCb3Jyb3dhYmxlIHx8IGZhbHNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNUb2tlbkNvbGxhdGVyYWwoYWRkcmVzczogc3RyaW5nKTogYm9vbGVhbiB7XG4gIGNvbnN0IHRva2VuID0gZ2V0VG9rZW5CeUFkZHJlc3MoYWRkcmVzcyk7XG4gIHJldHVybiB0b2tlbj8uaXNDb2xsYXRlcmFsIHx8IGZhbHNlO1xufVxuIl0sIm5hbWVzIjpbIkxlbmRpbmdQb29sQWRkcmVzcyIsIlByaWNlT3JhY2xlQWRkcmVzcyIsIldFVEhBZGRyZXNzIiwiREFJQWRkcmVzcyIsIlVTRENBZGRyZXNzIiwiTElOS0FkZHJlc3MiLCJDT05GSUciLCJSUENfVVJMIiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX1JQQ19VUkwiLCJDSEFJTl9JRCIsInBhcnNlSW50IiwiTkVYVF9QVUJMSUNfQ0hBSU5fSUQiLCJDSEFJTl9JRF9IRVgiLCJORVhUX1BVQkxJQ19DSEFJTl9JRF9IRVgiLCJMRU5ESU5HX1BPT0wiLCJQUklDRV9PUkFDTEUiLCJXRVRIIiwiVE9LRU5TIiwiYWRkcmVzcyIsInN5bWJvbCIsIm5hbWUiLCJkZWNpbWFscyIsImlzQm9ycm93YWJsZSIsImlzQ29sbGF0ZXJhbCIsImlzTmF0aXZlIiwiTkVUV09SS19DT05GSUciLCJjaGFpbklkIiwiY2hhaW5OYW1lIiwibmF0aXZlQ3VycmVuY3kiLCJycGNVcmxzIiwiYmxvY2tFeHBsb3JlclVybHMiLCJnZXRUb2tlbkJ5QWRkcmVzcyIsImZpbmQiLCJ0b2tlbiIsInRvTG93ZXJDYXNlIiwiZ2V0VG9rZW5CeVN5bWJvbCIsImlzVG9rZW5Cb3Jyb3dhYmxlIiwiaXNUb2tlbkNvbGxhdGVyYWwiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./src/config/contracts.ts\n"));

/***/ }),

/***/ "(pages-dir-browser)/./src/context/LendState.js":
/*!**********************************!*\
  !*** ./src/context/LendState.js ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(pages-dir-browser)/./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(pages-dir-browser)/./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lendContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lendContext */ \"(pages-dir-browser)/./src/context/lendContext.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ethers */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/index.js\");\n/* harmony import */ var _config_contracts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../config/contracts */ \"(pages-dir-browser)/./src/config/contracts.ts\");\n/* harmony import */ var _lib_tx__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../lib/tx */ \"(pages-dir-browser)/./src/lib/tx.ts\");\n/* harmony import */ var _addresses__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../addresses */ \"(pages-dir-browser)/./src/addresses.js\");\n/* harmony import */ var _abis__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../abis */ \"(pages-dir-browser)/./src/abis/index.js\");\n/* harmony import */ var _abis__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_abis__WEBPACK_IMPORTED_MODULE_6__);\n\nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n// Utility functions\nconst numberToEthers = (number)=>{\n    return ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.parseEther(number.toString());\n};\nconst reportError = (error)=>{\n    console.error(\"LendState Error:\", JSON.stringify(error));\n    console.error(\"Error details:\", error);\n};\nconst LendState = (props)=>{\n    _s();\n    //* Declaring all the states\n    // Set metamask details\n    const [metamaskDetails, setMetamaskDetails] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        provider: null,\n        networkName: null,\n        signer: null,\n        currentAccount: null,\n        chainId: null\n    });\n    // User assets and balances\n    const [userAssets, setUserAssets] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [supplyAssets, setSupplyAssets] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [assetsToBorrow, setAssetsToBorrow] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [yourBorrows, setYourBorrows] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    // Contract details\n    const [contract, setContract] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        lendingPoolContract: null,\n        oracleContract: null\n    });\n    // Summary data\n    const [supplySummary, setSupplySummary] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        totalUSDBalance: 0,\n        weightedAvgAPY: 0,\n        totalUSDCollateral: 0\n    });\n    const [borrowSummary, setBorrowSummary] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        totalUSDBalance: 0,\n        weightedAvgAPY: 0,\n        totalBorrowPowerUsed: 0\n    });\n    // Account data\n    const [accountData, setAccountData] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        collateralUSD: \"0\",\n        debtUSD: \"0\",\n        healthFactor: \"0\"\n    });\n    // Connect wallet\n    // const connectWallet = useCallback(async () => {\n    //   console.log(\"1. Connecting to wallet...\");\n    //   const { ethereum } = window;\n    //   const failMessage = \"Please install Metamask & connect your Metamask\";\n    //   try {\n    //     if (!ethereum) {\n    //       alert(failMessage);\n    //       return;\n    //     }\n    //     const accounts = await ethereum.request({\n    //       method: \"eth_requestAccounts\",\n    //     });\n    //     // Listen for account and chain changes\n    //     ethereum.on(\"chainChanged\", () => {\n    //       window.location.reload();\n    //     });\n    //     ethereum.on(\"accountsChanged\", () => {\n    //       window.location.reload();\n    //     });\n    //     const provider = new ethers.BrowserProvider(ethereum);\n    //     const network = await provider.getNetwork();\n    //     const networkName = network.name;\n    //     const signer = await provider.getSigner();\n    //     if (accounts.length) {\n    //       let currentAddress = accounts[0];\n    //       setMetamaskDetails({\n    //         provider: provider,\n    //         networkName: networkName,\n    //         signer: signer,\n    //         currentAccount: currentAddress,\n    //         chainId: Number(network.chainId),\n    //       });\n    //       console.log(\"Connected to wallet:\", currentAddress);\n    //     } else {\n    //       alert(failMessage);\n    //       return;\n    //     }\n    //   } catch (error) {\n    //     reportError(error);\n    //   }\n    // }, []);\n    const connectWallet = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[connectWallet]\": async ()=>{\n            console.log(\"1. Connecting to wallet...\");\n            const { ethereum } = window;\n            const failMessage = \"Please install Metamask & connect your Metamask\";\n            try {\n                if (!ethereum) {\n                    alert(failMessage);\n                    return;\n                }\n                const accounts = await ethereum.request({\n                    method: \"eth_requestAccounts\"\n                });\n                // Listen for account and chain changes\n                ethereum.on(\"chainChanged\", {\n                    \"LendState.useCallback[connectWallet]\": ()=>{\n                        window.location.reload();\n                    }\n                }[\"LendState.useCallback[connectWallet]\"]);\n                ethereum.on(\"accountsChanged\", {\n                    \"LendState.useCallback[connectWallet]\": ()=>{\n                        window.location.reload();\n                    }\n                }[\"LendState.useCallback[connectWallet]\"]);\n                const provider = new ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.BrowserProvider(ethereum);\n                const network = await provider.getNetwork();\n                const networkName = network.name;\n                const signer = await provider.getSigner();\n                if (accounts.length) {\n                    let currentAddress = accounts[0];\n                    setMetamaskDetails({\n                        provider: provider,\n                        networkName: networkName,\n                        signer: signer,\n                        currentAccount: currentAddress,\n                        chainId: Number(network.chainId)\n                    });\n                    console.log(\"Connected to wallet++++++++++++++++++++++++++++++++++:\", currentAddress);\n                } else {\n                    alert(failMessage);\n                    return;\n                }\n            } catch (error) {\n                reportError(error);\n            }\n        }\n    }[\"LendState.useCallback[connectWallet]\"], []);\n    // Get contract instance\n    const getContract = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[getContract]\": async (address, abi)=>{\n            if (!metamaskDetails.provider) return null;\n            const contract = new ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.Contract(address, abi, metamaskDetails.provider);\n            return contract;\n        }\n    }[\"LendState.useCallback[getContract]\"], [\n        metamaskDetails.provider\n    ]);\n    // Get user assets (balances)\n    const getUserAssets = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[getUserAssets]\": async ()=>{\n            console.log(\"2. Getting user assets...\");\n            try {\n                if (!metamaskDetails.provider || !metamaskDetails.currentAccount) return [];\n                const assets = await Promise.all(_config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.TOKENS.map({\n                    \"LendState.useCallback[getUserAssets]\": async (token)=>{\n                        let balance = \"0\";\n                        let balanceUSD = 0;\n                        try {\n                            if (token.isNative) {\n                                // ETH native balance\n                                const bal = await metamaskDetails.provider.getBalance(metamaskDetails.currentAccount);\n                                balance = ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.formatEther(bal);\n                            } else {\n                                // ERC20 token balance\n                                balance = await (0,_lib_tx__WEBPACK_IMPORTED_MODULE_4__.getTokenBalance)(metamaskDetails.provider, token.address, metamaskDetails.currentAccount, token.decimals);\n                            }\n                            // Get USD value\n                            const price = await getPriceUSD(token.address);\n                            balanceUSD = parseFloat(balance) * parseFloat(price);\n                            return {\n                                address: token.address,\n                                symbol: token.symbol,\n                                name: token.name,\n                                decimals: token.decimals,\n                                isNative: token.isNative,\n                                balance: balance,\n                                balanceUSD: balanceUSD,\n                                priceUSD: price\n                            };\n                        } catch (error) {\n                            console.warn(\"Error getting balance for \".concat(token.symbol, \":\"), error);\n                            return {\n                                address: token.address,\n                                symbol: token.symbol,\n                                name: token.name,\n                                decimals: token.decimals,\n                                isNative: token.isNative,\n                                balance: \"0\",\n                                balanceUSD: 0,\n                                priceUSD: \"0\"\n                            };\n                        }\n                    }\n                }[\"LendState.useCallback[getUserAssets]\"]));\n                setUserAssets(assets);\n                console.log(\"Got user assets:\", assets);\n                return assets;\n            } catch (error) {\n                reportError(error);\n                return [];\n            }\n        }\n    }[\"LendState.useCallback[getUserAssets]\"], [\n        metamaskDetails.provider,\n        metamaskDetails.currentAccount\n    ]);\n    // Get price in USD\n    const getPriceUSD = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[getPriceUSD]\": async (asset)=>{\n            if (!metamaskDetails.provider) return \"0\";\n            try {\n                const abi = [\n                    'function getAssetPrice1e18(address asset) view returns (uint256)'\n                ];\n                const oracle = new ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.Contract(_config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.PRICE_ORACLE, abi, metamaskDetails.provider);\n                const price = await oracle.getAssetPrice1e18(asset);\n                return ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.formatUnits(price, 18);\n            } catch (error) {\n                console.warn(\"Error getting price for \".concat(asset, \":\"), error);\n                return \"0\";\n            }\n        }\n    }[\"LendState.useCallback[getPriceUSD]\"], [\n        metamaskDetails.provider\n    ]);\n    // Get amount in USD\n    const getAmountInUSD = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[getAmountInUSD]\": async (address, amount)=>{\n            try {\n                const price = await getPriceUSD(address);\n                const amountInUSD = parseFloat(amount) * parseFloat(price);\n                return amountInUSD;\n            } catch (error) {\n                reportError(error);\n                return 0;\n            }\n        }\n    }[\"LendState.useCallback[getAmountInUSD]\"], [\n        getPriceUSD\n    ]);\n    // Approve tokens\n    const ApproveToContinue = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[ApproveToContinue]\": async (tokenAddress, approveAmount)=>{\n            if (!metamaskDetails.signer) {\n                throw new Error(\"No signer available\");\n            }\n            try {\n                const token = _config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.TOKENS.find({\n                    \"LendState.useCallback[ApproveToContinue].token\": (t)=>t.address.toLowerCase() === tokenAddress.toLowerCase()\n                }[\"LendState.useCallback[ApproveToContinue].token\"]);\n                if (!token) throw new Error(\"Token not found\");\n                await (0,_lib_tx__WEBPACK_IMPORTED_MODULE_4__.approveIfNeeded)(metamaskDetails.signer, tokenAddress, _config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.LENDING_POOL, approveAmount, token.decimals);\n                console.log(\"Token approved:\", tokenAddress);\n                return {\n                    status: 200,\n                    message: \"Transaction Successful...\"\n                };\n            } catch (error) {\n                reportError(error);\n                return {\n                    status: 500,\n                    message: error.message || error.reason\n                };\n            }\n        }\n    }[\"LendState.useCallback[ApproveToContinue]\"], [\n        metamaskDetails.signer\n    ]);\n    // Lend asset\n    const LendAsset = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[LendAsset]\": async (token, supplyAmount)=>{\n            if (!metamaskDetails.signer) {\n                throw new Error(\"No signer available\");\n            }\n            try {\n                const tokenInfo = _config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.TOKENS.find({\n                    \"LendState.useCallback[LendAsset].tokenInfo\": (t)=>t.address.toLowerCase() === token.toLowerCase()\n                }[\"LendState.useCallback[LendAsset].tokenInfo\"]);\n                if (!tokenInfo) throw new Error(\"Token not found\");\n                const amount = ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.parseUnits(supplyAmount, tokenInfo.decimals);\n                const tx = await (0,_lib_tx__WEBPACK_IMPORTED_MODULE_4__.lend)(metamaskDetails.signer, token, amount);\n                if (tx) {\n                    console.log(\"Asset lent successfully:\", token, supplyAmount);\n                    return {\n                        status: 200,\n                        message: \"Transaction Successful...\",\n                        hash: tx.hash\n                    };\n                }\n                throw new Error(\"Transaction failed\");\n            } catch (error) {\n                reportError(error);\n                return {\n                    status: 500,\n                    message: error.message || error.reason\n                };\n            }\n        }\n    }[\"LendState.useCallback[LendAsset]\"], [\n        metamaskDetails.signer\n    ]);\n    // Withdraw asset\n    const WithdrawAsset = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[WithdrawAsset]\": async (tokenAddress, withdrawAmount)=>{\n            if (!metamaskDetails.signer) {\n                throw new Error(\"No signer available\");\n            }\n            try {\n                const tokenInfo = _config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.TOKENS.find({\n                    \"LendState.useCallback[WithdrawAsset].tokenInfo\": (t)=>t.address.toLowerCase() === tokenAddress.toLowerCase()\n                }[\"LendState.useCallback[WithdrawAsset].tokenInfo\"]);\n                if (!tokenInfo) throw new Error(\"Token not found\");\n                const amount = ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.parseUnits(withdrawAmount, tokenInfo.decimals);\n                const tx = await (0,_lib_tx__WEBPACK_IMPORTED_MODULE_4__.withdraw)(metamaskDetails.signer, tokenAddress, amount);\n                if (tx) {\n                    console.log(\"Asset withdrawn successfully:\", tokenAddress, withdrawAmount);\n                    return {\n                        status: 200,\n                        message: \"Transaction Successful...\",\n                        hash: tx.hash\n                    };\n                }\n                throw new Error(\"Transaction failed\");\n            } catch (error) {\n                reportError(error);\n                return {\n                    status: 500,\n                    message: error.message || error.reason\n                };\n            }\n        }\n    }[\"LendState.useCallback[WithdrawAsset]\"], [\n        metamaskDetails.signer\n    ]);\n    // Borrow asset\n    const borrowAsset = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[borrowAsset]\": async (token, borrowAmount)=>{\n            if (!metamaskDetails.signer) {\n                throw new Error(\"No signer available\");\n            }\n            try {\n                const tokenInfo = _config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.TOKENS.find({\n                    \"LendState.useCallback[borrowAsset].tokenInfo\": (t)=>t.address.toLowerCase() === token.toLowerCase()\n                }[\"LendState.useCallback[borrowAsset].tokenInfo\"]);\n                if (!tokenInfo) throw new Error(\"Token not found\");\n                const amount = ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.parseUnits(borrowAmount, tokenInfo.decimals);\n                const tx = await (0,_lib_tx__WEBPACK_IMPORTED_MODULE_4__.borrow)(metamaskDetails.signer, token, amount);\n                if (tx) {\n                    console.log(\"Asset borrowed successfully:\", token, borrowAmount);\n                    return {\n                        status: 200,\n                        message: \"Transaction Successful...\",\n                        hash: tx.hash\n                    };\n                }\n                throw new Error(\"Transaction failed\");\n            } catch (error) {\n                reportError(error);\n                return {\n                    status: 500,\n                    message: error.message || error.reason\n                };\n            }\n        }\n    }[\"LendState.useCallback[borrowAsset]\"], [\n        metamaskDetails.signer\n    ]);\n    // Repay asset\n    const repayAsset = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[repayAsset]\": async (tokenAddress, repayAmount)=>{\n            if (!metamaskDetails.signer) {\n                throw new Error(\"No signer available\");\n            }\n            try {\n                const tokenInfo = _config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.TOKENS.find({\n                    \"LendState.useCallback[repayAsset].tokenInfo\": (t)=>t.address.toLowerCase() === tokenAddress.toLowerCase()\n                }[\"LendState.useCallback[repayAsset].tokenInfo\"]);\n                if (!tokenInfo) throw new Error(\"Token not found\");\n                const amount = ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.parseUnits(repayAmount, tokenInfo.decimals);\n                const tx = await (0,_lib_tx__WEBPACK_IMPORTED_MODULE_4__.repay)(metamaskDetails.signer, tokenAddress, amount);\n                if (tx) {\n                    console.log(\"Asset repaid successfully:\", tokenAddress, repayAmount);\n                    return {\n                        status: 200,\n                        message: \"Transaction Successful...\",\n                        hash: tx.hash\n                    };\n                }\n                throw new Error(\"Transaction failed\");\n            } catch (error) {\n                reportError(error);\n                return {\n                    status: 500,\n                    message: error.message || error.reason\n                };\n            }\n        }\n    }[\"LendState.useCallback[repayAsset]\"], [\n        metamaskDetails.signer\n    ]);\n    // Get account data (collateral, debt, health factor)\n    const getAccountData = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[getAccountData]\": async (user)=>{\n            try {\n                if (!metamaskDetails.provider) return null;\n                const pool = new ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.Contract(_addresses__WEBPACK_IMPORTED_MODULE_5__.LendingPoolAddress, _abis__WEBPACK_IMPORTED_MODULE_6__.LendingPoolABI.abi, metamaskDetails.provider);\n                const wallet = user || metamaskDetails.currentAccount || ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.ZeroAddress;\n                // Add error handling for empty response\n                let col, debt, hf;\n                try {\n                    [col, debt, hf] = await pool.getAccountData(wallet);\n                } catch (contractError) {\n                    console.log('Contract getAccountData failed, using defaults:', contractError.message);\n                    // Return default values for new users\n                    col = ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.parseUnits(\"0\", 18);\n                    debt = ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.parseUnits(\"0\", 18);\n                    hf = ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.parseUnits(\"115792089237316195423570985008687907853269984665640564039457.584007913129639935\", 18); // Max uint256\n                }\n                const accountData = {\n                    collateralUSD: ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.formatUnits(col, 18),\n                    debtUSD: ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.formatUnits(debt, 18),\n                    healthFactor: ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.formatUnits(hf, 18)\n                };\n                setAccountData(accountData);\n                return accountData;\n            } catch (error) {\n                console.log('getAccountData error, using defaults:', error.message);\n                // Return default values on any error\n                const accountData = {\n                    collateralUSD: \"0\",\n                    debtUSD: \"0\",\n                    healthFactor: \"115792089237316195423570985008687907853269984665640564039457.584007913129639935\"\n                };\n                setAccountData(accountData);\n                return accountData;\n            }\n        }\n    }[\"LendState.useCallback[getAccountData]\"], [\n        metamaskDetails.provider,\n        metamaskDetails.currentAccount\n    ]);\n    // Get your supplies\n    const getYourSupplies = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[getYourSupplies]\": async ()=>{\n            console.log(\"3. Getting your supplies...\");\n            try {\n                if (!metamaskDetails.provider || !metamaskDetails.currentAccount) return [];\n                const abi = [\n                    'function getUserReserve(address user, address asset) view returns (tuple(uint128 principal,uint128 index) supply, tuple(uint128 principal,uint128 index) borrow)'\n                ];\n                const pool = new ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.Contract(_config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.LENDING_POOL, abi, metamaskDetails.provider);\n                const supplies = await Promise.all(_config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.TOKENS.filter({\n                    \"LendState.useCallback[getYourSupplies]\": (t)=>!t.isNative\n                }[\"LendState.useCallback[getYourSupplies]\"]).map({\n                    \"LendState.useCallback[getYourSupplies]\": async (token)=>{\n                        try {\n                            const userReserve = await pool.getUserReserve(metamaskDetails.currentAccount, token.address);\n                            const supplyPrincipal = ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.formatUnits(userReserve.supply.principal, 18);\n                            const supplyIndex = userReserve.supply.index.toString();\n                            if (parseFloat(supplyPrincipal) > 0) {\n                                const price = await getPriceUSD(token.address);\n                                const balanceUSD = parseFloat(supplyPrincipal) * parseFloat(price);\n                                return {\n                                    address: token.address,\n                                    symbol: token.symbol,\n                                    name: token.name,\n                                    decimals: token.decimals,\n                                    supplyPrincipal: supplyPrincipal,\n                                    supplyIndex: supplyIndex,\n                                    balanceUSD: balanceUSD,\n                                    priceUSD: price\n                                };\n                            }\n                            return null;\n                        } catch (error) {\n                            console.warn(\"Error getting supply for \".concat(token.symbol, \":\"), error);\n                            return null;\n                        }\n                    }\n                }[\"LendState.useCallback[getYourSupplies]\"]));\n                const validSupplies = supplies.filter({\n                    \"LendState.useCallback[getYourSupplies].validSupplies\": (s)=>s !== null\n                }[\"LendState.useCallback[getYourSupplies].validSupplies\"]);\n                setSupplyAssets(validSupplies);\n                // Calculate summary\n                const totalUSDBalance = validSupplies.reduce({\n                    \"LendState.useCallback[getYourSupplies].totalUSDBalance\": (sum, asset)=>sum + asset.balanceUSD\n                }[\"LendState.useCallback[getYourSupplies].totalUSDBalance\"], 0);\n                const weightedAvgAPY = validSupplies.length > 0 ? validSupplies.reduce({\n                    \"LendState.useCallback[getYourSupplies]\": (sum, asset)=>sum + (asset.apy || 0)\n                }[\"LendState.useCallback[getYourSupplies]\"], 0) / validSupplies.length : 0;\n                const totalUSDCollateral = validSupplies.reduce({\n                    \"LendState.useCallback[getYourSupplies].totalUSDCollateral\": (sum, asset)=>sum + asset.balanceUSD\n                }[\"LendState.useCallback[getYourSupplies].totalUSDCollateral\"], 0);\n                setSupplySummary({\n                    totalUSDBalance,\n                    weightedAvgAPY,\n                    totalUSDCollateral\n                });\n                console.log(\"Got your supplies:\", validSupplies);\n                return validSupplies;\n            } catch (error) {\n                reportError(error);\n                return [];\n            }\n        }\n    }[\"LendState.useCallback[getYourSupplies]\"], [\n        metamaskDetails.provider,\n        metamaskDetails.currentAccount,\n        getPriceUSD\n    ]);\n    // Get your borrows\n    const getYourBorrows = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[getYourBorrows]\": async ()=>{\n            console.log(\"4. Getting your borrows...\");\n            try {\n                if (!metamaskDetails.provider || !metamaskDetails.currentAccount) return [];\n                const abi = [\n                    'function getUserReserve(address user, address asset) view returns (tuple(uint128 principal,uint128 index) supply, tuple(uint128 principal,uint128 index) borrow)'\n                ];\n                const pool = new ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.Contract(_config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.LENDING_POOL, abi, metamaskDetails.provider);\n                const borrows = await Promise.all(_config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.TOKENS.filter({\n                    \"LendState.useCallback[getYourBorrows]\": (t)=>!t.isNative\n                }[\"LendState.useCallback[getYourBorrows]\"]).map({\n                    \"LendState.useCallback[getYourBorrows]\": async (token)=>{\n                        try {\n                            const userReserve = await pool.getUserReserve(metamaskDetails.currentAccount, token.address);\n                            const borrowPrincipal = ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.formatUnits(userReserve.borrow.principal, 18);\n                            const borrowIndex = userReserve.borrow.index.toString();\n                            if (parseFloat(borrowPrincipal) > 0) {\n                                const price = await getPriceUSD(token.address);\n                                const balanceUSD = parseFloat(borrowPrincipal) * parseFloat(price);\n                                return {\n                                    address: token.address,\n                                    symbol: token.symbol,\n                                    name: token.name,\n                                    decimals: token.decimals,\n                                    borrowPrincipal: borrowPrincipal,\n                                    borrowIndex: borrowIndex,\n                                    balanceUSD: balanceUSD,\n                                    priceUSD: price\n                                };\n                            }\n                            return null;\n                        } catch (error) {\n                            console.warn(\"Error getting borrow for \".concat(token.symbol, \":\"), error);\n                            return null;\n                        }\n                    }\n                }[\"LendState.useCallback[getYourBorrows]\"]));\n                const validBorrows = borrows.filter({\n                    \"LendState.useCallback[getYourBorrows].validBorrows\": (b)=>b !== null\n                }[\"LendState.useCallback[getYourBorrows].validBorrows\"]);\n                setYourBorrows(validBorrows);\n                // Calculate summary\n                const totalUSDBalance = validBorrows.reduce({\n                    \"LendState.useCallback[getYourBorrows].totalUSDBalance\": (sum, asset)=>sum + asset.balanceUSD\n                }[\"LendState.useCallback[getYourBorrows].totalUSDBalance\"], 0);\n                const weightedAvgAPY = validBorrows.length > 0 ? validBorrows.reduce({\n                    \"LendState.useCallback[getYourBorrows]\": (sum, asset)=>sum + (asset.apy || 0)\n                }[\"LendState.useCallback[getYourBorrows]\"], 0) / validBorrows.length : 0;\n                const totalBorrowPowerUsed = totalUSDBalance;\n                setBorrowSummary({\n                    totalUSDBalance,\n                    weightedAvgAPY,\n                    totalBorrowPowerUsed\n                });\n                console.log(\"Got your borrows:\", validBorrows);\n                return validBorrows;\n            } catch (error) {\n                reportError(error);\n                return [];\n            }\n        }\n    }[\"LendState.useCallback[getYourBorrows]\"], [\n        metamaskDetails.provider,\n        metamaskDetails.currentAccount,\n        getPriceUSD\n    ]);\n    // Get assets to borrow\n    const getAssetsToBorrow = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[getAssetsToBorrow]\": async ()=>{\n            console.log(\"5. Getting assets to borrow...\");\n            try {\n                if (!metamaskDetails.provider) return [];\n                const abi = [\n                    'function reserves(address) view returns (uint128 reserveCash, uint128 totalDebtPrincipal, uint128 liquidityIndex, uint128 variableBorrowIndex, uint64 liquidityRateRayPerSec, uint64 variableBorrowRateRayPerSec, uint16 reserveFactorBps, uint16 ltvBps, uint16 liqThresholdBps, uint16 liqBonusBps, uint16 closeFactorBps, uint8 decimals, bool isBorrowable, uint16 optimalUBps, uint64 baseRateRayPerSec, uint64 slope1RayPerSec, uint64 slope2RayPerSec, uint40 lastUpdate)'\n                ];\n                const pool = new ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.Contract(_config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.LENDING_POOL, abi, metamaskDetails.provider);\n                const assets = await Promise.all(_config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.TOKENS.filter({\n                    \"LendState.useCallback[getAssetsToBorrow]\": (t)=>!t.isNative\n                }[\"LendState.useCallback[getAssetsToBorrow]\"]).map({\n                    \"LendState.useCallback[getAssetsToBorrow]\": async (token)=>{\n                        try {\n                            const reserve = await pool.reserves(token.address);\n                            const isBorrowable = Boolean(reserve.isBorrowable);\n                            const reserveCash = ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.formatUnits(reserve.reserveCash, 18);\n                            const price = await getPriceUSD(token.address);\n                            if (isBorrowable && parseFloat(reserveCash) > 0) {\n                                return {\n                                    address: token.address,\n                                    symbol: token.symbol,\n                                    name: token.name,\n                                    decimals: token.decimals,\n                                    reserveCash: reserveCash,\n                                    isBorrowable: isBorrowable,\n                                    priceUSD: price,\n                                    ltvBps: Number(reserve.ltvBps),\n                                    liqThresholdBps: Number(reserve.liqThresholdBps)\n                                };\n                            }\n                            return null;\n                        } catch (error) {\n                            console.warn(\"Error getting borrow asset \".concat(token.symbol, \":\"), error);\n                            return null;\n                        }\n                    }\n                }[\"LendState.useCallback[getAssetsToBorrow]\"]));\n                const validAssets = assets.filter({\n                    \"LendState.useCallback[getAssetsToBorrow].validAssets\": (a)=>a !== null\n                }[\"LendState.useCallback[getAssetsToBorrow].validAssets\"]);\n                setAssetsToBorrow(validAssets);\n                console.log(\"Got assets to borrow:\", validAssets);\n                return validAssets;\n            } catch (error) {\n                reportError(error);\n                return [];\n            }\n        }\n    }[\"LendState.useCallback[getAssetsToBorrow]\"], [\n        metamaskDetails.provider,\n        getPriceUSD\n    ]);\n    // Wrap ETH to WETH\n    const wrapEth = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[wrapEth]\": async (amountEth)=>{\n            if (!metamaskDetails.signer) {\n                throw new Error(\"No signer available\");\n            }\n            try {\n                const data = '0xd0e30db0'; // deposit()\n                console.log('wrapEth → using WETH address:', _addresses__WEBPACK_IMPORTED_MODULE_5__.WETHAddress);\n                const tx = await metamaskDetails.signer.sendTransaction({\n                    to: _addresses__WEBPACK_IMPORTED_MODULE_5__.WETHAddress,\n                    value: ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.parseEther(amountEth),\n                    data\n                });\n                await tx.wait();\n                console.log(\"ETH wrapped to WETH:\", amountEth);\n                return {\n                    status: 200,\n                    message: \"Transaction Successful...\",\n                    hash: tx.hash\n                };\n            } catch (error) {\n                reportError(error);\n                return {\n                    status: 500,\n                    message: error.message || error.reason\n                };\n            }\n        }\n    }[\"LendState.useCallback[wrapEth]\"], [\n        metamaskDetails.signer\n    ]);\n    // Unwrap WETH to ETH\n    const unwrapWeth = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[unwrapWeth]\": async (amountEth)=>{\n            if (!metamaskDetails.signer) {\n                throw new Error(\"No signer available\");\n            }\n            try {\n                const abi = [\n                    'function withdraw(uint256 wad)'\n                ];\n                console.log('unwrapWeth → using WETH address:', _addresses__WEBPACK_IMPORTED_MODULE_5__.WETHAddress);\n                const weth = new ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.Contract(_addresses__WEBPACK_IMPORTED_MODULE_5__.WETHAddress, abi, metamaskDetails.signer);\n                const tx = await weth.withdraw(ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.parseEther(amountEth));\n                await tx.wait();\n                console.log(\"WETH unwrapped to ETH:\", amountEth);\n                return {\n                    status: 200,\n                    message: \"Transaction Successful...\",\n                    hash: tx.hash\n                };\n            } catch (error) {\n                reportError(error);\n                return {\n                    status: 500,\n                    message: error.message || error.reason\n                };\n            }\n        }\n    }[\"LendState.useCallback[unwrapWeth]\"], [\n        metamaskDetails.signer\n    ]);\n    // Withdraw token to ETH (for all tokens with withdraw function)\n    const withdrawToken = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[withdrawToken]\": async (tokenAddress, amount)=>{\n            if (!metamaskDetails.signer) {\n                throw new Error(\"No signer available\");\n            }\n            try {\n                const abi = [\n                    'function withdraw(uint256 amount)'\n                ];\n                console.log('withdrawToken → using address:', tokenAddress);\n                const token = new ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.Contract(tokenAddress, abi, metamaskDetails.signer);\n                const tx = await token.withdraw(ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.parseEther(amount));\n                await tx.wait();\n                console.log(\"Token withdrawn to ETH:\", amount);\n                return {\n                    status: 200,\n                    message: \"Withdraw Successful...\",\n                    hash: tx.hash\n                };\n            } catch (error) {\n                reportError(error);\n                return {\n                    status: 500,\n                    message: error.message || error.reason\n                };\n            }\n        }\n    }[\"LendState.useCallback[withdrawToken]\"], [\n        metamaskDetails.signer\n    ]);\n    // Deposit ETH to get token (for all tokens with deposit function)\n    const depositToToken = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[depositToToken]\": async (tokenAddress, amountEth)=>{\n            if (!metamaskDetails.signer) {\n                throw new Error(\"No signer available\");\n            }\n            try {\n                const abi = [\n                    'function deposit() payable'\n                ];\n                console.log('depositToToken → using address:', tokenAddress);\n                const token = new ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.Contract(tokenAddress, abi, metamaskDetails.signer);\n                const tx = await token.deposit({\n                    value: ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.parseEther(amountEth)\n                });\n                await tx.wait();\n                console.log(\"ETH deposited to token:\", amountEth);\n                return {\n                    status: 200,\n                    message: \"Deposit Successful...\",\n                    hash: tx.hash\n                };\n            } catch (error) {\n                reportError(error);\n                return {\n                    status: 500,\n                    message: error.message || error.reason\n                };\n            }\n        }\n    }[\"LendState.useCallback[depositToToken]\"], [\n        metamaskDetails.signer\n    ]);\n    // Refresh all data\n    const refresh = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[refresh]\": async ()=>{\n            try {\n                await Promise.all([\n                    getUserAssets(),\n                    getYourSupplies(),\n                    getYourBorrows(),\n                    getAssetsToBorrow(),\n                    getAccountData()\n                ]);\n                console.log(\"All data refreshed\");\n            } catch (error) {\n                reportError(error);\n            }\n        }\n    }[\"LendState.useCallback[refresh]\"], [\n        getUserAssets,\n        getYourSupplies,\n        getYourBorrows,\n        getAssetsToBorrow,\n        getAccountData\n    ]);\n    // Update interests (accrue)\n    const updateInterests = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[updateInterests]\": async (asset)=>{\n            if (!metamaskDetails.signer) {\n                throw new Error(\"No signer available\");\n            }\n            try {\n                const abi = [\n                    'function accruePublic(address asset)'\n                ];\n                const pool = new ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.Contract(_config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.LENDING_POOL, abi, metamaskDetails.signer);\n                const tx = await pool.accruePublic(asset);\n                await tx.wait();\n                console.log(\"Interests updated for asset:\", asset);\n                return {\n                    status: 200,\n                    message: \"Transaction Successful...\"\n                };\n            } catch (error) {\n                reportError(error);\n                return {\n                    status: 500,\n                    message: error.message || error.reason\n                };\n            }\n        }\n    }[\"LendState.useCallback[updateInterests]\"], [\n        metamaskDetails.signer\n    ]);\n    // Get user total available balance\n    const getUserTotalAvailableBalance = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[getUserTotalAvailableBalance]\": async ()=>{\n            try {\n                if (!metamaskDetails.provider || !metamaskDetails.currentAccount) return 0;\n                const abi = [\n                    'function getUserTotalAvailableBalanceInUSD(address user, uint256 assetType) view returns (uint256)'\n                ];\n                const pool = new ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.Contract(_config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.LENDING_POOL, abi, metamaskDetails.provider);\n                const maxAmount = await pool.getUserTotalAvailableBalanceInUSD(metamaskDetails.currentAccount, 1);\n                return Number(ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.formatUnits(maxAmount, 18));\n            } catch (error) {\n                reportError(error);\n                return 0;\n            }\n        }\n    }[\"LendState.useCallback[getUserTotalAvailableBalance]\"], [\n        metamaskDetails.provider,\n        metamaskDetails.currentAccount\n    ]);\n    // Get tokens per USD amount\n    const getTokensPerUSDAmount = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[getTokensPerUSDAmount]\": async (token, amount)=>{\n            try {\n                if (!metamaskDetails.provider) return 0;\n                const abi = [\n                    'function getTokensPerUSDAmount(address token, uint256 amount) view returns (uint256)'\n                ];\n                const helper = new ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.Contract(_config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.PRICE_ORACLE, abi, metamaskDetails.provider);\n                const maxQty = await helper.getTokensPerUSDAmount(token, ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.parseUnits(amount.toString(), 18));\n                return Number(ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.formatUnits(maxQty, 18));\n            } catch (error) {\n                reportError(error);\n                return 0;\n            }\n        }\n    }[\"LendState.useCallback[getTokensPerUSDAmount]\"], [\n        metamaskDetails.provider\n    ]);\n    // Objectify supplied assets (format data)\n    const objectifySuppliedAssets = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[objectifySuppliedAssets]\": async (assets)=>{\n            const assetsList = [];\n            for(let i = 0; i < assets.length; i++){\n                const token = assets[i].token;\n                let lendQty = assets[i].lentQty;\n                const amountInUSD = await getAmountInUSD(token, lendQty);\n                lendQty = Number(assets[i].lentQty) / 1e18;\n                const maxSupplyAmount = await getUserTotalAvailableBalance();\n                const maxQty = await getTokensPerUSDAmount(token, maxSupplyAmount);\n                const qty = lendQty <= maxQty ? lendQty : maxQty;\n                assetsList.push({\n                    token: assets[i].token,\n                    balance: lendQty,\n                    apy: Number(assets[i].lentApy),\n                    balanceInUSD: amountInUSD,\n                    maxSupply: qty\n                });\n            }\n            return assetsList;\n        }\n    }[\"LendState.useCallback[objectifySuppliedAssets]\"], [\n        getAmountInUSD,\n        getUserTotalAvailableBalance,\n        getTokensPerUSDAmount\n    ]);\n    // Objectify borrowed assets (format data)\n    const objectifyBorrowedAssets = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[objectifyBorrowedAssets]\": async (assets)=>{\n            const borrowsList = [];\n            for(let i = 0; i < assets.length; i++){\n                const token = assets[i].token;\n                const borrowQty = assets[i].borrowQty;\n                const borrowApy = assets[i].borrowApy;\n                const amountInUSD = await getAmountInUSD(token, borrowQty);\n                borrowsList.push({\n                    token: token,\n                    borrowQty: Number(borrowQty),\n                    borrowApy: Number(borrowApy),\n                    borrowedBalInUSD: amountInUSD\n                });\n            }\n            return borrowsList;\n        }\n    }[\"LendState.useCallback[objectifyBorrowedAssets]\"], [\n        getAmountInUSD\n    ]);\n    // Merge objectified assets with token info\n    const mergeObjectifiedAssets = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[mergeObjectifiedAssets]\": (assets)=>{\n            const result = _config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.TOKENS.filter({\n                \"LendState.useCallback[mergeObjectifiedAssets].result\": (tokenList)=>{\n                    return assets.some({\n                        \"LendState.useCallback[mergeObjectifiedAssets].result\": (assetList)=>{\n                            return tokenList.address.toLowerCase() === assetList.token.toLowerCase();\n                        }\n                    }[\"LendState.useCallback[mergeObjectifiedAssets].result\"]);\n                }\n            }[\"LendState.useCallback[mergeObjectifiedAssets].result\"]).map({\n                \"LendState.useCallback[mergeObjectifiedAssets].result\": (assetObj)=>({\n                        ...assets.find({\n                            \"LendState.useCallback[mergeObjectifiedAssets].result\": (item)=>item.token.toLowerCase() === assetObj.address.toLowerCase()\n                        }[\"LendState.useCallback[mergeObjectifiedAssets].result\"]),\n                        ...assetObj\n                    })\n            }[\"LendState.useCallback[mergeObjectifiedAssets].result\"]);\n            return result;\n        }\n    }[\"LendState.useCallback[mergeObjectifiedAssets]\"], []);\n    // Context value\n    const contextValue = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)({\n        \"LendState.useMemo[contextValue]\": ()=>({\n                // State\n                metamaskDetails,\n                userAssets,\n                supplyAssets,\n                assetsToBorrow,\n                yourBorrows,\n                supplySummary,\n                borrowSummary,\n                accountData,\n                contract,\n                // Wallet functions\n                connectWallet,\n                refresh,\n                // Asset functions\n                getUserAssets,\n                getYourSupplies,\n                getYourBorrows,\n                getAssetsToBorrow,\n                // Transaction functions\n                ApproveToContinue,\n                LendAsset,\n                WithdrawAsset,\n                borrowAsset,\n                repayAsset,\n                // Utility functions\n                getContract,\n                getPriceUSD,\n                getAmountInUSD,\n                numberToEthers,\n                reportError,\n                // ETH/WETH functions\n                wrapEth,\n                unwrapWeth,\n                // Account functions\n                getAccountData,\n                getUserTotalAvailableBalance,\n                getTokensPerUSDAmount,\n                // Data processing functions\n                objectifySuppliedAssets,\n                objectifyBorrowedAssets,\n                mergeObjectifiedAssets,\n                // Interest functions\n                updateInterests,\n                // Token withdraw/deposit functions\n                withdrawToken,\n                depositToToken\n            })\n    }[\"LendState.useMemo[contextValue]\"], [\n        metamaskDetails,\n        userAssets,\n        supplyAssets,\n        assetsToBorrow,\n        yourBorrows,\n        supplySummary,\n        borrowSummary,\n        accountData,\n        contract,\n        connectWallet,\n        refresh,\n        getUserAssets,\n        getYourSupplies,\n        getYourBorrows,\n        getAssetsToBorrow,\n        ApproveToContinue,\n        LendAsset,\n        WithdrawAsset,\n        borrowAsset,\n        repayAsset,\n        getContract,\n        getPriceUSD,\n        getAmountInUSD,\n        wrapEth,\n        unwrapWeth,\n        getAccountData,\n        getUserTotalAvailableBalance,\n        getTokensPerUSDAmount,\n        objectifySuppliedAssets,\n        objectifyBorrowedAssets,\n        mergeObjectifiedAssets,\n        updateInterests\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_lendContext__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Provider, {\n        value: contextValue,\n        children: props.children\n    }, void 0, false, {\n        fileName: \"D:\\\\Do_an2\\\\lendhub_v2\\\\lendhub-frontend-nextjs\\\\src\\\\context\\\\LendState.js\",\n        lineNumber: 898,\n        columnNumber: 5\n    }, undefined);\n};\n_s(LendState, \"VmZhE1ZTOhq434hcVdJavoagcY4=\");\n_c = LendState;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LendState);\nvar _c;\n$RefreshReg$(_c, \"LendState\");\n\n\n;\r\n    // Wrapped in an IIFE to avoid polluting the global scope\r\n    ;\r\n    (function () {\r\n        var _a, _b;\r\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\r\n        // to extract CSS. For backwards compatibility, we need to check we're in a\r\n        // browser context before continuing.\r\n        if (typeof self !== 'undefined' &&\r\n            // AMP / No-JS mode does not inject these helpers:\r\n            '$RefreshHelpers$' in self) {\r\n            // @ts-ignore __webpack_module__ is global\r\n            var currentExports = module.exports;\r\n            // @ts-ignore __webpack_module__ is global\r\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\r\n            // This cannot happen in MainTemplate because the exports mismatch between\r\n            // templating and execution.\r\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\r\n            // A module can be accepted automatically based on its exports, e.g. when\r\n            // it is a Refresh Boundary.\r\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\r\n                // Save the previous exports signature on update so we can compare the boundary\r\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\r\n                module.hot.dispose(function (data) {\r\n                    data.prevSignature =\r\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\r\n                });\r\n                // Unconditionally accept an update to this module, we'll check if it's\r\n                // still a Refresh Boundary later.\r\n                // @ts-ignore importMeta is replaced in the loader\r\n                module.hot.accept();\r\n                // This field is set when the previous version of this module was a\r\n                // Refresh Boundary, letting us know we need to check for invalidation or\r\n                // enqueue an update.\r\n                if (prevSignature !== null) {\r\n                    // A boundary can become ineligible if its exports are incompatible\r\n                    // with the previous exports.\r\n                    //\r\n                    // For example, if you add/remove/change exports, we'll want to\r\n                    // re-execute the importing modules, and force those components to\r\n                    // re-render. Similarly, if you convert a class component to a\r\n                    // function, we want to invalidate the boundary.\r\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\r\n                        module.hot.invalidate();\r\n                    }\r\n                    else {\r\n                        self.$RefreshHelpers$.scheduleUpdate();\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // Since we just executed the code for the module, it's possible that the\r\n                // new exports made it ineligible for being a boundary.\r\n                // We only care about the case when we were _previously_ a boundary,\r\n                // because we already accepted this update (accidental side effect).\r\n                var isNoLongerABoundary = prevSignature !== null;\r\n                if (isNoLongerABoundary) {\r\n                    module.hot.invalidate();\r\n                }\r\n            }\r\n        }\r\n    })();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL3NyYy9jb250ZXh0L0xlbmRTdGF0ZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUE4RDtBQUN0QjtBQUNSO0FBQ2E7QUFDaUg7QUFDN0Q7QUFDNUI7QUFFckUsb0JBQW9CO0FBQ3BCLE1BQU15QixpQkFBaUIsQ0FBQ0M7SUFDdEIsT0FBT3JCLDBDQUFNQSxDQUFDc0IsVUFBVSxDQUFDRCxPQUFPRSxRQUFRO0FBQzFDO0FBRUEsTUFBTUMsY0FBYyxDQUFDQztJQUNuQkMsUUFBUUQsS0FBSyxDQUFDLG9CQUFvQkUsS0FBS0MsU0FBUyxDQUFDSDtJQUNqREMsUUFBUUQsS0FBSyxDQUFDLGtCQUFrQkE7QUFDbEM7QUFFQSxNQUFNSSxZQUFZLENBQUNDOztJQUNqQiw0QkFBNEI7SUFFNUIsdUJBQXVCO0lBQ3ZCLE1BQU0sQ0FBQ0MsaUJBQWlCQyxtQkFBbUIsR0FBR3BDLCtDQUFRQSxDQUFDO1FBQ3JEcUMsVUFBVTtRQUNWQyxhQUFhO1FBQ2JDLFFBQVE7UUFDUkMsZ0JBQWdCO1FBQ2hCQyxTQUFTO0lBQ1g7SUFFQSwyQkFBMkI7SUFDM0IsTUFBTSxDQUFDQyxZQUFZQyxjQUFjLEdBQUczQywrQ0FBUUEsQ0FBQyxFQUFFO0lBQy9DLE1BQU0sQ0FBQzRDLGNBQWNDLGdCQUFnQixHQUFHN0MsK0NBQVFBLENBQUMsRUFBRTtJQUNuRCxNQUFNLENBQUM4QyxnQkFBZ0JDLGtCQUFrQixHQUFHL0MsK0NBQVFBLENBQUMsRUFBRTtJQUN2RCxNQUFNLENBQUNnRCxhQUFhQyxlQUFlLEdBQUdqRCwrQ0FBUUEsQ0FBQyxFQUFFO0lBRWpELG1CQUFtQjtJQUNuQixNQUFNLENBQUNrRCxVQUFVQyxZQUFZLEdBQUduRCwrQ0FBUUEsQ0FBQztRQUN2Q29ELHFCQUFxQjtRQUNyQkMsZ0JBQWdCO0lBQ2xCO0lBRUEsZUFBZTtJQUNmLE1BQU0sQ0FBQ0MsZUFBZUMsaUJBQWlCLEdBQUd2RCwrQ0FBUUEsQ0FBQztRQUNqRHdELGlCQUFpQjtRQUNqQkMsZ0JBQWdCO1FBQ2hCQyxvQkFBb0I7SUFDdEI7SUFFQSxNQUFNLENBQUNDLGVBQWVDLGlCQUFpQixHQUFHNUQsK0NBQVFBLENBQUM7UUFDakR3RCxpQkFBaUI7UUFDakJDLGdCQUFnQjtRQUNoQkksc0JBQXNCO0lBQ3hCO0lBRUEsZUFBZTtJQUNmLE1BQU0sQ0FBQ0MsYUFBYUMsZUFBZSxHQUFHL0QsK0NBQVFBLENBQUM7UUFDN0NnRSxlQUFlO1FBQ2ZDLFNBQVM7UUFDVEMsY0FBYztJQUNoQjtJQUVBLGlCQUFpQjtJQUNqQixrREFBa0Q7SUFDbEQsK0NBQStDO0lBQy9DLGlDQUFpQztJQUNqQywyRUFBMkU7SUFFM0UsVUFBVTtJQUNWLHVCQUF1QjtJQUN2Qiw0QkFBNEI7SUFDNUIsZ0JBQWdCO0lBQ2hCLFFBQVE7SUFFUixnREFBZ0Q7SUFDaEQsdUNBQXVDO0lBQ3ZDLFVBQVU7SUFFViw4Q0FBOEM7SUFDOUMsMENBQTBDO0lBQzFDLGtDQUFrQztJQUNsQyxVQUFVO0lBQ1YsNkNBQTZDO0lBQzdDLGtDQUFrQztJQUNsQyxVQUFVO0lBRVYsNkRBQTZEO0lBQzdELG1EQUFtRDtJQUNuRCx3Q0FBd0M7SUFDeEMsaURBQWlEO0lBRWpELDZCQUE2QjtJQUM3QiwwQ0FBMEM7SUFDMUMsNkJBQTZCO0lBQzdCLDhCQUE4QjtJQUM5QixvQ0FBb0M7SUFDcEMsMEJBQTBCO0lBQzFCLDBDQUEwQztJQUMxQyw0Q0FBNEM7SUFDNUMsWUFBWTtJQUNaLDZEQUE2RDtJQUM3RCxlQUFlO0lBQ2YsNEJBQTRCO0lBQzVCLGdCQUFnQjtJQUNoQixRQUFRO0lBQ1Isc0JBQXNCO0lBQ3RCLDBCQUEwQjtJQUMxQixNQUFNO0lBQ04sVUFBVTtJQUVWLE1BQU1DLGdCQUFnQmxFLGtEQUFXQTtnREFBQztZQUNoQzZCLFFBQVFzQyxHQUFHLENBQUM7WUFDWixNQUFNLEVBQUVDLFFBQVEsRUFBRSxHQUFHQztZQUNyQixNQUFNQyxjQUFjO1lBQ3BCLElBQUk7Z0JBQ0YsSUFBSSxDQUFDRixVQUFVO29CQUNiRyxNQUFNRDtvQkFDTjtnQkFDRjtnQkFFQSxNQUFNRSxXQUFXLE1BQU1KLFNBQVNLLE9BQU8sQ0FBQztvQkFBRUMsUUFBUTtnQkFBc0I7Z0JBRXhFLHVDQUF1QztnQkFDdkNOLFNBQVNPLEVBQUUsQ0FBQzs0REFBZ0I7d0JBQzFCTixPQUFPTyxRQUFRLENBQUNDLE1BQU07b0JBQ3hCOztnQkFDQVQsU0FBU08sRUFBRSxDQUFDOzREQUFtQjt3QkFDN0JOLE9BQU9PLFFBQVEsQ0FBQ0MsTUFBTTtvQkFDeEI7O2dCQUVBLE1BQU16QyxXQUFXLElBQUlqQywwQ0FBTUEsQ0FBQzJFLGVBQWUsQ0FBQ1Y7Z0JBQzVDLE1BQU1XLFVBQVUsTUFBTTNDLFNBQVM0QyxVQUFVO2dCQUN6QyxNQUFNM0MsY0FBYzBDLFFBQVFFLElBQUk7Z0JBQ2hDLE1BQU0zQyxTQUFTLE1BQU1GLFNBQVM4QyxTQUFTO2dCQUV2QyxJQUFJVixTQUFTVyxNQUFNLEVBQUU7b0JBQ25CLElBQUlDLGlCQUFpQlosUUFBUSxDQUFDLEVBQUU7b0JBQ2hDckMsbUJBQW1CO3dCQUNqQkMsVUFBVUE7d0JBQ1ZDLGFBQWFBO3dCQUNiQyxRQUFRQTt3QkFDUkMsZ0JBQWdCNkM7d0JBQ2hCNUMsU0FBUzZDLE9BQU9OLFFBQVF2QyxPQUFPO29CQUNqQztvQkFDQVgsUUFBUXNDLEdBQUcsQ0FBQywwREFBMERpQjtnQkFDeEUsT0FBTztvQkFDTGIsTUFBTUQ7b0JBQ047Z0JBQ0Y7WUFDRixFQUFFLE9BQU8xQyxPQUFPO2dCQUNkRCxZQUFZQztZQUNkO1FBQ0Y7K0NBQUcsRUFBRTtJQUVMLHdCQUF3QjtJQUN4QixNQUFNMEQsY0FBY3RGLGtEQUFXQTs4Q0FBQyxPQUFPdUYsU0FBU0M7WUFDOUMsSUFBSSxDQUFDdEQsZ0JBQWdCRSxRQUFRLEVBQUUsT0FBTztZQUN0QyxNQUFNYSxXQUFXLElBQUk5QywwQ0FBTUEsQ0FBQ3NGLFFBQVEsQ0FBQ0YsU0FBU0MsS0FBS3RELGdCQUFnQkUsUUFBUTtZQUMzRSxPQUFPYTtRQUNUOzZDQUFHO1FBQUNmLGdCQUFnQkUsUUFBUTtLQUFDO0lBRTdCLDZCQUE2QjtJQUM3QixNQUFNc0QsZ0JBQWdCMUYsa0RBQVdBO2dEQUFDO1lBQ2hDNkIsUUFBUXNDLEdBQUcsQ0FBQztZQUNaLElBQUk7Z0JBQ0YsSUFBSSxDQUFDakMsZ0JBQWdCRSxRQUFRLElBQUksQ0FBQ0YsZ0JBQWdCSyxjQUFjLEVBQUUsT0FBTyxFQUFFO2dCQUUzRSxNQUFNb0QsU0FBUyxNQUFNQyxRQUFRQyxHQUFHLENBQzlCekYscURBQU1BLENBQUMwRixNQUFNLENBQUNDLEdBQUc7NERBQUMsT0FBT0M7d0JBQ3ZCLElBQUlDLFVBQVU7d0JBQ2QsSUFBSUMsYUFBYTt3QkFFakIsSUFBSTs0QkFDRixJQUFJRixNQUFNRyxRQUFRLEVBQUU7Z0NBQ2xCLHFCQUFxQjtnQ0FDckIsTUFBTUMsTUFBTSxNQUFNbEUsZ0JBQWdCRSxRQUFRLENBQUNpRSxVQUFVLENBQUNuRSxnQkFBZ0JLLGNBQWM7Z0NBQ3BGMEQsVUFBVTlGLDBDQUFNQSxDQUFDbUcsV0FBVyxDQUFDRjs0QkFDL0IsT0FBTztnQ0FDTCxzQkFBc0I7Z0NBQ3RCSCxVQUFVLE1BQU01Rix3REFBZUEsQ0FDN0I2QixnQkFBZ0JFLFFBQVEsRUFDeEI0RCxNQUFNVCxPQUFPLEVBQ2JyRCxnQkFBZ0JLLGNBQWMsRUFDOUJ5RCxNQUFNTyxRQUFROzRCQUVsQjs0QkFFQSxnQkFBZ0I7NEJBQ2hCLE1BQU1DLFFBQVEsTUFBTUMsWUFBWVQsTUFBTVQsT0FBTzs0QkFDN0NXLGFBQWFRLFdBQVdULFdBQVdTLFdBQVdGOzRCQUU5QyxPQUFPO2dDQUNMakIsU0FBU1MsTUFBTVQsT0FBTztnQ0FDdEJvQixRQUFRWCxNQUFNVyxNQUFNO2dDQUNwQjFCLE1BQU1lLE1BQU1mLElBQUk7Z0NBQ2hCc0IsVUFBVVAsTUFBTU8sUUFBUTtnQ0FDeEJKLFVBQVVILE1BQU1HLFFBQVE7Z0NBQ3hCRixTQUFTQTtnQ0FDVEMsWUFBWUE7Z0NBQ1pVLFVBQVVKOzRCQUNaO3dCQUNGLEVBQUUsT0FBTzVFLE9BQU87NEJBQ2RDLFFBQVFnRixJQUFJLENBQUMsNkJBQTBDLE9BQWJiLE1BQU1XLE1BQU0sRUFBQyxNQUFJL0U7NEJBQzNELE9BQU87Z0NBQ0wyRCxTQUFTUyxNQUFNVCxPQUFPO2dDQUN0Qm9CLFFBQVFYLE1BQU1XLE1BQU07Z0NBQ3BCMUIsTUFBTWUsTUFBTWYsSUFBSTtnQ0FDaEJzQixVQUFVUCxNQUFNTyxRQUFRO2dDQUN4QkosVUFBVUgsTUFBTUcsUUFBUTtnQ0FDeEJGLFNBQVM7Z0NBQ1RDLFlBQVk7Z0NBQ1pVLFVBQVU7NEJBQ1o7d0JBQ0Y7b0JBQ0Y7O2dCQUdGbEUsY0FBY2lEO2dCQUNkOUQsUUFBUXNDLEdBQUcsQ0FBQyxvQkFBb0J3QjtnQkFDaEMsT0FBT0E7WUFDVCxFQUFFLE9BQU8vRCxPQUFPO2dCQUNkRCxZQUFZQztnQkFDWixPQUFPLEVBQUU7WUFDWDtRQUNGOytDQUFHO1FBQUNNLGdCQUFnQkUsUUFBUTtRQUFFRixnQkFBZ0JLLGNBQWM7S0FBQztJQUU3RCxtQkFBbUI7SUFDbkIsTUFBTWtFLGNBQWN6RyxrREFBV0E7OENBQUMsT0FBTzhHO1lBQ3JDLElBQUksQ0FBQzVFLGdCQUFnQkUsUUFBUSxFQUFFLE9BQU87WUFDdEMsSUFBSTtnQkFDRixNQUFNb0QsTUFBTTtvQkFBQztpQkFBbUU7Z0JBQ2hGLE1BQU11QixTQUFTLElBQUk1RywwQ0FBTUEsQ0FBQ3NGLFFBQVEsQ0FBQ3JGLHFEQUFNQSxDQUFDNEcsWUFBWSxFQUFFeEIsS0FBS3RELGdCQUFnQkUsUUFBUTtnQkFDckYsTUFBTW9FLFFBQVEsTUFBTU8sT0FBT0UsaUJBQWlCLENBQUNIO2dCQUM3QyxPQUFPM0csMENBQU1BLENBQUMrRyxXQUFXLENBQUNWLE9BQU87WUFDbkMsRUFBRSxPQUFPNUUsT0FBTztnQkFDZEMsUUFBUWdGLElBQUksQ0FBQywyQkFBaUMsT0FBTkMsT0FBTSxNQUFJbEY7Z0JBQ2xELE9BQU87WUFDVDtRQUNGOzZDQUFHO1FBQUNNLGdCQUFnQkUsUUFBUTtLQUFDO0lBRTdCLG9CQUFvQjtJQUNwQixNQUFNK0UsaUJBQWlCbkgsa0RBQVdBO2lEQUFDLE9BQU91RixTQUFTNkI7WUFDakQsSUFBSTtnQkFDRixNQUFNWixRQUFRLE1BQU1DLFlBQVlsQjtnQkFDaEMsTUFBTThCLGNBQWNYLFdBQVdVLFVBQVVWLFdBQVdGO2dCQUNwRCxPQUFPYTtZQUNULEVBQUUsT0FBT3pGLE9BQU87Z0JBQ2RELFlBQVlDO2dCQUNaLE9BQU87WUFDVDtRQUNGO2dEQUFHO1FBQUM2RTtLQUFZO0lBRWhCLGlCQUFpQjtJQUNqQixNQUFNYSxvQkFBb0J0SCxrREFBV0E7b0RBQUMsT0FBT3VILGNBQWNDO1lBQ3pELElBQUksQ0FBQ3RGLGdCQUFnQkksTUFBTSxFQUFFO2dCQUMzQixNQUFNLElBQUltRixNQUFNO1lBQ2xCO1lBRUEsSUFBSTtnQkFDRixNQUFNekIsUUFBUTVGLHFEQUFNQSxDQUFDMEYsTUFBTSxDQUFDNEIsSUFBSTtzRUFBQ0MsQ0FBQUEsSUFBS0EsRUFBRXBDLE9BQU8sQ0FBQ3FDLFdBQVcsT0FBT0wsYUFBYUssV0FBVzs7Z0JBQzFGLElBQUksQ0FBQzVCLE9BQU8sTUFBTSxJQUFJeUIsTUFBTTtnQkFFNUIsTUFBTWxILHdEQUFlQSxDQUNuQjJCLGdCQUFnQkksTUFBTSxFQUN0QmlGLGNBQ0FuSCxxREFBTUEsQ0FBQ3lILFlBQVksRUFDbkJMLGVBQ0F4QixNQUFNTyxRQUFRO2dCQUdoQjFFLFFBQVFzQyxHQUFHLENBQUMsbUJBQW1Cb0Q7Z0JBQy9CLE9BQU87b0JBQUVPLFFBQVE7b0JBQUtDLFNBQVM7Z0JBQTRCO1lBQzdELEVBQUUsT0FBT25HLE9BQU87Z0JBQ2RELFlBQVlDO2dCQUNaLE9BQU87b0JBQUVrRyxRQUFRO29CQUFLQyxTQUFTbkcsTUFBTW1HLE9BQU8sSUFBSW5HLE1BQU1vRyxNQUFNO2dCQUFDO1lBQy9EO1FBQ0Y7bURBQUc7UUFBQzlGLGdCQUFnQkksTUFBTTtLQUFDO0lBRTNCLGFBQWE7SUFDYixNQUFNMkYsWUFBWWpJLGtEQUFXQTs0Q0FBQyxPQUFPZ0csT0FBT2tDO1lBQzFDLElBQUksQ0FBQ2hHLGdCQUFnQkksTUFBTSxFQUFFO2dCQUMzQixNQUFNLElBQUltRixNQUFNO1lBQ2xCO1lBRUEsSUFBSTtnQkFDRixNQUFNVSxZQUFZL0gscURBQU1BLENBQUMwRixNQUFNLENBQUM0QixJQUFJO2tFQUFDQyxDQUFBQSxJQUFLQSxFQUFFcEMsT0FBTyxDQUFDcUMsV0FBVyxPQUFPNUIsTUFBTTRCLFdBQVc7O2dCQUN2RixJQUFJLENBQUNPLFdBQVcsTUFBTSxJQUFJVixNQUFNO2dCQUVoQyxNQUFNTCxTQUFTakgsMENBQU1BLENBQUNpSSxVQUFVLENBQUNGLGNBQWNDLFVBQVU1QixRQUFRO2dCQUNqRSxNQUFNOEIsS0FBSyxNQUFNNUgsNkNBQU1BLENBQUN5QixnQkFBZ0JJLE1BQU0sRUFBRTBELE9BQU9vQjtnQkFFdkQsSUFBSWlCLElBQUk7b0JBQ054RyxRQUFRc0MsR0FBRyxDQUFDLDRCQUE0QjZCLE9BQU9rQztvQkFDL0MsT0FBTzt3QkFBRUosUUFBUTt3QkFBS0MsU0FBUzt3QkFBNkJPLE1BQU1ELEdBQUdDLElBQUk7b0JBQUM7Z0JBQzVFO2dCQUNBLE1BQU0sSUFBSWIsTUFBTTtZQUNsQixFQUFFLE9BQU83RixPQUFPO2dCQUNkRCxZQUFZQztnQkFDWixPQUFPO29CQUFFa0csUUFBUTtvQkFBS0MsU0FBU25HLE1BQU1tRyxPQUFPLElBQUluRyxNQUFNb0csTUFBTTtnQkFBQztZQUMvRDtRQUNGOzJDQUFHO1FBQUM5RixnQkFBZ0JJLE1BQU07S0FBQztJQUUzQixpQkFBaUI7SUFDakIsTUFBTWlHLGdCQUFnQnZJLGtEQUFXQTtnREFBQyxPQUFPdUgsY0FBY2lCO1lBQ3JELElBQUksQ0FBQ3RHLGdCQUFnQkksTUFBTSxFQUFFO2dCQUMzQixNQUFNLElBQUltRixNQUFNO1lBQ2xCO1lBRUEsSUFBSTtnQkFDRixNQUFNVSxZQUFZL0gscURBQU1BLENBQUMwRixNQUFNLENBQUM0QixJQUFJO3NFQUFDQyxDQUFBQSxJQUFLQSxFQUFFcEMsT0FBTyxDQUFDcUMsV0FBVyxPQUFPTCxhQUFhSyxXQUFXOztnQkFDOUYsSUFBSSxDQUFDTyxXQUFXLE1BQU0sSUFBSVYsTUFBTTtnQkFFaEMsTUFBTUwsU0FBU2pILDBDQUFNQSxDQUFDaUksVUFBVSxDQUFDSSxnQkFBZ0JMLFVBQVU1QixRQUFRO2dCQUNuRSxNQUFNOEIsS0FBSyxNQUFNMUgsaURBQVVBLENBQUN1QixnQkFBZ0JJLE1BQU0sRUFBRWlGLGNBQWNIO2dCQUVsRSxJQUFJaUIsSUFBSTtvQkFDTnhHLFFBQVFzQyxHQUFHLENBQUMsaUNBQWlDb0QsY0FBY2lCO29CQUMzRCxPQUFPO3dCQUFFVixRQUFRO3dCQUFLQyxTQUFTO3dCQUE2Qk8sTUFBTUQsR0FBR0MsSUFBSTtvQkFBQztnQkFDNUU7Z0JBQ0EsTUFBTSxJQUFJYixNQUFNO1lBQ2xCLEVBQUUsT0FBTzdGLE9BQU87Z0JBQ2RELFlBQVlDO2dCQUNaLE9BQU87b0JBQUVrRyxRQUFRO29CQUFLQyxTQUFTbkcsTUFBTW1HLE9BQU8sSUFBSW5HLE1BQU1vRyxNQUFNO2dCQUFDO1lBQy9EO1FBQ0Y7K0NBQUc7UUFBQzlGLGdCQUFnQkksTUFBTTtLQUFDO0lBRTNCLGVBQWU7SUFDZixNQUFNbUcsY0FBY3pJLGtEQUFXQTs4Q0FBQyxPQUFPZ0csT0FBTzBDO1lBQzVDLElBQUksQ0FBQ3hHLGdCQUFnQkksTUFBTSxFQUFFO2dCQUMzQixNQUFNLElBQUltRixNQUFNO1lBQ2xCO1lBRUEsSUFBSTtnQkFDRixNQUFNVSxZQUFZL0gscURBQU1BLENBQUMwRixNQUFNLENBQUM0QixJQUFJO29FQUFDQyxDQUFBQSxJQUFLQSxFQUFFcEMsT0FBTyxDQUFDcUMsV0FBVyxPQUFPNUIsTUFBTTRCLFdBQVc7O2dCQUN2RixJQUFJLENBQUNPLFdBQVcsTUFBTSxJQUFJVixNQUFNO2dCQUVoQyxNQUFNTCxTQUFTakgsMENBQU1BLENBQUNpSSxVQUFVLENBQUNNLGNBQWNQLFVBQVU1QixRQUFRO2dCQUNqRSxNQUFNOEIsS0FBSyxNQUFNeEgsK0NBQVFBLENBQUNxQixnQkFBZ0JJLE1BQU0sRUFBRTBELE9BQU9vQjtnQkFFekQsSUFBSWlCLElBQUk7b0JBQ054RyxRQUFRc0MsR0FBRyxDQUFDLGdDQUFnQzZCLE9BQU8wQztvQkFDbkQsT0FBTzt3QkFBRVosUUFBUTt3QkFBS0MsU0FBUzt3QkFBNkJPLE1BQU1ELEdBQUdDLElBQUk7b0JBQUM7Z0JBQzVFO2dCQUNBLE1BQU0sSUFBSWIsTUFBTTtZQUNsQixFQUFFLE9BQU83RixPQUFPO2dCQUNkRCxZQUFZQztnQkFDWixPQUFPO29CQUFFa0csUUFBUTtvQkFBS0MsU0FBU25HLE1BQU1tRyxPQUFPLElBQUluRyxNQUFNb0csTUFBTTtnQkFBQztZQUMvRDtRQUNGOzZDQUFHO1FBQUM5RixnQkFBZ0JJLE1BQU07S0FBQztJQUUzQixjQUFjO0lBQ2QsTUFBTXFHLGFBQWEzSSxrREFBV0E7NkNBQUMsT0FBT3VILGNBQWNxQjtZQUNsRCxJQUFJLENBQUMxRyxnQkFBZ0JJLE1BQU0sRUFBRTtnQkFDM0IsTUFBTSxJQUFJbUYsTUFBTTtZQUNsQjtZQUVBLElBQUk7Z0JBQ0YsTUFBTVUsWUFBWS9ILHFEQUFNQSxDQUFDMEYsTUFBTSxDQUFDNEIsSUFBSTttRUFBQ0MsQ0FBQUEsSUFBS0EsRUFBRXBDLE9BQU8sQ0FBQ3FDLFdBQVcsT0FBT0wsYUFBYUssV0FBVzs7Z0JBQzlGLElBQUksQ0FBQ08sV0FBVyxNQUFNLElBQUlWLE1BQU07Z0JBRWhDLE1BQU1MLFNBQVNqSCwwQ0FBTUEsQ0FBQ2lJLFVBQVUsQ0FBQ1EsYUFBYVQsVUFBVTVCLFFBQVE7Z0JBQ2hFLE1BQU04QixLQUFLLE1BQU10SCw4Q0FBT0EsQ0FBQ21CLGdCQUFnQkksTUFBTSxFQUFFaUYsY0FBY0g7Z0JBRS9ELElBQUlpQixJQUFJO29CQUNOeEcsUUFBUXNDLEdBQUcsQ0FBQyw4QkFBOEJvRCxjQUFjcUI7b0JBQ3hELE9BQU87d0JBQUVkLFFBQVE7d0JBQUtDLFNBQVM7d0JBQTZCTyxNQUFNRCxHQUFHQyxJQUFJO29CQUFDO2dCQUM1RTtnQkFDQSxNQUFNLElBQUliLE1BQU07WUFDbEIsRUFBRSxPQUFPN0YsT0FBTztnQkFDZEQsWUFBWUM7Z0JBQ1osT0FBTztvQkFBRWtHLFFBQVE7b0JBQUtDLFNBQVNuRyxNQUFNbUcsT0FBTyxJQUFJbkcsTUFBTW9HLE1BQU07Z0JBQUM7WUFDL0Q7UUFDRjs0Q0FBRztRQUFDOUYsZ0JBQWdCSSxNQUFNO0tBQUM7SUFFM0IscURBQXFEO0lBQ3JELE1BQU11RyxpQkFBaUI3SSxrREFBV0E7aURBQUMsT0FBTzhJO1lBQ3hDLElBQUk7Z0JBQ0YsSUFBSSxDQUFDNUcsZ0JBQWdCRSxRQUFRLEVBQUUsT0FBTztnQkFFdEMsTUFBTTJHLE9BQU8sSUFBSTVJLDBDQUFNQSxDQUFDc0YsUUFBUSxDQUFDeEUsMERBQWtCQSxFQUFFSSxpREFBY0EsQ0FBQ21FLEdBQUcsRUFBRXRELGdCQUFnQkUsUUFBUTtnQkFDakcsTUFBTTRHLFNBQVNGLFFBQVE1RyxnQkFBZ0JLLGNBQWMsSUFBSXBDLDBDQUFNQSxDQUFDOEksV0FBVztnQkFFM0Usd0NBQXdDO2dCQUN4QyxJQUFJQyxLQUFLQyxNQUFNQztnQkFDZixJQUFJO29CQUNGLENBQUNGLEtBQUtDLE1BQU1DLEdBQUcsR0FBRyxNQUFNTCxLQUFLRixjQUFjLENBQUNHO2dCQUM5QyxFQUFFLE9BQU9LLGVBQWU7b0JBQ3RCeEgsUUFBUXNDLEdBQUcsQ0FBQyxtREFBbURrRixjQUFjdEIsT0FBTztvQkFDcEYsc0NBQXNDO29CQUN0Q21CLE1BQU0vSSwwQ0FBTUEsQ0FBQ2lJLFVBQVUsQ0FBQyxLQUFLO29CQUM3QmUsT0FBT2hKLDBDQUFNQSxDQUFDaUksVUFBVSxDQUFDLEtBQUs7b0JBQzlCZ0IsS0FBS2pKLDBDQUFNQSxDQUFDaUksVUFBVSxDQUFDLG1GQUFtRixLQUFLLGNBQWM7Z0JBQy9IO2dCQUVBLE1BQU12RSxjQUFjO29CQUNsQkUsZUFBZTVELDBDQUFNQSxDQUFDK0csV0FBVyxDQUFDZ0MsS0FBSztvQkFDdkNsRixTQUFTN0QsMENBQU1BLENBQUMrRyxXQUFXLENBQUNpQyxNQUFNO29CQUNsQ2xGLGNBQWM5RCwwQ0FBTUEsQ0FBQytHLFdBQVcsQ0FBQ2tDLElBQUk7Z0JBQ3ZDO2dCQUVBdEYsZUFBZUQ7Z0JBQ2YsT0FBT0E7WUFDVCxFQUFFLE9BQU9qQyxPQUFPO2dCQUNkQyxRQUFRc0MsR0FBRyxDQUFDLHlDQUF5Q3ZDLE1BQU1tRyxPQUFPO2dCQUNsRSxxQ0FBcUM7Z0JBQ3JDLE1BQU1sRSxjQUFjO29CQUNsQkUsZUFBZTtvQkFDZkMsU0FBUztvQkFDVEMsY0FBYztnQkFDaEI7Z0JBQ0FILGVBQWVEO2dCQUNmLE9BQU9BO1lBQ1Q7UUFDRjtnREFBRztRQUFDM0IsZ0JBQWdCRSxRQUFRO1FBQUVGLGdCQUFnQkssY0FBYztLQUFDO0lBRTdELG9CQUFvQjtJQUNwQixNQUFNK0csa0JBQWtCdEosa0RBQVdBO2tEQUFDO1lBQ2xDNkIsUUFBUXNDLEdBQUcsQ0FBQztZQUNaLElBQUk7Z0JBQ0YsSUFBSSxDQUFDakMsZ0JBQWdCRSxRQUFRLElBQUksQ0FBQ0YsZ0JBQWdCSyxjQUFjLEVBQUUsT0FBTyxFQUFFO2dCQUUzRSxNQUFNaUQsTUFBTTtvQkFDVjtpQkFDRDtnQkFDRCxNQUFNdUQsT0FBTyxJQUFJNUksMENBQU1BLENBQUNzRixRQUFRLENBQUNyRixxREFBTUEsQ0FBQ3lILFlBQVksRUFBRXJDLEtBQUt0RCxnQkFBZ0JFLFFBQVE7Z0JBRW5GLE1BQU1tSCxXQUFXLE1BQU0zRCxRQUFRQyxHQUFHLENBQ2hDekYscURBQU1BLENBQUMwRixNQUFNLENBQUMwRCxNQUFNOzhEQUFDN0IsQ0FBQUEsSUFBSyxDQUFDQSxFQUFFeEIsUUFBUTs2REFBRUosR0FBRzs4REFBQyxPQUFPQzt3QkFDaEQsSUFBSTs0QkFDRixNQUFNeUQsY0FBYyxNQUFNVixLQUFLVyxjQUFjLENBQUN4SCxnQkFBZ0JLLGNBQWMsRUFBRXlELE1BQU1ULE9BQU87NEJBQzNGLE1BQU1vRSxrQkFBa0J4SiwwQ0FBTUEsQ0FBQytHLFdBQVcsQ0FBQ3VDLFlBQVlHLE1BQU0sQ0FBQ0MsU0FBUyxFQUFFOzRCQUN6RSxNQUFNQyxjQUFjTCxZQUFZRyxNQUFNLENBQUNHLEtBQUssQ0FBQ3JJLFFBQVE7NEJBRXJELElBQUlnRixXQUFXaUQsbUJBQW1CLEdBQUc7Z0NBQ25DLE1BQU1uRCxRQUFRLE1BQU1DLFlBQVlULE1BQU1ULE9BQU87Z0NBQzdDLE1BQU1XLGFBQWFRLFdBQVdpRCxtQkFBbUJqRCxXQUFXRjtnQ0FFNUQsT0FBTztvQ0FDTGpCLFNBQVNTLE1BQU1ULE9BQU87b0NBQ3RCb0IsUUFBUVgsTUFBTVcsTUFBTTtvQ0FDcEIxQixNQUFNZSxNQUFNZixJQUFJO29DQUNoQnNCLFVBQVVQLE1BQU1PLFFBQVE7b0NBQ3hCb0QsaUJBQWlCQTtvQ0FDakJHLGFBQWFBO29DQUNiNUQsWUFBWUE7b0NBQ1pVLFVBQVVKO2dDQUNaOzRCQUNGOzRCQUNBLE9BQU87d0JBQ1QsRUFBRSxPQUFPNUUsT0FBTzs0QkFDZEMsUUFBUWdGLElBQUksQ0FBQyw0QkFBeUMsT0FBYmIsTUFBTVcsTUFBTSxFQUFDLE1BQUkvRTs0QkFDMUQsT0FBTzt3QkFDVDtvQkFDRjs7Z0JBR0YsTUFBTW9JLGdCQUFnQlQsU0FBU0MsTUFBTTs0RUFBQ1MsQ0FBQUEsSUFBS0EsTUFBTTs7Z0JBQ2pEckgsZ0JBQWdCb0g7Z0JBRWhCLG9CQUFvQjtnQkFDcEIsTUFBTXpHLGtCQUFrQnlHLGNBQWNFLE1BQU07OEVBQUMsQ0FBQ0MsS0FBS3JELFFBQVVxRCxNQUFNckQsTUFBTVosVUFBVTs2RUFBRTtnQkFDckYsTUFBTTFDLGlCQUFpQndHLGNBQWM3RSxNQUFNLEdBQUcsSUFDNUM2RSxjQUFjRSxNQUFNOzhEQUFDLENBQUNDLEtBQUtyRCxRQUFVcUQsTUFBT3JELENBQUFBLE1BQU1zRCxHQUFHLElBQUk7NkRBQUksS0FBS0osY0FBYzdFLE1BQU0sR0FBRztnQkFDM0YsTUFBTTFCLHFCQUFxQnVHLGNBQWNFLE1BQU07aUZBQUMsQ0FBQ0MsS0FBS3JELFFBQVVxRCxNQUFNckQsTUFBTVosVUFBVTtnRkFBRTtnQkFFeEY1QyxpQkFBaUI7b0JBQ2ZDO29CQUNBQztvQkFDQUM7Z0JBQ0Y7Z0JBRUE1QixRQUFRc0MsR0FBRyxDQUFDLHNCQUFzQjZGO2dCQUNsQyxPQUFPQTtZQUNULEVBQUUsT0FBT3BJLE9BQU87Z0JBQ2RELFlBQVlDO2dCQUNaLE9BQU8sRUFBRTtZQUNYO1FBQ0Y7aURBQUc7UUFBQ00sZ0JBQWdCRSxRQUFRO1FBQUVGLGdCQUFnQkssY0FBYztRQUFFa0U7S0FBWTtJQUUxRSxtQkFBbUI7SUFDbkIsTUFBTTRELGlCQUFpQnJLLGtEQUFXQTtpREFBQztZQUNqQzZCLFFBQVFzQyxHQUFHLENBQUM7WUFDWixJQUFJO2dCQUNGLElBQUksQ0FBQ2pDLGdCQUFnQkUsUUFBUSxJQUFJLENBQUNGLGdCQUFnQkssY0FBYyxFQUFFLE9BQU8sRUFBRTtnQkFFM0UsTUFBTWlELE1BQU07b0JBQ1Y7aUJBQ0Q7Z0JBQ0QsTUFBTXVELE9BQU8sSUFBSTVJLDBDQUFNQSxDQUFDc0YsUUFBUSxDQUFDckYscURBQU1BLENBQUN5SCxZQUFZLEVBQUVyQyxLQUFLdEQsZ0JBQWdCRSxRQUFRO2dCQUVuRixNQUFNa0ksVUFBVSxNQUFNMUUsUUFBUUMsR0FBRyxDQUMvQnpGLHFEQUFNQSxDQUFDMEYsTUFBTSxDQUFDMEQsTUFBTTs2REFBQzdCLENBQUFBLElBQUssQ0FBQ0EsRUFBRXhCLFFBQVE7NERBQUVKLEdBQUc7NkRBQUMsT0FBT0M7d0JBQ2hELElBQUk7NEJBQ0YsTUFBTXlELGNBQWMsTUFBTVYsS0FBS1csY0FBYyxDQUFDeEgsZ0JBQWdCSyxjQUFjLEVBQUV5RCxNQUFNVCxPQUFPOzRCQUMzRixNQUFNZ0Ysa0JBQWtCcEssMENBQU1BLENBQUMrRyxXQUFXLENBQUN1QyxZQUFZN0ksTUFBTSxDQUFDaUosU0FBUyxFQUFFOzRCQUN6RSxNQUFNVyxjQUFjZixZQUFZN0ksTUFBTSxDQUFDbUosS0FBSyxDQUFDckksUUFBUTs0QkFFckQsSUFBSWdGLFdBQVc2RCxtQkFBbUIsR0FBRztnQ0FDbkMsTUFBTS9ELFFBQVEsTUFBTUMsWUFBWVQsTUFBTVQsT0FBTztnQ0FDN0MsTUFBTVcsYUFBYVEsV0FBVzZELG1CQUFtQjdELFdBQVdGO2dDQUU1RCxPQUFPO29DQUNMakIsU0FBU1MsTUFBTVQsT0FBTztvQ0FDdEJvQixRQUFRWCxNQUFNVyxNQUFNO29DQUNwQjFCLE1BQU1lLE1BQU1mLElBQUk7b0NBQ2hCc0IsVUFBVVAsTUFBTU8sUUFBUTtvQ0FDeEJnRSxpQkFBaUJBO29DQUNqQkMsYUFBYUE7b0NBQ2J0RSxZQUFZQTtvQ0FDWlUsVUFBVUo7Z0NBQ1o7NEJBQ0Y7NEJBQ0EsT0FBTzt3QkFDVCxFQUFFLE9BQU81RSxPQUFPOzRCQUNkQyxRQUFRZ0YsSUFBSSxDQUFDLDRCQUF5QyxPQUFiYixNQUFNVyxNQUFNLEVBQUMsTUFBSS9FOzRCQUMxRCxPQUFPO3dCQUNUO29CQUNGOztnQkFHRixNQUFNNkksZUFBZUgsUUFBUWQsTUFBTTswRUFBQ2tCLENBQUFBLElBQUtBLE1BQU07O2dCQUMvQzFILGVBQWV5SDtnQkFFZixvQkFBb0I7Z0JBQ3BCLE1BQU1sSCxrQkFBa0JrSCxhQUFhUCxNQUFNOzZFQUFDLENBQUNDLEtBQUtyRCxRQUFVcUQsTUFBTXJELE1BQU1aLFVBQVU7NEVBQUU7Z0JBQ3BGLE1BQU0xQyxpQkFBaUJpSCxhQUFhdEYsTUFBTSxHQUFHLElBQzNDc0YsYUFBYVAsTUFBTTs2REFBQyxDQUFDQyxLQUFLckQsUUFBVXFELE1BQU9yRCxDQUFBQSxNQUFNc0QsR0FBRyxJQUFJOzREQUFJLEtBQUtLLGFBQWF0RixNQUFNLEdBQUc7Z0JBQ3pGLE1BQU12Qix1QkFBdUJMO2dCQUU3QkksaUJBQWlCO29CQUNmSjtvQkFDQUM7b0JBQ0FJO2dCQUNGO2dCQUVBL0IsUUFBUXNDLEdBQUcsQ0FBQyxxQkFBcUJzRztnQkFDakMsT0FBT0E7WUFDVCxFQUFFLE9BQU83SSxPQUFPO2dCQUNkRCxZQUFZQztnQkFDWixPQUFPLEVBQUU7WUFDWDtRQUNGO2dEQUFHO1FBQUNNLGdCQUFnQkUsUUFBUTtRQUFFRixnQkFBZ0JLLGNBQWM7UUFBRWtFO0tBQVk7SUFFMUUsdUJBQXVCO0lBQ3ZCLE1BQU1rRSxvQkFBb0IzSyxrREFBV0E7b0RBQUM7WUFDcEM2QixRQUFRc0MsR0FBRyxDQUFDO1lBQ1osSUFBSTtnQkFDRixJQUFJLENBQUNqQyxnQkFBZ0JFLFFBQVEsRUFBRSxPQUFPLEVBQUU7Z0JBRXhDLE1BQU1vRCxNQUFNO29CQUNWO2lCQUNEO2dCQUNELE1BQU11RCxPQUFPLElBQUk1SSwwQ0FBTUEsQ0FBQ3NGLFFBQVEsQ0FBQ3JGLHFEQUFNQSxDQUFDeUgsWUFBWSxFQUFFckMsS0FBS3RELGdCQUFnQkUsUUFBUTtnQkFFbkYsTUFBTXVELFNBQVMsTUFBTUMsUUFBUUMsR0FBRyxDQUM5QnpGLHFEQUFNQSxDQUFDMEYsTUFBTSxDQUFDMEQsTUFBTTtnRUFBQzdCLENBQUFBLElBQUssQ0FBQ0EsRUFBRXhCLFFBQVE7K0RBQUVKLEdBQUc7Z0VBQUMsT0FBT0M7d0JBQ2hELElBQUk7NEJBQ0YsTUFBTTRFLFVBQVUsTUFBTTdCLEtBQUs4QixRQUFRLENBQUM3RSxNQUFNVCxPQUFPOzRCQUNqRCxNQUFNdUYsZUFBZUMsUUFBUUgsUUFBUUUsWUFBWTs0QkFDakQsTUFBTUUsY0FBYzdLLDBDQUFNQSxDQUFDK0csV0FBVyxDQUFDMEQsUUFBUUksV0FBVyxFQUFFOzRCQUM1RCxNQUFNeEUsUUFBUSxNQUFNQyxZQUFZVCxNQUFNVCxPQUFPOzRCQUU3QyxJQUFJdUYsZ0JBQWdCcEUsV0FBV3NFLGVBQWUsR0FBRztnQ0FDL0MsT0FBTztvQ0FDTHpGLFNBQVNTLE1BQU1ULE9BQU87b0NBQ3RCb0IsUUFBUVgsTUFBTVcsTUFBTTtvQ0FDcEIxQixNQUFNZSxNQUFNZixJQUFJO29DQUNoQnNCLFVBQVVQLE1BQU1PLFFBQVE7b0NBQ3hCeUUsYUFBYUE7b0NBQ2JGLGNBQWNBO29DQUNkbEUsVUFBVUo7b0NBQ1Z5RSxRQUFRNUYsT0FBT3VGLFFBQVFLLE1BQU07b0NBQzdCQyxpQkFBaUI3RixPQUFPdUYsUUFBUU0sZUFBZTtnQ0FDakQ7NEJBQ0Y7NEJBQ0EsT0FBTzt3QkFDVCxFQUFFLE9BQU90SixPQUFPOzRCQUNkQyxRQUFRZ0YsSUFBSSxDQUFDLDhCQUEyQyxPQUFiYixNQUFNVyxNQUFNLEVBQUMsTUFBSS9FOzRCQUM1RCxPQUFPO3dCQUNUO29CQUNGOztnQkFHRixNQUFNdUosY0FBY3hGLE9BQU82RCxNQUFNOzRFQUFDNEIsQ0FBQUEsSUFBS0EsTUFBTTs7Z0JBQzdDdEksa0JBQWtCcUk7Z0JBQ2xCdEosUUFBUXNDLEdBQUcsQ0FBQyx5QkFBeUJnSDtnQkFDckMsT0FBT0E7WUFDVCxFQUFFLE9BQU92SixPQUFPO2dCQUNkRCxZQUFZQztnQkFDWixPQUFPLEVBQUU7WUFDWDtRQUNGO21EQUFHO1FBQUNNLGdCQUFnQkUsUUFBUTtRQUFFcUU7S0FBWTtJQUUxQyxtQkFBbUI7SUFDbkIsTUFBTTRFLFVBQVVyTCxrREFBV0E7MENBQUMsT0FBT3NMO1lBQ2pDLElBQUksQ0FBQ3BKLGdCQUFnQkksTUFBTSxFQUFFO2dCQUMzQixNQUFNLElBQUltRixNQUFNO1lBQ2xCO1lBRUEsSUFBSTtnQkFDRixNQUFNOEQsT0FBTyxjQUFjLFlBQVk7Z0JBQ3ZDMUosUUFBUXNDLEdBQUcsQ0FBQyxpQ0FBaUNoRCxtREFBV0E7Z0JBQ3hELE1BQU1rSCxLQUFLLE1BQU1uRyxnQkFBZ0JJLE1BQU0sQ0FBQ2tKLGVBQWUsQ0FBQztvQkFDdERDLElBQUl0SyxtREFBV0E7b0JBQ2Z1SyxPQUFPdkwsMENBQU1BLENBQUNzQixVQUFVLENBQUM2SjtvQkFDekJDO2dCQUNGO2dCQUNBLE1BQU1sRCxHQUFHc0QsSUFBSTtnQkFDYjlKLFFBQVFzQyxHQUFHLENBQUMsd0JBQXdCbUg7Z0JBQ3BDLE9BQU87b0JBQUV4RCxRQUFRO29CQUFLQyxTQUFTO29CQUE2Qk8sTUFBTUQsR0FBR0MsSUFBSTtnQkFBQztZQUM1RSxFQUFFLE9BQU8xRyxPQUFPO2dCQUNkRCxZQUFZQztnQkFDWixPQUFPO29CQUFFa0csUUFBUTtvQkFBS0MsU0FBU25HLE1BQU1tRyxPQUFPLElBQUluRyxNQUFNb0csTUFBTTtnQkFBQztZQUMvRDtRQUNGO3lDQUFHO1FBQUM5RixnQkFBZ0JJLE1BQU07S0FBQztJQUUzQixxQkFBcUI7SUFDckIsTUFBTXNKLGFBQWE1TCxrREFBV0E7NkNBQUMsT0FBT3NMO1lBQ3BDLElBQUksQ0FBQ3BKLGdCQUFnQkksTUFBTSxFQUFFO2dCQUMzQixNQUFNLElBQUltRixNQUFNO1lBQ2xCO1lBRUEsSUFBSTtnQkFDRixNQUFNakMsTUFBTTtvQkFBQztpQkFBaUM7Z0JBQzlDM0QsUUFBUXNDLEdBQUcsQ0FBQyxvQ0FBb0NoRCxtREFBV0E7Z0JBQzNELE1BQU0wSyxPQUFPLElBQUkxTCwwQ0FBTUEsQ0FBQ3NGLFFBQVEsQ0FBQ3RFLG1EQUFXQSxFQUFFcUUsS0FBS3RELGdCQUFnQkksTUFBTTtnQkFDekUsTUFBTStGLEtBQUssTUFBTXdELEtBQUtuTCxRQUFRLENBQUNQLDBDQUFNQSxDQUFDc0IsVUFBVSxDQUFDNko7Z0JBQ2pELE1BQU1qRCxHQUFHc0QsSUFBSTtnQkFDYjlKLFFBQVFzQyxHQUFHLENBQUMsMEJBQTBCbUg7Z0JBQ3RDLE9BQU87b0JBQUV4RCxRQUFRO29CQUFLQyxTQUFTO29CQUE2Qk8sTUFBTUQsR0FBR0MsSUFBSTtnQkFBQztZQUM1RSxFQUFFLE9BQU8xRyxPQUFPO2dCQUNkRCxZQUFZQztnQkFDWixPQUFPO29CQUFFa0csUUFBUTtvQkFBS0MsU0FBU25HLE1BQU1tRyxPQUFPLElBQUluRyxNQUFNb0csTUFBTTtnQkFBQztZQUMvRDtRQUNGOzRDQUFHO1FBQUM5RixnQkFBZ0JJLE1BQU07S0FBQztJQUUzQixnRUFBZ0U7SUFDaEUsTUFBTXdKLGdCQUFnQjlMLGtEQUFXQTtnREFBQyxPQUFPdUgsY0FBY0g7WUFDckQsSUFBSSxDQUFDbEYsZ0JBQWdCSSxNQUFNLEVBQUU7Z0JBQzNCLE1BQU0sSUFBSW1GLE1BQU07WUFDbEI7WUFFQSxJQUFJO2dCQUNGLE1BQU1qQyxNQUFNO29CQUFDO2lCQUFvQztnQkFDakQzRCxRQUFRc0MsR0FBRyxDQUFDLGtDQUFrQ29EO2dCQUM5QyxNQUFNdkIsUUFBUSxJQUFJN0YsMENBQU1BLENBQUNzRixRQUFRLENBQUM4QixjQUFjL0IsS0FBS3RELGdCQUFnQkksTUFBTTtnQkFDM0UsTUFBTStGLEtBQUssTUFBTXJDLE1BQU10RixRQUFRLENBQUNQLDBDQUFNQSxDQUFDc0IsVUFBVSxDQUFDMkY7Z0JBQ2xELE1BQU1pQixHQUFHc0QsSUFBSTtnQkFDYjlKLFFBQVFzQyxHQUFHLENBQUMsMkJBQTJCaUQ7Z0JBQ3ZDLE9BQU87b0JBQUVVLFFBQVE7b0JBQUtDLFNBQVM7b0JBQTBCTyxNQUFNRCxHQUFHQyxJQUFJO2dCQUFDO1lBQ3pFLEVBQUUsT0FBTzFHLE9BQU87Z0JBQ2RELFlBQVlDO2dCQUNaLE9BQU87b0JBQUVrRyxRQUFRO29CQUFLQyxTQUFTbkcsTUFBTW1HLE9BQU8sSUFBSW5HLE1BQU1vRyxNQUFNO2dCQUFDO1lBQy9EO1FBQ0Y7K0NBQUc7UUFBQzlGLGdCQUFnQkksTUFBTTtLQUFDO0lBRTNCLGtFQUFrRTtJQUNsRSxNQUFNeUosaUJBQWlCL0wsa0RBQVdBO2lEQUFDLE9BQU91SCxjQUFjK0Q7WUFDdEQsSUFBSSxDQUFDcEosZ0JBQWdCSSxNQUFNLEVBQUU7Z0JBQzNCLE1BQU0sSUFBSW1GLE1BQU07WUFDbEI7WUFFQSxJQUFJO2dCQUNGLE1BQU1qQyxNQUFNO29CQUFDO2lCQUE2QjtnQkFDMUMzRCxRQUFRc0MsR0FBRyxDQUFDLG1DQUFtQ29EO2dCQUMvQyxNQUFNdkIsUUFBUSxJQUFJN0YsMENBQU1BLENBQUNzRixRQUFRLENBQUM4QixjQUFjL0IsS0FBS3RELGdCQUFnQkksTUFBTTtnQkFDM0UsTUFBTStGLEtBQUssTUFBTXJDLE1BQU1nRyxPQUFPLENBQUM7b0JBQUVOLE9BQU92TCwwQ0FBTUEsQ0FBQ3NCLFVBQVUsQ0FBQzZKO2dCQUFXO2dCQUNyRSxNQUFNakQsR0FBR3NELElBQUk7Z0JBQ2I5SixRQUFRc0MsR0FBRyxDQUFDLDJCQUEyQm1IO2dCQUN2QyxPQUFPO29CQUFFeEQsUUFBUTtvQkFBS0MsU0FBUztvQkFBeUJPLE1BQU1ELEdBQUdDLElBQUk7Z0JBQUM7WUFDeEUsRUFBRSxPQUFPMUcsT0FBTztnQkFDZEQsWUFBWUM7Z0JBQ1osT0FBTztvQkFBRWtHLFFBQVE7b0JBQUtDLFNBQVNuRyxNQUFNbUcsT0FBTyxJQUFJbkcsTUFBTW9HLE1BQU07Z0JBQUM7WUFDL0Q7UUFDRjtnREFBRztRQUFDOUYsZ0JBQWdCSSxNQUFNO0tBQUM7SUFFM0IsbUJBQW1CO0lBQ25CLE1BQU0ySixVQUFVak0sa0RBQVdBOzBDQUFDO1lBQzFCLElBQUk7Z0JBQ0YsTUFBTTRGLFFBQVFDLEdBQUcsQ0FBQztvQkFDaEJIO29CQUNBNEQ7b0JBQ0FlO29CQUNBTTtvQkFDQTlCO2lCQUNEO2dCQUNEaEgsUUFBUXNDLEdBQUcsQ0FBQztZQUNkLEVBQUUsT0FBT3ZDLE9BQU87Z0JBQ2RELFlBQVlDO1lBQ2Q7UUFDRjt5Q0FBRztRQUFDOEQ7UUFBZTREO1FBQWlCZTtRQUFnQk07UUFBbUI5QjtLQUFlO0lBRXRGLDRCQUE0QjtJQUM1QixNQUFNcUQsa0JBQWtCbE0sa0RBQVdBO2tEQUFDLE9BQU84RztZQUN6QyxJQUFJLENBQUM1RSxnQkFBZ0JJLE1BQU0sRUFBRTtnQkFDM0IsTUFBTSxJQUFJbUYsTUFBTTtZQUNsQjtZQUVBLElBQUk7Z0JBQ0YsTUFBTWpDLE1BQU07b0JBQUM7aUJBQXVDO2dCQUNwRCxNQUFNdUQsT0FBTyxJQUFJNUksMENBQU1BLENBQUNzRixRQUFRLENBQUNyRixxREFBTUEsQ0FBQ3lILFlBQVksRUFBRXJDLEtBQUt0RCxnQkFBZ0JJLE1BQU07Z0JBQ2pGLE1BQU0rRixLQUFLLE1BQU1VLEtBQUtvRCxZQUFZLENBQUNyRjtnQkFDbkMsTUFBTXVCLEdBQUdzRCxJQUFJO2dCQUNiOUosUUFBUXNDLEdBQUcsQ0FBQyxnQ0FBZ0MyQztnQkFDNUMsT0FBTztvQkFBRWdCLFFBQVE7b0JBQUtDLFNBQVM7Z0JBQTRCO1lBQzdELEVBQUUsT0FBT25HLE9BQU87Z0JBQ2RELFlBQVlDO2dCQUNaLE9BQU87b0JBQUVrRyxRQUFRO29CQUFLQyxTQUFTbkcsTUFBTW1HLE9BQU8sSUFBSW5HLE1BQU1vRyxNQUFNO2dCQUFDO1lBQy9EO1FBQ0Y7aURBQUc7UUFBQzlGLGdCQUFnQkksTUFBTTtLQUFDO0lBRTNCLG1DQUFtQztJQUNuQyxNQUFNOEosK0JBQStCcE0sa0RBQVdBOytEQUFDO1lBQy9DLElBQUk7Z0JBQ0YsSUFBSSxDQUFDa0MsZ0JBQWdCRSxRQUFRLElBQUksQ0FBQ0YsZ0JBQWdCSyxjQUFjLEVBQUUsT0FBTztnQkFFekUsTUFBTWlELE1BQU07b0JBQ1Y7aUJBQ0Q7Z0JBQ0QsTUFBTXVELE9BQU8sSUFBSTVJLDBDQUFNQSxDQUFDc0YsUUFBUSxDQUFDckYscURBQU1BLENBQUN5SCxZQUFZLEVBQUVyQyxLQUFLdEQsZ0JBQWdCRSxRQUFRO2dCQUNuRixNQUFNaUssWUFBWSxNQUFNdEQsS0FBS3VELGlDQUFpQyxDQUFDcEssZ0JBQWdCSyxjQUFjLEVBQUU7Z0JBQy9GLE9BQU84QyxPQUFPbEYsMENBQU1BLENBQUMrRyxXQUFXLENBQUNtRixXQUFXO1lBQzlDLEVBQUUsT0FBT3pLLE9BQU87Z0JBQ2RELFlBQVlDO2dCQUNaLE9BQU87WUFDVDtRQUNGOzhEQUFHO1FBQUNNLGdCQUFnQkUsUUFBUTtRQUFFRixnQkFBZ0JLLGNBQWM7S0FBQztJQUU3RCw0QkFBNEI7SUFDNUIsTUFBTWdLLHdCQUF3QnZNLGtEQUFXQTt3REFBQyxPQUFPZ0csT0FBT29CO1lBQ3RELElBQUk7Z0JBQ0YsSUFBSSxDQUFDbEYsZ0JBQWdCRSxRQUFRLEVBQUUsT0FBTztnQkFFdEMsTUFBTW9ELE1BQU07b0JBQ1Y7aUJBQ0Q7Z0JBQ0QsTUFBTWdILFNBQVMsSUFBSXJNLDBDQUFNQSxDQUFDc0YsUUFBUSxDQUFDckYscURBQU1BLENBQUM0RyxZQUFZLEVBQUV4QixLQUFLdEQsZ0JBQWdCRSxRQUFRO2dCQUNyRixNQUFNcUssU0FBUyxNQUFNRCxPQUFPRCxxQkFBcUIsQ0FBQ3ZHLE9BQU83RiwwQ0FBTUEsQ0FBQ2lJLFVBQVUsQ0FBQ2hCLE9BQU8xRixRQUFRLElBQUk7Z0JBQzlGLE9BQU8yRCxPQUFPbEYsMENBQU1BLENBQUMrRyxXQUFXLENBQUN1RixRQUFRO1lBQzNDLEVBQUUsT0FBTzdLLE9BQU87Z0JBQ2RELFlBQVlDO2dCQUNaLE9BQU87WUFDVDtRQUNGO3VEQUFHO1FBQUNNLGdCQUFnQkUsUUFBUTtLQUFDO0lBRTdCLDBDQUEwQztJQUMxQyxNQUFNc0ssMEJBQTBCMU0sa0RBQVdBOzBEQUFDLE9BQU8yRjtZQUNqRCxNQUFNZ0gsYUFBYSxFQUFFO1lBQ3JCLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJakgsT0FBT1IsTUFBTSxFQUFFeUgsSUFBSztnQkFDdEMsTUFBTTVHLFFBQVFMLE1BQU0sQ0FBQ2lILEVBQUUsQ0FBQzVHLEtBQUs7Z0JBQzdCLElBQUk2RyxVQUFVbEgsTUFBTSxDQUFDaUgsRUFBRSxDQUFDRSxPQUFPO2dCQUUvQixNQUFNekYsY0FBYyxNQUFNRixlQUFlbkIsT0FBTzZHO2dCQUNoREEsVUFBVXhILE9BQU9NLE1BQU0sQ0FBQ2lILEVBQUUsQ0FBQ0UsT0FBTyxJQUFJO2dCQUV0QyxNQUFNQyxrQkFBa0IsTUFBTVg7Z0JBQzlCLE1BQU1LLFNBQVMsTUFBTUYsc0JBQXNCdkcsT0FBTytHO2dCQUNsRCxNQUFNQyxNQUFNSCxXQUFXSixTQUFTSSxVQUFVSjtnQkFFMUNFLFdBQVdNLElBQUksQ0FBQztvQkFDZGpILE9BQU9MLE1BQU0sQ0FBQ2lILEVBQUUsQ0FBQzVHLEtBQUs7b0JBQ3RCQyxTQUFTNEc7b0JBQ1R6QyxLQUFLL0UsT0FBT00sTUFBTSxDQUFDaUgsRUFBRSxDQUFDTSxPQUFPO29CQUM3QkMsY0FBYzlGO29CQUNkK0YsV0FBV0o7Z0JBQ2I7WUFDRjtZQUNBLE9BQU9MO1FBQ1Q7eURBQUc7UUFBQ3hGO1FBQWdCaUY7UUFBOEJHO0tBQXNCO0lBRXhFLDBDQUEwQztJQUMxQyxNQUFNYywwQkFBMEJyTixrREFBV0E7MERBQUMsT0FBTzJGO1lBQ2pELE1BQU0ySCxjQUFjLEVBQUU7WUFDdEIsSUFBSyxJQUFJVixJQUFJLEdBQUdBLElBQUlqSCxPQUFPUixNQUFNLEVBQUV5SCxJQUFLO2dCQUN0QyxNQUFNNUcsUUFBUUwsTUFBTSxDQUFDaUgsRUFBRSxDQUFDNUcsS0FBSztnQkFDN0IsTUFBTXVILFlBQVk1SCxNQUFNLENBQUNpSCxFQUFFLENBQUNXLFNBQVM7Z0JBQ3JDLE1BQU1DLFlBQVk3SCxNQUFNLENBQUNpSCxFQUFFLENBQUNZLFNBQVM7Z0JBQ3JDLE1BQU1uRyxjQUFjLE1BQU1GLGVBQWVuQixPQUFPdUg7Z0JBRWhERCxZQUFZTCxJQUFJLENBQUM7b0JBQ2ZqSCxPQUFPQTtvQkFDUHVILFdBQVdsSSxPQUFPa0k7b0JBQ2xCQyxXQUFXbkksT0FBT21JO29CQUNsQkMsa0JBQWtCcEc7Z0JBQ3BCO1lBQ0Y7WUFDQSxPQUFPaUc7UUFDVDt5REFBRztRQUFDbkc7S0FBZTtJQUVuQiwyQ0FBMkM7SUFDM0MsTUFBTXVHLHlCQUF5QjFOLGtEQUFXQTt5REFBQyxDQUFDMkY7WUFDMUMsTUFBTWdJLFNBQVN2TixxREFBTUEsQ0FBQzBGLE1BQU0sQ0FDekIwRCxNQUFNO3dFQUFDLENBQUNvRTtvQkFDUCxPQUFPakksT0FBT2tJLElBQUk7Z0ZBQUMsQ0FBQ0M7NEJBQ2xCLE9BQU9GLFVBQVVySSxPQUFPLENBQUNxQyxXQUFXLE9BQU9rRyxVQUFVOUgsS0FBSyxDQUFDNEIsV0FBVzt3QkFDeEU7O2dCQUNGO3VFQUNDN0IsR0FBRzt3RUFBQyxDQUFDZ0ksV0FBYzt3QkFDbEIsR0FBR3BJLE9BQU8rQixJQUFJO29GQUFDLENBQUNzRyxPQUFTQSxLQUFLaEksS0FBSyxDQUFDNEIsV0FBVyxPQUFPbUcsU0FBU3hJLE9BQU8sQ0FBQ3FDLFdBQVc7a0ZBQUc7d0JBQ3JGLEdBQUdtRyxRQUFRO29CQUNiOztZQUNGLE9BQU9KO1FBQ1Q7d0RBQUcsRUFBRTtJQUVMLGdCQUFnQjtJQUNoQixNQUFNTSxlQUFlaE8sOENBQU9BOzJDQUFDLElBQU87Z0JBQ2xDLFFBQVE7Z0JBQ1JpQztnQkFDQU87Z0JBQ0FFO2dCQUNBRTtnQkFDQUU7Z0JBQ0FNO2dCQUNBSztnQkFDQUc7Z0JBQ0FaO2dCQUVBLG1CQUFtQjtnQkFDbkJpQjtnQkFDQStIO2dCQUVBLGtCQUFrQjtnQkFDbEJ2RztnQkFDQTREO2dCQUNBZTtnQkFDQU07Z0JBRUEsd0JBQXdCO2dCQUN4QnJEO2dCQUNBVztnQkFDQU07Z0JBQ0FFO2dCQUNBRTtnQkFFQSxvQkFBb0I7Z0JBQ3BCckQ7Z0JBQ0FtQjtnQkFDQVU7Z0JBQ0E1RjtnQkFDQUk7Z0JBRUEscUJBQXFCO2dCQUNyQjBKO2dCQUNBTztnQkFFQSxvQkFBb0I7Z0JBQ3BCL0M7Z0JBQ0F1RDtnQkFDQUc7Z0JBRUEsNEJBQTRCO2dCQUM1Qkc7Z0JBQ0FXO2dCQUNBSztnQkFFQSxxQkFBcUI7Z0JBQ3JCeEI7Z0JBRUEsbUNBQW1DO2dCQUNuQ0o7Z0JBQ0FDO1lBQ0Y7MENBQUk7UUFDRjdKO1FBQ0FPO1FBQ0FFO1FBQ0FFO1FBQ0FFO1FBQ0FNO1FBQ0FLO1FBQ0FHO1FBQ0FaO1FBQ0FpQjtRQUNBK0g7UUFDQXZHO1FBQ0E0RDtRQUNBZTtRQUNBTTtRQUNBckQ7UUFDQVc7UUFDQU07UUFDQUU7UUFDQUU7UUFDQXJEO1FBQ0FtQjtRQUNBVTtRQUNBa0U7UUFDQU87UUFDQS9DO1FBQ0F1RDtRQUNBRztRQUNBRztRQUNBVztRQUNBSztRQUNBeEI7S0FDRDtJQUVELHFCQUNFLDhEQUFDaE0sNkRBQW9CO1FBQUN3TCxPQUFPdUM7a0JBQzFCaE0sTUFBTWtNLFFBQVE7Ozs7OztBQUdyQjtHQW4zQk1uTTtLQUFBQTtBQXEzQk4saUVBQWVBLFNBQVNBLEVBQUMiLCJzb3VyY2VzIjpbIkQ6XFxEb19hbjJcXGxlbmRodWJfdjJcXGxlbmRodWItZnJvbnRlbmQtbmV4dGpzXFxzcmNcXGNvbnRleHRcXExlbmRTdGF0ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUNhbGxiYWNrLCB1c2VNZW1vIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgbGVuZENvbnRleHQgZnJvbSBcIi4vbGVuZENvbnRleHRcIjtcbmltcG9ydCB7IGV0aGVycyB9IGZyb20gXCJldGhlcnNcIjtcbmltcG9ydCB7IENPTkZJRyB9IGZyb20gXCIuLi9jb25maWcvY29udHJhY3RzXCI7XG5pbXBvcnQgeyBnZXRUb2tlbkJhbGFuY2UsIGdldFRva2VuQWxsb3dhbmNlLCBhcHByb3ZlSWZOZWVkZWQsIGxlbmQgYXMgbGVuZFR4LCB3aXRoZHJhdyBhcyB3aXRoZHJhd1R4LCBib3Jyb3cgYXMgYm9ycm93VHgsIHJlcGF5IGFzIHJlcGF5VHggfSBmcm9tIFwiLi4vbGliL3R4XCI7XG5pbXBvcnQgeyBFVEhBZGRyZXNzLCBMZW5kaW5nUG9vbEFkZHJlc3MsIExlbmRpbmdIZWxwZXJBZGRyZXNzLCBXRVRIQWRkcmVzcyB9IGZyb20gXCIuLi9hZGRyZXNzZXNcIjtcbmltcG9ydCB7IFRva2VuQUJJLCBMZW5kaW5nUG9vbEFCSSwgTGVuZGluZ0hlbHBlckFCSSB9IGZyb20gXCIuLi9hYmlzXCI7XG5cbi8vIFV0aWxpdHkgZnVuY3Rpb25zXG5jb25zdCBudW1iZXJUb0V0aGVycyA9IChudW1iZXIpID0+IHtcbiAgcmV0dXJuIGV0aGVycy5wYXJzZUV0aGVyKG51bWJlci50b1N0cmluZygpKTtcbn07XG5cbmNvbnN0IHJlcG9ydEVycm9yID0gKGVycm9yKSA9PiB7XG4gIGNvbnNvbGUuZXJyb3IoXCJMZW5kU3RhdGUgRXJyb3I6XCIsIEpTT04uc3RyaW5naWZ5KGVycm9yKSk7XG4gIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBkZXRhaWxzOlwiLCBlcnJvcik7XG59O1xuXG5jb25zdCBMZW5kU3RhdGUgPSAocHJvcHMpID0+IHtcbiAgLy8qIERlY2xhcmluZyBhbGwgdGhlIHN0YXRlc1xuXG4gIC8vIFNldCBtZXRhbWFzayBkZXRhaWxzXG4gIGNvbnN0IFttZXRhbWFza0RldGFpbHMsIHNldE1ldGFtYXNrRGV0YWlsc10gPSB1c2VTdGF0ZSh7XG4gICAgcHJvdmlkZXI6IG51bGwsXG4gICAgbmV0d29ya05hbWU6IG51bGwsXG4gICAgc2lnbmVyOiBudWxsLFxuICAgIGN1cnJlbnRBY2NvdW50OiBudWxsLFxuICAgIGNoYWluSWQ6IG51bGwsXG4gIH0pO1xuXG4gIC8vIFVzZXIgYXNzZXRzIGFuZCBiYWxhbmNlc1xuICBjb25zdCBbdXNlckFzc2V0cywgc2V0VXNlckFzc2V0c10gPSB1c2VTdGF0ZShbXSk7XG4gIGNvbnN0IFtzdXBwbHlBc3NldHMsIHNldFN1cHBseUFzc2V0c10gPSB1c2VTdGF0ZShbXSk7XG4gIGNvbnN0IFthc3NldHNUb0JvcnJvdywgc2V0QXNzZXRzVG9Cb3Jyb3ddID0gdXNlU3RhdGUoW10pO1xuICBjb25zdCBbeW91ckJvcnJvd3MsIHNldFlvdXJCb3Jyb3dzXSA9IHVzZVN0YXRlKFtdKTtcblxuICAvLyBDb250cmFjdCBkZXRhaWxzXG4gIGNvbnN0IFtjb250cmFjdCwgc2V0Q29udHJhY3RdID0gdXNlU3RhdGUoe1xuICAgIGxlbmRpbmdQb29sQ29udHJhY3Q6IG51bGwsXG4gICAgb3JhY2xlQ29udHJhY3Q6IG51bGwsXG4gIH0pO1xuXG4gIC8vIFN1bW1hcnkgZGF0YVxuICBjb25zdCBbc3VwcGx5U3VtbWFyeSwgc2V0U3VwcGx5U3VtbWFyeV0gPSB1c2VTdGF0ZSh7XG4gICAgdG90YWxVU0RCYWxhbmNlOiAwLFxuICAgIHdlaWdodGVkQXZnQVBZOiAwLFxuICAgIHRvdGFsVVNEQ29sbGF0ZXJhbDogMCxcbiAgfSk7XG5cbiAgY29uc3QgW2JvcnJvd1N1bW1hcnksIHNldEJvcnJvd1N1bW1hcnldID0gdXNlU3RhdGUoe1xuICAgIHRvdGFsVVNEQmFsYW5jZTogMCxcbiAgICB3ZWlnaHRlZEF2Z0FQWTogMCxcbiAgICB0b3RhbEJvcnJvd1Bvd2VyVXNlZDogMCxcbiAgfSk7XG5cbiAgLy8gQWNjb3VudCBkYXRhXG4gIGNvbnN0IFthY2NvdW50RGF0YSwgc2V0QWNjb3VudERhdGFdID0gdXNlU3RhdGUoe1xuICAgIGNvbGxhdGVyYWxVU0Q6IFwiMFwiLFxuICAgIGRlYnRVU0Q6IFwiMFwiLFxuICAgIGhlYWx0aEZhY3RvcjogXCIwXCIsXG4gIH0pO1xuXG4gIC8vIENvbm5lY3Qgd2FsbGV0XG4gIC8vIGNvbnN0IGNvbm5lY3RXYWxsZXQgPSB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XG4gIC8vICAgY29uc29sZS5sb2coXCIxLiBDb25uZWN0aW5nIHRvIHdhbGxldC4uLlwiKTtcbiAgLy8gICBjb25zdCB7IGV0aGVyZXVtIH0gPSB3aW5kb3c7XG4gIC8vICAgY29uc3QgZmFpbE1lc3NhZ2UgPSBcIlBsZWFzZSBpbnN0YWxsIE1ldGFtYXNrICYgY29ubmVjdCB5b3VyIE1ldGFtYXNrXCI7XG4gICAgXG4gIC8vICAgdHJ5IHtcbiAgLy8gICAgIGlmICghZXRoZXJldW0pIHtcbiAgLy8gICAgICAgYWxlcnQoZmFpbE1lc3NhZ2UpO1xuICAvLyAgICAgICByZXR1cm47XG4gIC8vICAgICB9XG5cbiAgLy8gICAgIGNvbnN0IGFjY291bnRzID0gYXdhaXQgZXRoZXJldW0ucmVxdWVzdCh7XG4gIC8vICAgICAgIG1ldGhvZDogXCJldGhfcmVxdWVzdEFjY291bnRzXCIsXG4gIC8vICAgICB9KTtcblxuICAvLyAgICAgLy8gTGlzdGVuIGZvciBhY2NvdW50IGFuZCBjaGFpbiBjaGFuZ2VzXG4gIC8vICAgICBldGhlcmV1bS5vbihcImNoYWluQ2hhbmdlZFwiLCAoKSA9PiB7XG4gIC8vICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgLy8gICAgIH0pO1xuICAvLyAgICAgZXRoZXJldW0ub24oXCJhY2NvdW50c0NoYW5nZWRcIiwgKCkgPT4ge1xuICAvLyAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gIC8vICAgICB9KTtcblxuICAvLyAgICAgY29uc3QgcHJvdmlkZXIgPSBuZXcgZXRoZXJzLkJyb3dzZXJQcm92aWRlcihldGhlcmV1bSk7XG4gIC8vICAgICBjb25zdCBuZXR3b3JrID0gYXdhaXQgcHJvdmlkZXIuZ2V0TmV0d29yaygpO1xuICAvLyAgICAgY29uc3QgbmV0d29ya05hbWUgPSBuZXR3b3JrLm5hbWU7XG4gIC8vICAgICBjb25zdCBzaWduZXIgPSBhd2FpdCBwcm92aWRlci5nZXRTaWduZXIoKTtcblxuICAvLyAgICAgaWYgKGFjY291bnRzLmxlbmd0aCkge1xuICAvLyAgICAgICBsZXQgY3VycmVudEFkZHJlc3MgPSBhY2NvdW50c1swXTtcbiAgLy8gICAgICAgc2V0TWV0YW1hc2tEZXRhaWxzKHtcbiAgLy8gICAgICAgICBwcm92aWRlcjogcHJvdmlkZXIsXG4gIC8vICAgICAgICAgbmV0d29ya05hbWU6IG5ldHdvcmtOYW1lLFxuICAvLyAgICAgICAgIHNpZ25lcjogc2lnbmVyLFxuICAvLyAgICAgICAgIGN1cnJlbnRBY2NvdW50OiBjdXJyZW50QWRkcmVzcyxcbiAgLy8gICAgICAgICBjaGFpbklkOiBOdW1iZXIobmV0d29yay5jaGFpbklkKSxcbiAgLy8gICAgICAgfSk7XG4gIC8vICAgICAgIGNvbnNvbGUubG9nKFwiQ29ubmVjdGVkIHRvIHdhbGxldDpcIiwgY3VycmVudEFkZHJlc3MpO1xuICAvLyAgICAgfSBlbHNlIHtcbiAgLy8gICAgICAgYWxlcnQoZmFpbE1lc3NhZ2UpO1xuICAvLyAgICAgICByZXR1cm47XG4gIC8vICAgICB9XG4gIC8vICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgLy8gICAgIHJlcG9ydEVycm9yKGVycm9yKTtcbiAgLy8gICB9XG4gIC8vIH0sIFtdKTtcblxuICBjb25zdCBjb25uZWN0V2FsbGV0ID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKFwiMS4gQ29ubmVjdGluZyB0byB3YWxsZXQuLi5cIik7XG4gICAgY29uc3QgeyBldGhlcmV1bSB9ID0gd2luZG93O1xuICAgIGNvbnN0IGZhaWxNZXNzYWdlID0gXCJQbGVhc2UgaW5zdGFsbCBNZXRhbWFzayAmIGNvbm5lY3QgeW91ciBNZXRhbWFza1wiO1xuICAgIHRyeSB7XG4gICAgICBpZiAoIWV0aGVyZXVtKSB7XG4gICAgICAgIGFsZXJ0KGZhaWxNZXNzYWdlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBhY2NvdW50cyA9IGF3YWl0IGV0aGVyZXVtLnJlcXVlc3QoeyBtZXRob2Q6IFwiZXRoX3JlcXVlc3RBY2NvdW50c1wiIH0pO1xuXG4gICAgICAvLyBMaXN0ZW4gZm9yIGFjY291bnQgYW5kIGNoYWluIGNoYW5nZXNcbiAgICAgIGV0aGVyZXVtLm9uKFwiY2hhaW5DaGFuZ2VkXCIsICgpID0+IHtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgfSk7XG4gICAgICBldGhlcmV1bS5vbihcImFjY291bnRzQ2hhbmdlZFwiLCAoKSA9PiB7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBwcm92aWRlciA9IG5ldyBldGhlcnMuQnJvd3NlclByb3ZpZGVyKGV0aGVyZXVtKTtcbiAgICAgIGNvbnN0IG5ldHdvcmsgPSBhd2FpdCBwcm92aWRlci5nZXROZXR3b3JrKCk7XG4gICAgICBjb25zdCBuZXR3b3JrTmFtZSA9IG5ldHdvcmsubmFtZTtcbiAgICAgIGNvbnN0IHNpZ25lciA9IGF3YWl0IHByb3ZpZGVyLmdldFNpZ25lcigpO1xuXG4gICAgICBpZiAoYWNjb3VudHMubGVuZ3RoKSB7XG4gICAgICAgIGxldCBjdXJyZW50QWRkcmVzcyA9IGFjY291bnRzWzBdO1xuICAgICAgICBzZXRNZXRhbWFza0RldGFpbHMoe1xuICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlcixcbiAgICAgICAgICBuZXR3b3JrTmFtZTogbmV0d29ya05hbWUsXG4gICAgICAgICAgc2lnbmVyOiBzaWduZXIsXG4gICAgICAgICAgY3VycmVudEFjY291bnQ6IGN1cnJlbnRBZGRyZXNzLFxuICAgICAgICAgIGNoYWluSWQ6IE51bWJlcihuZXR3b3JrLmNoYWluSWQpLFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc29sZS5sb2coXCJDb25uZWN0ZWQgdG8gd2FsbGV0KysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKzpcIiwgY3VycmVudEFkZHJlc3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWxlcnQoZmFpbE1lc3NhZ2UpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJlcG9ydEVycm9yKGVycm9yKTtcbiAgICB9XG4gIH0sIFtdKTtcblxuICAvLyBHZXQgY29udHJhY3QgaW5zdGFuY2VcbiAgY29uc3QgZ2V0Q29udHJhY3QgPSB1c2VDYWxsYmFjayhhc3luYyAoYWRkcmVzcywgYWJpKSA9PiB7XG4gICAgaWYgKCFtZXRhbWFza0RldGFpbHMucHJvdmlkZXIpIHJldHVybiBudWxsO1xuICAgIGNvbnN0IGNvbnRyYWN0ID0gbmV3IGV0aGVycy5Db250cmFjdChhZGRyZXNzLCBhYmksIG1ldGFtYXNrRGV0YWlscy5wcm92aWRlcik7XG4gICAgcmV0dXJuIGNvbnRyYWN0O1xuICB9LCBbbWV0YW1hc2tEZXRhaWxzLnByb3ZpZGVyXSk7XG5cbiAgLy8gR2V0IHVzZXIgYXNzZXRzIChiYWxhbmNlcylcbiAgY29uc3QgZ2V0VXNlckFzc2V0cyA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICBjb25zb2xlLmxvZyhcIjIuIEdldHRpbmcgdXNlciBhc3NldHMuLi5cIik7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghbWV0YW1hc2tEZXRhaWxzLnByb3ZpZGVyIHx8ICFtZXRhbWFza0RldGFpbHMuY3VycmVudEFjY291bnQpIHJldHVybiBbXTtcblxuICAgICAgY29uc3QgYXNzZXRzID0gYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgICAgIENPTkZJRy5UT0tFTlMubWFwKGFzeW5jICh0b2tlbikgPT4ge1xuICAgICAgICAgIGxldCBiYWxhbmNlID0gXCIwXCI7XG4gICAgICAgICAgbGV0IGJhbGFuY2VVU0QgPSAwO1xuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICh0b2tlbi5pc05hdGl2ZSkge1xuICAgICAgICAgICAgICAvLyBFVEggbmF0aXZlIGJhbGFuY2VcbiAgICAgICAgICAgICAgY29uc3QgYmFsID0gYXdhaXQgbWV0YW1hc2tEZXRhaWxzLnByb3ZpZGVyLmdldEJhbGFuY2UobWV0YW1hc2tEZXRhaWxzLmN1cnJlbnRBY2NvdW50KTtcbiAgICAgICAgICAgICAgYmFsYW5jZSA9IGV0aGVycy5mb3JtYXRFdGhlcihiYWwpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gRVJDMjAgdG9rZW4gYmFsYW5jZVxuICAgICAgICAgICAgICBiYWxhbmNlID0gYXdhaXQgZ2V0VG9rZW5CYWxhbmNlKFxuICAgICAgICAgICAgICAgIG1ldGFtYXNrRGV0YWlscy5wcm92aWRlcixcbiAgICAgICAgICAgICAgICB0b2tlbi5hZGRyZXNzLFxuICAgICAgICAgICAgICAgIG1ldGFtYXNrRGV0YWlscy5jdXJyZW50QWNjb3VudCxcbiAgICAgICAgICAgICAgICB0b2tlbi5kZWNpbWFsc1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBHZXQgVVNEIHZhbHVlXG4gICAgICAgICAgICBjb25zdCBwcmljZSA9IGF3YWl0IGdldFByaWNlVVNEKHRva2VuLmFkZHJlc3MpO1xuICAgICAgICAgICAgYmFsYW5jZVVTRCA9IHBhcnNlRmxvYXQoYmFsYW5jZSkgKiBwYXJzZUZsb2F0KHByaWNlKTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgYWRkcmVzczogdG9rZW4uYWRkcmVzcyxcbiAgICAgICAgICAgICAgc3ltYm9sOiB0b2tlbi5zeW1ib2wsXG4gICAgICAgICAgICAgIG5hbWU6IHRva2VuLm5hbWUsXG4gICAgICAgICAgICAgIGRlY2ltYWxzOiB0b2tlbi5kZWNpbWFscyxcbiAgICAgICAgICAgICAgaXNOYXRpdmU6IHRva2VuLmlzTmF0aXZlLFxuICAgICAgICAgICAgICBiYWxhbmNlOiBiYWxhbmNlLFxuICAgICAgICAgICAgICBiYWxhbmNlVVNEOiBiYWxhbmNlVVNELFxuICAgICAgICAgICAgICBwcmljZVVTRDogcHJpY2UsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYEVycm9yIGdldHRpbmcgYmFsYW5jZSBmb3IgJHt0b2tlbi5zeW1ib2x9OmAsIGVycm9yKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIGFkZHJlc3M6IHRva2VuLmFkZHJlc3MsXG4gICAgICAgICAgICAgIHN5bWJvbDogdG9rZW4uc3ltYm9sLFxuICAgICAgICAgICAgICBuYW1lOiB0b2tlbi5uYW1lLFxuICAgICAgICAgICAgICBkZWNpbWFsczogdG9rZW4uZGVjaW1hbHMsXG4gICAgICAgICAgICAgIGlzTmF0aXZlOiB0b2tlbi5pc05hdGl2ZSxcbiAgICAgICAgICAgICAgYmFsYW5jZTogXCIwXCIsXG4gICAgICAgICAgICAgIGJhbGFuY2VVU0Q6IDAsXG4gICAgICAgICAgICAgIHByaWNlVVNEOiBcIjBcIixcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgKTtcblxuICAgICAgc2V0VXNlckFzc2V0cyhhc3NldHMpO1xuICAgICAgY29uc29sZS5sb2coXCJHb3QgdXNlciBhc3NldHM6XCIsIGFzc2V0cyk7XG4gICAgICByZXR1cm4gYXNzZXRzO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXBvcnRFcnJvcihlcnJvcik7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICB9LCBbbWV0YW1hc2tEZXRhaWxzLnByb3ZpZGVyLCBtZXRhbWFza0RldGFpbHMuY3VycmVudEFjY291bnRdKTtcblxuICAvLyBHZXQgcHJpY2UgaW4gVVNEXG4gIGNvbnN0IGdldFByaWNlVVNEID0gdXNlQ2FsbGJhY2soYXN5bmMgKGFzc2V0KSA9PiB7XG4gICAgaWYgKCFtZXRhbWFza0RldGFpbHMucHJvdmlkZXIpIHJldHVybiBcIjBcIjtcbiAgICB0cnkge1xuICAgICAgY29uc3QgYWJpID0gWydmdW5jdGlvbiBnZXRBc3NldFByaWNlMWUxOChhZGRyZXNzIGFzc2V0KSB2aWV3IHJldHVybnMgKHVpbnQyNTYpJ107XG4gICAgICBjb25zdCBvcmFjbGUgPSBuZXcgZXRoZXJzLkNvbnRyYWN0KENPTkZJRy5QUklDRV9PUkFDTEUsIGFiaSwgbWV0YW1hc2tEZXRhaWxzLnByb3ZpZGVyKTtcbiAgICAgIGNvbnN0IHByaWNlID0gYXdhaXQgb3JhY2xlLmdldEFzc2V0UHJpY2UxZTE4KGFzc2V0KTtcbiAgICAgIHJldHVybiBldGhlcnMuZm9ybWF0VW5pdHMocHJpY2UsIDE4KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS53YXJuKGBFcnJvciBnZXR0aW5nIHByaWNlIGZvciAke2Fzc2V0fTpgLCBlcnJvcik7XG4gICAgICByZXR1cm4gXCIwXCI7XG4gICAgfVxuICB9LCBbbWV0YW1hc2tEZXRhaWxzLnByb3ZpZGVyXSk7XG5cbiAgLy8gR2V0IGFtb3VudCBpbiBVU0RcbiAgY29uc3QgZ2V0QW1vdW50SW5VU0QgPSB1c2VDYWxsYmFjayhhc3luYyAoYWRkcmVzcywgYW1vdW50KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHByaWNlID0gYXdhaXQgZ2V0UHJpY2VVU0QoYWRkcmVzcyk7XG4gICAgICBjb25zdCBhbW91bnRJblVTRCA9IHBhcnNlRmxvYXQoYW1vdW50KSAqIHBhcnNlRmxvYXQocHJpY2UpO1xuICAgICAgcmV0dXJuIGFtb3VudEluVVNEO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXBvcnRFcnJvcihlcnJvcik7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gIH0sIFtnZXRQcmljZVVTRF0pO1xuXG4gIC8vIEFwcHJvdmUgdG9rZW5zXG4gIGNvbnN0IEFwcHJvdmVUb0NvbnRpbnVlID0gdXNlQ2FsbGJhY2soYXN5bmMgKHRva2VuQWRkcmVzcywgYXBwcm92ZUFtb3VudCkgPT4ge1xuICAgIGlmICghbWV0YW1hc2tEZXRhaWxzLnNpZ25lcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gc2lnbmVyIGF2YWlsYWJsZVwiKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgdG9rZW4gPSBDT05GSUcuVE9LRU5TLmZpbmQodCA9PiB0LmFkZHJlc3MudG9Mb3dlckNhc2UoKSA9PT0gdG9rZW5BZGRyZXNzLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgaWYgKCF0b2tlbikgdGhyb3cgbmV3IEVycm9yKFwiVG9rZW4gbm90IGZvdW5kXCIpO1xuXG4gICAgICBhd2FpdCBhcHByb3ZlSWZOZWVkZWQoXG4gICAgICAgIG1ldGFtYXNrRGV0YWlscy5zaWduZXIsXG4gICAgICAgIHRva2VuQWRkcmVzcyxcbiAgICAgICAgQ09ORklHLkxFTkRJTkdfUE9PTCxcbiAgICAgICAgYXBwcm92ZUFtb3VudCxcbiAgICAgICAgdG9rZW4uZGVjaW1hbHNcbiAgICAgICk7XG5cbiAgICAgIGNvbnNvbGUubG9nKFwiVG9rZW4gYXBwcm92ZWQ6XCIsIHRva2VuQWRkcmVzcyk7XG4gICAgICByZXR1cm4geyBzdGF0dXM6IDIwMCwgbWVzc2FnZTogXCJUcmFuc2FjdGlvbiBTdWNjZXNzZnVsLi4uXCIgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmVwb3J0RXJyb3IoZXJyb3IpO1xuICAgICAgcmV0dXJuIHsgc3RhdHVzOiA1MDAsIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UgfHwgZXJyb3IucmVhc29uIH07XG4gICAgfVxuICB9LCBbbWV0YW1hc2tEZXRhaWxzLnNpZ25lcl0pO1xuXG4gIC8vIExlbmQgYXNzZXRcbiAgY29uc3QgTGVuZEFzc2V0ID0gdXNlQ2FsbGJhY2soYXN5bmMgKHRva2VuLCBzdXBwbHlBbW91bnQpID0+IHtcbiAgICBpZiAoIW1ldGFtYXNrRGV0YWlscy5zaWduZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHNpZ25lciBhdmFpbGFibGVcIik7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHRva2VuSW5mbyA9IENPTkZJRy5UT0tFTlMuZmluZCh0ID0+IHQuYWRkcmVzcy50b0xvd2VyQ2FzZSgpID09PSB0b2tlbi50b0xvd2VyQ2FzZSgpKTtcbiAgICAgIGlmICghdG9rZW5JbmZvKSB0aHJvdyBuZXcgRXJyb3IoXCJUb2tlbiBub3QgZm91bmRcIik7XG5cbiAgICAgIGNvbnN0IGFtb3VudCA9IGV0aGVycy5wYXJzZVVuaXRzKHN1cHBseUFtb3VudCwgdG9rZW5JbmZvLmRlY2ltYWxzKTtcbiAgICAgIGNvbnN0IHR4ID0gYXdhaXQgbGVuZFR4KG1ldGFtYXNrRGV0YWlscy5zaWduZXIsIHRva2VuLCBhbW91bnQpO1xuICAgICAgXG4gICAgICBpZiAodHgpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJBc3NldCBsZW50IHN1Y2Nlc3NmdWxseTpcIiwgdG9rZW4sIHN1cHBseUFtb3VudCk7XG4gICAgICAgIHJldHVybiB7IHN0YXR1czogMjAwLCBtZXNzYWdlOiBcIlRyYW5zYWN0aW9uIFN1Y2Nlc3NmdWwuLi5cIiwgaGFzaDogdHguaGFzaCB9O1xuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVHJhbnNhY3Rpb24gZmFpbGVkXCIpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXBvcnRFcnJvcihlcnJvcik7XG4gICAgICByZXR1cm4geyBzdGF0dXM6IDUwMCwgbWVzc2FnZTogZXJyb3IubWVzc2FnZSB8fCBlcnJvci5yZWFzb24gfTtcbiAgICB9XG4gIH0sIFttZXRhbWFza0RldGFpbHMuc2lnbmVyXSk7XG5cbiAgLy8gV2l0aGRyYXcgYXNzZXRcbiAgY29uc3QgV2l0aGRyYXdBc3NldCA9IHVzZUNhbGxiYWNrKGFzeW5jICh0b2tlbkFkZHJlc3MsIHdpdGhkcmF3QW1vdW50KSA9PiB7XG4gICAgaWYgKCFtZXRhbWFza0RldGFpbHMuc2lnbmVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBzaWduZXIgYXZhaWxhYmxlXCIpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBjb25zdCB0b2tlbkluZm8gPSBDT05GSUcuVE9LRU5TLmZpbmQodCA9PiB0LmFkZHJlc3MudG9Mb3dlckNhc2UoKSA9PT0gdG9rZW5BZGRyZXNzLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgaWYgKCF0b2tlbkluZm8pIHRocm93IG5ldyBFcnJvcihcIlRva2VuIG5vdCBmb3VuZFwiKTtcblxuICAgICAgY29uc3QgYW1vdW50ID0gZXRoZXJzLnBhcnNlVW5pdHMod2l0aGRyYXdBbW91bnQsIHRva2VuSW5mby5kZWNpbWFscyk7XG4gICAgICBjb25zdCB0eCA9IGF3YWl0IHdpdGhkcmF3VHgobWV0YW1hc2tEZXRhaWxzLnNpZ25lciwgdG9rZW5BZGRyZXNzLCBhbW91bnQpO1xuICAgICAgXG4gICAgICBpZiAodHgpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJBc3NldCB3aXRoZHJhd24gc3VjY2Vzc2Z1bGx5OlwiLCB0b2tlbkFkZHJlc3MsIHdpdGhkcmF3QW1vdW50KTtcbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiAyMDAsIG1lc3NhZ2U6IFwiVHJhbnNhY3Rpb24gU3VjY2Vzc2Z1bC4uLlwiLCBoYXNoOiB0eC5oYXNoIH07XG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUcmFuc2FjdGlvbiBmYWlsZWRcIik7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJlcG9ydEVycm9yKGVycm9yKTtcbiAgICAgIHJldHVybiB7IHN0YXR1czogNTAwLCBtZXNzYWdlOiBlcnJvci5tZXNzYWdlIHx8IGVycm9yLnJlYXNvbiB9O1xuICAgIH1cbiAgfSwgW21ldGFtYXNrRGV0YWlscy5zaWduZXJdKTtcblxuICAvLyBCb3Jyb3cgYXNzZXRcbiAgY29uc3QgYm9ycm93QXNzZXQgPSB1c2VDYWxsYmFjayhhc3luYyAodG9rZW4sIGJvcnJvd0Ftb3VudCkgPT4ge1xuICAgIGlmICghbWV0YW1hc2tEZXRhaWxzLnNpZ25lcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gc2lnbmVyIGF2YWlsYWJsZVwiKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgdG9rZW5JbmZvID0gQ09ORklHLlRPS0VOUy5maW5kKHQgPT4gdC5hZGRyZXNzLnRvTG93ZXJDYXNlKCkgPT09IHRva2VuLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgaWYgKCF0b2tlbkluZm8pIHRocm93IG5ldyBFcnJvcihcIlRva2VuIG5vdCBmb3VuZFwiKTtcblxuICAgICAgY29uc3QgYW1vdW50ID0gZXRoZXJzLnBhcnNlVW5pdHMoYm9ycm93QW1vdW50LCB0b2tlbkluZm8uZGVjaW1hbHMpO1xuICAgICAgY29uc3QgdHggPSBhd2FpdCBib3Jyb3dUeChtZXRhbWFza0RldGFpbHMuc2lnbmVyLCB0b2tlbiwgYW1vdW50KTtcbiAgICAgIFxuICAgICAgaWYgKHR4KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiQXNzZXQgYm9ycm93ZWQgc3VjY2Vzc2Z1bGx5OlwiLCB0b2tlbiwgYm9ycm93QW1vdW50KTtcbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiAyMDAsIG1lc3NhZ2U6IFwiVHJhbnNhY3Rpb24gU3VjY2Vzc2Z1bC4uLlwiLCBoYXNoOiB0eC5oYXNoIH07XG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUcmFuc2FjdGlvbiBmYWlsZWRcIik7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJlcG9ydEVycm9yKGVycm9yKTtcbiAgICAgIHJldHVybiB7IHN0YXR1czogNTAwLCBtZXNzYWdlOiBlcnJvci5tZXNzYWdlIHx8IGVycm9yLnJlYXNvbiB9O1xuICAgIH1cbiAgfSwgW21ldGFtYXNrRGV0YWlscy5zaWduZXJdKTtcblxuICAvLyBSZXBheSBhc3NldFxuICBjb25zdCByZXBheUFzc2V0ID0gdXNlQ2FsbGJhY2soYXN5bmMgKHRva2VuQWRkcmVzcywgcmVwYXlBbW91bnQpID0+IHtcbiAgICBpZiAoIW1ldGFtYXNrRGV0YWlscy5zaWduZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHNpZ25lciBhdmFpbGFibGVcIik7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHRva2VuSW5mbyA9IENPTkZJRy5UT0tFTlMuZmluZCh0ID0+IHQuYWRkcmVzcy50b0xvd2VyQ2FzZSgpID09PSB0b2tlbkFkZHJlc3MudG9Mb3dlckNhc2UoKSk7XG4gICAgICBpZiAoIXRva2VuSW5mbykgdGhyb3cgbmV3IEVycm9yKFwiVG9rZW4gbm90IGZvdW5kXCIpO1xuXG4gICAgICBjb25zdCBhbW91bnQgPSBldGhlcnMucGFyc2VVbml0cyhyZXBheUFtb3VudCwgdG9rZW5JbmZvLmRlY2ltYWxzKTtcbiAgICAgIGNvbnN0IHR4ID0gYXdhaXQgcmVwYXlUeChtZXRhbWFza0RldGFpbHMuc2lnbmVyLCB0b2tlbkFkZHJlc3MsIGFtb3VudCk7XG4gICAgICBcbiAgICAgIGlmICh0eCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkFzc2V0IHJlcGFpZCBzdWNjZXNzZnVsbHk6XCIsIHRva2VuQWRkcmVzcywgcmVwYXlBbW91bnQpO1xuICAgICAgICByZXR1cm4geyBzdGF0dXM6IDIwMCwgbWVzc2FnZTogXCJUcmFuc2FjdGlvbiBTdWNjZXNzZnVsLi4uXCIsIGhhc2g6IHR4Lmhhc2ggfTtcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRyYW5zYWN0aW9uIGZhaWxlZFwiKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmVwb3J0RXJyb3IoZXJyb3IpO1xuICAgICAgcmV0dXJuIHsgc3RhdHVzOiA1MDAsIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UgfHwgZXJyb3IucmVhc29uIH07XG4gICAgfVxuICB9LCBbbWV0YW1hc2tEZXRhaWxzLnNpZ25lcl0pO1xuXG4gIC8vIEdldCBhY2NvdW50IGRhdGEgKGNvbGxhdGVyYWwsIGRlYnQsIGhlYWx0aCBmYWN0b3IpXG4gIGNvbnN0IGdldEFjY291bnREYXRhID0gdXNlQ2FsbGJhY2soYXN5bmMgKHVzZXIpID0+IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFtZXRhbWFza0RldGFpbHMucHJvdmlkZXIpIHJldHVybiBudWxsO1xuXG4gICAgICBjb25zdCBwb29sID0gbmV3IGV0aGVycy5Db250cmFjdChMZW5kaW5nUG9vbEFkZHJlc3MsIExlbmRpbmdQb29sQUJJLmFiaSwgbWV0YW1hc2tEZXRhaWxzLnByb3ZpZGVyKTtcbiAgICAgIGNvbnN0IHdhbGxldCA9IHVzZXIgfHwgbWV0YW1hc2tEZXRhaWxzLmN1cnJlbnRBY2NvdW50IHx8IGV0aGVycy5aZXJvQWRkcmVzcztcbiAgICAgIFxuICAgICAgLy8gQWRkIGVycm9yIGhhbmRsaW5nIGZvciBlbXB0eSByZXNwb25zZVxuICAgICAgbGV0IGNvbCwgZGVidCwgaGY7XG4gICAgICB0cnkge1xuICAgICAgICBbY29sLCBkZWJ0LCBoZl0gPSBhd2FpdCBwb29sLmdldEFjY291bnREYXRhKHdhbGxldCk7XG4gICAgICB9IGNhdGNoIChjb250cmFjdEVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdDb250cmFjdCBnZXRBY2NvdW50RGF0YSBmYWlsZWQsIHVzaW5nIGRlZmF1bHRzOicsIGNvbnRyYWN0RXJyb3IubWVzc2FnZSk7XG4gICAgICAgIC8vIFJldHVybiBkZWZhdWx0IHZhbHVlcyBmb3IgbmV3IHVzZXJzXG4gICAgICAgIGNvbCA9IGV0aGVycy5wYXJzZVVuaXRzKFwiMFwiLCAxOCk7XG4gICAgICAgIGRlYnQgPSBldGhlcnMucGFyc2VVbml0cyhcIjBcIiwgMTgpO1xuICAgICAgICBoZiA9IGV0aGVycy5wYXJzZVVuaXRzKFwiMTE1NzkyMDg5MjM3MzE2MTk1NDIzNTcwOTg1MDA4Njg3OTA3ODUzMjY5OTg0NjY1NjQwNTY0MDM5NDU3LjU4NDAwNzkxMzEyOTYzOTkzNVwiLCAxOCk7IC8vIE1heCB1aW50MjU2XG4gICAgICB9XG4gICAgICBcbiAgICAgIGNvbnN0IGFjY291bnREYXRhID0ge1xuICAgICAgICBjb2xsYXRlcmFsVVNEOiBldGhlcnMuZm9ybWF0VW5pdHMoY29sLCAxOCksXG4gICAgICAgIGRlYnRVU0Q6IGV0aGVycy5mb3JtYXRVbml0cyhkZWJ0LCAxOCksXG4gICAgICAgIGhlYWx0aEZhY3RvcjogZXRoZXJzLmZvcm1hdFVuaXRzKGhmLCAxOClcbiAgICAgIH07XG5cbiAgICAgIHNldEFjY291bnREYXRhKGFjY291bnREYXRhKTtcbiAgICAgIHJldHVybiBhY2NvdW50RGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5sb2coJ2dldEFjY291bnREYXRhIGVycm9yLCB1c2luZyBkZWZhdWx0czonLCBlcnJvci5tZXNzYWdlKTtcbiAgICAgIC8vIFJldHVybiBkZWZhdWx0IHZhbHVlcyBvbiBhbnkgZXJyb3JcbiAgICAgIGNvbnN0IGFjY291bnREYXRhID0ge1xuICAgICAgICBjb2xsYXRlcmFsVVNEOiBcIjBcIixcbiAgICAgICAgZGVidFVTRDogXCIwXCIsIFxuICAgICAgICBoZWFsdGhGYWN0b3I6IFwiMTE1NzkyMDg5MjM3MzE2MTk1NDIzNTcwOTg1MDA4Njg3OTA3ODUzMjY5OTg0NjY1NjQwNTY0MDM5NDU3LjU4NDAwNzkxMzEyOTYzOTkzNVwiXG4gICAgICB9O1xuICAgICAgc2V0QWNjb3VudERhdGEoYWNjb3VudERhdGEpO1xuICAgICAgcmV0dXJuIGFjY291bnREYXRhO1xuICAgIH1cbiAgfSwgW21ldGFtYXNrRGV0YWlscy5wcm92aWRlciwgbWV0YW1hc2tEZXRhaWxzLmN1cnJlbnRBY2NvdW50XSk7XG5cbiAgLy8gR2V0IHlvdXIgc3VwcGxpZXNcbiAgY29uc3QgZ2V0WW91clN1cHBsaWVzID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKFwiMy4gR2V0dGluZyB5b3VyIHN1cHBsaWVzLi4uXCIpO1xuICAgIHRyeSB7XG4gICAgICBpZiAoIW1ldGFtYXNrRGV0YWlscy5wcm92aWRlciB8fCAhbWV0YW1hc2tEZXRhaWxzLmN1cnJlbnRBY2NvdW50KSByZXR1cm4gW107XG5cbiAgICAgIGNvbnN0IGFiaSA9IFtcbiAgICAgICAgJ2Z1bmN0aW9uIGdldFVzZXJSZXNlcnZlKGFkZHJlc3MgdXNlciwgYWRkcmVzcyBhc3NldCkgdmlldyByZXR1cm5zICh0dXBsZSh1aW50MTI4IHByaW5jaXBhbCx1aW50MTI4IGluZGV4KSBzdXBwbHksIHR1cGxlKHVpbnQxMjggcHJpbmNpcGFsLHVpbnQxMjggaW5kZXgpIGJvcnJvdyknXG4gICAgICBdO1xuICAgICAgY29uc3QgcG9vbCA9IG5ldyBldGhlcnMuQ29udHJhY3QoQ09ORklHLkxFTkRJTkdfUE9PTCwgYWJpLCBtZXRhbWFza0RldGFpbHMucHJvdmlkZXIpO1xuXG4gICAgICBjb25zdCBzdXBwbGllcyA9IGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgICBDT05GSUcuVE9LRU5TLmZpbHRlcih0ID0+ICF0LmlzTmF0aXZlKS5tYXAoYXN5bmMgKHRva2VuKSA9PiB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHVzZXJSZXNlcnZlID0gYXdhaXQgcG9vbC5nZXRVc2VyUmVzZXJ2ZShtZXRhbWFza0RldGFpbHMuY3VycmVudEFjY291bnQsIHRva2VuLmFkZHJlc3MpO1xuICAgICAgICAgICAgY29uc3Qgc3VwcGx5UHJpbmNpcGFsID0gZXRoZXJzLmZvcm1hdFVuaXRzKHVzZXJSZXNlcnZlLnN1cHBseS5wcmluY2lwYWwsIDE4KTtcbiAgICAgICAgICAgIGNvbnN0IHN1cHBseUluZGV4ID0gdXNlclJlc2VydmUuc3VwcGx5LmluZGV4LnRvU3RyaW5nKCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChwYXJzZUZsb2F0KHN1cHBseVByaW5jaXBhbCkgPiAwKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHByaWNlID0gYXdhaXQgZ2V0UHJpY2VVU0QodG9rZW4uYWRkcmVzcyk7XG4gICAgICAgICAgICAgIGNvbnN0IGJhbGFuY2VVU0QgPSBwYXJzZUZsb2F0KHN1cHBseVByaW5jaXBhbCkgKiBwYXJzZUZsb2F0KHByaWNlKTtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYWRkcmVzczogdG9rZW4uYWRkcmVzcyxcbiAgICAgICAgICAgICAgICBzeW1ib2w6IHRva2VuLnN5bWJvbCxcbiAgICAgICAgICAgICAgICBuYW1lOiB0b2tlbi5uYW1lLFxuICAgICAgICAgICAgICAgIGRlY2ltYWxzOiB0b2tlbi5kZWNpbWFscyxcbiAgICAgICAgICAgICAgICBzdXBwbHlQcmluY2lwYWw6IHN1cHBseVByaW5jaXBhbCxcbiAgICAgICAgICAgICAgICBzdXBwbHlJbmRleDogc3VwcGx5SW5kZXgsXG4gICAgICAgICAgICAgICAgYmFsYW5jZVVTRDogYmFsYW5jZVVTRCxcbiAgICAgICAgICAgICAgICBwcmljZVVTRDogcHJpY2UsXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGBFcnJvciBnZXR0aW5nIHN1cHBseSBmb3IgJHt0b2tlbi5zeW1ib2x9OmAsIGVycm9yKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHZhbGlkU3VwcGxpZXMgPSBzdXBwbGllcy5maWx0ZXIocyA9PiBzICE9PSBudWxsKTtcbiAgICAgIHNldFN1cHBseUFzc2V0cyh2YWxpZFN1cHBsaWVzKTtcblxuICAgICAgLy8gQ2FsY3VsYXRlIHN1bW1hcnlcbiAgICAgIGNvbnN0IHRvdGFsVVNEQmFsYW5jZSA9IHZhbGlkU3VwcGxpZXMucmVkdWNlKChzdW0sIGFzc2V0KSA9PiBzdW0gKyBhc3NldC5iYWxhbmNlVVNELCAwKTtcbiAgICAgIGNvbnN0IHdlaWdodGVkQXZnQVBZID0gdmFsaWRTdXBwbGllcy5sZW5ndGggPiAwID8gXG4gICAgICAgIHZhbGlkU3VwcGxpZXMucmVkdWNlKChzdW0sIGFzc2V0KSA9PiBzdW0gKyAoYXNzZXQuYXB5IHx8IDApLCAwKSAvIHZhbGlkU3VwcGxpZXMubGVuZ3RoIDogMDtcbiAgICAgIGNvbnN0IHRvdGFsVVNEQ29sbGF0ZXJhbCA9IHZhbGlkU3VwcGxpZXMucmVkdWNlKChzdW0sIGFzc2V0KSA9PiBzdW0gKyBhc3NldC5iYWxhbmNlVVNELCAwKTtcblxuICAgICAgc2V0U3VwcGx5U3VtbWFyeSh7XG4gICAgICAgIHRvdGFsVVNEQmFsYW5jZSxcbiAgICAgICAgd2VpZ2h0ZWRBdmdBUFksXG4gICAgICAgIHRvdGFsVVNEQ29sbGF0ZXJhbCxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zb2xlLmxvZyhcIkdvdCB5b3VyIHN1cHBsaWVzOlwiLCB2YWxpZFN1cHBsaWVzKTtcbiAgICAgIHJldHVybiB2YWxpZFN1cHBsaWVzO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXBvcnRFcnJvcihlcnJvcik7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICB9LCBbbWV0YW1hc2tEZXRhaWxzLnByb3ZpZGVyLCBtZXRhbWFza0RldGFpbHMuY3VycmVudEFjY291bnQsIGdldFByaWNlVVNEXSk7XG5cbiAgLy8gR2V0IHlvdXIgYm9ycm93c1xuICBjb25zdCBnZXRZb3VyQm9ycm93cyA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICBjb25zb2xlLmxvZyhcIjQuIEdldHRpbmcgeW91ciBib3Jyb3dzLi4uXCIpO1xuICAgIHRyeSB7XG4gICAgICBpZiAoIW1ldGFtYXNrRGV0YWlscy5wcm92aWRlciB8fCAhbWV0YW1hc2tEZXRhaWxzLmN1cnJlbnRBY2NvdW50KSByZXR1cm4gW107XG5cbiAgICAgIGNvbnN0IGFiaSA9IFtcbiAgICAgICAgJ2Z1bmN0aW9uIGdldFVzZXJSZXNlcnZlKGFkZHJlc3MgdXNlciwgYWRkcmVzcyBhc3NldCkgdmlldyByZXR1cm5zICh0dXBsZSh1aW50MTI4IHByaW5jaXBhbCx1aW50MTI4IGluZGV4KSBzdXBwbHksIHR1cGxlKHVpbnQxMjggcHJpbmNpcGFsLHVpbnQxMjggaW5kZXgpIGJvcnJvdyknXG4gICAgICBdO1xuICAgICAgY29uc3QgcG9vbCA9IG5ldyBldGhlcnMuQ29udHJhY3QoQ09ORklHLkxFTkRJTkdfUE9PTCwgYWJpLCBtZXRhbWFza0RldGFpbHMucHJvdmlkZXIpO1xuXG4gICAgICBjb25zdCBib3Jyb3dzID0gYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgICAgIENPTkZJRy5UT0tFTlMuZmlsdGVyKHQgPT4gIXQuaXNOYXRpdmUpLm1hcChhc3luYyAodG9rZW4pID0+IHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgdXNlclJlc2VydmUgPSBhd2FpdCBwb29sLmdldFVzZXJSZXNlcnZlKG1ldGFtYXNrRGV0YWlscy5jdXJyZW50QWNjb3VudCwgdG9rZW4uYWRkcmVzcyk7XG4gICAgICAgICAgICBjb25zdCBib3Jyb3dQcmluY2lwYWwgPSBldGhlcnMuZm9ybWF0VW5pdHModXNlclJlc2VydmUuYm9ycm93LnByaW5jaXBhbCwgMTgpO1xuICAgICAgICAgICAgY29uc3QgYm9ycm93SW5kZXggPSB1c2VyUmVzZXJ2ZS5ib3Jyb3cuaW5kZXgudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKHBhcnNlRmxvYXQoYm9ycm93UHJpbmNpcGFsKSA+IDApIHtcbiAgICAgICAgICAgICAgY29uc3QgcHJpY2UgPSBhd2FpdCBnZXRQcmljZVVTRCh0b2tlbi5hZGRyZXNzKTtcbiAgICAgICAgICAgICAgY29uc3QgYmFsYW5jZVVTRCA9IHBhcnNlRmxvYXQoYm9ycm93UHJpbmNpcGFsKSAqIHBhcnNlRmxvYXQocHJpY2UpO1xuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBhZGRyZXNzOiB0b2tlbi5hZGRyZXNzLFxuICAgICAgICAgICAgICAgIHN5bWJvbDogdG9rZW4uc3ltYm9sLFxuICAgICAgICAgICAgICAgIG5hbWU6IHRva2VuLm5hbWUsXG4gICAgICAgICAgICAgICAgZGVjaW1hbHM6IHRva2VuLmRlY2ltYWxzLFxuICAgICAgICAgICAgICAgIGJvcnJvd1ByaW5jaXBhbDogYm9ycm93UHJpbmNpcGFsLFxuICAgICAgICAgICAgICAgIGJvcnJvd0luZGV4OiBib3Jyb3dJbmRleCxcbiAgICAgICAgICAgICAgICBiYWxhbmNlVVNEOiBiYWxhbmNlVVNELFxuICAgICAgICAgICAgICAgIHByaWNlVVNEOiBwcmljZSxcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYEVycm9yIGdldHRpbmcgYm9ycm93IGZvciAke3Rva2VuLnN5bWJvbH06YCwgZXJyb3IpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgKTtcblxuICAgICAgY29uc3QgdmFsaWRCb3Jyb3dzID0gYm9ycm93cy5maWx0ZXIoYiA9PiBiICE9PSBudWxsKTtcbiAgICAgIHNldFlvdXJCb3Jyb3dzKHZhbGlkQm9ycm93cyk7XG5cbiAgICAgIC8vIENhbGN1bGF0ZSBzdW1tYXJ5XG4gICAgICBjb25zdCB0b3RhbFVTREJhbGFuY2UgPSB2YWxpZEJvcnJvd3MucmVkdWNlKChzdW0sIGFzc2V0KSA9PiBzdW0gKyBhc3NldC5iYWxhbmNlVVNELCAwKTtcbiAgICAgIGNvbnN0IHdlaWdodGVkQXZnQVBZID0gdmFsaWRCb3Jyb3dzLmxlbmd0aCA+IDAgPyBcbiAgICAgICAgdmFsaWRCb3Jyb3dzLnJlZHVjZSgoc3VtLCBhc3NldCkgPT4gc3VtICsgKGFzc2V0LmFweSB8fCAwKSwgMCkgLyB2YWxpZEJvcnJvd3MubGVuZ3RoIDogMDtcbiAgICAgIGNvbnN0IHRvdGFsQm9ycm93UG93ZXJVc2VkID0gdG90YWxVU0RCYWxhbmNlO1xuXG4gICAgICBzZXRCb3Jyb3dTdW1tYXJ5KHtcbiAgICAgICAgdG90YWxVU0RCYWxhbmNlLFxuICAgICAgICB3ZWlnaHRlZEF2Z0FQWSxcbiAgICAgICAgdG90YWxCb3Jyb3dQb3dlclVzZWQsXG4gICAgICB9KTtcblxuICAgICAgY29uc29sZS5sb2coXCJHb3QgeW91ciBib3Jyb3dzOlwiLCB2YWxpZEJvcnJvd3MpO1xuICAgICAgcmV0dXJuIHZhbGlkQm9ycm93cztcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmVwb3J0RXJyb3IoZXJyb3IpO1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgfSwgW21ldGFtYXNrRGV0YWlscy5wcm92aWRlciwgbWV0YW1hc2tEZXRhaWxzLmN1cnJlbnRBY2NvdW50LCBnZXRQcmljZVVTRF0pO1xuXG4gIC8vIEdldCBhc3NldHMgdG8gYm9ycm93XG4gIGNvbnN0IGdldEFzc2V0c1RvQm9ycm93ID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKFwiNS4gR2V0dGluZyBhc3NldHMgdG8gYm9ycm93Li4uXCIpO1xuICAgIHRyeSB7XG4gICAgICBpZiAoIW1ldGFtYXNrRGV0YWlscy5wcm92aWRlcikgcmV0dXJuIFtdO1xuXG4gICAgICBjb25zdCBhYmkgPSBbXG4gICAgICAgICdmdW5jdGlvbiByZXNlcnZlcyhhZGRyZXNzKSB2aWV3IHJldHVybnMgKHVpbnQxMjggcmVzZXJ2ZUNhc2gsIHVpbnQxMjggdG90YWxEZWJ0UHJpbmNpcGFsLCB1aW50MTI4IGxpcXVpZGl0eUluZGV4LCB1aW50MTI4IHZhcmlhYmxlQm9ycm93SW5kZXgsIHVpbnQ2NCBsaXF1aWRpdHlSYXRlUmF5UGVyU2VjLCB1aW50NjQgdmFyaWFibGVCb3Jyb3dSYXRlUmF5UGVyU2VjLCB1aW50MTYgcmVzZXJ2ZUZhY3RvckJwcywgdWludDE2IGx0dkJwcywgdWludDE2IGxpcVRocmVzaG9sZEJwcywgdWludDE2IGxpcUJvbnVzQnBzLCB1aW50MTYgY2xvc2VGYWN0b3JCcHMsIHVpbnQ4IGRlY2ltYWxzLCBib29sIGlzQm9ycm93YWJsZSwgdWludDE2IG9wdGltYWxVQnBzLCB1aW50NjQgYmFzZVJhdGVSYXlQZXJTZWMsIHVpbnQ2NCBzbG9wZTFSYXlQZXJTZWMsIHVpbnQ2NCBzbG9wZTJSYXlQZXJTZWMsIHVpbnQ0MCBsYXN0VXBkYXRlKSdcbiAgICAgIF07XG4gICAgICBjb25zdCBwb29sID0gbmV3IGV0aGVycy5Db250cmFjdChDT05GSUcuTEVORElOR19QT09MLCBhYmksIG1ldGFtYXNrRGV0YWlscy5wcm92aWRlcik7XG5cbiAgICAgIGNvbnN0IGFzc2V0cyA9IGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgICBDT05GSUcuVE9LRU5TLmZpbHRlcih0ID0+ICF0LmlzTmF0aXZlKS5tYXAoYXN5bmMgKHRva2VuKSA9PiB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc2VydmUgPSBhd2FpdCBwb29sLnJlc2VydmVzKHRva2VuLmFkZHJlc3MpO1xuICAgICAgICAgICAgY29uc3QgaXNCb3Jyb3dhYmxlID0gQm9vbGVhbihyZXNlcnZlLmlzQm9ycm93YWJsZSk7XG4gICAgICAgICAgICBjb25zdCByZXNlcnZlQ2FzaCA9IGV0aGVycy5mb3JtYXRVbml0cyhyZXNlcnZlLnJlc2VydmVDYXNoLCAxOCk7XG4gICAgICAgICAgICBjb25zdCBwcmljZSA9IGF3YWl0IGdldFByaWNlVVNEKHRva2VuLmFkZHJlc3MpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoaXNCb3Jyb3dhYmxlICYmIHBhcnNlRmxvYXQocmVzZXJ2ZUNhc2gpID4gMCkge1xuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGFkZHJlc3M6IHRva2VuLmFkZHJlc3MsXG4gICAgICAgICAgICAgICAgc3ltYm9sOiB0b2tlbi5zeW1ib2wsXG4gICAgICAgICAgICAgICAgbmFtZTogdG9rZW4ubmFtZSxcbiAgICAgICAgICAgICAgICBkZWNpbWFsczogdG9rZW4uZGVjaW1hbHMsXG4gICAgICAgICAgICAgICAgcmVzZXJ2ZUNhc2g6IHJlc2VydmVDYXNoLFxuICAgICAgICAgICAgICAgIGlzQm9ycm93YWJsZTogaXNCb3Jyb3dhYmxlLFxuICAgICAgICAgICAgICAgIHByaWNlVVNEOiBwcmljZSxcbiAgICAgICAgICAgICAgICBsdHZCcHM6IE51bWJlcihyZXNlcnZlLmx0dkJwcyksXG4gICAgICAgICAgICAgICAgbGlxVGhyZXNob2xkQnBzOiBOdW1iZXIocmVzZXJ2ZS5saXFUaHJlc2hvbGRCcHMpLFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgRXJyb3IgZ2V0dGluZyBib3Jyb3cgYXNzZXQgJHt0b2tlbi5zeW1ib2x9OmAsIGVycm9yKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHZhbGlkQXNzZXRzID0gYXNzZXRzLmZpbHRlcihhID0+IGEgIT09IG51bGwpO1xuICAgICAgc2V0QXNzZXRzVG9Cb3Jyb3codmFsaWRBc3NldHMpO1xuICAgICAgY29uc29sZS5sb2coXCJHb3QgYXNzZXRzIHRvIGJvcnJvdzpcIiwgdmFsaWRBc3NldHMpO1xuICAgICAgcmV0dXJuIHZhbGlkQXNzZXRzO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXBvcnRFcnJvcihlcnJvcik7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICB9LCBbbWV0YW1hc2tEZXRhaWxzLnByb3ZpZGVyLCBnZXRQcmljZVVTRF0pO1xuXG4gIC8vIFdyYXAgRVRIIHRvIFdFVEhcbiAgY29uc3Qgd3JhcEV0aCA9IHVzZUNhbGxiYWNrKGFzeW5jIChhbW91bnRFdGgpID0+IHtcbiAgICBpZiAoIW1ldGFtYXNrRGV0YWlscy5zaWduZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHNpZ25lciBhdmFpbGFibGVcIik7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGRhdGEgPSAnMHhkMGUzMGRiMCc7IC8vIGRlcG9zaXQoKVxuICAgICAgY29uc29sZS5sb2coJ3dyYXBFdGgg4oaSIHVzaW5nIFdFVEggYWRkcmVzczonLCBXRVRIQWRkcmVzcyk7XG4gICAgICBjb25zdCB0eCA9IGF3YWl0IG1ldGFtYXNrRGV0YWlscy5zaWduZXIuc2VuZFRyYW5zYWN0aW9uKHtcbiAgICAgICAgdG86IFdFVEhBZGRyZXNzLFxuICAgICAgICB2YWx1ZTogZXRoZXJzLnBhcnNlRXRoZXIoYW1vdW50RXRoKSxcbiAgICAgICAgZGF0YVxuICAgICAgfSk7XG4gICAgICBhd2FpdCB0eC53YWl0KCk7XG4gICAgICBjb25zb2xlLmxvZyhcIkVUSCB3cmFwcGVkIHRvIFdFVEg6XCIsIGFtb3VudEV0aCk7XG4gICAgICByZXR1cm4geyBzdGF0dXM6IDIwMCwgbWVzc2FnZTogXCJUcmFuc2FjdGlvbiBTdWNjZXNzZnVsLi4uXCIsIGhhc2g6IHR4Lmhhc2ggfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmVwb3J0RXJyb3IoZXJyb3IpO1xuICAgICAgcmV0dXJuIHsgc3RhdHVzOiA1MDAsIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UgfHwgZXJyb3IucmVhc29uIH07XG4gICAgfVxuICB9LCBbbWV0YW1hc2tEZXRhaWxzLnNpZ25lcl0pO1xuXG4gIC8vIFVud3JhcCBXRVRIIHRvIEVUSFxuICBjb25zdCB1bndyYXBXZXRoID0gdXNlQ2FsbGJhY2soYXN5bmMgKGFtb3VudEV0aCkgPT4ge1xuICAgIGlmICghbWV0YW1hc2tEZXRhaWxzLnNpZ25lcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gc2lnbmVyIGF2YWlsYWJsZVwiKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgYWJpID0gWydmdW5jdGlvbiB3aXRoZHJhdyh1aW50MjU2IHdhZCknXTtcbiAgICAgIGNvbnNvbGUubG9nKCd1bndyYXBXZXRoIOKGkiB1c2luZyBXRVRIIGFkZHJlc3M6JywgV0VUSEFkZHJlc3MpO1xuICAgICAgY29uc3Qgd2V0aCA9IG5ldyBldGhlcnMuQ29udHJhY3QoV0VUSEFkZHJlc3MsIGFiaSwgbWV0YW1hc2tEZXRhaWxzLnNpZ25lcik7XG4gICAgICBjb25zdCB0eCA9IGF3YWl0IHdldGgud2l0aGRyYXcoZXRoZXJzLnBhcnNlRXRoZXIoYW1vdW50RXRoKSk7XG4gICAgICBhd2FpdCB0eC53YWl0KCk7XG4gICAgICBjb25zb2xlLmxvZyhcIldFVEggdW53cmFwcGVkIHRvIEVUSDpcIiwgYW1vdW50RXRoKTtcbiAgICAgIHJldHVybiB7IHN0YXR1czogMjAwLCBtZXNzYWdlOiBcIlRyYW5zYWN0aW9uIFN1Y2Nlc3NmdWwuLi5cIiwgaGFzaDogdHguaGFzaCB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXBvcnRFcnJvcihlcnJvcik7XG4gICAgICByZXR1cm4geyBzdGF0dXM6IDUwMCwgbWVzc2FnZTogZXJyb3IubWVzc2FnZSB8fCBlcnJvci5yZWFzb24gfTtcbiAgICB9XG4gIH0sIFttZXRhbWFza0RldGFpbHMuc2lnbmVyXSk7XG5cbiAgLy8gV2l0aGRyYXcgdG9rZW4gdG8gRVRIIChmb3IgYWxsIHRva2VucyB3aXRoIHdpdGhkcmF3IGZ1bmN0aW9uKVxuICBjb25zdCB3aXRoZHJhd1Rva2VuID0gdXNlQ2FsbGJhY2soYXN5bmMgKHRva2VuQWRkcmVzcywgYW1vdW50KSA9PiB7XG4gICAgaWYgKCFtZXRhbWFza0RldGFpbHMuc2lnbmVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBzaWduZXIgYXZhaWxhYmxlXCIpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBjb25zdCBhYmkgPSBbJ2Z1bmN0aW9uIHdpdGhkcmF3KHVpbnQyNTYgYW1vdW50KSddO1xuICAgICAgY29uc29sZS5sb2coJ3dpdGhkcmF3VG9rZW4g4oaSIHVzaW5nIGFkZHJlc3M6JywgdG9rZW5BZGRyZXNzKTtcbiAgICAgIGNvbnN0IHRva2VuID0gbmV3IGV0aGVycy5Db250cmFjdCh0b2tlbkFkZHJlc3MsIGFiaSwgbWV0YW1hc2tEZXRhaWxzLnNpZ25lcik7XG4gICAgICBjb25zdCB0eCA9IGF3YWl0IHRva2VuLndpdGhkcmF3KGV0aGVycy5wYXJzZUV0aGVyKGFtb3VudCkpO1xuICAgICAgYXdhaXQgdHgud2FpdCgpO1xuICAgICAgY29uc29sZS5sb2coXCJUb2tlbiB3aXRoZHJhd24gdG8gRVRIOlwiLCBhbW91bnQpO1xuICAgICAgcmV0dXJuIHsgc3RhdHVzOiAyMDAsIG1lc3NhZ2U6IFwiV2l0aGRyYXcgU3VjY2Vzc2Z1bC4uLlwiLCBoYXNoOiB0eC5oYXNoIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJlcG9ydEVycm9yKGVycm9yKTtcbiAgICAgIHJldHVybiB7IHN0YXR1czogNTAwLCBtZXNzYWdlOiBlcnJvci5tZXNzYWdlIHx8IGVycm9yLnJlYXNvbiB9O1xuICAgIH1cbiAgfSwgW21ldGFtYXNrRGV0YWlscy5zaWduZXJdKTtcblxuICAvLyBEZXBvc2l0IEVUSCB0byBnZXQgdG9rZW4gKGZvciBhbGwgdG9rZW5zIHdpdGggZGVwb3NpdCBmdW5jdGlvbilcbiAgY29uc3QgZGVwb3NpdFRvVG9rZW4gPSB1c2VDYWxsYmFjayhhc3luYyAodG9rZW5BZGRyZXNzLCBhbW91bnRFdGgpID0+IHtcbiAgICBpZiAoIW1ldGFtYXNrRGV0YWlscy5zaWduZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHNpZ25lciBhdmFpbGFibGVcIik7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGFiaSA9IFsnZnVuY3Rpb24gZGVwb3NpdCgpIHBheWFibGUnXTtcbiAgICAgIGNvbnNvbGUubG9nKCdkZXBvc2l0VG9Ub2tlbiDihpIgdXNpbmcgYWRkcmVzczonLCB0b2tlbkFkZHJlc3MpO1xuICAgICAgY29uc3QgdG9rZW4gPSBuZXcgZXRoZXJzLkNvbnRyYWN0KHRva2VuQWRkcmVzcywgYWJpLCBtZXRhbWFza0RldGFpbHMuc2lnbmVyKTtcbiAgICAgIGNvbnN0IHR4ID0gYXdhaXQgdG9rZW4uZGVwb3NpdCh7IHZhbHVlOiBldGhlcnMucGFyc2VFdGhlcihhbW91bnRFdGgpIH0pO1xuICAgICAgYXdhaXQgdHgud2FpdCgpO1xuICAgICAgY29uc29sZS5sb2coXCJFVEggZGVwb3NpdGVkIHRvIHRva2VuOlwiLCBhbW91bnRFdGgpO1xuICAgICAgcmV0dXJuIHsgc3RhdHVzOiAyMDAsIG1lc3NhZ2U6IFwiRGVwb3NpdCBTdWNjZXNzZnVsLi4uXCIsIGhhc2g6IHR4Lmhhc2ggfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmVwb3J0RXJyb3IoZXJyb3IpO1xuICAgICAgcmV0dXJuIHsgc3RhdHVzOiA1MDAsIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UgfHwgZXJyb3IucmVhc29uIH07XG4gICAgfVxuICB9LCBbbWV0YW1hc2tEZXRhaWxzLnNpZ25lcl0pO1xuXG4gIC8vIFJlZnJlc2ggYWxsIGRhdGFcbiAgY29uc3QgcmVmcmVzaCA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICBnZXRVc2VyQXNzZXRzKCksXG4gICAgICAgIGdldFlvdXJTdXBwbGllcygpLFxuICAgICAgICBnZXRZb3VyQm9ycm93cygpLFxuICAgICAgICBnZXRBc3NldHNUb0JvcnJvdygpLFxuICAgICAgICBnZXRBY2NvdW50RGF0YSgpLFxuICAgICAgXSk7XG4gICAgICBjb25zb2xlLmxvZyhcIkFsbCBkYXRhIHJlZnJlc2hlZFwiKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmVwb3J0RXJyb3IoZXJyb3IpO1xuICAgIH1cbiAgfSwgW2dldFVzZXJBc3NldHMsIGdldFlvdXJTdXBwbGllcywgZ2V0WW91ckJvcnJvd3MsIGdldEFzc2V0c1RvQm9ycm93LCBnZXRBY2NvdW50RGF0YV0pO1xuXG4gIC8vIFVwZGF0ZSBpbnRlcmVzdHMgKGFjY3J1ZSlcbiAgY29uc3QgdXBkYXRlSW50ZXJlc3RzID0gdXNlQ2FsbGJhY2soYXN5bmMgKGFzc2V0KSA9PiB7XG4gICAgaWYgKCFtZXRhbWFza0RldGFpbHMuc2lnbmVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBzaWduZXIgYXZhaWxhYmxlXCIpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBjb25zdCBhYmkgPSBbJ2Z1bmN0aW9uIGFjY3J1ZVB1YmxpYyhhZGRyZXNzIGFzc2V0KSddO1xuICAgICAgY29uc3QgcG9vbCA9IG5ldyBldGhlcnMuQ29udHJhY3QoQ09ORklHLkxFTkRJTkdfUE9PTCwgYWJpLCBtZXRhbWFza0RldGFpbHMuc2lnbmVyKTtcbiAgICAgIGNvbnN0IHR4ID0gYXdhaXQgcG9vbC5hY2NydWVQdWJsaWMoYXNzZXQpO1xuICAgICAgYXdhaXQgdHgud2FpdCgpO1xuICAgICAgY29uc29sZS5sb2coXCJJbnRlcmVzdHMgdXBkYXRlZCBmb3IgYXNzZXQ6XCIsIGFzc2V0KTtcbiAgICAgIHJldHVybiB7IHN0YXR1czogMjAwLCBtZXNzYWdlOiBcIlRyYW5zYWN0aW9uIFN1Y2Nlc3NmdWwuLi5cIiB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXBvcnRFcnJvcihlcnJvcik7XG4gICAgICByZXR1cm4geyBzdGF0dXM6IDUwMCwgbWVzc2FnZTogZXJyb3IubWVzc2FnZSB8fCBlcnJvci5yZWFzb24gfTtcbiAgICB9XG4gIH0sIFttZXRhbWFza0RldGFpbHMuc2lnbmVyXSk7XG5cbiAgLy8gR2V0IHVzZXIgdG90YWwgYXZhaWxhYmxlIGJhbGFuY2VcbiAgY29uc3QgZ2V0VXNlclRvdGFsQXZhaWxhYmxlQmFsYW5jZSA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFtZXRhbWFza0RldGFpbHMucHJvdmlkZXIgfHwgIW1ldGFtYXNrRGV0YWlscy5jdXJyZW50QWNjb3VudCkgcmV0dXJuIDA7XG5cbiAgICAgIGNvbnN0IGFiaSA9IFtcbiAgICAgICAgJ2Z1bmN0aW9uIGdldFVzZXJUb3RhbEF2YWlsYWJsZUJhbGFuY2VJblVTRChhZGRyZXNzIHVzZXIsIHVpbnQyNTYgYXNzZXRUeXBlKSB2aWV3IHJldHVybnMgKHVpbnQyNTYpJ1xuICAgICAgXTtcbiAgICAgIGNvbnN0IHBvb2wgPSBuZXcgZXRoZXJzLkNvbnRyYWN0KENPTkZJRy5MRU5ESU5HX1BPT0wsIGFiaSwgbWV0YW1hc2tEZXRhaWxzLnByb3ZpZGVyKTtcbiAgICAgIGNvbnN0IG1heEFtb3VudCA9IGF3YWl0IHBvb2wuZ2V0VXNlclRvdGFsQXZhaWxhYmxlQmFsYW5jZUluVVNEKG1ldGFtYXNrRGV0YWlscy5jdXJyZW50QWNjb3VudCwgMSk7XG4gICAgICByZXR1cm4gTnVtYmVyKGV0aGVycy5mb3JtYXRVbml0cyhtYXhBbW91bnQsIDE4KSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJlcG9ydEVycm9yKGVycm9yKTtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgfSwgW21ldGFtYXNrRGV0YWlscy5wcm92aWRlciwgbWV0YW1hc2tEZXRhaWxzLmN1cnJlbnRBY2NvdW50XSk7XG5cbiAgLy8gR2V0IHRva2VucyBwZXIgVVNEIGFtb3VudFxuICBjb25zdCBnZXRUb2tlbnNQZXJVU0RBbW91bnQgPSB1c2VDYWxsYmFjayhhc3luYyAodG9rZW4sIGFtb3VudCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIW1ldGFtYXNrRGV0YWlscy5wcm92aWRlcikgcmV0dXJuIDA7XG5cbiAgICAgIGNvbnN0IGFiaSA9IFtcbiAgICAgICAgJ2Z1bmN0aW9uIGdldFRva2Vuc1BlclVTREFtb3VudChhZGRyZXNzIHRva2VuLCB1aW50MjU2IGFtb3VudCkgdmlldyByZXR1cm5zICh1aW50MjU2KSdcbiAgICAgIF07XG4gICAgICBjb25zdCBoZWxwZXIgPSBuZXcgZXRoZXJzLkNvbnRyYWN0KENPTkZJRy5QUklDRV9PUkFDTEUsIGFiaSwgbWV0YW1hc2tEZXRhaWxzLnByb3ZpZGVyKTtcbiAgICAgIGNvbnN0IG1heFF0eSA9IGF3YWl0IGhlbHBlci5nZXRUb2tlbnNQZXJVU0RBbW91bnQodG9rZW4sIGV0aGVycy5wYXJzZVVuaXRzKGFtb3VudC50b1N0cmluZygpLCAxOCkpO1xuICAgICAgcmV0dXJuIE51bWJlcihldGhlcnMuZm9ybWF0VW5pdHMobWF4UXR5LCAxOCkpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXBvcnRFcnJvcihlcnJvcik7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gIH0sIFttZXRhbWFza0RldGFpbHMucHJvdmlkZXJdKTtcblxuICAvLyBPYmplY3RpZnkgc3VwcGxpZWQgYXNzZXRzIChmb3JtYXQgZGF0YSlcbiAgY29uc3Qgb2JqZWN0aWZ5U3VwcGxpZWRBc3NldHMgPSB1c2VDYWxsYmFjayhhc3luYyAoYXNzZXRzKSA9PiB7XG4gICAgY29uc3QgYXNzZXRzTGlzdCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXNzZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCB0b2tlbiA9IGFzc2V0c1tpXS50b2tlbjtcbiAgICAgIGxldCBsZW5kUXR5ID0gYXNzZXRzW2ldLmxlbnRRdHk7XG5cbiAgICAgIGNvbnN0IGFtb3VudEluVVNEID0gYXdhaXQgZ2V0QW1vdW50SW5VU0QodG9rZW4sIGxlbmRRdHkpO1xuICAgICAgbGVuZFF0eSA9IE51bWJlcihhc3NldHNbaV0ubGVudFF0eSkgLyAxZTE4O1xuXG4gICAgICBjb25zdCBtYXhTdXBwbHlBbW91bnQgPSBhd2FpdCBnZXRVc2VyVG90YWxBdmFpbGFibGVCYWxhbmNlKCk7XG4gICAgICBjb25zdCBtYXhRdHkgPSBhd2FpdCBnZXRUb2tlbnNQZXJVU0RBbW91bnQodG9rZW4sIG1heFN1cHBseUFtb3VudCk7XG4gICAgICBjb25zdCBxdHkgPSBsZW5kUXR5IDw9IG1heFF0eSA/IGxlbmRRdHkgOiBtYXhRdHk7XG5cbiAgICAgIGFzc2V0c0xpc3QucHVzaCh7XG4gICAgICAgIHRva2VuOiBhc3NldHNbaV0udG9rZW4sXG4gICAgICAgIGJhbGFuY2U6IGxlbmRRdHksXG4gICAgICAgIGFweTogTnVtYmVyKGFzc2V0c1tpXS5sZW50QXB5KSxcbiAgICAgICAgYmFsYW5jZUluVVNEOiBhbW91bnRJblVTRCxcbiAgICAgICAgbWF4U3VwcGx5OiBxdHksXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGFzc2V0c0xpc3Q7XG4gIH0sIFtnZXRBbW91bnRJblVTRCwgZ2V0VXNlclRvdGFsQXZhaWxhYmxlQmFsYW5jZSwgZ2V0VG9rZW5zUGVyVVNEQW1vdW50XSk7XG5cbiAgLy8gT2JqZWN0aWZ5IGJvcnJvd2VkIGFzc2V0cyAoZm9ybWF0IGRhdGEpXG4gIGNvbnN0IG9iamVjdGlmeUJvcnJvd2VkQXNzZXRzID0gdXNlQ2FsbGJhY2soYXN5bmMgKGFzc2V0cykgPT4ge1xuICAgIGNvbnN0IGJvcnJvd3NMaXN0ID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhc3NldHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHRva2VuID0gYXNzZXRzW2ldLnRva2VuO1xuICAgICAgY29uc3QgYm9ycm93UXR5ID0gYXNzZXRzW2ldLmJvcnJvd1F0eTtcbiAgICAgIGNvbnN0IGJvcnJvd0FweSA9IGFzc2V0c1tpXS5ib3Jyb3dBcHk7XG4gICAgICBjb25zdCBhbW91bnRJblVTRCA9IGF3YWl0IGdldEFtb3VudEluVVNEKHRva2VuLCBib3Jyb3dRdHkpO1xuICAgICAgXG4gICAgICBib3Jyb3dzTGlzdC5wdXNoKHtcbiAgICAgICAgdG9rZW46IHRva2VuLFxuICAgICAgICBib3Jyb3dRdHk6IE51bWJlcihib3Jyb3dRdHkpLFxuICAgICAgICBib3Jyb3dBcHk6IE51bWJlcihib3Jyb3dBcHkpLFxuICAgICAgICBib3Jyb3dlZEJhbEluVVNEOiBhbW91bnRJblVTRCxcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gYm9ycm93c0xpc3Q7XG4gIH0sIFtnZXRBbW91bnRJblVTRF0pO1xuXG4gIC8vIE1lcmdlIG9iamVjdGlmaWVkIGFzc2V0cyB3aXRoIHRva2VuIGluZm9cbiAgY29uc3QgbWVyZ2VPYmplY3RpZmllZEFzc2V0cyA9IHVzZUNhbGxiYWNrKChhc3NldHMpID0+IHtcbiAgICBjb25zdCByZXN1bHQgPSBDT05GSUcuVE9LRU5TXG4gICAgICAuZmlsdGVyKCh0b2tlbkxpc3QpID0+IHtcbiAgICAgICAgcmV0dXJuIGFzc2V0cy5zb21lKChhc3NldExpc3QpID0+IHtcbiAgICAgICAgICByZXR1cm4gdG9rZW5MaXN0LmFkZHJlc3MudG9Mb3dlckNhc2UoKSA9PT0gYXNzZXRMaXN0LnRva2VuLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSlcbiAgICAgIC5tYXAoKGFzc2V0T2JqKSA9PiAoe1xuICAgICAgICAuLi5hc3NldHMuZmluZCgoaXRlbSkgPT4gaXRlbS50b2tlbi50b0xvd2VyQ2FzZSgpID09PSBhc3NldE9iai5hZGRyZXNzLnRvTG93ZXJDYXNlKCkpLFxuICAgICAgICAuLi5hc3NldE9iaixcbiAgICAgIH0pKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LCBbXSk7XG5cbiAgLy8gQ29udGV4dCB2YWx1ZVxuICBjb25zdCBjb250ZXh0VmFsdWUgPSB1c2VNZW1vKCgpID0+ICh7XG4gICAgLy8gU3RhdGVcbiAgICBtZXRhbWFza0RldGFpbHMsXG4gICAgdXNlckFzc2V0cyxcbiAgICBzdXBwbHlBc3NldHMsXG4gICAgYXNzZXRzVG9Cb3Jyb3csXG4gICAgeW91ckJvcnJvd3MsXG4gICAgc3VwcGx5U3VtbWFyeSxcbiAgICBib3Jyb3dTdW1tYXJ5LFxuICAgIGFjY291bnREYXRhLFxuICAgIGNvbnRyYWN0LFxuXG4gICAgLy8gV2FsbGV0IGZ1bmN0aW9uc1xuICAgIGNvbm5lY3RXYWxsZXQsXG4gICAgcmVmcmVzaCxcblxuICAgIC8vIEFzc2V0IGZ1bmN0aW9uc1xuICAgIGdldFVzZXJBc3NldHMsXG4gICAgZ2V0WW91clN1cHBsaWVzLFxuICAgIGdldFlvdXJCb3Jyb3dzLFxuICAgIGdldEFzc2V0c1RvQm9ycm93LFxuXG4gICAgLy8gVHJhbnNhY3Rpb24gZnVuY3Rpb25zXG4gICAgQXBwcm92ZVRvQ29udGludWUsXG4gICAgTGVuZEFzc2V0LFxuICAgIFdpdGhkcmF3QXNzZXQsXG4gICAgYm9ycm93QXNzZXQsXG4gICAgcmVwYXlBc3NldCxcblxuICAgIC8vIFV0aWxpdHkgZnVuY3Rpb25zXG4gICAgZ2V0Q29udHJhY3QsXG4gICAgZ2V0UHJpY2VVU0QsXG4gICAgZ2V0QW1vdW50SW5VU0QsXG4gICAgbnVtYmVyVG9FdGhlcnMsXG4gICAgcmVwb3J0RXJyb3IsXG5cbiAgICAvLyBFVEgvV0VUSCBmdW5jdGlvbnNcbiAgICB3cmFwRXRoLFxuICAgIHVud3JhcFdldGgsXG5cbiAgICAvLyBBY2NvdW50IGZ1bmN0aW9uc1xuICAgIGdldEFjY291bnREYXRhLFxuICAgIGdldFVzZXJUb3RhbEF2YWlsYWJsZUJhbGFuY2UsXG4gICAgZ2V0VG9rZW5zUGVyVVNEQW1vdW50LFxuXG4gICAgLy8gRGF0YSBwcm9jZXNzaW5nIGZ1bmN0aW9uc1xuICAgIG9iamVjdGlmeVN1cHBsaWVkQXNzZXRzLFxuICAgIG9iamVjdGlmeUJvcnJvd2VkQXNzZXRzLFxuICAgIG1lcmdlT2JqZWN0aWZpZWRBc3NldHMsXG5cbiAgICAvLyBJbnRlcmVzdCBmdW5jdGlvbnNcbiAgICB1cGRhdGVJbnRlcmVzdHMsXG5cbiAgICAvLyBUb2tlbiB3aXRoZHJhdy9kZXBvc2l0IGZ1bmN0aW9uc1xuICAgIHdpdGhkcmF3VG9rZW4sXG4gICAgZGVwb3NpdFRvVG9rZW4sXG4gIH0pLCBbXG4gICAgbWV0YW1hc2tEZXRhaWxzLFxuICAgIHVzZXJBc3NldHMsXG4gICAgc3VwcGx5QXNzZXRzLFxuICAgIGFzc2V0c1RvQm9ycm93LFxuICAgIHlvdXJCb3Jyb3dzLFxuICAgIHN1cHBseVN1bW1hcnksXG4gICAgYm9ycm93U3VtbWFyeSxcbiAgICBhY2NvdW50RGF0YSxcbiAgICBjb250cmFjdCxcbiAgICBjb25uZWN0V2FsbGV0LFxuICAgIHJlZnJlc2gsXG4gICAgZ2V0VXNlckFzc2V0cyxcbiAgICBnZXRZb3VyU3VwcGxpZXMsXG4gICAgZ2V0WW91ckJvcnJvd3MsXG4gICAgZ2V0QXNzZXRzVG9Cb3Jyb3csXG4gICAgQXBwcm92ZVRvQ29udGludWUsXG4gICAgTGVuZEFzc2V0LFxuICAgIFdpdGhkcmF3QXNzZXQsXG4gICAgYm9ycm93QXNzZXQsXG4gICAgcmVwYXlBc3NldCxcbiAgICBnZXRDb250cmFjdCxcbiAgICBnZXRQcmljZVVTRCxcbiAgICBnZXRBbW91bnRJblVTRCxcbiAgICB3cmFwRXRoLFxuICAgIHVud3JhcFdldGgsXG4gICAgZ2V0QWNjb3VudERhdGEsXG4gICAgZ2V0VXNlclRvdGFsQXZhaWxhYmxlQmFsYW5jZSxcbiAgICBnZXRUb2tlbnNQZXJVU0RBbW91bnQsXG4gICAgb2JqZWN0aWZ5U3VwcGxpZWRBc3NldHMsXG4gICAgb2JqZWN0aWZ5Qm9ycm93ZWRBc3NldHMsXG4gICAgbWVyZ2VPYmplY3RpZmllZEFzc2V0cyxcbiAgICB1cGRhdGVJbnRlcmVzdHMsXG4gIF0pO1xuXG4gIHJldHVybiAoXG4gICAgPGxlbmRDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtjb250ZXh0VmFsdWV9PlxuICAgICAge3Byb3BzLmNoaWxkcmVufVxuICAgIDwvbGVuZENvbnRleHQuUHJvdmlkZXI+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBMZW5kU3RhdGU7XG4iXSwibmFtZXMiOlsiUmVhY3QiLCJ1c2VTdGF0ZSIsInVzZUNhbGxiYWNrIiwidXNlTWVtbyIsImxlbmRDb250ZXh0IiwiZXRoZXJzIiwiQ09ORklHIiwiZ2V0VG9rZW5CYWxhbmNlIiwiZ2V0VG9rZW5BbGxvd2FuY2UiLCJhcHByb3ZlSWZOZWVkZWQiLCJsZW5kIiwibGVuZFR4Iiwid2l0aGRyYXciLCJ3aXRoZHJhd1R4IiwiYm9ycm93IiwiYm9ycm93VHgiLCJyZXBheSIsInJlcGF5VHgiLCJFVEhBZGRyZXNzIiwiTGVuZGluZ1Bvb2xBZGRyZXNzIiwiTGVuZGluZ0hlbHBlckFkZHJlc3MiLCJXRVRIQWRkcmVzcyIsIlRva2VuQUJJIiwiTGVuZGluZ1Bvb2xBQkkiLCJMZW5kaW5nSGVscGVyQUJJIiwibnVtYmVyVG9FdGhlcnMiLCJudW1iZXIiLCJwYXJzZUV0aGVyIiwidG9TdHJpbmciLCJyZXBvcnRFcnJvciIsImVycm9yIiwiY29uc29sZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJMZW5kU3RhdGUiLCJwcm9wcyIsIm1ldGFtYXNrRGV0YWlscyIsInNldE1ldGFtYXNrRGV0YWlscyIsInByb3ZpZGVyIiwibmV0d29ya05hbWUiLCJzaWduZXIiLCJjdXJyZW50QWNjb3VudCIsImNoYWluSWQiLCJ1c2VyQXNzZXRzIiwic2V0VXNlckFzc2V0cyIsInN1cHBseUFzc2V0cyIsInNldFN1cHBseUFzc2V0cyIsImFzc2V0c1RvQm9ycm93Iiwic2V0QXNzZXRzVG9Cb3Jyb3ciLCJ5b3VyQm9ycm93cyIsInNldFlvdXJCb3Jyb3dzIiwiY29udHJhY3QiLCJzZXRDb250cmFjdCIsImxlbmRpbmdQb29sQ29udHJhY3QiLCJvcmFjbGVDb250cmFjdCIsInN1cHBseVN1bW1hcnkiLCJzZXRTdXBwbHlTdW1tYXJ5IiwidG90YWxVU0RCYWxhbmNlIiwid2VpZ2h0ZWRBdmdBUFkiLCJ0b3RhbFVTRENvbGxhdGVyYWwiLCJib3Jyb3dTdW1tYXJ5Iiwic2V0Qm9ycm93U3VtbWFyeSIsInRvdGFsQm9ycm93UG93ZXJVc2VkIiwiYWNjb3VudERhdGEiLCJzZXRBY2NvdW50RGF0YSIsImNvbGxhdGVyYWxVU0QiLCJkZWJ0VVNEIiwiaGVhbHRoRmFjdG9yIiwiY29ubmVjdFdhbGxldCIsImxvZyIsImV0aGVyZXVtIiwid2luZG93IiwiZmFpbE1lc3NhZ2UiLCJhbGVydCIsImFjY291bnRzIiwicmVxdWVzdCIsIm1ldGhvZCIsIm9uIiwibG9jYXRpb24iLCJyZWxvYWQiLCJCcm93c2VyUHJvdmlkZXIiLCJuZXR3b3JrIiwiZ2V0TmV0d29yayIsIm5hbWUiLCJnZXRTaWduZXIiLCJsZW5ndGgiLCJjdXJyZW50QWRkcmVzcyIsIk51bWJlciIsImdldENvbnRyYWN0IiwiYWRkcmVzcyIsImFiaSIsIkNvbnRyYWN0IiwiZ2V0VXNlckFzc2V0cyIsImFzc2V0cyIsIlByb21pc2UiLCJhbGwiLCJUT0tFTlMiLCJtYXAiLCJ0b2tlbiIsImJhbGFuY2UiLCJiYWxhbmNlVVNEIiwiaXNOYXRpdmUiLCJiYWwiLCJnZXRCYWxhbmNlIiwiZm9ybWF0RXRoZXIiLCJkZWNpbWFscyIsInByaWNlIiwiZ2V0UHJpY2VVU0QiLCJwYXJzZUZsb2F0Iiwic3ltYm9sIiwicHJpY2VVU0QiLCJ3YXJuIiwiYXNzZXQiLCJvcmFjbGUiLCJQUklDRV9PUkFDTEUiLCJnZXRBc3NldFByaWNlMWUxOCIsImZvcm1hdFVuaXRzIiwiZ2V0QW1vdW50SW5VU0QiLCJhbW91bnQiLCJhbW91bnRJblVTRCIsIkFwcHJvdmVUb0NvbnRpbnVlIiwidG9rZW5BZGRyZXNzIiwiYXBwcm92ZUFtb3VudCIsIkVycm9yIiwiZmluZCIsInQiLCJ0b0xvd2VyQ2FzZSIsIkxFTkRJTkdfUE9PTCIsInN0YXR1cyIsIm1lc3NhZ2UiLCJyZWFzb24iLCJMZW5kQXNzZXQiLCJzdXBwbHlBbW91bnQiLCJ0b2tlbkluZm8iLCJwYXJzZVVuaXRzIiwidHgiLCJoYXNoIiwiV2l0aGRyYXdBc3NldCIsIndpdGhkcmF3QW1vdW50IiwiYm9ycm93QXNzZXQiLCJib3Jyb3dBbW91bnQiLCJyZXBheUFzc2V0IiwicmVwYXlBbW91bnQiLCJnZXRBY2NvdW50RGF0YSIsInVzZXIiLCJwb29sIiwid2FsbGV0IiwiWmVyb0FkZHJlc3MiLCJjb2wiLCJkZWJ0IiwiaGYiLCJjb250cmFjdEVycm9yIiwiZ2V0WW91clN1cHBsaWVzIiwic3VwcGxpZXMiLCJmaWx0ZXIiLCJ1c2VyUmVzZXJ2ZSIsImdldFVzZXJSZXNlcnZlIiwic3VwcGx5UHJpbmNpcGFsIiwic3VwcGx5IiwicHJpbmNpcGFsIiwic3VwcGx5SW5kZXgiLCJpbmRleCIsInZhbGlkU3VwcGxpZXMiLCJzIiwicmVkdWNlIiwic3VtIiwiYXB5IiwiZ2V0WW91ckJvcnJvd3MiLCJib3Jyb3dzIiwiYm9ycm93UHJpbmNpcGFsIiwiYm9ycm93SW5kZXgiLCJ2YWxpZEJvcnJvd3MiLCJiIiwiZ2V0QXNzZXRzVG9Cb3Jyb3ciLCJyZXNlcnZlIiwicmVzZXJ2ZXMiLCJpc0JvcnJvd2FibGUiLCJCb29sZWFuIiwicmVzZXJ2ZUNhc2giLCJsdHZCcHMiLCJsaXFUaHJlc2hvbGRCcHMiLCJ2YWxpZEFzc2V0cyIsImEiLCJ3cmFwRXRoIiwiYW1vdW50RXRoIiwiZGF0YSIsInNlbmRUcmFuc2FjdGlvbiIsInRvIiwidmFsdWUiLCJ3YWl0IiwidW53cmFwV2V0aCIsIndldGgiLCJ3aXRoZHJhd1Rva2VuIiwiZGVwb3NpdFRvVG9rZW4iLCJkZXBvc2l0IiwicmVmcmVzaCIsInVwZGF0ZUludGVyZXN0cyIsImFjY3J1ZVB1YmxpYyIsImdldFVzZXJUb3RhbEF2YWlsYWJsZUJhbGFuY2UiLCJtYXhBbW91bnQiLCJnZXRVc2VyVG90YWxBdmFpbGFibGVCYWxhbmNlSW5VU0QiLCJnZXRUb2tlbnNQZXJVU0RBbW91bnQiLCJoZWxwZXIiLCJtYXhRdHkiLCJvYmplY3RpZnlTdXBwbGllZEFzc2V0cyIsImFzc2V0c0xpc3QiLCJpIiwibGVuZFF0eSIsImxlbnRRdHkiLCJtYXhTdXBwbHlBbW91bnQiLCJxdHkiLCJwdXNoIiwibGVudEFweSIsImJhbGFuY2VJblVTRCIsIm1heFN1cHBseSIsIm9iamVjdGlmeUJvcnJvd2VkQXNzZXRzIiwiYm9ycm93c0xpc3QiLCJib3Jyb3dRdHkiLCJib3Jyb3dBcHkiLCJib3Jyb3dlZEJhbEluVVNEIiwibWVyZ2VPYmplY3RpZmllZEFzc2V0cyIsInJlc3VsdCIsInRva2VuTGlzdCIsInNvbWUiLCJhc3NldExpc3QiLCJhc3NldE9iaiIsIml0ZW0iLCJjb250ZXh0VmFsdWUiLCJQcm92aWRlciIsImNoaWxkcmVuIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./src/context/LendState.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./src/context/lendContext.js":
/*!************************************!*\
  !*** ./src/context/lendContext.js ***!
  \************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(pages-dir-browser)/./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nconst lendContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (lendContext);\n\n\n;\r\n    // Wrapped in an IIFE to avoid polluting the global scope\r\n    ;\r\n    (function () {\r\n        var _a, _b;\r\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\r\n        // to extract CSS. For backwards compatibility, we need to check we're in a\r\n        // browser context before continuing.\r\n        if (typeof self !== 'undefined' &&\r\n            // AMP / No-JS mode does not inject these helpers:\r\n            '$RefreshHelpers$' in self) {\r\n            // @ts-ignore __webpack_module__ is global\r\n            var currentExports = module.exports;\r\n            // @ts-ignore __webpack_module__ is global\r\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\r\n            // This cannot happen in MainTemplate because the exports mismatch between\r\n            // templating and execution.\r\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\r\n            // A module can be accepted automatically based on its exports, e.g. when\r\n            // it is a Refresh Boundary.\r\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\r\n                // Save the previous exports signature on update so we can compare the boundary\r\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\r\n                module.hot.dispose(function (data) {\r\n                    data.prevSignature =\r\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\r\n                });\r\n                // Unconditionally accept an update to this module, we'll check if it's\r\n                // still a Refresh Boundary later.\r\n                // @ts-ignore importMeta is replaced in the loader\r\n                module.hot.accept();\r\n                // This field is set when the previous version of this module was a\r\n                // Refresh Boundary, letting us know we need to check for invalidation or\r\n                // enqueue an update.\r\n                if (prevSignature !== null) {\r\n                    // A boundary can become ineligible if its exports are incompatible\r\n                    // with the previous exports.\r\n                    //\r\n                    // For example, if you add/remove/change exports, we'll want to\r\n                    // re-execute the importing modules, and force those components to\r\n                    // re-render. Similarly, if you convert a class component to a\r\n                    // function, we want to invalidate the boundary.\r\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\r\n                        module.hot.invalidate();\r\n                    }\r\n                    else {\r\n                        self.$RefreshHelpers$.scheduleUpdate();\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // Since we just executed the code for the module, it's possible that the\r\n                // new exports made it ineligible for being a boundary.\r\n                // We only care about the case when we were _previously_ a boundary,\r\n                // because we already accepted this update (accidental side effect).\r\n                var isNoLongerABoundary = prevSignature !== null;\r\n                if (isNoLongerABoundary) {\r\n                    module.hot.invalidate();\r\n                }\r\n            }\r\n        }\r\n    })();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL3NyYy9jb250ZXh0L2xlbmRDb250ZXh0LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFzQztBQUV0QyxNQUFNQyw0QkFBY0Qsb0RBQWFBO0FBRWpDLGlFQUFlQyxXQUFXQSxFQUFDIiwic291cmNlcyI6WyJEOlxcRG9fYW4yXFxsZW5kaHViX3YyXFxsZW5kaHViLWZyb250ZW5kLW5leHRqc1xcc3JjXFxjb250ZXh0XFxsZW5kQ29udGV4dC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVDb250ZXh0IH0gZnJvbSBcInJlYWN0XCI7XHJcblxyXG5jb25zdCBsZW5kQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQoKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGxlbmRDb250ZXh0O1xyXG4iXSwibmFtZXMiOlsiY3JlYXRlQ29udGV4dCIsImxlbmRDb250ZXh0Il0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./src/context/lendContext.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./src/lib/tx.ts":
/*!***********************!*\
  !*** ./src/lib/tx.ts ***!
  \***********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   accruePublic: () => (/* binding */ accruePublic),\n/* harmony export */   approveIfNeeded: () => (/* binding */ approveIfNeeded),\n/* harmony export */   borrow: () => (/* binding */ borrow),\n/* harmony export */   formatTokenAmount: () => (/* binding */ formatTokenAmount),\n/* harmony export */   getTokenAllowance: () => (/* binding */ getTokenAllowance),\n/* harmony export */   getTokenBalance: () => (/* binding */ getTokenBalance),\n/* harmony export */   lend: () => (/* binding */ lend),\n/* harmony export */   liquidate: () => (/* binding */ liquidate),\n/* harmony export */   parseTokenAmount: () => (/* binding */ parseTokenAmount),\n/* harmony export */   repay: () => (/* binding */ repay),\n/* harmony export */   sendWithToast: () => (/* binding */ sendWithToast),\n/* harmony export */   withdraw: () => (/* binding */ withdraw)\n/* harmony export */ });\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ethers */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/index.js\");\n/* harmony import */ var _config_abis__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/abis */ \"(pages-dir-browser)/./src/config/abis.ts\");\n/* harmony import */ var _config_contracts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config/contracts */ \"(pages-dir-browser)/./src/config/contracts.ts\");\n// Transaction service with toast notifications\n\n\n\n\n/**\n * Send transaction with toast notifications\n */ async function sendWithToast(txPromise, config) {\n    try {\n        var _receipt_gasUsed;\n        // Show pending toast\n        console.log('⏳', config.pending);\n        // Send transaction\n        const tx = await txPromise;\n        console.log('📤 Transaction sent:', tx.hash);\n        // Show pending with hash\n        console.log('⏳', \"\".concat(config.pending, \" - Hash: \").concat(tx.hash));\n        // Wait for confirmation\n        const receipt = await tx.wait();\n        console.log('✅', config.success);\n        console.log('📋 Receipt:', {\n            hash: tx.hash,\n            gasUsed: receipt === null || receipt === void 0 ? void 0 : (_receipt_gasUsed = receipt.gasUsed) === null || _receipt_gasUsed === void 0 ? void 0 : _receipt_gasUsed.toString(),\n            status: receipt === null || receipt === void 0 ? void 0 : receipt.status\n        });\n        return {\n            hash: tx.hash,\n            receipt: receipt\n        };\n    } catch (error) {\n        console.error('❌', config.error);\n        console.error('Error details:', error);\n        throw error;\n    }\n}\n/**\n * Approve ERC20 token if needed\n */ async function approveIfNeeded(signer, tokenAddress, spender, amount) {\n    const tokenContract = new ethers__WEBPACK_IMPORTED_MODULE_2__.ethers.Contract(tokenAddress, _config_abis__WEBPACK_IMPORTED_MODULE_0__.ERC20_ABI, signer);\n    const userAddress = await signer.getAddress();\n    // Check current allowance\n    const currentAllowance = await tokenContract.allowance(userAddress, spender);\n    if (currentAllowance >= amount) {\n        console.log('✅ Allowance sufficient, skipping approval');\n        return null;\n    }\n    console.log('📝 Approval needed:', {\n        current: currentAllowance.toString(),\n        required: amount.toString()\n    });\n    // Send approval transaction\n    const txPromise = tokenContract.approve(spender, amount);\n    return await sendWithToast(txPromise, {\n        pending: 'Approving token...',\n        success: 'Token approved successfully!',\n        error: 'Approval failed'\n    });\n}\n/**\n * Lend tokens to the pool\n */ async function lend(signer, tokenAddress, amount) {\n    const poolContract = new ethers__WEBPACK_IMPORTED_MODULE_2__.ethers.Contract(_config_contracts__WEBPACK_IMPORTED_MODULE_1__.CONFIG.LENDING_POOL, _config_abis__WEBPACK_IMPORTED_MODULE_0__.POOL_ABI, signer);\n    // Approve if needed\n    await approveIfNeeded(signer, tokenAddress, _config_contracts__WEBPACK_IMPORTED_MODULE_1__.CONFIG.LENDING_POOL, amount);\n    // Send lend transaction\n    const txPromise = poolContract.lend(tokenAddress, amount);\n    return await sendWithToast(txPromise, {\n        pending: 'Supplying tokens...',\n        success: 'Tokens supplied successfully!',\n        error: 'Supply failed'\n    });\n}\n/**\n * Withdraw tokens from the pool\n */ async function withdraw(signer, tokenAddress, amount) {\n    const poolContract = new ethers__WEBPACK_IMPORTED_MODULE_2__.ethers.Contract(_config_contracts__WEBPACK_IMPORTED_MODULE_1__.CONFIG.LENDING_POOL, _config_abis__WEBPACK_IMPORTED_MODULE_0__.POOL_ABI, signer);\n    const txPromise = poolContract.withdraw(tokenAddress, amount);\n    return await sendWithToast(txPromise, {\n        pending: 'Withdrawing tokens...',\n        success: 'Tokens withdrawn successfully!',\n        error: 'Withdraw failed'\n    });\n}\n/**\n * Borrow tokens from the pool\n */ async function borrow(signer, tokenAddress, amount) {\n    const poolContract = new ethers__WEBPACK_IMPORTED_MODULE_2__.ethers.Contract(_config_contracts__WEBPACK_IMPORTED_MODULE_1__.CONFIG.LENDING_POOL, _config_abis__WEBPACK_IMPORTED_MODULE_0__.POOL_ABI, signer);\n    const txPromise = poolContract.borrow(tokenAddress, amount);\n    return await sendWithToast(txPromise, {\n        pending: 'Borrowing tokens...',\n        success: 'Tokens borrowed successfully!',\n        error: 'Borrow failed'\n    });\n}\n/**\n * Repay borrowed tokens\n */ async function repay(signer, tokenAddress, amount, userAddress) {\n    const poolContract = new ethers__WEBPACK_IMPORTED_MODULE_2__.ethers.Contract(_config_contracts__WEBPACK_IMPORTED_MODULE_1__.CONFIG.LENDING_POOL, _config_abis__WEBPACK_IMPORTED_MODULE_0__.POOL_ABI, signer);\n    const borrower = userAddress || await signer.getAddress();\n    // Approve if needed\n    await approveIfNeeded(signer, tokenAddress, _config_contracts__WEBPACK_IMPORTED_MODULE_1__.CONFIG.LENDING_POOL, amount);\n    const txPromise = poolContract.repay(tokenAddress, amount, borrower);\n    return await sendWithToast(txPromise, {\n        pending: 'Repaying tokens...',\n        success: 'Tokens repaid successfully!',\n        error: 'Repay failed'\n    });\n}\n/**\n * Liquidate a position\n */ async function liquidate(signer, collateralAsset, debtAsset, debtAmount, userAddress) {\n    const poolContract = new ethers__WEBPACK_IMPORTED_MODULE_2__.ethers.Contract(_config_contracts__WEBPACK_IMPORTED_MODULE_1__.CONFIG.LENDING_POOL, _config_abis__WEBPACK_IMPORTED_MODULE_0__.POOL_ABI, signer);\n    const txPromise = poolContract.liquidationCall(collateralAsset, debtAsset, debtAmount, userAddress);\n    return await sendWithToast(txPromise, {\n        pending: 'Liquidating position...',\n        success: 'Position liquidated successfully!',\n        error: 'Liquidation failed'\n    });\n}\n/**\n * Accrue interest for all reserves\n */ async function accruePublic(signer) {\n    const poolContract = new ethers__WEBPACK_IMPORTED_MODULE_2__.ethers.Contract(_config_contracts__WEBPACK_IMPORTED_MODULE_1__.CONFIG.LENDING_POOL, _config_abis__WEBPACK_IMPORTED_MODULE_0__.POOL_ABI, signer);\n    const txPromise = poolContract.accruePublic();\n    return await sendWithToast(txPromise, {\n        pending: 'Accruing interest...',\n        success: 'Interest accrued successfully!',\n        error: 'Accrue failed'\n    });\n}\n/**\n * Get user's token balance\n */ async function getTokenBalance(provider, tokenAddress, userAddress) {\n    let decimals = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 18;\n    const tokenContract = new ethers__WEBPACK_IMPORTED_MODULE_2__.ethers.Contract(tokenAddress, _config_abis__WEBPACK_IMPORTED_MODULE_0__.ERC20_ABI, provider);\n    const balance = await tokenContract.balanceOf(userAddress);\n    return (0,ethers__WEBPACK_IMPORTED_MODULE_2__.formatUnits)(balance, decimals);\n}\n/**\n * Get user's token allowance\n */ async function getTokenAllowance(provider, tokenAddress, userAddress, spender) {\n    let decimals = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 18;\n    const tokenContract = new ethers__WEBPACK_IMPORTED_MODULE_2__.ethers.Contract(tokenAddress, _config_abis__WEBPACK_IMPORTED_MODULE_0__.ERC20_ABI, provider);\n    const allowance = await tokenContract.allowance(userAddress, spender);\n    return (0,ethers__WEBPACK_IMPORTED_MODULE_2__.formatUnits)(allowance, decimals);\n}\n/**\n * Parse token amount to BigInt\n */ function parseTokenAmount(amount, decimals) {\n    return (0,ethers__WEBPACK_IMPORTED_MODULE_2__.parseUnits)(amount, decimals);\n}\n/**\n * Format token amount from BigInt\n */ function formatTokenAmount(amount, decimals) {\n    return (0,ethers__WEBPACK_IMPORTED_MODULE_2__.formatUnits)(amount, decimals);\n}\n\n\n;\r\n    // Wrapped in an IIFE to avoid polluting the global scope\r\n    ;\r\n    (function () {\r\n        var _a, _b;\r\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\r\n        // to extract CSS. For backwards compatibility, we need to check we're in a\r\n        // browser context before continuing.\r\n        if (typeof self !== 'undefined' &&\r\n            // AMP / No-JS mode does not inject these helpers:\r\n            '$RefreshHelpers$' in self) {\r\n            // @ts-ignore __webpack_module__ is global\r\n            var currentExports = module.exports;\r\n            // @ts-ignore __webpack_module__ is global\r\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\r\n            // This cannot happen in MainTemplate because the exports mismatch between\r\n            // templating and execution.\r\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\r\n            // A module can be accepted automatically based on its exports, e.g. when\r\n            // it is a Refresh Boundary.\r\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\r\n                // Save the previous exports signature on update so we can compare the boundary\r\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\r\n                module.hot.dispose(function (data) {\r\n                    data.prevSignature =\r\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\r\n                });\r\n                // Unconditionally accept an update to this module, we'll check if it's\r\n                // still a Refresh Boundary later.\r\n                // @ts-ignore importMeta is replaced in the loader\r\n                module.hot.accept();\r\n                // This field is set when the previous version of this module was a\r\n                // Refresh Boundary, letting us know we need to check for invalidation or\r\n                // enqueue an update.\r\n                if (prevSignature !== null) {\r\n                    // A boundary can become ineligible if its exports are incompatible\r\n                    // with the previous exports.\r\n                    //\r\n                    // For example, if you add/remove/change exports, we'll want to\r\n                    // re-execute the importing modules, and force those components to\r\n                    // re-render. Similarly, if you convert a class component to a\r\n                    // function, we want to invalidate the boundary.\r\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\r\n                        module.hot.invalidate();\r\n                    }\r\n                    else {\r\n                        self.$RefreshHelpers$.scheduleUpdate();\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // Since we just executed the code for the module, it's possible that the\r\n                // new exports made it ineligible for being a boundary.\r\n                // We only care about the case when we were _previously_ a boundary,\r\n                // because we already accepted this update (accidental side effect).\r\n                var isNoLongerABoundary = prevSignature !== null;\r\n                if (isNoLongerABoundary) {\r\n                    module.hot.invalidate();\r\n                }\r\n            }\r\n        }\r\n    })();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./src/lib/tx.ts\n"));

/***/ }),

/***/ "(pages-dir-browser)/./src/pages/_app.tsx":
/*!****************************!*\
  !*** ./src/pages/_app.tsx ***!
  \****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ App)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(pages-dir-browser)/./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _styles_globals_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/styles/globals.css */ \"(pages-dir-browser)/./src/styles/globals.css\");\n/* harmony import */ var _styles_globals_css__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_styles_globals_css__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react_toastify__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-toastify */ \"(pages-dir-browser)/./node_modules/react-toastify/dist/react-toastify.esm.mjs\");\n/* harmony import */ var react_toastify_dist_ReactToastify_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-toastify/dist/ReactToastify.css */ \"(pages-dir-browser)/./node_modules/react-toastify/dist/ReactToastify.css\");\n/* harmony import */ var react_toastify_dist_ReactToastify_css__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react_toastify_dist_ReactToastify_css__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _context_LendState__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/context/LendState */ \"(pages-dir-browser)/./src/context/LendState.js\");\n\n\n\n\n\nfunction App(param) {\n    let { Component, pageProps } = param;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_context_LendState__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"meta\", {\n                name: \"viewport\",\n                content: \"width=device-width, initial-scale=1\"\n            }, void 0, false, {\n                fileName: \"D:\\\\Do_an2\\\\lendhub_v2\\\\lendhub-frontend-nextjs\\\\src\\\\pages\\\\_app.tsx\",\n                lineNumber: 11,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Component, {\n                ...pageProps\n            }, void 0, false, {\n                fileName: \"D:\\\\Do_an2\\\\lendhub_v2\\\\lendhub-frontend-nextjs\\\\src\\\\pages\\\\_app.tsx\",\n                lineNumber: 12,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_toastify__WEBPACK_IMPORTED_MODULE_2__.ToastContainer, {\n                position: \"top-right\",\n                autoClose: 5000,\n                hideProgressBar: false,\n                newestOnTop: false,\n                closeOnClick: true,\n                rtl: false,\n                pauseOnFocusLoss: true,\n                draggable: true,\n                pauseOnHover: true,\n                theme: \"dark\"\n            }, void 0, false, {\n                fileName: \"D:\\\\Do_an2\\\\lendhub_v2\\\\lendhub-frontend-nextjs\\\\src\\\\pages\\\\_app.tsx\",\n                lineNumber: 13,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"D:\\\\Do_an2\\\\lendhub_v2\\\\lendhub-frontend-nextjs\\\\src\\\\pages\\\\_app.tsx\",\n        lineNumber: 9,\n        columnNumber: 5\n    }, this);\n}\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");\n\n\n;\r\n    // Wrapped in an IIFE to avoid polluting the global scope\r\n    ;\r\n    (function () {\r\n        var _a, _b;\r\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\r\n        // to extract CSS. For backwards compatibility, we need to check we're in a\r\n        // browser context before continuing.\r\n        if (typeof self !== 'undefined' &&\r\n            // AMP / No-JS mode does not inject these helpers:\r\n            '$RefreshHelpers$' in self) {\r\n            // @ts-ignore __webpack_module__ is global\r\n            var currentExports = module.exports;\r\n            // @ts-ignore __webpack_module__ is global\r\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\r\n            // This cannot happen in MainTemplate because the exports mismatch between\r\n            // templating and execution.\r\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\r\n            // A module can be accepted automatically based on its exports, e.g. when\r\n            // it is a Refresh Boundary.\r\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\r\n                // Save the previous exports signature on update so we can compare the boundary\r\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\r\n                module.hot.dispose(function (data) {\r\n                    data.prevSignature =\r\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\r\n                });\r\n                // Unconditionally accept an update to this module, we'll check if it's\r\n                // still a Refresh Boundary later.\r\n                // @ts-ignore importMeta is replaced in the loader\r\n                module.hot.accept();\r\n                // This field is set when the previous version of this module was a\r\n                // Refresh Boundary, letting us know we need to check for invalidation or\r\n                // enqueue an update.\r\n                if (prevSignature !== null) {\r\n                    // A boundary can become ineligible if its exports are incompatible\r\n                    // with the previous exports.\r\n                    //\r\n                    // For example, if you add/remove/change exports, we'll want to\r\n                    // re-execute the importing modules, and force those components to\r\n                    // re-render. Similarly, if you convert a class component to a\r\n                    // function, we want to invalidate the boundary.\r\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\r\n                        module.hot.invalidate();\r\n                    }\r\n                    else {\r\n                        self.$RefreshHelpers$.scheduleUpdate();\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // Since we just executed the code for the module, it's possible that the\r\n                // new exports made it ineligible for being a boundary.\r\n                // We only care about the case when we were _previously_ a boundary,\r\n                // because we already accepted this update (accidental side effect).\r\n                var isNoLongerABoundary = prevSignature !== null;\r\n                if (isNoLongerABoundary) {\r\n                    module.hot.invalidate();\r\n                }\r\n            }\r\n        }\r\n    })();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL3NyYy9wYWdlcy9fYXBwLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQTZCO0FBRWtCO0FBQ0Q7QUFDSDtBQUU1QixTQUFTRSxJQUFJLEtBQWtDO1FBQWxDLEVBQUVDLFNBQVMsRUFBRUMsU0FBUyxFQUFZLEdBQWxDO0lBQzFCLHFCQUNFLDhEQUFDSCwwREFBU0E7OzBCQUVSLDhEQUFDSTtnQkFBS0MsTUFBSztnQkFBV0MsU0FBUTs7Ozs7OzBCQUM5Qiw4REFBQ0o7Z0JBQVcsR0FBR0MsU0FBUzs7Ozs7OzBCQUN4Qiw4REFBQ0osMERBQWNBO2dCQUNiUSxVQUFTO2dCQUNUQyxXQUFXO2dCQUNYQyxpQkFBaUI7Z0JBQ2pCQyxhQUFhO2dCQUNiQyxZQUFZO2dCQUNaQyxLQUFLO2dCQUNMQyxnQkFBZ0I7Z0JBQ2hCQyxTQUFTO2dCQUNUQyxZQUFZO2dCQUNaQyxPQUFNOzs7Ozs7Ozs7Ozs7QUFJZDtLQXBCd0JmIiwic291cmNlcyI6WyJEOlxcRG9fYW4yXFxsZW5kaHViX3YyXFxsZW5kaHViLWZyb250ZW5kLW5leHRqc1xcc3JjXFxwYWdlc1xcX2FwcC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICdAL3N0eWxlcy9nbG9iYWxzLmNzcydcclxuaW1wb3J0IHR5cGUgeyBBcHBQcm9wcyB9IGZyb20gJ25leHQvYXBwJ1xyXG5pbXBvcnQgeyBUb2FzdENvbnRhaW5lciB9IGZyb20gJ3JlYWN0LXRvYXN0aWZ5J1xyXG5pbXBvcnQgJ3JlYWN0LXRvYXN0aWZ5L2Rpc3QvUmVhY3RUb2FzdGlmeS5jc3MnXHJcbmltcG9ydCBMZW5kU3RhdGUgZnJvbSAnQC9jb250ZXh0L0xlbmRTdGF0ZSdcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEFwcCh7IENvbXBvbmVudCwgcGFnZVByb3BzIH06IEFwcFByb3BzKSB7XHJcbiAgcmV0dXJuIChcclxuICAgIDxMZW5kU3RhdGU+XHJcbiAgICAgIHsvKiBOZXh0LmpzIHJlY29tbWVuZHMgdmlld3BvcnQgbWV0YSBpbiBfYXBwICovfVxyXG4gICAgICA8bWV0YSBuYW1lPVwidmlld3BvcnRcIiBjb250ZW50PVwid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTFcIiAvPlxyXG4gICAgICA8Q29tcG9uZW50IHsuLi5wYWdlUHJvcHN9IC8+XHJcbiAgICAgIDxUb2FzdENvbnRhaW5lclxyXG4gICAgICAgIHBvc2l0aW9uPVwidG9wLXJpZ2h0XCJcclxuICAgICAgICBhdXRvQ2xvc2U9ezUwMDB9XHJcbiAgICAgICAgaGlkZVByb2dyZXNzQmFyPXtmYWxzZX1cclxuICAgICAgICBuZXdlc3RPblRvcD17ZmFsc2V9XHJcbiAgICAgICAgY2xvc2VPbkNsaWNrXHJcbiAgICAgICAgcnRsPXtmYWxzZX1cclxuICAgICAgICBwYXVzZU9uRm9jdXNMb3NzXHJcbiAgICAgICAgZHJhZ2dhYmxlXHJcbiAgICAgICAgcGF1c2VPbkhvdmVyXHJcbiAgICAgICAgdGhlbWU9XCJkYXJrXCJcclxuICAgICAgLz5cclxuICAgIDwvTGVuZFN0YXRlPlxyXG4gIClcclxufVxyXG5cclxuXHJcbiJdLCJuYW1lcyI6WyJUb2FzdENvbnRhaW5lciIsIkxlbmRTdGF0ZSIsIkFwcCIsIkNvbXBvbmVudCIsInBhZ2VQcm9wcyIsIm1ldGEiLCJuYW1lIiwiY29udGVudCIsInBvc2l0aW9uIiwiYXV0b0Nsb3NlIiwiaGlkZVByb2dyZXNzQmFyIiwibmV3ZXN0T25Ub3AiLCJjbG9zZU9uQ2xpY2siLCJydGwiLCJwYXVzZU9uRm9jdXNMb3NzIiwiZHJhZ2dhYmxlIiwicGF1c2VPbkhvdmVyIiwidGhlbWUiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./src/pages/_app.tsx\n"));

/***/ }),

/***/ "(pages-dir-browser)/./src/styles/globals.css":
/*!********************************!*\
  !*** ./src/styles/globals.css ***!
  \********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("var api = __webpack_require__(/*! !../../node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js */ \"(pages-dir-browser)/./node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js\");\n            var content = __webpack_require__(/*! !!../../node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[8].oneOf[13].use[1]!../../node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[8].oneOf[13].use[2]!./globals.css */ \"(pages-dir-browser)/./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[8].oneOf[13].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[8].oneOf[13].use[2]!./src/styles/globals.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = function(element) {\r\n                    // By default, style-loader injects CSS into the bottom\r\n                    // of <head>. This causes ordering problems between dev\r\n                    // and prod. To fix this, we render a <noscript> tag as\r\n                    // an anchor for the styles to be placed before. These\r\n                    // styles will be applied _before_ <style jsx global>.\r\n                    // These elements should always exist. If they do not,\r\n                    // this code should fail.\r\n                    var anchorElement = document.querySelector('#__next_css__DO_NOT_USE__');\r\n                    var parentNode = anchorElement.parentNode// Normally <head>\r\n                    ;\r\n                    // Each style tag should be placed right before our\r\n                    // anchor. By inserting before and not after, we do not\r\n                    // need to track the last inserted element.\r\n                    parentNode.insertBefore(element, anchorElement);\r\n                };\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (true) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\r\n    if (!a && b || a && !b) {\r\n        return false;\r\n    }\r\n    let p;\r\n    for(p in a){\r\n        if (isNamedExport && p === 'default') {\r\n            continue;\r\n        }\r\n        if (a[p] !== b[p]) {\r\n            return false;\r\n        }\r\n    }\r\n    for(p in b){\r\n        if (isNamedExport && p === 'default') {\r\n            continue;\r\n        }\r\n        if (!a[p]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      /*! !!../../node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[8].oneOf[13].use[1]!../../node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[8].oneOf[13].use[2]!./globals.css */ \"(pages-dir-browser)/./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[8].oneOf[13].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[8].oneOf[13].use[2]!./src/styles/globals.css\",\n      function () {\n        content = __webpack_require__(/*! !!../../node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[8].oneOf[13].use[1]!../../node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[8].oneOf[13].use[2]!./globals.css */ \"(pages-dir-browser)/./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[8].oneOf[13].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[8].oneOf[13].use[2]!./src/styles/globals.css\");\n\n              content = content.__esModule ? content.default : content;\n\n              if (typeof content === 'string') {\n                content = [[module.id, content, '']];\n              }\n\n              if (!isEqualLocals(oldLocals, content.locals)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nmodule.exports = content.locals || {};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL3NyYy9zdHlsZXMvZ2xvYmFscy5jc3MiLCJtYXBwaW5ncyI6IkFBQUEsVUFBVSxtQkFBTyxDQUFDLDJPQUEyRztBQUM3SCwwQkFBMEIsbUJBQU8sQ0FBQyx5Z0JBQXVQOztBQUV6Ujs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7O0FBR0EsSUFBSSxJQUFVO0FBQ2QseUJBQXlCLFVBQVU7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLElBQUksaUJBQWlCO0FBQ3JCLE1BQU0seWdCQUF1UDtBQUM3UDtBQUNBLGtCQUFrQixtQkFBTyxDQUFDLHlnQkFBdVA7O0FBRWpSOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGdCQUFnQixVQUFVOztBQUUxQjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEVBQUUsVUFBVTtBQUNaO0FBQ0EsR0FBRztBQUNIOztBQUVBIiwic291cmNlcyI6WyJEOlxcRG9fYW4yXFxsZW5kaHViX3YyXFxsZW5kaHViLWZyb250ZW5kLW5leHRqc1xcc3JjXFxzdHlsZXNcXGdsb2JhbHMuY3NzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtc3R5bGUtbG9hZGVyL3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9jc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1s4XS5vbmVPZlsxM10udXNlWzFdIS4uLy4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1s4XS5vbmVPZlsxM10udXNlWzJdIS4vZ2xvYmFscy5jc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBmdW5jdGlvbihlbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQnkgZGVmYXVsdCwgc3R5bGUtbG9hZGVyIGluamVjdHMgQ1NTIGludG8gdGhlIGJvdHRvbVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIG9mIDxoZWFkPi4gVGhpcyBjYXVzZXMgb3JkZXJpbmcgcHJvYmxlbXMgYmV0d2VlbiBkZXZcclxuICAgICAgICAgICAgICAgICAgICAvLyBhbmQgcHJvZC4gVG8gZml4IHRoaXMsIHdlIHJlbmRlciBhIDxub3NjcmlwdD4gdGFnIGFzXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYW4gYW5jaG9yIGZvciB0aGUgc3R5bGVzIHRvIGJlIHBsYWNlZCBiZWZvcmUuIFRoZXNlXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc3R5bGVzIHdpbGwgYmUgYXBwbGllZCBfYmVmb3JlXyA8c3R5bGUganN4IGdsb2JhbD4uXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlc2UgZWxlbWVudHMgc2hvdWxkIGFsd2F5cyBleGlzdC4gSWYgdGhleSBkbyBub3QsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyBjb2RlIHNob3VsZCBmYWlsLlxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhbmNob3JFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI19fbmV4dF9jc3NfX0RPX05PVF9VU0VfXycpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJlbnROb2RlID0gYW5jaG9yRWxlbWVudC5wYXJlbnROb2RlLy8gTm9ybWFsbHkgPGhlYWQ+XHJcbiAgICAgICAgICAgICAgICAgICAgO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEVhY2ggc3R5bGUgdGFnIHNob3VsZCBiZSBwbGFjZWQgcmlnaHQgYmVmb3JlIG91clxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGFuY2hvci4gQnkgaW5zZXJ0aW5nIGJlZm9yZSBhbmQgbm90IGFmdGVyLCB3ZSBkbyBub3RcclxuICAgICAgICAgICAgICAgICAgICAvLyBuZWVkIHRvIHRyYWNrIHRoZSBsYXN0IGluc2VydGVkIGVsZW1lbnQuXHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZWxlbWVudCwgYW5jaG9yRWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICB9O1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5pZiAobW9kdWxlLmhvdCkge1xuICBpZiAoIWNvbnRlbnQubG9jYWxzIHx8IG1vZHVsZS5ob3QuaW52YWxpZGF0ZSkge1xuICAgIHZhciBpc0VxdWFsTG9jYWxzID0gZnVuY3Rpb24gaXNFcXVhbExvY2FscyhhLCBiLCBpc05hbWVkRXhwb3J0KSB7XHJcbiAgICBpZiAoIWEgJiYgYiB8fCBhICYmICFiKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgbGV0IHA7XHJcbiAgICBmb3IocCBpbiBhKXtcclxuICAgICAgICBpZiAoaXNOYW1lZEV4cG9ydCAmJiBwID09PSAnZGVmYXVsdCcpIHtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhW3BdICE9PSBiW3BdKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmb3IocCBpbiBiKXtcclxuICAgICAgICBpZiAoaXNOYW1lZEV4cG9ydCAmJiBwID09PSAnZGVmYXVsdCcpIHtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghYVtwXSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn07XG4gICAgdmFyIG9sZExvY2FscyA9IGNvbnRlbnQubG9jYWxzO1xuXG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXG4gICAgICBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvY3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3J1bGVTZXRbMV0ucnVsZXNbOF0ub25lT2ZbMTNdLnVzZVsxXSEuLi8uLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3J1bGVTZXRbMV0ucnVsZXNbOF0ub25lT2ZbMTNdLnVzZVsyXSEuL2dsb2JhbHMuY3NzXCIsXG4gICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9jc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1s4XS5vbmVPZlsxM10udXNlWzFdIS4uLy4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1s4XS5vbmVPZlsxM10udXNlWzJdIS4vZ2xvYmFscy5jc3NcIik7XG5cbiAgICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICghaXNFcXVhbExvY2FscyhvbGRMb2NhbHMsIGNvbnRlbnQubG9jYWxzKSkge1xuICAgICAgICAgICAgICAgIG1vZHVsZS5ob3QuaW52YWxpZGF0ZSgpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgb2xkTG9jYWxzID0gY29udGVudC5sb2NhbHM7XG5cbiAgICAgICAgICAgICAgdXBkYXRlKGNvbnRlbnQpO1xuICAgICAgfVxuICAgIClcbiAgfVxuXG4gIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHtcbiAgICB1cGRhdGUoKTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./src/styles/globals.css\n"));

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ __webpack_require__.O(0, ["main"], () => (__webpack_exec__("(pages-dir-browser)/./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=private-next-pages%2F_app&page=%2F_app!"), __webpack_exec__("(pages-dir-browser)/./node_modules/next/dist/client/router.js")));
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);