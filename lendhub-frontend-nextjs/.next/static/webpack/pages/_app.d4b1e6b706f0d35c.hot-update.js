"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "(pages-dir-browser)/./src/context/LendState.js":
/*!**********************************!*\
  !*** ./src/context/LendState.js ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(pages-dir-browser)/./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(pages-dir-browser)/./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lendContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lendContext */ \"(pages-dir-browser)/./src/context/lendContext.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ethers */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/index.js\");\n/* harmony import */ var _config_contracts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../config/contracts */ \"(pages-dir-browser)/./src/config/contracts.ts\");\n/* harmony import */ var _lib_tx__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../lib/tx */ \"(pages-dir-browser)/./src/lib/tx.ts\");\n/* harmony import */ var _addresses__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../addresses */ \"(pages-dir-browser)/./src/addresses.js\");\n/* harmony import */ var _abis__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../abis */ \"(pages-dir-browser)/./src/abis/index.js\");\n/* harmony import */ var _abis__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_abis__WEBPACK_IMPORTED_MODULE_6__);\n\nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n// Utility functions\nconst numberToEthers = (number)=>{\n    return ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.parseEther(number.toString());\n};\nconst reportError = (error)=>{\n    console.error(\"LendState Error:\", JSON.stringify(error));\n    console.error(\"Error details:\", error);\n};\nconst LendState = (props)=>{\n    _s();\n    //* Declaring all the states\n    // Set metamask details\n    const [metamaskDetails, setMetamaskDetails] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        provider: null,\n        networkName: null,\n        signer: null,\n        currentAccount: null,\n        chainId: null\n    });\n    // User assets and balances\n    const [userAssets, setUserAssets] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [supplyAssets, setSupplyAssets] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [assetsToBorrow, setAssetsToBorrow] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [yourBorrows, setYourBorrows] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    // Contract details\n    const [contract, setContract] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        lendingPoolContract: null,\n        oracleContract: null\n    });\n    // Summary data\n    const [supplySummary, setSupplySummary] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        totalUSDBalance: 0,\n        weightedAvgAPY: 0,\n        totalUSDCollateral: 0\n    });\n    const [borrowSummary, setBorrowSummary] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        totalUSDBalance: 0,\n        weightedAvgAPY: 0,\n        totalBorrowPowerUsed: 0\n    });\n    // Account data\n    const [accountData, setAccountData] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        collateralUSD: \"0\",\n        debtUSD: \"0\",\n        healthFactor: \"0\"\n    });\n    // Connect wallet\n    // const connectWallet = useCallback(async () => {\n    //   console.log(\"1. Connecting to wallet...\");\n    //   const { ethereum } = window;\n    //   const failMessage = \"Please install Metamask & connect your Metamask\";\n    //   try {\n    //     if (!ethereum) {\n    //       alert(failMessage);\n    //       return;\n    //     }\n    //     const accounts = await ethereum.request({\n    //       method: \"eth_requestAccounts\",\n    //     });\n    //     // Listen for account and chain changes\n    //     ethereum.on(\"chainChanged\", () => {\n    //       window.location.reload();\n    //     });\n    //     ethereum.on(\"accountsChanged\", () => {\n    //       window.location.reload();\n    //     });\n    //     const provider = new ethers.BrowserProvider(ethereum);\n    //     const network = await provider.getNetwork();\n    //     const networkName = network.name;\n    //     const signer = await provider.getSigner();\n    //     if (accounts.length) {\n    //       let currentAddress = accounts[0];\n    //       setMetamaskDetails({\n    //         provider: provider,\n    //         networkName: networkName,\n    //         signer: signer,\n    //         currentAccount: currentAddress,\n    //         chainId: Number(network.chainId),\n    //       });\n    //       console.log(\"Connected to wallet:\", currentAddress);\n    //     } else {\n    //       alert(failMessage);\n    //       return;\n    //     }\n    //   } catch (error) {\n    //     reportError(error);\n    //   }\n    // }, []);\n    const connnectWallet = async ()=>{\n        console.log(\"1. Connecting to wallet...\");\n        const { ethereum } = window;\n        const failMessage = \"Please install Metamask & connect your Metamask\";\n        try {\n            if (!ethereum) return;\n            const account = await ethereum.request({\n                method: \"eth_requestAccounts\"\n            });\n        } catch (error) {}\n    };\n    // Get contract instance\n    const getContract = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[getContract]\": async (address, abi)=>{\n            if (!metamaskDetails.provider) return null;\n            const contract = new ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.Contract(address, abi, metamaskDetails.provider);\n            return contract;\n        }\n    }[\"LendState.useCallback[getContract]\"], [\n        metamaskDetails.provider\n    ]);\n    // Get user assets (balances)\n    const getUserAssets = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[getUserAssets]\": async ()=>{\n            console.log(\"2. Getting user assets...\");\n            try {\n                if (!metamaskDetails.provider || !metamaskDetails.currentAccount) return [];\n                const assets = await Promise.all(_config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.TOKENS.map({\n                    \"LendState.useCallback[getUserAssets]\": async (token)=>{\n                        let balance = \"0\";\n                        let balanceUSD = 0;\n                        try {\n                            if (token.isNative) {\n                                // ETH native balance\n                                const bal = await metamaskDetails.provider.getBalance(metamaskDetails.currentAccount);\n                                balance = ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.formatEther(bal);\n                            } else {\n                                // ERC20 token balance\n                                balance = await (0,_lib_tx__WEBPACK_IMPORTED_MODULE_4__.getTokenBalance)(metamaskDetails.provider, token.address, metamaskDetails.currentAccount, token.decimals);\n                            }\n                            // Get USD value\n                            const price = await getPriceUSD(token.address);\n                            balanceUSD = parseFloat(balance) * parseFloat(price);\n                            return {\n                                address: token.address,\n                                symbol: token.symbol,\n                                name: token.name,\n                                decimals: token.decimals,\n                                isNative: token.isNative,\n                                balance: balance,\n                                balanceUSD: balanceUSD,\n                                priceUSD: price\n                            };\n                        } catch (error) {\n                            console.warn(\"Error getting balance for \".concat(token.symbol, \":\"), error);\n                            return {\n                                address: token.address,\n                                symbol: token.symbol,\n                                name: token.name,\n                                decimals: token.decimals,\n                                isNative: token.isNative,\n                                balance: \"0\",\n                                balanceUSD: 0,\n                                priceUSD: \"0\"\n                            };\n                        }\n                    }\n                }[\"LendState.useCallback[getUserAssets]\"]));\n                setUserAssets(assets);\n                console.log(\"Got user assets:\", assets);\n                return assets;\n            } catch (error) {\n                reportError(error);\n                return [];\n            }\n        }\n    }[\"LendState.useCallback[getUserAssets]\"], [\n        metamaskDetails.provider,\n        metamaskDetails.currentAccount\n    ]);\n    // Get price in USD\n    const getPriceUSD = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[getPriceUSD]\": async (asset)=>{\n            if (!metamaskDetails.provider) return \"0\";\n            try {\n                const abi = [\n                    'function getAssetPrice1e18(address asset) view returns (uint256)'\n                ];\n                const oracle = new ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.Contract(_config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.PRICE_ORACLE, abi, metamaskDetails.provider);\n                const price = await oracle.getAssetPrice1e18(asset);\n                return ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.formatUnits(price, 18);\n            } catch (error) {\n                console.warn(\"Error getting price for \".concat(asset, \":\"), error);\n                return \"0\";\n            }\n        }\n    }[\"LendState.useCallback[getPriceUSD]\"], [\n        metamaskDetails.provider\n    ]);\n    // Get amount in USD\n    const getAmountInUSD = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[getAmountInUSD]\": async (address, amount)=>{\n            try {\n                const price = await getPriceUSD(address);\n                const amountInUSD = parseFloat(amount) * parseFloat(price);\n                return amountInUSD;\n            } catch (error) {\n                reportError(error);\n                return 0;\n            }\n        }\n    }[\"LendState.useCallback[getAmountInUSD]\"], [\n        getPriceUSD\n    ]);\n    // Approve tokens\n    const ApproveToContinue = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[ApproveToContinue]\": async (tokenAddress, approveAmount)=>{\n            if (!metamaskDetails.signer) {\n                throw new Error(\"No signer available\");\n            }\n            try {\n                const token = _config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.TOKENS.find({\n                    \"LendState.useCallback[ApproveToContinue].token\": (t)=>t.address.toLowerCase() === tokenAddress.toLowerCase()\n                }[\"LendState.useCallback[ApproveToContinue].token\"]);\n                if (!token) throw new Error(\"Token not found\");\n                await (0,_lib_tx__WEBPACK_IMPORTED_MODULE_4__.approveIfNeeded)(metamaskDetails.signer, tokenAddress, _config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.LENDING_POOL, approveAmount, token.decimals);\n                console.log(\"Token approved:\", tokenAddress);\n                return {\n                    status: 200,\n                    message: \"Transaction Successful...\"\n                };\n            } catch (error) {\n                reportError(error);\n                return {\n                    status: 500,\n                    message: error.message || error.reason\n                };\n            }\n        }\n    }[\"LendState.useCallback[ApproveToContinue]\"], [\n        metamaskDetails.signer\n    ]);\n    // Lend asset\n    const LendAsset = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[LendAsset]\": async (token, supplyAmount)=>{\n            if (!metamaskDetails.signer) {\n                throw new Error(\"No signer available\");\n            }\n            try {\n                const tokenInfo = _config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.TOKENS.find({\n                    \"LendState.useCallback[LendAsset].tokenInfo\": (t)=>t.address.toLowerCase() === token.toLowerCase()\n                }[\"LendState.useCallback[LendAsset].tokenInfo\"]);\n                if (!tokenInfo) throw new Error(\"Token not found\");\n                const amount = ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.parseUnits(supplyAmount, tokenInfo.decimals);\n                const tx = await (0,_lib_tx__WEBPACK_IMPORTED_MODULE_4__.lend)(metamaskDetails.signer, token, amount);\n                if (tx) {\n                    console.log(\"Asset lent successfully:\", token, supplyAmount);\n                    return {\n                        status: 200,\n                        message: \"Transaction Successful...\",\n                        hash: tx.hash\n                    };\n                }\n                throw new Error(\"Transaction failed\");\n            } catch (error) {\n                reportError(error);\n                return {\n                    status: 500,\n                    message: error.message || error.reason\n                };\n            }\n        }\n    }[\"LendState.useCallback[LendAsset]\"], [\n        metamaskDetails.signer\n    ]);\n    // Withdraw asset\n    const WithdrawAsset = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[WithdrawAsset]\": async (tokenAddress, withdrawAmount)=>{\n            if (!metamaskDetails.signer) {\n                throw new Error(\"No signer available\");\n            }\n            try {\n                const tokenInfo = _config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.TOKENS.find({\n                    \"LendState.useCallback[WithdrawAsset].tokenInfo\": (t)=>t.address.toLowerCase() === tokenAddress.toLowerCase()\n                }[\"LendState.useCallback[WithdrawAsset].tokenInfo\"]);\n                if (!tokenInfo) throw new Error(\"Token not found\");\n                const amount = ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.parseUnits(withdrawAmount, tokenInfo.decimals);\n                const tx = await (0,_lib_tx__WEBPACK_IMPORTED_MODULE_4__.withdraw)(metamaskDetails.signer, tokenAddress, amount);\n                if (tx) {\n                    console.log(\"Asset withdrawn successfully:\", tokenAddress, withdrawAmount);\n                    return {\n                        status: 200,\n                        message: \"Transaction Successful...\",\n                        hash: tx.hash\n                    };\n                }\n                throw new Error(\"Transaction failed\");\n            } catch (error) {\n                reportError(error);\n                return {\n                    status: 500,\n                    message: error.message || error.reason\n                };\n            }\n        }\n    }[\"LendState.useCallback[WithdrawAsset]\"], [\n        metamaskDetails.signer\n    ]);\n    // Borrow asset\n    const borrowAsset = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[borrowAsset]\": async (token, borrowAmount)=>{\n            if (!metamaskDetails.signer) {\n                throw new Error(\"No signer available\");\n            }\n            try {\n                const tokenInfo = _config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.TOKENS.find({\n                    \"LendState.useCallback[borrowAsset].tokenInfo\": (t)=>t.address.toLowerCase() === token.toLowerCase()\n                }[\"LendState.useCallback[borrowAsset].tokenInfo\"]);\n                if (!tokenInfo) throw new Error(\"Token not found\");\n                const amount = ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.parseUnits(borrowAmount, tokenInfo.decimals);\n                const tx = await (0,_lib_tx__WEBPACK_IMPORTED_MODULE_4__.borrow)(metamaskDetails.signer, token, amount);\n                if (tx) {\n                    console.log(\"Asset borrowed successfully:\", token, borrowAmount);\n                    return {\n                        status: 200,\n                        message: \"Transaction Successful...\",\n                        hash: tx.hash\n                    };\n                }\n                throw new Error(\"Transaction failed\");\n            } catch (error) {\n                reportError(error);\n                return {\n                    status: 500,\n                    message: error.message || error.reason\n                };\n            }\n        }\n    }[\"LendState.useCallback[borrowAsset]\"], [\n        metamaskDetails.signer\n    ]);\n    // Repay asset\n    const repayAsset = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[repayAsset]\": async (tokenAddress, repayAmount)=>{\n            if (!metamaskDetails.signer) {\n                throw new Error(\"No signer available\");\n            }\n            try {\n                const tokenInfo = _config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.TOKENS.find({\n                    \"LendState.useCallback[repayAsset].tokenInfo\": (t)=>t.address.toLowerCase() === tokenAddress.toLowerCase()\n                }[\"LendState.useCallback[repayAsset].tokenInfo\"]);\n                if (!tokenInfo) throw new Error(\"Token not found\");\n                const amount = ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.parseUnits(repayAmount, tokenInfo.decimals);\n                const tx = await (0,_lib_tx__WEBPACK_IMPORTED_MODULE_4__.repay)(metamaskDetails.signer, tokenAddress, amount);\n                if (tx) {\n                    console.log(\"Asset repaid successfully:\", tokenAddress, repayAmount);\n                    return {\n                        status: 200,\n                        message: \"Transaction Successful...\",\n                        hash: tx.hash\n                    };\n                }\n                throw new Error(\"Transaction failed\");\n            } catch (error) {\n                reportError(error);\n                return {\n                    status: 500,\n                    message: error.message || error.reason\n                };\n            }\n        }\n    }[\"LendState.useCallback[repayAsset]\"], [\n        metamaskDetails.signer\n    ]);\n    // Get account data (collateral, debt, health factor)\n    const getAccountData = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[getAccountData]\": async (user)=>{\n            try {\n                if (!metamaskDetails.provider) return null;\n                const pool = new ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.Contract(_addresses__WEBPACK_IMPORTED_MODULE_5__.LendingPoolAddress, _abis__WEBPACK_IMPORTED_MODULE_6__.LendingPoolABI.abi, metamaskDetails.provider);\n                const wallet = user || metamaskDetails.currentAccount || ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.ZeroAddress;\n                const [col, debt, hf] = await pool.getAccountData(wallet);\n                const accountData = {\n                    collateralUSD: ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.formatUnits(col, 18),\n                    debtUSD: ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.formatUnits(debt, 18),\n                    healthFactor: ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.formatUnits(hf, 18)\n                };\n                setAccountData(accountData);\n                return accountData;\n            } catch (error) {\n                reportError(error);\n                return null;\n            }\n        }\n    }[\"LendState.useCallback[getAccountData]\"], [\n        metamaskDetails.provider,\n        metamaskDetails.currentAccount\n    ]);\n    // Get your supplies\n    const getYourSupplies = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[getYourSupplies]\": async ()=>{\n            console.log(\"3. Getting your supplies...\");\n            try {\n                if (!metamaskDetails.provider || !metamaskDetails.currentAccount) return [];\n                const abi = [\n                    'function getUserReserve(address user, address asset) view returns (tuple(uint128 principal,uint128 index) supply, tuple(uint128 principal,uint128 index) borrow)'\n                ];\n                const pool = new ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.Contract(_config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.LENDING_POOL, abi, metamaskDetails.provider);\n                const supplies = await Promise.all(_config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.TOKENS.filter({\n                    \"LendState.useCallback[getYourSupplies]\": (t)=>!t.isNative\n                }[\"LendState.useCallback[getYourSupplies]\"]).map({\n                    \"LendState.useCallback[getYourSupplies]\": async (token)=>{\n                        try {\n                            const userReserve = await pool.getUserReserve(metamaskDetails.currentAccount, token.address);\n                            const supplyPrincipal = ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.formatUnits(userReserve.supply.principal, 18);\n                            const supplyIndex = userReserve.supply.index.toString();\n                            if (parseFloat(supplyPrincipal) > 0) {\n                                const price = await getPriceUSD(token.address);\n                                const balanceUSD = parseFloat(supplyPrincipal) * parseFloat(price);\n                                return {\n                                    address: token.address,\n                                    symbol: token.symbol,\n                                    name: token.name,\n                                    decimals: token.decimals,\n                                    supplyPrincipal: supplyPrincipal,\n                                    supplyIndex: supplyIndex,\n                                    balanceUSD: balanceUSD,\n                                    priceUSD: price\n                                };\n                            }\n                            return null;\n                        } catch (error) {\n                            console.warn(\"Error getting supply for \".concat(token.symbol, \":\"), error);\n                            return null;\n                        }\n                    }\n                }[\"LendState.useCallback[getYourSupplies]\"]));\n                const validSupplies = supplies.filter({\n                    \"LendState.useCallback[getYourSupplies].validSupplies\": (s)=>s !== null\n                }[\"LendState.useCallback[getYourSupplies].validSupplies\"]);\n                setSupplyAssets(validSupplies);\n                // Calculate summary\n                const totalUSDBalance = validSupplies.reduce({\n                    \"LendState.useCallback[getYourSupplies].totalUSDBalance\": (sum, asset)=>sum + asset.balanceUSD\n                }[\"LendState.useCallback[getYourSupplies].totalUSDBalance\"], 0);\n                const weightedAvgAPY = validSupplies.length > 0 ? validSupplies.reduce({\n                    \"LendState.useCallback[getYourSupplies]\": (sum, asset)=>sum + (asset.apy || 0)\n                }[\"LendState.useCallback[getYourSupplies]\"], 0) / validSupplies.length : 0;\n                const totalUSDCollateral = validSupplies.reduce({\n                    \"LendState.useCallback[getYourSupplies].totalUSDCollateral\": (sum, asset)=>sum + asset.balanceUSD\n                }[\"LendState.useCallback[getYourSupplies].totalUSDCollateral\"], 0);\n                setSupplySummary({\n                    totalUSDBalance,\n                    weightedAvgAPY,\n                    totalUSDCollateral\n                });\n                console.log(\"Got your supplies:\", validSupplies);\n                return validSupplies;\n            } catch (error) {\n                reportError(error);\n                return [];\n            }\n        }\n    }[\"LendState.useCallback[getYourSupplies]\"], [\n        metamaskDetails.provider,\n        metamaskDetails.currentAccount,\n        getPriceUSD\n    ]);\n    // Get your borrows\n    const getYourBorrows = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[getYourBorrows]\": async ()=>{\n            console.log(\"4. Getting your borrows...\");\n            try {\n                if (!metamaskDetails.provider || !metamaskDetails.currentAccount) return [];\n                const abi = [\n                    'function getUserReserve(address user, address asset) view returns (tuple(uint128 principal,uint128 index) supply, tuple(uint128 principal,uint128 index) borrow)'\n                ];\n                const pool = new ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.Contract(_config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.LENDING_POOL, abi, metamaskDetails.provider);\n                const borrows = await Promise.all(_config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.TOKENS.filter({\n                    \"LendState.useCallback[getYourBorrows]\": (t)=>!t.isNative\n                }[\"LendState.useCallback[getYourBorrows]\"]).map({\n                    \"LendState.useCallback[getYourBorrows]\": async (token)=>{\n                        try {\n                            const userReserve = await pool.getUserReserve(metamaskDetails.currentAccount, token.address);\n                            const borrowPrincipal = ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.formatUnits(userReserve.borrow.principal, 18);\n                            const borrowIndex = userReserve.borrow.index.toString();\n                            if (parseFloat(borrowPrincipal) > 0) {\n                                const price = await getPriceUSD(token.address);\n                                const balanceUSD = parseFloat(borrowPrincipal) * parseFloat(price);\n                                return {\n                                    address: token.address,\n                                    symbol: token.symbol,\n                                    name: token.name,\n                                    decimals: token.decimals,\n                                    borrowPrincipal: borrowPrincipal,\n                                    borrowIndex: borrowIndex,\n                                    balanceUSD: balanceUSD,\n                                    priceUSD: price\n                                };\n                            }\n                            return null;\n                        } catch (error) {\n                            console.warn(\"Error getting borrow for \".concat(token.symbol, \":\"), error);\n                            return null;\n                        }\n                    }\n                }[\"LendState.useCallback[getYourBorrows]\"]));\n                const validBorrows = borrows.filter({\n                    \"LendState.useCallback[getYourBorrows].validBorrows\": (b)=>b !== null\n                }[\"LendState.useCallback[getYourBorrows].validBorrows\"]);\n                setYourBorrows(validBorrows);\n                // Calculate summary\n                const totalUSDBalance = validBorrows.reduce({\n                    \"LendState.useCallback[getYourBorrows].totalUSDBalance\": (sum, asset)=>sum + asset.balanceUSD\n                }[\"LendState.useCallback[getYourBorrows].totalUSDBalance\"], 0);\n                const weightedAvgAPY = validBorrows.length > 0 ? validBorrows.reduce({\n                    \"LendState.useCallback[getYourBorrows]\": (sum, asset)=>sum + (asset.apy || 0)\n                }[\"LendState.useCallback[getYourBorrows]\"], 0) / validBorrows.length : 0;\n                const totalBorrowPowerUsed = totalUSDBalance;\n                setBorrowSummary({\n                    totalUSDBalance,\n                    weightedAvgAPY,\n                    totalBorrowPowerUsed\n                });\n                console.log(\"Got your borrows:\", validBorrows);\n                return validBorrows;\n            } catch (error) {\n                reportError(error);\n                return [];\n            }\n        }\n    }[\"LendState.useCallback[getYourBorrows]\"], [\n        metamaskDetails.provider,\n        metamaskDetails.currentAccount,\n        getPriceUSD\n    ]);\n    // Get assets to borrow\n    const getAssetsToBorrow = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[getAssetsToBorrow]\": async ()=>{\n            console.log(\"5. Getting assets to borrow...\");\n            try {\n                if (!metamaskDetails.provider) return [];\n                const abi = [\n                    'function reserves(address) view returns (uint128 reserveCash, uint128 totalDebtPrincipal, uint128 liquidityIndex, uint128 variableBorrowIndex, uint64 liquidityRateRayPerSec, uint64 variableBorrowRateRayPerSec, uint16 reserveFactorBps, uint16 ltvBps, uint16 liqThresholdBps, uint16 liqBonusBps, uint16 closeFactorBps, uint8 decimals, bool isBorrowable, uint16 optimalUBps, uint64 baseRateRayPerSec, uint64 slope1RayPerSec, uint64 slope2RayPerSec, uint40 lastUpdate)'\n                ];\n                const pool = new ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.Contract(_config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.LENDING_POOL, abi, metamaskDetails.provider);\n                const assets = await Promise.all(_config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.TOKENS.filter({\n                    \"LendState.useCallback[getAssetsToBorrow]\": (t)=>!t.isNative\n                }[\"LendState.useCallback[getAssetsToBorrow]\"]).map({\n                    \"LendState.useCallback[getAssetsToBorrow]\": async (token)=>{\n                        try {\n                            const reserve = await pool.reserves(token.address);\n                            const isBorrowable = Boolean(reserve.isBorrowable);\n                            const reserveCash = ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.formatUnits(reserve.reserveCash, 18);\n                            const price = await getPriceUSD(token.address);\n                            if (isBorrowable && parseFloat(reserveCash) > 0) {\n                                return {\n                                    address: token.address,\n                                    symbol: token.symbol,\n                                    name: token.name,\n                                    decimals: token.decimals,\n                                    reserveCash: reserveCash,\n                                    isBorrowable: isBorrowable,\n                                    priceUSD: price,\n                                    ltvBps: Number(reserve.ltvBps),\n                                    liqThresholdBps: Number(reserve.liqThresholdBps)\n                                };\n                            }\n                            return null;\n                        } catch (error) {\n                            console.warn(\"Error getting borrow asset \".concat(token.symbol, \":\"), error);\n                            return null;\n                        }\n                    }\n                }[\"LendState.useCallback[getAssetsToBorrow]\"]));\n                const validAssets = assets.filter({\n                    \"LendState.useCallback[getAssetsToBorrow].validAssets\": (a)=>a !== null\n                }[\"LendState.useCallback[getAssetsToBorrow].validAssets\"]);\n                setAssetsToBorrow(validAssets);\n                console.log(\"Got assets to borrow:\", validAssets);\n                return validAssets;\n            } catch (error) {\n                reportError(error);\n                return [];\n            }\n        }\n    }[\"LendState.useCallback[getAssetsToBorrow]\"], [\n        metamaskDetails.provider,\n        getPriceUSD\n    ]);\n    // Wrap ETH to WETH\n    const wrapEth = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[wrapEth]\": async (amountEth)=>{\n            if (!metamaskDetails.signer) {\n                throw new Error(\"No signer available\");\n            }\n            try {\n                const data = '0xd0e30db0'; // deposit()\n                const tx = await metamaskDetails.signer.sendTransaction({\n                    to: _config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.WETH,\n                    value: ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.parseEther(amountEth),\n                    data\n                });\n                await tx.wait();\n                console.log(\"ETH wrapped to WETH:\", amountEth);\n                return {\n                    status: 200,\n                    message: \"Transaction Successful...\",\n                    hash: tx.hash\n                };\n            } catch (error) {\n                reportError(error);\n                return {\n                    status: 500,\n                    message: error.message || error.reason\n                };\n            }\n        }\n    }[\"LendState.useCallback[wrapEth]\"], [\n        metamaskDetails.signer\n    ]);\n    // Unwrap WETH to ETH\n    const unwrapWeth = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[unwrapWeth]\": async (amountEth)=>{\n            if (!metamaskDetails.signer) {\n                throw new Error(\"No signer available\");\n            }\n            try {\n                const abi = [\n                    'function withdraw(uint256 wad)'\n                ];\n                const weth = new ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.Contract(_config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.WETH, abi, metamaskDetails.signer);\n                const tx = await weth.withdraw(ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.parseEther(amountEth));\n                await tx.wait();\n                console.log(\"WETH unwrapped to ETH:\", amountEth);\n                return {\n                    status: 200,\n                    message: \"Transaction Successful...\",\n                    hash: tx.hash\n                };\n            } catch (error) {\n                reportError(error);\n                return {\n                    status: 500,\n                    message: error.message || error.reason\n                };\n            }\n        }\n    }[\"LendState.useCallback[unwrapWeth]\"], [\n        metamaskDetails.signer\n    ]);\n    // Refresh all data\n    const refresh = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[refresh]\": async ()=>{\n            try {\n                await Promise.all([\n                    getUserAssets(),\n                    getYourSupplies(),\n                    getYourBorrows(),\n                    getAssetsToBorrow(),\n                    getAccountData()\n                ]);\n                console.log(\"All data refreshed\");\n            } catch (error) {\n                reportError(error);\n            }\n        }\n    }[\"LendState.useCallback[refresh]\"], [\n        getUserAssets,\n        getYourSupplies,\n        getYourBorrows,\n        getAssetsToBorrow,\n        getAccountData\n    ]);\n    // Update interests (accrue)\n    const updateInterests = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[updateInterests]\": async (asset)=>{\n            if (!metamaskDetails.signer) {\n                throw new Error(\"No signer available\");\n            }\n            try {\n                const abi = [\n                    'function accruePublic(address asset)'\n                ];\n                const pool = new ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.Contract(_config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.LENDING_POOL, abi, metamaskDetails.signer);\n                const tx = await pool.accruePublic(asset);\n                await tx.wait();\n                console.log(\"Interests updated for asset:\", asset);\n                return {\n                    status: 200,\n                    message: \"Transaction Successful...\"\n                };\n            } catch (error) {\n                reportError(error);\n                return {\n                    status: 500,\n                    message: error.message || error.reason\n                };\n            }\n        }\n    }[\"LendState.useCallback[updateInterests]\"], [\n        metamaskDetails.signer\n    ]);\n    // Get user total available balance\n    const getUserTotalAvailableBalance = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[getUserTotalAvailableBalance]\": async ()=>{\n            try {\n                if (!metamaskDetails.provider || !metamaskDetails.currentAccount) return 0;\n                const abi = [\n                    'function getUserTotalAvailableBalanceInUSD(address user, uint256 assetType) view returns (uint256)'\n                ];\n                const pool = new ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.Contract(_config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.LENDING_POOL, abi, metamaskDetails.provider);\n                const maxAmount = await pool.getUserTotalAvailableBalanceInUSD(metamaskDetails.currentAccount, 1);\n                return Number(ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.formatUnits(maxAmount, 18));\n            } catch (error) {\n                reportError(error);\n                return 0;\n            }\n        }\n    }[\"LendState.useCallback[getUserTotalAvailableBalance]\"], [\n        metamaskDetails.provider,\n        metamaskDetails.currentAccount\n    ]);\n    // Get tokens per USD amount\n    const getTokensPerUSDAmount = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[getTokensPerUSDAmount]\": async (token, amount)=>{\n            try {\n                if (!metamaskDetails.provider) return 0;\n                const abi = [\n                    'function getTokensPerUSDAmount(address token, uint256 amount) view returns (uint256)'\n                ];\n                const helper = new ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.Contract(_config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.PRICE_ORACLE, abi, metamaskDetails.provider);\n                const maxQty = await helper.getTokensPerUSDAmount(token, ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.parseUnits(amount.toString(), 18));\n                return Number(ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.formatUnits(maxQty, 18));\n            } catch (error) {\n                reportError(error);\n                return 0;\n            }\n        }\n    }[\"LendState.useCallback[getTokensPerUSDAmount]\"], [\n        metamaskDetails.provider\n    ]);\n    // Objectify supplied assets (format data)\n    const objectifySuppliedAssets = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[objectifySuppliedAssets]\": async (assets)=>{\n            const assetsList = [];\n            for(let i = 0; i < assets.length; i++){\n                const token = assets[i].token;\n                let lendQty = assets[i].lentQty;\n                const amountInUSD = await getAmountInUSD(token, lendQty);\n                lendQty = Number(assets[i].lentQty) / 1e18;\n                const maxSupplyAmount = await getUserTotalAvailableBalance();\n                const maxQty = await getTokensPerUSDAmount(token, maxSupplyAmount);\n                const qty = lendQty <= maxQty ? lendQty : maxQty;\n                assetsList.push({\n                    token: assets[i].token,\n                    balance: lendQty,\n                    apy: Number(assets[i].lentApy),\n                    balanceInUSD: amountInUSD,\n                    maxSupply: qty\n                });\n            }\n            return assetsList;\n        }\n    }[\"LendState.useCallback[objectifySuppliedAssets]\"], [\n        getAmountInUSD,\n        getUserTotalAvailableBalance,\n        getTokensPerUSDAmount\n    ]);\n    // Objectify borrowed assets (format data)\n    const objectifyBorrowedAssets = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[objectifyBorrowedAssets]\": async (assets)=>{\n            const borrowsList = [];\n            for(let i = 0; i < assets.length; i++){\n                const token = assets[i].token;\n                const borrowQty = assets[i].borrowQty;\n                const borrowApy = assets[i].borrowApy;\n                const amountInUSD = await getAmountInUSD(token, borrowQty);\n                borrowsList.push({\n                    token: token,\n                    borrowQty: Number(borrowQty),\n                    borrowApy: Number(borrowApy),\n                    borrowedBalInUSD: amountInUSD\n                });\n            }\n            return borrowsList;\n        }\n    }[\"LendState.useCallback[objectifyBorrowedAssets]\"], [\n        getAmountInUSD\n    ]);\n    // Merge objectified assets with token info\n    const mergeObjectifiedAssets = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[mergeObjectifiedAssets]\": (assets)=>{\n            const result = _config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.TOKENS.filter({\n                \"LendState.useCallback[mergeObjectifiedAssets].result\": (tokenList)=>{\n                    return assets.some({\n                        \"LendState.useCallback[mergeObjectifiedAssets].result\": (assetList)=>{\n                            return tokenList.address.toLowerCase() === assetList.token.toLowerCase();\n                        }\n                    }[\"LendState.useCallback[mergeObjectifiedAssets].result\"]);\n                }\n            }[\"LendState.useCallback[mergeObjectifiedAssets].result\"]).map({\n                \"LendState.useCallback[mergeObjectifiedAssets].result\": (assetObj)=>({\n                        ...assets.find({\n                            \"LendState.useCallback[mergeObjectifiedAssets].result\": (item)=>item.token.toLowerCase() === assetObj.address.toLowerCase()\n                        }[\"LendState.useCallback[mergeObjectifiedAssets].result\"]),\n                        ...assetObj\n                    })\n            }[\"LendState.useCallback[mergeObjectifiedAssets].result\"]);\n            return result;\n        }\n    }[\"LendState.useCallback[mergeObjectifiedAssets]\"], []);\n    // Context value\n    const contextValue = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)({\n        \"LendState.useMemo[contextValue]\": ()=>({\n                // State\n                metamaskDetails,\n                userAssets,\n                supplyAssets,\n                assetsToBorrow,\n                yourBorrows,\n                supplySummary,\n                borrowSummary,\n                accountData,\n                contract,\n                // Wallet functions\n                connectWallet,\n                refresh,\n                // Asset functions\n                getUserAssets,\n                getYourSupplies,\n                getYourBorrows,\n                getAssetsToBorrow,\n                // Transaction functions\n                ApproveToContinue,\n                LendAsset,\n                WithdrawAsset,\n                borrowAsset,\n                repayAsset,\n                // Utility functions\n                getContract,\n                getPriceUSD,\n                getAmountInUSD,\n                numberToEthers,\n                reportError,\n                // ETH/WETH functions\n                wrapEth,\n                unwrapWeth,\n                // Account functions\n                getAccountData,\n                getUserTotalAvailableBalance,\n                getTokensPerUSDAmount,\n                // Data processing functions\n                objectifySuppliedAssets,\n                objectifyBorrowedAssets,\n                mergeObjectifiedAssets,\n                // Interest functions\n                updateInterests\n            })\n    }[\"LendState.useMemo[contextValue]\"], [\n        metamaskDetails,\n        userAssets,\n        supplyAssets,\n        assetsToBorrow,\n        yourBorrows,\n        supplySummary,\n        borrowSummary,\n        accountData,\n        contract,\n        connectWallet,\n        refresh,\n        getUserAssets,\n        getYourSupplies,\n        getYourBorrows,\n        getAssetsToBorrow,\n        ApproveToContinue,\n        LendAsset,\n        WithdrawAsset,\n        borrowAsset,\n        repayAsset,\n        getContract,\n        getPriceUSD,\n        getAmountInUSD,\n        wrapEth,\n        unwrapWeth,\n        getAccountData,\n        getUserTotalAvailableBalance,\n        getTokensPerUSDAmount,\n        objectifySuppliedAssets,\n        objectifyBorrowedAssets,\n        mergeObjectifiedAssets,\n        updateInterests\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_lendContext__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Provider, {\n        value: contextValue,\n        children: props.children\n    }, void 0, false, {\n        fileName: \"D:\\\\Do_an2\\\\lendhub_v2\\\\lendhub-frontend-nextjs\\\\src\\\\context\\\\LendState.js\",\n        lineNumber: 802,\n        columnNumber: 5\n    }, undefined);\n};\n_s(LendState, \"zPczYCn4MS+y/Petqozu+2/xfEg=\");\n_c = LendState;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LendState);\nvar _c;\n$RefreshReg$(_c, \"LendState\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL3NyYy9jb250ZXh0L0xlbmRTdGF0ZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUE4RDtBQUN0QjtBQUNSO0FBQ2E7QUFDaUg7QUFDMUU7QUFDZjtBQUVyRSxvQkFBb0I7QUFDcEIsTUFBTXdCLGlCQUFpQixDQUFDQztJQUN0QixPQUFPcEIsMENBQU1BLENBQUNxQixVQUFVLENBQUNELE9BQU9FLFFBQVE7QUFDMUM7QUFFQSxNQUFNQyxjQUFjLENBQUNDO0lBQ25CQyxRQUFRRCxLQUFLLENBQUMsb0JBQW9CRSxLQUFLQyxTQUFTLENBQUNIO0lBQ2pEQyxRQUFRRCxLQUFLLENBQUMsa0JBQWtCQTtBQUNsQztBQUVBLE1BQU1JLFlBQVksQ0FBQ0M7O0lBQ2pCLDRCQUE0QjtJQUU1Qix1QkFBdUI7SUFDdkIsTUFBTSxDQUFDQyxpQkFBaUJDLG1CQUFtQixHQUFHbkMsK0NBQVFBLENBQUM7UUFDckRvQyxVQUFVO1FBQ1ZDLGFBQWE7UUFDYkMsUUFBUTtRQUNSQyxnQkFBZ0I7UUFDaEJDLFNBQVM7SUFDWDtJQUVBLDJCQUEyQjtJQUMzQixNQUFNLENBQUNDLFlBQVlDLGNBQWMsR0FBRzFDLCtDQUFRQSxDQUFDLEVBQUU7SUFDL0MsTUFBTSxDQUFDMkMsY0FBY0MsZ0JBQWdCLEdBQUc1QywrQ0FBUUEsQ0FBQyxFQUFFO0lBQ25ELE1BQU0sQ0FBQzZDLGdCQUFnQkMsa0JBQWtCLEdBQUc5QywrQ0FBUUEsQ0FBQyxFQUFFO0lBQ3ZELE1BQU0sQ0FBQytDLGFBQWFDLGVBQWUsR0FBR2hELCtDQUFRQSxDQUFDLEVBQUU7SUFFakQsbUJBQW1CO0lBQ25CLE1BQU0sQ0FBQ2lELFVBQVVDLFlBQVksR0FBR2xELCtDQUFRQSxDQUFDO1FBQ3ZDbUQscUJBQXFCO1FBQ3JCQyxnQkFBZ0I7SUFDbEI7SUFFQSxlQUFlO0lBQ2YsTUFBTSxDQUFDQyxlQUFlQyxpQkFBaUIsR0FBR3RELCtDQUFRQSxDQUFDO1FBQ2pEdUQsaUJBQWlC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QyxXQUFXO2tGQUFHO3dCQUNyRixHQUFHa0csUUFBUTtvQkFDYjs7WUFDRixPQUFPSjtRQUNUO3dEQUFHLEVBQUU7SUFFTCxnQkFBZ0I7SUFDaEIsTUFBTU0sZUFBZW5OLDhDQUFPQTsyQ0FBQyxJQUFPO2dCQUNsQyxRQUFRO2dCQUNSZ0M7Z0JBQ0FPO2dCQUNBRTtnQkFDQUU7Z0JBQ0FFO2dCQUNBTTtnQkFDQUs7Z0JBQ0FHO2dCQUNBWjtnQkFFQSxtQkFBbUI7Z0JBQ25CcUs7Z0JBQ0FqQztnQkFFQSxrQkFBa0I7Z0JBQ2xCdkc7Z0JBQ0E0RDtnQkFDQWdCO2dCQUNBTTtnQkFFQSx3QkFBd0I7Z0JBQ3hCckQ7Z0JBQ0FXO2dCQUNBTTtnQkFDQUU7Z0JBQ0FFO2dCQUVBLG9CQUFvQjtnQkFDcEJ0RDtnQkFDQW1CO2dCQUNBVztnQkFDQWpGO2dCQUNBSTtnQkFFQSxxQkFBcUI7Z0JBQ3JCZ0o7Z0JBQ0FRO2dCQUVBLG9CQUFvQjtnQkFDcEJqRDtnQkFDQXNEO2dCQUNBRztnQkFFQSw0QkFBNEI7Z0JBQzVCRztnQkFDQVc7Z0JBQ0FLO2dCQUVBLHFCQUFxQjtnQkFDckJ4QjtZQUNGOzBDQUFJO1FBQ0ZwSjtRQUNBTztRQUNBRTtRQUNBRTtRQUNBRTtRQUNBTTtRQUNBSztRQUNBRztRQUNBWjtRQUNBcUs7UUFDQWpDO1FBQ0F2RztRQUNBNEQ7UUFDQWdCO1FBQ0FNO1FBQ0FyRDtRQUNBVztRQUNBTTtRQUNBRTtRQUNBRTtRQUNBdEQ7UUFDQW1CO1FBQ0FXO1FBQ0FtRTtRQUNBUTtRQUNBakQ7UUFDQXNEO1FBQ0FHO1FBQ0FHO1FBQ0FXO1FBQ0FLO1FBQ0F4QjtLQUNEO0lBRUQscUJBQ0UsOERBQUNuTCw2REFBb0I7UUFBQzhLLE9BQU9vQztrQkFDMUJwTCxNQUFNdUwsUUFBUTs7Ozs7O0FBR3JCO0dBbnhCTXhMO0tBQUFBO0FBcXhCTixpRUFBZUEsU0FBU0EsRUFBQyIsInNvdXJjZXMiOlsiRDpcXERvX2FuMlxcbGVuZGh1Yl92MlxcbGVuZGh1Yi1mcm9udGVuZC1uZXh0anNcXHNyY1xcY29udGV4dFxcTGVuZFN0YXRlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlQ2FsbGJhY2ssIHVzZU1lbW8gfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBsZW5kQ29udGV4dCBmcm9tIFwiLi9sZW5kQ29udGV4dFwiO1xuaW1wb3J0IHsgZXRoZXJzIH0gZnJvbSBcImV0aGVyc1wiO1xuaW1wb3J0IHsgQ09ORklHIH0gZnJvbSBcIi4uL2NvbmZpZy9jb250cmFjdHNcIjtcbmltcG9ydCB7IGdldFRva2VuQmFsYW5jZSwgZ2V0VG9rZW5BbGxvd2FuY2UsIGFwcHJvdmVJZk5lZWRlZCwgbGVuZCBhcyBsZW5kVHgsIHdpdGhkcmF3IGFzIHdpdGhkcmF3VHgsIGJvcnJvdyBhcyBib3Jyb3dUeCwgcmVwYXkgYXMgcmVwYXlUeCB9IGZyb20gXCIuLi9saWIvdHhcIjtcbmltcG9ydCB7IEVUSEFkZHJlc3MsIExlbmRpbmdQb29sQWRkcmVzcywgTGVuZGluZ0hlbHBlckFkZHJlc3MgfSBmcm9tIFwiLi4vYWRkcmVzc2VzXCI7XG5pbXBvcnQgeyBUb2tlbkFCSSwgTGVuZGluZ1Bvb2xBQkksIExlbmRpbmdIZWxwZXJBQkkgfSBmcm9tIFwiLi4vYWJpc1wiO1xuXG4vLyBVdGlsaXR5IGZ1bmN0aW9uc1xuY29uc3QgbnVtYmVyVG9FdGhlcnMgPSAobnVtYmVyKSA9PiB7XG4gIHJldHVybiBldGhlcnMucGFyc2VFdGhlcihudW1iZXIudG9TdHJpbmcoKSk7XG59O1xuXG5jb25zdCByZXBvcnRFcnJvciA9IChlcnJvcikgPT4ge1xuICBjb25zb2xlLmVycm9yKFwiTGVuZFN0YXRlIEVycm9yOlwiLCBKU09OLnN0cmluZ2lmeShlcnJvcikpO1xuICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZGV0YWlsczpcIiwgZXJyb3IpO1xufTtcblxuY29uc3QgTGVuZFN0YXRlID0gKHByb3BzKSA9PiB7XG4gIC8vKiBEZWNsYXJpbmcgYWxsIHRoZSBzdGF0ZXNcblxuICAvLyBTZXQgbWV0YW1hc2sgZGV0YWlsc1xuICBjb25zdCBbbWV0YW1hc2tEZXRhaWxzLCBzZXRNZXRhbWFza0RldGFpbHNdID0gdXNlU3RhdGUoe1xuICAgIHByb3ZpZGVyOiBudWxsLFxuICAgIG5ldHdvcmtOYW1lOiBudWxsLFxuICAgIHNpZ25lcjogbnVsbCxcbiAgICBjdXJyZW50QWNjb3VudDogbnVsbCxcbiAgICBjaGFpbklkOiBudWxsLFxuICB9KTtcblxuICAvLyBVc2VyIGFzc2V0cyBhbmQgYmFsYW5jZXNcbiAgY29uc3QgW3VzZXJBc3NldHMsIHNldFVzZXJBc3NldHNdID0gdXNlU3RhdGUoW10pO1xuICBjb25zdCBbc3VwcGx5QXNzZXRzLCBzZXRTdXBwbHlBc3NldHNdID0gdXNlU3RhdGUoW10pO1xuICBjb25zdCBbYXNzZXRzVG9Cb3Jyb3csIHNldEFzc2V0c1RvQm9ycm93XSA9IHVzZVN0YXRlKFtdKTtcbiAgY29uc3QgW3lvdXJCb3Jyb3dzLCBzZXRZb3VyQm9ycm93c10gPSB1c2VTdGF0ZShbXSk7XG5cbiAgLy8gQ29udHJhY3QgZGV0YWlsc1xuICBjb25zdCBbY29udHJhY3QsIHNldENvbnRyYWN0XSA9IHVzZVN0YXRlKHtcbiAgICBsZW5kaW5nUG9vbENvbnRyYWN0OiBudWxsLFxuICAgIG9yYWNsZUNvbnRyYWN0OiBudWxsLFxuICB9KTtcblxuICAvLyBTdW1tYXJ5IGRhdGFcbiAgY29uc3QgW3N1cHBseVN1bW1hcnksIHNldFN1cHBseVN1bW1hcnldID0gdXNlU3RhdGUoe1xuICAgIHRvdGFsVVNEQmFsYW5jZTogMCxcbiAgICB3ZWlnaHRlZEF2Z0FQWTogMCxcbiAgICB0b3RhbFVTRENvbGxhdGVyYWw6IDAsXG4gIH0pO1xuXG4gIGNvbnN0IFtib3Jyb3dTdW1tYXJ5LCBzZXRCb3Jyb3dTdW1tYXJ5XSA9IHVzZVN0YXRlKHtcbiAgICB0b3RhbFVTREJhbGFuY2U6IDAsXG4gICAgd2VpZ2h0ZWRBdmdBUFk6IDAsXG4gICAgdG90YWxCb3Jyb3dQb3dlclVzZWQ6IDAsXG4gIH0pO1xuXG4gIC8vIEFjY291bnQgZGF0YVxuICBjb25zdCBbYWNjb3VudERhdGEsIHNldEFjY291bnREYXRhXSA9IHVzZVN0YXRlKHtcbiAgICBjb2xsYXRlcmFsVVNEOiBcIjBcIixcbiAgICBkZWJ0VVNEOiBcIjBcIixcbiAgICBoZWFsdGhGYWN0b3I6IFwiMFwiLFxuICB9KTtcblxuICAvLyBDb25uZWN0IHdhbGxldFxuICAvLyBjb25zdCBjb25uZWN0V2FsbGV0ID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xuICAvLyAgIGNvbnNvbGUubG9nKFwiMS4gQ29ubmVjdGluZyB0byB3YWxsZXQuLi5cIik7XG4gIC8vICAgY29uc3QgeyBldGhlcmV1bSB9ID0gd2luZG93O1xuICAvLyAgIGNvbnN0IGZhaWxNZXNzYWdlID0gXCJQbGVhc2UgaW5zdGFsbCBNZXRhbWFzayAmIGNvbm5lY3QgeW91ciBNZXRhbWFza1wiO1xuICAgIFxuICAvLyAgIHRyeSB7XG4gIC8vICAgICBpZiAoIWV0aGVyZXVtKSB7XG4gIC8vICAgICAgIGFsZXJ0KGZhaWxNZXNzYWdlKTtcbiAgLy8gICAgICAgcmV0dXJuO1xuICAvLyAgICAgfVxuXG4gIC8vICAgICBjb25zdCBhY2NvdW50cyA9IGF3YWl0IGV0aGVyZXVtLnJlcXVlc3Qoe1xuICAvLyAgICAgICBtZXRob2Q6IFwiZXRoX3JlcXVlc3RBY2NvdW50c1wiLFxuICAvLyAgICAgfSk7XG5cbiAgLy8gICAgIC8vIExpc3RlbiBmb3IgYWNjb3VudCBhbmQgY2hhaW4gY2hhbmdlc1xuICAvLyAgICAgZXRoZXJldW0ub24oXCJjaGFpbkNoYW5nZWRcIiwgKCkgPT4ge1xuICAvLyAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gIC8vICAgICB9KTtcbiAgLy8gICAgIGV0aGVyZXVtLm9uKFwiYWNjb3VudHNDaGFuZ2VkXCIsICgpID0+IHtcbiAgLy8gICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICAvLyAgICAgfSk7XG5cbiAgLy8gICAgIGNvbnN0IHByb3ZpZGVyID0gbmV3IGV0aGVycy5Ccm93c2VyUHJvdmlkZXIoZXRoZXJldW0pO1xuICAvLyAgICAgY29uc3QgbmV0d29yayA9IGF3YWl0IHByb3ZpZGVyLmdldE5ldHdvcmsoKTtcbiAgLy8gICAgIGNvbnN0IG5ldHdvcmtOYW1lID0gbmV0d29yay5uYW1lO1xuICAvLyAgICAgY29uc3Qgc2lnbmVyID0gYXdhaXQgcHJvdmlkZXIuZ2V0U2lnbmVyKCk7XG5cbiAgLy8gICAgIGlmIChhY2NvdW50cy5sZW5ndGgpIHtcbiAgLy8gICAgICAgbGV0IGN1cnJlbnRBZGRyZXNzID0gYWNjb3VudHNbMF07XG4gIC8vICAgICAgIHNldE1ldGFtYXNrRGV0YWlscyh7XG4gIC8vICAgICAgICAgcHJvdmlkZXI6IHByb3ZpZGVyLFxuICAvLyAgICAgICAgIG5ldHdvcmtOYW1lOiBuZXR3b3JrTmFtZSxcbiAgLy8gICAgICAgICBzaWduZXI6IHNpZ25lcixcbiAgLy8gICAgICAgICBjdXJyZW50QWNjb3VudDogY3VycmVudEFkZHJlc3MsXG4gIC8vICAgICAgICAgY2hhaW5JZDogTnVtYmVyKG5ldHdvcmsuY2hhaW5JZCksXG4gIC8vICAgICAgIH0pO1xuICAvLyAgICAgICBjb25zb2xlLmxvZyhcIkNvbm5lY3RlZCB0byB3YWxsZXQ6XCIsIGN1cnJlbnRBZGRyZXNzKTtcbiAgLy8gICAgIH0gZWxzZSB7XG4gIC8vICAgICAgIGFsZXJ0KGZhaWxNZXNzYWdlKTtcbiAgLy8gICAgICAgcmV0dXJuO1xuICAvLyAgICAgfVxuICAvLyAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gIC8vICAgICByZXBvcnRFcnJvcihlcnJvcik7XG4gIC8vICAgfVxuICAvLyB9LCBbXSk7XG5cbiAgY29uc3QgY29ubm5lY3RXYWxsZXQ9YXN5bmMoKT0+e1xuICAgIGNvbnNvbGUubG9nKFwiMS4gQ29ubmVjdGluZyB0byB3YWxsZXQuLi5cIik7XG4gICAgY29uc3QgeyBldGhlcmV1bSB9ID0gd2luZG93O1xuICAgIGNvbnN0IGZhaWxNZXNzYWdlID0gXCJQbGVhc2UgaW5zdGFsbCBNZXRhbWFzayAmIGNvbm5lY3QgeW91ciBNZXRhbWFza1wiOyAgXG4gICAgdHJ5IHtcbiAgICAgIGlmKCFldGhlcmV1bSkgcmV0dXJuO1xuICAgICAgY29uc3QgYWNjb3VudCA9IGF3YWl0IGV0aGVyZXVtLnJlcXVlc3Qoe21ldGhvZDpcImV0aF9yZXF1ZXN0QWNjb3VudHNcIn0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBcbiAgICB9XG4gIH1cblxuICAvLyBHZXQgY29udHJhY3QgaW5zdGFuY2VcbiAgY29uc3QgZ2V0Q29udHJhY3QgPSB1c2VDYWxsYmFjayhhc3luYyAoYWRkcmVzcywgYWJpKSA9PiB7XG4gICAgaWYgKCFtZXRhbWFza0RldGFpbHMucHJvdmlkZXIpIHJldHVybiBudWxsO1xuICAgIGNvbnN0IGNvbnRyYWN0ID0gbmV3IGV0aGVycy5Db250cmFjdChhZGRyZXNzLCBhYmksIG1ldGFtYXNrRGV0YWlscy5wcm92aWRlcik7XG4gICAgcmV0dXJuIGNvbnRyYWN0O1xuICB9LCBbbWV0YW1hc2tEZXRhaWxzLnByb3ZpZGVyXSk7XG5cbiAgLy8gR2V0IHVzZXIgYXNzZXRzIChiYWxhbmNlcylcbiAgY29uc3QgZ2V0VXNlckFzc2V0cyA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICBjb25zb2xlLmxvZyhcIjIuIEdldHRpbmcgdXNlciBhc3NldHMuLi5cIik7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghbWV0YW1hc2tEZXRhaWxzLnByb3ZpZGVyIHx8ICFtZXRhbWFza0RldGFpbHMuY3VycmVudEFjY291bnQpIHJldHVybiBbXTtcblxuICAgICAgY29uc3QgYXNzZXRzID0gYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgICAgIENPTkZJRy5UT0tFTlMubWFwKGFzeW5jICh0b2tlbikgPT4ge1xuICAgICAgICAgIGxldCBiYWxhbmNlID0gXCIwXCI7XG4gICAgICAgICAgbGV0IGJhbGFuY2VVU0QgPSAwO1xuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICh0b2tlbi5pc05hdGl2ZSkge1xuICAgICAgICAgICAgICAvLyBFVEggbmF0aXZlIGJhbGFuY2VcbiAgICAgICAgICAgICAgY29uc3QgYmFsID0gYXdhaXQgbWV0YW1hc2tEZXRhaWxzLnByb3ZpZGVyLmdldEJhbGFuY2UobWV0YW1hc2tEZXRhaWxzLmN1cnJlbnRBY2NvdW50KTtcbiAgICAgICAgICAgICAgYmFsYW5jZSA9IGV0aGVycy5mb3JtYXRFdGhlcihiYWwpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gRVJDMjAgdG9rZW4gYmFsYW5jZVxuICAgICAgICAgICAgICBiYWxhbmNlID0gYXdhaXQgZ2V0VG9rZW5CYWxhbmNlKFxuICAgICAgICAgICAgICAgIG1ldGFtYXNrRGV0YWlscy5wcm92aWRlcixcbiAgICAgICAgICAgICAgICB0b2tlbi5hZGRyZXNzLFxuICAgICAgICAgICAgICAgIG1ldGFtYXNrRGV0YWlscy5jdXJyZW50QWNjb3VudCxcbiAgICAgICAgICAgICAgICB0b2tlbi5kZWNpbWFsc1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBHZXQgVVNEIHZhbHVlXG4gICAgICAgICAgICBjb25zdCBwcmljZSA9IGF3YWl0IGdldFByaWNlVVNEKHRva2VuLmFkZHJlc3MpO1xuICAgICAgICAgICAgYmFsYW5jZVVTRCA9IHBhcnNlRmxvYXQoYmFsYW5jZSkgKiBwYXJzZUZsb2F0KHByaWNlKTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgYWRkcmVzczogdG9rZW4uYWRkcmVzcyxcbiAgICAgICAgICAgICAgc3ltYm9sOiB0b2tlbi5zeW1ib2wsXG4gICAgICAgICAgICAgIG5hbWU6IHRva2VuLm5hbWUsXG4gICAgICAgICAgICAgIGRlY2ltYWxzOiB0b2tlbi5kZWNpbWFscyxcbiAgICAgICAgICAgICAgaXNOYXRpdmU6IHRva2VuLmlzTmF0aXZlLFxuICAgICAgICAgICAgICBiYWxhbmNlOiBiYWxhbmNlLFxuICAgICAgICAgICAgICBiYWxhbmNlVVNEOiBiYWxhbmNlVVNELFxuICAgICAgICAgICAgICBwcmljZVVTRDogcHJpY2UsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYEVycm9yIGdldHRpbmcgYmFsYW5jZSBmb3IgJHt0b2tlbi5zeW1ib2x9OmAsIGVycm9yKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIGFkZHJlc3M6IHRva2VuLmFkZHJlc3MsXG4gICAgICAgICAgICAgIHN5bWJvbDogdG9rZW4uc3ltYm9sLFxuICAgICAgICAgICAgICBuYW1lOiB0b2tlbi5uYW1lLFxuICAgICAgICAgICAgICBkZWNpbWFsczogdG9rZW4uZGVjaW1hbHMsXG4gICAgICAgICAgICAgIGlzTmF0aXZlOiB0b2tlbi5pc05hdGl2ZSxcbiAgICAgICAgICAgICAgYmFsYW5jZTogXCIwXCIsXG4gICAgICAgICAgICAgIGJhbGFuY2VVU0Q6IDAsXG4gICAgICAgICAgICAgIHByaWNlVVNEOiBcIjBcIixcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgKTtcblxuICAgICAgc2V0VXNlckFzc2V0cyhhc3NldHMpO1xuICAgICAgY29uc29sZS5sb2coXCJHb3QgdXNlciBhc3NldHM6XCIsIGFzc2V0cyk7XG4gICAgICByZXR1cm4gYXNzZXRzO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXBvcnRFcnJvcihlcnJvcik7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICB9LCBbbWV0YW1hc2tEZXRhaWxzLnByb3ZpZGVyLCBtZXRhbWFza0RldGFpbHMuY3VycmVudEFjY291bnRdKTtcblxuICAvLyBHZXQgcHJpY2UgaW4gVVNEXG4gIGNvbnN0IGdldFByaWNlVVNEID0gdXNlQ2FsbGJhY2soYXN5bmMgKGFzc2V0KSA9PiB7XG4gICAgaWYgKCFtZXRhbWFza0RldGFpbHMucHJvdmlkZXIpIHJldHVybiBcIjBcIjtcbiAgICB0cnkge1xuICAgICAgY29uc3QgYWJpID0gWydmdW5jdGlvbiBnZXRBc3NldFByaWNlMWUxOChhZGRyZXNzIGFzc2V0KSB2aWV3IHJldHVybnMgKHVpbnQyNTYpJ107XG4gICAgICBjb25zdCBvcmFjbGUgPSBuZXcgZXRoZXJzLkNvbnRyYWN0KENPTkZJRy5QUklDRV9PUkFDTEUsIGFiaSwgbWV0YW1hc2tEZXRhaWxzLnByb3ZpZGVyKTtcbiAgICAgIGNvbnN0IHByaWNlID0gYXdhaXQgb3JhY2xlLmdldEFzc2V0UHJpY2UxZTE4KGFzc2V0KTtcbiAgICAgIHJldHVybiBldGhlcnMuZm9ybWF0VW5pdHMocHJpY2UsIDE4KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS53YXJuKGBFcnJvciBnZXR0aW5nIHByaWNlIGZvciAke2Fzc2V0fTpgLCBlcnJvcik7XG4gICAgICByZXR1cm4gXCIwXCI7XG4gICAgfVxuICB9LCBbbWV0YW1hc2tEZXRhaWxzLnByb3ZpZGVyXSk7XG5cbiAgLy8gR2V0IGFtb3VudCBpbiBVU0RcbiAgY29uc3QgZ2V0QW1vdW50SW5VU0QgPSB1c2VDYWxsYmFjayhhc3luYyAoYWRkcmVzcywgYW1vdW50KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHByaWNlID0gYXdhaXQgZ2V0UHJpY2VVU0QoYWRkcmVzcyk7XG4gICAgICBjb25zdCBhbW91bnRJblVTRCA9IHBhcnNlRmxvYXQoYW1vdW50KSAqIHBhcnNlRmxvYXQocHJpY2UpO1xuICAgICAgcmV0dXJuIGFtb3VudEluVVNEO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXBvcnRFcnJvcihlcnJvcik7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gIH0sIFtnZXRQcmljZVVTRF0pO1xuXG4gIC8vIEFwcHJvdmUgdG9rZW5zXG4gIGNvbnN0IEFwcHJvdmVUb0NvbnRpbnVlID0gdXNlQ2FsbGJhY2soYXN5bmMgKHRva2VuQWRkcmVzcywgYXBwcm92ZUFtb3VudCkgPT4ge1xuICAgIGlmICghbWV0YW1hc2tEZXRhaWxzLnNpZ25lcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gc2lnbmVyIGF2YWlsYWJsZVwiKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgdG9rZW4gPSBDT05GSUcuVE9LRU5TLmZpbmQodCA9PiB0LmFkZHJlc3MudG9Mb3dlckNhc2UoKSA9PT0gdG9rZW5BZGRyZXNzLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgaWYgKCF0b2tlbikgdGhyb3cgbmV3IEVycm9yKFwiVG9rZW4gbm90IGZvdW5kXCIpO1xuXG4gICAgICBhd2FpdCBhcHByb3ZlSWZOZWVkZWQoXG4gICAgICAgIG1ldGFtYXNrRGV0YWlscy5zaWduZXIsXG4gICAgICAgIHRva2VuQWRkcmVzcyxcbiAgICAgICAgQ09ORklHLkxFTkRJTkdfUE9PTCxcbiAgICAgICAgYXBwcm92ZUFtb3VudCxcbiAgICAgICAgdG9rZW4uZGVjaW1hbHNcbiAgICAgICk7XG5cbiAgICAgIGNvbnNvbGUubG9nKFwiVG9rZW4gYXBwcm92ZWQ6XCIsIHRva2VuQWRkcmVzcyk7XG4gICAgICByZXR1cm4geyBzdGF0dXM6IDIwMCwgbWVzc2FnZTogXCJUcmFuc2FjdGlvbiBTdWNjZXNzZnVsLi4uXCIgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmVwb3J0RXJyb3IoZXJyb3IpO1xuICAgICAgcmV0dXJuIHsgc3RhdHVzOiA1MDAsIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UgfHwgZXJyb3IucmVhc29uIH07XG4gICAgfVxuICB9LCBbbWV0YW1hc2tEZXRhaWxzLnNpZ25lcl0pO1xuXG4gIC8vIExlbmQgYXNzZXRcbiAgY29uc3QgTGVuZEFzc2V0ID0gdXNlQ2FsbGJhY2soYXN5bmMgKHRva2VuLCBzdXBwbHlBbW91bnQpID0+IHtcbiAgICBpZiAoIW1ldGFtYXNrRGV0YWlscy5zaWduZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHNpZ25lciBhdmFpbGFibGVcIik7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHRva2VuSW5mbyA9IENPTkZJRy5UT0tFTlMuZmluZCh0ID0+IHQuYWRkcmVzcy50b0xvd2VyQ2FzZSgpID09PSB0b2tlbi50b0xvd2VyQ2FzZSgpKTtcbiAgICAgIGlmICghdG9rZW5JbmZvKSB0aHJvdyBuZXcgRXJyb3IoXCJUb2tlbiBub3QgZm91bmRcIik7XG5cbiAgICAgIGNvbnN0IGFtb3VudCA9IGV0aGVycy5wYXJzZVVuaXRzKHN1cHBseUFtb3VudCwgdG9rZW5JbmZvLmRlY2ltYWxzKTtcbiAgICAgIGNvbnN0IHR4ID0gYXdhaXQgbGVuZFR4KG1ldGFtYXNrRGV0YWlscy5zaWduZXIsIHRva2VuLCBhbW91bnQpO1xuICAgICAgXG4gICAgICBpZiAodHgpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJBc3NldCBsZW50IHN1Y2Nlc3NmdWxseTpcIiwgdG9rZW4sIHN1cHBseUFtb3VudCk7XG4gICAgICAgIHJldHVybiB7IHN0YXR1czogMjAwLCBtZXNzYWdlOiBcIlRyYW5zYWN0aW9uIFN1Y2Nlc3NmdWwuLi5cIiwgaGFzaDogdHguaGFzaCB9O1xuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVHJhbnNhY3Rpb24gZmFpbGVkXCIpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXBvcnRFcnJvcihlcnJvcik7XG4gICAgICByZXR1cm4geyBzdGF0dXM6IDUwMCwgbWVzc2FnZTogZXJyb3IubWVzc2FnZSB8fCBlcnJvci5yZWFzb24gfTtcbiAgICB9XG4gIH0sIFttZXRhbWFza0RldGFpbHMuc2lnbmVyXSk7XG5cbiAgLy8gV2l0aGRyYXcgYXNzZXRcbiAgY29uc3QgV2l0aGRyYXdBc3NldCA9IHVzZUNhbGxiYWNrKGFzeW5jICh0b2tlbkFkZHJlc3MsIHdpdGhkcmF3QW1vdW50KSA9PiB7XG4gICAgaWYgKCFtZXRhbWFza0RldGFpbHMuc2lnbmVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBzaWduZXIgYXZhaWxhYmxlXCIpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBjb25zdCB0b2tlbkluZm8gPSBDT05GSUcuVE9LRU5TLmZpbmQodCA9PiB0LmFkZHJlc3MudG9Mb3dlckNhc2UoKSA9PT0gdG9rZW5BZGRyZXNzLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgaWYgKCF0b2tlbkluZm8pIHRocm93IG5ldyBFcnJvcihcIlRva2VuIG5vdCBmb3VuZFwiKTtcblxuICAgICAgY29uc3QgYW1vdW50ID0gZXRoZXJzLnBhcnNlVW5pdHMod2l0aGRyYXdBbW91bnQsIHRva2VuSW5mby5kZWNpbWFscyk7XG4gICAgICBjb25zdCB0eCA9IGF3YWl0IHdpdGhkcmF3VHgobWV0YW1hc2tEZXRhaWxzLnNpZ25lciwgdG9rZW5BZGRyZXNzLCBhbW91bnQpO1xuICAgICAgXG4gICAgICBpZiAodHgpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJBc3NldCB3aXRoZHJhd24gc3VjY2Vzc2Z1bGx5OlwiLCB0b2tlbkFkZHJlc3MsIHdpdGhkcmF3QW1vdW50KTtcbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiAyMDAsIG1lc3NhZ2U6IFwiVHJhbnNhY3Rpb24gU3VjY2Vzc2Z1bC4uLlwiLCBoYXNoOiB0eC5oYXNoIH07XG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUcmFuc2FjdGlvbiBmYWlsZWRcIik7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJlcG9ydEVycm9yKGVycm9yKTtcbiAgICAgIHJldHVybiB7IHN0YXR1czogNTAwLCBtZXNzYWdlOiBlcnJvci5tZXNzYWdlIHx8IGVycm9yLnJlYXNvbiB9O1xuICAgIH1cbiAgfSwgW21ldGFtYXNrRGV0YWlscy5zaWduZXJdKTtcblxuICAvLyBCb3Jyb3cgYXNzZXRcbiAgY29uc3QgYm9ycm93QXNzZXQgPSB1c2VDYWxsYmFjayhhc3luYyAodG9rZW4sIGJvcnJvd0Ftb3VudCkgPT4ge1xuICAgIGlmICghbWV0YW1hc2tEZXRhaWxzLnNpZ25lcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gc2lnbmVyIGF2YWlsYWJsZVwiKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgdG9rZW5JbmZvID0gQ09ORklHLlRPS0VOUy5maW5kKHQgPT4gdC5hZGRyZXNzLnRvTG93ZXJDYXNlKCkgPT09IHRva2VuLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgaWYgKCF0b2tlbkluZm8pIHRocm93IG5ldyBFcnJvcihcIlRva2VuIG5vdCBmb3VuZFwiKTtcblxuICAgICAgY29uc3QgYW1vdW50ID0gZXRoZXJzLnBhcnNlVW5pdHMoYm9ycm93QW1vdW50LCB0b2tlbkluZm8uZGVjaW1hbHMpO1xuICAgICAgY29uc3QgdHggPSBhd2FpdCBib3Jyb3dUeChtZXRhbWFza0RldGFpbHMuc2lnbmVyLCB0b2tlbiwgYW1vdW50KTtcbiAgICAgIFxuICAgICAgaWYgKHR4KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiQXNzZXQgYm9ycm93ZWQgc3VjY2Vzc2Z1bGx5OlwiLCB0b2tlbiwgYm9ycm93QW1vdW50KTtcbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiAyMDAsIG1lc3NhZ2U6IFwiVHJhbnNhY3Rpb24gU3VjY2Vzc2Z1bC4uLlwiLCBoYXNoOiB0eC5oYXNoIH07XG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUcmFuc2FjdGlvbiBmYWlsZWRcIik7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJlcG9ydEVycm9yKGVycm9yKTtcbiAgICAgIHJldHVybiB7IHN0YXR1czogNTAwLCBtZXNzYWdlOiBlcnJvci5tZXNzYWdlIHx8IGVycm9yLnJlYXNvbiB9O1xuICAgIH1cbiAgfSwgW21ldGFtYXNrRGV0YWlscy5zaWduZXJdKTtcblxuICAvLyBSZXBheSBhc3NldFxuICBjb25zdCByZXBheUFzc2V0ID0gdXNlQ2FsbGJhY2soYXN5bmMgKHRva2VuQWRkcmVzcywgcmVwYXlBbW91bnQpID0+IHtcbiAgICBpZiAoIW1ldGFtYXNrRGV0YWlscy5zaWduZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHNpZ25lciBhdmFpbGFibGVcIik7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHRva2VuSW5mbyA9IENPTkZJRy5UT0tFTlMuZmluZCh0ID0+IHQuYWRkcmVzcy50b0xvd2VyQ2FzZSgpID09PSB0b2tlbkFkZHJlc3MudG9Mb3dlckNhc2UoKSk7XG4gICAgICBpZiAoIXRva2VuSW5mbykgdGhyb3cgbmV3IEVycm9yKFwiVG9rZW4gbm90IGZvdW5kXCIpO1xuXG4gICAgICBjb25zdCBhbW91bnQgPSBldGhlcnMucGFyc2VVbml0cyhyZXBheUFtb3VudCwgdG9rZW5JbmZvLmRlY2ltYWxzKTtcbiAgICAgIGNvbnN0IHR4ID0gYXdhaXQgcmVwYXlUeChtZXRhbWFza0RldGFpbHMuc2lnbmVyLCB0b2tlbkFkZHJlc3MsIGFtb3VudCk7XG4gICAgICBcbiAgICAgIGlmICh0eCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkFzc2V0IHJlcGFpZCBzdWNjZXNzZnVsbHk6XCIsIHRva2VuQWRkcmVzcywgcmVwYXlBbW91bnQpO1xuICAgICAgICByZXR1cm4geyBzdGF0dXM6IDIwMCwgbWVzc2FnZTogXCJUcmFuc2FjdGlvbiBTdWNjZXNzZnVsLi4uXCIsIGhhc2g6IHR4Lmhhc2ggfTtcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRyYW5zYWN0aW9uIGZhaWxlZFwiKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmVwb3J0RXJyb3IoZXJyb3IpO1xuICAgICAgcmV0dXJuIHsgc3RhdHVzOiA1MDAsIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UgfHwgZXJyb3IucmVhc29uIH07XG4gICAgfVxuICB9LCBbbWV0YW1hc2tEZXRhaWxzLnNpZ25lcl0pO1xuXG4gIC8vIEdldCBhY2NvdW50IGRhdGEgKGNvbGxhdGVyYWwsIGRlYnQsIGhlYWx0aCBmYWN0b3IpXG4gIGNvbnN0IGdldEFjY291bnREYXRhID0gdXNlQ2FsbGJhY2soYXN5bmMgKHVzZXIpID0+IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFtZXRhbWFza0RldGFpbHMucHJvdmlkZXIpIHJldHVybiBudWxsO1xuXG4gICAgICBjb25zdCBwb29sID0gbmV3IGV0aGVycy5Db250cmFjdChMZW5kaW5nUG9vbEFkZHJlc3MsIExlbmRpbmdQb29sQUJJLmFiaSwgbWV0YW1hc2tEZXRhaWxzLnByb3ZpZGVyKTtcbiAgICAgIGNvbnN0IHdhbGxldCA9IHVzZXIgfHwgbWV0YW1hc2tEZXRhaWxzLmN1cnJlbnRBY2NvdW50IHx8IGV0aGVycy5aZXJvQWRkcmVzcztcbiAgICAgIGNvbnN0IFtjb2wsIGRlYnQsIGhmXSA9IGF3YWl0IHBvb2wuZ2V0QWNjb3VudERhdGEod2FsbGV0KTtcbiAgICAgIFxuICAgICAgY29uc3QgYWNjb3VudERhdGEgPSB7XG4gICAgICAgIGNvbGxhdGVyYWxVU0Q6IGV0aGVycy5mb3JtYXRVbml0cyhjb2wsIDE4KSxcbiAgICAgICAgZGVidFVTRDogZXRoZXJzLmZvcm1hdFVuaXRzKGRlYnQsIDE4KSxcbiAgICAgICAgaGVhbHRoRmFjdG9yOiBldGhlcnMuZm9ybWF0VW5pdHMoaGYsIDE4KVxuICAgICAgfTtcblxuICAgICAgc2V0QWNjb3VudERhdGEoYWNjb3VudERhdGEpO1xuICAgICAgcmV0dXJuIGFjY291bnREYXRhO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXBvcnRFcnJvcihlcnJvcik7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH0sIFttZXRhbWFza0RldGFpbHMucHJvdmlkZXIsIG1ldGFtYXNrRGV0YWlscy5jdXJyZW50QWNjb3VudF0pO1xuXG4gIC8vIEdldCB5b3VyIHN1cHBsaWVzXG4gIGNvbnN0IGdldFlvdXJTdXBwbGllcyA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICBjb25zb2xlLmxvZyhcIjMuIEdldHRpbmcgeW91ciBzdXBwbGllcy4uLlwiKTtcbiAgICB0cnkge1xuICAgICAgaWYgKCFtZXRhbWFza0RldGFpbHMucHJvdmlkZXIgfHwgIW1ldGFtYXNrRGV0YWlscy5jdXJyZW50QWNjb3VudCkgcmV0dXJuIFtdO1xuXG4gICAgICBjb25zdCBhYmkgPSBbXG4gICAgICAgICdmdW5jdGlvbiBnZXRVc2VyUmVzZXJ2ZShhZGRyZXNzIHVzZXIsIGFkZHJlc3MgYXNzZXQpIHZpZXcgcmV0dXJucyAodHVwbGUodWludDEyOCBwcmluY2lwYWwsdWludDEyOCBpbmRleCkgc3VwcGx5LCB0dXBsZSh1aW50MTI4IHByaW5jaXBhbCx1aW50MTI4IGluZGV4KSBib3Jyb3cpJ1xuICAgICAgXTtcbiAgICAgIGNvbnN0IHBvb2wgPSBuZXcgZXRoZXJzLkNvbnRyYWN0KENPTkZJRy5MRU5ESU5HX1BPT0wsIGFiaSwgbWV0YW1hc2tEZXRhaWxzLnByb3ZpZGVyKTtcblxuICAgICAgY29uc3Qgc3VwcGxpZXMgPSBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgICAgQ09ORklHLlRPS0VOUy5maWx0ZXIodCA9PiAhdC5pc05hdGl2ZSkubWFwKGFzeW5jICh0b2tlbikgPT4ge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB1c2VyUmVzZXJ2ZSA9IGF3YWl0IHBvb2wuZ2V0VXNlclJlc2VydmUobWV0YW1hc2tEZXRhaWxzLmN1cnJlbnRBY2NvdW50LCB0b2tlbi5hZGRyZXNzKTtcbiAgICAgICAgICAgIGNvbnN0IHN1cHBseVByaW5jaXBhbCA9IGV0aGVycy5mb3JtYXRVbml0cyh1c2VyUmVzZXJ2ZS5zdXBwbHkucHJpbmNpcGFsLCAxOCk7XG4gICAgICAgICAgICBjb25zdCBzdXBwbHlJbmRleCA9IHVzZXJSZXNlcnZlLnN1cHBseS5pbmRleC50b1N0cmluZygpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAocGFyc2VGbG9hdChzdXBwbHlQcmluY2lwYWwpID4gMCkge1xuICAgICAgICAgICAgICBjb25zdCBwcmljZSA9IGF3YWl0IGdldFByaWNlVVNEKHRva2VuLmFkZHJlc3MpO1xuICAgICAgICAgICAgICBjb25zdCBiYWxhbmNlVVNEID0gcGFyc2VGbG9hdChzdXBwbHlQcmluY2lwYWwpICogcGFyc2VGbG9hdChwcmljZSk7XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGFkZHJlc3M6IHRva2VuLmFkZHJlc3MsXG4gICAgICAgICAgICAgICAgc3ltYm9sOiB0b2tlbi5zeW1ib2wsXG4gICAgICAgICAgICAgICAgbmFtZTogdG9rZW4ubmFtZSxcbiAgICAgICAgICAgICAgICBkZWNpbWFsczogdG9rZW4uZGVjaW1hbHMsXG4gICAgICAgICAgICAgICAgc3VwcGx5UHJpbmNpcGFsOiBzdXBwbHlQcmluY2lwYWwsXG4gICAgICAgICAgICAgICAgc3VwcGx5SW5kZXg6IHN1cHBseUluZGV4LFxuICAgICAgICAgICAgICAgIGJhbGFuY2VVU0Q6IGJhbGFuY2VVU0QsXG4gICAgICAgICAgICAgICAgcHJpY2VVU0Q6IHByaWNlLFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgRXJyb3IgZ2V0dGluZyBzdXBwbHkgZm9yICR7dG9rZW4uc3ltYm9sfTpgLCBlcnJvcik7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICApO1xuXG4gICAgICBjb25zdCB2YWxpZFN1cHBsaWVzID0gc3VwcGxpZXMuZmlsdGVyKHMgPT4gcyAhPT0gbnVsbCk7XG4gICAgICBzZXRTdXBwbHlBc3NldHModmFsaWRTdXBwbGllcyk7XG5cbiAgICAgIC8vIENhbGN1bGF0ZSBzdW1tYXJ5XG4gICAgICBjb25zdCB0b3RhbFVTREJhbGFuY2UgPSB2YWxpZFN1cHBsaWVzLnJlZHVjZSgoc3VtLCBhc3NldCkgPT4gc3VtICsgYXNzZXQuYmFsYW5jZVVTRCwgMCk7XG4gICAgICBjb25zdCB3ZWlnaHRlZEF2Z0FQWSA9IHZhbGlkU3VwcGxpZXMubGVuZ3RoID4gMCA/IFxuICAgICAgICB2YWxpZFN1cHBsaWVzLnJlZHVjZSgoc3VtLCBhc3NldCkgPT4gc3VtICsgKGFzc2V0LmFweSB8fCAwKSwgMCkgLyB2YWxpZFN1cHBsaWVzLmxlbmd0aCA6IDA7XG4gICAgICBjb25zdCB0b3RhbFVTRENvbGxhdGVyYWwgPSB2YWxpZFN1cHBsaWVzLnJlZHVjZSgoc3VtLCBhc3NldCkgPT4gc3VtICsgYXNzZXQuYmFsYW5jZVVTRCwgMCk7XG5cbiAgICAgIHNldFN1cHBseVN1bW1hcnkoe1xuICAgICAgICB0b3RhbFVTREJhbGFuY2UsXG4gICAgICAgIHdlaWdodGVkQXZnQVBZLFxuICAgICAgICB0b3RhbFVTRENvbGxhdGVyYWwsXG4gICAgICB9KTtcblxuICAgICAgY29uc29sZS5sb2coXCJHb3QgeW91ciBzdXBwbGllczpcIiwgdmFsaWRTdXBwbGllcyk7XG4gICAgICByZXR1cm4gdmFsaWRTdXBwbGllcztcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmVwb3J0RXJyb3IoZXJyb3IpO1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgfSwgW21ldGFtYXNrRGV0YWlscy5wcm92aWRlciwgbWV0YW1hc2tEZXRhaWxzLmN1cnJlbnRBY2NvdW50LCBnZXRQcmljZVVTRF0pO1xuXG4gIC8vIEdldCB5b3VyIGJvcnJvd3NcbiAgY29uc3QgZ2V0WW91ckJvcnJvd3MgPSB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XG4gICAgY29uc29sZS5sb2coXCI0LiBHZXR0aW5nIHlvdXIgYm9ycm93cy4uLlwiKTtcbiAgICB0cnkge1xuICAgICAgaWYgKCFtZXRhbWFza0RldGFpbHMucHJvdmlkZXIgfHwgIW1ldGFtYXNrRGV0YWlscy5jdXJyZW50QWNjb3VudCkgcmV0dXJuIFtdO1xuXG4gICAgICBjb25zdCBhYmkgPSBbXG4gICAgICAgICdmdW5jdGlvbiBnZXRVc2VyUmVzZXJ2ZShhZGRyZXNzIHVzZXIsIGFkZHJlc3MgYXNzZXQpIHZpZXcgcmV0dXJucyAodHVwbGUodWludDEyOCBwcmluY2lwYWwsdWludDEyOCBpbmRleCkgc3VwcGx5LCB0dXBsZSh1aW50MTI4IHByaW5jaXBhbCx1aW50MTI4IGluZGV4KSBib3Jyb3cpJ1xuICAgICAgXTtcbiAgICAgIGNvbnN0IHBvb2wgPSBuZXcgZXRoZXJzLkNvbnRyYWN0KENPTkZJRy5MRU5ESU5HX1BPT0wsIGFiaSwgbWV0YW1hc2tEZXRhaWxzLnByb3ZpZGVyKTtcblxuICAgICAgY29uc3QgYm9ycm93cyA9IGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgICBDT05GSUcuVE9LRU5TLmZpbHRlcih0ID0+ICF0LmlzTmF0aXZlKS5tYXAoYXN5bmMgKHRva2VuKSA9PiB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHVzZXJSZXNlcnZlID0gYXdhaXQgcG9vbC5nZXRVc2VyUmVzZXJ2ZShtZXRhbWFza0RldGFpbHMuY3VycmVudEFjY291bnQsIHRva2VuLmFkZHJlc3MpO1xuICAgICAgICAgICAgY29uc3QgYm9ycm93UHJpbmNpcGFsID0gZXRoZXJzLmZvcm1hdFVuaXRzKHVzZXJSZXNlcnZlLmJvcnJvdy5wcmluY2lwYWwsIDE4KTtcbiAgICAgICAgICAgIGNvbnN0IGJvcnJvd0luZGV4ID0gdXNlclJlc2VydmUuYm9ycm93LmluZGV4LnRvU3RyaW5nKCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChwYXJzZUZsb2F0KGJvcnJvd1ByaW5jaXBhbCkgPiAwKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHByaWNlID0gYXdhaXQgZ2V0UHJpY2VVU0QodG9rZW4uYWRkcmVzcyk7XG4gICAgICAgICAgICAgIGNvbnN0IGJhbGFuY2VVU0QgPSBwYXJzZUZsb2F0KGJvcnJvd1ByaW5jaXBhbCkgKiBwYXJzZUZsb2F0KHByaWNlKTtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYWRkcmVzczogdG9rZW4uYWRkcmVzcyxcbiAgICAgICAgICAgICAgICBzeW1ib2w6IHRva2VuLnN5bWJvbCxcbiAgICAgICAgICAgICAgICBuYW1lOiB0b2tlbi5uYW1lLFxuICAgICAgICAgICAgICAgIGRlY2ltYWxzOiB0b2tlbi5kZWNpbWFscyxcbiAgICAgICAgICAgICAgICBib3Jyb3dQcmluY2lwYWw6IGJvcnJvd1ByaW5jaXBhbCxcbiAgICAgICAgICAgICAgICBib3Jyb3dJbmRleDogYm9ycm93SW5kZXgsXG4gICAgICAgICAgICAgICAgYmFsYW5jZVVTRDogYmFsYW5jZVVTRCxcbiAgICAgICAgICAgICAgICBwcmljZVVTRDogcHJpY2UsXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGBFcnJvciBnZXR0aW5nIGJvcnJvdyBmb3IgJHt0b2tlbi5zeW1ib2x9OmAsIGVycm9yKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHZhbGlkQm9ycm93cyA9IGJvcnJvd3MuZmlsdGVyKGIgPT4gYiAhPT0gbnVsbCk7XG4gICAgICBzZXRZb3VyQm9ycm93cyh2YWxpZEJvcnJvd3MpO1xuXG4gICAgICAvLyBDYWxjdWxhdGUgc3VtbWFyeVxuICAgICAgY29uc3QgdG90YWxVU0RCYWxhbmNlID0gdmFsaWRCb3Jyb3dzLnJlZHVjZSgoc3VtLCBhc3NldCkgPT4gc3VtICsgYXNzZXQuYmFsYW5jZVVTRCwgMCk7XG4gICAgICBjb25zdCB3ZWlnaHRlZEF2Z0FQWSA9IHZhbGlkQm9ycm93cy5sZW5ndGggPiAwID8gXG4gICAgICAgIHZhbGlkQm9ycm93cy5yZWR1Y2UoKHN1bSwgYXNzZXQpID0+IHN1bSArIChhc3NldC5hcHkgfHwgMCksIDApIC8gdmFsaWRCb3Jyb3dzLmxlbmd0aCA6IDA7XG4gICAgICBjb25zdCB0b3RhbEJvcnJvd1Bvd2VyVXNlZCA9IHRvdGFsVVNEQmFsYW5jZTtcblxuICAgICAgc2V0Qm9ycm93U3VtbWFyeSh7XG4gICAgICAgIHRvdGFsVVNEQmFsYW5jZSxcbiAgICAgICAgd2VpZ2h0ZWRBdmdBUFksXG4gICAgICAgIHRvdGFsQm9ycm93UG93ZXJVc2VkLFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnNvbGUubG9nKFwiR290IHlvdXIgYm9ycm93czpcIiwgdmFsaWRCb3Jyb3dzKTtcbiAgICAgIHJldHVybiB2YWxpZEJvcnJvd3M7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJlcG9ydEVycm9yKGVycm9yKTtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gIH0sIFttZXRhbWFza0RldGFpbHMucHJvdmlkZXIsIG1ldGFtYXNrRGV0YWlscy5jdXJyZW50QWNjb3VudCwgZ2V0UHJpY2VVU0RdKTtcblxuICAvLyBHZXQgYXNzZXRzIHRvIGJvcnJvd1xuICBjb25zdCBnZXRBc3NldHNUb0JvcnJvdyA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICBjb25zb2xlLmxvZyhcIjUuIEdldHRpbmcgYXNzZXRzIHRvIGJvcnJvdy4uLlwiKTtcbiAgICB0cnkge1xuICAgICAgaWYgKCFtZXRhbWFza0RldGFpbHMucHJvdmlkZXIpIHJldHVybiBbXTtcblxuICAgICAgY29uc3QgYWJpID0gW1xuICAgICAgICAnZnVuY3Rpb24gcmVzZXJ2ZXMoYWRkcmVzcykgdmlldyByZXR1cm5zICh1aW50MTI4IHJlc2VydmVDYXNoLCB1aW50MTI4IHRvdGFsRGVidFByaW5jaXBhbCwgdWludDEyOCBsaXF1aWRpdHlJbmRleCwgdWludDEyOCB2YXJpYWJsZUJvcnJvd0luZGV4LCB1aW50NjQgbGlxdWlkaXR5UmF0ZVJheVBlclNlYywgdWludDY0IHZhcmlhYmxlQm9ycm93UmF0ZVJheVBlclNlYywgdWludDE2IHJlc2VydmVGYWN0b3JCcHMsIHVpbnQxNiBsdHZCcHMsIHVpbnQxNiBsaXFUaHJlc2hvbGRCcHMsIHVpbnQxNiBsaXFCb251c0JwcywgdWludDE2IGNsb3NlRmFjdG9yQnBzLCB1aW50OCBkZWNpbWFscywgYm9vbCBpc0JvcnJvd2FibGUsIHVpbnQxNiBvcHRpbWFsVUJwcywgdWludDY0IGJhc2VSYXRlUmF5UGVyU2VjLCB1aW50NjQgc2xvcGUxUmF5UGVyU2VjLCB1aW50NjQgc2xvcGUyUmF5UGVyU2VjLCB1aW50NDAgbGFzdFVwZGF0ZSknXG4gICAgICBdO1xuICAgICAgY29uc3QgcG9vbCA9IG5ldyBldGhlcnMuQ29udHJhY3QoQ09ORklHLkxFTkRJTkdfUE9PTCwgYWJpLCBtZXRhbWFza0RldGFpbHMucHJvdmlkZXIpO1xuXG4gICAgICBjb25zdCBhc3NldHMgPSBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgICAgQ09ORklHLlRPS0VOUy5maWx0ZXIodCA9PiAhdC5pc05hdGl2ZSkubWFwKGFzeW5jICh0b2tlbikgPT4ge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXNlcnZlID0gYXdhaXQgcG9vbC5yZXNlcnZlcyh0b2tlbi5hZGRyZXNzKTtcbiAgICAgICAgICAgIGNvbnN0IGlzQm9ycm93YWJsZSA9IEJvb2xlYW4ocmVzZXJ2ZS5pc0JvcnJvd2FibGUpO1xuICAgICAgICAgICAgY29uc3QgcmVzZXJ2ZUNhc2ggPSBldGhlcnMuZm9ybWF0VW5pdHMocmVzZXJ2ZS5yZXNlcnZlQ2FzaCwgMTgpO1xuICAgICAgICAgICAgY29uc3QgcHJpY2UgPSBhd2FpdCBnZXRQcmljZVVTRCh0b2tlbi5hZGRyZXNzKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGlzQm9ycm93YWJsZSAmJiBwYXJzZUZsb2F0KHJlc2VydmVDYXNoKSA+IDApIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBhZGRyZXNzOiB0b2tlbi5hZGRyZXNzLFxuICAgICAgICAgICAgICAgIHN5bWJvbDogdG9rZW4uc3ltYm9sLFxuICAgICAgICAgICAgICAgIG5hbWU6IHRva2VuLm5hbWUsXG4gICAgICAgICAgICAgICAgZGVjaW1hbHM6IHRva2VuLmRlY2ltYWxzLFxuICAgICAgICAgICAgICAgIHJlc2VydmVDYXNoOiByZXNlcnZlQ2FzaCxcbiAgICAgICAgICAgICAgICBpc0JvcnJvd2FibGU6IGlzQm9ycm93YWJsZSxcbiAgICAgICAgICAgICAgICBwcmljZVVTRDogcHJpY2UsXG4gICAgICAgICAgICAgICAgbHR2QnBzOiBOdW1iZXIocmVzZXJ2ZS5sdHZCcHMpLFxuICAgICAgICAgICAgICAgIGxpcVRocmVzaG9sZEJwczogTnVtYmVyKHJlc2VydmUubGlxVGhyZXNob2xkQnBzKSxcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYEVycm9yIGdldHRpbmcgYm9ycm93IGFzc2V0ICR7dG9rZW4uc3ltYm9sfTpgLCBlcnJvcik7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICApO1xuXG4gICAgICBjb25zdCB2YWxpZEFzc2V0cyA9IGFzc2V0cy5maWx0ZXIoYSA9PiBhICE9PSBudWxsKTtcbiAgICAgIHNldEFzc2V0c1RvQm9ycm93KHZhbGlkQXNzZXRzKTtcbiAgICAgIGNvbnNvbGUubG9nKFwiR290IGFzc2V0cyB0byBib3Jyb3c6XCIsIHZhbGlkQXNzZXRzKTtcbiAgICAgIHJldHVybiB2YWxpZEFzc2V0cztcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmVwb3J0RXJyb3IoZXJyb3IpO1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgfSwgW21ldGFtYXNrRGV0YWlscy5wcm92aWRlciwgZ2V0UHJpY2VVU0RdKTtcblxuICAvLyBXcmFwIEVUSCB0byBXRVRIXG4gIGNvbnN0IHdyYXBFdGggPSB1c2VDYWxsYmFjayhhc3luYyAoYW1vdW50RXRoKSA9PiB7XG4gICAgaWYgKCFtZXRhbWFza0RldGFpbHMuc2lnbmVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBzaWduZXIgYXZhaWxhYmxlXCIpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBjb25zdCBkYXRhID0gJzB4ZDBlMzBkYjAnOyAvLyBkZXBvc2l0KClcbiAgICAgIGNvbnN0IHR4ID0gYXdhaXQgbWV0YW1hc2tEZXRhaWxzLnNpZ25lci5zZW5kVHJhbnNhY3Rpb24oe1xuICAgICAgICB0bzogQ09ORklHLldFVEgsXG4gICAgICAgIHZhbHVlOiBldGhlcnMucGFyc2VFdGhlcihhbW91bnRFdGgpLFxuICAgICAgICBkYXRhXG4gICAgICB9KTtcbiAgICAgIGF3YWl0IHR4LndhaXQoKTtcbiAgICAgIGNvbnNvbGUubG9nKFwiRVRIIHdyYXBwZWQgdG8gV0VUSDpcIiwgYW1vdW50RXRoKTtcbiAgICAgIHJldHVybiB7IHN0YXR1czogMjAwLCBtZXNzYWdlOiBcIlRyYW5zYWN0aW9uIFN1Y2Nlc3NmdWwuLi5cIiwgaGFzaDogdHguaGFzaCB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXBvcnRFcnJvcihlcnJvcik7XG4gICAgICByZXR1cm4geyBzdGF0dXM6IDUwMCwgbWVzc2FnZTogZXJyb3IubWVzc2FnZSB8fCBlcnJvci5yZWFzb24gfTtcbiAgICB9XG4gIH0sIFttZXRhbWFza0RldGFpbHMuc2lnbmVyXSk7XG5cbiAgLy8gVW53cmFwIFdFVEggdG8gRVRIXG4gIGNvbnN0IHVud3JhcFdldGggPSB1c2VDYWxsYmFjayhhc3luYyAoYW1vdW50RXRoKSA9PiB7XG4gICAgaWYgKCFtZXRhbWFza0RldGFpbHMuc2lnbmVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBzaWduZXIgYXZhaWxhYmxlXCIpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBjb25zdCBhYmkgPSBbJ2Z1bmN0aW9uIHdpdGhkcmF3KHVpbnQyNTYgd2FkKSddO1xuICAgICAgY29uc3Qgd2V0aCA9IG5ldyBldGhlcnMuQ29udHJhY3QoQ09ORklHLldFVEgsIGFiaSwgbWV0YW1hc2tEZXRhaWxzLnNpZ25lcik7XG4gICAgICBjb25zdCB0eCA9IGF3YWl0IHdldGgud2l0aGRyYXcoZXRoZXJzLnBhcnNlRXRoZXIoYW1vdW50RXRoKSk7XG4gICAgICBhd2FpdCB0eC53YWl0KCk7XG4gICAgICBjb25zb2xlLmxvZyhcIldFVEggdW53cmFwcGVkIHRvIEVUSDpcIiwgYW1vdW50RXRoKTtcbiAgICAgIHJldHVybiB7IHN0YXR1czogMjAwLCBtZXNzYWdlOiBcIlRyYW5zYWN0aW9uIFN1Y2Nlc3NmdWwuLi5cIiwgaGFzaDogdHguaGFzaCB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXBvcnRFcnJvcihlcnJvcik7XG4gICAgICByZXR1cm4geyBzdGF0dXM6IDUwMCwgbWVzc2FnZTogZXJyb3IubWVzc2FnZSB8fCBlcnJvci5yZWFzb24gfTtcbiAgICB9XG4gIH0sIFttZXRhbWFza0RldGFpbHMuc2lnbmVyXSk7XG5cbiAgLy8gUmVmcmVzaCBhbGwgZGF0YVxuICBjb25zdCByZWZyZXNoID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgIGdldFVzZXJBc3NldHMoKSxcbiAgICAgICAgZ2V0WW91clN1cHBsaWVzKCksXG4gICAgICAgIGdldFlvdXJCb3Jyb3dzKCksXG4gICAgICAgIGdldEFzc2V0c1RvQm9ycm93KCksXG4gICAgICAgIGdldEFjY291bnREYXRhKCksXG4gICAgICBdKTtcbiAgICAgIGNvbnNvbGUubG9nKFwiQWxsIGRhdGEgcmVmcmVzaGVkXCIpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXBvcnRFcnJvcihlcnJvcik7XG4gICAgfVxuICB9LCBbZ2V0VXNlckFzc2V0cywgZ2V0WW91clN1cHBsaWVzLCBnZXRZb3VyQm9ycm93cywgZ2V0QXNzZXRzVG9Cb3Jyb3csIGdldEFjY291bnREYXRhXSk7XG5cbiAgLy8gVXBkYXRlIGludGVyZXN0cyAoYWNjcnVlKVxuICBjb25zdCB1cGRhdGVJbnRlcmVzdHMgPSB1c2VDYWxsYmFjayhhc3luYyAoYXNzZXQpID0+IHtcbiAgICBpZiAoIW1ldGFtYXNrRGV0YWlscy5zaWduZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHNpZ25lciBhdmFpbGFibGVcIik7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGFiaSA9IFsnZnVuY3Rpb24gYWNjcnVlUHVibGljKGFkZHJlc3MgYXNzZXQpJ107XG4gICAgICBjb25zdCBwb29sID0gbmV3IGV0aGVycy5Db250cmFjdChDT05GSUcuTEVORElOR19QT09MLCBhYmksIG1ldGFtYXNrRGV0YWlscy5zaWduZXIpO1xuICAgICAgY29uc3QgdHggPSBhd2FpdCBwb29sLmFjY3J1ZVB1YmxpYyhhc3NldCk7XG4gICAgICBhd2FpdCB0eC53YWl0KCk7XG4gICAgICBjb25zb2xlLmxvZyhcIkludGVyZXN0cyB1cGRhdGVkIGZvciBhc3NldDpcIiwgYXNzZXQpO1xuICAgICAgcmV0dXJuIHsgc3RhdHVzOiAyMDAsIG1lc3NhZ2U6IFwiVHJhbnNhY3Rpb24gU3VjY2Vzc2Z1bC4uLlwiIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJlcG9ydEVycm9yKGVycm9yKTtcbiAgICAgIHJldHVybiB7IHN0YXR1czogNTAwLCBtZXNzYWdlOiBlcnJvci5tZXNzYWdlIHx8IGVycm9yLnJlYXNvbiB9O1xuICAgIH1cbiAgfSwgW21ldGFtYXNrRGV0YWlscy5zaWduZXJdKTtcblxuICAvLyBHZXQgdXNlciB0b3RhbCBhdmFpbGFibGUgYmFsYW5jZVxuICBjb25zdCBnZXRVc2VyVG90YWxBdmFpbGFibGVCYWxhbmNlID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIW1ldGFtYXNrRGV0YWlscy5wcm92aWRlciB8fCAhbWV0YW1hc2tEZXRhaWxzLmN1cnJlbnRBY2NvdW50KSByZXR1cm4gMDtcblxuICAgICAgY29uc3QgYWJpID0gW1xuICAgICAgICAnZnVuY3Rpb24gZ2V0VXNlclRvdGFsQXZhaWxhYmxlQmFsYW5jZUluVVNEKGFkZHJlc3MgdXNlciwgdWludDI1NiBhc3NldFR5cGUpIHZpZXcgcmV0dXJucyAodWludDI1NiknXG4gICAgICBdO1xuICAgICAgY29uc3QgcG9vbCA9IG5ldyBldGhlcnMuQ29udHJhY3QoQ09ORklHLkxFTkRJTkdfUE9PTCwgYWJpLCBtZXRhbWFza0RldGFpbHMucHJvdmlkZXIpO1xuICAgICAgY29uc3QgbWF4QW1vdW50ID0gYXdhaXQgcG9vbC5nZXRVc2VyVG90YWxBdmFpbGFibGVCYWxhbmNlSW5VU0QobWV0YW1hc2tEZXRhaWxzLmN1cnJlbnRBY2NvdW50LCAxKTtcbiAgICAgIHJldHVybiBOdW1iZXIoZXRoZXJzLmZvcm1hdFVuaXRzKG1heEFtb3VudCwgMTgpKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmVwb3J0RXJyb3IoZXJyb3IpO1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICB9LCBbbWV0YW1hc2tEZXRhaWxzLnByb3ZpZGVyLCBtZXRhbWFza0RldGFpbHMuY3VycmVudEFjY291bnRdKTtcblxuICAvLyBHZXQgdG9rZW5zIHBlciBVU0QgYW1vdW50XG4gIGNvbnN0IGdldFRva2Vuc1BlclVTREFtb3VudCA9IHVzZUNhbGxiYWNrKGFzeW5jICh0b2tlbiwgYW1vdW50KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghbWV0YW1hc2tEZXRhaWxzLnByb3ZpZGVyKSByZXR1cm4gMDtcblxuICAgICAgY29uc3QgYWJpID0gW1xuICAgICAgICAnZnVuY3Rpb24gZ2V0VG9rZW5zUGVyVVNEQW1vdW50KGFkZHJlc3MgdG9rZW4sIHVpbnQyNTYgYW1vdW50KSB2aWV3IHJldHVybnMgKHVpbnQyNTYpJ1xuICAgICAgXTtcbiAgICAgIGNvbnN0IGhlbHBlciA9IG5ldyBldGhlcnMuQ29udHJhY3QoQ09ORklHLlBSSUNFX09SQUNMRSwgYWJpLCBtZXRhbWFza0RldGFpbHMucHJvdmlkZXIpO1xuICAgICAgY29uc3QgbWF4UXR5ID0gYXdhaXQgaGVscGVyLmdldFRva2Vuc1BlclVTREFtb3VudCh0b2tlbiwgZXRoZXJzLnBhcnNlVW5pdHMoYW1vdW50LnRvU3RyaW5nKCksIDE4KSk7XG4gICAgICByZXR1cm4gTnVtYmVyKGV0aGVycy5mb3JtYXRVbml0cyhtYXhRdHksIDE4KSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJlcG9ydEVycm9yKGVycm9yKTtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgfSwgW21ldGFtYXNrRGV0YWlscy5wcm92aWRlcl0pO1xuXG4gIC8vIE9iamVjdGlmeSBzdXBwbGllZCBhc3NldHMgKGZvcm1hdCBkYXRhKVxuICBjb25zdCBvYmplY3RpZnlTdXBwbGllZEFzc2V0cyA9IHVzZUNhbGxiYWNrKGFzeW5jIChhc3NldHMpID0+IHtcbiAgICBjb25zdCBhc3NldHNMaXN0ID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhc3NldHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHRva2VuID0gYXNzZXRzW2ldLnRva2VuO1xuICAgICAgbGV0IGxlbmRRdHkgPSBhc3NldHNbaV0ubGVudFF0eTtcblxuICAgICAgY29uc3QgYW1vdW50SW5VU0QgPSBhd2FpdCBnZXRBbW91bnRJblVTRCh0b2tlbiwgbGVuZFF0eSk7XG4gICAgICBsZW5kUXR5ID0gTnVtYmVyKGFzc2V0c1tpXS5sZW50UXR5KSAvIDFlMTg7XG5cbiAgICAgIGNvbnN0IG1heFN1cHBseUFtb3VudCA9IGF3YWl0IGdldFVzZXJUb3RhbEF2YWlsYWJsZUJhbGFuY2UoKTtcbiAgICAgIGNvbnN0IG1heFF0eSA9IGF3YWl0IGdldFRva2Vuc1BlclVTREFtb3VudCh0b2tlbiwgbWF4U3VwcGx5QW1vdW50KTtcbiAgICAgIGNvbnN0IHF0eSA9IGxlbmRRdHkgPD0gbWF4UXR5ID8gbGVuZFF0eSA6IG1heFF0eTtcblxuICAgICAgYXNzZXRzTGlzdC5wdXNoKHtcbiAgICAgICAgdG9rZW46IGFzc2V0c1tpXS50b2tlbixcbiAgICAgICAgYmFsYW5jZTogbGVuZFF0eSxcbiAgICAgICAgYXB5OiBOdW1iZXIoYXNzZXRzW2ldLmxlbnRBcHkpLFxuICAgICAgICBiYWxhbmNlSW5VU0Q6IGFtb3VudEluVVNELFxuICAgICAgICBtYXhTdXBwbHk6IHF0eSxcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gYXNzZXRzTGlzdDtcbiAgfSwgW2dldEFtb3VudEluVVNELCBnZXRVc2VyVG90YWxBdmFpbGFibGVCYWxhbmNlLCBnZXRUb2tlbnNQZXJVU0RBbW91bnRdKTtcblxuICAvLyBPYmplY3RpZnkgYm9ycm93ZWQgYXNzZXRzIChmb3JtYXQgZGF0YSlcbiAgY29uc3Qgb2JqZWN0aWZ5Qm9ycm93ZWRBc3NldHMgPSB1c2VDYWxsYmFjayhhc3luYyAoYXNzZXRzKSA9PiB7XG4gICAgY29uc3QgYm9ycm93c0xpc3QgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFzc2V0cy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgdG9rZW4gPSBhc3NldHNbaV0udG9rZW47XG4gICAgICBjb25zdCBib3Jyb3dRdHkgPSBhc3NldHNbaV0uYm9ycm93UXR5O1xuICAgICAgY29uc3QgYm9ycm93QXB5ID0gYXNzZXRzW2ldLmJvcnJvd0FweTtcbiAgICAgIGNvbnN0IGFtb3VudEluVVNEID0gYXdhaXQgZ2V0QW1vdW50SW5VU0QodG9rZW4sIGJvcnJvd1F0eSk7XG4gICAgICBcbiAgICAgIGJvcnJvd3NMaXN0LnB1c2goe1xuICAgICAgICB0b2tlbjogdG9rZW4sXG4gICAgICAgIGJvcnJvd1F0eTogTnVtYmVyKGJvcnJvd1F0eSksXG4gICAgICAgIGJvcnJvd0FweTogTnVtYmVyKGJvcnJvd0FweSksXG4gICAgICAgIGJvcnJvd2VkQmFsSW5VU0Q6IGFtb3VudEluVVNELFxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBib3Jyb3dzTGlzdDtcbiAgfSwgW2dldEFtb3VudEluVVNEXSk7XG5cbiAgLy8gTWVyZ2Ugb2JqZWN0aWZpZWQgYXNzZXRzIHdpdGggdG9rZW4gaW5mb1xuICBjb25zdCBtZXJnZU9iamVjdGlmaWVkQXNzZXRzID0gdXNlQ2FsbGJhY2soKGFzc2V0cykgPT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IENPTkZJRy5UT0tFTlNcbiAgICAgIC5maWx0ZXIoKHRva2VuTGlzdCkgPT4ge1xuICAgICAgICByZXR1cm4gYXNzZXRzLnNvbWUoKGFzc2V0TGlzdCkgPT4ge1xuICAgICAgICAgIHJldHVybiB0b2tlbkxpc3QuYWRkcmVzcy50b0xvd2VyQ2FzZSgpID09PSBhc3NldExpc3QudG9rZW4udG9Mb3dlckNhc2UoKTtcbiAgICAgICAgfSk7XG4gICAgICB9KVxuICAgICAgLm1hcCgoYXNzZXRPYmopID0+ICh7XG4gICAgICAgIC4uLmFzc2V0cy5maW5kKChpdGVtKSA9PiBpdGVtLnRva2VuLnRvTG93ZXJDYXNlKCkgPT09IGFzc2V0T2JqLmFkZHJlc3MudG9Mb3dlckNhc2UoKSksXG4gICAgICAgIC4uLmFzc2V0T2JqLFxuICAgICAgfSkpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sIFtdKTtcblxuICAvLyBDb250ZXh0IHZhbHVlXG4gIGNvbnN0IGNvbnRleHRWYWx1ZSA9IHVzZU1lbW8oKCkgPT4gKHtcbiAgICAvLyBTdGF0ZVxuICAgIG1ldGFtYXNrRGV0YWlscyxcbiAgICB1c2VyQXNzZXRzLFxuICAgIHN1cHBseUFzc2V0cyxcbiAgICBhc3NldHNUb0JvcnJvdyxcbiAgICB5b3VyQm9ycm93cyxcbiAgICBzdXBwbHlTdW1tYXJ5LFxuICAgIGJvcnJvd1N1bW1hcnksXG4gICAgYWNjb3VudERhdGEsXG4gICAgY29udHJhY3QsXG5cbiAgICAvLyBXYWxsZXQgZnVuY3Rpb25zXG4gICAgY29ubmVjdFdhbGxldCxcbiAgICByZWZyZXNoLFxuXG4gICAgLy8gQXNzZXQgZnVuY3Rpb25zXG4gICAgZ2V0VXNlckFzc2V0cyxcbiAgICBnZXRZb3VyU3VwcGxpZXMsXG4gICAgZ2V0WW91ckJvcnJvd3MsXG4gICAgZ2V0QXNzZXRzVG9Cb3Jyb3csXG5cbiAgICAvLyBUcmFuc2FjdGlvbiBmdW5jdGlvbnNcbiAgICBBcHByb3ZlVG9Db250aW51ZSxcbiAgICBMZW5kQXNzZXQsXG4gICAgV2l0aGRyYXdBc3NldCxcbiAgICBib3Jyb3dBc3NldCxcbiAgICByZXBheUFzc2V0LFxuXG4gICAgLy8gVXRpbGl0eSBmdW5jdGlvbnNcbiAgICBnZXRDb250cmFjdCxcbiAgICBnZXRQcmljZVVTRCxcbiAgICBnZXRBbW91bnRJblVTRCxcbiAgICBudW1iZXJUb0V0aGVycyxcbiAgICByZXBvcnRFcnJvcixcblxuICAgIC8vIEVUSC9XRVRIIGZ1bmN0aW9uc1xuICAgIHdyYXBFdGgsXG4gICAgdW53cmFwV2V0aCxcblxuICAgIC8vIEFjY291bnQgZnVuY3Rpb25zXG4gICAgZ2V0QWNjb3VudERhdGEsXG4gICAgZ2V0VXNlclRvdGFsQXZhaWxhYmxlQmFsYW5jZSxcbiAgICBnZXRUb2tlbnNQZXJVU0RBbW91bnQsXG5cbiAgICAvLyBEYXRhIHByb2Nlc3NpbmcgZnVuY3Rpb25zXG4gICAgb2JqZWN0aWZ5U3VwcGxpZWRBc3NldHMsXG4gICAgb2JqZWN0aWZ5Qm9ycm93ZWRBc3NldHMsXG4gICAgbWVyZ2VPYmplY3RpZmllZEFzc2V0cyxcblxuICAgIC8vIEludGVyZXN0IGZ1bmN0aW9uc1xuICAgIHVwZGF0ZUludGVyZXN0cyxcbiAgfSksIFtcbiAgICBtZXRhbWFza0RldGFpbHMsXG4gICAgdXNlckFzc2V0cyxcbiAgICBzdXBwbHlBc3NldHMsXG4gICAgYXNzZXRzVG9Cb3Jyb3csXG4gICAgeW91ckJvcnJvd3MsXG4gICAgc3VwcGx5U3VtbWFyeSxcbiAgICBib3Jyb3dTdW1tYXJ5LFxuICAgIGFjY291bnREYXRhLFxuICAgIGNvbnRyYWN0LFxuICAgIGNvbm5lY3RXYWxsZXQsXG4gICAgcmVmcmVzaCxcbiAgICBnZXRVc2VyQXNzZXRzLFxuICAgIGdldFlvdXJTdXBwbGllcyxcbiAgICBnZXRZb3VyQm9ycm93cyxcbiAgICBnZXRBc3NldHNUb0JvcnJvdyxcbiAgICBBcHByb3ZlVG9Db250aW51ZSxcbiAgICBMZW5kQXNzZXQsXG4gICAgV2l0aGRyYXdBc3NldCxcbiAgICBib3Jyb3dBc3NldCxcbiAgICByZXBheUFzc2V0LFxuICAgIGdldENvbnRyYWN0LFxuICAgIGdldFByaWNlVVNELFxuICAgIGdldEFtb3VudEluVVNELFxuICAgIHdyYXBFdGgsXG4gICAgdW53cmFwV2V0aCxcbiAgICBnZXRBY2NvdW50RGF0YSxcbiAgICBnZXRVc2VyVG90YWxBdmFpbGFibGVCYWxhbmNlLFxuICAgIGdldFRva2Vuc1BlclVTREFtb3VudCxcbiAgICBvYmplY3RpZnlTdXBwbGllZEFzc2V0cyxcbiAgICBvYmplY3RpZnlCb3Jyb3dlZEFzc2V0cyxcbiAgICBtZXJnZU9iamVjdGlmaWVkQXNzZXRzLFxuICAgIHVwZGF0ZUludGVyZXN0cyxcbiAgXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8bGVuZENvbnRleHQuUHJvdmlkZXIgdmFsdWU9e2NvbnRleHRWYWx1ZX0+XG4gICAgICB7cHJvcHMuY2hpbGRyZW59XG4gICAgPC9sZW5kQ29udGV4dC5Qcm92aWRlcj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IExlbmRTdGF0ZTtcbiJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZVN0YXRlIiwidXNlQ2FsbGJhY2siLCJ1c2VNZW1vIiwibGVuZENvbnRleHQiLCJldGhlcnMiLCJDT05GSUciLCJnZXRUb2tlbkJhbGFuY2UiLCJnZXRUb2tlbkFsbG93YW5jZSIsImFwcHJvdmVJZk5lZWRlZCIsImxlbmQiLCJsZW5kVHgiLCJ3aXRoZHJhdyIsIndpdGhkcmF3VHgiLCJib3Jyb3ciLCJib3Jyb3dUeCIsInJlcGF5IiwicmVwYXlUeCIsIkVUSEFkZHJlc3MiLCJMZW5kaW5nUG9vbEFkZHJlc3MiLCJMZW5kaW5nSGVscGVyQWRkcmVzcyIsIlRva2VuQUJJIiwiTGVuZGluZ1Bvb2xBQkkiLCJMZW5kaW5nSGVscGVyQUJJIiwibnVtYmVyVG9FdGhlcnMiLCJudW1iZXIiLCJwYXJzZUV0aGVyIiwidG9TdHJpbmciLCJyZXBvcnRFcnJvciIsImVycm9yIiwiY29uc29sZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJMZW5kU3RhdGUiLCJwcm9wcyIsIm1ldGFtYXNrRGV0YWlscyIsInNldE1ldGFtYXNrRGV0YWlscyIsInByb3ZpZGVyIiwibmV0d29ya05hbWUiLCJzaWduZXIiLCJjdXJyZW50QWNjb3VudCIsImNoYWluSWQiLCJ1c2VyQXNzZXRzIiwic2V0VXNlckFzc2V0cyIsInN1cHBseUFzc2V0cyIsInNldFN1cHBseUFzc2V0cyIsImFzc2V0c1RvQm9ycm93Iiwic2V0QXNzZXRzVG9Cb3Jyb3ciLCJ5b3VyQm9ycm93cyIsInNldFlvdXJCb3Jyb3dzIiwiY29udHJhY3QiLCJzZXRDb250cmFjdCIsImxlbmRpbmdQb29sQ29udHJhY3QiLCJvcmFjbGVDb250cmFjdCIsInN1cHBseVN1bW1hcnkiLCJzZXRTdXBwbHlTdW1tYXJ5IiwidG90YWxVU0RCYWxhbmNlIiwid2VpZ2h0ZWRBdmdBUFkiLCJ0b3RhbFVTRENvbGxhdGVyYWwiLCJib3Jyb3dTdW1tYXJ5Iiwic2V0Qm9ycm93U3VtbWFyeSIsInRvdGFsQm9ycm93UG93ZXJVc2VkIiwiYWNjb3VudERhdGEiLCJzZXRBY2NvdW50RGF0YSIsImNvbGxhdGVyYWxVU0QiLCJkZWJ0VVNEIiwiaGVhbHRoRmFjdG9yIiwiY29ubm5lY3RXYWxsZXQiLCJsb2ciLCJldGhlcmV1bSIsIndpbmRvdyIsImZhaWxNZXNzYWdlIiwiYWNjb3VudCIsInJlcXVlc3QiLCJtZXRob2QiLCJnZXRDb250cmFjdCIsImFkZHJlc3MiLCJhYmkiLCJDb250cmFjdCIsImdldFVzZXJBc3NldHMiLCJhc3NldHMiLCJQcm9taXNlIiwiYWxsIiwiVE9LRU5TIiwibWFwIiwidG9rZW4iLCJiYWxhbmNlIiwiYmFsYW5jZVVTRCIsImlzTmF0aXZlIiwiYmFsIiwiZ2V0QmFsYW5jZSIsImZvcm1hdEV0aGVyIiwiZGVjaW1hbHMiLCJwcmljZSIsImdldFByaWNlVVNEIiwicGFyc2VGbG9hdCIsInN5bWJvbCIsIm5hbWUiLCJwcmljZVVTRCIsIndhcm4iLCJhc3NldCIsIm9yYWNsZSIsIlBSSUNFX09SQUNMRSIsImdldEFzc2V0UHJpY2UxZTE4IiwiZm9ybWF0VW5pdHMiLCJnZXRBbW91bnRJblVTRCIsImFtb3VudCIsImFtb3VudEluVVNEIiwiQXBwcm92ZVRvQ29udGludWUiLCJ0b2tlbkFkZHJlc3MiLCJhcHByb3ZlQW1vdW50IiwiRXJyb3IiLCJmaW5kIiwidCIsInRvTG93ZXJDYXNlIiwiTEVORElOR19QT09MIiwic3RhdHVzIiwibWVzc2FnZSIsInJlYXNvbiIsIkxlbmRBc3NldCIsInN1cHBseUFtb3VudCIsInRva2VuSW5mbyIsInBhcnNlVW5pdHMiLCJ0eCIsImhhc2giLCJXaXRoZHJhd0Fzc2V0Iiwid2l0aGRyYXdBbW91bnQiLCJib3Jyb3dBc3NldCIsImJvcnJvd0Ftb3VudCIsInJlcGF5QXNzZXQiLCJyZXBheUFtb3VudCIsImdldEFjY291bnREYXRhIiwidXNlciIsInBvb2wiLCJ3YWxsZXQiLCJaZXJvQWRkcmVzcyIsImNvbCIsImRlYnQiLCJoZiIsImdldFlvdXJTdXBwbGllcyIsInN1cHBsaWVzIiwiZmlsdGVyIiwidXNlclJlc2VydmUiLCJnZXRVc2VyUmVzZXJ2ZSIsInN1cHBseVByaW5jaXBhbCIsInN1cHBseSIsInByaW5jaXBhbCIsInN1cHBseUluZGV4IiwiaW5kZXgiLCJ2YWxpZFN1cHBsaWVzIiwicyIsInJlZHVjZSIsInN1bSIsImxlbmd0aCIsImFweSIsImdldFlvdXJCb3Jyb3dzIiwiYm9ycm93cyIsImJvcnJvd1ByaW5jaXBhbCIsImJvcnJvd0luZGV4IiwidmFsaWRCb3Jyb3dzIiwiYiIsImdldEFzc2V0c1RvQm9ycm93IiwicmVzZXJ2ZSIsInJlc2VydmVzIiwiaXNCb3Jyb3dhYmxlIiwiQm9vbGVhbiIsInJlc2VydmVDYXNoIiwibHR2QnBzIiwiTnVtYmVyIiwibGlxVGhyZXNob2xkQnBzIiwidmFsaWRBc3NldHMiLCJhIiwid3JhcEV0aCIsImFtb3VudEV0aCIsImRhdGEiLCJzZW5kVHJhbnNhY3Rpb24iLCJ0byIsIldFVEgiLCJ2YWx1ZSIsIndhaXQiLCJ1bndyYXBXZXRoIiwid2V0aCIsInJlZnJlc2giLCJ1cGRhdGVJbnRlcmVzdHMiLCJhY2NydWVQdWJsaWMiLCJnZXRVc2VyVG90YWxBdmFpbGFibGVCYWxhbmNlIiwibWF4QW1vdW50IiwiZ2V0VXNlclRvdGFsQXZhaWxhYmxlQmFsYW5jZUluVVNEIiwiZ2V0VG9rZW5zUGVyVVNEQW1vdW50IiwiaGVscGVyIiwibWF4UXR5Iiwib2JqZWN0aWZ5U3VwcGxpZWRBc3NldHMiLCJhc3NldHNMaXN0IiwiaSIsImxlbmRRdHkiLCJsZW50UXR5IiwibWF4U3VwcGx5QW1vdW50IiwicXR5IiwicHVzaCIsImxlbnRBcHkiLCJiYWxhbmNlSW5VU0QiLCJtYXhTdXBwbHkiLCJvYmplY3RpZnlCb3Jyb3dlZEFzc2V0cyIsImJvcnJvd3NMaXN0IiwiYm9ycm93UXR5IiwiYm9ycm93QXB5IiwiYm9ycm93ZWRCYWxJblVTRCIsIm1lcmdlT2JqZWN0aWZpZWRBc3NldHMiLCJyZXN1bHQiLCJ0b2tlbkxpc3QiLCJzb21lIiwiYXNzZXRMaXN0IiwiYXNzZXRPYmoiLCJpdGVtIiwiY29udGV4dFZhbHVlIiwiY29ubmVjdFdhbGxldCIsIlByb3ZpZGVyIiwiY2hpbGRyZW4iXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./src/context/LendState.js\n"));

/***/ })

});