"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "(pages-dir-browser)/./src/context/LendState.js":
/*!**********************************!*\
  !*** ./src/context/LendState.js ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(pages-dir-browser)/./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(pages-dir-browser)/./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lendContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lendContext */ \"(pages-dir-browser)/./src/context/lendContext.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ethers */ \"(pages-dir-browser)/./node_modules/ethers/lib.esm/index.js\");\n/* harmony import */ var _config_contracts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../config/contracts */ \"(pages-dir-browser)/./src/config/contracts.ts\");\n/* harmony import */ var _lib_tx__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../lib/tx */ \"(pages-dir-browser)/./src/lib/tx.ts\");\n/* harmony import */ var _addresses__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../addresses */ \"(pages-dir-browser)/./src/addresses.js\");\n/* harmony import */ var _abis__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../abis */ \"(pages-dir-browser)/./src/abis/index.js\");\n/* harmony import */ var _abis__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_abis__WEBPACK_IMPORTED_MODULE_6__);\n\nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n// Utility functions\nconst numberToEthers = (number)=>{\n    return ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.parseEther(number.toString());\n};\nconst reportError = (error)=>{\n    console.error(\"LendState Error:\", JSON.stringify(error));\n    console.error(\"Error details:\", error);\n};\nconst LendState = (props)=>{\n    _s();\n    //* Declaring all the states\n    // Set metamask details\n    const [metamaskDetails, setMetamaskDetails] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        provider: null,\n        networkName: null,\n        signer: null,\n        currentAccount: null,\n        chainId: null\n    });\n    // User assets and balances\n    const [userAssets, setUserAssets] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [supplyAssets, setSupplyAssets] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [assetsToBorrow, setAssetsToBorrow] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [yourBorrows, setYourBorrows] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    // Contract details\n    const [contract, setContract] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        lendingPoolContract: null,\n        oracleContract: null\n    });\n    // Summary data\n    const [supplySummary, setSupplySummary] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        totalUSDBalance: 0,\n        weightedAvgAPY: 0,\n        totalUSDCollateral: 0\n    });\n    const [borrowSummary, setBorrowSummary] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        totalUSDBalance: 0,\n        weightedAvgAPY: 0,\n        totalBorrowPowerUsed: 0\n    });\n    // Account data\n    const [accountData, setAccountData] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        collateralUSD: \"0\",\n        debtUSD: \"0\",\n        healthFactor: \"0\"\n    });\n    // Connect wallet\n    // const connectWallet = useCallback(async () => {\n    //   console.log(\"1. Connecting to wallet...\");\n    //   const { ethereum } = window;\n    //   const failMessage = \"Please install Metamask & connect your Metamask\";\n    //   try {\n    //     if (!ethereum) {\n    //       alert(failMessage);\n    //       return;\n    //     }\n    //     const accounts = await ethereum.request({\n    //       method: \"eth_requestAccounts\",\n    //     });\n    //     // Listen for account and chain changes\n    //     ethereum.on(\"chainChanged\", () => {\n    //       window.location.reload();\n    //     });\n    //     ethereum.on(\"accountsChanged\", () => {\n    //       window.location.reload();\n    //     });\n    //     const provider = new ethers.BrowserProvider(ethereum);\n    //     const network = await provider.getNetwork();\n    //     const networkName = network.name;\n    //     const signer = await provider.getSigner();\n    //     if (accounts.length) {\n    //       let currentAddress = accounts[0];\n    //       setMetamaskDetails({\n    //         provider: provider,\n    //         networkName: networkName,\n    //         signer: signer,\n    //         currentAccount: currentAddress,\n    //         chainId: Number(network.chainId),\n    //       });\n    //       console.log(\"Connected to wallet:\", currentAddress);\n    //     } else {\n    //       alert(failMessage);\n    //       return;\n    //     }\n    //   } catch (error) {\n    //     reportError(error);\n    //   }\n    // }, []);\n    const connectWallet = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[connectWallet]\": async ()=>{\n            console.log(\"1. Connecting to wallet...\");\n            const { ethereum } = window;\n            const failMessage = \"Please install Metamask & connect your Metamask\";\n            try {\n                if (!ethereum) {\n                    alert(failMessage);\n                    return;\n                }\n                const accounts = await ethereum.request({\n                    method: \"eth_requestAccounts\"\n                });\n                // Listen for account and chain changes\n                ethereum.on(\"chainChanged\", {\n                    \"LendState.useCallback[connectWallet]\": ()=>{\n                        window.location.reload();\n                    }\n                }[\"LendState.useCallback[connectWallet]\"]);\n                ethereum.on(\"accountsChanged\", {\n                    \"LendState.useCallback[connectWallet]\": ()=>{\n                        window.location.reload();\n                    }\n                }[\"LendState.useCallback[connectWallet]\"]);\n                const provider = new ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.BrowserProvider(ethereum);\n                const network = await provider.getNetwork();\n                const networkName = network.name;\n                const signer = await provider.getSigner();\n                if (accounts.length) {\n                    let currentAddress = accounts[0];\n                    setMetamaskDetails({\n                        provider: provider,\n                        networkName: networkName,\n                        signer: signer,\n                        currentAccount: currentAddress,\n                        chainId: Number(network.chainId)\n                    });\n                    console.log(\"Connected to wallet++++++++++++++++++++++++++++++++++:\", currentAddress);\n                } else {\n                    alert(failMessage);\n                    return;\n                }\n            } catch (error) {\n                reportError(error);\n            }\n        }\n    }[\"LendState.useCallback[connectWallet]\"], []);\n    // Get contract instance\n    const getContract = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[getContract]\": async (address, abi)=>{\n            if (!metamaskDetails.provider) return null;\n            const contract = new ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.Contract(address, abi, metamaskDetails.provider);\n            return contract;\n        }\n    }[\"LendState.useCallback[getContract]\"], [\n        metamaskDetails.provider\n    ]);\n    // Get user assets (balances)\n    const getUserAssets = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[getUserAssets]\": async ()=>{\n            console.log(\"2. Getting user assets...\");\n            try {\n                if (!metamaskDetails.provider || !metamaskDetails.currentAccount) return [];\n                const assets = await Promise.all(_config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.TOKENS.map({\n                    \"LendState.useCallback[getUserAssets]\": async (token)=>{\n                        let balance = \"0\";\n                        let balanceUSD = 0;\n                        try {\n                            if (token.isNative) {\n                                // ETH native balance\n                                const bal = await metamaskDetails.provider.getBalance(metamaskDetails.currentAccount);\n                                balance = ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.formatEther(bal);\n                            } else {\n                                // ERC20 token balance\n                                balance = await (0,_lib_tx__WEBPACK_IMPORTED_MODULE_4__.getTokenBalance)(metamaskDetails.provider, token.address, metamaskDetails.currentAccount, token.decimals);\n                            }\n                            // Get USD value\n                            const price = await getPriceUSD(token.address);\n                            balanceUSD = parseFloat(balance) * parseFloat(price);\n                            return {\n                                address: token.address,\n                                symbol: token.symbol,\n                                name: token.name,\n                                decimals: token.decimals,\n                                isNative: token.isNative,\n                                balance: balance,\n                                balanceUSD: balanceUSD,\n                                priceUSD: price\n                            };\n                        } catch (error) {\n                            console.warn(\"Error getting balance for \".concat(token.symbol, \":\"), error);\n                            return {\n                                address: token.address,\n                                symbol: token.symbol,\n                                name: token.name,\n                                decimals: token.decimals,\n                                isNative: token.isNative,\n                                balance: \"0\",\n                                balanceUSD: 0,\n                                priceUSD: \"0\"\n                            };\n                        }\n                    }\n                }[\"LendState.useCallback[getUserAssets]\"]));\n                setUserAssets(assets);\n                console.log(\"Got user assets:\", assets);\n                return assets;\n            } catch (error) {\n                reportError(error);\n                return [];\n            }\n        }\n    }[\"LendState.useCallback[getUserAssets]\"], [\n        metamaskDetails.provider,\n        metamaskDetails.currentAccount\n    ]);\n    // Get price in USD\n    const getPriceUSD = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[getPriceUSD]\": async (asset)=>{\n            if (!metamaskDetails.provider) return \"0\";\n            try {\n                const abi = [\n                    'function getAssetPrice1e18(address asset) view returns (uint256)'\n                ];\n                const oracle = new ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.Contract(_config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.PRICE_ORACLE, abi, metamaskDetails.provider);\n                const price = await oracle.getAssetPrice1e18(asset);\n                return ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.formatUnits(price, 18);\n            } catch (error) {\n                console.warn(\"Error getting price for \".concat(asset, \":\"), error);\n                return \"0\";\n            }\n        }\n    }[\"LendState.useCallback[getPriceUSD]\"], [\n        metamaskDetails.provider\n    ]);\n    // Get amount in USD\n    const getAmountInUSD = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[getAmountInUSD]\": async (address, amount)=>{\n            try {\n                const price = await getPriceUSD(address);\n                const amountInUSD = parseFloat(amount) * parseFloat(price);\n                return amountInUSD;\n            } catch (error) {\n                reportError(error);\n                return 0;\n            }\n        }\n    }[\"LendState.useCallback[getAmountInUSD]\"], [\n        getPriceUSD\n    ]);\n    // Approve tokens\n    const ApproveToContinue = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[ApproveToContinue]\": async (tokenAddress, approveAmount)=>{\n            if (!metamaskDetails.signer) {\n                throw new Error(\"No signer available\");\n            }\n            try {\n                const token = _config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.TOKENS.find({\n                    \"LendState.useCallback[ApproveToContinue].token\": (t)=>t.address.toLowerCase() === tokenAddress.toLowerCase()\n                }[\"LendState.useCallback[ApproveToContinue].token\"]);\n                if (!token) throw new Error(\"Token not found\");\n                await (0,_lib_tx__WEBPACK_IMPORTED_MODULE_4__.approveIfNeeded)(metamaskDetails.signer, tokenAddress, _config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.LENDING_POOL, approveAmount, token.decimals);\n                console.log(\"Token approved:\", tokenAddress);\n                return {\n                    status: 200,\n                    message: \"Transaction Successful...\"\n                };\n            } catch (error) {\n                reportError(error);\n                return {\n                    status: 500,\n                    message: error.message || error.reason\n                };\n            }\n        }\n    }[\"LendState.useCallback[ApproveToContinue]\"], [\n        metamaskDetails.signer\n    ]);\n    // Lend asset\n    const LendAsset = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[LendAsset]\": async (token, supplyAmount)=>{\n            if (!metamaskDetails.signer) {\n                throw new Error(\"No signer available\");\n            }\n            try {\n                const tokenInfo = _config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.TOKENS.find({\n                    \"LendState.useCallback[LendAsset].tokenInfo\": (t)=>t.address.toLowerCase() === token.toLowerCase()\n                }[\"LendState.useCallback[LendAsset].tokenInfo\"]);\n                if (!tokenInfo) throw new Error(\"Token not found\");\n                const amount = ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.parseUnits(supplyAmount, tokenInfo.decimals);\n                const tx = await (0,_lib_tx__WEBPACK_IMPORTED_MODULE_4__.lend)(metamaskDetails.signer, token, amount);\n                if (tx) {\n                    console.log(\"Asset lent successfully:\", token, supplyAmount);\n                    return {\n                        status: 200,\n                        message: \"Transaction Successful...\",\n                        hash: tx.hash\n                    };\n                }\n                throw new Error(\"Transaction failed\");\n            } catch (error) {\n                reportError(error);\n                return {\n                    status: 500,\n                    message: error.message || error.reason\n                };\n            }\n        }\n    }[\"LendState.useCallback[LendAsset]\"], [\n        metamaskDetails.signer\n    ]);\n    // Withdraw asset\n    const WithdrawAsset = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[WithdrawAsset]\": async (tokenAddress, withdrawAmount)=>{\n            if (!metamaskDetails.signer) {\n                throw new Error(\"No signer available\");\n            }\n            try {\n                const tokenInfo = _config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.TOKENS.find({\n                    \"LendState.useCallback[WithdrawAsset].tokenInfo\": (t)=>t.address.toLowerCase() === tokenAddress.toLowerCase()\n                }[\"LendState.useCallback[WithdrawAsset].tokenInfo\"]);\n                if (!tokenInfo) throw new Error(\"Token not found\");\n                const amount = ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.parseUnits(withdrawAmount, tokenInfo.decimals);\n                const tx = await (0,_lib_tx__WEBPACK_IMPORTED_MODULE_4__.withdraw)(metamaskDetails.signer, tokenAddress, amount);\n                if (tx) {\n                    console.log(\"Asset withdrawn successfully:\", tokenAddress, withdrawAmount);\n                    return {\n                        status: 200,\n                        message: \"Transaction Successful...\",\n                        hash: tx.hash\n                    };\n                }\n                throw new Error(\"Transaction failed\");\n            } catch (error) {\n                reportError(error);\n                return {\n                    status: 500,\n                    message: error.message || error.reason\n                };\n            }\n        }\n    }[\"LendState.useCallback[WithdrawAsset]\"], [\n        metamaskDetails.signer\n    ]);\n    // Borrow asset\n    const borrowAsset = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[borrowAsset]\": async (token, borrowAmount)=>{\n            if (!metamaskDetails.signer) {\n                throw new Error(\"No signer available\");\n            }\n            try {\n                const tokenInfo = _config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.TOKENS.find({\n                    \"LendState.useCallback[borrowAsset].tokenInfo\": (t)=>t.address.toLowerCase() === token.toLowerCase()\n                }[\"LendState.useCallback[borrowAsset].tokenInfo\"]);\n                if (!tokenInfo) throw new Error(\"Token not found\");\n                const amount = ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.parseUnits(borrowAmount, tokenInfo.decimals);\n                const tx = await (0,_lib_tx__WEBPACK_IMPORTED_MODULE_4__.borrow)(metamaskDetails.signer, token, amount);\n                if (tx) {\n                    console.log(\"Asset borrowed successfully:\", token, borrowAmount);\n                    return {\n                        status: 200,\n                        message: \"Transaction Successful...\",\n                        hash: tx.hash\n                    };\n                }\n                throw new Error(\"Transaction failed\");\n            } catch (error) {\n                reportError(error);\n                return {\n                    status: 500,\n                    message: error.message || error.reason\n                };\n            }\n        }\n    }[\"LendState.useCallback[borrowAsset]\"], [\n        metamaskDetails.signer\n    ]);\n    // Repay asset\n    const repayAsset = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[repayAsset]\": async (tokenAddress, repayAmount)=>{\n            if (!metamaskDetails.signer) {\n                throw new Error(\"No signer available\");\n            }\n            try {\n                const tokenInfo = _config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.TOKENS.find({\n                    \"LendState.useCallback[repayAsset].tokenInfo\": (t)=>t.address.toLowerCase() === tokenAddress.toLowerCase()\n                }[\"LendState.useCallback[repayAsset].tokenInfo\"]);\n                if (!tokenInfo) throw new Error(\"Token not found\");\n                const amount = ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.parseUnits(repayAmount, tokenInfo.decimals);\n                const tx = await (0,_lib_tx__WEBPACK_IMPORTED_MODULE_4__.repay)(metamaskDetails.signer, tokenAddress, amount);\n                if (tx) {\n                    console.log(\"Asset repaid successfully:\", tokenAddress, repayAmount);\n                    return {\n                        status: 200,\n                        message: \"Transaction Successful...\",\n                        hash: tx.hash\n                    };\n                }\n                throw new Error(\"Transaction failed\");\n            } catch (error) {\n                reportError(error);\n                return {\n                    status: 500,\n                    message: error.message || error.reason\n                };\n            }\n        }\n    }[\"LendState.useCallback[repayAsset]\"], [\n        metamaskDetails.signer\n    ]);\n    // Get account data (collateral, debt, health factor)\n    const getAccountData = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[getAccountData]\": async (user)=>{\n            try {\n                if (!metamaskDetails.provider) return null;\n                const pool = new ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.Contract(_addresses__WEBPACK_IMPORTED_MODULE_5__.LendingPoolAddress, _abis__WEBPACK_IMPORTED_MODULE_6__.LendingPoolABI.abi, metamaskDetails.provider);\n                const wallet = user || metamaskDetails.currentAccount || ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.ZeroAddress;\n                const [col, debt, hf] = await pool.getAccountData(wallet);\n                const accountData = {\n                    collateralUSD: ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.formatUnits(col, 18),\n                    debtUSD: ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.formatUnits(debt, 18),\n                    healthFactor: ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.formatUnits(hf, 18)\n                };\n                setAccountData(accountData);\n                return accountData;\n            } catch (error) {\n                reportError(error);\n                return null;\n            }\n        }\n    }[\"LendState.useCallback[getAccountData]\"], [\n        metamaskDetails.provider,\n        metamaskDetails.currentAccount\n    ]);\n    // Get your supplies\n    const getYourSupplies = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[getYourSupplies]\": async ()=>{\n            console.log(\"3. Getting your supplies...\");\n            try {\n                if (!metamaskDetails.provider || !metamaskDetails.currentAccount) return [];\n                const abi = [\n                    'function getUserReserve(address user, address asset) view returns (tuple(uint128 principal,uint128 index) supply, tuple(uint128 principal,uint128 index) borrow)'\n                ];\n                const pool = new ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.Contract(_config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.LENDING_POOL, abi, metamaskDetails.provider);\n                const supplies = await Promise.all(_config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.TOKENS.filter({\n                    \"LendState.useCallback[getYourSupplies]\": (t)=>!t.isNative\n                }[\"LendState.useCallback[getYourSupplies]\"]).map({\n                    \"LendState.useCallback[getYourSupplies]\": async (token)=>{\n                        try {\n                            const userReserve = await pool.getUserReserve(metamaskDetails.currentAccount, token.address);\n                            const supplyPrincipal = ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.formatUnits(userReserve.supply.principal, 18);\n                            const supplyIndex = userReserve.supply.index.toString();\n                            if (parseFloat(supplyPrincipal) > 0) {\n                                const price = await getPriceUSD(token.address);\n                                const balanceUSD = parseFloat(supplyPrincipal) * parseFloat(price);\n                                return {\n                                    address: token.address,\n                                    symbol: token.symbol,\n                                    name: token.name,\n                                    decimals: token.decimals,\n                                    supplyPrincipal: supplyPrincipal,\n                                    supplyIndex: supplyIndex,\n                                    balanceUSD: balanceUSD,\n                                    priceUSD: price\n                                };\n                            }\n                            return null;\n                        } catch (error) {\n                            console.warn(\"Error getting supply for \".concat(token.symbol, \":\"), error);\n                            return null;\n                        }\n                    }\n                }[\"LendState.useCallback[getYourSupplies]\"]));\n                const validSupplies = supplies.filter({\n                    \"LendState.useCallback[getYourSupplies].validSupplies\": (s)=>s !== null\n                }[\"LendState.useCallback[getYourSupplies].validSupplies\"]);\n                setSupplyAssets(validSupplies);\n                // Calculate summary\n                const totalUSDBalance = validSupplies.reduce({\n                    \"LendState.useCallback[getYourSupplies].totalUSDBalance\": (sum, asset)=>sum + asset.balanceUSD\n                }[\"LendState.useCallback[getYourSupplies].totalUSDBalance\"], 0);\n                const weightedAvgAPY = validSupplies.length > 0 ? validSupplies.reduce({\n                    \"LendState.useCallback[getYourSupplies]\": (sum, asset)=>sum + (asset.apy || 0)\n                }[\"LendState.useCallback[getYourSupplies]\"], 0) / validSupplies.length : 0;\n                const totalUSDCollateral = validSupplies.reduce({\n                    \"LendState.useCallback[getYourSupplies].totalUSDCollateral\": (sum, asset)=>sum + asset.balanceUSD\n                }[\"LendState.useCallback[getYourSupplies].totalUSDCollateral\"], 0);\n                setSupplySummary({\n                    totalUSDBalance,\n                    weightedAvgAPY,\n                    totalUSDCollateral\n                });\n                console.log(\"Got your supplies:\", validSupplies);\n                return validSupplies;\n            } catch (error) {\n                reportError(error);\n                return [];\n            }\n        }\n    }[\"LendState.useCallback[getYourSupplies]\"], [\n        metamaskDetails.provider,\n        metamaskDetails.currentAccount,\n        getPriceUSD\n    ]);\n    // Get your borrows\n    const getYourBorrows = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[getYourBorrows]\": async ()=>{\n            console.log(\"4. Getting your borrows...\");\n            try {\n                if (!metamaskDetails.provider || !metamaskDetails.currentAccount) return [];\n                const abi = [\n                    'function getUserReserve(address user, address asset) view returns (tuple(uint128 principal,uint128 index) supply, tuple(uint128 principal,uint128 index) borrow)'\n                ];\n                const pool = new ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.Contract(_config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.LENDING_POOL, abi, metamaskDetails.provider);\n                const borrows = await Promise.all(_config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.TOKENS.filter({\n                    \"LendState.useCallback[getYourBorrows]\": (t)=>!t.isNative\n                }[\"LendState.useCallback[getYourBorrows]\"]).map({\n                    \"LendState.useCallback[getYourBorrows]\": async (token)=>{\n                        try {\n                            const userReserve = await pool.getUserReserve(metamaskDetails.currentAccount, token.address);\n                            const borrowPrincipal = ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.formatUnits(userReserve.borrow.principal, 18);\n                            const borrowIndex = userReserve.borrow.index.toString();\n                            if (parseFloat(borrowPrincipal) > 0) {\n                                const price = await getPriceUSD(token.address);\n                                const balanceUSD = parseFloat(borrowPrincipal) * parseFloat(price);\n                                return {\n                                    address: token.address,\n                                    symbol: token.symbol,\n                                    name: token.name,\n                                    decimals: token.decimals,\n                                    borrowPrincipal: borrowPrincipal,\n                                    borrowIndex: borrowIndex,\n                                    balanceUSD: balanceUSD,\n                                    priceUSD: price\n                                };\n                            }\n                            return null;\n                        } catch (error) {\n                            console.warn(\"Error getting borrow for \".concat(token.symbol, \":\"), error);\n                            return null;\n                        }\n                    }\n                }[\"LendState.useCallback[getYourBorrows]\"]));\n                const validBorrows = borrows.filter({\n                    \"LendState.useCallback[getYourBorrows].validBorrows\": (b)=>b !== null\n                }[\"LendState.useCallback[getYourBorrows].validBorrows\"]);\n                setYourBorrows(validBorrows);\n                // Calculate summary\n                const totalUSDBalance = validBorrows.reduce({\n                    \"LendState.useCallback[getYourBorrows].totalUSDBalance\": (sum, asset)=>sum + asset.balanceUSD\n                }[\"LendState.useCallback[getYourBorrows].totalUSDBalance\"], 0);\n                const weightedAvgAPY = validBorrows.length > 0 ? validBorrows.reduce({\n                    \"LendState.useCallback[getYourBorrows]\": (sum, asset)=>sum + (asset.apy || 0)\n                }[\"LendState.useCallback[getYourBorrows]\"], 0) / validBorrows.length : 0;\n                const totalBorrowPowerUsed = totalUSDBalance;\n                setBorrowSummary({\n                    totalUSDBalance,\n                    weightedAvgAPY,\n                    totalBorrowPowerUsed\n                });\n                console.log(\"Got your borrows:\", validBorrows);\n                return validBorrows;\n            } catch (error) {\n                reportError(error);\n                return [];\n            }\n        }\n    }[\"LendState.useCallback[getYourBorrows]\"], [\n        metamaskDetails.provider,\n        metamaskDetails.currentAccount,\n        getPriceUSD\n    ]);\n    // Get assets to borrow\n    const getAssetsToBorrow = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[getAssetsToBorrow]\": async ()=>{\n            console.log(\"5. Getting assets to borrow...\");\n            try {\n                if (!metamaskDetails.provider) return [];\n                const abi = [\n                    'function reserves(address) view returns (uint128 reserveCash, uint128 totalDebtPrincipal, uint128 liquidityIndex, uint128 variableBorrowIndex, uint64 liquidityRateRayPerSec, uint64 variableBorrowRateRayPerSec, uint16 reserveFactorBps, uint16 ltvBps, uint16 liqThresholdBps, uint16 liqBonusBps, uint16 closeFactorBps, uint8 decimals, bool isBorrowable, uint16 optimalUBps, uint64 baseRateRayPerSec, uint64 slope1RayPerSec, uint64 slope2RayPerSec, uint40 lastUpdate)'\n                ];\n                const pool = new ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.Contract(_config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.LENDING_POOL, abi, metamaskDetails.provider);\n                const assets = await Promise.all(_config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.TOKENS.filter({\n                    \"LendState.useCallback[getAssetsToBorrow]\": (t)=>!t.isNative\n                }[\"LendState.useCallback[getAssetsToBorrow]\"]).map({\n                    \"LendState.useCallback[getAssetsToBorrow]\": async (token)=>{\n                        try {\n                            const reserve = await pool.reserves(token.address);\n                            const isBorrowable = Boolean(reserve.isBorrowable);\n                            const reserveCash = ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.formatUnits(reserve.reserveCash, 18);\n                            const price = await getPriceUSD(token.address);\n                            if (isBorrowable && parseFloat(reserveCash) > 0) {\n                                return {\n                                    address: token.address,\n                                    symbol: token.symbol,\n                                    name: token.name,\n                                    decimals: token.decimals,\n                                    reserveCash: reserveCash,\n                                    isBorrowable: isBorrowable,\n                                    priceUSD: price,\n                                    ltvBps: Number(reserve.ltvBps),\n                                    liqThresholdBps: Number(reserve.liqThresholdBps)\n                                };\n                            }\n                            return null;\n                        } catch (error) {\n                            console.warn(\"Error getting borrow asset \".concat(token.symbol, \":\"), error);\n                            return null;\n                        }\n                    }\n                }[\"LendState.useCallback[getAssetsToBorrow]\"]));\n                const validAssets = assets.filter({\n                    \"LendState.useCallback[getAssetsToBorrow].validAssets\": (a)=>a !== null\n                }[\"LendState.useCallback[getAssetsToBorrow].validAssets\"]);\n                setAssetsToBorrow(validAssets);\n                console.log(\"Got assets to borrow:\", validAssets);\n                return validAssets;\n            } catch (error) {\n                reportError(error);\n                return [];\n            }\n        }\n    }[\"LendState.useCallback[getAssetsToBorrow]\"], [\n        metamaskDetails.provider,\n        getPriceUSD\n    ]);\n    // Wrap ETH to WETH\n    const wrapEth = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[wrapEth]\": async (amountEth)=>{\n            if (!metamaskDetails.signer) {\n                throw new Error(\"No signer available\");\n            }\n            try {\n                const data = '0xd0e30db0'; // deposit()\n                const tx = await metamaskDetails.signer.sendTransaction({\n                    to: _config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.WETH,\n                    value: ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.parseEther(amountEth),\n                    data\n                });\n                await tx.wait();\n                console.log(\"ETH wrapped to WETH:\", amountEth);\n                return {\n                    status: 200,\n                    message: \"Transaction Successful...\",\n                    hash: tx.hash\n                };\n            } catch (error) {\n                reportError(error);\n                return {\n                    status: 500,\n                    message: error.message || error.reason\n                };\n            }\n        }\n    }[\"LendState.useCallback[wrapEth]\"], [\n        metamaskDetails.signer\n    ]);\n    // Unwrap WETH to ETH\n    const unwrapWeth = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[unwrapWeth]\": async (amountEth)=>{\n            if (!metamaskDetails.signer) {\n                throw new Error(\"No signer available\");\n            }\n            try {\n                const abi = [\n                    'function withdraw(uint256 wad)'\n                ];\n                const weth = new ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.Contract(_config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.WETH, abi, metamaskDetails.signer);\n                const tx = await weth.withdraw(ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.parseEther(amountEth));\n                await tx.wait();\n                console.log(\"WETH unwrapped to ETH:\", amountEth);\n                return {\n                    status: 200,\n                    message: \"Transaction Successful...\",\n                    hash: tx.hash\n                };\n            } catch (error) {\n                reportError(error);\n                return {\n                    status: 500,\n                    message: error.message || error.reason\n                };\n            }\n        }\n    }[\"LendState.useCallback[unwrapWeth]\"], [\n        metamaskDetails.signer\n    ]);\n    // Refresh all data\n    const refresh = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[refresh]\": async ()=>{\n            try {\n                await Promise.all([\n                    getUserAssets(),\n                    getYourSupplies(),\n                    getYourBorrows(),\n                    getAssetsToBorrow(),\n                    getAccountData()\n                ]);\n                console.log(\"All data refreshed\");\n            } catch (error) {\n                reportError(error);\n            }\n        }\n    }[\"LendState.useCallback[refresh]\"], [\n        getUserAssets,\n        getYourSupplies,\n        getYourBorrows,\n        getAssetsToBorrow,\n        getAccountData\n    ]);\n    // Update interests (accrue)\n    const updateInterests = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[updateInterests]\": async (asset)=>{\n            if (!metamaskDetails.signer) {\n                throw new Error(\"No signer available\");\n            }\n            try {\n                const abi = [\n                    'function accruePublic(address asset)'\n                ];\n                const pool = new ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.Contract(_config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.LENDING_POOL, abi, metamaskDetails.signer);\n                const tx = await pool.accruePublic(asset);\n                await tx.wait();\n                console.log(\"Interests updated for asset:\", asset);\n                return {\n                    status: 200,\n                    message: \"Transaction Successful...\"\n                };\n            } catch (error) {\n                reportError(error);\n                return {\n                    status: 500,\n                    message: error.message || error.reason\n                };\n            }\n        }\n    }[\"LendState.useCallback[updateInterests]\"], [\n        metamaskDetails.signer\n    ]);\n    // Get user total available balance\n    const getUserTotalAvailableBalance = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[getUserTotalAvailableBalance]\": async ()=>{\n            try {\n                if (!metamaskDetails.provider || !metamaskDetails.currentAccount) return 0;\n                const abi = [\n                    'function getUserTotalAvailableBalanceInUSD(address user, uint256 assetType) view returns (uint256)'\n                ];\n                const pool = new ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.Contract(_config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.LENDING_POOL, abi, metamaskDetails.provider);\n                const maxAmount = await pool.getUserTotalAvailableBalanceInUSD(metamaskDetails.currentAccount, 1);\n                return Number(ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.formatUnits(maxAmount, 18));\n            } catch (error) {\n                reportError(error);\n                return 0;\n            }\n        }\n    }[\"LendState.useCallback[getUserTotalAvailableBalance]\"], [\n        metamaskDetails.provider,\n        metamaskDetails.currentAccount\n    ]);\n    // Get tokens per USD amount\n    const getTokensPerUSDAmount = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[getTokensPerUSDAmount]\": async (token, amount)=>{\n            try {\n                if (!metamaskDetails.provider) return 0;\n                const abi = [\n                    'function getTokensPerUSDAmount(address token, uint256 amount) view returns (uint256)'\n                ];\n                const helper = new ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.Contract(_config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.PRICE_ORACLE, abi, metamaskDetails.provider);\n                const maxQty = await helper.getTokensPerUSDAmount(token, ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.parseUnits(amount.toString(), 18));\n                return Number(ethers__WEBPACK_IMPORTED_MODULE_7__.ethers.formatUnits(maxQty, 18));\n            } catch (error) {\n                reportError(error);\n                return 0;\n            }\n        }\n    }[\"LendState.useCallback[getTokensPerUSDAmount]\"], [\n        metamaskDetails.provider\n    ]);\n    // Objectify supplied assets (format data)\n    const objectifySuppliedAssets = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[objectifySuppliedAssets]\": async (assets)=>{\n            const assetsList = [];\n            for(let i = 0; i < assets.length; i++){\n                const token = assets[i].token;\n                let lendQty = assets[i].lentQty;\n                const amountInUSD = await getAmountInUSD(token, lendQty);\n                lendQty = Number(assets[i].lentQty) / 1e18;\n                const maxSupplyAmount = await getUserTotalAvailableBalance();\n                const maxQty = await getTokensPerUSDAmount(token, maxSupplyAmount);\n                const qty = lendQty <= maxQty ? lendQty : maxQty;\n                assetsList.push({\n                    token: assets[i].token,\n                    balance: lendQty,\n                    apy: Number(assets[i].lentApy),\n                    balanceInUSD: amountInUSD,\n                    maxSupply: qty\n                });\n            }\n            return assetsList;\n        }\n    }[\"LendState.useCallback[objectifySuppliedAssets]\"], [\n        getAmountInUSD,\n        getUserTotalAvailableBalance,\n        getTokensPerUSDAmount\n    ]);\n    // Objectify borrowed assets (format data)\n    const objectifyBorrowedAssets = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[objectifyBorrowedAssets]\": async (assets)=>{\n            const borrowsList = [];\n            for(let i = 0; i < assets.length; i++){\n                const token = assets[i].token;\n                const borrowQty = assets[i].borrowQty;\n                const borrowApy = assets[i].borrowApy;\n                const amountInUSD = await getAmountInUSD(token, borrowQty);\n                borrowsList.push({\n                    token: token,\n                    borrowQty: Number(borrowQty),\n                    borrowApy: Number(borrowApy),\n                    borrowedBalInUSD: amountInUSD\n                });\n            }\n            return borrowsList;\n        }\n    }[\"LendState.useCallback[objectifyBorrowedAssets]\"], [\n        getAmountInUSD\n    ]);\n    // Merge objectified assets with token info\n    const mergeObjectifiedAssets = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"LendState.useCallback[mergeObjectifiedAssets]\": (assets)=>{\n            const result = _config_contracts__WEBPACK_IMPORTED_MODULE_3__.CONFIG.TOKENS.filter({\n                \"LendState.useCallback[mergeObjectifiedAssets].result\": (tokenList)=>{\n                    return assets.some({\n                        \"LendState.useCallback[mergeObjectifiedAssets].result\": (assetList)=>{\n                            return tokenList.address.toLowerCase() === assetList.token.toLowerCase();\n                        }\n                    }[\"LendState.useCallback[mergeObjectifiedAssets].result\"]);\n                }\n            }[\"LendState.useCallback[mergeObjectifiedAssets].result\"]).map({\n                \"LendState.useCallback[mergeObjectifiedAssets].result\": (assetObj)=>({\n                        ...assets.find({\n                            \"LendState.useCallback[mergeObjectifiedAssets].result\": (item)=>item.token.toLowerCase() === assetObj.address.toLowerCase()\n                        }[\"LendState.useCallback[mergeObjectifiedAssets].result\"]),\n                        ...assetObj\n                    })\n            }[\"LendState.useCallback[mergeObjectifiedAssets].result\"]);\n            return result;\n        }\n    }[\"LendState.useCallback[mergeObjectifiedAssets]\"], []);\n    // Context value\n    const contextValue = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)({\n        \"LendState.useMemo[contextValue]\": ()=>({\n                // State\n                metamaskDetails,\n                userAssets,\n                supplyAssets,\n                assetsToBorrow,\n                yourBorrows,\n                supplySummary,\n                borrowSummary,\n                accountData,\n                contract,\n                // Wallet functions\n                connectWallet,\n                refresh,\n                // Asset functions\n                getUserAssets,\n                getYourSupplies,\n                getYourBorrows,\n                getAssetsToBorrow,\n                // Transaction functions\n                ApproveToContinue,\n                LendAsset,\n                WithdrawAsset,\n                borrowAsset,\n                repayAsset,\n                // Utility functions\n                getContract,\n                getPriceUSD,\n                getAmountInUSD,\n                numberToEthers,\n                reportError,\n                // ETH/WETH functions\n                wrapEth,\n                unwrapWeth,\n                // Account functions\n                getAccountData,\n                getUserTotalAvailableBalance,\n                getTokensPerUSDAmount,\n                // Data processing functions\n                objectifySuppliedAssets,\n                objectifyBorrowedAssets,\n                mergeObjectifiedAssets,\n                // Interest functions\n                updateInterests\n            })\n    }[\"LendState.useMemo[contextValue]\"], [\n        metamaskDetails,\n        userAssets,\n        supplyAssets,\n        assetsToBorrow,\n        yourBorrows,\n        supplySummary,\n        borrowSummary,\n        accountData,\n        contract,\n        connectWallet,\n        refresh,\n        getUserAssets,\n        getYourSupplies,\n        getYourBorrows,\n        getAssetsToBorrow,\n        ApproveToContinue,\n        LendAsset,\n        WithdrawAsset,\n        borrowAsset,\n        repayAsset,\n        getContract,\n        getPriceUSD,\n        getAmountInUSD,\n        wrapEth,\n        unwrapWeth,\n        getAccountData,\n        getUserTotalAvailableBalance,\n        getTokensPerUSDAmount,\n        objectifySuppliedAssets,\n        objectifyBorrowedAssets,\n        mergeObjectifiedAssets,\n        updateInterests\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_lendContext__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Provider, {\n        value: contextValue,\n        children: props.children\n    }, void 0, false, {\n        fileName: \"D:\\\\Do_an2\\\\lendhub_v2\\\\lendhub-frontend-nextjs\\\\src\\\\context\\\\LendState.js\",\n        lineNumber: 834,\n        columnNumber: 5\n    }, undefined);\n};\n_s(LendState, \"TN1jeLZaelv9xP2tSeiJRiYdXAs=\");\n_c = LendState;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LendState);\nvar _c;\n$RefreshReg$(_c, \"LendState\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./src/context/LendState.js\n"));

/***/ })

});